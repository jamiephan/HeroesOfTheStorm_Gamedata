include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/SupportLib"

include "Lib1035AFB3_h"

//--------------------------------------------------------------------------------------------------
// Library: AutoPVE
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1035AFB3_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libSprt_InitVariables();
}

// Variable Initialization
bool lib1035AFB3_InitVariables_completed = false;

void lib1035AFB3_InitVariables () {
    if (lib1035AFB3_InitVariables_completed) {
        return;
    }

    lib1035AFB3_InitVariables_completed = true;

    lib1035AFB3_gv_goodHeroes = UnitGroupEmpty();
}

// Functions
void lib1035AFB3_gf_Setupheroglobals () {
    // Variable Declarations
    int lv_playerindex;
    unit lv_groupunit;
    int lv_testrun;

    // Automatic Variable Declarations
    const int autoF7E79A3A_ae = 10;
    const int autoF7E79A3A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_playerindex = 1;
    for ( ; ( (autoF7E79A3A_ai >= 0 && lv_playerindex <= autoF7E79A3A_ae) || (autoF7E79A3A_ai < 0 && lv_playerindex >= autoF7E79A3A_ae) ) ; lv_playerindex += autoF7E79A3A_ai ) {
        if ((UnitGetType(libGame_gv_players[lv_playerindex].lv_heroUnit) == "HeroCrusader")) {
            lib1035AFB3_gv_johanna = libGame_gv_players[lv_playerindex].lv_heroUnit;
            UnitGroupAdd(lib1035AFB3_gv_goodHeroes, lib1035AFB3_gv_johanna);
        }
        else if ((UnitGetType(libGame_gv_players[lv_playerindex].lv_heroUnit) == "HeroKelThuzad")) {
            lib1035AFB3_gv_kelThuzad = libGame_gv_players[lv_playerindex].lv_heroUnit;
            UnitGroupAdd(lib1035AFB3_gv_goodHeroes, lib1035AFB3_gv_kelThuzad);
        }
        else if ((UnitGetType(libGame_gv_players[lv_playerindex].lv_heroUnit) == "HeroAzmodan")) {
            lib1035AFB3_gv_azmodan = libGame_gv_players[lv_playerindex].lv_heroUnit;
            UnitGroupAdd(lib1035AFB3_gv_goodHeroes, lib1035AFB3_gv_azmodan);
        }
        else if ((UnitGetType(libGame_gv_players[lv_playerindex].lv_heroUnit) == "HeroWitchDoctor")) {
            lib1035AFB3_gv_nazeebo = libGame_gv_players[lv_playerindex].lv_heroUnit;
            UnitGroupAdd(lib1035AFB3_gv_goodHeroes, lib1035AFB3_gv_nazeebo);
        }
        else if ((UnitGetType(libGame_gv_players[lv_playerindex].lv_heroUnit) == "HeroGreymane")) {
            lib1035AFB3_gv_greymane = libGame_gv_players[lv_playerindex].lv_heroUnit;
            UnitGroupAdd(lib1035AFB3_gv_goodHeroes, lib1035AFB3_gv_greymane);
        }
        UnitBehaviorAdd(libGame_gv_players[lv_playerindex].lv_heroUnit, "Ultimate1Unlocked", libGame_gv_players[lv_playerindex].lv_heroUnit, 1);
    }
}

void lib1035AFB3_gf_TurnFightTriggers (bool lp_status) {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(lib1035AFB3_gt_CastJohannaabilitiesonCooldown, lp_status);
    TriggerEnable(lib1035AFB3_gt_CastGreymaneabilitiesonCooldown, lp_status);
    TriggerEnable(lib1035AFB3_gt_CastAzmodanabilitiesonCooldown, lp_status);
    TriggerEnable(lib1035AFB3_gt_CastNazeeboabilitiesonCooldown, lp_status);
    TriggerEnable(lib1035AFB3_gt_CastKelthuzadabilitiesonCooldown, lp_status);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Map
//--------------------------------------------------------------------------------------------------
bool lib1035AFB3_gt_InitializeMap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_testSection;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_testSection = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_testSection = AutomationLuaGlobalGetAsString("TestSection");
    if ((StringCase(lv_testSection, false) == "holdout")) {
        TriggerExecute(lib1035AFB3_gt_Initialize2ndWaveFight, true, true);
    }
    else if ((StringCase(lv_testSection, false) == "boss")) {
        TriggerExecute(lib1035AFB3_gt_InitializeBossFight, true, true);
    }
    ConsoleCommand("exit", true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1035AFB3_gt_InitializeMap_Init () {
    lib1035AFB3_gt_InitializeMap = TriggerCreate("lib1035AFB3_gt_InitializeMap_Func");
    TriggerAddEventMapInit(lib1035AFB3_gt_InitializeMap);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Boss Fight
//--------------------------------------------------------------------------------------------------
bool lib1035AFB3_gt_InitializeBossFight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerindex;
    unit lv_groupunit;
    int lv_testrun;

    // Automatic Variable Declarations
    const int auto56D0D90C_ae = 4;
    const int auto56D0D90C_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    ConsoleCommand("chat -perf boss", true, true);
    Wait(5.0, c_timeGame);
    ConsoleCommand("setcamerafollow 0", true, true);
    ConsoleCommand("free", true, true);
    lib1035AFB3_gf_Setupheroglobals();
    Wait(1.0, c_timeGame);
    lv_testrun = 1;
    for ( ; ( (auto56D0D90C_ai >= 0 && lv_testrun <= auto56D0D90C_ae) || (auto56D0D90C_ai < 0 && lv_testrun >= auto56D0D90C_ae) ) ; lv_testrun += auto56D0D90C_ai ) {
        PerfTestStart(StringExternal("Param/Value/lib_1035AFB3_27A71186"));
        TriggerEnable(lib1035AFB3_gt_GetFPS, true);
        TriggerExecute(lib1035AFB3_gt_BossFight, true, true);
        PerfTestStop();
        TriggerEnable(lib1035AFB3_gt_GetFPS, false);
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1035AFB3_gt_InitializeBossFight_Init () {
    lib1035AFB3_gt_InitializeBossFight = TriggerCreate("lib1035AFB3_gt_InitializeBossFight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize 2nd Wave Fight
//--------------------------------------------------------------------------------------------------
bool lib1035AFB3_gt_Initialize2ndWaveFight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerindex;
    unit lv_groupunit;
    int lv_testrun;

    // Automatic Variable Declarations
    const int autoB56DA8A3_ae = 4;
    const int autoB56DA8A3_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    ConsoleCommand("chat -perf holdout", true, true);
    Wait(5.0, c_timeGame);
    ConsoleCommand("setcamerafollow 0", true, true);
    lib1035AFB3_gf_Setupheroglobals();
    Wait(15.0, c_timeGame);
    ConsoleCommand("free", true, true);
    lv_testrun = 1;
    for ( ; ( (autoB56DA8A3_ai >= 0 && lv_testrun <= autoB56DA8A3_ae) || (autoB56DA8A3_ai < 0 && lv_testrun >= autoB56DA8A3_ae) ) ; lv_testrun += autoB56DA8A3_ai ) {
        PerfTestStart(StringExternal("Param/Value/lib_1035AFB3_FB214B9A"));
        TriggerEnable(lib1035AFB3_gt_GetFPS, true);
        TriggerExecute(lib1035AFB3_gt__2ndWaveFight, true, true);
        PerfTestStop();
        TriggerEnable(lib1035AFB3_gt_GetFPS, false);
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1035AFB3_gt_Initialize2ndWaveFight_Init () {
    lib1035AFB3_gt_Initialize2ndWaveFight = TriggerCreate("lib1035AFB3_gt_Initialize2ndWaveFight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2nd Wave Fight
//--------------------------------------------------------------------------------------------------
bool lib1035AFB3_gt__2ndWaveFight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_groupunit;
    int lv_positionint;
    int lv_playerindex;

    // Automatic Variable Declarations
    unitgroup auto5BDC4D8C_g;
    int auto5BDC4D8C_u;
    const int autoB0CEEDCE_ae = 5;
    const int autoB0CEEDCE_ai = 1;
    unitgroup autoAA7E722B_g;
    int autoAA7E722B_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_positionint = 0;
    auto5BDC4D8C_g = lib1035AFB3_gv_goodHeroes;
    auto5BDC4D8C_u = UnitGroupCount(auto5BDC4D8C_g, c_unitCountAll);
    for (;; auto5BDC4D8C_u -= 1) {
        lv_groupunit = UnitGroupUnitFromEnd(auto5BDC4D8C_g, auto5BDC4D8C_u);
        if (lv_groupunit == null) { break; }
        UnitBehaviorRemoveCategory(lv_groupunit, c_behaviorCategoryTemporary);
        UnitSetPosition(lv_groupunit, Point(25.0, (126 - lv_positionint)), false);
        UnitIssueOrder(lv_groupunit, Order(AbilityCommand("HoldFire", 1)), c_orderQueueReplace);
        lv_positionint += 2;
    }
    Wait(2.0, c_timeGame);
    UnitSetPosition(lib1035AFB3_gv_azmodan, Point(30.0, 119.0), false);
    UnitSetPosition(lib1035AFB3_gv_greymane, Point(30.0, 124.0), false);
    UnitSetPosition(lib1035AFB3_gv_nazeebo, Point(38.0, 117.0), false);
    UnitSetPosition(lib1035AFB3_gv_kelThuzad, Point(34.0, 116.0), false);
    Wait(0.0625, c_timeGame);
    UnitIssueOrder(lib1035AFB3_gv_nazeebo, OrderTargetingPoint(AbilityCommand("WitchDoctorGargantuan", 0), Point(38.0, 118.0)), c_orderQueueReplace);
    UnitIssueOrder(lib1035AFB3_gv_johanna, OrderTargetingPoint(AbilityCommand("CrusaderFallingSword", 0), Point(32.0, 122.0)), c_orderQueueReplace);
    UnitIssueOrder(lib1035AFB3_gv_johanna, Order(AbilityCommand("CrusaderIronSkin", 0)), c_orderQueueAddToEnd);
    lib1035AFB3_gf_TurnFightTriggers(true);
    Wait(20.0, c_timeGame);
    lib1035AFB3_gf_TurnFightTriggers(false);
    lv_positionint = 0;
    lv_playerindex = 1;
    for ( ; ( (autoB0CEEDCE_ai >= 0 && lv_playerindex <= autoB0CEEDCE_ae) || (autoB0CEEDCE_ai < 0 && lv_playerindex >= autoB0CEEDCE_ae) ) ; lv_playerindex += autoB0CEEDCE_ai ) {
        libSprt_gf_DEBUGRefreshCooldownsforUnit(lv_playerindex, libGame_gv_players[lv_playerindex].lv_heroUnit);
    }
    autoAA7E722B_g = lib1035AFB3_gv_goodHeroes;
    autoAA7E722B_u = UnitGroupCount(autoAA7E722B_g, c_unitCountAll);
    for (;; autoAA7E722B_u -= 1) {
        lv_groupunit = UnitGroupUnitFromEnd(autoAA7E722B_g, autoAA7E722B_u);
        if (lv_groupunit == null) { break; }
        UnitIssueOrder(lv_groupunit, Order(AbilityCommand("HoldFire", 1)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1035AFB3_gt__2ndWaveFight_Init () {
    lib1035AFB3_gt__2ndWaveFight = TriggerCreate("lib1035AFB3_gt__2ndWaveFight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss Fight
//--------------------------------------------------------------------------------------------------
bool lib1035AFB3_gt_BossFight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_groupunit;
    int lv_playerindex;

    // Automatic Variable Declarations
    unitgroup auto3D0B7601_g;
    int auto3D0B7601_u;
    const int autoFE46A58F_ae = 5;
    const int autoFE46A58F_ai = 1;
    unitgroup autoB7FC42C1_g;
    int autoB7FC42C1_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto3D0B7601_g = lib1035AFB3_gv_goodHeroes;
    auto3D0B7601_u = UnitGroupCount(auto3D0B7601_g, c_unitCountAll);
    for (;; auto3D0B7601_u -= 1) {
        lv_groupunit = UnitGroupUnitFromEnd(auto3D0B7601_g, auto3D0B7601_u);
        if (lv_groupunit == null) { break; }
        UnitBehaviorRemoveCategory(lv_groupunit, c_behaviorCategoryTemporary);
        UnitIssueOrder(lv_groupunit, Order(AbilityCommand("HoldFire", 1)), c_orderQueueReplace);
    }
    Wait(2.0, c_timeGame);
    UnitIssueOrder(lib1035AFB3_gv_johanna, OrderTargetingPoint(AbilityCommand("CrusaderFallingSword", 0), Point(62.0, 176.0)), c_orderQueueReplace);
    UnitIssueOrder(lib1035AFB3_gv_johanna, Order(AbilityCommand("CrusaderIronSkin", 0)), c_orderQueueAddToEnd);
    lib1035AFB3_gf_TurnFightTriggers(true);
    Wait(20.0, c_timeGame);
    lib1035AFB3_gf_TurnFightTriggers(false);
    lv_playerindex = 1;
    for ( ; ( (autoFE46A58F_ai >= 0 && lv_playerindex <= autoFE46A58F_ae) || (autoFE46A58F_ai < 0 && lv_playerindex >= autoFE46A58F_ae) ) ; lv_playerindex += autoFE46A58F_ai ) {
        libSprt_gf_DEBUGRefreshCooldownsforUnit(lv_playerindex, libGame_gv_players[lv_playerindex].lv_heroUnit);
    }
    autoB7FC42C1_g = lib1035AFB3_gv_goodHeroes;
    autoB7FC42C1_u = UnitGroupCount(autoB7FC42C1_g, c_unitCountAll);
    for (;; autoB7FC42C1_u -= 1) {
        lv_groupunit = UnitGroupUnitFromEnd(autoB7FC42C1_g, autoB7FC42C1_u);
        if (lv_groupunit == null) { break; }
        UnitIssueOrder(lv_groupunit, Order(AbilityCommand("HoldFire", 1)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1035AFB3_gt_BossFight_Init () {
    lib1035AFB3_gt_BossFight = TriggerCreate("lib1035AFB3_gt_BossFight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Get FPS
//--------------------------------------------------------------------------------------------------
bool lib1035AFB3_gt_GetFPS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PerfTestGetFPS();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1035AFB3_gt_GetFPS_Init () {
    lib1035AFB3_gt_GetFPS = TriggerCreate("lib1035AFB3_gt_GetFPS_Func");
    TriggerEnable(lib1035AFB3_gt_GetFPS, false);
    TriggerAddEventTimePeriodic(lib1035AFB3_gt_GetFPS, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cast Johanna abilities on Cooldown
//--------------------------------------------------------------------------------------------------
bool lib1035AFB3_gt_CastJohannaabilitiesonCooldown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gf_IsAbilityOnCooldown(lib1035AFB3_gv_johanna, "CrusaderPunish") == false)) {
        UnitIssueOrder(lib1035AFB3_gv_johanna, OrderTargetingPoint(AbilityCommand("CrusaderPunish", 0), UnitGetGoalPosition(lib1035AFB3_gv_johanna)), c_orderQueueReplace);
        return true;
    }
    else if ((libCore_gf_IsAbilityOnCooldown(lib1035AFB3_gv_johanna, "CrusaderCondemn") == false)) {
        UnitIssueOrder(lib1035AFB3_gv_johanna, Order(AbilityCommand("CrusaderCondemn", 0)), c_orderQueueReplace);
        return true;
    }
    else if ((libCore_gf_IsAbilityOnCooldown(lib1035AFB3_gv_johanna, "CrusaderShieldGlare") == false)) {
        UnitIssueOrder(lib1035AFB3_gv_johanna, OrderTargetingPoint(AbilityCommand("CrusaderShieldGlare", 0), UnitGetGoalPosition(lib1035AFB3_gv_johanna)), c_orderQueueReplace);
        return true;
    }
    else if ((libCore_gf_IsAbilityOnCooldown(lib1035AFB3_gv_johanna, "CrusaderIronSkin") == false)) {
        UnitIssueOrder(lib1035AFB3_gv_johanna, Order(AbilityCommand("CrusaderIronSkin", 0)), c_orderQueueReplace);
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1035AFB3_gt_CastJohannaabilitiesonCooldown_Init () {
    lib1035AFB3_gt_CastJohannaabilitiesonCooldown = TriggerCreate("lib1035AFB3_gt_CastJohannaabilitiesonCooldown_Func");
    TriggerEnable(lib1035AFB3_gt_CastJohannaabilitiesonCooldown, false);
    TriggerAddEventTimePeriodic(lib1035AFB3_gt_CastJohannaabilitiesonCooldown, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cast Azmodan abilities on Cooldown
//--------------------------------------------------------------------------------------------------
bool lib1035AFB3_gt_CastAzmodanabilitiesonCooldown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lib1035AFB3_gv_azmodan, Order(AbilityCommand("AzmodanAllShallBurnCancel", 0)), c_orderQueueReplace);
    if ((libCore_gf_IsAbilityOnCooldown(lib1035AFB3_gv_azmodan, "AzmodanGlobeOfAnnihilation") == false)) {
        UnitIssueOrder(lib1035AFB3_gv_azmodan, OrderTargetingPoint(AbilityCommand("AzmodanGlobeOfAnnihilation", 0), UnitGetGoalPosition(lib1035AFB3_gv_azmodan)), c_orderQueueReplace);
        return true;
    }
    else if ((UnitAbilityChargeInfo(lib1035AFB3_gv_azmodan, AbilityCommand("AzmodanSummonDemonWarrior", 0), c_unitAbilChargeCountLeft) >= 1)) {
        UnitIssueOrder(lib1035AFB3_gv_azmodan, OrderTargetingPoint(AbilityCommand("AzmodanSummonDemonWarrior", 0), UnitGetGoalPosition(lib1035AFB3_gv_azmodan)), c_orderQueueReplace);
        return true;
    }
    else if ((libCore_gf_IsAbilityOnCooldown(lib1035AFB3_gv_azmodan, "AzmodanDemonicInvasion") == false)) {
        UnitIssueOrder(lib1035AFB3_gv_azmodan, OrderTargetingPoint(AbilityCommand("AzmodanDemonicInvasion", 0), UnitGetGoalPosition(lib1035AFB3_gv_azmodan)), c_orderQueueReplace);
        return true;
    }
    if ((libCore_gf_IsAbilityOnCooldown(lib1035AFB3_gv_azmodan, "AzmodanAllShallBurn") == false)) {
        UnitIssueOrder(lib1035AFB3_gv_azmodan, OrderTargetingUnit(AbilityCommand("AzmodanAllShallBurn", 0), UnitGroupClosestToPoint(UnitGroupAlliance(1, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lib1035AFB3_gv_azmodan), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lib1035AFB3_gv_azmodan))), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1035AFB3_gt_CastAzmodanabilitiesonCooldown_Init () {
    lib1035AFB3_gt_CastAzmodanabilitiesonCooldown = TriggerCreate("lib1035AFB3_gt_CastAzmodanabilitiesonCooldown_Func");
    TriggerEnable(lib1035AFB3_gt_CastAzmodanabilitiesonCooldown, false);
    TriggerAddEventTimePeriodic(lib1035AFB3_gt_CastAzmodanabilitiesonCooldown, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cast Greymane abilities on Cooldown
//--------------------------------------------------------------------------------------------------
bool lib1035AFB3_gt_CastGreymaneabilitiesonCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_searchdistance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_searchdistance = 10.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lib1035AFB3_gv_greymane, "GreymaneWorgenForm") == true)) {
        if ((libCore_gf_IsAbilityOnCooldown(lib1035AFB3_gv_greymane, "GreymaneRazorSwipe") == false)) {
            UnitIssueOrder(lib1035AFB3_gv_greymane, OrderTargetingPoint(AbilityCommand("GreymaneRazorSwipe", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(1, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lib1035AFB3_gv_greymane), lv_searchdistance), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lib1035AFB3_gv_greymane)))), c_orderQueueReplace);
            return true;
        }
        else if ((libCore_gf_IsAbilityOnCooldown(lib1035AFB3_gv_greymane, "GreymaneInnerBeast") == false)) {
            UnitIssueOrder(lib1035AFB3_gv_greymane, Order(AbilityCommand("GreymaneInnerBeast", 0)), c_orderQueueReplace);
            return true;
        }
        else if ((libCore_gf_IsAbilityOnCooldown(lib1035AFB3_gv_greymane, "GreymaneGoForTheThroat") == false)) {
            UnitIssueOrder(lib1035AFB3_gv_greymane, OrderTargetingUnit(AbilityCommand("GreymaneGoForTheThroat", 0), UnitGroupClosestToPoint(UnitGroupAlliance(1, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lib1035AFB3_gv_greymane), lv_searchdistance), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lib1035AFB3_gv_greymane))), c_orderQueueReplace);
            return true;
        }
    }
    else {
        if ((libCore_gf_IsAbilityOnCooldown(lib1035AFB3_gv_greymane, "GreymaneDarkflight") == false)) {
            UnitIssueOrder(lib1035AFB3_gv_greymane, OrderTargetingUnit(AbilityCommand("GreymaneDarkflight", 0), UnitGroupClosestToPoint(UnitGroupAlliance(1, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lib1035AFB3_gv_greymane), lv_searchdistance), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lib1035AFB3_gv_greymane))), c_orderQueueReplace);
            return true;
        }
        else if ((libCore_gf_IsAbilityOnCooldown(lib1035AFB3_gv_greymane, "GreymaneInnerBeast") == false)) {
            UnitIssueOrder(lib1035AFB3_gv_greymane, Order(AbilityCommand("GreymaneInnerBeast", 0)), c_orderQueueReplace);
            return true;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1035AFB3_gt_CastGreymaneabilitiesonCooldown_Init () {
    lib1035AFB3_gt_CastGreymaneabilitiesonCooldown = TriggerCreate("lib1035AFB3_gt_CastGreymaneabilitiesonCooldown_Func");
    TriggerEnable(lib1035AFB3_gt_CastGreymaneabilitiesonCooldown, false);
    TriggerAddEventTimePeriodic(lib1035AFB3_gt_CastGreymaneabilitiesonCooldown, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cast Nazeebo abilities on Cooldown
//--------------------------------------------------------------------------------------------------
bool lib1035AFB3_gt_CastNazeeboabilitiesonCooldown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gf_IsAbilityOnCooldown(lib1035AFB3_gv_nazeebo, "WitchDoctorZombieWall") == false)) {
        UnitIssueOrder(lib1035AFB3_gv_nazeebo, OrderTargetingPoint(AbilityCommand("WitchDoctorZombieWall", 0), UnitGetGoalPosition(lib1035AFB3_gv_nazeebo)), c_orderQueueReplace);
        return true;
    }
    else if ((libCore_gf_IsAbilityOnCooldown(lib1035AFB3_gv_nazeebo, "WitchDoctorCorpseSpiders") == false)) {
        UnitIssueOrder(lib1035AFB3_gv_nazeebo, OrderTargetingPoint(AbilityCommand("WitchDoctorCorpseSpiders", 0), UnitGetGoalPosition(lib1035AFB3_gv_nazeebo)), c_orderQueueReplace);
        return true;
    }
    else if ((UnitAbilityChargeInfo(lib1035AFB3_gv_nazeebo, AbilityCommand("WitchDoctorPlagueofToads", 0), c_unitAbilChargeCountLeft) >= 1)) {
        UnitIssueOrder(lib1035AFB3_gv_nazeebo, OrderTargetingPoint(AbilityCommand("WitchDoctorPlagueofToads", 0), UnitGetGoalPosition(lib1035AFB3_gv_nazeebo)), c_orderQueueReplace);
        return true;
    }
    else if ((libCore_gf_IsAbilityOnCooldown(lib1035AFB3_gv_nazeebo, "WitchDoctorGargantuanStomp") == false)) {
        UnitIssueOrder(lib1035AFB3_gv_nazeebo, Order(AbilityCommand("WitchDoctorGargantuanStomp", 0)), c_orderQueueReplace);
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1035AFB3_gt_CastNazeeboabilitiesonCooldown_Init () {
    lib1035AFB3_gt_CastNazeeboabilitiesonCooldown = TriggerCreate("lib1035AFB3_gt_CastNazeeboabilitiesonCooldown_Func");
    TriggerEnable(lib1035AFB3_gt_CastNazeeboabilitiesonCooldown, false);
    TriggerAddEventTimePeriodic(lib1035AFB3_gt_CastNazeeboabilitiesonCooldown, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cast Kel'thuzad abilities on Cooldown
//--------------------------------------------------------------------------------------------------
bool lib1035AFB3_gt_CastKelthuzadabilitiesonCooldown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gf_IsAbilityOnCooldown(lib1035AFB3_gv_kelThuzad, "KelThuzadFrozenTomb") == false)) {
        UnitIssueOrder(lib1035AFB3_gv_kelThuzad, OrderTargetingUnit(AbilityCommand("KelThuzadFrozenTomb", 0), UnitGroupClosestToPoint(UnitGroupAlliance(1, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lib1035AFB3_gv_kelThuzad), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lib1035AFB3_gv_kelThuzad))), c_orderQueueReplace);
        return true;
    }
    else if ((libCore_gf_IsAbilityOnCooldown(lib1035AFB3_gv_kelThuzad, "KelThuzadDeathAndDecay") == false)) {
        UnitIssueOrder(lib1035AFB3_gv_kelThuzad, OrderTargetingPoint(AbilityCommand("KelThuzadDeathAndDecay", 0), UnitGetGoalPosition(lib1035AFB3_gv_kelThuzad)), c_orderQueueReplace);
        return true;
    }
    else if ((libCore_gf_IsAbilityOnCooldown(lib1035AFB3_gv_kelThuzad, "KelThuzadChains") == false)) {
        UnitIssueOrder(lib1035AFB3_gv_kelThuzad, OrderTargetingPoint(AbilityCommand("KelThuzadChains", 0), UnitGetGoalPosition(lib1035AFB3_gv_nazeebo)), c_orderQueueReplace);
        return true;
    }
    else if ((libCore_gf_IsAbilityOnCooldown(lib1035AFB3_gv_kelThuzad, "KelThuzadFrostNova") == false)) {
        UnitIssueOrder(lib1035AFB3_gv_kelThuzad, OrderTargetingPoint(AbilityCommand("KelThuzadFrostNova", 0), UnitGetGoalPosition(lib1035AFB3_gv_nazeebo)), c_orderQueueReplace);
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1035AFB3_gt_CastKelthuzadabilitiesonCooldown_Init () {
    lib1035AFB3_gt_CastKelthuzadabilitiesonCooldown = TriggerCreate("lib1035AFB3_gt_CastKelthuzadabilitiesonCooldown_Func");
    TriggerEnable(lib1035AFB3_gt_CastKelthuzadabilitiesonCooldown, false);
    TriggerAddEventTimePeriodic(lib1035AFB3_gt_CastKelthuzadabilitiesonCooldown, 1.0, c_timeGame);
}

void lib1035AFB3_InitTriggers () {
    lib1035AFB3_gt_InitializeMap_Init();
    lib1035AFB3_gt_InitializeBossFight_Init();
    lib1035AFB3_gt_Initialize2ndWaveFight_Init();
    lib1035AFB3_gt__2ndWaveFight_Init();
    lib1035AFB3_gt_BossFight_Init();
    lib1035AFB3_gt_GetFPS_Init();
    lib1035AFB3_gt_CastJohannaabilitiesonCooldown_Init();
    lib1035AFB3_gt_CastAzmodanabilitiesonCooldown_Init();
    lib1035AFB3_gt_CastGreymaneabilitiesonCooldown_Init();
    lib1035AFB3_gt_CastNazeeboabilitiesonCooldown_Init();
    lib1035AFB3_gt_CastKelthuzadabilitiesonCooldown_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1035AFB3_InitLib_completed = false;

void lib1035AFB3_InitLib () {
    if (lib1035AFB3_InitLib_completed) {
        return;
    }

    lib1035AFB3_InitLib_completed = true;

    lib1035AFB3_InitLibraries();
    lib1035AFB3_InitVariables();
    lib1035AFB3_InitTriggers();
}

