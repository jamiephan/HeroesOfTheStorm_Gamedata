include "TriggerLibs/HeroesLib"

//--------------------------------------------------------------------------------------------------
// Library: Arena Mode
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libAREN_ge_ArenaMechanics_InvalidMechanic = 0;

// Constants
const int libAREN_gv_aRM_MechanicsCountMax_C = 20;
const fixed libAREN_gv_aRM_OpenTheGatesTime_C = 20.0;
const int libAREN_gv_aRM_MechanicsCountToPick_C = 5;
const fixed libAREN_gv_gameOver_CameraPanTime_C = 2.0;
const fixed libAREN_gv_gameOver_CoreAnimationWaitTime_C = 10.0;
const int libAREN_gv_aRM_HeroStartingLevel_C = 10;
const string libAREN_gv_eventID_MapTributeWarning_C3 = "ArenaMapStarts";
const string libAREN_gv_eventID_MapTributeWarning_C = "ArenaRoundStarts";
const string libAREN_gv_eventParam_MapTributeWarning_Position_C = "Round";
const string libAREN_gv_eventID_MapTributeWarning_C2 = "ArenaRoundEnds";
const string libAREN_gv_eventParam_MapTributeWarning_Position_C2 = "Round";
const string libAREN_gv_eventID_Arena_MechanicActivated_C = "ArenaMechanicActivated";
const int libAREN_gv_aRM_TotalWallaCount_C = 3;
const int libAREN_gv_aRM_CrowdStands_MaxSectionsPerSubmap_C = 8;
const int libAREN_gv_aRM_CrowdStands_MaxEmittersPerSection_C = 5;
const int libAREN_gv_aRM_WheresWeirdoMaxPoints_C = 10;
const int libAREN_gv_aRM_WheresWeirdoRespawnDelay_C = 2;

// Structures
struct libAREN_gs_ArenaMechanicsData {
    int lv_mechanics;
    text lv_name;
    string lv_mechanicImageOrder;
    string lv_mechanicImageChaos;
    text lv_mechanicInfo;
    trigger lv_initCallback;
    region lv_playableRegion;
    unit[libCore_gv_bALMaxTeams + 1] lv_recallUnit;
    region lv_cameraBoundsRegion;
};

struct libAREN_gs_ARM_ArenaVOPresetLabels {
    int lv_chooseHero;
    int lv_timeRunningOut;
    int lv_crazyMode;
    int lv_fountainDestroyedAlly;
    int lv_fountainDestroyedEnemy;
    int lv_fountainDestroyedRed;
    int lv_fountainDestroyedBlue;
    int lv_roundOneVictory;
    int lv_roundOneLoss;
    int lv_roundOneBlueWins;
    int lv_roundOneRedWins;
    int lv_roundTwoVictoryTie;
    int lv_roundTwoLossTie;
    int lv_roundTwoBlueWinsTie;
    int lv_roundTwoRedWinsTie;
    int lv_roundTwoVictoryFinish;
    int lv_roundTwoLossFinish;
    int lv_roundTwoBlueWinsFinish;
    int lv_roundTwoRedWinsFinish;
    int lv_roundThreeVictory;
    int lv_roundThreeLoss;
    int lv_roundThreeBlueWins;
    int lv_roundThreeRedWins;
};

// Variable Declarations
int libAREN_gv_victoriesCount;
bool libAREN_gv_OverrideMapShuffleSettings;
bool libAREN_gv_gameOver_DetermineWinningTeamHasRun;
int libAREN_gv_aRM_MechanicsCount;
libAREN_gs_ArenaMechanicsData[libAREN_gv_aRM_MechanicsCountMax_C + 1] libAREN_gv_aRM_MechanicData;
trigger libAREN_gv_aRM_MechanicOrderCallback;
int libAREN_gv_aRM_MechanicsPickedCount;
int[libAREN_gv_aRM_MechanicsCountMax_C + 1] libAREN_gv_aRM_MechanicsPicked;
int[3] libAREN_gv_aRM_RoundScore;
int libAREN_gv_aRM_CurrentRoundIndex;
bool libAREN_gv_aRM_BaseRevealersEnabled;
int libAREN_gv_aRM_RoundWinningTeam;
fixed libAREN_gv_aRM_VictorySequenceDelay;
bool libAREN_gv_aRM_VictorySequencePlaying;
bool libAREN_gv_aRM_PanCameraToCore;
int[libCore_gv_bALMaxTeams + 1] libAREN_gv_aRM_ScoreAtRoundStart;
soundlink[libAREN_gv_aRM_TotalWallaCount_C + 1] libAREN_gv_aRM_WallaSounds;
sound libAREN_gv_aRM_WallaFinaleSound;
int libAREN_gv_aRM_CurrentWallaLevel;
sound libAREN_gv_aRM_CurrentWallaSound;
bool libAREN_gv_aRM_PlayCrowdCheerSounds;
point[libAREN_gv_aRM_MechanicsCountMax_C + 1][libAREN_gv_aRM_CrowdStands_MaxSectionsPerSubmap_C + 1][libAREN_gv_aRM_CrowdStands_MaxEmittersPerSection_C + 1] libAREN_gv_aRM_CrowdStands_SoundEmitters;
int[libAREN_gv_aRM_MechanicsCountToPick_C + 1] libAREN_gv_aRM_CrowdStands_SectionCountPerSubmap;
int[libAREN_gv_aRM_MechanicsCountToPick_C + 1][libAREN_gv_aRM_CrowdStands_MaxSectionsPerSubmap_C + 1] libAREN_gv_aRM_CrowdStands_EmitterCountPerSection;
libAREN_gs_ARM_ArenaVOPresetLabels libAREN_gv_aRM_ArenaVO;
point[libAREN_gv_aRM_MechanicsCountToPick_C + 1][libAREN_gv_aRM_WheresWeirdoMaxPoints_C + 1] libAREN_gv_aRM_WheresWeirdoPoints;
point libAREN_gv_aRM_WheresWeirdoLastPoint;
unit libAREN_gv_aRM_WheresWeirdoUnit;
bool libAREN_gv_showCoreStatusBars;
bool libAREN_gv_playRoundOverVO;
int libAREN_gv_aRM_UI_TeamScorePanel;
int libAREN_gv_aRM_UI_RoundOverVictoryDialog;
int libAREN_gv_aRM_UI_RoundOverDefeatDialog;
bool libAREN_gv_aRM_Debug_ShowMultikillCheers;
bool libAREN_gv_aRM_Debug_ShowEmittersWhenEmitting;

// Function Declarations
void libAREN_gf_ArenaInitMod ();
void libAREN_gf_MapRavenLordTributeWarning3 (trigger t);
void libAREN_gf_SendEventMapTributeWarning3 ();
void libAREN_gf_MapRavenLordTributeWarning (trigger t);
void libAREN_gf_SendEventMapTributeWarning (int lp_position);
int libAREN_gf_MapTributeWarningPosition ();
void libAREN_gf_MapRavenLordTributeWarning2 (trigger t);
void libAREN_gf_SendEventMapTributeWarning2 (int lp_position);
int libAREN_gf_MapTributeWarningPosition2 ();
void libAREN_gf_ArenaMechanicActivated (trigger t);
void libAREN_gf_SendEventArenaMechanicActivated ();
void libAREN_gf_ArenaRegisterMechanic (text lp_name, string lp_mechanicImageOrder, string lp_mechanicImageChaos, text lp_mechanicInfo, trigger lp_initCallback, region lp_region, region lp_cameraBounds);
void libAREN_gf_ArenaSetMechanicOrderCallback (trigger lp_mechanicOrderCallback);
int libAREN_gf_LastregisteredArenaMechanic ();
int libAREN_gf_ArenaMechanicIndex (int lp_mechanic);
int libAREN_gf_ArenaMechanicFromIndex (int lp_index);
int libAREN_gf_ArenaCurrentLevelIndex ();
int libAREN_gf_ArenaCurrentRoundIndex ();
int libAREN_gf_ArenaCurrentMechanicId ();
void libAREN_gf_ArenaAddRound (int lp_mechanicId);
void libAREN_gf_ARM_PickMechanics ();
void libAREN_gf_ARM_StartRound ();
void libAREN_gf_UIDebugPanelSpawnOrSwapHeroForPlayer (int lp_player);
void libAREN_gf_ARM_GameScoreUpdate (int lp_winningTeam);
void libAREN_gf_ARM_RoundOver ();
void libAREN_gf_ARM_EndRound ();
void libAREN_gf_ARM_EndRoundResetDeathTimerFrame ();
void libAREN_gf_ARM_ClearHeroDeathEffect (int lp_player);
void libAREN_gf_ARM_GameOver ();
void libAREN_gf_ARM_UpdateWallaLevel (int lp_newCheerLevel);
void libAREN_gf_ARM_PlayNewCrowdCheerForTeam (soundlink lp_sound, int lp_team);
void libAREN_gf_ARM_InitializeCrowdCheerEmitters ();
void libAREN_gf_ARM_Play3DCrowdCheersinStandsFavoringTeam (int lp_killingTeam);
void libAREN_gf_ARM_AddArenaVO ();
void libAREN_gf_ARM_ArenaPlayRoundOverAnnouncement (int lp_winningTeam, int lp_roundIndex);
void libAREN_gf_ARM_WheresWeirdoDataInit ();
void libAREN_gf_ARM_WheresWeirdoNewRoundSpawn ();
void libAREN_gf_ARM_CreateEffectOnUnitGroup (playergroup lp_playerGroup, string lp_effect);
void libAREN_gf_ARM_TurnOnOffAltarSoundsforRegion (region lp_region, bool lp_onOff);
int libAREN_gf_ARM_IntegerToArenaMechanic (int lp_value);
int libAREN_gf_ARM_ArenaMechanicToInteger (int lp_mechanic);
void libAREN_gf_TopBarTeamLevelUpdateTeamsLevelLabel2 ();
void libAREN_gf_TopBarTeamLevelUpdateTeamsLevelLabel (int lp_scorePanel);
int libAREN_gf_GetIndexForVictoryIndicators (int lp_index);
int libAREN_gf_ARM_UI_RoundOverCreateDialog (int lp_team, string lp_template);
void libAREN_gf_TopBarTeamLevelUpdateTeamsLevelLabel3 (int lp_victoryTeam);
void libAREN_gf_TopBarTeamLevelUpdateTeamsLevelLabel5 ();

// Trigger Declarations
trigger libAREN_gt_ARM_ArenaMapInitilization;
trigger libAREN_gt_ARM_ArenaInitializeVisibility;
trigger libAREN_gt_ARM_ArenaRoundInitializeVisibility;
trigger libAREN_gt_ARM_ArenaMapStart;
trigger libAREN_gt_ARM_StartRoundStructureAnimations;
trigger libAREN_gt_ARM_GatesTimerExpires;
trigger libAREN_gt_ARM_RestrictAbilitiesToRegionForUnit;
trigger libAREN_gt_ARM_RoundEnds;
trigger libAREN_gt_ARM_TeamAbandons;
trigger libAREN_gt_ARM_InitWallaSounds;
trigger libAREN_gt_ARM_HeroRespawnCheering;
trigger libAREN_gt_ARM_ArenaMechanicActivated;
trigger libAREN_gt_ARM_HeroTakedownCheering;
trigger libAREN_gt_ARM_KillstreakBannerSoundSupport;
trigger libAREN_gt_ARM_WheresWeirdoDied;
trigger libAREN_gt_ARM_HealingFountainMonitor;
trigger libAREN_gt_ARM_NoProjectileBetweenPlanes;
trigger libAREN_gt_ARM_Debug_RoundOverDisplay;
trigger libAREN_gt_ARM_Debug_Level;
trigger libAREN_gt_ARM_Debug_SoundCheck;
trigger libAREN_gt_ARM_Debug_SoundCheck2;
trigger libAREN_gt_ARM_Debug_SoundCheck3;
trigger libAREN_gt_ARM_Debug_Cheer;
trigger libAREN_gt_ARM_Debug_EnableCheerDebugMessages;
trigger libAREN_gt_ARM_Debug_Play3DCheer;
trigger libAREN_gt_ARM_Debug_PlayAll3DCheers;
trigger libAREN_gt_ARM_Debug_ShowEmitterDataforRound;
trigger libAREN_gt_ARM_Debug_EnableEmitterDebugMessages;

// Library Initialization
void libAREN_InitVariables ();

