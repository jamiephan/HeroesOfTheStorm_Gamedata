include "TriggerLibs/HeroesLib"

//--------------------------------------------------------------------------------------------------
// Library: AttackDefend
//--------------------------------------------------------------------------------------------------
// Constants
const string libAtDe_gv_eventID_AttackDefendTeamsUpdated_C = "AttackDefendTeamsUpdated";
const string libAtDe_gv_eventID_AttackDefendRoundEnds_C = "AttackDefendRoundEnds";
const string libAtDe_gv_eventParam_AttackDefendAttackingTeamScoreForRound_Team_C = "Attacking Team Score For Round";
const string libAtDe_gv_EventID_AttackDefendRoundResetOccurring_C = "AttackDefendRoundResetOccurring";
const string libAtDe_gv_EventID_AttackDefendRoundResetComplete_C = "AttackDefendRoundResetComplete";
const string libAtDe_gv_EventID_AttackDefendGameOver_C = "AttackDefendGameOver";

// Structures
struct libAtDe_gs_AttackDefend {
    int lv_currentRound;
    int[libCore_gv_bALMaxTeams + 1] lv_score;
    int[6] lv_roundScore;
    int lv_attackingTeam;
    int lv_defendingTeam;
    bool[libCore_gv_bALMaxTeams + 1] lv_teamWonRound1;
    bool[libCore_gv_bALMaxTeams + 1] lv_teamWonRound2;
    int lv_lastWinningTeam;
    int lv_totalRounds;
};

struct libAtDe_gs_ResetRoundVariables {
    point[libCore_gv_bALMaxPlayers + 1] lv_spawnPoints;
    region[libCore_gv_bALMaxTeams + 1] lv_baseRegions;
    region[libCore_gv_bALMaxTeams + 1] lv_puntRegions;
    region[libCore_gv_bALMaxTeams + 1] lv_safeRegions;
    point[libCore_gv_bALMaxTeams + 1][5] lv_puntPoints;
    unit[21][libCore_gv_bALMaxTeams + 1] lv_structureUnits;
    bool[21][libCore_gv_bALMaxTeams + 1] lv_structureIsCore;
    string[21][libCore_gv_bALMaxTeams + 1] lv_structureUnitType;
    fixed[21][libCore_gv_bALMaxTeams + 1] lv_structureFacing;
    point[21][libCore_gv_bALMaxTeams + 1] lv_structureLocation;
    int lv_numberOfOrderStructures;
    int lv_numberOfChaosStructures;
};

struct libAtDe_gs_MAtD_TeamInstructions {
    int lv_instructionDialog;
    int lv_instructionDialogItem;
    int lv_oKButton;
    text lv_oKButtonAttackText;
    text lv_oKButtonDefendText;
};

struct libAtDe_gs_AtDe_UI_TeamScorePanel {
    int[libCore_gv_bALMaxTeams + 1][3] lv_scoreImage;
};

struct libAtDe_gs_AtDe_UI_RoundOverPanel {
    int lv_victoryDialog;
    int lv_victoryDialogLabel;
    int lv_defeatDialog;
    int lv_defeatDialogLabel;
};

// Variable Declarations
libAtDe_gs_AttackDefend libAtDe_gv_attackDefend;
libAtDe_gs_ResetRoundVariables libAtDe_gv_resetRoundVariables;
libAtDe_gs_MAtD_TeamInstructions[libCore_gv_bALMaxTeams + 1] libAtDe_gv_mAtD_TeamInstructions;
timer libAtDe_gv_teamInstructionDisplayTimer;
bool[libCore_gv_bALMaxPlayers + 1] libAtDe_gv_pausePlayerForInstructions;
libAtDe_gs_AtDe_UI_TeamScorePanel libAtDe_gv_AtDe_UI_TeamScorePanel;
libAtDe_gs_AtDe_UI_RoundOverPanel libAtDe_gv_atDe_UI_RoundOverPanel;

// Function Declarations
void libAtDe_gf_AtDEStartRound ();
void libAtDe_gf_MAtD_StartRoundStructureAnimations ();
void libAtDe_gf_AttackDefendGameStarts ();
void libAtDe_gf_GameStartsSetStructureVariables ();
void libAtDe_gf_GameStartsSetAttackingDefendingTeams ();
void libAtDe_gf_GameStartsMoveCamerastoPlayerSpawns ();
void libAtDe_gf_RoundEndsResetPoints ();
void libAtDe_gf_RoundEndsResetRegions ();
void libAtDe_gf_RoundEndsResetHearthstones ();
void libAtDe_gf_RoundEndsResetVisibility ();
void libAtDe_gf_RoundEndsResetStructures ();
void libAtDe_gf_RoundEndsResetDoodads ();
void libAtDe_gf_RoundEndsResetGateConfinement ();
void libAtDe_gf_RoundEndsSwapAttackingDefendingTeams ();
void libAtDe_gf_RoundEndsClearHeroForPlayer (int lp_player);
void libAtDe_gf_AttackDefendTeamsUpdated (trigger t);
void libAtDe_gf_SendEventAttackDefendTeamsUpdated ();
void libAtDe_gf_AttackDefendRoundEnds (trigger t);
void libAtDe_gf_SendEventAttackDefendRoundEnds (int lp_team);
int libAtDe_gf_AttackDefendWinningTeamForRound ();
void libAtDe_gf_AttackDefendRoundResetOccurring (trigger t);
void libAtDe_gf_SendEventAttackDefendRoundResetOccurring ();
void libAtDe_gf_AttackDefendRoundResetComplete (trigger t);
void libAtDe_gf_SendEventAttackDefendRoundResetComplete ();
void libAtDe_gf_AttackDefendGameOver (trigger t);
void libAtDe_gf_SendEventAttackDefendGameOver ();
void libAtDe_gf_DisplayTeamInstructionsForTeams ();
void libAtDe_gf_DisplayTeamInstructionsForAttack ();
void libAtDe_gf_DisplayTeamInstructionsForDefend ();
void libAtDe_gf_SetOKButtonTextForTeams ();
void libAtDe_gf_MapMechanicHelpPanelShowHide (int lp_team, playergroup lp_players);
void libAtDe_gf_DisplayAttackDefendForTeam ();
void libAtDe_gf_AtDe_UI_TeamScoreInit ();
void libAtDe_gf_AtDe_UI_TeamScoreUpdate ();
void libAtDe_gf_AtDe_UI_RoundOverDisplay ();
void libAtDe_gf_AtDe_UI_RoundOverShowTeamScore (int lp_parentPanel, int lp_forTeam);
void libAtDe_gf_AtDe_UI_RoundOverDestroy ();
void libAtDe_gf_AtDe_UI_RoundOver_ShowWinLossConditions (bool lp_boatDocked, int lp_boatTeam);
void libAtDe_gf_AtDe_UI_RoundOver_ShowRoundOverText ();

// Trigger Declarations
trigger libAtDe_gt_IncludeAttackDefend;
trigger libAtDe_gt_HeroSpawnedPauseHeroUnits;
trigger libAtDe_gt_GameStarts;
trigger libAtDe_gt_RoundEnds;
trigger libAtDe_gt_TeamInstructionDisplayTimerExpired;
trigger libAtDe_gt_TeamInstructionClosedButtonClicked;

// Library Initialization
void libAtDe_InitVariables ();

