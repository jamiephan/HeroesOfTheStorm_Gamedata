include "TriggerLibs/HeroesLib"
include "LibAREN"

//--------------------------------------------------------------------------------------------------
// Library: Arena Mode (Punisher)
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libAMPU_ge_ARMPunisherLevel_None = 0;
const int libAMPU_ge_ARMPunisherLevel_Level1 = 1;
const int libAMPU_ge_ARMPunisherLevel_Level2 = 2;
const int libAMPU_ge_ARMPunisherLevel_Level3 = 3;
const int libAMPU_ge_ARMPunisherState_GateOpen = 0;
const int libAMPU_ge_ARMPunisherState_Idle = 1;
const int libAMPU_ge_ARMPunisherState_IdleChasingHero = 2;
const int libAMPU_ge_ARMPunisherState_Dead = 3;
const int libAMPU_ge_ARMPunisherState_Spawning = 4;
const int libAMPU_ge_ARMPunisherState_MarchingToCenter = 5;
const int libAMPU_ge_ARMPunisherState_ReturningToCenter = 6;
const int libAMPU_ge_ARMPunisherState_DuelingPunisher = 7;
const int libAMPU_ge_ARMPunisherState_PunishingHero = 8;
const int libAMPU_ge_ARMPunisherPunishState_Idle = 0;
const int libAMPU_ge_ARMPunisherPunishState_Dueling = 1;
const int libAMPU_ge_ARMPunisherPunishState_DuelingDone = 2;
const int libAMPU_ge_ARMPunisherPunishState_Punishing = 3;
const int libAMPU_ge_ARMPunisherPunishState_PunishingDone = 4;

// Constants
const fixed libAMPU_gv_aRMPunisherStartDelay_C = 0.5;
const string libAMPU_gv_aRMPunisherPunisherUnitType_C = "MercPunisherLaner";
const fixed libAMPU_gv_aRMPunisherPunisherPunishCD_C = 7.0;
const int libAMPU_gv_aRMPunisherSkullDropPunisher_C = 10;
const int libAMPU_gv_aRMPunisherSkullDropHero_C = 4;
const int libAMPU_gv_aRMPunisherSkullRequired_C = 100;
const fixed libAMPU_gv_aRMPunisherRespawnDelay_C = 6.0;
const fixed libAMPU_gv_aRMPunisherEnragedDuration_C = 13.0;
const fixed libAMPU_gv_aRMPunisherCalmDuration_C = 12.0;
const fixed libAMPU_gv_aRMPunisherCalmDurationSpawn_C = 2.0;
const fixed libAMPU_gv_aRMPunisherJumpBackToCenterDelay_C = 3.0;
const fixed libAMPU_gv_aRMPunisherSpawnAnimationDelay_C = 3.0;

// Structures
struct libAMPU_gs_ARMPunisherPunisher {
    unit lv_unit;
    unit lv_shrine;
    int lv_state;
    unit lv_visionUnit;
    bool lv_onPunishCooldown;
};

struct libAMPU_gs_ARMPunisherPanel {
    int lv_gardenOfTerrorPanel;
    int[libCore_gv_bALMaxTeams + 1] lv_skullsCounts;
    int lv_gardenOfTerrorPanel2;
    int lv_spawnTimerPanel;
    int lv_healthPanel;
    int[libCore_gv_bALMaxTeams + 1] lv_punisherHealthBars;
    int[libCore_gv_bALMaxTeams + 1] lv_punisherHealthLabels;
    int[libCore_gv_bALMaxTeams + 1] lv_punisherRespawnTimers;
    int[libCore_gv_bALMaxTeams + 1] lv_punisherHealthFrames;
};

// Variable Declarations
int[libAREN_gv_aRM_MechanicsCountToPick_C + 1] libAMPU_gv_aRMPunisherLevelRegisteredMechIds;
int libAMPU_gv_aRMPunisherLevelCount;
int[libAREN_gv_aRM_MechanicsCountToPick_C + 1] libAMPU_gv_aRMPunisherLevels;
trigger[libAREN_gv_aRM_MechanicsCountToPick_C + 1] libAMPU_gv_aRMPunisherLevelStartCallback;
int[libCore_gv_bALMaxTeams + 1] libAMPU_gv_aRMPunisherTeamScore;
int[3] libAMPU_gv_aRMPunisherScoreWarningLevel;
libAMPU_gs_ARMPunisherPunisher[libCore_gv_bALMaxTeams + 1] libAMPU_gv_aRMPunisherPunishers;
bool libAMPU_gv_aRMPunisherPunisherFirstLeapOccurred;
bool libAMPU_gv_aRMPunisherPunisherRespawning;
point[libCore_gv_bALMaxTeams + 1] libAMPU_gv_aRMPunisherPunisherSpawnLocations;
point[libCore_gv_bALMaxTeams + 1][4] libAMPU_gv_aRMPunisherPunisherJumpLocations;
int libAMPU_gv_aRMPunisherPunisherJumpLocationCount;
int libAMPU_gv_aRMPunisherPunisherJumpLocationIndex;
bool[4] libAMPU_gv_aRMPunisherPunisherJumpLocationJumped;
region libAMPU_gv_aRMPunisherPunisherEngageArea;
int libAMPU_gv_aRMPunisherPunisherNextDuelPositionIndex;
point libAMPU_gv_aRMPunisherCenterLocation;
int libAMPU_gv_aRMPunisherPunishState;
unit libAMPU_gv_aRMPunisherPunishedHero;
int libAMPU_gv_aRMPunisherPunishedHeroIndex;
timer libAMPU_gv_aRMPunisherTimerDueling;
timer libAMPU_gv_aRMPunisherTimerEngraged;
int libAMPU_gv_aRMPunisherPunisherJumpBackCenterPing;
libAMPU_gs_ARMPunisherPanel libAMPU_gv_aRMPunisherPanel;
bool libAMPU_gv_aRMPunisherDebugTextEnabled;
bool libAMPU_gv_aRMPunisherMapEventDisabled;

// Function Declarations
int libAMPU_gf_ARMPunisherCurrentLevel ();
void libAMPU_gf_ARMPunisherAddLevel (int lp_level, region lp_levelRegion, trigger lp_levelStartCallback, text lp_levelName, string lp_levelImageOrder, string lp_levelImageChaos, text lp_levelInfo, region lp_cameraBoundsRegion);
void libAMPU_gf_ARMPunisherAddPunishers (unit lp_punisher1, unit lp_shrine1, unit lp_punisher2, unit lp_shrine2, region lp_engageArea);
void libAMPU_gf_ARMPunisherAddPunisherJumpLocation (point lp_location1, point lp_location2, point lp_location3);
int libAMPU_gf_ARMPunisherHeroScore (int lp_player, unit lp_deadHero);
void libAMPU_gf_ARMPunisherGainScore (int lp_team, int lp_scoreGained, point lp_location);
void libAMPU_gf_ARMPunisherSetTeamScore (int lp_team, int lp_score);
void libAMPU_gf_ARMPunisherRoundOverInitiateVictorySequence (int lp_winningTeam);
void libAMPU_gf_ARMPunisherPunisherSpawn (int lp_team, fixed lp_delay);
void libAMPU_gf_ARMPunisherAddPunisherAffix (unit lp_punisher);
void libAMPU_gf_ARMPunisherPunisherMarchToCenter ();
void libAMPU_gf_ARMPunisherPunisherDuelEngage (bool lp_changeLocation);
int libAMPU_gf_ARMPunisherPunisherNextJumpLocation ();
void libAMPU_gf_ARMPunisherPunisherPunishHero (int lp_team);
void libAMPU_gf_ARMPunisherPunisherPunishHeroSingleLoop (int lp_team);
void libAMPU_gf_ARMPunisherPunisherSetPunishedHero (unit lp_punishedHero);
void libAMPU_gf_ARMPunisherPunisherPunishHeroCooldown (int lp_team);
void libAMPU_gf_ARMPunisherPunisherReturnToCenter (int lp_team);
void libAMPU_gf_ARMPunisherPunisherIdleBehavior (int lp_team);
void libAMPU_gf_ARMPunisherJumpBackToCenter (int lp_team, unit lp_punisher);
void libAMPU_gf_ARMPunisherCleanUpPunisher ();
void libAMPU_gf_ARMPunisherPanelLevelUpdate ();
void libAMPU_gf_MapMechanicsGardenOfTerrorSetSeedCountForTeam (int lp_team, fixed lp_countText);
void libAMPU_gf_ARMPunisherBottomPanelInit (int lp_parentPanel);
void libAMPU_gf_ARMPunisherBottomPanelSetPunisher (int lp_team, unit lp_countText);
void libAMPU_gf_ARMPunisherTransmissionScoreWarningQ (int lp_team, int lp_skulls);
void libAMPU_gf_ARMPunisherTransmissionOrderTeam50 ();
void libAMPU_gf_ARMPunisherTransmissionChaosTeam50 ();
void libAMPU_gf_ARMPunisherTransmissionOrderTeam80 ();
void libAMPU_gf_ARMPunisherTransmissionChaosTeam80 ();
void libAMPU_gf_ARMPunisherTransmissionPunisherStartEnraging ();
void libAMPU_gf_ARMPunisherTransmissionPunisherStopEnraging ();
void libAMPU_gf_ARMPunisherTransmissionPunisherRespawn (int lp_team);
void libAMPU_gf_TriggerDebugOutput (text lp_msg);

// Trigger Declarations
trigger libAMPU_gt_ARMPunisherInitialization;
trigger libAMPU_gt_ARMPunisherGatesTimerExpires;
trigger libAMPU_gt_ARMPunisherLevelStart;
trigger libAMPU_gt_ARMPunisherGatesOpened;
trigger libAMPU_gt_ARMPunisherHeroDies;
trigger libAMPU_gt_ARMPunisherPunisherDies;
trigger libAMPU_gt_ARMPunisherCoreDiesDebug;
trigger libAMPU_gt_ARMPunisherPunisherVisionFollower;
trigger libAMPU_gt_ARMPunisherPunisherEnterDuelMode;
trigger libAMPU_gt_ARMPunisherPunisherEnterPunishMode;
trigger libAMPU_gt_ARMPunisherPunisherLogic;
trigger libAMPU_gt_ARMPunisherBossAINotUsed;
trigger libAMPU_gt_ARMPunisherPanelInit;
trigger libAMPU_gt_ARMPunisherUpdatePunishersSpawnTimersDisplay;
trigger libAMPU_gt_ARMPunisherUpdatePunishersRespawnTimersDisplay;
trigger libAMPU_gt_DEBUGARMPunisherSkullTextTag;
trigger libAMPU_gt_DEBUGARMPunisherDebugText;
trigger libAMPU_gt_DEBUGARMPunisherSetSkullCount;
trigger libAMPU_gt_DEBUGARMPunisherPausePunisher;
trigger libAMPU_gt_ARMPunisherDisableEvent;

// Library Initialization
void libAMPU_InitVariables ();

