include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/MapMechanicsLib"
include "TriggerLibs/UILib"
include "TriggerLibs/StartingExperienceLib"
include "LibAREN"
include "LibMSHD"

include "LibAMPU_h"

//--------------------------------------------------------------------------------------------------
// Library: Arena Mode (Punisher)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libAMPU_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libMapM_InitVariables();
    libUIUI_InitVariables();
    libStEx_InitVariables();
    libAREN_InitVariables();
    libMSHD_InitVariables();
}

// Variable Initialization
bool libAMPU_InitVariables_completed = false;

void libAMPU_InitVariables () {
    int init_i;
    int init_i1;

    if (libAMPU_InitVariables_completed) {
        return;
    }

    libAMPU_InitVariables_completed = true;

    for (init_i = 0; init_i <= libAREN_gv_aRM_MechanicsCountToPick_C; init_i += 1) {
        libAMPU_gv_aRMPunisherLevelRegisteredMechIds[init_i] = libAREN_ge_ArenaMechanics_InvalidMechanic;
    }
    for (init_i = 0; init_i <= libAREN_gv_aRM_MechanicsCountToPick_C; init_i += 1) {
        libAMPU_gv_aRMPunisherLevels[init_i] = libAMPU_ge_ARMPunisherLevel_None;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libAMPU_gv_aRMPunisherPunishers[init_i].lv_state = libAMPU_ge_ARMPunisherState_Dead;
    }
    libAMPU_gv_aRMPunisherPunishState = libAMPU_ge_ARMPunisherPunishState_Dueling;
    libAMPU_gv_aRMPunisherTimerDueling = TimerCreate();
    libAMPU_gv_aRMPunisherTimerEngraged = TimerCreate();
    libAMPU_gv_aRMPunisherPunisherJumpBackCenterPing = c_invalidPingId;
    libAMPU_gv_aRMPunisherPanel.lv_gardenOfTerrorPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libAMPU_gv_aRMPunisherPanel.lv_skullsCounts[init_i1] = c_invalidDialogControlId;
    }
    libAMPU_gv_aRMPunisherPanel.lv_gardenOfTerrorPanel2 = c_invalidDialogControlId;
    libAMPU_gv_aRMPunisherPanel.lv_spawnTimerPanel = c_invalidDialogControlId;
    libAMPU_gv_aRMPunisherPanel.lv_healthPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libAMPU_gv_aRMPunisherPanel.lv_punisherHealthBars[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libAMPU_gv_aRMPunisherPanel.lv_punisherHealthLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libAMPU_gv_aRMPunisherPanel.lv_punisherRespawnTimers[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libAMPU_gv_aRMPunisherPanel.lv_punisherHealthFrames[init_i1] = c_invalidDialogControlId;
    }
}

// Presets
// Functions
int libAMPU_gf_ARMPunisherCurrentLevel () {
    // Automatic Variable Declarations
    // Implementation
    return libAMPU_gv_aRMPunisherLevels[libAREN_gf_ArenaCurrentLevelIndex()];
}

void libAMPU_gf_ARMPunisherAddLevel (int lp_level, region lp_levelRegion, trigger lp_levelStartCallback, text lp_levelName, string lp_levelImageOrder, string lp_levelImageChaos, text lp_levelInfo, region lp_cameraBoundsRegion) {
    // Automatic Variable Declarations
    // Implementation
    libAMPU_gv_aRMPunisherLevelCount += 1;
    libAMPU_gv_aRMPunisherLevelStartCallback[libAMPU_gv_aRMPunisherLevelCount] = lp_levelStartCallback;
    libAMPU_gv_aRMPunisherLevels[libAMPU_gv_aRMPunisherLevelCount] = lp_level;
    libAREN_gf_ArenaRegisterMechanic(lp_levelName, lp_levelImageOrder, lp_levelImageChaos, lp_levelInfo, libAMPU_gt_ARMPunisherLevelStart, lp_levelRegion, lp_cameraBoundsRegion);
    libAMPU_gv_aRMPunisherLevelRegisteredMechIds[libAMPU_gv_aRMPunisherLevelCount] = libAREN_gf_LastregisteredArenaMechanic();
}

void libAMPU_gf_ARMPunisherAddPunishers (unit lp_punisher1, unit lp_shrine1, unit lp_punisher2, unit lp_shrine2, region lp_engageArea) {
    // Variable Declarations
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto97BE2992_ae = 2;
    const int auto97BE2992_ai = 1;
    int autoA5EEFA1C_val;

    // Variable Initialization

    // Implementation
    libAMPU_gv_aRMPunisherPunishers[1].lv_unit = lp_punisher1;
    libAMPU_gv_aRMPunisherPunishers[1].lv_shrine = lp_shrine1;
    libNtve_gf_SendActorMessageToUnit(libAMPU_gv_aRMPunisherPunishers[1].lv_shrine, "SetScale 1.300000");
    libAMPU_gv_aRMPunisherPunishers[2].lv_unit = lp_punisher2;
    libAMPU_gv_aRMPunisherPunishers[2].lv_shrine = lp_shrine2;
    libNtve_gf_SendActorMessageToUnit(libAMPU_gv_aRMPunisherPunishers[2].lv_shrine, "SetScale 1.300000");
    lv_itTeam = 1;
    for ( ; ( (auto97BE2992_ai >= 0 && lv_itTeam <= auto97BE2992_ae) || (auto97BE2992_ai < 0 && lv_itTeam >= auto97BE2992_ae) ) ; lv_itTeam += auto97BE2992_ai ) {
        libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_state = libAMPU_ge_ARMPunisherState_GateOpen;
        libAMPU_gv_aRMPunisherPunisherSpawnLocations[lv_itTeam] = UnitGetPosition(libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_unit);
        PointSetFacing(libAMPU_gv_aRMPunisherPunisherSpawnLocations[lv_itTeam], UnitGetFacing(libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_unit));
    }
    libAMPU_gv_aRMPunisherPunisherEngageArea = lp_engageArea;
    UnitRemove(lp_punisher1);
    libAMPU_gv_aRMPunisherPunishers[1].lv_unit = null;
    UnitRemove(lp_punisher2);
    libAMPU_gv_aRMPunisherPunishers[2].lv_unit = null;
    autoA5EEFA1C_val = libAMPU_gf_ARMPunisherCurrentLevel();
    if (autoA5EEFA1C_val == libAMPU_ge_ARMPunisherLevel_Level1) {
        UnitBehaviorAdd(lp_shrine1, "DiabloMortar", lp_shrine1, 1);
        UnitBehaviorAdd(lp_shrine2, "DiabloMortar", lp_shrine2, 1);
    }
    else if (autoA5EEFA1C_val == libAMPU_ge_ARMPunisherLevel_Level2) {
        UnitBehaviorAdd(lp_shrine1, "DiabloFrozen", lp_shrine1, 1);
        UnitBehaviorAdd(lp_shrine2, "DiabloFrozen", lp_shrine2, 1);
    }
    else if (autoA5EEFA1C_val == libAMPU_ge_ARMPunisherLevel_Level3) {
        UnitBehaviorAdd(lp_shrine1, "DiabloArcane", lp_shrine1, 1);
        UnitBehaviorAdd(lp_shrine2, "DiabloArcane", lp_shrine2, 1);
    }
    else {
    }
}

void libAMPU_gf_ARMPunisherAddPunisherJumpLocation (point lp_location1, point lp_location2, point lp_location3) {
    // Variable Declarations
    fixed lv_offset_C;
    int lv_itTeam;
    int lv_itIndex;

    // Automatic Variable Declarations
    const int auto4B4C4A9C_ae = 2;
    const int auto4B4C4A9C_ai = 1;
    const int auto3F44DDBF_ae = 3;
    const int auto3F44DDBF_ai = 1;

    // Variable Initialization
    lv_offset_C = 3.0;

    // Implementation
    libAMPU_gv_aRMPunisherCenterLocation = lp_location1;
    lv_itTeam = 1;
    for ( ; ( (auto4B4C4A9C_ai >= 0 && lv_itTeam <= auto4B4C4A9C_ae) || (auto4B4C4A9C_ai < 0 && lv_itTeam >= auto4B4C4A9C_ae) ) ; lv_itTeam += auto4B4C4A9C_ai ) {
        lv_itIndex = 1;
        for ( ; ( (auto3F44DDBF_ai >= 0 && lv_itIndex <= auto3F44DDBF_ae) || (auto3F44DDBF_ai < 0 && lv_itIndex >= auto3F44DDBF_ae) ) ; lv_itIndex += auto3F44DDBF_ai ) {
            libAMPU_gv_aRMPunisherPunisherJumpLocations[lv_itTeam][lv_itIndex] = null;
        }
    }
    libAMPU_gv_aRMPunisherPunisherJumpLocationCount = 0;
    if ((lp_location1 != null)) {
        libAMPU_gv_aRMPunisherPunisherJumpLocations[1][1] = PointWithOffset(lp_location1, (-lv_offset_C), 0.0);
        libAMPU_gv_aRMPunisherPunisherJumpLocations[2][1] = PointWithOffset(lp_location1, lv_offset_C, 0.0);
        libAMPU_gv_aRMPunisherPunisherJumpLocations[0][1] = lp_location1;
        libAMPU_gv_aRMPunisherPunisherJumpLocationCount += 1;
    }
    else {
        return ;
    }
    if ((lp_location2 != null)) {
        libAMPU_gv_aRMPunisherPunisherJumpLocations[1][2] = PointWithOffset(lp_location2, (-lv_offset_C), 0.0);
        libAMPU_gv_aRMPunisherPunisherJumpLocations[2][2] = PointWithOffset(lp_location2, lv_offset_C, 0.0);
        libAMPU_gv_aRMPunisherPunisherJumpLocations[0][2] = lp_location2;
        libAMPU_gv_aRMPunisherPunisherJumpLocationCount += 1;
    }
    else {
        return ;
    }
    if ((lp_location3 != null)) {
        libAMPU_gv_aRMPunisherPunisherJumpLocations[1][3] = PointWithOffset(lp_location3, (-lv_offset_C), 0.0);
        libAMPU_gv_aRMPunisherPunisherJumpLocations[2][3] = PointWithOffset(lp_location3, lv_offset_C, 0.0);
        libAMPU_gv_aRMPunisherPunisherJumpLocations[0][3] = lp_location3;
        libAMPU_gv_aRMPunisherPunisherJumpLocationCount += 1;
    }
    else {
        return ;
    }
}

int libAMPU_gf_ARMPunisherHeroScore (int lp_player, unit lp_deadHero) {
    // Variable Declarations
    string lv_hero;

    // Automatic Variable Declarations
    string auto61FEE87C_val;

    // Variable Initialization

    // Implementation
    lv_hero = PlayerHero(lp_player);
    auto61FEE87C_val = lv_hero;
    if (auto61FEE87C_val == "LostVikings") {
        return 1;
    }
    else if (auto61FEE87C_val == "Murky") {
        return 1;
    }
    else {
    }
    return libAMPU_gv_aRMPunisherSkullDropHero_C;
}

void libAMPU_gf_ARMPunisherGainScore (int lp_team, int lp_scoreGained, point lp_location) {
    // Variable Declarations
    playergroup lv_textTagPlayers;
    playergroup lv_textTagPlayers2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_textTagPlayers = PlayerGroupEmpty();
    lv_textTagPlayers2 = PlayerGroupEmpty();

    // Implementation
    if (((libGame_gv_gameOver == true) || (libAMPU_gv_aRMPunisherMapEventDisabled == true))) {
        return ;
    }

    SoundPlayForPlayer(SoundLink("Storm_UI_Flyin_AllyObtainedRavenTribute", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gf_PlayersOnTeamHeroes(lp_team, false), lv_textTagPlayers);
    PlayerGroupAdd(lv_textTagPlayers, libCore_gv_oBSERVER_ObserverUIPlayer);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeam(lp_team), false), lv_textTagPlayers2);
    TextExpressionSetToken("Param/Expression/lib_AMPU_476B47B7", "A", IntToText(lp_scoreGained));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_AMPU_476B47B7"), 30, lp_location, 4.0, true, true, lv_textTagPlayers);
    TextTagSetVelocity(TextTagLastCreated(), 1.5, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextExpressionSetToken("Param/Expression/lib_AMPU_C25E288D", "A", IntToText(lp_scoreGained));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_AMPU_C25E288D"), 30, lp_location, 4.0, true, true, lv_textTagPlayers2);
    TextTagSetVelocity(TextTagLastCreated(), 1.5, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    libAMPU_gf_ARMPunisherSetTeamScore(lp_team, (libAMPU_gv_aRMPunisherTeamScore[lp_team] + lp_scoreGained));
}

void libAMPU_gf_ARMPunisherSetTeamScore (int lp_team, int lp_score) {
    // Automatic Variable Declarations
    // Implementation
    libAMPU_gv_aRMPunisherTeamScore[lp_team] = MaxI(MinI(lp_score, libAMPU_gv_aRMPunisherSkullRequired_C), 0);
    libAMPU_gf_MapMechanicsGardenOfTerrorSetSeedCountForTeam(lp_team, libAMPU_gv_aRMPunisherTeamScore[lp_team]);
    if ((libAMPU_gv_aRMPunisherTeamScore[lp_team] >= libAMPU_gv_aRMPunisherSkullRequired_C)) {
        libAMPU_gf_ARMPunisherRoundOverInitiateVictorySequence(lp_team);
    }
    else if ((libAMPU_gv_aRMPunisherTeamScore[lp_team] >= 80)) {
        if ((libAMPU_gv_aRMPunisherScoreWarningLevel[lp_team] < 2)) {
            libAMPU_gv_aRMPunisherScoreWarningLevel[lp_team] = 2;
            libAMPU_gf_ARMPunisherTransmissionScoreWarningQ(lp_team, 80);
        }

    }
    else if ((libAMPU_gv_aRMPunisherTeamScore[lp_team] >= 50)) {
        if ((libAMPU_gv_aRMPunisherScoreWarningLevel[lp_team] < 1)) {
            libAMPU_gv_aRMPunisherScoreWarningLevel[lp_team] = 1;
            libAMPU_gf_ARMPunisherTransmissionScoreWarningQ(lp_team, 50);
        }

    }
}

void libAMPU_gf_ARMPunisherRoundOverInitiateVictorySequence (int lp_winningTeam) {
    // Variable Declarations
    int lv_losingTeam;
    unit lv_enemyCore;
    unit lv_winningCore;
    point lv_facingPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libAREN_gv_aRM_VictorySequencePlaying = true;
    if ((lp_winningTeam == libGame_gv_teamOrderIndex_C)) {
        lv_losingTeam = libGame_gv_teamChaosIndex_C;
        lv_facingPoint = PointWithOffset(UnitGetPosition(libGame_gv_teams[lv_losingTeam].lv_core), -1.0, 0.0);
    }
    else {
        lv_losingTeam = libGame_gv_teamOrderIndex_C;
        lv_facingPoint = PointWithOffset(UnitGetPosition(libGame_gv_teams[lv_losingTeam].lv_core), 1.0, 0.0);
    }
    libAREN_gv_aRM_RoundWinningTeam = lp_winningTeam;
    lv_enemyCore = libGame_gv_teams[lv_losingTeam].lv_core;
    lv_winningCore = libGame_gv_teams[lp_winningTeam].lv_core;
    libAREN_gv_aRM_VictorySequenceDelay = 6.0;
    libAMPU_gv_aRMPunisherPunisherFirstLeapOccurred = false;
    libAREN_gf_ARM_RoundOver();
    TriggerEnable(libAMPU_gt_ARMPunisherPunisherLogic, false);
    if ((libAMPU_gv_aRMPunisherPunishers[lv_losingTeam].lv_unit != null)) {
        UnitKill(libAMPU_gv_aRMPunisherPunishers[lv_losingTeam].lv_unit);
        libAMPU_gv_aRMPunisherPunishers[lv_losingTeam].lv_unit = null;
        libAMPU_gv_aRMPunisherPunishers[lv_losingTeam].lv_state = libAMPU_ge_ARMPunisherState_Dead;
    }

    if ((libAMPU_gv_aRMPunisherPunishers[lp_winningTeam].lv_unit != null)) {
        UnitBehaviorAdd(libAMPU_gv_aRMPunisherPunishers[lp_winningTeam].lv_unit, "HallOfStormsKnockbackImmunity", lv_winningCore, 1);
        libNtve_gf_MakeUnitInvulnerable(libAMPU_gv_aRMPunisherPunishers[lp_winningTeam].lv_unit, true);
        libStEx_gf_MoveUnit(libAMPU_gv_aRMPunisherPunishers[lp_winningTeam].lv_unit, UnitGetPosition(libGame_gv_teams[lv_losingTeam].lv_core), false);
        libNtve_gf_MakeUnitFacePoint(libAMPU_gv_aRMPunisherPunishers[lp_winningTeam].lv_unit, lv_facingPoint, 0.0);
    }
    else {
        libNtve_gf_UnitCreateFacingPoint(1, libAMPU_gv_aRMPunisherPunisherUnitType_C, c_unitCreateIgnorePlacement, libGame_gf_ComputerPlayerInTeam(lp_winningTeam), UnitGetPosition(libGame_gv_teams[lv_losingTeam].lv_core), lv_facingPoint, null);
        UnitBehaviorAdd(UnitLastCreated(), "HallOfStormsKnockbackImmunity", lv_winningCore, 1);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        libAMPU_gv_aRMPunisherPunishers[lp_winningTeam].lv_unit = UnitLastCreated();
        libAMPU_gf_ARMPunisherAddPunisherAffix(libAMPU_gv_aRMPunisherPunishers[lp_winningTeam].lv_unit);
    }
    libNtve_gf_SendActorMessageToUnit(libAMPU_gv_aRMPunisherPunishers[lp_winningTeam].lv_unit, "SetVisibility");
    libGame_gf_BuildingDiesCameraShake(1.7, "ImmuneToSkillshots", PlayerGroupAll());
    libGame_gf_BuildingDiesCameraShake(2.45, "Medium", PlayerGroupAll());
    libGame_gf_BuildingDiesCameraShake(2.7, "Medium", PlayerGroupAll());
    libGame_gf_BuildingDiesCameraShake(3.2625, "ImmuneToSkillshots", PlayerGroupAll());
    Wait(0.0625, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(libAMPU_gv_aRMPunisherPunishers[lp_winningTeam].lv_unit, "SetVisibility 1");
    UnitBehaviorAdd(libAMPU_gv_aRMPunisherPunishers[lp_winningTeam].lv_unit, "MercPunisherVictorySequenceStun", libAMPU_gv_aRMPunisherPunishers[lp_winningTeam].lv_unit, 1);
    libNtve_gf_PauseUnit(libAMPU_gv_aRMPunisherPunishers[lp_winningTeam].lv_unit, false);
    Wait(3.25, c_timeGame);
    UnitKill(libGame_gv_teams[lv_losingTeam].lv_core);
}

trigger auto_libAMPU_gf_ARMPunisherPunisherSpawn_Trigger = null;
int auto_libAMPU_gf_ARMPunisherPunisherSpawn_lp_team;
fixed auto_libAMPU_gf_ARMPunisherPunisherSpawn_lp_delay;

void libAMPU_gf_ARMPunisherPunisherSpawn (int lp_team, fixed lp_delay) {
    auto_libAMPU_gf_ARMPunisherPunisherSpawn_lp_team = lp_team;
    auto_libAMPU_gf_ARMPunisherPunisherSpawn_lp_delay = lp_delay;

    if (auto_libAMPU_gf_ARMPunisherPunisherSpawn_Trigger == null) {
        auto_libAMPU_gf_ARMPunisherPunisherSpawn_Trigger = TriggerCreate("auto_libAMPU_gf_ARMPunisherPunisherSpawn_TriggerFunc");
    }

    TriggerExecute(auto_libAMPU_gf_ARMPunisherPunisherSpawn_Trigger, false, false);
}

bool auto_libAMPU_gf_ARMPunisherPunisherSpawn_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libAMPU_gf_ARMPunisherPunisherSpawn_lp_team;
    fixed lp_delay = auto_libAMPU_gf_ARMPunisherPunisherSpawn_lp_delay;

    // Variable Declarations
    int lv_enemyTeam;
    unit lv_punisher;
    int lv_itPlayer;

    // Automatic Variable Declarations
    fixed auto545AFBD3_at;
    int autoF9C5E91F_val;

    // Variable Initialization

    // Implementation
    lv_enemyTeam = libGame_gf_EnemyTeam(lp_team);
    if ((UnitIsAlive(libAMPU_gv_aRMPunisherPunishers[lp_team].lv_unit) == false) && (libGame_gv_gameOver == false) && (libAMPU_gv_aRMPunisherMapEventDisabled == false)) {
        libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state = libAMPU_ge_ARMPunisherState_Spawning;
        if ((lp_delay == libAMPU_gv_aRMPunisherRespawnDelay_C)) {
            libNtve_gf_SendActorMessageToUnit(libAMPU_gv_aRMPunisherPunishers[lp_team].lv_shrine, "Signal BirthAnim");
        }

        auto545AFBD3_at = 0;
        while (!((libGame_gv_gameOver == true)) && auto545AFBD3_at <= (lp_delay - 3.2)) {
            Wait(0.1, c_timeGame);
            auto545AFBD3_at = auto545AFBD3_at + 0.1;
        }
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        autoF9C5E91F_val = lp_team;
        if (autoF9C5E91F_val == libGame_gv_teamOrderIndex_C) {
            libNtve_gf_SendActorMessageToUnit(libAMPU_gv_aRMPunisherPunishers[lp_team].lv_shrine, libNtve_gf_Signal("OpenRight"));
        }
        else if (autoF9C5E91F_val == libGame_gv_teamChaosIndex_C) {
            libNtve_gf_SendActorMessageToUnit(libAMPU_gv_aRMPunisherPunishers[lp_team].lv_shrine, libNtve_gf_Signal("OpenLeft"));
        }
        else {
        }
        Wait(0.2, c_timeGame);
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        libNtve_gf_SendActorMessageToUnit(libAMPU_gv_aRMPunisherPunishers[lp_team].lv_shrine, "Signal Birth");
        Wait(libAMPU_gv_aRMPunisherSpawnAnimationDelay_C, c_timeGame);
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((lp_team == libGame_gv_teamOrderIndex_C)) {
            UnitCreate(1, libAMPU_gv_aRMPunisherPunisherUnitType_C, c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_NoVision_TeamOrder, PointWithOffsetPolar(UnitGetPosition(libAMPU_gv_aRMPunisherPunishers[lp_team].lv_shrine), 4.8, -45.0), -45.0, null);
        }
        else {
            UnitCreate(1, libAMPU_gv_aRMPunisherPunisherUnitType_C, c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_NoVision_TeamChaos, PointWithOffsetPolar(UnitGetPosition(libAMPU_gv_aRMPunisherPunishers[lp_team].lv_shrine), 4.8, -135.0), -135.0, null);
        }
        if ((libAMPU_gv_aRMPunisherPunisherRespawning == true)) {
        }

        libAMPU_gv_aRMPunisherPunishers[lp_team].lv_unit = UnitLastCreated();
        UnitBehaviorAdd(UnitLastCreated(), "MercPunisherArenaBirth", UnitLastCreated(), 1);
        libAMPU_gf_ARMPunisherAddPunisherAffix(UnitLastCreated());
        AddUnitOfInterest(UnitLastCreated(), 0.0, 0.0, "AttackTarget", libNtve_ge_GoalTeam_Both, 0);
        AddUnitOfInterest(UnitLastCreated(), 0.0, 0.0, "Escort", libNtve_ge_GoalTeam_Both, 0);
        if ((libGame_gv_gameOver == false)) {
            libAMPU_gf_ARMPunisherBottomPanelSetPunisher(lp_team, libAMPU_gv_aRMPunisherPunishers[lp_team].lv_unit);
            libCore_gf_CreateMinimapPingStorm(libGame_gf_PlayersOnTeamHeroes(lp_team, false), "StormWarning", UnitGetPosition(libAMPU_gv_aRMPunisherPunishers[lp_team].lv_unit), libCore_gv_cOLORAllyColor, 4.0);
            PingSetUnit(PingLastCreated(), libAMPU_gv_aRMPunisherPunishers[lp_team].lv_unit);
            PingSetScale(PingLastCreated(), 0.75);
            libCore_gf_CreateMinimapPingStorm(libGame_gf_PlayersOnTeamHeroes(lv_enemyTeam, false), "StormWarning", UnitGetPosition(libAMPU_gv_aRMPunisherPunishers[lp_team].lv_unit), libCore_gv_cOLOREnemyColor, 4.0);
            PingSetUnit(PingLastCreated(), libAMPU_gv_aRMPunisherPunishers[lp_team].lv_unit);
            PingSetScale(PingLastCreated(), 0.75);
            libCore_gf_CreateMinimapPingStorm(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "StormWarning", UnitGetPosition(libAMPU_gv_aRMPunisherPunishers[lp_team].lv_unit), libCore_gv_cOLORNeutralColor, 4.0);
            PingSetUnit(PingLastCreated(), libAMPU_gv_aRMPunisherPunishers[lp_team].lv_unit);
            PingSetScale(PingLastCreated(), 0.75);
            libAREN_gf_SendEventArenaMechanicActivated();
            Wait(1.5, c_timeGame);
        }
        else {
            Wait(1.5, c_timeGame);
            if ((libAMPU_gv_aRMPunisherTeamScore[lp_team] >= libAMPU_gv_aRMPunisherSkullRequired_C)) {
                libAMPU_gf_ARMPunisherRoundOverInitiateVictorySequence(lp_team);
            }

        }
    }

    libAMPU_gf_ARMPunisherPunisherReturnToCenter(lp_team);
    libNtve_gf_SendActorMessageToUnit(libAMPU_gv_aRMPunisherPunishers[lp_team].lv_shrine, libNtve_gf_Signal("Deactivate"));
    return true;
}

void libAMPU_gf_ARMPunisherAddPunisherAffix (unit lp_punisher) {
    // Automatic Variable Declarations
    int auto6CDC5822_val;

    // Implementation
    auto6CDC5822_val = libAMPU_gf_ARMPunisherCurrentLevel();
    if (auto6CDC5822_val == libAMPU_ge_ARMPunisherLevel_Level1) {
        UnitBehaviorAdd(lp_punisher, "DiabloMortar", lp_punisher, 1);
        libNtve_gf_SendActorMessageToUnit(lp_punisher, "ModelSwap MercPunisherLanerMortar");
        libNtve_gf_SendActorMessageToUnit(lp_punisher, "SetGroupIcon 0 Assets\\Textures\\storm_ui_ingame_targetinfopanel_unit_infernalshrines_boss_punisher_mortar.dds");
    }
    else if (auto6CDC5822_val == libAMPU_ge_ARMPunisherLevel_Level2) {
        UnitBehaviorAdd(lp_punisher, "DiabloFrozen", lp_punisher, 1);
        libNtve_gf_SendActorMessageToUnit(lp_punisher, "ModelSwap MercPunisherLanerFrozen");
        libNtve_gf_SendActorMessageToUnit(lp_punisher, "SetGroupIcon 0 Assets\\Textures\\storm_ui_ingame_targetinfopanel_unit_infernalshrines_boss_punisher_frozen.dds");
    }
    else if (auto6CDC5822_val == libAMPU_ge_ARMPunisherLevel_Level3) {
        UnitBehaviorAdd(lp_punisher, "DiabloArcane", lp_punisher, 1);
        libNtve_gf_SendActorMessageToUnit(lp_punisher, "ModelSwap MercPunisherLanerArcane");
        libNtve_gf_SendActorMessageToUnit(lp_punisher, "SetGroupIcon 0 Assets\\Textures\\storm_ui_ingame_targetinfopanel_unit_infernalshrines_boss_punisher_arcane.dds");
    }
    else {
    }
}

trigger auto_libAMPU_gf_ARMPunisherPunisherMarchToCenter_Trigger = null;

void libAMPU_gf_ARMPunisherPunisherMarchToCenter () {
    if (auto_libAMPU_gf_ARMPunisherPunisherMarchToCenter_Trigger == null) {
        auto_libAMPU_gf_ARMPunisherPunisherMarchToCenter_Trigger = TriggerCreate("auto_libAMPU_gf_ARMPunisherPunisherMarchToCenter_TriggerFunc");
    }

    TriggerExecute(auto_libAMPU_gf_ARMPunisherPunisherMarchToCenter_Trigger, false, false);
}

bool auto_libAMPU_gf_ARMPunisherPunisherMarchToCenter_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    unit lv_punisher;

    // Automatic Variable Declarations
    const int auto716B2715_ae = 2;
    const int auto716B2715_ai = 1;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_AMPU_A6C561DA", "A", IntToText(0));
    TextExpressionSetToken("Param/Expression/lib_AMPU_A6C561DA", "B", IntToText(FixedToInt(TimerGetElapsed(libAMPU_gv_aRMPunisherTimerEngraged))));
    TextExpressionSetToken("Param/Expression/lib_AMPU_A6C561DA", "C", FixedToText(TimerGetElapsed(libGame_gv_gameTimer), 2));
    libAMPU_gf_TriggerDebugOutput(TextExpressionAssemble("Param/Expression/lib_AMPU_A6C561DA"));
    lv_itTeam = 1;
    for ( ; ( (auto716B2715_ai >= 0 && lv_itTeam <= auto716B2715_ae) || (auto716B2715_ai < 0 && lv_itTeam >= auto716B2715_ae) ) ; lv_itTeam += auto716B2715_ai ) {
        lv_punisher = libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_unit;
        libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_state = libAMPU_ge_ARMPunisherState_MarchingToCenter;
        UnitIssueOrder(lv_punisher, OrderTargetingPoint(AbilityCommand("attack", 0), libAMPU_gv_aRMPunisherCenterLocation), c_orderQueueReplace);
    }
    Wait(2.0, c_timeGame);
    libAMPU_gf_ARMPunisherPunisherDuelEngage(false);
    return true;
}

trigger auto_libAMPU_gf_ARMPunisherPunisherDuelEngage_Trigger = null;
bool auto_libAMPU_gf_ARMPunisherPunisherDuelEngage_lp_changeLocation;

void libAMPU_gf_ARMPunisherPunisherDuelEngage (bool lp_changeLocation) {
    auto_libAMPU_gf_ARMPunisherPunisherDuelEngage_lp_changeLocation = lp_changeLocation;

    if (auto_libAMPU_gf_ARMPunisherPunisherDuelEngage_Trigger == null) {
        auto_libAMPU_gf_ARMPunisherPunisherDuelEngage_Trigger = TriggerCreate("auto_libAMPU_gf_ARMPunisherPunisherDuelEngage_TriggerFunc");
    }

    TriggerExecute(auto_libAMPU_gf_ARMPunisherPunisherDuelEngage_Trigger, false, false);
}

bool auto_libAMPU_gf_ARMPunisherPunisherDuelEngage_TriggerFunc (bool testConds, bool runActions) {
    bool lp_changeLocation = auto_libAMPU_gf_ARMPunisherPunisherDuelEngage_lp_changeLocation;

    int init_i;

    // Variable Declarations
    int lv_itTeam;
    int lv_enemyTeam;
    unit[3] lv_punishers;
    int[3] lv_states;
    int lv_randomizedNumber;
    bool lv_weaponDelayAdded;

    // Automatic Variable Declarations
    const int auto5F777740_ae = 2;
    const int auto5F777740_ai = 1;
    const int autoCC3E9A04_ae = 2;
    const int autoCC3E9A04_ai = 1;
    int autoC55BDB35_n;
    int autoC55BDB35_i;
    const int autoE961425B_ae = 2;
    const int autoE961425B_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_states[init_i] = libAMPU_ge_ARMPunisherState_GateOpen;
    }

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_AMPU_F6CDA9DA", "A", StringExternal("Param/Value/lib_AMPU_DCBC4974"));
    TextExpressionSetToken("Param/Expression/lib_AMPU_F6CDA9DA", "B", IntToText(FixedToInt(TimerGetElapsed(libAMPU_gv_aRMPunisherTimerEngraged))));
    TextExpressionSetToken("Param/Expression/lib_AMPU_F6CDA9DA", "C", FixedToText(TimerGetElapsed(libGame_gv_gameTimer), 2));
    libAMPU_gf_TriggerDebugOutput(TextExpressionAssemble("Param/Expression/lib_AMPU_F6CDA9DA"));
    TriggerExecute(libAMPU_gt_ARMPunisherPunisherEnterDuelMode, true, false);
    UnitBehaviorRemovePlayer(libAMPU_gv_aRMPunisherPunishers[1].lv_unit, "MercPunisherLanerFixate", UnitGetOwner(libAMPU_gv_aRMPunisherPunishers[1].lv_unit), 1);
    UnitBehaviorRemovePlayer(libAMPU_gv_aRMPunisherPunishers[2].lv_unit, "MercPunisherLanerFixate", UnitGetOwner(libAMPU_gv_aRMPunisherPunishers[2].lv_unit), 1);
    if ((lp_changeLocation == true)) {
        libAMPU_gv_aRMPunisherPunisherNextDuelPositionIndex = libAMPU_gf_ARMPunisherPunisherNextJumpLocation();
        libAMPU_gv_aRMPunisherPunisherJumpLocationJumped[libAMPU_gv_aRMPunisherPunisherNextDuelPositionIndex] = true;
    }

    libAMPU_gv_aRMPunisherPunisherJumpBackCenterPing = c_invalidPingId;
    lv_itTeam = 1;
    for ( ; ( (auto5F777740_ai >= 0 && lv_itTeam <= auto5F777740_ae) || (auto5F777740_ai < 0 && lv_itTeam >= auto5F777740_ae) ) ; lv_itTeam += auto5F777740_ai ) {
        lv_enemyTeam = libGame_gf_EnemyTeam(lv_itTeam);
        libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_state = libAMPU_ge_ARMPunisherState_DuelingPunisher;
        lv_states[lv_itTeam] = libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_state;
        lv_punishers[lv_itTeam] = libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_unit;
        libAMPU_gf_ARMPunisherJumpBackToCenter(lv_itTeam, lv_punishers[lv_itTeam]);
    }
    if ((TimerGetElapsed(libGame_gv_gameTimer) > 15.0)) {
        Wait(libAMPU_gv_aRMPunisherJumpBackToCenterDelay_C, c_timeGame);
    }

    Wait(3.75, c_timeGame);
    lv_itTeam = 1;
    for ( ; ( (autoCC3E9A04_ai >= 0 && lv_itTeam <= autoCC3E9A04_ae) || (autoCC3E9A04_ai < 0 && lv_itTeam >= autoCC3E9A04_ae) ) ; lv_itTeam += autoCC3E9A04_ai ) {
        if ((UnitIsAlive(lv_punishers[lv_itTeam]) == true)) {
            UnitBehaviorRemove(lv_punishers[lv_itTeam], "MercPunisherLanerResetStun", 1);
            libNtve_gf_SendActorMessageToUnit(lv_punishers[lv_itTeam], "Signal StartDueling");
            lv_randomizedNumber = RandomInt(1, 2);
            if ((lv_itTeam == 1) && ((lv_randomizedNumber == 2) || (UnitHasBehavior2(lv_punishers[lv_itTeam], "MercPunisherAddDelayWeapon") == true))) {
                lv_weaponDelayAdded = true;
                UnitBehaviorAdd(lv_punishers[lv_itTeam], "MercPunisherAddDelayWeapon", lv_punishers[lv_itTeam], 1);
            }
            else {
                if ((lv_itTeam == 2) && (lv_weaponDelayAdded == false)) {
                    lv_weaponDelayAdded = true;
                    UnitBehaviorAdd(lv_punishers[lv_itTeam], "MercPunisherAddDelayWeapon", lv_punishers[lv_itTeam], 1);
                }

            }
        }

    }
    autoC55BDB35_n = FixedToInt((libAMPU_gv_aRMPunisherCalmDuration_C / 0.125));
    for (autoC55BDB35_i = 1; autoC55BDB35_i <= autoC55BDB35_n; autoC55BDB35_i += 1) {
        if ((UnitIsAlive(lv_punishers[1]) == false) && (UnitIsAlive(lv_punishers[2]) == false)) {
            return true;
        }
        else if ((UnitIsAlive(lv_punishers[1]) == false)) {
            if ((libAMPU_gv_aRMPunisherPunishers[2].lv_state == lv_states[2])) {
                libAMPU_gv_aRMPunisherPunishers[2].lv_state = libAMPU_ge_ARMPunisherState_Idle;
            }

            return true;
        }
        else if ((UnitIsAlive(lv_punishers[2]) == false)) {
            if ((libAMPU_gv_aRMPunisherPunishers[1].lv_state == lv_states[1])) {
                libAMPU_gv_aRMPunisherPunishers[1].lv_state = libAMPU_ge_ARMPunisherState_Idle;
            }

            return true;
        }
        Wait(0.125, c_timeGame);
    }
    lv_itTeam = 1;
    for ( ; ( (autoE961425B_ai >= 0 && lv_itTeam <= autoE961425B_ae) || (autoE961425B_ai < 0 && lv_itTeam >= autoE961425B_ae) ) ; lv_itTeam += autoE961425B_ai ) {
        if ((libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_state == lv_states[lv_itTeam])) {
            libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_state = libAMPU_ge_ARMPunisherState_Idle;
        }

    }
    return true;
}

int libAMPU_gf_ARMPunisherPunisherNextJumpLocation () {
    // Variable Declarations
    int lv_jumpLocClosestIndex;
    fixed lv_distance;
    fixed lv_distanceClosest;
    int lv_itLocIndex;
    point lv_middlePoint;
    point[3] lv_punisherLocations;

    // Automatic Variable Declarations
    int auto16D6E3A6_ae;
    const int auto16D6E3A6_ai = 1;
    int autoA10BDDB2_ae;
    const int autoA10BDDB2_ai = 1;
    int auto10610B16_ae;
    const int auto10610B16_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libAMPU_gv_aRMPunisherPunisherJumpLocationCount == 1)) {
        return 1;
    }

    if ((UnitIsAlive(libAMPU_gv_aRMPunisherPunishers[1].lv_unit) == true) && (UnitIsAlive(libAMPU_gv_aRMPunisherPunishers[2].lv_unit) == true)) {
        lv_punisherLocations[1] = UnitGetPosition(libAMPU_gv_aRMPunisherPunishers[1].lv_unit);
        lv_punisherLocations[2] = UnitGetPosition(libAMPU_gv_aRMPunisherPunishers[2].lv_unit);
        lv_middlePoint = Point(((PointGetX(lv_punisherLocations[1]) + PointGetX(lv_punisherLocations[2])) / 2.0), ((PointGetY(lv_punisherLocations[1]) + PointGetY(lv_punisherLocations[2])) / 2.0));
    }
    else if ((UnitIsAlive(libAMPU_gv_aRMPunisherPunishers[1].lv_unit) == true)) {
        lv_middlePoint = UnitGetPosition(libAMPU_gv_aRMPunisherPunishers[1].lv_unit);
    }
    else if ((UnitIsAlive(libAMPU_gv_aRMPunisherPunishers[2].lv_unit) == true)) {
        lv_middlePoint = UnitGetPosition(libAMPU_gv_aRMPunisherPunishers[2].lv_unit);
    }
    else if (true) {
        lv_middlePoint = null;
    }
    if ((lv_middlePoint == null)) {
        if ((libAMPU_gv_aRMPunisherPunisherNextDuelPositionIndex >= libAMPU_gv_aRMPunisherPunisherJumpLocationCount)) {
            return 1;
        }
        else {
            return (libAMPU_gv_aRMPunisherPunisherNextDuelPositionIndex + 1);
        }
    }

    if ((libAMPU_gv_aRMPunisherPunisherJumpLocationIndex == 2)) {
        libAMPU_gv_aRMPunisherPunisherJumpLocationIndex = 1;
        lv_jumpLocClosestIndex = 0;
        autoA10BDDB2_ae = libAMPU_gv_aRMPunisherPunisherJumpLocationCount;
        lv_itLocIndex = 1;
        for ( ; ( (autoA10BDDB2_ai >= 0 && lv_itLocIndex <= autoA10BDDB2_ae) || (autoA10BDDB2_ai < 0 && lv_itLocIndex >= autoA10BDDB2_ae) ) ; lv_itLocIndex += autoA10BDDB2_ai ) {
            if ((libAMPU_gv_aRMPunisherPunisherJumpLocationJumped[lv_itLocIndex] == false)) {
                lv_jumpLocClosestIndex = lv_itLocIndex;
            }

        }
        if ((lv_jumpLocClosestIndex == 0)) {
            auto10610B16_ae = libAMPU_gv_aRMPunisherPunisherJumpLocationCount;
            lv_itLocIndex = 1;
            for ( ; ( (auto10610B16_ai >= 0 && lv_itLocIndex <= auto10610B16_ae) || (auto10610B16_ai < 0 && lv_itLocIndex >= auto10610B16_ae) ) ; lv_itLocIndex += auto10610B16_ai ) {
                libAMPU_gv_aRMPunisherPunisherJumpLocationJumped[lv_itLocIndex] = false;
            }
            lv_jumpLocClosestIndex = RandomInt(1, libAMPU_gv_aRMPunisherPunisherJumpLocationCount);
        }

        if ((lv_jumpLocClosestIndex > 0)) {
            return lv_jumpLocClosestIndex;
        }

    }
    else {
        libAMPU_gv_aRMPunisherPunisherJumpLocationIndex += 1;
        auto16D6E3A6_ae = libAMPU_gv_aRMPunisherPunisherJumpLocationCount;
        lv_itLocIndex = 1;
        for ( ; ( (auto16D6E3A6_ai >= 0 && lv_itLocIndex <= auto16D6E3A6_ae) || (auto16D6E3A6_ai < 0 && lv_itLocIndex >= auto16D6E3A6_ae) ) ; lv_itLocIndex += auto16D6E3A6_ai ) {
            lv_distance = DistanceBetweenPoints(libAMPU_gv_aRMPunisherPunisherJumpLocations[1][lv_itLocIndex], lv_middlePoint);
            if ((lv_jumpLocClosestIndex > 0)) {
                if ((lv_distance < lv_distanceClosest)) {
                    lv_jumpLocClosestIndex = lv_itLocIndex;
                    lv_distanceClosest = lv_distance;
                }

            }
            else {
                lv_jumpLocClosestIndex = lv_itLocIndex;
                lv_distanceClosest = lv_distance;
            }
        }
        if ((lv_jumpLocClosestIndex > 0)) {
            return lv_jumpLocClosestIndex;
        }

    }
    return 0;
}

trigger auto_libAMPU_gf_ARMPunisherPunisherPunishHero_Trigger = null;
int auto_libAMPU_gf_ARMPunisherPunisherPunishHero_lp_team;

void libAMPU_gf_ARMPunisherPunisherPunishHero (int lp_team) {
    auto_libAMPU_gf_ARMPunisherPunisherPunishHero_lp_team = lp_team;

    if (auto_libAMPU_gf_ARMPunisherPunisherPunishHero_Trigger == null) {
        auto_libAMPU_gf_ARMPunisherPunisherPunishHero_Trigger = TriggerCreate("auto_libAMPU_gf_ARMPunisherPunisherPunishHero_TriggerFunc");
    }

    TriggerExecute(auto_libAMPU_gf_ARMPunisherPunisherPunishHero_Trigger, false, false);
}

bool auto_libAMPU_gf_ARMPunisherPunisherPunishHero_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libAMPU_gf_ARMPunisherPunisherPunishHero_lp_team;

    // Variable Declarations
    unit lv_punisher;

    // Automatic Variable Declarations
    const int autoAF71E524_n = 56;
    int autoAF71E524_i;

    // Variable Initialization

    // Implementation
    if ((libAMPU_gv_aRMPunisherPunishState == libAMPU_ge_ARMPunisherPunishState_PunishingDone)) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_AMPU_6B2F482D", "A", IntToText(lp_team));
    TextExpressionSetToken("Param/Expression/lib_AMPU_6B2F482D", "B", IntToText(FixedToInt(TimerGetElapsed(libAMPU_gv_aRMPunisherTimerEngraged))));
    TextExpressionSetToken("Param/Expression/lib_AMPU_6B2F482D", "C", FixedToText(TimerGetElapsed(libGame_gv_gameTimer), 2));
    libAMPU_gf_TriggerDebugOutput(TextExpressionAssemble("Param/Expression/lib_AMPU_6B2F482D"));
    TriggerExecute(libAMPU_gt_ARMPunisherPunisherEnterPunishMode, true, false);
    lv_punisher = libAMPU_gv_aRMPunisherPunishers[lp_team].lv_unit;
    for (autoAF71E524_i = 1; autoAF71E524_i <= autoAF71E524_n; autoAF71E524_i += 1) {
        if ((UnitIsAlive(lv_punisher) == false)) {
            break;
        }

        if ((libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state == libAMPU_ge_ARMPunisherState_Idle) && (libAMPU_gv_aRMPunisherPunishState == libAMPU_ge_ARMPunisherPunishState_Punishing)) {
            libAMPU_gf_ARMPunisherPunisherPunishHeroSingleLoop(lp_team);
        }

        Wait(0.125, c_timeGame);
    }
    return true;
}

trigger auto_libAMPU_gf_ARMPunisherPunisherPunishHeroSingleLoop_Trigger = null;
int auto_libAMPU_gf_ARMPunisherPunisherPunishHeroSingleLoop_lp_team;

void libAMPU_gf_ARMPunisherPunisherPunishHeroSingleLoop (int lp_team) {
    auto_libAMPU_gf_ARMPunisherPunisherPunishHeroSingleLoop_lp_team = lp_team;

    if (auto_libAMPU_gf_ARMPunisherPunisherPunishHeroSingleLoop_Trigger == null) {
        auto_libAMPU_gf_ARMPunisherPunisherPunishHeroSingleLoop_Trigger = TriggerCreate("auto_libAMPU_gf_ARMPunisherPunisherPunishHeroSingleLoop_TriggerFunc");
    }

    TriggerExecute(auto_libAMPU_gf_ARMPunisherPunisherPunishHeroSingleLoop_Trigger, false, false);
}

bool auto_libAMPU_gf_ARMPunisherPunisherPunishHeroSingleLoop_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libAMPU_gf_ARMPunisherPunisherPunishHeroSingleLoop_lp_team;

    // Variable Declarations
    unitgroup lv_heroGroup;
    unit lv_closestHero;
    unitgroup lv_secondCloestHeroGroup;
    unit lv_secondCloestHero;
    unit lv_punisher;
    int lv_enemyTeam;
    int lv_state;
    unit lv_itHero;

    // Automatic Variable Declarations
    unitgroup auto33C95EFB_g;
    int auto33C95EFB_u;
    const int auto997428E2_n = 16;
    int auto997428E2_i;
    const int auto48259F04_n = 12;
    int auto48259F04_i;

    // Variable Initialization
    lv_heroGroup = UnitGroupEmpty();
    lv_secondCloestHeroGroup = UnitGroupEmpty();
    lv_state = libAMPU_ge_ARMPunisherState_Idle;

    // Implementation
    lv_enemyTeam = libGame_gf_EnemyTeam(lp_team);
    lv_heroGroup = UnitGroupAlliance(libGame_gf_ComputerPlayerInTeam(lp_team), c_unitAllianceEnemy, libAMPU_gv_aRMPunisherPunisherEngageArea, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto33C95EFB_g = lv_heroGroup;
    auto33C95EFB_u = UnitGroupCount(auto33C95EFB_g, c_unitCountAll);
    for (;; auto33C95EFB_u -= 1) {
        lv_itHero = UnitGroupUnitFromEnd(auto33C95EFB_g, auto33C95EFB_u);
        if (lv_itHero == null) { break; }
        if ((libNtve_gf_UnitIsVisibleToPlayer(lv_itHero, UnitGetOwner(libAMPU_gv_aRMPunisherPunishers[lp_team].lv_unit)) == false)) {
            UnitGroupRemove(lv_heroGroup, lv_itHero);
        }

    }
    if ((libNtve_gf_UnitGroupIsDead(lv_heroGroup) == true)) {
        if ((UnitIsAlive(libAMPU_gv_aRMPunisherPunishers[lv_enemyTeam].lv_unit) == true)) {
            if ((RegionContainsPoint(libAMPU_gv_aRMPunisherPunisherEngageArea, UnitGetPosition(libAMPU_gv_aRMPunisherPunishers[lv_enemyTeam].lv_unit)) == true)) {
                UnitIssueOrder(libAMPU_gv_aRMPunisherPunishers[lp_team].lv_unit, OrderTargetingUnit(AbilityCommand("attack", 0), libAMPU_gv_aRMPunisherPunishers[lv_enemyTeam].lv_unit), c_orderQueueReplace);
                libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state = libAMPU_ge_ARMPunisherState_DuelingPunisher;
                lv_state = libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state;
                lv_punisher = libAMPU_gv_aRMPunisherPunishers[lp_team].lv_unit;
                for (auto997428E2_i = 1; auto997428E2_i <= auto997428E2_n; auto997428E2_i += 1) {
                    if ((UnitIsAlive(lv_punisher) == false)) {
                        return true;
                    }

                    if ((UnitIsAlive(libAMPU_gv_aRMPunisherPunishers[lv_enemyTeam].lv_unit) == false)) {
                        libAMPU_gf_ARMPunisherPunisherReturnToCenter(lp_team);
                        return true;
                    }

                    Wait(0.125, c_timeGame);
                }
                if ((libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state == lv_state)) {
                    libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state = libAMPU_ge_ARMPunisherState_Idle;
                }

            }
            else {
                libAMPU_gf_ARMPunisherPunisherReturnToCenter(lp_team);
            }
        }
        else {
            libAMPU_gf_ARMPunisherPunisherReturnToCenter(lp_team);
        }
        return true;
    }

    libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state = libAMPU_ge_ARMPunisherState_PunishingHero;
    lv_punisher = libAMPU_gv_aRMPunisherPunishers[lp_team].lv_unit;
    lv_closestHero = UnitGroupClosestToPoint(lv_heroGroup, UnitGetPosition(lv_punisher));
    lv_secondCloestHero = null;
    if ((lv_closestHero == libAMPU_gv_aRMPunisherPunishedHero)) {
        lv_secondCloestHeroGroup = UnitGroupCopy(lv_heroGroup);
        UnitGroupRemove(lv_secondCloestHeroGroup, lv_closestHero);
        lv_secondCloestHero = UnitGroupClosestToPoint(lv_secondCloestHeroGroup, UnitGetPosition(lv_punisher));
        if ((lv_secondCloestHero != null) && (DistanceBetweenPoints(UnitGetPosition(lv_secondCloestHero), UnitGetPosition(lv_punisher)) > 10.0)) {
            lv_secondCloestHero = null;
        }

    }

    if ((libAMPU_gv_aRMPunisherPunishers[lp_team].lv_onPunishCooldown == false) && (DistanceBetweenPoints(UnitGetPosition(libAMPU_gv_aRMPunisherPunishers[lp_team].lv_unit), UnitGetPosition(lv_closestHero)) < 12.0)) {
        if ((lv_secondCloestHero != null) && (UnitIsAlive(lv_secondCloestHero) == true)) {
            lv_closestHero = lv_secondCloestHero;
        }

        UnitIssueOrder(lv_punisher, OrderTargetingPoint(AbilityCommand("MercPunisherLanerLeap", 0), UnitGetPosition(lv_closestHero)), c_orderQueueReplace);
        libAMPU_gf_ARMPunisherPunisherSetPunishedHero(lv_closestHero);
        libAMPU_gf_ARMPunisherPunisherPunishHeroCooldown(lp_team);
        UnitIssueOrder(lv_punisher, OrderTargetingUnit(AbilityCommand("attack", 0), lv_closestHero), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(lv_punisher, OrderTargetingUnit(AbilityCommand("attack", 0), lv_closestHero), c_orderQueueReplace);
    }
    lv_state = libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state;
    for (auto48259F04_i = 1; auto48259F04_i <= auto48259F04_n; auto48259F04_i += 1) {
        if (((UnitIsAlive(lv_punisher) == false) || (UnitIsAlive(lv_closestHero) == false) || (RegionContainsPoint(libAMPU_gv_aRMPunisherPunisherEngageArea, UnitGetPosition(lv_closestHero)) == false))) {
            break;
        }

        Wait(0.125, c_timeGame);
    }
    if ((UnitIsAlive(lv_punisher) == true) && (libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state == lv_state)) {
        libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state = libAMPU_ge_ARMPunisherState_Idle;
    }

    return true;
}

trigger auto_libAMPU_gf_ARMPunisherPunisherSetPunishedHero_Trigger = null;
unit auto_libAMPU_gf_ARMPunisherPunisherSetPunishedHero_lp_punishedHero;

void libAMPU_gf_ARMPunisherPunisherSetPunishedHero (unit lp_punishedHero) {
    auto_libAMPU_gf_ARMPunisherPunisherSetPunishedHero_lp_punishedHero = lp_punishedHero;

    if (auto_libAMPU_gf_ARMPunisherPunisherSetPunishedHero_Trigger == null) {
        auto_libAMPU_gf_ARMPunisherPunisherSetPunishedHero_Trigger = TriggerCreate("auto_libAMPU_gf_ARMPunisherPunisherSetPunishedHero_TriggerFunc");
    }

    TriggerExecute(auto_libAMPU_gf_ARMPunisherPunisherSetPunishedHero_Trigger, false, false);
}

bool auto_libAMPU_gf_ARMPunisherPunisherSetPunishedHero_TriggerFunc (bool testConds, bool runActions) {
    unit lp_punishedHero = auto_libAMPU_gf_ARMPunisherPunisherSetPunishedHero_lp_punishedHero;

    // Variable Declarations
    unit lv_localPunishedHero;
    int lv_localPunishedHeroIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libAMPU_gv_aRMPunisherPunishedHero = lp_punishedHero;
    libAMPU_gv_aRMPunisherPunishedHeroIndex += 1;
    lv_localPunishedHero = libAMPU_gv_aRMPunisherPunishedHero;
    lv_localPunishedHeroIndex = libAMPU_gv_aRMPunisherPunisherJumpLocationIndex;
    Wait(10.0, c_timeGame);
    if ((libAMPU_gv_aRMPunisherPunishedHero == lv_localPunishedHero) && (libAMPU_gv_aRMPunisherPunishedHeroIndex == lv_localPunishedHeroIndex)) {
        libAMPU_gv_aRMPunisherPunishedHero = null;
        libAMPU_gv_aRMPunisherPunishedHeroIndex = 0;
    }

    return true;
}

trigger auto_libAMPU_gf_ARMPunisherPunisherPunishHeroCooldown_Trigger = null;
int auto_libAMPU_gf_ARMPunisherPunisherPunishHeroCooldown_lp_team;

void libAMPU_gf_ARMPunisherPunisherPunishHeroCooldown (int lp_team) {
    auto_libAMPU_gf_ARMPunisherPunisherPunishHeroCooldown_lp_team = lp_team;

    if (auto_libAMPU_gf_ARMPunisherPunisherPunishHeroCooldown_Trigger == null) {
        auto_libAMPU_gf_ARMPunisherPunisherPunishHeroCooldown_Trigger = TriggerCreate("auto_libAMPU_gf_ARMPunisherPunisherPunishHeroCooldown_TriggerFunc");
    }

    TriggerExecute(auto_libAMPU_gf_ARMPunisherPunisherPunishHeroCooldown_Trigger, false, false);
}

bool auto_libAMPU_gf_ARMPunisherPunisherPunishHeroCooldown_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libAMPU_gf_ARMPunisherPunisherPunishHeroCooldown_lp_team;

    // Automatic Variable Declarations
    // Implementation
    if ((libAMPU_gv_aRMPunisherPunishers[lp_team].lv_onPunishCooldown == true)) {
        libAMPU_gf_TriggerDebugOutput(StringExternal("Param/Value/lib_AMPU_34F85BE6"));
        return true;
    }

    libAMPU_gv_aRMPunisherPunishers[lp_team].lv_onPunishCooldown = true;
    Wait(libAMPU_gv_aRMPunisherPunisherPunishCD_C, c_timeGame);
    libAMPU_gv_aRMPunisherPunishers[lp_team].lv_onPunishCooldown = false;
    return true;
}

trigger auto_libAMPU_gf_ARMPunisherPunisherReturnToCenter_Trigger = null;
int auto_libAMPU_gf_ARMPunisherPunisherReturnToCenter_lp_team;

void libAMPU_gf_ARMPunisherPunisherReturnToCenter (int lp_team) {
    auto_libAMPU_gf_ARMPunisherPunisherReturnToCenter_lp_team = lp_team;

    if (auto_libAMPU_gf_ARMPunisherPunisherReturnToCenter_Trigger == null) {
        auto_libAMPU_gf_ARMPunisherPunisherReturnToCenter_Trigger = TriggerCreate("auto_libAMPU_gf_ARMPunisherPunisherReturnToCenter_TriggerFunc");
    }

    TriggerExecute(auto_libAMPU_gf_ARMPunisherPunisherReturnToCenter_Trigger, false, false);
}

bool auto_libAMPU_gf_ARMPunisherPunisherReturnToCenter_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libAMPU_gf_ARMPunisherPunisherReturnToCenter_lp_team;

    // Variable Declarations
    unit lv_punisher;
    int lv_state;

    // Automatic Variable Declarations
    const int auto5DF85952_n = 20;
    int auto5DF85952_i;

    // Variable Initialization
    lv_state = libAMPU_ge_ARMPunisherState_GateOpen;

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_AMPU_8D87408E", "A", IntToText(lp_team));
    TextExpressionSetToken("Param/Expression/lib_AMPU_8D87408E", "B", IntToText(FixedToInt(TimerGetElapsed(libAMPU_gv_aRMPunisherTimerEngraged))));
    TextExpressionSetToken("Param/Expression/lib_AMPU_8D87408E", "C", FixedToText(TimerGetElapsed(libGame_gv_gameTimer), 2));
    libAMPU_gf_TriggerDebugOutput(TextExpressionAssemble("Param/Expression/lib_AMPU_8D87408E"));
    lv_punisher = libAMPU_gv_aRMPunisherPunishers[lp_team].lv_unit;
    if ((UnitIsAlive(lv_punisher) == false)) {
        return true;
    }

    libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state = libAMPU_ge_ARMPunisherState_ReturningToCenter;
    lv_state = libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state;
    UnitIssueOrder(lv_punisher, OrderTargetingPoint(AbilityCommand("move", 0), libAMPU_gv_aRMPunisherPunisherJumpLocations[lp_team][libAMPU_gv_aRMPunisherPunisherNextDuelPositionIndex]), c_orderQueueReplace);
    for (auto5DF85952_i = 1; auto5DF85952_i <= auto5DF85952_n; auto5DF85952_i += 1) {
        if ((UnitIsAlive(lv_punisher) == false)) {
            return true;
        }

        if ((DistanceBetweenPoints(UnitGetPosition(lv_punisher), libAMPU_gv_aRMPunisherPunisherJumpLocations[lp_team][libAMPU_gv_aRMPunisherPunisherNextDuelPositionIndex]) < 5.0)) {
            UnitIssueOrder(lv_punisher, OrderTargetingPoint(AbilityCommand("attack", 0), libAMPU_gv_aRMPunisherPunisherJumpLocations[lp_team][libAMPU_gv_aRMPunisherPunisherNextDuelPositionIndex]), c_orderQueueReplace);
            break;
        }

        Wait(0.125, c_timeGame);
    }
    if ((libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state == lv_state)) {
        libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state = libAMPU_ge_ARMPunisherState_Idle;
    }

    return true;
}

trigger auto_libAMPU_gf_ARMPunisherPunisherIdleBehavior_Trigger = null;
int auto_libAMPU_gf_ARMPunisherPunisherIdleBehavior_lp_team;

void libAMPU_gf_ARMPunisherPunisherIdleBehavior (int lp_team) {
    auto_libAMPU_gf_ARMPunisherPunisherIdleBehavior_lp_team = lp_team;

    if (auto_libAMPU_gf_ARMPunisherPunisherIdleBehavior_Trigger == null) {
        auto_libAMPU_gf_ARMPunisherPunisherIdleBehavior_Trigger = TriggerCreate("auto_libAMPU_gf_ARMPunisherPunisherIdleBehavior_TriggerFunc");
    }

    TriggerExecute(auto_libAMPU_gf_ARMPunisherPunisherIdleBehavior_Trigger, false, false);
}

bool auto_libAMPU_gf_ARMPunisherPunisherIdleBehavior_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libAMPU_gf_ARMPunisherPunisherIdleBehavior_lp_team;

    // Variable Declarations
    unitgroup lv_heroGroup;
    unit lv_closestHero;
    unitgroup lv_secondCloestHeroGroup;
    unit lv_secondCloestHero;
    unit lv_punisher;
    int lv_enemyTeam;
    int lv_state;

    // Automatic Variable Declarations
    const int auto877F39C0_n = 8;
    int auto877F39C0_i;
    const int autoC7807F01_n = 12;
    int autoC7807F01_i;

    // Variable Initialization
    lv_heroGroup = UnitGroupEmpty();
    lv_secondCloestHeroGroup = UnitGroupEmpty();
    lv_state = libAMPU_ge_ARMPunisherState_Idle;

    // Implementation
    lv_punisher = libAMPU_gv_aRMPunisherPunishers[lp_team].lv_unit;
    if (((libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state != libAMPU_ge_ARMPunisherState_Idle) || (UnitIsAlive(lv_punisher) == false))) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_AMPU_22E98204", "A", IntToText(lp_team));
    TextExpressionSetToken("Param/Expression/lib_AMPU_22E98204", "B", IntToText(FixedToInt(TimerGetElapsed(libAMPU_gv_aRMPunisherTimerEngraged))));
    TextExpressionSetToken("Param/Expression/lib_AMPU_22E98204", "C", FixedToText(TimerGetElapsed(libGame_gv_gameTimer), 2));
    libAMPU_gf_TriggerDebugOutput(TextExpressionAssemble("Param/Expression/lib_AMPU_22E98204"));
    lv_enemyTeam = libGame_gf_EnemyTeam(lp_team);
    lv_heroGroup = UnitGroupAlliance(libGame_gf_ComputerPlayerInTeam(lp_team), c_unitAllianceEnemy, libAMPU_gv_aRMPunisherPunisherEngageArea, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    if ((libNtve_gf_UnitGroupIsDead(lv_heroGroup) == true)) {
        if ((UnitIsAlive(libAMPU_gv_aRMPunisherPunishers[lv_enemyTeam].lv_unit) == true)) {
            if ((RegionContainsPoint(libAMPU_gv_aRMPunisherPunisherEngageArea, UnitGetPosition(libAMPU_gv_aRMPunisherPunishers[lv_enemyTeam].lv_unit)) == true)) {
                UnitIssueOrder(lv_punisher, OrderTargetingUnit(AbilityCommand("attack", 0), libAMPU_gv_aRMPunisherPunishers[lv_enemyTeam].lv_unit), c_orderQueueReplace);
                libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state = libAMPU_ge_ARMPunisherState_IdleChasingHero;
                lv_state = libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state;
                for (auto877F39C0_i = 1; auto877F39C0_i <= auto877F39C0_n; auto877F39C0_i += 1) {
                    if ((UnitIsAlive(lv_punisher) == false)) {
                        return true;
                    }

                    if ((UnitIsAlive(libAMPU_gv_aRMPunisherPunishers[lv_enemyTeam].lv_unit) == false)) {
                        break;
                    }

                    Wait(0.125, c_timeGame);
                }
                if ((UnitIsAlive(lv_punisher) == true) && (libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state == lv_state)) {
                    libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state = libAMPU_ge_ARMPunisherState_Idle;
                }

            }
            else {
                libAMPU_gf_ARMPunisherPunisherReturnToCenter(lp_team);
            }
        }
        else {
            libAMPU_gf_ARMPunisherPunisherReturnToCenter(lp_team);
        }
        return true;
    }

    libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state = libAMPU_ge_ARMPunisherState_IdleChasingHero;
    lv_state = libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state;
    lv_closestHero = UnitGroupClosestToPoint(lv_heroGroup, UnitGetPosition(lv_punisher));
    UnitIssueOrder(lv_punisher, OrderTargetingUnit(AbilityCommand("attack", 0), lv_closestHero), c_orderQueueReplace);
    for (autoC7807F01_i = 1; autoC7807F01_i <= autoC7807F01_n; autoC7807F01_i += 1) {
        if (((UnitIsAlive(lv_punisher) == false) || (UnitIsAlive(lv_closestHero) == false) || (RegionContainsPoint(libAMPU_gv_aRMPunisherPunisherEngageArea, UnitGetPosition(lv_closestHero)) == false))) {
            break;
        }

        Wait(0.125, c_timeGame);
    }
    if ((UnitIsAlive(lv_punisher) == true) && (libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state == lv_state)) {
        libAMPU_gv_aRMPunisherPunishers[lp_team].lv_state = libAMPU_ge_ARMPunisherState_Idle;
    }

    return true;
}

trigger auto_libAMPU_gf_ARMPunisherJumpBackToCenter_Trigger = null;
int auto_libAMPU_gf_ARMPunisherJumpBackToCenter_lp_team;
unit auto_libAMPU_gf_ARMPunisherJumpBackToCenter_lp_punisher;

void libAMPU_gf_ARMPunisherJumpBackToCenter (int lp_team, unit lp_punisher) {
    auto_libAMPU_gf_ARMPunisherJumpBackToCenter_lp_team = lp_team;
    auto_libAMPU_gf_ARMPunisherJumpBackToCenter_lp_punisher = lp_punisher;

    if (auto_libAMPU_gf_ARMPunisherJumpBackToCenter_Trigger == null) {
        auto_libAMPU_gf_ARMPunisherJumpBackToCenter_Trigger = TriggerCreate("auto_libAMPU_gf_ARMPunisherJumpBackToCenter_TriggerFunc");
    }

    TriggerExecute(auto_libAMPU_gf_ARMPunisherJumpBackToCenter_Trigger, false, false);
}

bool auto_libAMPU_gf_ARMPunisherJumpBackToCenter_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libAMPU_gf_ARMPunisherJumpBackToCenter_lp_team;
    unit lp_punisher = auto_libAMPU_gf_ARMPunisherJumpBackToCenter_lp_punisher;

    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_enemyTeam = libGame_gf_EnemyTeam(lp_team);
    if ((TimerGetElapsed(libGame_gv_gameTimer) > 15.0)) {
        libNtve_gf_PauseUnit(lp_punisher, true);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_punisher), "PrepareJump", "Spell C", c_animFlagNonLooping, c_animTimeDefault);
        Wait(libAMPU_gv_aRMPunisherJumpBackToCenterDelay_C, c_timeGame);
        libNtve_gf_PauseUnit(lp_punisher, false);
    }

    if ((libAMPU_gv_aRMPunisherPunisherJumpBackCenterPing == c_invalidPingId)) {
        if ((libAMPU_gv_aRMPunisherPunisherFirstLeapOccurred == false)) {
            libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormArenaAlert", libAMPU_gv_aRMPunisherPunisherJumpLocations[0][libAMPU_gv_aRMPunisherPunisherNextDuelPositionIndex], ColorWithAlpha(0,0,0,0), 4.0);
            libAMPU_gv_aRMPunisherPunisherFirstLeapOccurred = true;
        }
        else {
            libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormAlertSilent", libAMPU_gv_aRMPunisherPunisherJumpLocations[0][libAMPU_gv_aRMPunisherPunisherNextDuelPositionIndex], ColorWithAlpha(0,0,0,0), 4.0);
        }
        libAMPU_gv_aRMPunisherPunisherJumpBackCenterPing = PingLastCreated();
        PingSetColor(PingLastCreated(), Color(100.00, 100.00, 0.00));
    }

    UnitIssueOrder(lp_punisher, OrderTargetingPoint(AbilityCommand("MercPunisherLanerLeapGlobal", 0), libAMPU_gv_aRMPunisherPunisherJumpLocations[lp_team][libAMPU_gv_aRMPunisherPunisherNextDuelPositionIndex]), c_orderQueueReplace);
    UnitIssueOrder(lp_punisher, OrderTargetingUnit(AbilityCommand("attack", 0), libAMPU_gv_aRMPunisherPunishers[lv_enemyTeam].lv_unit), c_orderQueueAddToEnd);
    return true;
}

void libAMPU_gf_ARMPunisherCleanUpPunisher () {
    // Variable Declarations
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto8E8BD76D_ae = 2;
    const int auto8E8BD76D_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itTeam = 1;
    for ( ; ( (auto8E8BD76D_ai >= 0 && lv_itTeam <= auto8E8BD76D_ae) || (auto8E8BD76D_ai < 0 && lv_itTeam >= auto8E8BD76D_ae) ) ; lv_itTeam += auto8E8BD76D_ai ) {
        UnitRemove(libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_unit);
        libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_unit = null;
        libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_state = libAMPU_ge_ARMPunisherState_Dead;
        libAMPU_gv_aRMPunisherPunisherSpawnLocations[lv_itTeam] = null;
        libAMPU_gv_aRMPunisherPunisherJumpLocations[lv_itTeam][1] = null;
        libAMPU_gv_aRMPunisherPunisherJumpLocations[lv_itTeam][2] = null;
        libAMPU_gv_aRMPunisherPunisherJumpLocations[lv_itTeam][3] = null;
        libAMPU_gv_aRMPunisherPunisherEngageArea = null;
    }
    libAMPU_gv_aRMPunisherPunisherNextDuelPositionIndex = 0;
}

void libAMPU_gf_ARMPunisherPanelLevelUpdate () {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_AMPU_C321A8E4", "A", IntToText(libAMPU_gv_aRMPunisherSkullRequired_C));
    libNtve_gf_SetDialogItemText(libUIUI_gv_topBarPanel.lv_coreHealthLabel, TextExpressionAssemble("Param/Expression/lib_AMPU_C321A8E4"), PlayerGroupAll());
    DialogControlSetPosition(libUIUI_gv_topBarPanel.lv_coreHealthLabel, PlayerGroupAll(), c_anchorTop, 0, 80);
    DialogControlSetVisible(libAMPU_gv_aRMPunisherPanel.lv_gardenOfTerrorPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(libAMPU_gv_aRMPunisherPanel.lv_gardenOfTerrorPanel2, PlayerGroupAll(), true);
}

void libAMPU_gf_MapMechanicsGardenOfTerrorSetSeedCountForTeam (int lp_team, fixed lp_countText) {
    // Variable Declarations
    fixed lv_coreLife;
    int lv_countText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_countText == 0)) {
        lv_coreLife = 3.0;
        lv_countText = 0;
    }
    else {
        if ((lp_countText > libAMPU_gv_aRMPunisherSkullRequired_C)) {
            lv_coreLife = libAMPU_gv_aRMPunisherSkullRequired_C;
            lv_countText = libAMPU_gv_aRMPunisherSkullRequired_C;
        }
        else {
            lv_coreLife = lp_countText;
            lv_countText = FixedToInt(lp_countText);
        }
    }
    UnitSetPropertyFixed(libGame_gv_teams[lp_team].lv_core, c_unitPropLife, lv_coreLife);
    libNtve_gf_SetDialogItemText(libAMPU_gv_aRMPunisherPanel.lv_skullsCounts[lp_team], IntToText(lv_countText), PlayerGroupAll());
}

void libAMPU_gf_ARMPunisherBottomPanelInit (int lp_parentPanel) {
    int init_i;

    // Variable Declarations
    int lv_itTeam;
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    const int auto053BFA4B_ae = 2;
    const int auto053BFA4B_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    DialogControlCreateInPanelFromTemplate(lp_parentPanel, c_triggerControlTypePanel, "ArenaPunisher/ArenaPunisherPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libAMPU_gv_aRMPunisherPanel.lv_gardenOfTerrorPanel2 = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PunishersSpawnContainer");
    libAMPU_gv_aRMPunisherPanel.lv_spawnTimerPanel = DialogControlLastCreated();
    DialogControlHookup(libAMPU_gv_aRMPunisherPanel.lv_spawnTimerPanel, c_triggerControlTypeLabel, "InfoLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_AMPU_538C0FCC"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PunishersHealthContainer");
    libAMPU_gv_aRMPunisherPanel.lv_healthPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (auto053BFA4B_ai >= 0 && lv_itTeam <= auto053BFA4B_ae) || (auto053BFA4B_ai < 0 && lv_itTeam >= auto053BFA4B_ae) ) ; lv_itTeam += auto053BFA4B_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("PunisherFrame" + IntToString(lv_itTeam))));
        libAMPU_gv_aRMPunisherPanel.lv_punisherHealthFrames[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(libAMPU_gv_aRMPunisherPanel.lv_punisherHealthFrames[lv_itTeam], c_triggerControlTypeUnitStatus, "HealthBarFrame");
        libAMPU_gv_aRMPunisherPanel.lv_punisherHealthBars[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(libAMPU_gv_aRMPunisherPanel.lv_punisherHealthFrames[lv_itTeam], c_triggerControlTypeLabel, "PunisherHealthLabel");
        libAMPU_gv_aRMPunisherPanel.lv_punisherHealthLabels[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(libAMPU_gv_aRMPunisherPanel.lv_punisherHealthFrames[lv_itTeam], c_triggerControlTypeLabel, "PunisherTimerLabel");
        libAMPU_gv_aRMPunisherPanel.lv_punisherRespawnTimers[lv_itTeam] = DialogControlLastCreated();
    }
}

void libAMPU_gf_ARMPunisherBottomPanelSetPunisher (int lp_team, unit lp_countText) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemUnit(libAMPU_gv_aRMPunisherPanel.lv_punisherHealthBars[lp_team], lp_countText, PlayerGroupAll());
    DialogControlSetVisible(libAMPU_gv_aRMPunisherPanel.lv_spawnTimerPanel, PlayerGroupAll(), false);
    DialogControlSetVisible(libAMPU_gv_aRMPunisherPanel.lv_healthPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(libAMPU_gv_aRMPunisherPanel.lv_punisherHealthLabels[lp_team], PlayerGroupAll(), true);
    DialogControlSetVisible(libAMPU_gv_aRMPunisherPanel.lv_punisherRespawnTimers[lp_team], PlayerGroupAll(), false);
    DialogControlSendAnimationEvent(libAMPU_gv_aRMPunisherPanel.lv_punisherHealthFrames[lp_team], PlayerGroupAll(), "PunisherSpawned");
}

trigger auto_libAMPU_gf_ARMPunisherTransmissionScoreWarningQ_Trigger = null;
int auto_libAMPU_gf_ARMPunisherTransmissionScoreWarningQ_lp_team;
int auto_libAMPU_gf_ARMPunisherTransmissionScoreWarningQ_lp_skulls;

void libAMPU_gf_ARMPunisherTransmissionScoreWarningQ (int lp_team, int lp_skulls) {
    auto_libAMPU_gf_ARMPunisherTransmissionScoreWarningQ_lp_team = lp_team;
    auto_libAMPU_gf_ARMPunisherTransmissionScoreWarningQ_lp_skulls = lp_skulls;

    if (auto_libAMPU_gf_ARMPunisherTransmissionScoreWarningQ_Trigger == null) {
        auto_libAMPU_gf_ARMPunisherTransmissionScoreWarningQ_Trigger = TriggerCreate("auto_libAMPU_gf_ARMPunisherTransmissionScoreWarningQ_TriggerFunc");
    }

    TriggerExecute(auto_libAMPU_gf_ARMPunisherTransmissionScoreWarningQ_Trigger, false, false);
}

bool auto_libAMPU_gf_ARMPunisherTransmissionScoreWarningQ_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libAMPU_gf_ARMPunisherTransmissionScoreWarningQ_lp_team;
    int lp_skulls = auto_libAMPU_gf_ARMPunisherTransmissionScoreWarningQ_lp_skulls;

    // Automatic Variable Declarations
    int auto94BB3DB4_val;

    // Implementation
    TriggerQueueEnter();
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    auto94BB3DB4_val = lp_skulls;
    if (auto94BB3DB4_val == 50) {
        if ((lp_team == libGame_gv_teamOrderIndex_C)) {
            libAMPU_gf_ARMPunisherTransmissionOrderTeam50();
            libAREN_gf_ARM_UpdateWallaLevel(2);
        }

        if ((lp_team == libGame_gv_teamChaosIndex_C)) {
            libAMPU_gf_ARMPunisherTransmissionChaosTeam50();
            libAREN_gf_ARM_UpdateWallaLevel(2);
        }

    }
    else if (auto94BB3DB4_val == 80) {
        if ((lp_team == libGame_gv_teamOrderIndex_C)) {
            libAMPU_gf_ARMPunisherTransmissionOrderTeam80();
            libAREN_gf_ARM_UpdateWallaLevel(3);
        }

        if ((lp_team == libGame_gv_teamChaosIndex_C)) {
            libAMPU_gf_ARMPunisherTransmissionChaosTeam80();
            libAREN_gf_ARM_UpdateWallaLevel(3);
        }

    }
    else {
    }
    Wait(2.0, c_timeGame);
    TriggerQueueExit();
    return true;
}

trigger auto_libAMPU_gf_ARMPunisherTransmissionOrderTeam50_Trigger = null;

void libAMPU_gf_ARMPunisherTransmissionOrderTeam50 () {
    if (auto_libAMPU_gf_ARMPunisherTransmissionOrderTeam50_Trigger == null) {
        auto_libAMPU_gf_ARMPunisherTransmissionOrderTeam50_Trigger = TriggerCreate("auto_libAMPU_gf_ARMPunisherTransmissionOrderTeam50_TriggerFunc");
    }

    TriggerExecute(auto_libAMPU_gf_ARMPunisherTransmissionOrderTeam50_Trigger, false, false);
}

bool auto_libAMPU_gf_ARMPunisherTransmissionOrderTeam50_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupOrder;
    playergroup lv_groupChaos;
    playergroup lv_observers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupOrder = PlayerGroupEmpty();
    lv_groupChaos = PlayerGroupEmpty();
    lv_observers = PlayerGroupEmpty();

    // Implementation
    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Punisher 50 - Left", "Value", 1, 1);
    lv_groupOrder = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupChaos = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_observers = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("ArenaVO", ("Left"), lv_groupOrder);
    ConversationDataLineSetPlayers("ArenaVO", ("Right"), lv_groupChaos);
    ConversationDataLineSetPlayers("ArenaVO", ("Observer"), lv_observers);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMPU_gf_ARMPunisherTransmissionChaosTeam50_Trigger = null;

void libAMPU_gf_ARMPunisherTransmissionChaosTeam50 () {
    if (auto_libAMPU_gf_ARMPunisherTransmissionChaosTeam50_Trigger == null) {
        auto_libAMPU_gf_ARMPunisherTransmissionChaosTeam50_Trigger = TriggerCreate("auto_libAMPU_gf_ARMPunisherTransmissionChaosTeam50_TriggerFunc");
    }

    TriggerExecute(auto_libAMPU_gf_ARMPunisherTransmissionChaosTeam50_Trigger, false, false);
}

bool auto_libAMPU_gf_ARMPunisherTransmissionChaosTeam50_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupOrder;
    playergroup lv_groupChaos;
    playergroup lv_observers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupOrder = PlayerGroupEmpty();
    lv_groupChaos = PlayerGroupEmpty();
    lv_observers = PlayerGroupEmpty();

    // Implementation
    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Punisher 50 - Right", "Value", 1, 1);
    lv_groupOrder = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupChaos = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_observers = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("ArenaVO", ("Left"), lv_groupOrder);
    ConversationDataLineSetPlayers("ArenaVO", ("Right"), lv_groupChaos);
    ConversationDataLineSetPlayers("ArenaVO", ("Observer"), lv_observers);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMPU_gf_ARMPunisherTransmissionOrderTeam80_Trigger = null;

void libAMPU_gf_ARMPunisherTransmissionOrderTeam80 () {
    if (auto_libAMPU_gf_ARMPunisherTransmissionOrderTeam80_Trigger == null) {
        auto_libAMPU_gf_ARMPunisherTransmissionOrderTeam80_Trigger = TriggerCreate("auto_libAMPU_gf_ARMPunisherTransmissionOrderTeam80_TriggerFunc");
    }

    TriggerExecute(auto_libAMPU_gf_ARMPunisherTransmissionOrderTeam80_Trigger, false, false);
}

bool auto_libAMPU_gf_ARMPunisherTransmissionOrderTeam80_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupOrder;
    playergroup lv_groupChaos;
    playergroup lv_observers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupOrder = PlayerGroupEmpty();
    lv_groupChaos = PlayerGroupEmpty();
    lv_observers = PlayerGroupEmpty();

    // Implementation
    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Punisher 80 - Left", "Value", 1, 1);
    lv_groupOrder = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupChaos = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_observers = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("ArenaVO", ("Left"), lv_groupOrder);
    ConversationDataLineSetPlayers("ArenaVO", ("Right"), lv_groupChaos);
    ConversationDataLineSetPlayers("ArenaVO", ("Observer"), lv_observers);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMPU_gf_ARMPunisherTransmissionChaosTeam80_Trigger = null;

void libAMPU_gf_ARMPunisherTransmissionChaosTeam80 () {
    if (auto_libAMPU_gf_ARMPunisherTransmissionChaosTeam80_Trigger == null) {
        auto_libAMPU_gf_ARMPunisherTransmissionChaosTeam80_Trigger = TriggerCreate("auto_libAMPU_gf_ARMPunisherTransmissionChaosTeam80_TriggerFunc");
    }

    TriggerExecute(auto_libAMPU_gf_ARMPunisherTransmissionChaosTeam80_Trigger, false, false);
}

bool auto_libAMPU_gf_ARMPunisherTransmissionChaosTeam80_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupOrder;
    playergroup lv_groupChaos;
    playergroup lv_observers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupOrder = PlayerGroupEmpty();
    lv_groupChaos = PlayerGroupEmpty();
    lv_observers = PlayerGroupEmpty();

    // Implementation
    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Punisher 80 - Right", "Value", 1, 1);
    lv_groupOrder = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupChaos = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_observers = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("ArenaVO", ("Left"), lv_groupOrder);
    ConversationDataLineSetPlayers("ArenaVO", ("Right"), lv_groupChaos);
    ConversationDataLineSetPlayers("ArenaVO", ("Observer"), lv_observers);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMPU_gf_ARMPunisherTransmissionPunisherStartEnraging_Trigger = null;

void libAMPU_gf_ARMPunisherTransmissionPunisherStartEnraging () {
    if (auto_libAMPU_gf_ARMPunisherTransmissionPunisherStartEnraging_Trigger == null) {
        auto_libAMPU_gf_ARMPunisherTransmissionPunisherStartEnraging_Trigger = TriggerCreate("auto_libAMPU_gf_ARMPunisherTransmissionPunisherStartEnraging_TriggerFunc");
    }

    TriggerExecute(auto_libAMPU_gf_ARMPunisherTransmissionPunisherStartEnraging_Trigger, false, false);
}

bool auto_libAMPU_gf_ARMPunisherTransmissionPunisherStartEnraging_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto83019224_val;

    // Implementation
    TriggerQueueEnter();
    auto83019224_val = RandomInt(1, 2);
    if (auto83019224_val == 1) {
        libCore_gf_SendTransmissionCampaign(null, "CreepVO|Line00309", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto83019224_val == 2) {
        libCore_gf_SendTransmissionCampaign(null, "CreepVO|Line00338", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

trigger auto_libAMPU_gf_ARMPunisherTransmissionPunisherStopEnraging_Trigger = null;

void libAMPU_gf_ARMPunisherTransmissionPunisherStopEnraging () {
    if (auto_libAMPU_gf_ARMPunisherTransmissionPunisherStopEnraging_Trigger == null) {
        auto_libAMPU_gf_ARMPunisherTransmissionPunisherStopEnraging_Trigger = TriggerCreate("auto_libAMPU_gf_ARMPunisherTransmissionPunisherStopEnraging_TriggerFunc");
    }

    TriggerExecute(auto_libAMPU_gf_ARMPunisherTransmissionPunisherStopEnraging_Trigger, false, false);
}

bool auto_libAMPU_gf_ARMPunisherTransmissionPunisherStopEnraging_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    TriggerQueueEnter();
    libCore_gf_SendTransmissionCampaign(null, "CreepVO|Line00339", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerQueueExit();
    return true;
}

trigger auto_libAMPU_gf_ARMPunisherTransmissionPunisherRespawn_Trigger = null;
int auto_libAMPU_gf_ARMPunisherTransmissionPunisherRespawn_lp_team;

void libAMPU_gf_ARMPunisherTransmissionPunisherRespawn (int lp_team) {
    auto_libAMPU_gf_ARMPunisherTransmissionPunisherRespawn_lp_team = lp_team;

    if (auto_libAMPU_gf_ARMPunisherTransmissionPunisherRespawn_Trigger == null) {
        auto_libAMPU_gf_ARMPunisherTransmissionPunisherRespawn_Trigger = TriggerCreate("auto_libAMPU_gf_ARMPunisherTransmissionPunisherRespawn_TriggerFunc");
    }

    TriggerExecute(auto_libAMPU_gf_ARMPunisherTransmissionPunisherRespawn_Trigger, false, false);
}

bool auto_libAMPU_gf_ARMPunisherTransmissionPunisherRespawn_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libAMPU_gf_ARMPunisherTransmissionPunisherRespawn_lp_team;

    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerQueueEnter();
    TransmissionSendForPlayerSelect(libGame_gf_PlayersOnTeamHeroes(lp_team, false), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLink(ConversationDataGetSound("CreepVO|Line00308", false), c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    TriggerQueueExit();
    return true;
}

void libAMPU_gf_TriggerDebugOutput (text lp_msg) {
    // Automatic Variable Declarations
    // Implementation
    if ((libAMPU_gv_aRMPunisherDebugTextEnabled == true)) {
        TriggerDebugOutput(1, lp_msg, true);
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Punisher> Initialization
//--------------------------------------------------------------------------------------------------
bool libAMPU_gt_ARMPunisherInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_PingCreateNewPingTarget("MercPunisherLaner", false, StringExternal("Param/Value/lib_AMPU_CCE20E34"), StringExternal("Param/Value/lib_AMPU_5049040C"), StringExternal("Param/Value/lib_AMPU_F44500C6"), SoundLink("UI_Game_Ping_Help", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetAllyEnemyTargetHeroVOForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libCore_ge_HeroVOEvents_PingAttackHere, libCore_ge_HeroVOEvents_PingAttackHere);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMPU_gt_ARMPunisherInitialization_Init () {
    libAMPU_gt_ARMPunisherInitialization = TriggerCreate("libAMPU_gt_ARMPunisherInitialization_Func");
    libCore_gf_IncludeModInitialization(libAMPU_gt_ARMPunisherInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Punisher> Gates Timer Expires
//--------------------------------------------------------------------------------------------------
bool libAMPU_gt_ARMPunisherGatesTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMPU_gt_ARMPunisherGatesTimerExpires_Init () {
    libAMPU_gt_ARMPunisherGatesTimerExpires = TriggerCreate("libAMPU_gt_ARMPunisherGatesTimerExpires_Func");
    TriggerAddEventTimer(libAMPU_gt_ARMPunisherGatesTimerExpires, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Punisher> Level Start
//--------------------------------------------------------------------------------------------------
bool libAMPU_gt_ARMPunisherLevelStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_levelIndex;
    int lv_itTempleIndex;
    int lv_itPlayer;
    int lv_itTeam;

    // Automatic Variable Declarations
    int autoE20F54F1_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_levelIndex = libAREN_gf_ArenaCurrentLevelIndex();
    libAREN_gv_aRM_VictorySequencePlaying = false;
    libAMPU_gf_ARMPunisherCleanUpPunisher();
    libAMPU_gv_aRMPunisherTeamScore[1] = 0;
    libAMPU_gv_aRMPunisherScoreWarningLevel[1] = 0;
    libAMPU_gv_aRMPunisherTeamScore[2] = 0;
    libAMPU_gv_aRMPunisherScoreWarningLevel[2] = 0;
    libAMPU_gv_aRMPunisherPunisherRespawning = false;
    TriggerEnable(libAMPU_gt_ARMPunisherPunisherLogic, true);
    if ((libMapM_gv_mapMechanicControllerActor == null)) {
        libNtve_gf_CreateActorAtPoint("MMController", RegionGetCenter(RegionEntireMap()));
        libMapM_gv_mapMechanicControllerActor = libNtve_gf_ActorLastCreated();
    }

    if ((libAMPU_gv_aRMPunisherLevelStartCallback[lv_levelIndex] != null)) {
        TriggerExecute(libAMPU_gv_aRMPunisherLevelStartCallback[lv_levelIndex], true, false);
    }

    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal MM1Off");
    TriggerEnable(libAMPU_gt_ARMPunisherGatesOpened, true);
    TriggerEnable(libAMPU_gt_ARMPunisherHeroDies, true);
    TriggerEnable(libAMPU_gt_ARMPunisherPunisherDies, true);
    libCore_gf_RegisterSegregationTrigger(libCore_ge_SegregationTriggerTypes_DefenderAIIssueOrdersToCreep, libAMPU_gt_ARMPunisherBossAINotUsed);
    TriggerExecute(libAMPU_gt_ARMPunisherPunisherVisionFollower, true, false);
    autoE20F54F1_val = libAMPU_gf_ARMPunisherCurrentLevel();
    if (autoE20F54F1_val == libAMPU_ge_ARMPunisherLevel_Level1) {
        libMSHD_gf_MMISPreloadPunisherModels("DiabloMortar");
    }
    else if (autoE20F54F1_val == libAMPU_ge_ARMPunisherLevel_Level2) {
        libMSHD_gf_MMISPreloadPunisherModels("DiabloFrozen");
    }
    else if (autoE20F54F1_val == libAMPU_ge_ARMPunisherLevel_Level3) {
        libMSHD_gf_MMISPreloadPunisherModels("DiabloArcane");
    }
    else {
    }
    TriggerExecute(libAMPU_gt_ARMPunisherPanelInit, true, false);
    libAMPU_gf_MapMechanicsGardenOfTerrorSetSeedCountForTeam(1, 0);
    libAMPU_gf_MapMechanicsGardenOfTerrorSetSeedCountForTeam(2, 0);
    libAMPU_gf_ARMPunisherPanelLevelUpdate();
    libAMPU_gf_MapMechanicsGardenOfTerrorSetSeedCountForTeam(libGame_gv_teamOrderIndex_C, libAMPU_gv_aRMPunisherTeamScore[libGame_gv_teamOrderIndex_C]);
    libAMPU_gf_MapMechanicsGardenOfTerrorSetSeedCountForTeam(libGame_gv_teamChaosIndex_C, libAMPU_gv_aRMPunisherTeamScore[libGame_gv_teamChaosIndex_C]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMPU_gt_ARMPunisherLevelStart_Init () {
    libAMPU_gt_ARMPunisherLevelStart = TriggerCreate("libAMPU_gt_ARMPunisherLevelStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Punisher> Gates Opened
//--------------------------------------------------------------------------------------------------
bool libAMPU_gt_ARMPunisherGatesOpened_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_SendActorMessageToUnit(libAMPU_gv_aRMPunisherPunishers[libGame_gv_teamOrderIndex_C].lv_shrine, "Signal ShortBirthAnim");
    libNtve_gf_SendActorMessageToUnit(libAMPU_gv_aRMPunisherPunishers[libGame_gv_teamChaosIndex_C].lv_shrine, "Signal ShortBirthAnim");
    libAMPU_gf_ARMPunisherPunisherSpawn(libGame_gv_teamOrderIndex_C, libAMPU_gv_aRMPunisherSpawnAnimationDelay_C);
    libAMPU_gf_ARMPunisherPunisherSpawn(libGame_gv_teamChaosIndex_C, libAMPU_gv_aRMPunisherSpawnAnimationDelay_C);
    Wait(libAMPU_gv_aRMPunisherSpawnAnimationDelay_C, c_timeGame);
    Wait(libAMPU_gv_aRMPunisherStartDelay_C, c_timeGame);
    libAMPU_gv_aRMPunisherPunisherNextDuelPositionIndex = 1;
    libAMPU_gf_ARMPunisherPunisherMarchToCenter();
    while (!((libAMPU_gv_aRMPunisherPunishers[1].lv_state == libAMPU_ge_ARMPunisherState_DuelingPunisher) && (libAMPU_gv_aRMPunisherPunishers[2].lv_state == libAMPU_ge_ARMPunisherState_DuelingPunisher))) {
        Wait(0.25, c_timeGame);
    }
    TriggerEnable(libAMPU_gt_ARMPunisherPunisherLogic, true);
    TriggerExecute(libAMPU_gt_ARMPunisherPunisherLogic, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMPU_gt_ARMPunisherGatesOpened_Init () {
    libAMPU_gt_ARMPunisherGatesOpened = TriggerCreate("libAMPU_gt_ARMPunisherGatesOpened_Func");
    TriggerEnable(libAMPU_gt_ARMPunisherGatesOpened, false);
    TriggerAddEventTimer(libAMPU_gt_ARMPunisherGatesOpened, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Punisher> Hero Dies
//--------------------------------------------------------------------------------------------------
bool libAMPU_gt_ARMPunisherHeroDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_player2;
    int lv_player;
    int lv_deadTeam;
    int lv_killingTeam;
    point lv_location;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player2 = libGame_gf_HeroKilledUnit();
    lv_player = libGame_gf_HeroKilledPlayer();
    lv_deadTeam = libGame_gf_TeamNumberOfPlayer(lv_player);
    lv_killingTeam = libGame_gf_EnemyTeam(lv_deadTeam);
    lv_location = libGame_gf_HeroKilledLocation();
    libAMPU_gf_ARMPunisherGainScore(lv_killingTeam, libAMPU_gf_ARMPunisherHeroScore(lv_player, lv_player2), lv_location);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMPU_gt_ARMPunisherHeroDies_Init () {
    libAMPU_gt_ARMPunisherHeroDies = TriggerCreate("libAMPU_gt_ARMPunisherHeroDies_Func");
    TriggerEnable(libAMPU_gt_ARMPunisherHeroDies, false);
    libGame_gf_HeroKilled(libAMPU_gt_ARMPunisherHeroDies);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Punisher> Punisher Dies
//--------------------------------------------------------------------------------------------------
bool libAMPU_gt_ARMPunisherPunisherDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_player2;
    int lv_player;
    int lv_deadTeam;
    int lv_killingTeam;
    point lv_location;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player2 = EventUnit();
    lv_player = UnitGetOwner(lv_player2);
    lv_deadTeam = libGame_gf_TeamNumberOfPlayer(lv_player);
    lv_killingTeam = libGame_gf_EnemyTeam(lv_deadTeam);
    lv_location = UnitGetPosition(lv_player2);
    libAMPU_gf_ARMPunisherGainScore(lv_killingTeam, libAMPU_gv_aRMPunisherSkullDropPunisher_C, lv_location);
    libAMPU_gv_aRMPunisherPunishers[lv_deadTeam].lv_state = libAMPU_ge_ARMPunisherState_Dead;
    libAMPU_gv_aRMPunisherPunishers[lv_deadTeam].lv_unit = null;
    libAMPU_gv_aRMPunisherPunisherRespawning = true;
    SoundPlayForPlayer(SoundLink("ArenaMode_Crowd_Cheer_EventLost", -1), c_maxPlayers, PlayerGroupAlliance(c_playerGroupAlly, lv_player), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("ArenaMode_Crowd_Cheer_EventWon", -1), c_maxPlayers, PlayerGroupAlliance(c_playerGroupEnemy, lv_player), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMPU_gt_ARMPunisherPunisherDies_Init () {
    libAMPU_gt_ARMPunisherPunisherDies = TriggerCreate("libAMPU_gt_ARMPunisherPunisherDies_Func");
    TriggerEnable(libAMPU_gt_ARMPunisherPunisherDies, false);
    TriggerAddEventUnitDied(libAMPU_gt_ARMPunisherPunisherDies, UnitRefFromVariable("libAMPU_gv_aRMPunisherPunishers[1].lv_unit"));
    TriggerAddEventUnitDied(libAMPU_gt_ARMPunisherPunisherDies, UnitRefFromVariable("libAMPU_gv_aRMPunisherPunishers[2].lv_unit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Punisher> Core Dies (Debug)
//--------------------------------------------------------------------------------------------------
bool libAMPU_gt_ARMPunisherCoreDiesDebug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libAREN_gv_aRM_VictorySequencePlaying == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core)) {
        libAREN_gv_aRM_RoundWinningTeam = libGame_gv_teamChaosIndex_C;
    }
    else {
        libAREN_gv_aRM_RoundWinningTeam = libGame_gv_teamOrderIndex_C;
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_AMPU_0C100FC4"), true);
    libAREN_gv_aRM_VictorySequenceDelay = 0.0;
    libAMPU_gv_aRMPunisherPunisherFirstLeapOccurred = false;
    libAREN_gf_ARM_RoundOver();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMPU_gt_ARMPunisherCoreDiesDebug_Init () {
    libAMPU_gt_ARMPunisherCoreDiesDebug = TriggerCreate("libAMPU_gt_ARMPunisherCoreDiesDebug_Func");
    TriggerAddEventUnitDied(libAMPU_gt_ARMPunisherCoreDiesDebug, UnitRefFromVariable("libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core"));
    TriggerAddEventUnitDied(libAMPU_gt_ARMPunisherCoreDiesDebug, UnitRefFromVariable("libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Punisher> Punisher Vision Follower
//--------------------------------------------------------------------------------------------------
bool libAMPU_gt_ARMPunisherPunisherVisionFollower_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto229CD361_ae = 2;
    const int auto229CD361_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libGame_gv_gameOver == true)) {
            UnitRemove(libAMPU_gv_aRMPunisherPunishers[1].lv_visionUnit);
            libAMPU_gv_aRMPunisherPunishers[1].lv_visionUnit = null;
            UnitRemove(libAMPU_gv_aRMPunisherPunishers[2].lv_visionUnit);
            libAMPU_gv_aRMPunisherPunishers[2].lv_visionUnit = null;
            return true;
        }

        lv_itTeam = 1;
        for ( ; ( (auto229CD361_ai >= 0 && lv_itTeam <= auto229CD361_ae) || (auto229CD361_ai < 0 && lv_itTeam >= auto229CD361_ae) ) ; lv_itTeam += auto229CD361_ai ) {
            if (((libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_visionUnit == null) || (UnitIsAlive(libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_visionUnit) == false)) && (UnitIsAlive(libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_unit) == true)) {
                UnitCreate(1, "JungleCampIconUnit", c_unitCreateIgnorePlacement, libGame_gf_ComputerPlayerInTeam(lv_itTeam), UnitGetPosition(libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_unit), 270.0, null);
                libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_visionUnit = UnitLastCreated();
            }

            if ((libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_visionUnit != null) && (UnitIsAlive(libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_visionUnit) == true)) {
                if ((UnitIsAlive(libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_unit) == true)) {
                    UnitSetPosition(libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_visionUnit, UnitGetPosition(libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_unit), false);
                }
                else {
                    UnitSetPosition(libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_visionUnit, libAMPU_gv_aRMPunisherPunisherSpawnLocations[lv_itTeam], false);
                }
            }

        }
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMPU_gt_ARMPunisherPunisherVisionFollower_Init () {
    libAMPU_gt_ARMPunisherPunisherVisionFollower = TriggerCreate("libAMPU_gt_ARMPunisherPunisherVisionFollower_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Punisher> Punisher Enter Duel Mode
//--------------------------------------------------------------------------------------------------
bool libAMPU_gt_ARMPunisherPunisherEnterDuelMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libAMPU_gv_aRMPunisherPunishState = libAMPU_ge_ARMPunisherPunishState_Dueling;
    TimerStart(libAMPU_gv_aRMPunisherTimerDueling, libAMPU_gv_aRMPunisherCalmDuration_C, false, c_timeGame);
    libNtve_gf_WaitForTimer(libAMPU_gv_aRMPunisherTimerDueling, 0.0, false);
    libAMPU_gv_aRMPunisherPunishState = libAMPU_ge_ARMPunisherPunishState_DuelingDone;
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMPU_gt_ARMPunisherPunisherEnterDuelMode_Init () {
    libAMPU_gt_ARMPunisherPunisherEnterDuelMode = TriggerCreate("libAMPU_gt_ARMPunisherPunisherEnterDuelMode_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Punisher> Punisher Enter Punish Mode
//--------------------------------------------------------------------------------------------------
bool libAMPU_gt_ARMPunisherPunisherEnterPunishMode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;

    // Automatic Variable Declarations
    const int autoB510C4C0_ae = 2;
    const int autoB510C4C0_ai = 1;
    const int autoB3AEFA17_ae = 2;
    const int autoB3AEFA17_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libAMPU_gv_aRMPunisherPunishState != libAMPU_ge_ARMPunisherPunishState_DuelingDone)) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libAMPU_gv_aRMPunisherPunishState = libAMPU_ge_ARMPunisherPunishState_Punishing;
    TimerStart(libAMPU_gv_aRMPunisherTimerEngraged, libAMPU_gv_aRMPunisherEnragedDuration_C, false, c_timeGame);
    while (true) {
        if (((TimerGetRemaining(libAMPU_gv_aRMPunisherTimerEngraged) == 0.0) || (libGame_gv_gameOver == true))) {
            break;
        }

        lv_itTeam = 1;
        for ( ; ( (autoB510C4C0_ai >= 0 && lv_itTeam <= autoB510C4C0_ae) || (autoB510C4C0_ai < 0 && lv_itTeam >= autoB510C4C0_ae) ) ; lv_itTeam += autoB510C4C0_ai ) {
            if ((UnitIsAlive(libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_unit) == true) && (UnitHasBehavior2(libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_unit, "MercPunisherLanerFixate") == false)) {
                libNtve_gf_SendActorMessageToUnit(libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_unit, "Signal StopDueling");
                UnitBehaviorAddPlayer(libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_unit, "MercPunisherLanerFixate", UnitGetOwner(libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_unit), 1);
                UnitBehaviorSetDurationRemaining(libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_unit, "MercPunisherLanerFixate", TimerGetRemaining(libAMPU_gv_aRMPunisherTimerEngraged));
            }

        }
        Wait(0.25, c_timeGame);
    }
    lv_itTeam = 1;
    for ( ; ( (autoB3AEFA17_ai >= 0 && lv_itTeam <= autoB3AEFA17_ae) || (autoB3AEFA17_ai < 0 && lv_itTeam >= autoB3AEFA17_ae) ) ; lv_itTeam += autoB3AEFA17_ai ) {
        if ((UnitIsAlive(libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_unit) == true) && (UnitHasBehavior2(libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_unit, "MercPunisherLanerFixate") == false)) {
            UnitBehaviorRemovePlayer(libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_unit, "MercPunisherLanerFixate", UnitGetOwner(libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_unit), 1);
        }

    }
    libAMPU_gv_aRMPunisherPunishState = libAMPU_ge_ARMPunisherPunishState_PunishingDone;
    TextExpressionSetToken("Param/Expression/lib_AMPU_3EE5FDBE", "A", IntToText(0));
    TextExpressionSetToken("Param/Expression/lib_AMPU_3EE5FDBE", "B", IntToText(FixedToInt(TimerGetElapsed(libAMPU_gv_aRMPunisherTimerEngraged))));
    TextExpressionSetToken("Param/Expression/lib_AMPU_3EE5FDBE", "C", FixedToText(TimerGetElapsed(libGame_gv_gameTimer), 2));
    libAMPU_gf_TriggerDebugOutput(TextExpressionAssemble("Param/Expression/lib_AMPU_3EE5FDBE"));
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMPU_gt_ARMPunisherPunisherEnterPunishMode_Init () {
    libAMPU_gt_ARMPunisherPunisherEnterPunishMode = TriggerCreate("libAMPU_gt_ARMPunisherPunisherEnterPunishMode_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Punisher> Punisher Logic
//--------------------------------------------------------------------------------------------------
bool libAMPU_gt_ARMPunisherPunisherLogic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    const fixed lv_interval_C = 0.25;

    // Automatic Variable Declarations
    const int auto9AA90909_ae = 2;
    const int auto9AA90909_ai = 1;
    int autoC8B43865_val;
    const int auto33781977_ae = 2;
    const int auto33781977_ai = 1;
    const int autoD40C548F_ae = 2;
    const int autoD40C548F_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        Wait(lv_interval_C, c_timeGame);
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        lv_itTeam = 1;
        for ( ; ( (auto9AA90909_ai >= 0 && lv_itTeam <= auto9AA90909_ae) || (auto9AA90909_ai < 0 && lv_itTeam >= auto9AA90909_ae) ) ; lv_itTeam += auto9AA90909_ai ) {
            if ((libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_state == libAMPU_ge_ARMPunisherState_Dead)) {
                libAMPU_gf_ARMPunisherPunisherSpawn(lv_itTeam, libAMPU_gv_aRMPunisherRespawnDelay_C);
            }

        }
        autoC8B43865_val = libAMPU_gv_aRMPunisherPunishState;
        if (autoC8B43865_val == libAMPU_ge_ARMPunisherPunishState_PunishingDone) {
            if (((libAMPU_gv_aRMPunisherPunishers[1].lv_state == libAMPU_ge_ARMPunisherState_Idle) || (libAMPU_gv_aRMPunisherPunishers[1].lv_state == libAMPU_ge_ARMPunisherState_IdleChasingHero)) && ((libAMPU_gv_aRMPunisherPunishers[2].lv_state == libAMPU_ge_ARMPunisherState_Idle) || (libAMPU_gv_aRMPunisherPunishers[2].lv_state == libAMPU_ge_ARMPunisherState_IdleChasingHero))) {
                libAMPU_gf_ARMPunisherPunisherDuelEngage(true);
            }
            else if ((libAMPU_gv_aRMPunisherPunishers[1].lv_state == libAMPU_ge_ARMPunisherState_Idle)) {
                libAMPU_gf_ARMPunisherPunisherIdleBehavior(1);
            }
            else if ((libAMPU_gv_aRMPunisherPunishers[2].lv_state == libAMPU_ge_ARMPunisherState_Idle)) {
                libAMPU_gf_ARMPunisherPunisherIdleBehavior(2);
            }
        }
        else if (autoC8B43865_val == libAMPU_ge_ARMPunisherPunishState_Dueling) {
            if (((libAMPU_gv_aRMPunisherPunishers[1].lv_state == libAMPU_ge_ARMPunisherState_Idle) || (libAMPU_gv_aRMPunisherPunishers[1].lv_state == libAMPU_ge_ARMPunisherState_IdleChasingHero)) && ((libAMPU_gv_aRMPunisherPunishers[2].lv_state == libAMPU_ge_ARMPunisherState_Idle) || (libAMPU_gv_aRMPunisherPunishers[2].lv_state == libAMPU_ge_ARMPunisherState_IdleChasingHero))) {
                if ((libNtve_gf_UnitInRegion(libAMPU_gv_aRMPunisherPunishers[1].lv_unit, libAMPU_gv_aRMPunisherPunisherEngageArea) == true) && (libNtve_gf_UnitInRegion(libAMPU_gv_aRMPunisherPunishers[2].lv_unit, libAMPU_gv_aRMPunisherPunisherEngageArea) == true)) {
                    UnitIssueOrder(libAMPU_gv_aRMPunisherPunishers[1].lv_unit, OrderTargetingUnit(AbilityCommand("TinkerSalvageAttack", 0), libAMPU_gv_aRMPunisherPunishers[2].lv_unit), c_orderQueueReplace);
                    UnitIssueOrder(libAMPU_gv_aRMPunisherPunishers[2].lv_unit, OrderTargetingUnit(AbilityCommand("TinkerSalvageAttack", 0), libAMPU_gv_aRMPunisherPunishers[1].lv_unit), c_orderQueueReplace);
                }
                else {
                    if ((libNtve_gf_UnitInRegion(libAMPU_gv_aRMPunisherPunishers[1].lv_unit, libAMPU_gv_aRMPunisherPunisherEngageArea) == false)) {
                        libAMPU_gf_ARMPunisherPunisherReturnToCenter(1);
                        libAMPU_gf_ARMPunisherPunisherIdleBehavior(2);
                    }

                    if ((libNtve_gf_UnitInRegion(libAMPU_gv_aRMPunisherPunishers[2].lv_unit, libAMPU_gv_aRMPunisherPunisherEngageArea) == false)) {
                        libAMPU_gf_ARMPunisherPunisherReturnToCenter(2);
                        libAMPU_gf_ARMPunisherPunisherIdleBehavior(1);
                    }

                }
            }
            else if ((libAMPU_gv_aRMPunisherPunishers[1].lv_state == libAMPU_ge_ARMPunisherState_Idle)) {
                libAMPU_gf_ARMPunisherPunisherIdleBehavior(1);
            }
            else if ((libAMPU_gv_aRMPunisherPunishers[2].lv_state == libAMPU_ge_ARMPunisherState_Idle)) {
                libAMPU_gf_ARMPunisherPunisherIdleBehavior(2);
            }
        }
        else if (autoC8B43865_val == libAMPU_ge_ARMPunisherPunishState_DuelingDone) {
            lv_itTeam = 1;
            for ( ; ( (auto33781977_ai >= 0 && lv_itTeam <= auto33781977_ae) || (auto33781977_ai < 0 && lv_itTeam >= auto33781977_ae) ) ; lv_itTeam += auto33781977_ai ) {
                if ((libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_state == libAMPU_ge_ARMPunisherState_Idle)) {
                    libAMPU_gf_ARMPunisherPunisherPunishHero(lv_itTeam);
                }

            }
        }
        else if (autoC8B43865_val == libAMPU_ge_ARMPunisherPunishState_Punishing) {
            lv_itTeam = 1;
            for ( ; ( (autoD40C548F_ai >= 0 && lv_itTeam <= autoD40C548F_ae) || (autoD40C548F_ai < 0 && lv_itTeam >= autoD40C548F_ae) ) ; lv_itTeam += autoD40C548F_ai ) {
                if ((libAMPU_gv_aRMPunisherPunishers[lv_itTeam].lv_state == libAMPU_ge_ARMPunisherState_Idle)) {
                    libAMPU_gf_ARMPunisherPunisherPunishHero(lv_itTeam);
                    continue;
                }

            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMPU_gt_ARMPunisherPunisherLogic_Init () {
    libAMPU_gt_ARMPunisherPunisherLogic = TriggerCreate("libAMPU_gt_ARMPunisherPunisherLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Punisher> Boss AI (Not Used)
//--------------------------------------------------------------------------------------------------
bool libAMPU_gt_ARMPunisherBossAINotUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMPU_gt_ARMPunisherBossAINotUsed_Init () {
    libAMPU_gt_ARMPunisherBossAINotUsed = TriggerCreate("libAMPU_gt_ARMPunisherBossAINotUsed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Punisher> Panel Init
//--------------------------------------------------------------------------------------------------
bool libAMPU_gt_ARMPunisherPanelInit_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_itTeam;
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_enemyTeam;

    // Automatic Variable Declarations
    const int auto005E38E6_ae = libCore_gv_bALMaxTeams;
    const int auto005E38E6_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlCreateInPanelFromTemplate(libUIUI_gv_uIPartyFrame.lv_mainPanel, c_triggerControlTypePanel, "ArenaPunisher/ArenaPunisherScorePanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libAMPU_gv_aRMPunisherPanel.lv_gardenOfTerrorPanel = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (auto005E38E6_ai >= 0 && lv_itTeam <= auto005E38E6_ae) || (auto005E38E6_ai < 0 && lv_itTeam >= auto005E38E6_ae) ) ; lv_itTeam += auto005E38E6_ai ) {
        DialogControlHookup(libAMPU_gv_aRMPunisherPanel.lv_gardenOfTerrorPanel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("Team" + IntToString(lv_itTeam) + "Score")));
        libAMPU_gv_aRMPunisherPanel.lv_skullsCounts[lv_itTeam] = DialogControlLastCreated();
    }
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HelpText");
    TextExpressionSetToken("Param/Expression/lib_AMPU_A5FC408B", "ObjectiveScore", IntToText(libAMPU_gv_aRMPunisherSkullRequired_C));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_AMPU_A5FC408B"), PlayerGroupAll());
    libAMPU_gf_ARMPunisherBottomPanelInit(libUIUI_gv_mapMechanicsPanel.lv_mainPanel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMPU_gt_ARMPunisherPanelInit_Init () {
    libAMPU_gt_ARMPunisherPanelInit = TriggerCreate("libAMPU_gt_ARMPunisherPanelInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Punisher> Update Punishers Spawn Timers Display
//--------------------------------------------------------------------------------------------------
bool libAMPU_gt_ARMPunisherUpdatePunishersSpawnTimersDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_spawnTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawnTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlSetVisible(libAMPU_gv_aRMPunisherPanel.lv_spawnTimerPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(libAMPU_gv_aRMPunisherPanel.lv_healthPanel, PlayerGroupAll(), false);
    TimerStart(lv_spawnTimer, (TimerGetRemaining(libGame_gv_openTheGatesTimer) + libAMPU_gv_aRMPunisherSpawnAnimationDelay_C), false, c_timeGame);
    DialogControlHookup(libAMPU_gv_aRMPunisherPanel.lv_spawnTimerPanel, c_triggerControlTypeLabel, "TimerLabel");
    while (true) {
        if ((TimerGetRemaining(lv_spawnTimer) <= 0.3)) {
            DialogControlSendAnimationEvent(libAMPU_gv_aRMPunisherPanel.lv_spawnTimerPanel, PlayerGroupAll(), "SlideOut");
            TriggerEnable(TriggerGetCurrent(), true);
            break;
        }
        else {
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(lv_spawnTimer))), PlayerGroupAll());
            Wait(0.25, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMPU_gt_ARMPunisherUpdatePunishersSpawnTimersDisplay_Init () {
    libAMPU_gt_ARMPunisherUpdatePunishersSpawnTimersDisplay = TriggerCreate("libAMPU_gt_ARMPunisherUpdatePunishersSpawnTimersDisplay_Func");
    libGame_gf_GameOpenTimerStarted(libAMPU_gt_ARMPunisherUpdatePunishersSpawnTimersDisplay);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Punisher> Update Punishers Respawn Timers Display
//--------------------------------------------------------------------------------------------------
bool libAMPU_gt_ARMPunisherUpdatePunishersRespawnTimersDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    timer lv_respawnTimer;

    // Automatic Variable Declarations
    unit autoBCDD3B2F_val;

    // Variable Initialization
    lv_respawnTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBCDD3B2F_val = EventUnit();
    if (autoBCDD3B2F_val == libAMPU_gv_aRMPunisherPunishers[1].lv_unit) {
        lv_team = 1;
    }
    else if (autoBCDD3B2F_val == libAMPU_gv_aRMPunisherPunishers[2].lv_unit) {
        lv_team = 2;
    }
    else {
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_AMPU_33F5E7D1"), true);
        return true;
    }
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    DialogControlSendAnimationEvent(libAMPU_gv_aRMPunisherPanel.lv_punisherHealthFrames[lv_team], PlayerGroupAll(), "PunisherDefeated");
    DialogControlSetVisible(libAMPU_gv_aRMPunisherPanel.lv_punisherRespawnTimers[lv_team], PlayerGroupAll(), true);
    DialogControlSetVisible(libAMPU_gv_aRMPunisherPanel.lv_punisherHealthLabels[lv_team], PlayerGroupAll(), false);
    TimerStart(lv_respawnTimer, libAMPU_gv_aRMPunisherRespawnDelay_C, false, c_timeGame);
    while (true) {
        if (((libGame_gv_gameOver == true) || (TimerGetRemaining(lv_respawnTimer) <= 0))) {
            break;
        }
        else {
            libNtve_gf_SetDialogItemText(libAMPU_gv_aRMPunisherPanel.lv_punisherRespawnTimers[lv_team], TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(lv_respawnTimer))), PlayerGroupAll());
            Wait(0.25, c_timeGame);
        }
    }
    DialogControlSetVisible(libAMPU_gv_aRMPunisherPanel.lv_punisherRespawnTimers[lv_team], PlayerGroupAll(), false);
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    DialogControlSendAnimationEvent(libAMPU_gv_aRMPunisherPanel.lv_punisherHealthFrames[lv_team], PlayerGroupAll(), "PunisherRespawned");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMPU_gt_ARMPunisherUpdatePunishersRespawnTimersDisplay_Init () {
    libAMPU_gt_ARMPunisherUpdatePunishersRespawnTimersDisplay = TriggerCreate("libAMPU_gt_ARMPunisherUpdatePunishersRespawnTimersDisplay_Func");
    TriggerAddEventUnitDied(libAMPU_gt_ARMPunisherUpdatePunishersRespawnTimersDisplay, UnitRefFromVariable("libAMPU_gv_aRMPunisherPunishers[1].lv_unit"));
    TriggerAddEventUnitDied(libAMPU_gt_ARMPunisherUpdatePunishersRespawnTimersDisplay, UnitRefFromVariable("libAMPU_gv_aRMPunisherPunishers[2].lv_unit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG ARM<Punisher> Skull Text Tag
//--------------------------------------------------------------------------------------------------
bool libAMPU_gt_DEBUGARMPunisherSkullTextTag_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAMPU_gf_ARMPunisherGainScore(StringToInt(StringWord(EventChatMessage(false), 2)), StringToInt(StringWord(EventChatMessage(false), 3)), UnitGetPosition(libGame_gv_players[1].lv_heroUnit));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMPU_gt_DEBUGARMPunisherSkullTextTag_Init () {
    libAMPU_gt_DEBUGARMPunisherSkullTextTag = TriggerCreate("libAMPU_gt_DEBUGARMPunisherSkullTextTag_Func");
    TriggerAddEventChatMessage(libAMPU_gt_DEBUGARMPunisherSkullTextTag, c_playerAny, "SkullCount", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG ARM<Punisher> Debug Text
//--------------------------------------------------------------------------------------------------
bool libAMPU_gt_DEBUGARMPunisherDebugText_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAMPU_gv_aRMPunisherDebugTextEnabled = !(libAMPU_gv_aRMPunisherDebugTextEnabled);
    if ((libAMPU_gv_aRMPunisherDebugTextEnabled == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_AMPU_2D686CBD"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_AMPU_F0AAE74C"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMPU_gt_DEBUGARMPunisherDebugText_Init () {
    libAMPU_gt_DEBUGARMPunisherDebugText = TriggerCreate("libAMPU_gt_DEBUGARMPunisherDebugText_Func");
    TriggerAddEventChatMessage(libAMPU_gt_DEBUGARMPunisherDebugText, c_playerAny, "-armdebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG ARM<Punisher> Set Skull Count
//--------------------------------------------------------------------------------------------------
bool libAMPU_gt_DEBUGARMPunisherSetSkullCount_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((StringWord(EventChatMessage(false), 2) == "1") || (StringWord(EventChatMessage(false), 2) == "2")))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAMPU_gf_ARMPunisherSetTeamScore(StringToInt(StringWord(EventChatMessage(false), 2)), StringToInt(StringWord(EventChatMessage(false), 3)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMPU_gt_DEBUGARMPunisherSetSkullCount_Init () {
    libAMPU_gt_DEBUGARMPunisherSetSkullCount = TriggerCreate("libAMPU_gt_DEBUGARMPunisherSetSkullCount_Func");
    TriggerAddEventChatMessage(libAMPU_gt_DEBUGARMPunisherSetSkullCount, c_playerAny, "-armdskull", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG ARM<Punisher> Pause Punisher
//--------------------------------------------------------------------------------------------------
bool libAMPU_gt_DEBUGARMPunisherPausePunisher_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PauseUnit(libAMPU_gv_aRMPunisherPunishers[1].lv_unit, true);
    libNtve_gf_PauseUnit(libAMPU_gv_aRMPunisherPunishers[2].lv_unit, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMPU_gt_DEBUGARMPunisherPausePunisher_Init () {
    libAMPU_gt_DEBUGARMPunisherPausePunisher = TriggerCreate("libAMPU_gt_DEBUGARMPunisherPausePunisher_Func");
    TriggerAddEventChatMessage(libAMPU_gt_DEBUGARMPunisherPausePunisher, c_playerAny, "-ppp", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Punisher> DisableEvent
//--------------------------------------------------------------------------------------------------
bool libAMPU_gt_ARMPunisherDisableEvent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libAMPU_gv_aRMPunisherMapEventDisabled = true;
    DialogControlSetVisible(libAMPU_gv_aRMPunisherPanel.lv_gardenOfTerrorPanel2, PlayerGroupAll(), false);
    libNtve_gf_SendActorMessageToUnit(libAMPU_gv_aRMPunisherPunishers[libGame_gv_teamOrderIndex_C].lv_shrine, "SetVisibility");
    libNtve_gf_SendActorMessageToUnit(libAMPU_gv_aRMPunisherPunishers[libGame_gv_teamChaosIndex_C].lv_shrine, "SetVisibility");
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_AMPU_114ACF8D"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMPU_gt_ARMPunisherDisableEvent_Init () {
    libAMPU_gt_ARMPunisherDisableEvent = TriggerCreate("libAMPU_gt_ARMPunisherDisableEvent_Func");
    TriggerAddEventChatMessage(libAMPU_gt_ARMPunisherDisableEvent, c_playerAny, "DisableEvent", false);
}

void libAMPU_InitTriggers () {
    libAMPU_gt_ARMPunisherInitialization_Init();
    libAMPU_gt_ARMPunisherGatesTimerExpires_Init();
    libAMPU_gt_ARMPunisherLevelStart_Init();
    libAMPU_gt_ARMPunisherGatesOpened_Init();
    libAMPU_gt_ARMPunisherHeroDies_Init();
    libAMPU_gt_ARMPunisherPunisherDies_Init();
    libAMPU_gt_ARMPunisherCoreDiesDebug_Init();
    libAMPU_gt_ARMPunisherPunisherVisionFollower_Init();
    libAMPU_gt_ARMPunisherPunisherEnterDuelMode_Init();
    libAMPU_gt_ARMPunisherPunisherEnterPunishMode_Init();
    libAMPU_gt_ARMPunisherPunisherLogic_Init();
    libAMPU_gt_ARMPunisherBossAINotUsed_Init();
    libAMPU_gt_ARMPunisherPanelInit_Init();
    libAMPU_gt_ARMPunisherUpdatePunishersSpawnTimersDisplay_Init();
    libAMPU_gt_ARMPunisherUpdatePunishersRespawnTimersDisplay_Init();
    libAMPU_gt_DEBUGARMPunisherSkullTextTag_Init();
    libAMPU_gt_DEBUGARMPunisherDebugText_Init();
    libAMPU_gt_DEBUGARMPunisherSetSkullCount_Init();
    libAMPU_gt_DEBUGARMPunisherPausePunisher_Init();
    libAMPU_gt_ARMPunisherDisableEvent_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libAMPU_InitLib_completed = false;

void libAMPU_InitLib () {
    if (libAMPU_InitLib_completed) {
        return;
    }

    libAMPU_InitLib_completed = true;

    libAMPU_InitLibraries();
    libAMPU_InitVariables();
    libAMPU_InitTriggers();
}

