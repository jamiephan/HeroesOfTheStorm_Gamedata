include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/MapMechanicsLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"
include "TriggerLibs/SoundLib"
include "LibIGHS"
include "LibAREN"
include "LibVolV"
include "LibVLSK"
include "LibVLSS"

include "LibAMVS_h"

//--------------------------------------------------------------------------------------------------
// Library: ARM_Volskaya
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libAMVS_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libMapM_InitVariables();
    libAIAI_InitVariables();
    libUIUI_InitVariables();
    libSond_InitVariables();
    libIGHS_InitVariables();
    libAREN_InitVariables();
    libVolV_InitVariables();
    libVLSK_InitVariables();
    libVLSS_InitVariables();
}

// Variable Initialization
bool libAMVS_InitVariables_completed = false;

void libAMVS_InitVariables () {
    int init_i;
    int init_i1;
    int init_j1;

    if (libAMVS_InitVariables_completed) {
        return;
    }

    libAMVS_InitVariables_completed = true;

    libAMVS_gv_aRM_TrialGrounds.lv_elevatorTimer = TimerCreate();
    for (init_i = 0; init_i <= libAREN_gv_aRM_MechanicsCountToPick_C; init_i += 1) {
        libAMVS_gv_levels[init_i] = libAMVS_ge_Level_None;
    }
    libAMVS_gv_trGr_UI.lv_mainPanel = c_invalidDialogControlId;
    libAMVS_gv_trGr_UI.lv_notificationFrame = c_invalidDialogControlId;
    libAMVS_gv_trGr_UI.lv_notificationImage = c_invalidDialogControlId;
    libAMVS_gv_trGr_UI.lv_notificationForeground = c_invalidDialogControlId;
    libAMVS_gv_trGr_UI.lv_notificationLabel = c_invalidDialogControlId;
    libAMVS_gv_trGr_UI.lv_notificationTimerLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libAMVS_gv_trGr_UI.lv_teamScore[init_i1] = c_invalidDialogControlId;
    }
    libAMVS_gv_trGr_UI.lv_topBarContainer = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libAMVS_gv_trGr_UI.lv_teamScoreLabel[init_i1] = c_invalidDialogControlId;
    }
    libAMVS_gv_trGr_UI.lv_helpTextLabel = c_invalidDialogControlId;
    libAMVS_gv_trGr_UI.lv_timerContainer = c_invalidDialogControlId;
    libAMVS_gv_trGr_UI.lv_stopwatchImage = c_invalidDialogControlId;
    libAMVS_gv_trGr_UI.lv_timerLabel = c_invalidDialogControlId;
    libAMVS_gv_trGr_UI.lv_timerProgressBar = c_invalidDialogControlId;
    libAMVS_gv_trGr_UI.lv_helpTextContainer = c_invalidDialogControlId;
    libAMVS_gv_trGr_UI.lv_safeZoneContainerFrame = c_invalidDialogControlId;
    libAMVS_gv_mMBOEPanel.lv_mainPanel = c_invalidDialogControlId;
    libAMVS_gv_mMBOEPanel.lv_bossSpawnFrame = c_invalidDialogControlId;
    libAMVS_gv_mMBOEPanel.lv_bossSpawnInfoLabel = c_invalidDialogControlId;
    libAMVS_gv_mMBOEPanel.lv_bossSpawnTimerLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libAMVS_gv_mMBOEPanel.lv_bossDuelFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 2; init_j1 += 1) {
            libAMVS_gv_mMBOEPanel.lv_bossDuelHud[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 2; init_j1 += 1) {
            libAMVS_gv_mMBOEPanel.lv_bossDuelHPBar[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 2; init_j1 += 1) {
            libAMVS_gv_mMBOEPanel.lv_bossDuelHPBarLabel_AfterDeath[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libAMVS_gv_mMBOEPanel.lv_bossLaningFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 2; init_j1 += 1) {
            libAMVS_gv_mMBOEPanel.lv_bossLaningPortraitHud[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libAMVS_gv_mMBOEPanel.lv_bossLaningShieldBar = c_invalidDialogControlId;
    libAMVS_gv_mMBOEPanel.lv_bossLaningHPBar = c_invalidDialogControlId;
    libAMVS_gv_mMBOEPanel.lv_bossLaningInfoLabel = c_invalidDialogControlId;
    libAMVS_gv_mMBOEPanel.lv_bossLaningTimerLabel = c_invalidDialogControlId;
    libAMVS_gv_eventStartTimer = TimerCreate();
    libAMVS_gv_eventShufflerPG = PlayerGroupEmpty();
    libAMVS_gv_eventSpawnTimer = TimerCreate();
    libAMVS_gv_eventUnitGroup = UnitGroupEmpty();
    libAMVS_gv_revealTimer = TimerCreate();
    libAMVS_gv_revealWarningTimer = TimerCreate();
    libAMVS_gv_duIm.lv_spawnTimer = TimerCreate();
    libAMVS_gv_duIm.lv_cooldownTimer = TimerCreate();
    libAMVS_gv_duIm.lv_spawnTimerDuration = 10.0;
    libAMVS_gv_duIm.lv_cooldownTimerDuration = 30.0;
    libAMVS_gv_duIm.lv_damageToReach = 7500.0;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libAMVS_gv_duIm.lv_ping[init_i1] = c_invalidPingId;
    }
    libAMVS_gv_saZo.lv_shockTimer = TimerCreate();
    libAMVS_gv_saZo.lv_currentDamage = libAMVS_gv_saZoStartingDamage_C;
    libAMVS_gv_saZo.lv_safePlayerGroup = PlayerGroupEmpty();
    libAMVS_gv_saZo.lv_unsafePlayerGroup = PlayerGroupEmpty();
}

// Presets
// Functions
int libAMVS_gf_CurrentLevel () {
    // Automatic Variable Declarations
    // Implementation
    return libAMVS_gv_levels[libAREN_gf_ArenaCurrentLevelIndex()];
}

bool libAMVS_gf_UnitIsValidHero (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitFilterMatch(lp_unit, UnitGetOwner(lp_unit), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)))) == true) && (UnitIsValid(lp_unit) == true) && (UnitGetType(lp_unit) != "HeroLostVikingsController") && (UnitHasBehavior2(lp_unit, "LeoricUndying") == false)) {
        return true;
    }
    else {
        return false;
    }
}

int libAMVS_gf_HeroesAliveOnTeam (int lp_team) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    playergroup auto44A125E6_g;
    int auto44A125E6_var;
    unitgroup auto375927FF_g;
    int auto375927FF_u;
    unit auto375927FF_var;

    // Variable Initialization

    // Implementation
    auto44A125E6_g = libGame_gf_PlayersOnTeamHeroes(lp_team, false);
    auto44A125E6_var = -1;
    while (true) {
        	auto44A125E6_var = PlayerGroupNextPlayer(auto44A125E6_g, auto44A125E6_var);
        	if (auto44A125E6_var<0) { break; }
        	auto375927FF_g = libGame_gv_players[auto44A125E6_var].lv_heroUnitGroup;
        auto375927FF_u = UnitGroupCount(auto375927FF_g, c_unitCountAll);
        for (;; auto375927FF_u -= 1) {
            auto375927FF_var = UnitGroupUnitFromEnd(auto375927FF_g, auto375927FF_u);
            if (auto375927FF_var == null) { break; }
            if ((libAMVS_gf_UnitIsValidHero(auto375927FF_var) == true)) {
                lv_count += 1;
            }

        }
    }
    return lv_count;
}

void libAMVS_gf_AddLevel (int lp_level, region lp_levelRegion, trigger lp_levelStartCallback, region lp_cameraBoundsRegion) {
    // Automatic Variable Declarations
    // Implementation
    libAREN_gf_ArenaRegisterMechanic(null, null, null, null, libAMVS_gt_LevelStart, lp_levelRegion, lp_cameraBoundsRegion);
}

void libAMVS_gf_InitializeEventShuffler () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoD3D5CAF9_ae;
    const int autoD3D5CAF9_ai = 1;
    const int auto59BEC351_ae = libAMVS_gv_maximumEvents_C;
    const int auto59BEC351_ai = 1;

    // Variable Initialization

    // Implementation
    autoD3D5CAF9_ae = PlayerGroupCount(libAMVS_gv_eventShufflerPG);
    lv_i = 1;
    for ( ; ( (autoD3D5CAF9_ai >= 0 && lv_i <= autoD3D5CAF9_ae) || (autoD3D5CAF9_ai < 0 && lv_i >= autoD3D5CAF9_ae) ) ; lv_i += autoD3D5CAF9_ai ) {
        PlayerGroupRemove(libAMVS_gv_eventShufflerPG, lv_i);
    }
    lv_i = 1;
    for ( ; ( (auto59BEC351_ai >= 0 && lv_i <= auto59BEC351_ae) || (auto59BEC351_ai < 0 && lv_i >= auto59BEC351_ae) ) ; lv_i += auto59BEC351_ai ) {
        PlayerGroupAdd(libAMVS_gv_eventShufflerPG, lv_i);
    }
    libUIUI_gf_PingCreateNewPingTarget("Artifact", false, StringExternal("Param/Value/lib_AMVS_C90672C3"), StringExternal("Param/Value/lib_AMVS_E22B2182"), StringExternal("Param/Value/lib_AMVS_19156BA8"), SoundLink("UI_Game_Ping_Help", -1), SoundLink("UI_Game_Ping_Help", -1));
    libUIUI_gf_PingCreateNewPingTarget("TrGrRavenLordTribute", false, StringExternal("Param/Value/lib_AMVS_7B3E8B14"), StringExternal("Param/Value/lib_AMVS_875BFC43"), StringExternal("Param/Value/lib_AMVS_16633A5F"), SoundLink("UI_Game_Ping_Help", -1), SoundLink("UI_Game_Ping_Help", -1));
    libUIUI_gf_PingCreateNewPingTarget("HeavenImmortal", false, StringExternal("Param/Value/lib_AMVS_0D4D3F50"), StringExternal("Param/Value/lib_AMVS_734D1B3D"), StringExternal("Param/Value/lib_AMVS_A1AE83F3"), SoundLink("UI_Game_Ping_Help", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingCreateNewPingTarget("HellImmortal", false, StringExternal("Param/Value/lib_AMVS_0F5B8496"), StringExternal("Param/Value/lib_AMVS_B501498D"), StringExternal("Param/Value/lib_AMVS_4BB788B0"), SoundLink("UI_Game_Ping_Help", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingCreateNewPingTarget("SafeZoneMapUnit", false, StringExternal("Param/Value/lib_AMVS_CE78FC67"), StringExternal("Param/Value/lib_AMVS_F2DFE1ED"), StringExternal("Param/Value/lib_AMVS_5B44CE3D"), SoundLink("UI_Game_Ping_Help", -1), SoundLink("UI_Game_Ping_Help", -1));
}

int libAMVS_gf_GetNewEvent () {
    // Variable Declarations
    int lv_returnInt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_returnInt = PlayerGroupPlayer(libAMVS_gv_eventShufflerPG, RandomInt(1, PlayerGroupCount(libAMVS_gv_eventShufflerPG)));

    // Implementation
    while ((libAREN_gf_ArenaCurrentRoundIndex() < 2) && (lv_returnInt == libAMVS_ge_TrialGroundsEventConstants_Volskaya_NoEvent)) {
        lv_returnInt = PlayerGroupPlayer(libAMVS_gv_eventShufflerPG, RandomInt(1, PlayerGroupCount(libAMVS_gv_eventShufflerPG)));
    }
    PlayerGroupRemove(libAMVS_gv_eventShufflerPG, lv_returnInt);
    return lv_returnInt;
}

trigger auto_libAMVS_gf_IncrementArmorDebuff_Trigger = null;

void libAMVS_gf_IncrementArmorDebuff () {
    if (auto_libAMVS_gf_IncrementArmorDebuff_Trigger == null) {
        auto_libAMVS_gf_IncrementArmorDebuff_Trigger = TriggerCreate("auto_libAMVS_gf_IncrementArmorDebuff_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_IncrementArmorDebuff_Trigger, false, false);
}

bool auto_libAMVS_gf_IncrementArmorDebuff_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_count;
    fixed lv_wait;

    // Automatic Variable Declarations
    playergroup auto509CD784_g;
    int auto509CD784_var;
    unitgroup autoCB82A32E_g;
    int autoCB82A32E_u;
    unit autoCB82A32E_var;
    const int auto7B5F68DD_ae = libCore_gv_cOMPUTER_TeamChaos;
    const int auto7B5F68DD_ai = 1;
    playergroup autoAD478347_g;
    int autoAD478347_var;
    unitgroup auto5812ECF4_g;
    int auto5812ECF4_u;
    unit auto5812ECF4_var;

    // Variable Initialization
    lv_wait = 10.0;

    // Implementation
    while ((libGame_gv_gameOver == false) && (lv_count < 18)) {
        auto509CD784_g = PlayerGroupAll();
        auto509CD784_var = -1;
        while (true) {
            	auto509CD784_var = PlayerGroupNextPlayer(auto509CD784_g, auto509CD784_var);
            	if (auto509CD784_var<0) { break; }
            	autoCB82A32E_g = libGame_gv_players[auto509CD784_var].lv_heroUnitGroup;
            autoCB82A32E_u = UnitGroupCount(autoCB82A32E_g, c_unitCountAll);
            for (;; autoCB82A32E_u -= 1) {
                autoCB82A32E_var = UnitGroupUnitFromEnd(autoCB82A32E_g, autoCB82A32E_u);
                if (autoCB82A32E_var == null) { break; }
                UnitBehaviorAdd(autoCB82A32E_var, "TrGrAmorDebuff", libAMVS_gv_aRM_TrialGrounds.lv_dummyUnitToRunDamageInstancesFrom[libGame_gf_EnemyTeamNumberOfPlayer(auto509CD784_var)], 1);
            }
        }
        lv_count += 1;
        lv_i = libCore_gv_cOMPUTER_TeamOrder;
        for ( ; ( (auto7B5F68DD_ai >= 0 && lv_i <= auto7B5F68DD_ae) || (auto7B5F68DD_ai < 0 && lv_i >= auto7B5F68DD_ae) ) ; lv_i += auto7B5F68DD_ai ) {
            CatalogFieldValueModifyFixed(c_gameCatalogBehavior, "TrGrAmorDebuff", "ArmorModification.ArmorSet[" + IntToString(0) + "].ArmorMitigationTable[" + IntToString(0) + "]", lv_i, 25.0, c_upgradeOperationSubtract);
            CatalogFieldValueModifyFixed(c_gameCatalogBehavior, "TrGrAmorDebuff", "ArmorModification.ArmorSet[" + IntToString(0) + "].ArmorMitigationTable[" + IntToString(1) + "]", lv_i, 25.0, c_upgradeOperationSubtract);
            CatalogFieldValueModifyFixed(c_gameCatalogBehavior, "TrGrAmorDebuff", "ArmorModification.ArmorSet[" + IntToString(0) + "].ArmorMitigationTable[" + IntToString(2) + "]", lv_i, 25.0, c_upgradeOperationSubtract);
        }
        Wait(lv_wait, c_timeGame);
        lv_wait -= 0.5;
    }
    if ((libGame_gv_gameOver == false)) {
        autoAD478347_g = PlayerGroupAll();
        autoAD478347_var = -1;
        while (true) {
            	autoAD478347_var = PlayerGroupNextPlayer(autoAD478347_g, autoAD478347_var);
            	if (autoAD478347_var<0) { break; }
            	auto5812ECF4_g = libGame_gv_players[autoAD478347_var].lv_heroUnitGroup;
            auto5812ECF4_u = UnitGroupCount(auto5812ECF4_g, c_unitCountAll);
            for (;; auto5812ECF4_u -= 1) {
                auto5812ECF4_var = UnitGroupUnitFromEnd(auto5812ECF4_g, auto5812ECF4_u);
                if (auto5812ECF4_var == null) { break; }
                UnitBehaviorAdd(auto5812ECF4_var, "TrGrPoison", libAMVS_gv_aRM_TrialGrounds.lv_dummyUnitToRunDamageInstancesFrom[libGame_gf_EnemyTeamNumberOfPlayer(autoAD478347_var)], 1);
            }
        }
    }

    return true;
}

trigger auto_libAMVS_gf_RoundWinningKillCameraPan_Trigger = null;
unit auto_libAMVS_gf_RoundWinningKillCameraPan_lp_killingUnit;
point auto_libAMVS_gf_RoundWinningKillCameraPan_lp_deadUnit;

void libAMVS_gf_RoundWinningKillCameraPan (unit lp_killingUnit, point lp_deadUnit) {
    auto_libAMVS_gf_RoundWinningKillCameraPan_lp_killingUnit = lp_killingUnit;
    auto_libAMVS_gf_RoundWinningKillCameraPan_lp_deadUnit = lp_deadUnit;

    if (auto_libAMVS_gf_RoundWinningKillCameraPan_Trigger == null) {
        auto_libAMVS_gf_RoundWinningKillCameraPan_Trigger = TriggerCreate("auto_libAMVS_gf_RoundWinningKillCameraPan_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_RoundWinningKillCameraPan_Trigger, false, false);
}

bool auto_libAMVS_gf_RoundWinningKillCameraPan_TriggerFunc (bool testConds, bool runActions) {
    unit lp_killingUnit = auto_libAMVS_gf_RoundWinningKillCameraPan_lp_killingUnit;
    point lp_deadUnit = auto_libAMVS_gf_RoundWinningKillCameraPan_lp_deadUnit;

    // Automatic Variable Declarations
    playergroup autoC3DC2A01_g;
    int autoC3DC2A01_var;
    playergroup auto6A7946D4_g;
    int auto6A7946D4_var;
    playergroup auto218DEA82_g;
    int auto218DEA82_var;

    // Implementation
    autoC3DC2A01_g = libCore_gv_activeHumanPlayers;
    autoC3DC2A01_var = -1;
    while (true) {
        	autoC3DC2A01_var = PlayerGroupNextPlayer(autoC3DC2A01_g, autoC3DC2A01_var);
        	if (autoC3DC2A01_var<0) { break; }
        	CameraLockInput(autoC3DC2A01_var, true);
        PlayerOptionOverride(autoC3DC2A01_var, "camerafollow", "0");
        libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(false, autoC3DC2A01_var);
    }
    Wait(0.0625, c_timeGame);
    auto6A7946D4_g = libCore_gv_activeHumanPlayers;
    auto6A7946D4_var = -1;
    while (true) {
        	auto6A7946D4_var = PlayerGroupNextPlayer(auto6A7946D4_g, auto6A7946D4_var);
        	if (auto6A7946D4_var<0) { break; }
        	CameraFollowUnitGroup(auto6A7946D4_var, CameraFollowUnitGroupGet(auto6A7946D4_var), false, false);
        libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(auto6A7946D4_var, lp_deadUnit, libGame_gv_gameOver_CameraPanTime_C, -1, 10, false);
    }
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(libCore_gv_oBSERVER_ObserverUIPlayer, lp_deadUnit, libGame_gv_gameOver_CameraPanTime_C, -1, 10, false);
    Wait(1.9375, c_timeGame);
    auto218DEA82_g = libCore_gv_activeHumanPlayers;
    auto218DEA82_var = -1;
    while (true) {
        	auto218DEA82_var = PlayerGroupNextPlayer(auto218DEA82_g, auto218DEA82_var);
        	if (auto218DEA82_var<0) { break; }
        	CameraFollowUnitGroup(auto218DEA82_var, CameraFollowUnitGroupGet(auto218DEA82_var), false, false);
        libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(auto218DEA82_var, UnitGetPosition(lp_killingUnit), 30.0, -1, 10, false);
    }
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(libCore_gv_oBSERVER_ObserverUIPlayer, UnitGetPosition(lp_killingUnit), 10.0, -1, 10, false);
    return true;
}

trigger auto_libAMVS_gf_EventSoundController_Trigger = null;

void libAMVS_gf_EventSoundController () {
    if (auto_libAMVS_gf_EventSoundController_Trigger == null) {
        auto_libAMVS_gf_EventSoundController_Trigger = TriggerCreate("auto_libAMVS_gf_EventSoundController_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_EventSoundController_Trigger, false, false);
}

bool auto_libAMVS_gf_EventSoundController_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto3E4B6855_n = 3;
    int auto3E4B6855_i;

    // Implementation
    while ((TimerGetRemaining(libAMVS_gv_eventSpawnTimer) > 10.0)) {
        Wait(0.0625, c_timeGame);
    }
    SoundPlayForPlayer(SoundLink("UI_Game_Ping_Volskaya_Event_Start_BeepPT3212", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("ElevatorWarning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    while ((TimerGetRemaining(libAMVS_gv_eventSpawnTimer) > 3.0)) {
        Wait(0.0625, c_timeGame);
    }
    for (auto3E4B6855_i = 1; auto3E4B6855_i <= auto3E4B6855_n; auto3E4B6855_i += 1) {
        if ((libGame_gv_gameOver == false)) {
            SoundPlayForPlayer(SoundLink("UI_Game_Ping_Volskaya_Event_Start_BeepPT321", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            Wait(1.0, c_timeGame);
        }
        else {
            return true;
        }
    }
    SoundPlayForPlayer(SoundLink("UI_Game_Ping_Volskaya_Event_Start_BeepPT0", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    if ((libAMVS_gv_currentEvent != libAMVS_ge_TrialGroundsEventConstants_Volskaya_NoEvent)) {
        SoundPlayForPlayer(SoundLink("UI_Game_Ping_Volskaya_Event_Start", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        SoundPlayForPlayer(SoundLink("Event_NoEvent", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    return true;
}

void libAMVS_gf_HookupUI () {
    // Variable Declarations
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MutatorPanel");
    libAMVS_gv_trGr_UI.lv_topBarContainer = DialogControlLastCreated();
    DialogControlHookup(libAMVS_gv_trGr_UI.lv_topBarContainer, c_triggerControlTypeLabel, "Team1PlayersLeftLabel");
    libAMVS_gv_trGr_UI.lv_teamScoreLabel[libGame_gv_teamOrderIndex_C] = DialogControlLastCreated();
    DialogControlHookup(libAMVS_gv_trGr_UI.lv_topBarContainer, c_triggerControlTypeLabel, "Team2PlayersLeftLabel");
    libAMVS_gv_trGr_UI.lv_teamScoreLabel[libGame_gv_teamChaosIndex_C] = DialogControlLastCreated();
    DialogControlHookup(libAMVS_gv_trGr_UI.lv_topBarContainer, c_triggerControlTypeLabel, "HelpTextLabel");
    libAMVS_gv_trGr_UI.lv_helpTextLabel = DialogControlLastCreated();
    DialogControlHookup(libAMVS_gv_trGr_UI.lv_topBarContainer, c_triggerControlTypePanel, "SafeZoneContainer");
    libAMVS_gv_trGr_UI.lv_safeZoneContainerFrame = DialogControlLastCreated();
    DialogControlHookup(libAMVS_gv_trGr_UI.lv_topBarContainer, c_triggerControlTypePanel, "TimerContainer");
    libAMVS_gv_trGr_UI.lv_timerContainer = DialogControlLastCreated();
    DialogControlHookup(libAMVS_gv_trGr_UI.lv_timerContainer, c_triggerControlTypeLabel, "TimerLabel");
    libAMVS_gv_trGr_UI.lv_timerLabel = DialogControlLastCreated();
    DialogControlHookup(libAMVS_gv_trGr_UI.lv_timerContainer, c_triggerControlTypeProgressBar, "TimerRing");
    libAMVS_gv_trGr_UI.lv_timerProgressBar = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(libUIUI_gv_mapMechanicsPanel.lv_mainPanel, c_triggerControlTypePanel, "VolskayaArena/VolskayaPanel");
    libAMVS_gv_trGr_UI.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(libAMVS_gv_trGr_UI.lv_mainPanel, c_triggerControlTypePanel, "NotificationFrame");
    libAMVS_gv_trGr_UI.lv_notificationFrame = DialogControlLastCreated();
    DialogControlHookup(libAMVS_gv_trGr_UI.lv_notificationFrame, c_triggerControlTypeImage, "NotificationIcon");
    libAMVS_gv_trGr_UI.lv_notificationImage = DialogControlLastCreated();
    DialogControlHookup(libAMVS_gv_trGr_UI.lv_notificationFrame, c_triggerControlTypeImage, "NotificationIconForeGround");
    libAMVS_gv_trGr_UI.lv_notificationForeground = DialogControlLastCreated();
    DialogControlHookup(libAMVS_gv_trGr_UI.lv_notificationFrame, c_triggerControlTypeLabel, "NotificationLabel");
    libAMVS_gv_trGr_UI.lv_notificationLabel = DialogControlLastCreated();
    DialogControlHookup(libAMVS_gv_trGr_UI.lv_notificationFrame, c_triggerControlTypeLabel, "NotificationTimerLabel");
    libAMVS_gv_trGr_UI.lv_notificationTimerLabel = DialogControlLastCreated();
    libAMVS_gv_trGr_UI.lv_notificationIconImage[libAMVS_ge_TrialGroundsEventConstants_Volskaya_Tribute] = "Assets\\Textures\\storm_ui_hud_trial_grounds_tribute.dds";
    libAMVS_gv_trGr_UI.lv_notificationIconImage[libAMVS_ge_TrialGroundsEventConstants_Volskaya_SafeZone] = "Assets\\Textures\\storm_ui_hud_trial_grounds_safe_zone.dds";
    libAMVS_gv_trGr_UI.lv_notificationIconImage[libAMVS_ge_TrialGroundsEventConstants_Volskaya_NoEvent] = "Assets\\Textures\\storm_ui_hud_trial_grounds_no_event.dds";
    libAMVS_gv_trGr_UI.lv_notificationIconImage[libAMVS_ge_TrialGroundsEventConstants_Volskaya_DuelingImmortals] = "Assets\\Textures\\storm_ui_hud_trial_grounds_immortal_spawn.dds";
    libAMVS_gv_trGr_UI.lv_notificationIconImage[libAMVS_ge_TrialGroundsEventConstants_Volskaya_CapturePoint] = "Assets\\Textures\\storm_ui_hud_volskaya_control_frame_a.dds";
    libAMVS_gv_trGr_UI.lv_notificationIconImage[libAMVS_ge_TrialGroundsEventConstants_Volskaya_Artifact] = "Assets\\Textures\\storm_ui_hud_trial_grounds_artifact.dds";
    libAMVS_gv_trGr_UI.lv_notificationText[libAMVS_ge_TrialGroundsEventConstants_Volskaya_Tribute] = StringExternal("Param/Value/lib_AMVS_EDB64E09");
    libAMVS_gv_trGr_UI.lv_notificationText[libAMVS_ge_TrialGroundsEventConstants_Volskaya_SafeZone] = StringExternal("Param/Value/lib_AMVS_FEA65120");
    libAMVS_gv_trGr_UI.lv_notificationText[libAMVS_ge_TrialGroundsEventConstants_Volskaya_NoEvent] = StringExternal("Param/Value/lib_AMVS_8167DF2B");
    libAMVS_gv_trGr_UI.lv_notificationText[libAMVS_ge_TrialGroundsEventConstants_Volskaya_DuelingImmortals] = StringExternal("Param/Value/lib_AMVS_DF5F5D64");
    libAMVS_gv_trGr_UI.lv_notificationText[libAMVS_ge_TrialGroundsEventConstants_Volskaya_CapturePoint] = StringExternal("Param/Value/lib_AMVS_EC7E7EF3");
    libAMVS_gv_trGr_UI.lv_notificationText[libAMVS_ge_TrialGroundsEventConstants_Volskaya_Artifact] = StringExternal("Param/Value/lib_AMVS_2C3E26A3");
}

trigger auto_libAMVS_gf_TemporarilyShowDialogItem_Trigger = null;
int auto_libAMVS_gf_TemporarilyShowDialogItem_lp_dialogItem;
fixed auto_libAMVS_gf_TemporarilyShowDialogItem_lp_duration;

void libAMVS_gf_TemporarilyShowDialogItem (int lp_dialogItem, fixed lp_duration) {
    auto_libAMVS_gf_TemporarilyShowDialogItem_lp_dialogItem = lp_dialogItem;
    auto_libAMVS_gf_TemporarilyShowDialogItem_lp_duration = lp_duration;

    if (auto_libAMVS_gf_TemporarilyShowDialogItem_Trigger == null) {
        auto_libAMVS_gf_TemporarilyShowDialogItem_Trigger = TriggerCreate("auto_libAMVS_gf_TemporarilyShowDialogItem_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_TemporarilyShowDialogItem_Trigger, false, false);
}

bool auto_libAMVS_gf_TemporarilyShowDialogItem_TriggerFunc (bool testConds, bool runActions) {
    int lp_dialogItem = auto_libAMVS_gf_TemporarilyShowDialogItem_lp_dialogItem;
    fixed lp_duration = auto_libAMVS_gf_TemporarilyShowDialogItem_lp_duration;

    // Automatic Variable Declarations
    // Implementation
    DialogControlSendAnimationEvent(lp_dialogItem, PlayerGroupAll(), "Show");
    Wait(lp_duration, c_timeGame);
    DialogControlSendAnimationEvent(lp_dialogItem, PlayerGroupAll(), "Hide");
    return true;
}

trigger auto_libAMVS_gf_ElevatorSlideout_Trigger = null;

void libAMVS_gf_ElevatorSlideout () {
    if (auto_libAMVS_gf_ElevatorSlideout_Trigger == null) {
        auto_libAMVS_gf_ElevatorSlideout_Trigger = TriggerCreate("auto_libAMVS_gf_ElevatorSlideout_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_ElevatorSlideout_Trigger, false, false);
}

bool auto_libAMVS_gf_ElevatorSlideout_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_notificationLabel, StringExternal("Param/Value/lib_AMVS_F6713166"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libAMVS_gv_trGr_UI.lv_notificationImage, "Assets\\Textures\\storm_ui_hud_trial_grounds_event_starting.dds", PlayerGroupAll());
    DialogControlSendAnimationEvent(libAMVS_gv_trGr_UI.lv_notificationFrame, PlayerGroupAll(), "Show");
    libAMVS_gf_ElevatorNotificationUpdateTimerLabel(libAMVS_gv_aRM_TrialGrounds.lv_elevatorTimer);
    Wait(7.0, c_timeGame);
    if ((libGame_gv_gameOver == false)) {
        DialogControlSendAnimationEvent(libAMVS_gv_trGr_UI.lv_notificationFrame, PlayerGroupAll(), "Transition");
        libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_notificationLabel, libAMVS_gv_trGr_UI.lv_notificationText[libAMVS_gv_currentEvent], PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libAMVS_gv_trGr_UI.lv_notificationForeground, libAMVS_gv_trGr_UI.lv_notificationIconImage[libAMVS_gv_currentEvent], PlayerGroupAll());
        Wait(0.5, c_timeGame);
        libNtve_gf_SetDialogItemImage(libAMVS_gv_trGr_UI.lv_notificationImage, libAMVS_gv_trGr_UI.lv_notificationIconImage[libAMVS_gv_currentEvent], PlayerGroupAll());
        Wait(5.0, c_timeGame);
    }

    DialogControlSendAnimationEvent(libAMVS_gv_trGr_UI.lv_notificationFrame, PlayerGroupAll(), "Hide");
    return true;
}

trigger auto_libAMVS_gf_RevealSlideout_Trigger = null;

void libAMVS_gf_RevealSlideout () {
    if (auto_libAMVS_gf_RevealSlideout_Trigger == null) {
        auto_libAMVS_gf_RevealSlideout_Trigger = TriggerCreate("auto_libAMVS_gf_RevealSlideout_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_RevealSlideout_Trigger, false, false);
}

bool auto_libAMVS_gf_RevealSlideout_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sound;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_notificationLabel, StringExternal("Param/Value/lib_AMVS_238CFA89"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libAMVS_gv_trGr_UI.lv_notificationImage, "Assets\\Textures\\storm_ui_hud_trial_grounds_vision.dds", PlayerGroupAll());
    DialogControlSendAnimationEvent(libAMVS_gv_trGr_UI.lv_notificationFrame, PlayerGroupAll(), "Show");
    SoundPlayForPlayer(SoundLink("Event_Reveal_Warning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libAMVS_gf_ElevatorNotificationUpdateTimerLabel(libAMVS_gv_revealTimer);
    Wait(10.0, c_timeGame);
    if ((libGame_gv_gameOver == false)) {
        SoundPlayForPlayer(SoundLink("Event_Revealed", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        DialogControlSendAnimationEvent(libAMVS_gv_trGr_UI.lv_notificationFrame, PlayerGroupAll(), "Transition");
        libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_notificationLabel, StringExternal("Param/Value/lib_AMVS_CD48D01C"), PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libAMVS_gv_trGr_UI.lv_notificationForeground, "Assets\\Textures\\storm_ui_hud_trial_grounds_vision.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libAMVS_gv_trGr_UI.lv_notificationImage, "Assets\\Textures\\storm_ui_hud_trial_grounds_vision.dds", PlayerGroupAll());
        Wait(5.0, c_timeGame);
    }

    DialogControlSendAnimationEvent(libAMVS_gv_trGr_UI.lv_notificationFrame, PlayerGroupAll(), "Hide");
    return true;
}

trigger auto_libAMVS_gf_ElevatorNotificationUpdateTimerLabel_Trigger = null;
timer auto_libAMVS_gf_ElevatorNotificationUpdateTimerLabel_lp_timer;

void libAMVS_gf_ElevatorNotificationUpdateTimerLabel (timer lp_timer) {
    auto_libAMVS_gf_ElevatorNotificationUpdateTimerLabel_lp_timer = lp_timer;

    if (auto_libAMVS_gf_ElevatorNotificationUpdateTimerLabel_Trigger == null) {
        auto_libAMVS_gf_ElevatorNotificationUpdateTimerLabel_Trigger = TriggerCreate("auto_libAMVS_gf_ElevatorNotificationUpdateTimerLabel_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_ElevatorNotificationUpdateTimerLabel_Trigger, false, false);
}

bool auto_libAMVS_gf_ElevatorNotificationUpdateTimerLabel_TriggerFunc (bool testConds, bool runActions) {
    timer lp_timer = auto_libAMVS_gf_ElevatorNotificationUpdateTimerLabel_lp_timer;

    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libAMVS_gv_trGr_UI.lv_notificationTimerLabel, PlayerGroupAll(), true);
    while ((TimerGetRemaining(lp_timer) > 0.0)) {
        libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_notificationTimerLabel, FixedToText(TimerGetRemaining(lp_timer), 1), PlayerGroupAll());
        Wait(0.0625, c_timeGame);
    }
    DialogControlSetVisible(libAMVS_gv_trGr_UI.lv_notificationTimerLabel, PlayerGroupAll(), false);
    return true;
}

trigger auto_libAMVS_gf_UITimerUpdate_Trigger = null;
timer auto_libAMVS_gf_UITimerUpdate_lp_timer;

void libAMVS_gf_UITimerUpdate (timer lp_timer) {
    auto_libAMVS_gf_UITimerUpdate_lp_timer = lp_timer;

    if (auto_libAMVS_gf_UITimerUpdate_Trigger == null) {
        auto_libAMVS_gf_UITimerUpdate_Trigger = TriggerCreate("auto_libAMVS_gf_UITimerUpdate_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_UITimerUpdate_Trigger, false, false);
}

bool auto_libAMVS_gf_UITimerUpdate_TriggerFunc (bool testConds, bool runActions) {
    timer lp_timer = auto_libAMVS_gf_UITimerUpdate_lp_timer;

    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libAMVS_gv_trGr_UI.lv_timerLabel, PlayerGroupAll(), true);
    while ((TimerGetRemaining(lp_timer) > 0.0)) {
        if ((TimerGetRemaining(lp_timer) > 5.0)) {
            libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_timerLabel, TextTimeFormat(StringToText("<sectotal/>"), FixedToInt(TimerGetRemaining(lp_timer))), PlayerGroupAll());
        }
        else if ((TimerGetRemaining(lp_timer) < 5.0)) {
            libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_timerLabel, FixedToText(TimerGetRemaining(lp_timer), 1), PlayerGroupAll());
        }
        else if ((TimerGetRemaining(lp_timer) < 1.0)) {
            libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_timerLabel, FixedToText(TimerGetRemaining(lp_timer), 2), PlayerGroupAll());
        }
        Wait(0.0625, c_timeGame);
    }
    DialogControlSetVisible(libAMVS_gv_trGr_UI.lv_timerLabel, PlayerGroupAll(), false);
    return true;
}

void libAMVS_gf_MMBOEUIInit (int lp_parentPanel) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_itTeam;
    int lv_enemyTeam;
    int lv_itIndex;

    // Automatic Variable Declarations
    const int auto4BC845C1_ae = 2;
    const int auto4BC845C1_ai = 1;
    int auto5A88BDE9_val;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    DialogControlCreateInPanelFromTemplate(lp_parentPanel, c_triggerControlTypePanel, "VolskayaArena/VolskayaPanel/BossDuelPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libAMVS_gv_mMBOEPanel.lv_mainPanel = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (auto4BC845C1_ai >= 0 && lv_itTeam <= auto4BC845C1_ae) || (auto4BC845C1_ai < 0 && lv_itTeam >= auto4BC845C1_ae) ) ; lv_itTeam += auto4BC845C1_ai ) {
        lv_enemyTeam = libGame_gf_EnemyTeam(lv_itTeam);
        auto5A88BDE9_val = lv_itTeam;
        if (auto5A88BDE9_val == 1) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "BossDuelLeftFrame");
        }
        else if (auto5A88BDE9_val == 2) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "BossDuelRightFrame");
        }
        else {
        }
        libAMVS_gv_mMBOEPanel.lv_bossDuelFrame[lv_itTeam] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "BossHudLeft");
        libAMVS_gv_mMBOEPanel.lv_bossDuelHPBar[lv_itTeam][1] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "EnemyBossHealthBar");
        libAMVS_gv_mMBOEPanel.lv_bossDuelHPBar[lv_itTeam][2] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "AllyBossHealthBar");
        libAMVS_gv_mMBOEPanel.lv_bossDuelHPBar[lv_itTeam][lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "EnemyBossHealthBar");
        libAMVS_gv_mMBOEPanel.lv_bossDuelHPBar[lv_itTeam][lv_enemyTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "LeftBossHealthLabel");
        libAMVS_gv_mMBOEPanel.lv_bossDuelHPBarLabel_AfterDeath[lv_itTeam][1] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "RightBossHealthLabel");
        libAMVS_gv_mMBOEPanel.lv_bossDuelHPBarLabel_AfterDeath[lv_itTeam][2] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PhaseLabel");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_AMVS_679DF052"), PlayerGroupAll());
        lv_currentPanelLayer -= 1;
    }
}

void libAMVS_gf_TrCoEndCurse () {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, false);
    SoundStop(libMapM_gv_mMRavenCurseSound, true);
    SoundStop(libAMVS_gv_curseSound, true);
    SoundPlayForPlayer(SoundLink("Event_RavenCurse_CurseEnd", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal MM1Off");
    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal RainOff");
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libSond_gf_SoundtrackPlayMapSoundtrackAsDefaultSoundtrackForAllPlayers();
    libGame_gf_SpecialLightingEventEnd("StormRavenCourtCurseFinal", PlayerGroupAll(), 2.0);
}

void libAMVS_gf_MMRavenCurseStart (int lp_team) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    playergroup auto01458A8B_g;
    int auto01458A8B_var;
    unitgroup auto9D0046D8_g;
    int auto9D0046D8_u;
    unit auto9D0046D8_var;

    // Variable Initialization
    lv_enemyTeam = libGame_gf_EnemyTeam(lp_team);

    // Implementation
    SoundPlayForPlayer(SoundLink("Event_RavenCurse_CurseStart", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_RavenCurse_CurseMid", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libAMVS_gv_curseSound = SoundLastPlayed();
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_RavenKing_Cursed", PlayerGroupAll());
    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal MM1On");
    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal RainOn");
    auto01458A8B_g = libGame_gf_PlayersOnTeamHeroes(lp_team, false);
    auto01458A8B_var = -1;
    while (true) {
        	auto01458A8B_var = PlayerGroupNextPlayer(auto01458A8B_g, auto01458A8B_var);
        	if (auto01458A8B_var<0) { break; }
        	auto9D0046D8_g = libGame_gv_players[auto01458A8B_var].lv_heroUnitGroup;
        auto9D0046D8_u = UnitGroupCount(auto9D0046D8_g, c_unitCountAll);
        for (;; auto9D0046D8_u -= 1) {
            auto9D0046D8_var = UnitGroupUnitFromEnd(auto9D0046D8_g, auto9D0046D8_u);
            if (auto9D0046D8_var == null) { break; }
            if ((libAMVS_gf_UnitIsValidHero(auto9D0046D8_var) == true)) {
                UnitBehaviorAdd(auto9D0046D8_var, "RavenLordsCurseUnits", libAMVS_gv_aRM_TrialGrounds.lv_dummyUnitToRunDamageInstancesFrom[lv_enemyTeam], 1);
                UnitCreateEffectUnit(libAMVS_gv_aRM_TrialGrounds.lv_dummyUnitToRunDamageInstancesFrom[lv_enemyTeam], "RavenLordsCurse", auto9D0046D8_var);
            }

        }
    }
    TriggerExecute(libMapM_gt_MMRavenCurseStartLightTransition, true, false);
}

void libAMVS_gf_TrGrPlayControllingSoundsForTeams (int lp_owningTeam) {
    // Variable Declarations
    int lv_enemyTeam;
    bool lv__15;
    int lv_percentage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyTeam = libGame_gf_EnemyTeam(lp_owningTeam);
    lv_percentage = libVLSK_gf_GetCapturePointVictoryProgressasInt(libVLSK_gv_currentCapturePoint, lp_owningTeam);

    // Implementation
    libVLSK_gf_PauseUnpauseControllingSoundsForTeam(false, lp_owningTeam);
    while ((libVLSK_gv_capturePoints[libVLSK_gv_currentCapturePoint].lv_owningTeam != libCore_gv_cOMPUTER_Neutral)) {
        if ((lv_percentage == 0)) {
            if ((libAMVS_gv_trGr_CapturePoint_ControllingSound_Enemy[lp_owningTeam] == null)) {
                SoundPlayForPlayer(SoundLink("UI_Game_Volskaya_CapturePoint_Controlling_Enemy00", -1), c_maxPlayers, libGame_gf_PlayersOnTeamHeroes(lv_enemyTeam, false), 100.0, 0.0);
                libVLSK_gv_capturePoint_ControllingSound_Enemy[lp_owningTeam] = SoundLastPlayed();
            }

        }

        lv_percentage = libVLSK_gf_GetCapturePointVictoryProgressasInt(libVLSK_gv_currentCapturePoint, lp_owningTeam);
        if ((lv_percentage > libVLSK_gv_capturePoints[libVLSK_gv_currentCapturePoint].lv_oldCaptureProgress[lp_owningTeam])) {
            libVLSK_gv_capturePoints[libVLSK_gv_currentCapturePoint].lv_oldCaptureProgress[lp_owningTeam] = lv_percentage;
            if ((lv__15 == false) && (lv_percentage > 15)) {
                lv__15 = true;
                SoundPlayForPlayer(SoundLink("UI_Game_Volskaya_CapturePoint_Controlling_Enemy09", -1), c_maxPlayers, libGame_gf_PlayersOnTeamHeroes(lv_enemyTeam, false), 100.0, 0.0);
                libVLSK_gv_capturePoint_ControllingSound_Enemy[lp_owningTeam] = SoundLastPlayed();
                SoundPlayForPlayer(SoundLink("UI_Game_Volskaya_CapturePoint_Controlling_Ally01", -1), c_maxPlayers, libGame_gf_PlayersOnTeamHeroes(lp_owningTeam, false), 100.0, 0.0);
                libVLSK_gv_capturePoint_ControllingSound_Ally[lp_owningTeam] = SoundLastPlayed();
            }
            else if ((lv_percentage >= 100)) {
                SoundStop(libAMVS_gv_trGr_CapturePoint_ControllingSound_Ally[lp_owningTeam], false);
                SoundStop(libAMVS_gv_trGr_CapturePoint_ControllingSound_Enemy[lp_owningTeam], false);
                libVLSK_gv_capturePoint_ControllingSound_Ally[lp_owningTeam] = SoundLastPlayed();
                libVLSK_gv_capturePoint_ControllingSound_Enemy[lp_owningTeam] = SoundLastPlayed();
                SoundStop(libAMVS_gv_trGr_CapturePoint_ControllingSound_Ally[lv_enemyTeam], false);
                SoundStop(libAMVS_gv_trGr_CapturePoint_ControllingSound_Enemy[lv_enemyTeam], false);
                libVLSK_gv_capturePoint_ControllingSound_Ally[lv_enemyTeam] = SoundLastPlayed();
                libVLSK_gv_capturePoint_ControllingSound_Enemy[lv_enemyTeam] = SoundLastPlayed();
                return ;
            }
        }

        Wait(0.0625, c_timeGame);
    }
}

string libAMVS_gf_ArtiHero2 () {
    // Variable Declarations
    const int lv_maxRandHeroArrayCount_C = 20;
    string[lv_maxRandHeroArrayCount_C + 1] lv_randHero;
    string lv_returnHero;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_randHero[0] = "Illidan";
    lv_randHero[1] = "Jaina";
    lv_randHero[2] = "Junkrat";
    lv_randHero[3] = "Kaelthas";
    lv_randHero[4] = "Wizard";
    lv_randHero[5] = "Thrall";
    lv_randHero[6] = "Genji";
    lv_randHero[7] = "GreymaneWorgen";
    lv_randHero[8] = "Alarak";
    lv_randHero[9] = "Falstad";
    lv_randHero[10] = "Amazon";
    lv_randHero[11] = "Guldan";
    lv_randHero[12] = "KelThuzad";
    lv_randHero[13] = "Ragnaros";
    lv_randHero[14] = "Valeera";
    lv_randHero[15] = "Zuljin";
    lv_randHero[16] = "Kerrigan";
    lv_randHero[17] = "WitchDoctor";
    lv_randHero[18] = "Chromie";
    lv_randHero[19] = "DemonHunter";
    lv_randHero[20] = "Hanzo";
    lv_returnHero = lv_randHero[RandomInt(0, lv_maxRandHeroArrayCount_C)];
    while ((libIGHS_gf_HeroAlreadyBeenPickedForCrazyMode(lv_returnHero) == true)) {
        lv_returnHero = lv_randHero[RandomInt(0, lv_maxRandHeroArrayCount_C)];
    }
    return lv_returnHero;
}

trigger auto_libAMVS_gf_ArtiCDR_Trigger = null;
unit auto_libAMVS_gf_ArtiCDR_lp_unit;

void libAMVS_gf_ArtiCDR (unit lp_unit) {
    auto_libAMVS_gf_ArtiCDR_lp_unit = lp_unit;

    if (auto_libAMVS_gf_ArtiCDR_Trigger == null) {
        auto_libAMVS_gf_ArtiCDR_Trigger = TriggerCreate("auto_libAMVS_gf_ArtiCDR_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_ArtiCDR_Trigger, false, false);
}

bool auto_libAMVS_gf_ArtiCDR_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libAMVS_gf_ArtiCDR_lp_unit;

    // Variable Declarations
    fixed lv_cDRAmount;
    int lv_itAbility;
    int lv_heroIndex;
    string lv_abilLink;
    string lv_cooldownLink;
    fixed lv_currentCooldownAmount;
    fixed lv_newCooldownAmount;
    string lv_chargeLink;
    fixed lv_currentChargeAmount;
    fixed lv_newChargeAmount;

    // Automatic Variable Declarations
    int auto7E9DEDD5_ae;
    const int auto7E9DEDD5_ai = 1;

    // Variable Initialization
    lv_cDRAmount = -0.1;
    lv_heroIndex = libCore_gf_GetHeroIndexForUnitType(UnitGetType(lp_unit));
    lv_cooldownLink = "";
    lv_chargeLink = "";

    // Implementation
    while ((UnitIsAlive(lp_unit) == true)) {
        auto7E9DEDD5_ae = libGame_gv_players[lv_heroIndex].lv_heroData.lv_numberOfAbilities;
        lv_itAbility = 1;
        for ( ; ( (auto7E9DEDD5_ai >= 0 && lv_itAbility <= auto7E9DEDD5_ae) || (auto7E9DEDD5_ai < 0 && lv_itAbility >= auto7E9DEDD5_ae) ) ; lv_itAbility += auto7E9DEDD5_ai ) {
            if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_isAffectedByCooldownReduction == true) && (libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_isHeroic == false) && (libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_isTrait == false)) {
                lv_abilLink = libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_ability;
                lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.Link", UnitGetOwner(lp_unit));
                UnitModifyCooldown(lp_unit, lv_cooldownLink, lv_cDRAmount, c_cooldownOperationAdd);
                if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_usesCharges == true)) {
                    lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Charge.Link", UnitGetOwner(lp_unit));
                    UnitAddChargeRegenRemaining(lp_unit, lv_chargeLink, lv_cDRAmount);
                }

            }

        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

string libAMVS_gf_NoEvHero () {
    // Variable Declarations
    const int lv_maxRandHeroArrayCount_C = 19;
    string lv_returnHero;
    string[lv_maxRandHeroArrayCount_C + 1] lv_randHero;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_randHero[0] = "Jaina";
    lv_randHero[1] = "Junkrat";
    lv_randHero[2] = "Kaelthas";
    lv_randHero[3] = "Wizard";
    lv_randHero[4] = "Thrall";
    lv_randHero[5] = "Genji";
    lv_randHero[6] = "Alarak";
    lv_randHero[7] = "Falstad";
    lv_randHero[8] = "Amazon";
    lv_randHero[9] = "Guldan";
    lv_randHero[10] = "KelThuzad";
    lv_randHero[11] = "Ragnaros";
    lv_randHero[12] = "Zuljin";
    lv_randHero[13] = "Kerrigan";
    lv_randHero[14] = "WitchDoctor";
    lv_randHero[15] = "Chromie";
    lv_randHero[16] = "DemonHunter";
    lv_randHero[17] = "Nova";
    lv_randHero[18] = "Zeratul";
    lv_randHero[19] = "Hanzo";
    lv_returnHero = lv_randHero[RandomInt(0, lv_maxRandHeroArrayCount_C)];
    while ((libIGHS_gf_HeroAlreadyBeenPickedForCrazyMode(lv_returnHero) == true)) {
        lv_returnHero = lv_randHero[RandomInt(0, lv_maxRandHeroArrayCount_C)];
    }
    return lv_returnHero;
}

trigger auto_libAMVS_gf_DuImApplyImmortalsWrathToMembersOnTeam_Trigger = null;
int auto_libAMVS_gf_DuImApplyImmortalsWrathToMembersOnTeam_lp_teamToDealDamageTo;

void libAMVS_gf_DuImApplyImmortalsWrathToMembersOnTeam (int lp_teamToDealDamageTo) {
    auto_libAMVS_gf_DuImApplyImmortalsWrathToMembersOnTeam_lp_teamToDealDamageTo = lp_teamToDealDamageTo;

    if (auto_libAMVS_gf_DuImApplyImmortalsWrathToMembersOnTeam_Trigger == null) {
        auto_libAMVS_gf_DuImApplyImmortalsWrathToMembersOnTeam_Trigger = TriggerCreate("auto_libAMVS_gf_DuImApplyImmortalsWrathToMembersOnTeam_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_DuImApplyImmortalsWrathToMembersOnTeam_Trigger, false, false);
}

bool auto_libAMVS_gf_DuImApplyImmortalsWrathToMembersOnTeam_TriggerFunc (bool testConds, bool runActions) {
    int lp_teamToDealDamageTo = auto_libAMVS_gf_DuImApplyImmortalsWrathToMembersOnTeam_lp_teamToDealDamageTo;

    // Variable Declarations
    int lv_teamDealingDamage;

    // Automatic Variable Declarations
    playergroup auto36326669_g;
    int auto36326669_var;
    unitgroup auto78D186D5_g;
    int auto78D186D5_u;
    unit auto78D186D5_var;

    // Variable Initialization
    lv_teamDealingDamage = libGame_gf_EnemyTeam(lp_teamToDealDamageTo);

    // Implementation
    libAMVS_gv_duIm.lv_eventResolved = true;
    Wait(1.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(libAMVS_gv_duIm.lv_unit[lv_teamDealingDamage], "Signal Victory");
    Wait(2.0, c_timeGame);
    VisRevealerCreate(libGame_gf_ComputerPlayerInTeam(lv_teamDealingDamage), RegionEntireMap());
    auto36326669_g = libGame_gf_PlayersOnTeamHeroes(lp_teamToDealDamageTo, false);
    auto36326669_var = -1;
    while (true) {
        	auto36326669_var = PlayerGroupNextPlayer(auto36326669_g, auto36326669_var);
        	if (auto36326669_var<0) { break; }
        	auto78D186D5_g = libGame_gv_players[auto36326669_var].lv_heroUnitGroup;
        auto78D186D5_u = UnitGroupCount(auto78D186D5_g, c_unitCountAll);
        for (;; auto78D186D5_u -= 1) {
            auto78D186D5_var = UnitGroupUnitFromEnd(auto78D186D5_g, auto78D186D5_u);
            if (auto78D186D5_var == null) { break; }
            if ((libAMVS_gf_UnitIsValidHero(auto78D186D5_var) == true)) {
                UnitBehaviorAdd(auto78D186D5_var, "ImmortalDebuff", libAMVS_gv_aRM_TrialGrounds.lv_dummyUnitToRunDamageInstancesFrom[lv_teamDealingDamage], 1);
            }

        }
    }
    Wait(16.0, c_timeGame);
    DialogControlSendAnimationEvent(libAMVS_gv_trGr_UI.lv_notificationFrame, PlayerGroupAll(), "MoveDownMinor");
    DialogControlSetVisible(libAMVS_gv_mMBOEPanel.lv_mainPanel, PlayerGroupAll(), false);
    UnitRemove(libAMVS_gv_duIm.lv_unit[lv_teamDealingDamage]);
    VisRevealerDestroy(VisRevealerLastCreated());
    return true;
}

trigger auto_libAMVS_gf_DuImSpawnImmortalsForTeam_Trigger = null;
int auto_libAMVS_gf_DuImSpawnImmortalsForTeam_lp_team;

void libAMVS_gf_DuImSpawnImmortalsForTeam (int lp_team) {
    auto_libAMVS_gf_DuImSpawnImmortalsForTeam_lp_team = lp_team;

    if (auto_libAMVS_gf_DuImSpawnImmortalsForTeam_Trigger == null) {
        auto_libAMVS_gf_DuImSpawnImmortalsForTeam_Trigger = TriggerCreate("auto_libAMVS_gf_DuImSpawnImmortalsForTeam_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_DuImSpawnImmortalsForTeam_Trigger, false, false);
}

bool auto_libAMVS_gf_DuImSpawnImmortalsForTeam_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libAMVS_gf_DuImSpawnImmortalsForTeam_lp_team;

    // Automatic Variable Declarations
    int autoE7B92874_val;

    // Implementation
    if ((lp_team == 1)) {
        libNtve_gf_UnitCreateFacingPoint(1, "HeavenImmortal", c_unitCreateIgnorePlacement, libGame_gf_ComputerPlayerInTeam(lp_team), libAMVS_gv_duIm.lv_spawnPoint[lp_team], libAMVS_gv_centerPoint, null);
    }
    else {
        libNtve_gf_UnitCreateFacingPoint(1, "HellImmortal", c_unitCreateIgnorePlacement, libGame_gf_ComputerPlayerInTeam(lp_team), libAMVS_gv_duIm.lv_spawnPoint[lp_team], libAMVS_gv_centerPoint, null);
    }
    libAMVS_gv_duIm.lv_unit[lp_team] = UnitLastCreated();
    UnitGroupAdd(libAMVS_gv_eventUnitGroup, libAMVS_gv_duIm.lv_unit[lp_team]);
    AddUnitOfInterest(UnitLastCreated(), 500.0, 0.0, "KillImmortal", libAIAI_gf_ConvertIntegertoGoalTeam(libGame_gf_EnemyTeam(lp_team)), 0);
    SoundPlayForPlayer(SoundLink("HeavenVOIntro", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    autoE7B92874_val = lp_team;
    if (autoE7B92874_val == libGame_gv_teamOrderIndex_C) {
        libCore_gf_CreateMinimapPingStormWithPlayerId(PlayerGroupAll(), "ImmortalAngel", libAMVS_gv_duIm.lv_spawnPoint[lp_team], ColorWithAlpha(0,0,0,0), -1, libCore_gv_cOMPUTER_TeamOrder);
    }
    else if (autoE7B92874_val == libGame_gv_teamChaosIndex_C) {
        libCore_gf_CreateMinimapPingStormWithPlayerId(PlayerGroupAll(), "ImmortalDemon", libAMVS_gv_duIm.lv_spawnPoint[lp_team], ColorWithAlpha(0,0,0,0), -1, libCore_gv_cOMPUTER_TeamChaos);
    }
    else {
    }
    libAMVS_gv_duIm.lv_ping[lp_team] = PingLastCreated();
    PingSetScale(libAMVS_gv_duIm.lv_ping[lp_team], 0.75);
    return true;
}

trigger auto_libAMVS_gf_MMBOEUISetBosses_Trigger = null;
unit auto_libAMVS_gf_MMBOEUISetBosses_lp_mode;
unit auto_libAMVS_gf_MMBOEUISetBosses_lp_mode2;

void libAMVS_gf_MMBOEUISetBosses (unit lp_mode, unit lp_mode2) {
    auto_libAMVS_gf_MMBOEUISetBosses_lp_mode = lp_mode;
    auto_libAMVS_gf_MMBOEUISetBosses_lp_mode2 = lp_mode2;

    if (auto_libAMVS_gf_MMBOEUISetBosses_Trigger == null) {
        auto_libAMVS_gf_MMBOEUISetBosses_Trigger = TriggerCreate("auto_libAMVS_gf_MMBOEUISetBosses_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_MMBOEUISetBosses_Trigger, false, false);
}

bool auto_libAMVS_gf_MMBOEUISetBosses_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mode = auto_libAMVS_gf_MMBOEUISetBosses_lp_mode;
    unit lp_mode2 = auto_libAMVS_gf_MMBOEUISetBosses_lp_mode2;

    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libAMVS_gv_mMBOEPanel.lv_bossDuelFrame[1], libGame_gf_PlayersOnTeamHeroes(1, false), true);
    DialogControlSetVisible(libAMVS_gv_mMBOEPanel.lv_bossDuelFrame[1], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    DialogControlSetVisible(libAMVS_gv_mMBOEPanel.lv_bossDuelFrame[2], libGame_gf_PlayersOnTeamHeroes(2, false), true);
    libNtve_gf_SetDialogItemUnit(libAMVS_gv_mMBOEPanel.lv_bossDuelHPBar[1][1], lp_mode, PlayerGroupAll());
    libNtve_gf_SetDialogItemUnit(libAMVS_gv_mMBOEPanel.lv_bossDuelHPBar[1][2], lp_mode2, PlayerGroupAll());
    DialogControlSetVisible(libAMVS_gv_mMBOEPanel.lv_bossDuelHPBar[1][1], PlayerGroupAll(), true);
    DialogControlSetVisible(libAMVS_gv_mMBOEPanel.lv_bossDuelHPBar[1][2], PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemUnit(libAMVS_gv_mMBOEPanel.lv_bossDuelHPBar[2][1], lp_mode, PlayerGroupAll());
    libNtve_gf_SetDialogItemUnit(libAMVS_gv_mMBOEPanel.lv_bossDuelHPBar[2][2], lp_mode2, PlayerGroupAll());
    DialogControlSetVisible(libAMVS_gv_mMBOEPanel.lv_bossDuelHPBar[2][1], PlayerGroupAll(), true);
    DialogControlSetVisible(libAMVS_gv_mMBOEPanel.lv_bossDuelHPBar[2][2], PlayerGroupAll(), true);
    return true;
}

string libAMVS_gf_SaZoHero () {
    // Variable Declarations
    const int lv_maxRandHeroArrayCount_C = 8;
    string lv_returnHero;
    string[lv_maxRandHeroArrayCount_C + 1] lv_randHero;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_randHero[0] = "Dehaka";
    lv_randHero[1] = "Diablo";
    lv_randHero[2] = "L90ETC";
    lv_randHero[3] = "Garrosh";
    lv_randHero[4] = "Junkrat";
    lv_randHero[5] = "Muradin";
    lv_randHero[6] = "Medivh";
    lv_randHero[7] = "Genji";
    lv_randHero[8] = "Alarak";
    lv_returnHero = lv_randHero[RandomInt(0, lv_maxRandHeroArrayCount_C)];
    while ((libIGHS_gf_HeroAlreadyBeenPickedForCrazyMode(lv_returnHero) == true)) {
        lv_returnHero = lv_randHero[RandomInt(0, lv_maxRandHeroArrayCount_C)];
    }
    return lv_returnHero;
}

trigger auto_libAMVS_gf_SaZoTimerCountdownMonitor_Trigger = null;
timer auto_libAMVS_gf_SaZoTimerCountdownMonitor_lp_timer;

void libAMVS_gf_SaZoTimerCountdownMonitor (timer lp_timer) {
    auto_libAMVS_gf_SaZoTimerCountdownMonitor_lp_timer = lp_timer;

    if (auto_libAMVS_gf_SaZoTimerCountdownMonitor_Trigger == null) {
        auto_libAMVS_gf_SaZoTimerCountdownMonitor_Trigger = TriggerCreate("auto_libAMVS_gf_SaZoTimerCountdownMonitor_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_SaZoTimerCountdownMonitor_Trigger, false, false);
}

bool auto_libAMVS_gf_SaZoTimerCountdownMonitor_TriggerFunc (bool testConds, bool runActions) {
    timer lp_timer = auto_libAMVS_gf_SaZoTimerCountdownMonitor_lp_timer;

    // Automatic Variable Declarations
    // Implementation
    while ((TimerGetRemaining(lp_timer) > 0.0)) {
        libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_timerLabel, FixedToText(TimerGetRemaining(lp_timer), 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(libAMVS_gv_trGr_UI.lv_timerProgressBar, ((TimerGetRemaining(lp_timer) / (TimerGetRemaining(lp_timer) + TimerGetElapsed(lp_timer))) * 100.0), PlayerGroupAll());
        if ((TimerGetRemaining(lp_timer) == 3.875)) {
            SoundPlayForPlayer(SoundLink("Event_SafeZone_MiniMap_Warning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            DialogControlSendAnimationEvent(libAMVS_gv_trGr_UI.lv_safeZoneContainerFrame, PlayerGroupAll(), "ShockWarning");
        }

        if ((ModF(TimerGetRemaining(lp_timer), 1.0) == 0.0)) {
            SoundPlayForPlayer(SoundLink("SwitchRoundTick", -1), c_maxPlayers, libAMVS_gv_saZo.lv_safePlayerGroup, ((((TimerGetRemaining(lp_timer) / (TimerGetRemaining(lp_timer) + TimerGetElapsed(lp_timer))) * 100.0) - 100.0) * -1.0), 0.0);
            SoundPlayForPlayer(SoundLink("DangerZoneTick", -1), c_maxPlayers, libAMVS_gv_saZo.lv_unsafePlayerGroup, ((((TimerGetRemaining(lp_timer) / (TimerGetRemaining(lp_timer) + TimerGetElapsed(lp_timer))) * 100.0) - 100.0) * -1.0), 0.0);
        }

        if ((TimerGetRemaining(lp_timer) < 1.0) && (ModF(TimerGetRemaining(lp_timer), 0.25) == 0.0)) {
            SoundPlayForPlayer(SoundLink("SwitchRoundTick", -1), c_maxPlayers, libAMVS_gv_saZo.lv_safePlayerGroup, 100.0, 0.0);
            SoundPlayForPlayer(SoundLink("DangerZoneTick", -1), c_maxPlayers, libAMVS_gv_saZo.lv_unsafePlayerGroup, 100.0, 0.0);
        }

        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_libAMVS_gf_FirstEventWarning_Trigger = null;

void libAMVS_gf_FirstEventWarning () {
    if (auto_libAMVS_gf_FirstEventWarning_Trigger == null) {
        auto_libAMVS_gf_FirstEventWarning_Trigger = TriggerCreate("auto_libAMVS_gf_FirstEventWarning_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_FirstEventWarning_Trigger, false, false);
}

bool auto_libAMVS_gf_FirstEventWarning_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("VolskayaTrialGrounds");
    UserDataSetInt("VolskayaTrialGrounds", "First Event Warning", "Value", 1, 1);
    ConversationDataRun("VolskayaArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMVS_gf_SecondEventWarning_Trigger = null;

void libAMVS_gf_SecondEventWarning () {
    if (auto_libAMVS_gf_SecondEventWarning_Trigger == null) {
        auto_libAMVS_gf_SecondEventWarning_Trigger = TriggerCreate("auto_libAMVS_gf_SecondEventWarning_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_SecondEventWarning_Trigger, false, false);
}

bool auto_libAMVS_gf_SecondEventWarning_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("VolskayaTrialGrounds");
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Victor"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Right"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Observer"));
    UserDataSetInt("VolskayaTrialGrounds", "Second Event Warning", "Value", 1, 1);
    ConversationDataRun("VolskayaArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMVS_gf_TributeActive_Trigger = null;

void libAMVS_gf_TributeActive () {
    if (auto_libAMVS_gf_TributeActive_Trigger == null) {
        auto_libAMVS_gf_TributeActive_Trigger = TriggerCreate("auto_libAMVS_gf_TributeActive_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_TributeActive_Trigger, false, false);
}

bool auto_libAMVS_gf_TributeActive_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("VolskayaTrialGrounds");
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Victor"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Right"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Observer"));
    UserDataSetInt("VolskayaTrialGrounds", "Tribute Active", "Value", 1, 1);
    ConversationDataRun("VolskayaArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMVS_gf_TributeClaimed_Trigger = null;
int auto_libAMVS_gf_TributeClaimed_lp_victoryTeam;

void libAMVS_gf_TributeClaimed (int lp_victoryTeam) {
    auto_libAMVS_gf_TributeClaimed_lp_victoryTeam = lp_victoryTeam;

    if (auto_libAMVS_gf_TributeClaimed_Trigger == null) {
        auto_libAMVS_gf_TributeClaimed_Trigger = TriggerCreate("auto_libAMVS_gf_TributeClaimed_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_TributeClaimed_Trigger, false, false);
}

bool auto_libAMVS_gf_TributeClaimed_TriggerFunc (bool testConds, bool runActions) {
    int lp_victoryTeam = auto_libAMVS_gf_TributeClaimed_lp_victoryTeam;

    // Variable Declarations
    playergroup lv_victors;
    playergroup lv_losers;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_victors = libGame_gf_PlayersOnTeamHeroes(lp_victoryTeam, false);
    lv_losers = libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeam(lp_victoryTeam), false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("VolskayaTrialGrounds");
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Victor"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Loser"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Observer"));
    UserDataSetInt("VolskayaTrialGrounds", "Tribute Claimed", "Value", 1, 1);
    ConversationDataLineSetPlayers("VolskayaArenaVO", ("Victor"), lv_victors);
    ConversationDataLineSetPlayers("VolskayaArenaVO", ("Loser"), lv_losers);
    ConversationDataLineSetPlayers("VolskayaArenaVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("VolskayaArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMVS_gf_CapturePointActive_Trigger = null;

void libAMVS_gf_CapturePointActive () {
    if (auto_libAMVS_gf_CapturePointActive_Trigger == null) {
        auto_libAMVS_gf_CapturePointActive_Trigger = TriggerCreate("auto_libAMVS_gf_CapturePointActive_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_CapturePointActive_Trigger, false, false);
}

bool auto_libAMVS_gf_CapturePointActive_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("VolskayaTrialGrounds");
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Victor"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Right"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Observer"));
    UserDataSetInt("VolskayaTrialGrounds", "Capture Point Active", "Value", 1, 1);
    ConversationDataRun("VolskayaArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMVS_gf_CapturePointClaimed_Trigger = null;
int auto_libAMVS_gf_CapturePointClaimed_lp_victoryTeam;

void libAMVS_gf_CapturePointClaimed (int lp_victoryTeam) {
    auto_libAMVS_gf_CapturePointClaimed_lp_victoryTeam = lp_victoryTeam;

    if (auto_libAMVS_gf_CapturePointClaimed_Trigger == null) {
        auto_libAMVS_gf_CapturePointClaimed_Trigger = TriggerCreate("auto_libAMVS_gf_CapturePointClaimed_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_CapturePointClaimed_Trigger, false, false);
}

bool auto_libAMVS_gf_CapturePointClaimed_TriggerFunc (bool testConds, bool runActions) {
    int lp_victoryTeam = auto_libAMVS_gf_CapturePointClaimed_lp_victoryTeam;

    // Variable Declarations
    playergroup lv_victors;
    playergroup lv_losers;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_victors = libGame_gf_PlayersOnTeamHeroes(lp_victoryTeam, false);
    lv_losers = libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeam(lp_victoryTeam), false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("VolskayaTrialGrounds");
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Victor"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Loser"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Observer"));
    UserDataSetInt("VolskayaTrialGrounds", "Capture Point Claimed", "Value", 1, 1);
    ConversationDataLineSetPlayers("VolskayaArenaVO", ("Victor"), lv_victors);
    ConversationDataLineSetPlayers("VolskayaArenaVO", ("Loser"), lv_losers);
    ConversationDataLineSetPlayers("VolskayaArenaVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("VolskayaArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMVS_gf_MechExpiredorDestroyed_Trigger = null;
int auto_libAMVS_gf_MechExpiredorDestroyed_lp_victoryTeam;

void libAMVS_gf_MechExpiredorDestroyed (int lp_victoryTeam) {
    auto_libAMVS_gf_MechExpiredorDestroyed_lp_victoryTeam = lp_victoryTeam;

    if (auto_libAMVS_gf_MechExpiredorDestroyed_Trigger == null) {
        auto_libAMVS_gf_MechExpiredorDestroyed_Trigger = TriggerCreate("auto_libAMVS_gf_MechExpiredorDestroyed_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_MechExpiredorDestroyed_Trigger, false, false);
}

bool auto_libAMVS_gf_MechExpiredorDestroyed_TriggerFunc (bool testConds, bool runActions) {
    int lp_victoryTeam = auto_libAMVS_gf_MechExpiredorDestroyed_lp_victoryTeam;

    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("VolskayaTrialGrounds");
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Victor"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Loser"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Observer"));
    UserDataSetInt("VolskayaTrialGrounds", "Mech Expired or Destroyed", "Value", 1, 1);
    ConversationDataRun("VolskayaArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMVS_gf_ArtifactAvailable_Trigger = null;

void libAMVS_gf_ArtifactAvailable () {
    if (auto_libAMVS_gf_ArtifactAvailable_Trigger == null) {
        auto_libAMVS_gf_ArtifactAvailable_Trigger = TriggerCreate("auto_libAMVS_gf_ArtifactAvailable_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_ArtifactAvailable_Trigger, false, false);
}

bool auto_libAMVS_gf_ArtifactAvailable_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("VolskayaTrialGrounds");
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Victor"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Right"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Observer"));
    UserDataSetInt("VolskayaTrialGrounds", "Artifact Available", "Value", 1, 1);
    ConversationDataRun("VolskayaArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMVS_gf_ArtifactAcquired_Trigger = null;
int auto_libAMVS_gf_ArtifactAcquired_lp_victoryTeam;

void libAMVS_gf_ArtifactAcquired (int lp_victoryTeam) {
    auto_libAMVS_gf_ArtifactAcquired_lp_victoryTeam = lp_victoryTeam;

    if (auto_libAMVS_gf_ArtifactAcquired_Trigger == null) {
        auto_libAMVS_gf_ArtifactAcquired_Trigger = TriggerCreate("auto_libAMVS_gf_ArtifactAcquired_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_ArtifactAcquired_Trigger, false, false);
}

bool auto_libAMVS_gf_ArtifactAcquired_TriggerFunc (bool testConds, bool runActions) {
    int lp_victoryTeam = auto_libAMVS_gf_ArtifactAcquired_lp_victoryTeam;

    // Variable Declarations
    playergroup lv_victors;
    playergroup lv_losers;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_victors = libGame_gf_PlayersOnTeamHeroes(lp_victoryTeam, false);
    lv_losers = libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeam(lp_victoryTeam), false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("VolskayaTrialGrounds");
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Victor"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Loser"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Observer"));
    UserDataSetInt("VolskayaTrialGrounds", "Artifact Acquired", "Value", 1, 1);
    ConversationDataLineSetPlayers("VolskayaArenaVO", ("Victor"), lv_victors);
    ConversationDataLineSetPlayers("VolskayaArenaVO", ("Loser"), lv_losers);
    ConversationDataLineSetPlayers("VolskayaArenaVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("VolskayaArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMVS_gf_ArtifactHolderSlain_Trigger = null;
int auto_libAMVS_gf_ArtifactHolderSlain_lp_victoryTeam;

void libAMVS_gf_ArtifactHolderSlain (int lp_victoryTeam) {
    auto_libAMVS_gf_ArtifactHolderSlain_lp_victoryTeam = lp_victoryTeam;

    if (auto_libAMVS_gf_ArtifactHolderSlain_Trigger == null) {
        auto_libAMVS_gf_ArtifactHolderSlain_Trigger = TriggerCreate("auto_libAMVS_gf_ArtifactHolderSlain_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_ArtifactHolderSlain_Trigger, false, false);
}

bool auto_libAMVS_gf_ArtifactHolderSlain_TriggerFunc (bool testConds, bool runActions) {
    int lp_victoryTeam = auto_libAMVS_gf_ArtifactHolderSlain_lp_victoryTeam;

    // Variable Declarations
    playergroup lv_victors;
    playergroup lv_losers;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_victors = libGame_gf_PlayersOnTeamHeroes(lp_victoryTeam, false);
    lv_losers = libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeam(lp_victoryTeam), false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("VolskayaTrialGrounds");
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Victor"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Loser"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Observer"));
    UserDataSetInt("VolskayaTrialGrounds", "Artifact Holder Slain", "Value", 1, 1);
    ConversationDataLineSetPlayers("VolskayaArenaVO", ("Victor"), lv_victors);
    ConversationDataLineSetPlayers("VolskayaArenaVO", ("Loser"), lv_losers);
    ConversationDataLineSetPlayers("VolskayaArenaVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("VolskayaArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMVS_gf_ImmortalsActive_Trigger = null;

void libAMVS_gf_ImmortalsActive () {
    if (auto_libAMVS_gf_ImmortalsActive_Trigger == null) {
        auto_libAMVS_gf_ImmortalsActive_Trigger = TriggerCreate("auto_libAMVS_gf_ImmortalsActive_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_ImmortalsActive_Trigger, false, false);
}

bool auto_libAMVS_gf_ImmortalsActive_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("VolskayaTrialGrounds");
    UserDataSetInt("VolskayaTrialGrounds", "Immortals Active", "Value", 1, 1);
    ConversationDataRun("VolskayaArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMVS_gf_ImmortalSlain_Trigger = null;
int auto_libAMVS_gf_ImmortalSlain_lp_victoryTeam;

void libAMVS_gf_ImmortalSlain (int lp_victoryTeam) {
    auto_libAMVS_gf_ImmortalSlain_lp_victoryTeam = lp_victoryTeam;

    if (auto_libAMVS_gf_ImmortalSlain_Trigger == null) {
        auto_libAMVS_gf_ImmortalSlain_Trigger = TriggerCreate("auto_libAMVS_gf_ImmortalSlain_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_ImmortalSlain_Trigger, false, false);
}

bool auto_libAMVS_gf_ImmortalSlain_TriggerFunc (bool testConds, bool runActions) {
    int lp_victoryTeam = auto_libAMVS_gf_ImmortalSlain_lp_victoryTeam;

    // Variable Declarations
    playergroup lv_victors;
    playergroup lv_losers;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_victors = libGame_gf_PlayersOnTeamHeroes(lp_victoryTeam, false);
    lv_losers = libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeam(lp_victoryTeam), false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("VolskayaTrialGrounds");
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Victor"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Loser"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Observer"));
    UserDataSetInt("VolskayaTrialGrounds", "Immortals Slain", "Value", 1, 1);
    ConversationDataLineSetPlayers("VolskayaArenaVO", ("Victor"), lv_victors);
    ConversationDataLineSetPlayers("VolskayaArenaVO", ("Loser"), lv_losers);
    ConversationDataLineSetPlayers("VolskayaArenaVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("VolskayaArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMVS_gf_SafeZoneEvent_Trigger = null;

void libAMVS_gf_SafeZoneEvent () {
    if (auto_libAMVS_gf_SafeZoneEvent_Trigger == null) {
        auto_libAMVS_gf_SafeZoneEvent_Trigger = TriggerCreate("auto_libAMVS_gf_SafeZoneEvent_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_SafeZoneEvent_Trigger, false, false);
}

bool auto_libAMVS_gf_SafeZoneEvent_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("VolskayaTrialGrounds");
    UserDataSetInt("VolskayaTrialGrounds", "Safe Zone Event", "Value", 1, 1);
    ConversationDataRun("VolskayaArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMVS_gf_NoEvent_Trigger = null;

void libAMVS_gf_NoEvent () {
    if (auto_libAMVS_gf_NoEvent_Trigger == null) {
        auto_libAMVS_gf_NoEvent_Trigger = TriggerCreate("auto_libAMVS_gf_NoEvent_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_NoEvent_Trigger, false, false);
}

bool auto_libAMVS_gf_NoEvent_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("VolskayaTrialGrounds");
    UserDataSetInt("VolskayaTrialGrounds", "No Event", "Value", 1, 1);
    ConversationDataRun("VolskayaArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMVS_gf_GenericEvent_Trigger = null;

void libAMVS_gf_GenericEvent () {
    if (auto_libAMVS_gf_GenericEvent_Trigger == null) {
        auto_libAMVS_gf_GenericEvent_Trigger = TriggerCreate("auto_libAMVS_gf_GenericEvent_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_GenericEvent_Trigger, false, false);
}

bool auto_libAMVS_gf_GenericEvent_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("VolskayaTrialGrounds");
    UserDataSetInt("VolskayaTrialGrounds", "Generic Event", "Value", 1, 1);
    ConversationDataRun("VolskayaArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMVS_gf_RoundScoreTransmission_Trigger = null;
int auto_libAMVS_gf_RoundScoreTransmission_lp_victoryTeam;
int auto_libAMVS_gf_RoundScoreTransmission_lp_roundIndex;

void libAMVS_gf_RoundScoreTransmission (int lp_victoryTeam, int lp_roundIndex) {
    auto_libAMVS_gf_RoundScoreTransmission_lp_victoryTeam = lp_victoryTeam;
    auto_libAMVS_gf_RoundScoreTransmission_lp_roundIndex = lp_roundIndex;

    if (auto_libAMVS_gf_RoundScoreTransmission_Trigger == null) {
        auto_libAMVS_gf_RoundScoreTransmission_Trigger = TriggerCreate("auto_libAMVS_gf_RoundScoreTransmission_TriggerFunc");
    }

    TriggerExecute(auto_libAMVS_gf_RoundScoreTransmission_Trigger, false, false);
}

bool auto_libAMVS_gf_RoundScoreTransmission_TriggerFunc (bool testConds, bool runActions) {
    int lp_victoryTeam = auto_libAMVS_gf_RoundScoreTransmission_lp_victoryTeam;
    int lp_roundIndex = auto_libAMVS_gf_RoundScoreTransmission_lp_roundIndex;

    // Variable Declarations
    playergroup lv_victors;
    playergroup lv_losers;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    int autoF7545251_val;

    // Variable Initialization
    lv_victors = libGame_gf_PlayersOnTeamHeroes(lp_victoryTeam, false);
    lv_losers = libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeam(lp_victoryTeam), false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];

    // Implementation
    UserDataResetType("VolskayaTrialGrounds");
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Victor"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Loser"));
    ConversationDataLineResetPlayers("VolskayaArenaVO", ("Observer"));
    autoF7545251_val = lp_roundIndex;
    if (autoF7545251_val == 1) {
        if ((libAREN_gv_aRM_RoundScore[lp_victoryTeam] == 1)) {
            UserDataSetInt("VolskayaTrialGrounds", "Score Not Tied", "Value", 1, 1);
            UserDataSetInt("VolskayaTrialGrounds", "Match Point", "Value", 1, 1);
        }
        else {
            UserDataSetInt("VolskayaTrialGrounds", "Round One Over", "Value", 1, 1);
        }
    }
    else if (autoF7545251_val == 2) {
        if ((libAREN_gv_aRM_RoundScore[lp_victoryTeam] == 1)) {
            UserDataSetInt("VolskayaTrialGrounds", "Score Not Tied", "Value", 1, 1);
            UserDataSetInt("VolskayaTrialGrounds", "Match Point", "Value", 1, 1);
        }
        else {
            return true;
        }
    }
    else if (autoF7545251_val == 3) {
        if ((libAREN_gv_aRM_RoundScore[lp_victoryTeam] == 2)) {
            UserDataSetInt("VolskayaTrialGrounds", "Match Point", "Value", 1, 1);
            UserDataSetInt("VolskayaTrialGrounds", "Score Not Tied", "Value", 1, 1);
        }
        else {
            UserDataSetInt("VolskayaTrialGrounds", "Round Three Over", "Value", 1, 1);
        }
    }
    else if (autoF7545251_val == 4) {
        if ((libAREN_gv_aRM_RoundScore[lp_victoryTeam] == 2)) {
            UserDataSetInt("VolskayaTrialGrounds", "Match Point", "Value", 1, 1);
            UserDataSetInt("VolskayaTrialGrounds", "Score Not Tied", "Value", 1, 1);
        }
        else {
            UserDataSetInt("VolskayaTrialGrounds", "Round Four Over", "Value", 1, 1);
        }
    }
    else if (autoF7545251_val == 5) {
        UserDataSetInt("VolskayaTrialGrounds", "Score Tied", "Value", 1, 1);
        UserDataSetInt("VolskayaTrialGrounds", "Match Point", "Value", 1, 1);
    }
    else {
    }
    TriggerQueueEnter();
    ConversationDataLineSetPlayers("VolskayaArenaVO", ("Victor"), lv_victors);
    ConversationDataLineSetPlayers("VolskayaArenaVO", ("Loser"), lv_losers);
    ConversationDataLineSetPlayers("VolskayaArenaVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("VolskayaArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Shuffle Pick UI Shown Event
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_ShufflePickUIShownEvent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libAREN_gf_ArenaCurrentRoundIndex() == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("ShufflepickHeroSelectionVO", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_ShufflePickUIShownEvent_Init () {
    libAMVS_gt_ShufflePickUIShownEvent = TriggerCreate("libAMVS_gt_ShufflePickUIShownEvent_Func");
    libIGHS_gf_ShufflePickUIShown(libAMVS_gt_ShufflePickUIShownEvent);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level Start
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_LevelStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_levelIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_levelIndex = libAREN_gf_ArenaCurrentLevelIndex();

    // Actions
    if (!runActions) {
        return true;
    }

    libAREN_gv_aRM_VictorySequencePlaying = false;
    if ((libMapM_gv_mapMechanicControllerActor == null)) {
        libNtve_gf_CreateActorAtPoint("MMController", RegionGetCenter(RegionEntireMap()));
        libMapM_gv_mapMechanicControllerActor = libNtve_gf_ActorLastCreated();
    }

    if ((libAMVS_gv_levelStartCallback[lv_levelIndex] != null)) {
        TriggerExecute(libAMVS_gv_levelStartCallback[lv_levelIndex], true, false);
    }

    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal MM1Off");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_LevelStart_Init () {
    libAMVS_gt_LevelStart = TriggerCreate("libAMVS_gt_LevelStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Initialization
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_MapInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto27F834E7_val;

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_bALDeathTimeOverride = c_timerDurationInfinite;
    libGame_gv_heroDeath_RespawnMounted = false;
    libGame_gv_towerMapPlaysCoreWarning = false;
    libAREN_gv_aRM_PanCameraToCore = false;
    libAREN_gv_showCoreStatusBars = false;
    libAREN_gv_aRM_BaseRevealersEnabled = false;
    libAREN_gv_playRoundOverVO = false;
    TriggerEnable(libVLSK_gt_GateOpenTimerExpires, false);
    TriggerEnable(libUIUI_gt_UIPartyFrameUnitClicked, false);
    libGame_gf_InitializeHealthPackGenerators();
    libAMVS_gf_InitializeEventShuffler();
    libAMVS_gv_currentEvent = libAMVS_gf_GetNewEvent();
    auto27F834E7_val = libAMVS_gv_currentEvent;
    if (auto27F834E7_val == libAMVS_ge_TrialGroundsEventConstants_Volskaya_SafeZone) {
        libIGHS_gf_InitializeShufflePickAllSameHero(StringExternal("Param/Value/lib_AMVS_D236FD53"), true, false, 10, libAMVS_gf_SaZoHero());
    }
    else if (auto27F834E7_val == libAMVS_ge_TrialGroundsEventConstants_Volskaya_Artifact) {
        libIGHS_gf_InitializeShufflePickAllSameHero(StringExternal("Param/Value/lib_AMVS_BDED7391"), true, false, 10, libAMVS_gf_ArtiHero2());
    }
    else {
        libIGHS_gf_InitializeShufflePickUnlocked(StringExternal("Param/Value/lib_AMVS_0EA5EDF0"), true, false, 10, 100.0, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_MapInitialization_Init () {
    libAMVS_gt_MapInitialization = TriggerCreate("libAMVS_gt_MapInitialization_Func");
    TriggerAddEventMapInit(libAMVS_gt_MapInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Include Mod Initialization
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_IncludeModInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;

    // Automatic Variable Declarations
    const int autoE95DEBB2_ae = libCore_gv_bALMaxTeams;
    const int autoE95DEBB2_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team = 1;
    for ( ; ( (autoE95DEBB2_ai >= 0 && lv_team <= autoE95DEBB2_ae) || (autoE95DEBB2_ai < 0 && lv_team >= autoE95DEBB2_ae) ) ; lv_team += autoE95DEBB2_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DummyUnitToHandleDamageInstances", 0, libGame_gf_ComputerPlayerInTeam(lv_team), libAMVS_gv_puntPoint[lv_team], null);
        libAMVS_gv_aRM_TrialGrounds.lv_dummyUnitToRunDamageInstancesFrom[lv_team] = UnitLastCreated();
        libGame_gv_teams[lv_team].lv_core = UnitLastCreated();
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DummyUnitToHandleDamageInstances", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, libAMVS_gv_centerPoint, null);
    libAMVS_gv_aRM_TrialGrounds.lv_dummyUnitToRunDamageInstancesFrom[0] = UnitLastCreated();
    libAMVS_gv_aRM_TrialGrounds.lv_eventTriggerInitializers[libAMVS_ge_TrialGroundsEventConstants_Volskaya_Tribute] = libAMVS_gt_TrCoInit;
    libAMVS_gv_aRM_TrialGrounds.lv_eventTriggerInitializers[libAMVS_ge_TrialGroundsEventConstants_Volskaya_CapturePoint] = libAMVS_gt_CaPoInit;
    libAMVS_gv_aRM_TrialGrounds.lv_eventTriggerInitializers[libAMVS_ge_TrialGroundsEventConstants_Volskaya_Artifact] = libAMVS_gt_ArtiInit;
    libAMVS_gv_aRM_TrialGrounds.lv_eventTriggerInitializers[libAMVS_ge_TrialGroundsEventConstants_Volskaya_NoEvent] = libAMVS_gt_NoEvInit;
    libAMVS_gv_aRM_TrialGrounds.lv_eventTriggerInitializers[libAMVS_ge_TrialGroundsEventConstants_Volskaya_DuelingImmortals] = libAMVS_gt_DuImInit;
    libAMVS_gv_aRM_TrialGrounds.lv_eventTriggerInitializers[libAMVS_ge_TrialGroundsEventConstants_Volskaya_SafeZone] = libAMVS_gt_SaZoInit;
    libAMVS_gf_HookupUI();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_IncludeModInitialization_Init () {
    libAMVS_gt_IncludeModInitialization = TriggerCreate("libAMVS_gt_IncludeModInitialization_Func");
    libCore_gf_IncludeModInitialization(libAMVS_gt_IncludeModInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Open Timer Started
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_GameOpenTimerStarted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libGame_gv_openTheGatesTimer, (libAMVS_gv_trGrOpenTheGatesTimerDuration_C + libGame_gv_heroSpawnDelay_C), false, c_timeGame);
    libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("MX_Volskaya_LVL_1", PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_GameOpenTimerStarted_Init () {
    libAMVS_gt_GameOpenTimerStarted = TriggerCreate("libAMVS_gt_GameOpenTimerStarted_Func");
    libGame_gf_GameOpenTimerStarted(libAMVS_gt_GameOpenTimerStarted);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open The Gates Timer Expires
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_OpenTheGatesTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup auto57A30A8A_g;
    int auto57A30A8A_var;
    const int autoEAEF121A_ae = libCore_gv_bALMaxPlayers;
    const int autoEAEF121A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto57A30A8A_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    auto57A30A8A_var = -1;
    while (true) {
        	auto57A30A8A_var = PlayerGroupNextPlayer(auto57A30A8A_g, auto57A30A8A_var);
        	if (auto57A30A8A_var<0) { break; }
        	VisRevealerEnable(libGame_gv_baseRevealers[auto57A30A8A_var], false);
    }
    libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("MX_Volskaya_LVL_10", PlayerGroupAll());
    if ((PlayerGroupCount(libAMVS_gv_eventShufflerPG) == 0)) {
        libAMVS_gf_InitializeEventShuffler();
    }

    AddUnitOfInterest(libAMVS_gv_aRM_TrialGrounds.lv_dummyUnitToRunDamageInstancesFrom[0], 100.0, 0.0, "CenterArea", libNtve_ge_GoalTeam_Both, 0);
    lv_i = 1;
    for ( ; ( (autoEAEF121A_ai >= 0 && lv_i <= autoEAEF121A_ae) || (autoEAEF121A_ai < 0 && lv_i >= autoEAEF121A_ae) ) ; lv_i += autoEAEF121A_ai ) {
        AddUnitOfInterest(libGame_gv_players[lv_i].lv_heroUnit, 100.0, 0.0, "KillHero", libAIAI_gf_ConvertIntegertoGoalTeam(libGame_gf_EnemyTeamNumberOfPlayer(lv_i)), 0);
    }
    Wait(1.0, c_timeGame);
    TimerStart(libAMVS_gv_revealWarningTimer, (libAMVS_gv_revealTimerDuration_C - 10.0), false, c_timeGame);
    TimerStart(libAMVS_gv_revealTimer, libAMVS_gv_revealTimerDuration_C, false, c_timeGame);
    TimerStart(libAMVS_gv_eventStartTimer, (libAMVS_gv_eventTimerDuration_C - libAMVS_gv_elevatorDelay_C), false, c_timeGame);
    TimerStart(libAMVS_gv_eventSpawnTimer, libAMVS_gv_eventTimerDuration_C, false, c_timeGame);
    libAMVS_gf_EventSoundController();
    if ((libAMVS_gv_overrideEvent == true)) {
        libAMVS_gv_overrideEvent = false;
    }

    TriggerExecute(libAMVS_gv_aRM_TrialGrounds.lv_eventTriggerInitializers[libAMVS_gv_currentEvent], true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_OpenTheGatesTimerExpires_Init () {
    libAMVS_gt_OpenTheGatesTimerExpires = TriggerCreate("libAMVS_gt_OpenTheGatesTimerExpires_Func");
    TriggerAddEventTimer(libAMVS_gt_OpenTheGatesTimerExpires, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Event Start Timer Expires
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_EventStartTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto50B8485D_val;

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_SendActorMessageToDoodadsInRegion("Signal Up", libAMVS_gv_elevatorRegion, null);
    TimerStart(libAMVS_gv_aRM_TrialGrounds.lv_elevatorTimer, libAMVS_gv_elevatorDelay_C, false, c_timeGame);
    libAMVS_gf_ElevatorSlideout();
    auto50B8485D_val = libAMVS_gv_currentEvent;
    if (auto50B8485D_val == libAMVS_ge_TrialGroundsEventConstants_Volskaya_Tribute) {
        libCore_gf_SendActorMessageToDoodadsInRegion("Signal Tribute", libAMVS_gv_elevatorRegion, null);
    }
    else if (auto50B8485D_val == libAMVS_ge_TrialGroundsEventConstants_Volskaya_Artifact) {
        libCore_gf_SendActorMessageToDoodadsInRegion("Signal Artifact", libAMVS_gv_elevatorRegion, null);
    }
    else if (auto50B8485D_val == libAMVS_ge_TrialGroundsEventConstants_Volskaya_CapturePoint) {
        libCore_gf_SendActorMessageToDoodadsInRegion("Signal CapturePoint", libAMVS_gv_elevatorRegion, null);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_EventStartTimerExpires_Init () {
    libAMVS_gt_EventStartTimerExpires = TriggerCreate("libAMVS_gt_EventStartTimerExpires_Func");
    TriggerAddEventTimer(libAMVS_gt_EventStartTimerExpires, libAMVS_gv_eventStartTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Elevator Timer Expires
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_ElevatorTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libAMVS_gv_trGr_UI.lv_helpTextLabel, PlayerGroupAll(), true);
    libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormAlert", libAMVS_gv_centerPoint, ColorWithAlpha(0,0,0,0), 5.0);
    UnitKill(libAMVS_gv_elevatorPathingBlockerUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_ElevatorTimerExpires_Init () {
    libAMVS_gt_ElevatorTimerExpires = TriggerCreate("libAMVS_gt_ElevatorTimerExpires_Func");
    TriggerAddEventTimer(libAMVS_gt_ElevatorTimerExpires, libAMVS_gv_aRM_TrialGrounds.lv_elevatorTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Event Spawns
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_EventSpawns_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("MX_Volskaya_LVL_20", PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_EventSpawns_Init () {
    libAMVS_gt_EventSpawns = TriggerCreate("libAMVS_gt_EventSpawns_Func");
    TriggerAddEventTimer(libAMVS_gt_EventSpawns, libAMVS_gv_eventSpawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Round Over
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_RoundOver_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_pointIndex;

    // Automatic Variable Declarations
    const int auto1ACC4085_ae = libAMVS_gv_maximumTriggersForEvent_C;
    const int auto1ACC4085_ai = 1;
    const int autoC3B20F34_ae = libGame_gv_teamChaosIndex_C;
    const int autoC3B20F34_ai = 1;
    int autoA371453D_val;
    unitgroup autoCE44E7F3_g;
    int autoCE44E7F3_u;
    unit autoCE44E7F3_var;
    const int auto81219787_ae = libCore_gv_bALMaxTeams;
    const int auto81219787_ai = 1;
    const int autoA9851A2F_ae = 3;
    const int autoA9851A2F_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libIGHS_gf_ClearEveryonesHero();
    if ((libAMVS_gv_noEnd == true)) {
        libAREN_gv_aRM_CurrentRoundIndex = 0;
    }

    if ((libAMVS_gv_currentEvent == libAMVS_ge_TrialGroundsEventConstants_Volskaya_DuelingImmortals) && (libAMVS_gv_duIm.lv_eventResolved == false)) {
        DialogControlSendAnimationEvent(libAMVS_gv_trGr_UI.lv_notificationFrame, PlayerGroupAll(), "MoveDownMinor");
    }

    if ((libAMVS_gv_currentEvent == libAMVS_ge_TrialGroundsEventConstants_Volskaya_CapturePoint) && (libAMVS_gv_notifiactionUp == true)) {
        DialogControlSendAnimationEvent(libAMVS_gv_trGr_UI.lv_notificationFrame, PlayerGroupAll(), "MoveDown");
    }

    UnitKill(libAMVS_gv_mech);
    if ((UnitIsValid(libVLSK_gv_capturePoints[1].lv_minimapIconUnit) == true)) {
        UnitRemove(libVLSK_gv_capturePoints[1].lv_minimapIconUnit);
    }

    if ((UnitIsValid(libAMVS_gv_mapUnit) == true)) {
        UnitRemove(libAMVS_gv_mapUnit);
    }

    lv_i = 0;
    for ( ; ( (auto1ACC4085_ai >= 0 && lv_i <= auto1ACC4085_ae) || (auto1ACC4085_ai < 0 && lv_i >= auto1ACC4085_ae) ) ; lv_i += auto1ACC4085_ai ) {
        TriggerEnable(libAMVS_gv_eventTriggers[libAMVS_gv_currentEvent][lv_i], false);
        TriggerStop(libAMVS_gv_eventTriggers[libAMVS_gv_currentEvent][lv_i]);
    }
    if ((libAMVS_gv_currentEvent == libAMVS_ge_TrialGroundsEventConstants_Volskaya_CapturePoint)) {
        libVLSK_gf_EnableDisableCapturePoint(1, false);
        lv_i = libGame_gv_teamOrderIndex_C;
        for ( ; ( (autoC3B20F34_ai >= 0 && lv_i <= autoC3B20F34_ae) || (autoC3B20F34_ai < 0 && lv_i >= autoC3B20F34_ae) ) ; lv_i += autoC3B20F34_ai ) {
            ActorSend(libVLSS_gv_cPSounds[lv_i].lv_ally_LoopingSound, "Destroy");
            libVLSS_gv_cPSounds[lv_i].lv_ally_LoopingSound = null;
            ActorSend(libVLSS_gv_cPSounds[lv_i].lv_enemy_LoopingSound, "Destroy");
            libVLSS_gv_cPSounds[lv_i].lv_enemy_LoopingSound = null;
        }
    }

    libAMVS_gv_currentEvent = libAMVS_gf_GetNewEvent();
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "AnimSetPausedAll 0");
    DialogControlSetAnimationState(libAMVS_gv_trGr_UI.lv_helpTextLabel, PlayerGroupAll(), "Team", "0");
    DialogControlSetVisible(libAMVS_gv_trGr_UI.lv_helpTextLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(libAMVS_gv_mMBOEPanel.lv_mainPanel, PlayerGroupAll(), false);
    libNtve_gf_StopTimer(libAMVS_gv_revealTimer);
    libNtve_gf_StopTimer(libAMVS_gv_revealWarningTimer);
    libNtve_gf_StopTimer(libAMVS_gv_aRM_TrialGrounds.lv_elevatorTimer);
    libNtve_gf_StopTimer(libAMVS_gv_saZo.lv_shockTimer);
    DialogControlSetVisible(libAMVS_gv_trGr_UI.lv_safeZoneContainerFrame, PlayerGroupAll(), false);
    DialogControlSetVisible(libAMVS_gv_trGr_UI.lv_timerContainer, PlayerGroupAll(), false);
    libNtve_gf_StopTimer(libVLSK_gv_capturePointCooldownTimer);
    libAMVS_gf_TrCoEndCurse();
    autoA371453D_val = libAMVS_gv_currentEvent;
    if (autoA371453D_val == libAMVS_ge_TrialGroundsEventConstants_Volskaya_SafeZone) {
        libIGHS_gf_InitializeShufflePickAllSameHero(StringExternal("Param/Value/lib_AMVS_5C823C35"), true, false, 10, libAMVS_gf_SaZoHero());
    }
    else if (autoA371453D_val == libAMVS_ge_TrialGroundsEventConstants_Volskaya_Artifact) {
        libIGHS_gf_InitializeShufflePickAllSameHero(StringExternal("Param/Value/lib_AMVS_381FE157"), true, false, 10, libAMVS_gf_ArtiHero2());
    }
    else if (autoA371453D_val == libAMVS_ge_TrialGroundsEventConstants_Volskaya_NoEvent) {
        libIGHS_gf_InitializeShufflePickAllSameHero(StringExternal("Param/Value/lib_AMVS_D60AEC1F"), true, false, 10, libAMVS_gf_NoEvHero());
    }
    else {
        libIGHS_gf_InitializeShufflePickUnlocked(StringExternal("Param/Value/lib_AMVS_E3C0A270"), true, false, 10, 100.0, false);
    }
    autoCE44E7F3_g = libAMVS_gv_eventUnitGroup;
    autoCE44E7F3_u = UnitGroupCount(autoCE44E7F3_g, c_unitCountAll);
    for (;; autoCE44E7F3_u -= 1) {
        autoCE44E7F3_var = UnitGroupUnitFromEnd(autoCE44E7F3_g, autoCE44E7F3_u);
        if (autoCE44E7F3_var == null) { break; }
        UnitRemove(autoCE44E7F3_var);
    }
    if ((UnitIsValid(libAMVS_gv_elevatorPathingBlockerUnit) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ElevatorPathingBlocker", 0, libCore_gv_cOMPUTER_Neutral, libAMVS_gv_centerPoint, null);
        libAMVS_gv_elevatorPathingBlockerUnit = UnitLastCreated();
    }

    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal RoundReset");
    lv_i = 1;
    for ( ; ( (auto81219787_ai >= 0 && lv_i <= auto81219787_ae) || (auto81219787_ai < 0 && lv_i >= auto81219787_ae) ) ; lv_i += auto81219787_ai ) {
        DialogControlSetVisible(libAMVS_gv_trGr_UI.lv_teamScore[lv_i], PlayerGroupAll(), false);
        PingDestroy(libAMVS_gv_duIm.lv_ping[lv_i]);
        lv_pointIndex = 1;
        for ( ; ( (autoA9851A2F_ai >= 0 && lv_pointIndex <= autoA9851A2F_ae) || (autoA9851A2F_ai < 0 && lv_pointIndex >= autoA9851A2F_ae) ) ; lv_pointIndex += autoA9851A2F_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "StormGameStartPathingBlocker", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, libAMVS_gv_gameStartPathingBlockerPoints[lv_i][lv_pointIndex], null);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_RoundOver_Init () {
    libAMVS_gt_RoundOver = TriggerCreate("libAMVS_gt_RoundOver_Func");
    libAREN_gf_MapRavenLordTributeWarning2(libAMVS_gt_RoundOver);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Killed
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_HeroKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingteam;
    point lv_deadPosition;
    int lv_deadteam;
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    const int auto314C7DC2_ae = libCore_gv_bALMaxPlayers;
    const int auto314C7DC2_ai = 1;
    unitgroup auto8C4991E0_g;
    int auto8C4991E0_u;

    // Variable Initialization
    lv_killingteam = libGame_gf_TeamNumberOfPlayer(libGame_gf_HeroKilledKillingPlayer());
    lv_deadPosition = UnitGetPosition(libGame_gf_HeroKilledUnit());
    lv_deadteam = libGame_gf_TeamNumberOfPlayer(libGame_gf_HeroKilledPlayer());

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_teamScoreLabel[lv_deadteam], IntToText(libAMVS_gf_HeroesAliveOnTeam(lv_deadteam)), PlayerGroupAll());
    RemoveUnitOfInterest(libGame_gv_players[libGame_gf_HeroKilledPlayer()].lv_heroUnit, "KillHero", libAIAI_gf_ConvertIntegertoGoalTeam(lv_killingteam));
    RemoveUnitOfInterest(libGame_gv_players[libGame_gf_HeroKilledPlayer()].lv_heroUnit, "KillHeroCritical", libAIAI_gf_ConvertIntegertoGoalTeam(lv_killingteam));
    if ((libAMVS_gf_HeroesAliveOnTeam(lv_deadteam) == 0)) {
        libGame_gv_gameOver = true;
        VisRevealArea(libCore_gv_cOMPUTER_TeamOrder, RegionCircle(UnitGetPosition(libGame_gf_HeroKilledUnit()), 10.0), 5.0, false);
        VisRevealArea(libCore_gv_cOMPUTER_TeamChaos, RegionCircle(UnitGetPosition(libGame_gf_HeroKilledUnit()), 10.0), 5.0, false);
        libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "AnimSetPausedAll");
        UnitPauseAll(true);
        lv_player = 1;
        for ( ; ( (auto314C7DC2_ai >= 0 && lv_player <= auto314C7DC2_ae) || (auto314C7DC2_ai < 0 && lv_player >= auto314C7DC2_ae) ) ; lv_player += auto314C7DC2_ai ) {
            auto8C4991E0_g = libGame_gv_players[lv_player].lv_heroUnitGroup;
            auto8C4991E0_u = UnitGroupCount(auto8C4991E0_g, c_unitCountAll);
            for (;; auto8C4991E0_u -= 1) {
                lv_unit = UnitGroupUnitFromEnd(auto8C4991E0_g, auto8C4991E0_u);
                if (lv_unit == null) { break; }
                libNtve_gf_ChangeUnitDamage(lv_unit, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
                libNtve_gf_ChangeUnitDamage(lv_unit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
                UnitBehaviorAdd(lv_unit, "DisableAbilities", lv_unit, 1);
            }
        }
        libAMVS_gf_RoundWinningKillCameraPan(libNtve_gf_KillingUnit(), lv_deadPosition);
        Wait(0.1875, c_timeGame);
        libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "PhysicsTerminate");
        libSond_gf_MuteMostSoundChannelsForGameOverState(true);
        libAREN_gv_aRM_RoundWinningTeam = lv_killingteam;
        libAREN_gf_ARM_RoundOver();
        Wait(2.5, c_timeGame);
        if ((libAREN_gv_aRM_RoundScore[lv_killingteam] < 2)) {
            libAMVS_gf_RoundScoreTransmission(libAREN_gv_aRM_RoundWinningTeam, libAREN_gf_ArenaCurrentRoundIndex());
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_HeroKilled_Init () {
    libAMVS_gt_HeroKilled = TriggerCreate("libAMVS_gt_HeroKilled_Func");
    libGame_gf_HeroKilled(libAMVS_gt_HeroKilled);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Spawn
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_HeroSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroSpawnPlayer;

    // Automatic Variable Declarations
    unitgroup auto3EEF2B0A_g;
    int auto3EEF2B0A_u;
    unit auto3EEF2B0A_var;

    // Variable Initialization
    lv_heroSpawnPlayer = libGame_gf_HeroSpawnPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libGame_gv_players[lv_heroSpawnPlayer].lv_respawnTimer, 0.0, false, c_timeGame);
    TimerSetElapsed(libGame_gv_players[lv_heroSpawnPlayer].lv_respawnTimer, 0.0);
    auto3EEF2B0A_g = libGame_gv_players[lv_heroSpawnPlayer].lv_heroUnitGroup;
    auto3EEF2B0A_u = UnitGroupCount(auto3EEF2B0A_g, c_unitCountAll);
    for (;; auto3EEF2B0A_u -= 1) {
        auto3EEF2B0A_var = UnitGroupUnitFromEnd(auto3EEF2B0A_g, auto3EEF2B0A_u);
        if (auto3EEF2B0A_var == null) { break; }
        if ((libAMVS_gf_UnitIsValidHero(auto3EEF2B0A_var) == true)) {
            UnitSetPropertyFixed(auto3EEF2B0A_var, c_unitPropLife, (UnitGetPropertyFixed(auto3EEF2B0A_var, c_unitPropLife, c_unitPropCurrent) * 1.5));
            UnitSetPropertyFixed(auto3EEF2B0A_var, c_unitPropLifeMax, (UnitGetPropertyFixed(auto3EEF2B0A_var, c_unitPropLifeMax, c_unitPropCurrent) * 1.5));
            UnitBehaviorRemove(auto3EEF2B0A_var, "Mounted", 1);
            UnitAbilityShow(auto3EEF2B0A_var, "Mount", false);
            if ((UnitGetType(auto3EEF2B0A_var) == "HeroMedivh")) {
                UnitBehaviorRemove(auto3EEF2B0A_var, "MedivhTransformRaven", c_unitBehaviorCountAll);
                UnitAbilityEnable(auto3EEF2B0A_var, "MedivhTransformRaven", false);
                UnitAbilityShow(auto3EEF2B0A_var, "MedivhTransformRaven", false);
            }

        }

    }
    libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_teamScoreLabel[libGame_gf_TeamNumberOfPlayer(lv_heroSpawnPlayer)], IntToText(libAMVS_gf_HeroesAliveOnTeam(libGame_gf_TeamNumberOfPlayer(lv_heroSpawnPlayer))), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_HeroSpawn_Init () {
    libAMVS_gt_HeroSpawn = TriggerCreate("libAMVS_gt_HeroSpawn_Func");
    libGame_gf_HeroSpawn(libAMVS_gt_HeroSpawn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Warning Timer Expires
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_RevealWarningTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAMVS_gf_RevealSlideout();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_RevealWarningTimerExpires_Init () {
    libAMVS_gt_RevealWarningTimerExpires = TriggerCreate("libAMVS_gt_RevealWarningTimerExpires_Func");
    TriggerAddEventTimer(libAMVS_gt_RevealWarningTimerExpires, libAMVS_gv_revealWarningTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal All Players Timer Expires
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_RevealAllPlayersTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup auto48C52367_g;
    int auto48C52367_var;
    unitgroup auto9F1A68C7_g;
    int auto9F1A68C7_u;
    unit auto9F1A68C7_var;
    const int auto9D9C3128_ae = libCore_gv_bALMaxPlayers;
    const int auto9D9C3128_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAMVS_gf_IncrementArmorDebuff();
    auto48C52367_g = PlayerGroupAll();
    auto48C52367_var = -1;
    while (true) {
        	auto48C52367_var = PlayerGroupNextPlayer(auto48C52367_g, auto48C52367_var);
        	if (auto48C52367_var<0) { break; }
        	auto9F1A68C7_g = libGame_gv_players[auto48C52367_var].lv_heroUnitGroup;
        auto9F1A68C7_u = UnitGroupCount(auto9F1A68C7_g, c_unitCountAll);
        for (;; auto9F1A68C7_u -= 1) {
            auto9F1A68C7_var = UnitGroupUnitFromEnd(auto9F1A68C7_g, auto9F1A68C7_u);
            if (auto9F1A68C7_var == null) { break; }
            UnitBehaviorAdd(auto9F1A68C7_var, "TrGrReveal", libAMVS_gv_aRM_TrialGrounds.lv_dummyUnitToRunDamageInstancesFrom[libGame_gf_EnemyTeamNumberOfPlayer(auto48C52367_var)], 1);
        }
    }
    lv_i = 1;
    for ( ; ( (auto9D9C3128_ai >= 0 && lv_i <= auto9D9C3128_ae) || (auto9D9C3128_ai < 0 && lv_i >= auto9D9C3128_ae) ) ; lv_i += auto9D9C3128_ai ) {
        AddUnitOfInterest(libGame_gv_players[lv_i].lv_heroUnit, 500.0, 0.0, "KillHeroCritical", libAIAI_gf_ConvertIntegertoGoalTeam(libGame_gf_EnemyTeamNumberOfPlayer(lv_i)), 0);
    }
    libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_notificationLabel, StringExternal("Param/Value/lib_AMVS_28A61635"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libAMVS_gv_trGr_UI.lv_notificationImage, "Assets\\Textures\\storm_ui_hud_trial_grounds_vision.dds", PlayerGroupAll());
    libAMVS_gf_TemporarilyShowDialogItem(libAMVS_gv_trGr_UI.lv_notificationFrame, 3.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_RevealAllPlayersTimerExpires_Init () {
    libAMVS_gt_RevealAllPlayersTimerExpires = TriggerCreate("libAMVS_gt_RevealAllPlayersTimerExpires_Func");
    TriggerAddEventTimer(libAMVS_gt_RevealAllPlayersTimerExpires, libAMVS_gv_revealTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MMBOE UI Mod Initialize
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_MMBOEUIModInitialize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_MMBOEUIModInitialize_Init () {
    libAMVS_gt_MMBOEUIModInitialize = TriggerCreate("libAMVS_gt_MMBOEUIModInitialize_Func");
    libCore_gf_IncludeModInitialization(libAMVS_gt_MMBOEUIModInitialize);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TrCo Init
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_TrCoInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    playergroup autoADCD8822_g;
    int autoADCD8822_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoADCD8822_g = PlayerGroupAll();
    autoADCD8822_var = -1;
    while (true) {
        	autoADCD8822_var = PlayerGroupNextPlayer(autoADCD8822_g, autoADCD8822_var);
        	if (autoADCD8822_var<0) { break; }
        	CatalogFieldValueSetFixed(c_gameCatalogEffect, "CaptureMacGuffin", "PeriodCount", autoADCD8822_var, 32.0);
    }
    TriggerEnable(libAMVS_gt_TrCoEventTimerExpires, true);
    libAMVS_gv_eventTriggers[libAMVS_ge_TrialGroundsEventConstants_Volskaya_Tribute][lv_count] = libAMVS_gt_TrCoEventTimerExpires;
    lv_count += 1;
    TriggerEnable(libAMVS_gt_TrCoTributeObtained, true);
    libAMVS_gv_eventTriggers[libAMVS_ge_TrialGroundsEventConstants_Volskaya_Tribute][lv_count] = libAMVS_gt_TrCoTributeObtained;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_TrCoInit_Init () {
    libAMVS_gt_TrCoInit = TriggerCreate("libAMVS_gt_TrCoInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TrCo Event Timer Expires
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_TrCoEventTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrGrRavenLordTribute", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, libAMVS_gv_centerPoint, null);
    libAMVS_gf_TributeActive();
    AddUnitOfInterest(UnitLastCreated(), 500.0, 0.0, "CollectTribute", libNtve_ge_GoalTeam_Both, 0);
    libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_helpTextLabel, StringExternal("Param/Value/lib_AMVS_5993A899"), PlayerGroupAll());
    UnitGroupAdd(libAMVS_gv_eventUnitGroup, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_TrCoEventTimerExpires_Init () {
    libAMVS_gt_TrCoEventTimerExpires = TriggerCreate("libAMVS_gt_TrCoEventTimerExpires_Func");
    TriggerEnable(libAMVS_gt_TrCoEventTimerExpires, false);
    TriggerAddEventTimer(libAMVS_gt_TrCoEventTimerExpires, libAMVS_gv_eventSpawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TrCo Tribute Obtained
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_TrCoTributeObtained_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    DialogControlSetVisible(libAMVS_gv_trGr_UI.lv_helpTextLabel, PlayerGroupAll(), false);
    libAMVS_gf_TributeClaimed(libGame_gf_TeamNumberOfPlayer(EventPlayer()));
    libAMVS_gf_MMRavenCurseStart(libGame_gf_EnemyTeam(libGame_gf_TeamNumberOfPlayer(EventPlayer())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_TrCoTributeObtained_Init () {
    libAMVS_gt_TrCoTributeObtained = TriggerCreate("libAMVS_gt_TrCoTributeObtained_Func");
    TriggerEnable(libAMVS_gt_TrCoTributeObtained, false);
    TriggerAddEventPlayerEffectUsed(libAMVS_gt_TrCoTributeObtained, c_playerAny, "CaptureMacGuffinCastComplete");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CaPo Init
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_CaPoInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libVLSK_gt_GiantRobotDies, false);
    libVolV_gv_vehicleStartingDuration = 30.0;
    libVLSK_gv_grantStandardCapturePointRewards = true;
    libVLSK_gv_capturePointVictoryTimeGoal_C = 6.0;
    libVLSK_gv_capturePointPlayControllingSounds = false;
    libVLSK_gf_InitializeOverwatchCapturePoint(libAMVS_gv_elevatorRegion, libAMVS_gv_centerPoint, null, null, "ControlPointMinimapIconA", "ControlPointMinimapIconA", "Assets\\Textures\\storm_ui_hud_volskaya_control_a.dds");
    TriggerEnable(libAMVS_gt_CaPoSpawn, true);
    libAMVS_gv_eventTriggers[libAMVS_ge_TrialGroundsEventConstants_Volskaya_CapturePoint][lv_count] = libAMVS_gt_CaPoSpawn;
    lv_count += 1;
    TriggerEnable(libAMVS_gt_CaPoPointCaptured, true);
    libAMVS_gv_eventTriggers[libAMVS_ge_TrialGroundsEventConstants_Volskaya_CapturePoint][lv_count] = libAMVS_gt_CaPoPointCaptured;
    lv_count += 1;
    TriggerEnable(libAMVS_gt_CaPoControlled, true);
    libAMVS_gv_eventTriggers[libAMVS_ge_TrialGroundsEventConstants_Volskaya_CapturePoint][lv_count] = libAMVS_gt_CaPoControlled;
    lv_count += 1;
    TriggerEnable(libAMVS_gt_CaPoMechDies, true);
    libAMVS_gv_eventTriggers[libAMVS_ge_TrialGroundsEventConstants_Volskaya_CapturePoint][lv_count] = libAMVS_gt_CaPoMechDies;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_CaPoInit_Init () {
    libAMVS_gt_CaPoInit = TriggerCreate("libAMVS_gt_CaPoInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CaPo Spawn
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_CaPoSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAMVS_gf_CapturePointActive();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, libVLSK_gv_capturePoints[1].lv_minimapIconUnitType, c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, RegionGetCenter(libVLSK_gv_capturePoints[1].lv_region), null);
    libVLSK_gv_capturePoints[1].lv_minimapIconUnit = UnitLastCreated();
    libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_helpTextLabel, StringExternal("Param/Value/lib_AMVS_90C862C2"), PlayerGroupAll());
    libVLSK_gf_EnableDisableCapturePoint(1, true);
    AddPointOfInterest(RegionGetCenter(libAMVS_gv_elevatorRegion), 200.0, 0.0, "CapturePoint", libNtve_ge_GoalTeam_Both, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_CaPoSpawn_Init () {
    libAMVS_gt_CaPoSpawn = TriggerCreate("libAMVS_gt_CaPoSpawn_Func");
    TriggerEnable(libAMVS_gt_CaPoSpawn, false);
    TriggerAddEventTimer(libAMVS_gt_CaPoSpawn, libAMVS_gv_eventSpawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CaPo Point Captured
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_CaPoPointCaptured_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vehicle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vehicle = UnitGroupUnit(UnitGroup("VolskayaVehicle", c_playerAny, libAMVS_gv_elevatorRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);

    // Actions
    if (!runActions) {
        return true;
    }

    libAMVS_gv_mech = lv_vehicle;
    UnitGroupAdd(libAMVS_gv_eventUnitGroup, lv_vehicle);
    libAMVS_gv_notifiactionUp = true;
    DialogControlSendAnimationEvent(libAMVS_gv_trGr_UI.lv_notificationFrame, PlayerGroupAll(), "MoveUp");
    libGame_gf_UpdateScalingForUnit(lv_vehicle, (2 * libGame_gf_PlayersAliveOnTeam(libGame_gf_EnemyTeam(libVLSK_gf_VolskayaPointCompletedWinningTeam()))), 0);
    DialogControlSetVisible(libAMVS_gv_trGr_UI.lv_helpTextLabel, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_CaPoPointCaptured_Init () {
    libAMVS_gt_CaPoPointCaptured = TriggerCreate("libAMVS_gt_CaPoPointCaptured_Func");
    TriggerEnable(libAMVS_gt_CaPoPointCaptured, false);
    libVLSK_gf_VolskayaPointCompleted(libAMVS_gt_CaPoPointCaptured);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CaPo Controlled
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_CaPoControlled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAMVS_gf_TrGrPlayControllingSoundsForTeams(libVLSK_gf_VolskayaPointOwnershipChangedNewOwner());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_CaPoControlled_Init () {
    libAMVS_gt_CaPoControlled = TriggerCreate("libAMVS_gt_CaPoControlled_Func");
    TriggerEnable(libAMVS_gt_CaPoControlled, false);
    libVLSK_gf_VolskayaPointOwnershipChanged(libAMVS_gt_CaPoControlled);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CaPo Mech Dies
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_CaPoMechDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libAMVS_gv_notifiactionUp == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAMVS_gv_notifiactionUp = false;
    DialogControlSendAnimationEvent(libAMVS_gv_trGr_UI.lv_notificationFrame, PlayerGroupAll(), "MoveDown");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_CaPoMechDies_Init () {
    libAMVS_gt_CaPoMechDies = TriggerCreate("libAMVS_gt_CaPoMechDies_Func");
    TriggerEnable(libAMVS_gt_CaPoMechDies, false);
    TriggerAddEventUnitDied(libAMVS_gt_CaPoMechDies, UnitRefFromVariable("libAMVS_gv_mech"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Arti Init
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_ArtiInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libAMVS_gt_ArtiSpawn, true);
    libAMVS_gv_eventTriggers[libAMVS_ge_TrialGroundsEventConstants_Volskaya_Artifact][lv_count] = libAMVS_gt_ArtiSpawn;
    lv_count += 1;
    TriggerEnable(libAMVS_gt_ArtiPickedUp, true);
    libAMVS_gv_eventTriggers[libAMVS_ge_TrialGroundsEventConstants_Volskaya_Artifact][lv_count] = libAMVS_gt_ArtiPickedUp;
    lv_count += 1;
    TriggerEnable(libAMVS_gt_ArtiHolderDies, true);
    libAMVS_gv_eventTriggers[libAMVS_ge_TrialGroundsEventConstants_Volskaya_Artifact][lv_count] = libAMVS_gt_ArtiHolderDies;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_ArtiInit_Init () {
    libAMVS_gt_ArtiInit = TriggerCreate("libAMVS_gt_ArtiInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Arti Spawn
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_ArtiSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Artifact", 0, libCore_gv_cOMPUTER_Neutral, libAMVS_gv_centerPoint, null);
    UnitGroupAdd(libAMVS_gv_eventUnitGroup, UnitLastCreated());
    libAMVS_gf_ArtifactAvailable();
    AddUnitOfInterest(UnitLastCreated(), 500.0, 0.0, "VisionBeacon", libNtve_ge_GoalTeam_Both, 0);
    libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_helpTextLabel, StringExternal("Param/Value/lib_AMVS_6F1D3147"), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_ArtiSpawn_Init () {
    libAMVS_gt_ArtiSpawn = TriggerCreate("libAMVS_gt_ArtiSpawn_Func");
    TriggerEnable(libAMVS_gt_ArtiSpawn, false);
    TriggerAddEventTimer(libAMVS_gt_ArtiSpawn, libAMVS_gv_eventSpawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Arti Picked Up
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_ArtiPickedUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libAMVS_gv_arti.lv_holder = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    libAMVS_gv_arti.lv_player = UnitGetOwner(libAMVS_gv_arti.lv_holder);
    libAMVS_gv_arti.lv_team = libGame_gf_TeamNumberOfPlayer(libAMVS_gv_arti.lv_player);
    libAMVS_gf_ArtifactAcquired(libAMVS_gv_arti.lv_team);
    UnitBehaviorAdd(libAMVS_gv_arti.lv_holder, "TrGrReveal", libAMVS_gv_aRM_TrialGrounds.lv_dummyUnitToRunDamageInstancesFrom[libGame_gf_EnemyTeam(libAMVS_gv_arti.lv_team)], 1);
    AddUnitOfInterest(libAMVS_gv_arti.lv_holder, 500.0, 0.0, "KillHeroCritical", libAIAI_gf_ConvertIntegertoGoalTeam(libGame_gf_EnemyTeam(libAMVS_gv_arti.lv_team)), 0);
    libAMVS_gf_ArtiCDR(libAMVS_gv_arti.lv_holder);
    UnitRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UnitBehaviorAdd(libAMVS_gv_arti.lv_holder, "HasArtifact", libAMVS_gv_arti.lv_holder, 1);
    DialogControlSetAnimationState(libAMVS_gv_trGr_UI.lv_helpTextLabel, PlayerGroupAll(), "Team", IntToString(libAMVS_gv_arti.lv_team));
    TextExpressionSetToken("Param/Expression/lib_AMVS_C1D8C782", "A", PlayerName(libAMVS_gv_arti.lv_player));
    libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_helpTextLabel, TextExpressionAssemble("Param/Expression/lib_AMVS_C1D8C782"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_helpTextLabel, StringExternal("Param/Value/lib_AMVS_941A3936"), PlayerGroupSingle(libAMVS_gv_arti.lv_player));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_ArtiPickedUp_Init () {
    libAMVS_gt_ArtiPickedUp = TriggerCreate("libAMVS_gt_ArtiPickedUp_Func");
    TriggerEnable(libAMVS_gt_ArtiPickedUp, false);
    TriggerAddEventPlayerEffectUsed(libAMVS_gt_ArtiPickedUp, c_playerAny, "OddballImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Arti Holder Dies
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_ArtiHolderDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingPlayer;

    // Automatic Variable Declarations
    playergroup auto822C185A_g;
    int auto822C185A_var;

    // Variable Initialization
    lv_killingPlayer = libNtve_gf_KillingPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libAMVS_gv_arti.lv_holder = null;
    libAMVS_gv_arti.lv_team = libGame_gf_TeamNumberOfPlayer(lv_killingPlayer);
    if ((UnitIsAlive(libGame_gv_players[lv_killingPlayer].lv_heroUnit) == false)) {
        auto822C185A_g = libGame_gf_PlayersOnTeamHeroes(libAMVS_gv_arti.lv_team, false);
        auto822C185A_var = -1;
        while (true) {
            	auto822C185A_var = PlayerGroupNextPlayer(auto822C185A_g, auto822C185A_var);
            	if (auto822C185A_var<0) { break; }
            	if ((UnitIsAlive(libGame_gv_players[auto822C185A_var].lv_heroUnit) == true)) {
                lv_killingPlayer = auto822C185A_var;
                break;
            }

        }
    }

    UnitBehaviorAdd(libGame_gv_players[lv_killingPlayer].lv_heroUnit, "HasArtifact", libGame_gv_players[lv_killingPlayer].lv_heroUnit, 1);
    libAMVS_gv_arti.lv_holder = libGame_gv_players[lv_killingPlayer].lv_heroUnit;
    libAMVS_gv_arti.lv_player = lv_killingPlayer;
    libAMVS_gf_ArtifactHolderSlain(libAMVS_gv_arti.lv_team);
    UnitBehaviorAdd(libAMVS_gv_arti.lv_holder, "TrGrReveal", libAMVS_gv_aRM_TrialGrounds.lv_dummyUnitToRunDamageInstancesFrom[libGame_gf_EnemyTeam(libAMVS_gv_arti.lv_team)], 1);
    AddUnitOfInterest(libAMVS_gv_arti.lv_holder, 500.0, 0.0, "KillHeroCritical", libAIAI_gf_ConvertIntegertoGoalTeam(libGame_gf_EnemyTeam(libAMVS_gv_arti.lv_team)), 0);
    DialogControlSetAnimationState(libAMVS_gv_trGr_UI.lv_helpTextLabel, PlayerGroupAll(), "Team", IntToString(libAMVS_gv_arti.lv_team));
    TextExpressionSetToken("Param/Expression/lib_AMVS_ADCF2D30", "A", PlayerName(libAMVS_gv_arti.lv_player));
    libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_helpTextLabel, TextExpressionAssemble("Param/Expression/lib_AMVS_ADCF2D30"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_helpTextLabel, StringExternal("Param/Value/lib_AMVS_C8958FE8"), PlayerGroupSingle(libAMVS_gv_arti.lv_player));
    libAMVS_gf_ArtiCDR(libAMVS_gv_arti.lv_holder);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_ArtiHolderDies_Init () {
    libAMVS_gt_ArtiHolderDies = TriggerCreate("libAMVS_gt_ArtiHolderDies_Func");
    TriggerEnable(libAMVS_gt_ArtiHolderDies, false);
    TriggerAddEventUnitDied(libAMVS_gt_ArtiHolderDies, UnitRefFromVariable("libAMVS_gv_arti.lv_holder"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: NoEv Init
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_NoEvInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_helpTextLabel, StringExternal("Param/Value/lib_AMVS_776864DB"), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_NoEvInit_Init () {
    libAMVS_gt_NoEvInit = TriggerCreate("libAMVS_gt_NoEvInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DuIm Init
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_DuImInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libAMVS_gt_DuImSpawnImmortals, true);
    libAMVS_gv_eventTriggers[libAMVS_ge_TrialGroundsEventConstants_Volskaya_DuelingImmortals][lv_count] = libAMVS_gt_DuImSpawnImmortals;
    lv_count += 1;
    TriggerEnable(libAMVS_gt_DuImImmortalDies, true);
    libAMVS_gv_eventTriggers[libAMVS_ge_TrialGroundsEventConstants_Volskaya_DuelingImmortals][lv_count] = libAMVS_gt_DuImImmortalDies;
    lv_count += 1;
    libAMVS_gv_duIm.lv_spawnPoint[libGame_gv_teamOrderIndex_C] = PointWithOffset(libAMVS_gv_centerPoint, -5.0, 0.0);
    libAMVS_gv_duIm.lv_spawnPoint[libGame_gv_teamChaosIndex_C] = PointWithOffset(libAMVS_gv_centerPoint, 5.0, 0.0);
    libAMVS_gf_MMBOEUIInit(libUIUI_gv_mapMechanicsPanel.lv_mainPanel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_DuImInit_Init () {
    libAMVS_gt_DuImInit = TriggerCreate("libAMVS_gt_DuImInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DuIm Spawn Immortals
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_DuImSpawnImmortals_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;

    // Automatic Variable Declarations
    const int autoC9043040_ae = libCore_gv_bALMaxTeams;
    const int autoC9043040_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libAMVS_gv_mMBOEPanel.lv_mainPanel, PlayerGroupAll(), true);
    DialogControlSendAnimationEvent(libAMVS_gv_trGr_UI.lv_notificationFrame, PlayerGroupAll(), "MoveUpMinor");
    libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_helpTextLabel, StringExternal("Param/Value/lib_AMVS_6F4CEC88"), PlayerGroupAll());
    libAMVS_gf_ImmortalsActive();
    lv_team = 1;
    for ( ; ( (autoC9043040_ai >= 0 && lv_team <= autoC9043040_ae) || (autoC9043040_ai < 0 && lv_team >= autoC9043040_ae) ) ; lv_team += autoC9043040_ai ) {
        libAMVS_gf_DuImSpawnImmortalsForTeam(lv_team);
    }
    libAMVS_gf_MMBOEUISetBosses(libAMVS_gv_duIm.lv_unit[libGame_gv_teamOrderIndex_C], libAMVS_gv_duIm.lv_unit[libGame_gv_teamChaosIndex_C]);
    UnitIssueOrder(libAMVS_gv_duIm.lv_unit[libGame_gv_teamOrderIndex_C], OrderTargetingUnit(AbilityCommand("attack", 0), libAMVS_gv_duIm.lv_unit[libGame_gv_teamChaosIndex_C]), c_orderQueueReplace);
    UnitIssueOrder(libAMVS_gv_duIm.lv_unit[libGame_gv_teamChaosIndex_C], OrderTargetingUnit(AbilityCommand("attack", 0), libAMVS_gv_duIm.lv_unit[libGame_gv_teamOrderIndex_C]), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_DuImSpawnImmortals_Init () {
    libAMVS_gt_DuImSpawnImmortals = TriggerCreate("libAMVS_gt_DuImSpawnImmortals_Func");
    TriggerEnable(libAMVS_gt_DuImSpawnImmortals, false);
    TriggerAddEventTimer(libAMVS_gt_DuImSpawnImmortals, libAMVS_gv_eventSpawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DuIm Immortal Dies
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_DuImImmortalDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto379031FC_ae = libCore_gv_bALMaxTeams;
    const int auto379031FC_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto379031FC_ai >= 0 && lv_i <= auto379031FC_ae) || (auto379031FC_ai < 0 && lv_i >= auto379031FC_ae) ) ; lv_i += auto379031FC_ai ) {
        PingDestroy(libAMVS_gv_duIm.lv_ping[lv_i]);
    }
    DialogControlSetVisible(libAMVS_gv_trGr_UI.lv_helpTextLabel, PlayerGroupAll(), false);
    libAMVS_gf_DuImApplyImmortalsWrathToMembersOnTeam(libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit())));
    libAMVS_gf_ImmortalSlain(libGame_gf_EnemyTeamNumberOfPlayer(UnitGetOwner(EventUnit())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_DuImImmortalDies_Init () {
    libAMVS_gt_DuImImmortalDies = TriggerCreate("libAMVS_gt_DuImImmortalDies_Func");
    TriggerEnable(libAMVS_gt_DuImImmortalDies, false);
    TriggerAddEventUnitDied(libAMVS_gt_DuImImmortalDies, UnitRefFromVariable("libAMVS_gv_duIm.lv_unit[libGame_gv_teamOrderIndex_C]"));
    TriggerAddEventUnitDied(libAMVS_gt_DuImImmortalDies, UnitRefFromVariable("libAMVS_gv_duIm.lv_unit[libGame_gv_teamChaosIndex_C]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: SaZo Init
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_SaZoInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libAMVS_gt_SaZoEventSpawnTimerExpires, true);
    libAMVS_gv_eventTriggers[libAMVS_ge_TrialGroundsEventConstants_Volskaya_SafeZone][lv_count] = libAMVS_gt_SaZoEventSpawnTimerExpires;
    lv_count += 1;
    TriggerEnable(libAMVS_gt_SaZoShockTimerExpires, true);
    libAMVS_gv_eventTriggers[libAMVS_ge_TrialGroundsEventConstants_Volskaya_SafeZone][lv_count] = libAMVS_gt_SaZoShockTimerExpires;
    lv_count += 1;
    TriggerEnable(libAMVS_gt_SaZoUnitEntersSafeZone, true);
    libAMVS_gv_eventTriggers[libAMVS_ge_TrialGroundsEventConstants_Volskaya_SafeZone][lv_count] = libAMVS_gt_SaZoUnitEntersSafeZone;
    lv_count += 1;
    TriggerEnable(libAMVS_gt_SaZoUnitLeavesSafeZone, true);
    libAMVS_gv_eventTriggers[libAMVS_ge_TrialGroundsEventConstants_Volskaya_SafeZone][lv_count] = libAMVS_gt_SaZoUnitLeavesSafeZone;
    libAMVS_gv_saZo.lv_currentDamage = libAMVS_gv_saZoStartingDamage_C;
    CatalogFieldValueSet(c_gameCatalogEffect, "SafeZoneDamage", "Amount", libCore_gv_cOMPUTER_TeamOrder, FixedToString(libAMVS_gv_saZo.lv_currentDamage, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "SafeZoneDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libAMVS_gv_saZo.lv_currentDamage, c_fixedPrecisionAny));
    libIGHS_gf_InitializeShufflePickUnlocked(StringExternal("Param/Value/lib_AMVS_0EB9B9A4"), true, false, 10, 100.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_SaZoInit_Init () {
    libAMVS_gt_SaZoInit = TriggerCreate("libAMVS_gt_SaZoInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SaZo Event Spawn Timer Expires
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_SaZoEventSpawnTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto5D4E00C2_g;
    int auto5D4E00C2_var;
    unitgroup auto82FCB8FF_g;
    int auto82FCB8FF_u;
    unit auto82FCB8FF_var;

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerAddEventUnitRegion(libAMVS_gt_SaZoUnitLeavesSafeZone, null, libAMVS_gv_elevatorRegion, false);
    TriggerAddEventUnitRegion(libAMVS_gt_SaZoUnitEntersSafeZone, null, libAMVS_gv_elevatorRegion, true);
    libAMVS_gf_SafeZoneEvent();
    libNtve_gf_SendActorMessageToGameRegion(libAMVS_gv_elevatorRegion, "Signal SafeZone");
    DialogControlSendAnimationEvent(libAMVS_gv_trGr_UI.lv_safeZoneContainerFrame, PlayerGroupAll(), "SafeZoneStart");
    DialogControlSetVisible(libAMVS_gv_trGr_UI.lv_safeZoneContainerFrame, PlayerGroupAll(), true);
    DialogControlSetVisible(libAMVS_gv_trGr_UI.lv_timerContainer, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(libAMVS_gv_trGr_UI.lv_helpTextLabel, StringToText(""), PlayerGroupAll());
    TimerStart(libAMVS_gv_saZo.lv_shockTimer, libAMVS_gv_saZoDuration_C, true, c_timeGame);
    libAMVS_gf_UITimerUpdate(libAMVS_gv_saZo.lv_shockTimer);
    libAMVS_gf_SaZoTimerCountdownMonitor(libAMVS_gv_saZo.lv_shockTimer);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SafeZoneMapUnit", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, RegionGetCenter(libAMVS_gv_elevatorRegion), null);
    libAMVS_gv_mapUnit = UnitLastCreated();
    auto5D4E00C2_g = PlayerGroupAll();
    auto5D4E00C2_var = -1;
    while (true) {
        	auto5D4E00C2_var = PlayerGroupNextPlayer(auto5D4E00C2_g, auto5D4E00C2_var);
        	if (auto5D4E00C2_var<0) { break; }
        	auto82FCB8FF_g = libGame_gv_players[auto5D4E00C2_var].lv_heroUnitGroup;
        auto82FCB8FF_u = UnitGroupCount(auto82FCB8FF_g, c_unitCountAll);
        for (;; auto82FCB8FF_u -= 1) {
            auto82FCB8FF_var = UnitGroupUnitFromEnd(auto82FCB8FF_g, auto82FCB8FF_u);
            if (auto82FCB8FF_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(auto82FCB8FF_var, libAMVS_gv_elevatorRegion) == false) && (libAMVS_gf_UnitIsValidHero(auto82FCB8FF_var) == true)) {
                PlayerGroupAdd(libAMVS_gv_saZo.lv_unsafePlayerGroup, UnitGetOwner(auto82FCB8FF_var));
                UnitBehaviorAdd(auto82FCB8FF_var, "Unsafe", auto82FCB8FF_var, 1);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_SaZoEventSpawnTimerExpires_Init () {
    libAMVS_gt_SaZoEventSpawnTimerExpires = TriggerCreate("libAMVS_gt_SaZoEventSpawnTimerExpires_Func");
    TriggerEnable(libAMVS_gt_SaZoEventSpawnTimerExpires, false);
    TriggerAddEventTimer(libAMVS_gt_SaZoEventSpawnTimerExpires, libAMVS_gv_eventSpawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SaZo Shock Timer Expires
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_SaZoShockTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_randPoint;

    // Automatic Variable Declarations
    playergroup autoC3557975_g;
    int autoC3557975_var;
    unitgroup auto18E6C008_g;
    int auto18E6C008_u;
    unit auto18E6C008_var;
    unitgroup auto29488539_g;
    int auto29488539_u;
    unit auto29488539_var;
    const int autoC0886C2A_n = 30;
    int autoC0886C2A_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSendAnimationEvent(libAMVS_gv_trGr_UI.lv_safeZoneContainerFrame, PlayerGroupAll(), "Shock");
    DialogControlSendAnimationEvent(libAMVS_gv_trGr_UI.lv_timerContainer, PlayerGroupAll(), "Shock");
    autoC3557975_g = PlayerGroupAll();
    autoC3557975_var = -1;
    while (true) {
        	autoC3557975_var = PlayerGroupNextPlayer(autoC3557975_g, autoC3557975_var);
        	if (autoC3557975_var<0) { break; }
        	auto18E6C008_g = libGame_gv_players[autoC3557975_var].lv_heroUnitGroup;
        auto18E6C008_u = UnitGroupCount(auto18E6C008_g, c_unitCountAll);
        for (;; auto18E6C008_u -= 1) {
            auto18E6C008_var = UnitGroupUnitFromEnd(auto18E6C008_g, auto18E6C008_u);
            if (auto18E6C008_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(auto18E6C008_var, libAMVS_gv_elevatorRegion) == false) && (libAMVS_gf_UnitIsValidHero(auto18E6C008_var) == true)) {
                UnitCreateEffectUnit(libAMVS_gv_aRM_TrialGrounds.lv_dummyUnitToRunDamageInstancesFrom[libGame_gf_EnemyTeamNumberOfPlayer(UnitGetOwner(auto18E6C008_var))], "SafeZoneDamage", auto18E6C008_var);
            }

        }
        auto29488539_g = libGame_gv_players[autoC3557975_var].lv_summonedUnitGroup;
        auto29488539_u = UnitGroupCount(auto29488539_g, c_unitCountAll);
        for (;; auto29488539_u -= 1) {
            auto29488539_var = UnitGroupUnitFromEnd(auto29488539_g, auto29488539_u);
            if (auto29488539_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(auto29488539_var, libAMVS_gv_elevatorRegion) == false)) {
                UnitCreateEffectUnit(libAMVS_gv_aRM_TrialGrounds.lv_dummyUnitToRunDamageInstancesFrom[libGame_gf_EnemyTeamNumberOfPlayer(UnitGetOwner(auto29488539_var))], "SafeZoneDamage", auto29488539_var);
            }

        }
    }
    for (autoC0886C2A_i = 1; autoC0886C2A_i <= autoC0886C2A_n; autoC0886C2A_i += 1) {
        lv_randPoint = RegionRandomPoint(RegionEntireMap());
        while (((RegionContainsPoint(libAMVS_gv_elevatorRegion, lv_randPoint) == true) || (PointPathingPassable(lv_randPoint) == false))) {
            lv_randPoint = RegionRandomPoint(RegionEntireMap());
        }
        UnitCreateEffectPoint(libAMVS_gv_aRM_TrialGrounds.lv_dummyUnitToRunDamageInstancesFrom[0], "SafeZoneShockDummy", lv_randPoint);
    }
    libAMVS_gv_saZo.lv_currentDamage += 500.0;
    CatalogFieldValueSet(c_gameCatalogEffect, "SafeZoneDamage", "Amount", libCore_gv_cOMPUTER_TeamOrder, FixedToString(libAMVS_gv_saZo.lv_currentDamage, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "SafeZoneDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libAMVS_gv_saZo.lv_currentDamage, c_fixedPrecisionAny));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_SaZoShockTimerExpires_Init () {
    libAMVS_gt_SaZoShockTimerExpires = TriggerCreate("libAMVS_gt_SaZoShockTimerExpires_Func");
    TriggerEnable(libAMVS_gt_SaZoShockTimerExpires, false);
    TriggerAddEventTimer(libAMVS_gt_SaZoShockTimerExpires, libAMVS_gv_saZo.lv_shockTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SaZo Unit Leaves Safe Zone
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_SaZoUnitLeavesSafeZone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libAMVS_gf_UnitIsValidHero(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupRemove(libAMVS_gv_saZo.lv_safePlayerGroup, EventPlayer());
    PlayerGroupAdd(libAMVS_gv_saZo.lv_unsafePlayerGroup, EventPlayer());
    UnitBehaviorAdd(EventUnit(), "Unsafe", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_SaZoUnitLeavesSafeZone_Init () {
    libAMVS_gt_SaZoUnitLeavesSafeZone = TriggerCreate("libAMVS_gt_SaZoUnitLeavesSafeZone_Func");
    TriggerEnable(libAMVS_gt_SaZoUnitLeavesSafeZone, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SaZo Unit Enters Safe Zone
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_SaZoUnitEntersSafeZone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libAMVS_gf_UnitIsValidHero(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupRemove(libAMVS_gv_saZo.lv_unsafePlayerGroup, EventPlayer());
    PlayerGroupAdd(libAMVS_gv_saZo.lv_safePlayerGroup, EventPlayer());
    UnitBehaviorRemove(EventUnit(), "Unsafe", c_unitBehaviorCountAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_SaZoUnitEntersSafeZone_Init () {
    libAMVS_gt_SaZoUnitEntersSafeZone = TriggerCreate("libAMVS_gt_SaZoUnitEntersSafeZone_Func");
    TriggerEnable(libAMVS_gt_SaZoUnitEntersSafeZone, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_End Round
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_Debug_EndRound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAREN_gv_aRM_RoundWinningTeam = libGame_gf_TeamNumberOfPlayer(EventPlayer());
    libAREN_gf_ARM_RoundOver();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_Debug_EndRound_Init () {
    libAMVS_gt_Debug_EndRound = TriggerCreate("libAMVS_gt_Debug_EndRound_Func");
    TriggerAddEventChatMessage(libAMVS_gt_Debug_EndRound, c_playerAny, "-end", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_End Round 2
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_Debug_EndRound2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAMVS_gf_ElevatorSlideout();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_Debug_EndRound2_Init () {
    libAMVS_gt_Debug_EndRound2 = TriggerCreate("libAMVS_gt_Debug_EndRound2_Func");
    TriggerAddEventChatMessage(libAMVS_gt_Debug_EndRound2, c_playerAny, "slideout", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: debug_tribute
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_debug_tribute_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAMVS_gv_currentEvent = libAMVS_ge_TrialGroundsEventConstants_Volskaya_Tribute;
    libAMVS_gv_overrideEvent = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_debug_tribute_Init () {
    libAMVS_gt_debug_tribute = TriggerCreate("libAMVS_gt_debug_tribute_Func");
    TriggerAddEventChatMessage(libAMVS_gt_debug_tribute, c_playerAny, "-tribute", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: debug_capturepoint
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_debug_capturepoint_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAMVS_gv_currentEvent = libAMVS_ge_TrialGroundsEventConstants_Volskaya_CapturePoint;
    libAMVS_gv_overrideEvent = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_debug_capturepoint_Init () {
    libAMVS_gt_debug_capturepoint = TriggerCreate("libAMVS_gt_debug_capturepoint_Func");
    TriggerAddEventChatMessage(libAMVS_gt_debug_capturepoint, c_playerAny, "-capturepoint", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: debug_artifact
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_debug_artifact_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAMVS_gv_currentEvent = libAMVS_ge_TrialGroundsEventConstants_Volskaya_Artifact;
    libAMVS_gv_overrideEvent = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_debug_artifact_Init () {
    libAMVS_gt_debug_artifact = TriggerCreate("libAMVS_gt_debug_artifact_Func");
    TriggerAddEventChatMessage(libAMVS_gt_debug_artifact, c_playerAny, "-artifact", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: debug_noevent
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_debug_noevent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAMVS_gv_currentEvent = libAMVS_ge_TrialGroundsEventConstants_Volskaya_NoEvent;
    libAMVS_gv_overrideEvent = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_debug_noevent_Init () {
    libAMVS_gt_debug_noevent = TriggerCreate("libAMVS_gt_debug_noevent_Func");
    TriggerAddEventChatMessage(libAMVS_gt_debug_noevent, c_playerAny, "-noevent", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: debug_duelingimmortals
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_debug_duelingimmortals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAMVS_gv_currentEvent = libAMVS_ge_TrialGroundsEventConstants_Volskaya_DuelingImmortals;
    libAMVS_gv_overrideEvent = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_debug_duelingimmortals_Init () {
    libAMVS_gt_debug_duelingimmortals = TriggerCreate("libAMVS_gt_debug_duelingimmortals_Func");
    TriggerAddEventChatMessage(libAMVS_gt_debug_duelingimmortals, c_playerAny, "-duelingimmortals", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: debug_safezone
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_debug_safezone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAMVS_gv_currentEvent = libAMVS_ge_TrialGroundsEventConstants_Volskaya_SafeZone;
    libAMVS_gv_overrideEvent = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_debug_safezone_Init () {
    libAMVS_gt_debug_safezone = TriggerCreate("libAMVS_gt_debug_safezone_Func");
    TriggerAddEventChatMessage(libAMVS_gt_debug_safezone, c_playerAny, "-safezone", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: debug_noend
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_debug_noend_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAMVS_gv_noEnd = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_debug_noend_Init () {
    libAMVS_gt_debug_noend = TriggerCreate("libAMVS_gt_debug_noend_Func");
    TriggerAddEventChatMessage(libAMVS_gt_debug_noend, c_playerAny, "-noend", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: debug_help
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_debug_help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_AMVS_178D501E"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_debug_help_Init () {
    libAMVS_gt_debug_help = TriggerCreate("libAMVS_gt_debug_help_Func");
    TriggerAddEventChatMessage(libAMVS_gt_debug_help, c_playerAny, "!help", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: debug_test
//--------------------------------------------------------------------------------------------------
bool libAMVS_gt_debug_test_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_test;
    fixed lv_testamount;
    int[libAMVS_gv_maximumEvents_C + 1] lv_count;

    // Automatic Variable Declarations
    fixed autoD09D6217_n;
    int autoD09D6217_i;

    // Variable Initialization
    lv_testamount = 500000.0;

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_AMVS_0B47F86B"), true);
    autoD09D6217_n = lv_testamount;
    for (autoD09D6217_i = 1; autoD09D6217_i <= autoD09D6217_n; autoD09D6217_i += 1) {
        libAMVS_gf_InitializeEventShuffler();
        lv_test = libAMVS_gf_GetNewEvent();
        lv_count[lv_test] += 1;
    }
    TextExpressionSetToken("Param/Expression/lib_AMVS_18FECAA0", "A", FixedToText((lv_count[1] / lv_testamount), c_fixedPrecisionAny));
    TextExpressionSetToken("Param/Expression/lib_AMVS_18FECAA0", "B", FixedToText((lv_count[2] / lv_testamount), c_fixedPrecisionAny));
    TextExpressionSetToken("Param/Expression/lib_AMVS_18FECAA0", "C", FixedToText((lv_count[3] / lv_testamount), c_fixedPrecisionAny));
    TextExpressionSetToken("Param/Expression/lib_AMVS_18FECAA0", "D", FixedToText((lv_count[4] / lv_testamount), c_fixedPrecisionAny));
    TextExpressionSetToken("Param/Expression/lib_AMVS_18FECAA0", "E", FixedToText((lv_count[5] / lv_testamount), c_fixedPrecisionAny));
    TextExpressionSetToken("Param/Expression/lib_AMVS_18FECAA0", "F", FixedToText((lv_count[6] / lv_testamount), c_fixedPrecisionAny));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_AMVS_18FECAA0"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMVS_gt_debug_test_Init () {
    libAMVS_gt_debug_test = TriggerCreate("libAMVS_gt_debug_test_Func");
    TriggerAddEventChatMessage(libAMVS_gt_debug_test, c_playerAny, "eventprobability", true);
}

void libAMVS_InitTriggers () {
    libAMVS_gt_ShufflePickUIShownEvent_Init();
    libAMVS_gt_LevelStart_Init();
    libAMVS_gt_MapInitialization_Init();
    libAMVS_gt_IncludeModInitialization_Init();
    libAMVS_gt_GameOpenTimerStarted_Init();
    libAMVS_gt_OpenTheGatesTimerExpires_Init();
    libAMVS_gt_EventStartTimerExpires_Init();
    libAMVS_gt_ElevatorTimerExpires_Init();
    libAMVS_gt_EventSpawns_Init();
    libAMVS_gt_RoundOver_Init();
    libAMVS_gt_HeroKilled_Init();
    libAMVS_gt_HeroSpawn_Init();
    libAMVS_gt_RevealWarningTimerExpires_Init();
    libAMVS_gt_RevealAllPlayersTimerExpires_Init();
    libAMVS_gt_MMBOEUIModInitialize_Init();
    libAMVS_gt_TrCoInit_Init();
    libAMVS_gt_TrCoEventTimerExpires_Init();
    libAMVS_gt_TrCoTributeObtained_Init();
    libAMVS_gt_CaPoInit_Init();
    libAMVS_gt_CaPoSpawn_Init();
    libAMVS_gt_CaPoPointCaptured_Init();
    libAMVS_gt_CaPoControlled_Init();
    libAMVS_gt_CaPoMechDies_Init();
    libAMVS_gt_ArtiInit_Init();
    libAMVS_gt_ArtiSpawn_Init();
    libAMVS_gt_ArtiPickedUp_Init();
    libAMVS_gt_ArtiHolderDies_Init();
    libAMVS_gt_NoEvInit_Init();
    libAMVS_gt_DuImInit_Init();
    libAMVS_gt_DuImSpawnImmortals_Init();
    libAMVS_gt_DuImImmortalDies_Init();
    libAMVS_gt_SaZoInit_Init();
    libAMVS_gt_SaZoEventSpawnTimerExpires_Init();
    libAMVS_gt_SaZoShockTimerExpires_Init();
    libAMVS_gt_SaZoUnitLeavesSafeZone_Init();
    libAMVS_gt_SaZoUnitEntersSafeZone_Init();
    libAMVS_gt_Debug_EndRound_Init();
    libAMVS_gt_Debug_EndRound2_Init();
    libAMVS_gt_debug_tribute_Init();
    libAMVS_gt_debug_capturepoint_Init();
    libAMVS_gt_debug_artifact_Init();
    libAMVS_gt_debug_noevent_Init();
    libAMVS_gt_debug_duelingimmortals_Init();
    libAMVS_gt_debug_safezone_Init();
    libAMVS_gt_debug_noend_Init();
    libAMVS_gt_debug_help_Init();
    libAMVS_gt_debug_test_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libAMVS_InitLib_completed = false;

void libAMVS_InitLib () {
    if (libAMVS_InitLib_completed) {
        return;
    }

    libAMVS_InitLib_completed = true;

    libAMVS_InitLibraries();
    libAMVS_InitVariables();
    libAMVS_InitTriggers();
}

