include "TriggerLibs/HeroesLib"
include "LibAREN"

//--------------------------------------------------------------------------------------------------
// Library: ARM_Volskaya
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libAMVS_ge_TrialGroundsEventConstants_None = 0;
const int libAMVS_ge_TrialGroundsEventConstants_Volskaya_NoEvent = 1;
const int libAMVS_ge_TrialGroundsEventConstants_Volskaya_Tribute = 2;
const int libAMVS_ge_TrialGroundsEventConstants_Volskaya_CapturePoint = 3;
const int libAMVS_ge_TrialGroundsEventConstants_Volskaya_Artifact = 4;
const int libAMVS_ge_TrialGroundsEventConstants_Volskaya_DuelingImmortals = 5;
const int libAMVS_ge_TrialGroundsEventConstants_Volskaya_SafeZone = 6;
const int libAMVS_ge_Level_None = 0;
const int libAMVS_ge_Level_Level1 = 1;
const int libAMVS_ge_Level_Level2 = 2;
const int libAMVS_ge_Level_Level3 = 3;
const int libAMVS_ge_Level_Level4 = 4;
const int libAMVS_ge_Level_Level5 = 5;
const int libAMVS_ge_MMBOEUIModes_Idle = 0;
const int libAMVS_ge_MMBOEUIModes_Warning = 1;
const int libAMVS_ge_MMBOEUIModes_Duel = 2;
const int libAMVS_ge_MMBOEUIModes_PushingPrep = 3;
const int libAMVS_ge_MMBOEUIModes_Pushing = 4;

// Constants
const fixed libAMVS_gv_eventTimerDuration_C = 30.0;
const fixed libAMVS_gv_trGrOpenTheGatesTimerDuration_C = 12.0;
const fixed libAMVS_gv_elevatorDelay_C = 7.5;
const int libAMVS_gv_maximumTriggersForEvent_C = 3;
const int libAMVS_gv_maximumEvents_C = 6;
const fixed libAMVS_gv_revealTimerDuration_C = 90.0;
const fixed libAMVS_gv_saZoDuration_C = 15.0;
const fixed libAMVS_gv_saZoStartingDamage_C = 1000.0;

// Structures
struct libAMVS_gs_ARM_TrialGrounds {
    unit[libCore_gv_bALMaxTeams + 1] lv_dummyUnitToRunDamageInstancesFrom;
    trigger[libAMVS_gv_maximumEvents_C + 1] lv_eventTriggerInitializers;
    timer lv_elevatorTimer;
};

struct libAMVS_gs_TrGr_UI {
    int lv_mainPanel;
    int lv_notificationFrame;
    int lv_notificationImage;
    int lv_notificationForeground;
    int lv_notificationLabel;
    int lv_notificationTimerLabel;
    string[libAMVS_gv_maximumEvents_C + 1] lv_notificationIconImage;
    text[libAMVS_gv_maximumEvents_C + 1] lv_notificationText;
    int[libCore_gv_bALMaxTeams + 1] lv_teamScore;
    int lv_topBarContainer;
    int[libCore_gv_bALMaxTeams + 1] lv_teamScoreLabel;
    int lv_helpTextLabel;
    int lv_timerContainer;
    int lv_stopwatchImage;
    int lv_timerLabel;
    int lv_timerProgressBar;
    int lv_helpTextContainer;
    int lv_safeZoneContainerFrame;
};

struct libAMVS_gs_MMBOEPanel {
    int lv_mainPanel;
    int lv_bossSpawnFrame;
    int lv_bossSpawnInfoLabel;
    int lv_bossSpawnTimerLabel;
    int[3] lv_bossDuelFrame;
    int[3][3] lv_bossDuelHud;
    int[3][3] lv_bossDuelHPBar;
    int[3][3] lv_bossDuelHPBarLabel_AfterDeath;
    int lv_bossLaningFrame;
    int[3][3] lv_bossLaningPortraitHud;
    int lv_bossLaningShieldBar;
    int lv_bossLaningHPBar;
    int lv_bossLaningInfoLabel;
    int lv_bossLaningTimerLabel;
    bool[3] lv_bossHudPulsed;
};

struct libAMVS_gs_Arti {
    unit lv_holder;
    int lv_player;
    int lv_team;
};

struct libAMVS_gs_DuIm {
    unit[libCore_gv_bALMaxTeams + 1] lv_unit;
    point[libCore_gv_bALMaxTeams + 1] lv_spawnPoint;
    unit[libCore_gv_bALMaxTeams + 1] lv_dummyUnit;
    fixed[libCore_gv_bALMaxTeams + 1] lv_damageDone;
    timer lv_spawnTimer;
    timer lv_cooldownTimer;
    fixed lv_spawnTimerDuration;
    fixed lv_cooldownTimerDuration;
    fixed lv_damageToReach;
    int[libCore_gv_bALMaxTeams + 1] lv_ping;
    bool lv_eventResolved;
};

struct libAMVS_gs_SaZo {
    timer lv_shockTimer;
    fixed lv_currentDamage;
    actor lv_model;
    playergroup lv_safePlayerGroup;
    playergroup lv_unsafePlayerGroup;
};

// Variable Declarations
libAMVS_gs_ARM_TrialGrounds libAMVS_gv_aRM_TrialGrounds;
int[libAREN_gv_aRM_MechanicsCountToPick_C + 1] libAMVS_gv_levels;
trigger[libAREN_gv_aRM_MechanicsCountToPick_C + 1] libAMVS_gv_levelStartCallback;
bool libAMVS_gv_overrideEvent;
bool libAMVS_gv_noEnd;
int libAMVS_gv_nextEvent;
libAMVS_gs_TrGr_UI libAMVS_gv_trGr_UI;
libAMVS_gs_MMBOEPanel libAMVS_gv_mMBOEPanel;
unit libAMVS_gv_mapUnit;
timer libAMVS_gv_eventStartTimer;
int libAMVS_gv_currentEvent;
shuffler libAMVS_gv_eventShuffler;
playergroup libAMVS_gv_eventShufflerPG;
region[libCore_gv_bALMaxTeams + 1] libAMVS_gv_baseRegion;
point[libCore_gv_bALMaxTeams + 1] libAMVS_gv_puntPoint;
int libAMVS_gv_currentRound;
timer libAMVS_gv_eventSpawnTimer;
point libAMVS_gv_centerPoint;
point[libCore_gv_bALMaxTeams + 1][4] libAMVS_gv_gameStartPathingBlockerPoints;
region libAMVS_gv_elevatorRegion;
unit libAMVS_gv_elevatorPathingBlockerUnit;
trigger[libAMVS_gv_maximumEvents_C + 1][libAMVS_gv_maximumTriggersForEvent_C + 1] libAMVS_gv_eventTriggers;
unitgroup libAMVS_gv_eventUnitGroup;
timer libAMVS_gv_revealTimer;
timer libAMVS_gv_revealWarningTimer;
sound libAMVS_gv_curseSound;
unit libAMVS_gv_mech;
bool libAMVS_gv_notifiactionUp;
sound[libCore_gv_bALMaxTeams + 1] libAMVS_gv_trGr_CapturePoint_ControllingSound_Ally;
sound[libCore_gv_bALMaxTeams + 1] libAMVS_gv_trGr_CapturePoint_ControllingSound_Enemy;
libAMVS_gs_Arti libAMVS_gv_arti;
libAMVS_gs_DuIm libAMVS_gv_duIm;
libAMVS_gs_SaZo libAMVS_gv_saZo;

// Function Declarations
int libAMVS_gf_CurrentLevel ();
bool libAMVS_gf_UnitIsValidHero (unit lp_unit);
int libAMVS_gf_HeroesAliveOnTeam (int lp_team);
void libAMVS_gf_AddLevel (int lp_level, region lp_levelRegion, trigger lp_levelStartCallback, region lp_cameraBoundsRegion);
void libAMVS_gf_InitializeEventShuffler ();
int libAMVS_gf_GetNewEvent ();
void libAMVS_gf_IncrementArmorDebuff ();
void libAMVS_gf_RoundWinningKillCameraPan (unit lp_killingUnit, point lp_deadUnit);
void libAMVS_gf_EventSoundController ();
void libAMVS_gf_HookupUI ();
void libAMVS_gf_TemporarilyShowDialogItem (int lp_dialogItem, fixed lp_duration);
void libAMVS_gf_ElevatorSlideout ();
void libAMVS_gf_RevealSlideout ();
void libAMVS_gf_ElevatorNotificationUpdateTimerLabel (timer lp_timer);
void libAMVS_gf_UITimerUpdate (timer lp_timer);
void libAMVS_gf_MMBOEUIInit (int lp_parentPanel);
void libAMVS_gf_TrCoEndCurse ();
void libAMVS_gf_MMRavenCurseStart (int lp_team);
void libAMVS_gf_TrGrPlayControllingSoundsForTeams (int lp_owningTeam);
string libAMVS_gf_ArtiHero2 ();
void libAMVS_gf_ArtiCDR (unit lp_unit);
string libAMVS_gf_NoEvHero ();
void libAMVS_gf_DuImApplyImmortalsWrathToMembersOnTeam (int lp_teamToDealDamageTo);
void libAMVS_gf_DuImSpawnImmortalsForTeam (int lp_team);
void libAMVS_gf_MMBOEUISetBosses (unit lp_mode, unit lp_mode2);
string libAMVS_gf_SaZoHero ();
void libAMVS_gf_SaZoTimerCountdownMonitor (timer lp_timer);
void libAMVS_gf_FirstEventWarning ();
void libAMVS_gf_SecondEventWarning ();
void libAMVS_gf_TributeActive ();
void libAMVS_gf_TributeClaimed (int lp_victoryTeam);
void libAMVS_gf_CapturePointActive ();
void libAMVS_gf_CapturePointClaimed (int lp_victoryTeam);
void libAMVS_gf_MechExpiredorDestroyed (int lp_victoryTeam);
void libAMVS_gf_ArtifactAvailable ();
void libAMVS_gf_ArtifactAcquired (int lp_victoryTeam);
void libAMVS_gf_ArtifactHolderSlain (int lp_victoryTeam);
void libAMVS_gf_ImmortalsActive ();
void libAMVS_gf_ImmortalSlain (int lp_victoryTeam);
void libAMVS_gf_SafeZoneEvent ();
void libAMVS_gf_NoEvent ();
void libAMVS_gf_GenericEvent ();
void libAMVS_gf_RoundScoreTransmission (int lp_victoryTeam, int lp_roundIndex);

// Trigger Declarations
trigger libAMVS_gt_ShufflePickUIShownEvent;
trigger libAMVS_gt_LevelStart;
trigger libAMVS_gt_MapInitialization;
trigger libAMVS_gt_IncludeModInitialization;
trigger libAMVS_gt_GameOpenTimerStarted;
trigger libAMVS_gt_OpenTheGatesTimerExpires;
trigger libAMVS_gt_EventStartTimerExpires;
trigger libAMVS_gt_ElevatorTimerExpires;
trigger libAMVS_gt_EventSpawns;
trigger libAMVS_gt_RoundOver;
trigger libAMVS_gt_HeroKilled;
trigger libAMVS_gt_HeroSpawn;
trigger libAMVS_gt_RevealWarningTimerExpires;
trigger libAMVS_gt_RevealAllPlayersTimerExpires;
trigger libAMVS_gt_MMBOEUIModInitialize;
trigger libAMVS_gt_TrCoInit;
trigger libAMVS_gt_TrCoEventTimerExpires;
trigger libAMVS_gt_TrCoTributeObtained;
trigger libAMVS_gt_CaPoInit;
trigger libAMVS_gt_CaPoSpawn;
trigger libAMVS_gt_CaPoPointCaptured;
trigger libAMVS_gt_CaPoControlled;
trigger libAMVS_gt_CaPoMechDies;
trigger libAMVS_gt_ArtiInit;
trigger libAMVS_gt_ArtiSpawn;
trigger libAMVS_gt_ArtiPickedUp;
trigger libAMVS_gt_ArtiHolderDies;
trigger libAMVS_gt_NoEvInit;
trigger libAMVS_gt_DuImInit;
trigger libAMVS_gt_DuImSpawnImmortals;
trigger libAMVS_gt_DuImImmortalDies;
trigger libAMVS_gt_SaZoInit;
trigger libAMVS_gt_SaZoEventSpawnTimerExpires;
trigger libAMVS_gt_SaZoShockTimerExpires;
trigger libAMVS_gt_SaZoUnitLeavesSafeZone;
trigger libAMVS_gt_SaZoUnitEntersSafeZone;
trigger libAMVS_gt_Debug_EndRound;
trigger libAMVS_gt_Debug_EndRound2;
trigger libAMVS_gt_debug_tribute;
trigger libAMVS_gt_debug_capturepoint;
trigger libAMVS_gt_debug_artifact;
trigger libAMVS_gt_debug_noevent;
trigger libAMVS_gt_debug_duelingimmortals;
trigger libAMVS_gt_debug_safezone;
trigger libAMVS_gt_debug_noend;
trigger libAMVS_gt_debug_help;
trigger libAMVS_gt_debug_test;

// Library Initialization
void libAMVS_InitVariables ();

