include "TriggerLibs/HeroesLib"
include "LibAREN"

//--------------------------------------------------------------------------------------------------
// Library: ARM_GardenTerror
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libAMGT_ge_ARMGardenLevel_None = 0;
const int libAMGT_ge_ARMGardenLevel_Level1 = 1;
const int libAMGT_ge_ARMGardenLevel_Level2 = 2;
const int libAMGT_ge_ARMGardenLevel_Level3 = 3;
const int libAMGT_ge_ARMGardenMinionSpawnSide_Order = 0;
const int libAMGT_ge_ARMGardenMinionSpawnSide_Chaos = 1;
const int libAMGT_ge_ARMGardenMinionSpawnSide_Middle = 2;

// Constants
const fixed libAMGT_gv_aRMGardenStartDelay_C = 0.5;
const int libAMGT_gv_aRMGardenMinionGroupMaxCount_C = 20;
const int libAMGT_gv_aRMGardenDropSeedsMinion_C = 1;
const int libAMGT_gv_aRMGardenSeedRequired_C = 100;
const int libAMGT_gv_aRMGardenSeedsTerrorFinalDrop_C = 8;
const int libAMGT_gv_aRMGardenSeedsTerrorStartHPPercent_C = 95;
const fixed libAMGT_gv_aRMGardenSeedsTerrorPerHPPercent_C = 6.0;
const int libAMGT_gv_aRMGardenSeedsTerrorPerHPDrop_C = 2;
const int libAMGT_gv_aRMGardenSeedsMinionFinalDrop_C = 1;
const int libAMGT_gv_aRMGardenSeedsMinionStartHPPercent_C = 40;
const fixed libAMGT_gv_aRMGardenSeedsMinionPerHPPercent_C = 50.0;
const int libAMGT_gv_aRMGardenSeedsMinionPerHPDrop_C = 1;

// Structures
struct libAMGT_gs_ARMGardenMinionGroup {
    region lv_area;
    string[21] lv_types;
    point[21] lv_positions;
    int lv_count;
    bool lv_aggro;
    string lv_groupIcon;
    int lv_side;
    bool lv_spawning;
    int lv_defenderAIIndex;
    unitgroup lv_units;
    unit lv_iconUnit;
};

struct libAMGT_gs_ARMGardenTerror {
    region lv_area;
    point lv_position;
    unit lv_terror;
    bool lv_spawning;
};

struct libAMGT_gs_MapMechanicsPanel {
    int lv_gardenOfTerrorPanel;
    int lv_gardenOfTerrorScorePanel;
    int lv_gardenOfTerrorSeedsFrame;
    int[libCore_gv_bALMaxTeams + 1] lv_seedsCounts;
    int lv_gardenOfTerrorGolemFrame;
    int lv_gardenOfTerrorShamblersFrame;
    int[libCore_gv_bALMaxTeams + 1] lv_progressNotification;
    int[libCore_gv_bALMaxTeams + 1] lv_progressNotificationLabel;
};

// Variable Declarations
int[libAREN_gv_aRM_MechanicsCountToPick_C + 1] libAMGT_gv_aRMGardenLevelRegisteredMechIds;
int libAMGT_gv_aRMGardenLevelCount;
int[libAREN_gv_aRM_MechanicsCountToPick_C + 1] libAMGT_gv_aRMGardenLevels;
trigger[libAREN_gv_aRM_MechanicsCountToPick_C + 1] libAMGT_gv_aRMGardenLevelStartCallback;
unit[libCore_gv_bALMaxTeams + 1] libAMGT_gv_aRMGardenGardens;
bool libAMGT_gv_aRMGardenNightFallen;
int[libCore_gv_bALMaxTeams + 1] libAMGT_gv_aRMGardenTeamSeedsCollected;
int[3] libAMGT_gv_aRMGardenWarningMessageLevel;
unit[libCore_gv_bALMaxTeams + 1][4] libAMGT_gv_fertilePlot;
point[libCore_gv_bALMaxTeams + 1][4] libAMGT_gv_fertilePlotLocations;
unitgroup libAMGT_gv_victoryPlantTerrorUnitGroup;
libAMGT_gs_ARMGardenMinionGroup[libAMGT_gv_aRMGardenMinionGroupMaxCount_C + 1] libAMGT_gv_aRMGardenMinionGroup;
int libAMGT_gv_aRMGardenMinionGroupCount;
int[3] libAMGT_gv_aRMGardenLastClearedGroupIndex;
libAMGT_gs_ARMGardenTerror[11] libAMGT_gv_aRMGardenTerrors;
int libAMGT_gv_aRMGardenTerrorCount;
int[3] libAMGT_gv_aRMGardenLastClearedTerrorIndex;
int libAMGT_gv_aRMGardenLastSpawnedGroupIndex;
int libAMGT_gv_aRMGardenL1TerrorSpawnIndex;
int libAMGT_gv_aRMGardenL1MinionSpawnSide;
libAMGT_gs_MapMechanicsPanel libAMGT_gv_aRMGardenPanel;
bool libAMGT_gv_aRMGardenMapEventDisabled;

// Function Declarations
int libAMGT_gf_ARMGardenCurrentLevel ();
void libAMGT_gf_ARMGardenAddLevel (int lp_level, region lp_levelRegion, trigger lp_levelStartCallback, text lp_levelName, string lp_levelImageOrder, string lp_levelImageChaos, text lp_levelInfo, region lp_cameraBoundsRegion);
void libAMGT_gf_ARMGardenClearSpawnGroup ();
void libAMGT_gf_ARMGardenTurnOnOffNightSettings (bool lp_onOff);
void libAMGT_gf_ARMGardenNightStart ();
void libAMGT_gf_ARMGardenNightEnds ();
void libAMGT_gf_ARMGardenSpotlightController (int lp_level);
void libAMGT_gf_ARMGardenDropSeeds (point lp_location, int lp_count, bool lp_forBoss);
void libAMGT_gf_ARMGardenSpawnMonsters ();
void libAMGT_gf_ARMGardenVictorySequence (int lp_winningTeam, unit lp_loserTeamCore);
void libAMGT_gf_ARMGardenAddMinionGroup (region lp_area, bool lp_aggro, string lp_extraIcon, int lp_side);
int libAMGT_gf_ARMGardenMinionGroupIndex (unit lp_minion);
void libAMGT_gf_ARMGardenSpawnMinionGroupSingle (int lp_groupIndex, bool lp_delay);
void libAMGT_gf_ARMGardenMinionDroppingSeeds ();
void libAMGT_gf_ARMGardenMinionDropsSeeds (unit lp_bossIndex);
void libAMGT_gf_ARMGardenAddTerror (unit lp_terror, region lp_area);
void libAMGT_gf_ARMGardenSpawnTerrorsSingle (int lp_index);
int libAMGT_gf_ARMGardenTerrorIndex (unit lp_terror);
void libAMGT_gf_ARMGardenTerrorsDroppingSeeds ();
void libAMGT_gf_ARMGardenTerrorDropsSeeds (unit lp_bossIndex);
void libAMGT_gf_ARMGardenL1SpawnNextTerror (int lp_lastTerror);
void libAMGT_gf_ARMGardenL2SpawnNextTerror (int lp_lastTerror);
void libAMGT_gf_ARMGardenL3SpawnTerror ();
void libAMGT_gf_ARMGardenL3SpawnMinions ();
void libAMGT_gf_ARMGardenTransmissionOrder50 ();
void libAMGT_gf_ARMGardenTransmissionOrder80 ();
void libAMGT_gf_ARMGardenTransmissionChaos50 ();
void libAMGT_gf_ARMGardenTransmissionChaos80 ();
void libAMGT_gf_MapMechanicsGardenOfTerrorSetSeedCountForTeam (int lp_team, int lp_countText);
void libAMGT_gf_MapMechanicsGardenOfTerrorSetUpGolemStatusBarForTeam (int lp_team);
void libAMGT_gf_ARMGardenShowTeamProgressAnnouncement (int lp_team, int lp_seeds);

// Trigger Declarations
trigger libAMGT_gt_ARMGardenSetRoundOrder;
trigger libAMGT_gt_ARMGardenInitialization;
trigger libAMGT_gt_ARMGardenLevelStart;
trigger libAMGT_gt_ARMGardenGatesOpened;
trigger libAMGT_gt_ARMGardenSeedDropped;
trigger libAMGT_gt_ARMGardenSeedPickup;
trigger libAMGT_gt_ARMGardenCoreDiesDebug;
trigger libAMGT_gt_ARMGardenMinionDies;
trigger libAMGT_gt_ARMGardenTerrorDies;
trigger libAMGT_gt_ARMGardenPanelInit;
trigger libAMGT_gt_ARMGardenDisableEvent;

// Library Initialization
void libAMGT_InitVariables ();

