include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/MapMechanicsLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"
include "TriggerLibs/StartingExperienceLib"
include "TriggerLibs/SoundLib"
include "LibAREN"

include "LibAMGT_h"

//--------------------------------------------------------------------------------------------------
// Library: ARM_GardenTerror
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libAMGT_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libMapM_InitVariables();
    libAIAI_InitVariables();
    libUIUI_InitVariables();
    libStEx_InitVariables();
    libSond_InitVariables();
    libAREN_InitVariables();
}

// Variable Initialization
bool libAMGT_InitVariables_completed = false;

void libAMGT_InitVariables () {
    int init_i;
    int init_i1;

    if (libAMGT_InitVariables_completed) {
        return;
    }

    libAMGT_InitVariables_completed = true;

    for (init_i = 0; init_i <= libAREN_gv_aRM_MechanicsCountToPick_C; init_i += 1) {
        libAMGT_gv_aRMGardenLevelRegisteredMechIds[init_i] = libAREN_ge_ArenaMechanics_InvalidMechanic;
    }
    for (init_i = 0; init_i <= libAREN_gv_aRM_MechanicsCountToPick_C; init_i += 1) {
        libAMGT_gv_aRMGardenLevels[init_i] = libAMGT_ge_ARMGardenLevel_None;
    }
    libAMGT_gv_victoryPlantTerrorUnitGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= libAMGT_gv_aRMGardenMinionGroupMaxCount_C; init_i += 1) {
        libAMGT_gv_aRMGardenMinionGroup[init_i].lv_units = UnitGroupEmpty();
    }
    libAMGT_gv_aRMGardenPanel.lv_gardenOfTerrorPanel = c_invalidDialogControlId;
    libAMGT_gv_aRMGardenPanel.lv_gardenOfTerrorScorePanel = c_invalidDialogControlId;
    libAMGT_gv_aRMGardenPanel.lv_gardenOfTerrorSeedsFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libAMGT_gv_aRMGardenPanel.lv_seedsCounts[init_i1] = c_invalidDialogControlId;
    }
    libAMGT_gv_aRMGardenPanel.lv_gardenOfTerrorGolemFrame = c_invalidDialogControlId;
    libAMGT_gv_aRMGardenPanel.lv_gardenOfTerrorShamblersFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libAMGT_gv_aRMGardenPanel.lv_progressNotification[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libAMGT_gv_aRMGardenPanel.lv_progressNotificationLabel[init_i1] = c_invalidDialogControlId;
    }
}

// Presets
// Functions
int libAMGT_gf_ARMGardenCurrentLevel () {
    // Automatic Variable Declarations
    // Implementation
    return libAMGT_gv_aRMGardenLevels[libAREN_gf_ArenaCurrentLevelIndex()];
}

void libAMGT_gf_ARMGardenAddLevel (int lp_level, region lp_levelRegion, trigger lp_levelStartCallback, text lp_levelName, string lp_levelImageOrder, string lp_levelImageChaos, text lp_levelInfo, region lp_cameraBoundsRegion) {
    // Automatic Variable Declarations
    // Implementation
    libAMGT_gv_aRMGardenLevelCount += 1;
    libAMGT_gv_aRMGardenLevelStartCallback[libAMGT_gv_aRMGardenLevelCount] = lp_levelStartCallback;
    libAMGT_gv_aRMGardenLevels[libAMGT_gv_aRMGardenLevelCount] = lp_level;
    libAREN_gf_ArenaRegisterMechanic(lp_levelName, lp_levelImageOrder, lp_levelImageChaos, lp_levelInfo, libAMGT_gt_ARMGardenLevelStart, lp_levelRegion, lp_cameraBoundsRegion);
    libAMGT_gv_aRMGardenLevelRegisteredMechIds[libAMGT_gv_aRMGardenLevelCount] = libAREN_gf_LastregisteredArenaMechanic();
}

void libAMGT_gf_ARMGardenClearSpawnGroup () {
    // Variable Declarations
    int lv_itMinionIndex;
    unit lv_indexMinion;
    int lv_minionIndex;
    int lv_itTerrorIndex;
    unit lv_itVictoryPlantTerrorUnit;
    unitgroup lv_mapSeeds;
    unit lv_seed;

    // Automatic Variable Declarations
    unitgroup auto5A603A82_g;
    int auto5A603A82_u;
    int auto3F3D960F_ae;
    const int auto3F3D960F_ai = 1;
    int auto3F077E90_ae;
    const int auto3F077E90_ai = 1;
    unitgroup autoB5992B5A_g;
    int autoB5992B5A_u;
    int auto81F379DC_ae;
    const int auto81F379DC_ai = 1;
    unitgroup auto79A9540E_g;
    int auto79A9540E_u;

    // Variable Initialization
    lv_mapSeeds = UnitGroupEmpty();

    // Implementation
    auto5A603A82_g = libAMGT_gv_victoryPlantTerrorUnitGroup;
    auto5A603A82_u = UnitGroupCount(auto5A603A82_g, c_unitCountAll);
    for (;; auto5A603A82_u -= 1) {
        lv_itVictoryPlantTerrorUnit = UnitGroupUnitFromEnd(auto5A603A82_g, auto5A603A82_u);
        if (lv_itVictoryPlantTerrorUnit == null) { break; }
        UnitRemove(lv_itVictoryPlantTerrorUnit);
    }
    auto3F3D960F_ae = libAMGT_gv_aRMGardenMinionGroupCount;
    lv_itMinionIndex = 1;
    for ( ; ( (auto3F3D960F_ai >= 0 && lv_itMinionIndex <= auto3F3D960F_ae) || (auto3F3D960F_ai < 0 && lv_itMinionIndex >= auto3F3D960F_ae) ) ; lv_itMinionIndex += auto3F3D960F_ai ) {
        auto3F077E90_ae = libAMGT_gv_aRMGardenMinionGroup[lv_itMinionIndex].lv_count;
        lv_minionIndex = 1;
        for ( ; ( (auto3F077E90_ai >= 0 && lv_minionIndex <= auto3F077E90_ae) || (auto3F077E90_ai < 0 && lv_minionIndex >= auto3F077E90_ae) ) ; lv_minionIndex += auto3F077E90_ai ) {
            libAMGT_gv_aRMGardenMinionGroup[lv_itMinionIndex].lv_types[lv_minionIndex] = null;
        }
        autoB5992B5A_g = libAMGT_gv_aRMGardenMinionGroup[lv_itMinionIndex].lv_units;
        autoB5992B5A_u = UnitGroupCount(autoB5992B5A_g, c_unitCountAll);
        for (;; autoB5992B5A_u -= 1) {
            lv_indexMinion = UnitGroupUnitFromEnd(autoB5992B5A_g, autoB5992B5A_u);
            if (lv_indexMinion == null) { break; }
            UnitRemove(lv_indexMinion);
        }
        UnitGroupClear(libAMGT_gv_aRMGardenMinionGroup[lv_itMinionIndex].lv_units);
        libAMGT_gv_aRMGardenMinionGroup[lv_itMinionIndex].lv_count = 0;
        libAMGT_gv_aRMGardenMinionGroup[lv_itMinionIndex].lv_spawning = false;
        if ((libAMGT_gv_aRMGardenMinionGroup[lv_itMinionIndex].lv_iconUnit != null)) {
            UnitRemove(libAMGT_gv_aRMGardenMinionGroup[lv_itMinionIndex].lv_iconUnit);
            libAMGT_gv_aRMGardenMinionGroup[lv_itMinionIndex].lv_iconUnit = null;
        }

        libAMGT_gv_aRMGardenMinionGroup[lv_itMinionIndex].lv_defenderAIIndex = 0;
    }
    libAMGT_gv_aRMGardenMinionGroupCount = 0;
    auto81F379DC_ae = libAMGT_gv_aRMGardenTerrorCount;
    lv_itTerrorIndex = 1;
    for ( ; ( (auto81F379DC_ai >= 0 && lv_itTerrorIndex <= auto81F379DC_ae) || (auto81F379DC_ai < 0 && lv_itTerrorIndex >= auto81F379DC_ae) ) ; lv_itTerrorIndex += auto81F379DC_ai ) {
        UnitRemove(libAMGT_gv_aRMGardenTerrors[lv_itTerrorIndex].lv_terror);
        libAMGT_gv_aRMGardenTerrors[lv_itTerrorIndex].lv_spawning = false;
        libAMGT_gv_aRMGardenTerrors[lv_itTerrorIndex].lv_terror = null;
    }
    libAMGT_gv_aRMGardenTerrorCount = 0;
    lv_mapSeeds = UnitGroup("ItemSeedPickup", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto79A9540E_g = lv_mapSeeds;
    auto79A9540E_u = UnitGroupCount(auto79A9540E_g, c_unitCountAll);
    for (;; auto79A9540E_u -= 1) {
        lv_seed = UnitGroupUnitFromEnd(auto79A9540E_g, auto79A9540E_u);
        if (lv_seed == null) { break; }
        UnitRemove(lv_seed);
    }
}

void libAMGT_gf_ARMGardenTurnOnOffNightSettings (bool lp_onOff) {
    // Variable Declarations
    actor lv_actorRegion;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", RegionEntireMap());
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    if ((lp_onOff == true) && (libAMGT_gv_aRMGardenNightFallen == false)) {
        libAMGT_gv_aRMGardenNightFallen = true;
        ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal Light2On");
        ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, "Signal NightOn", "Doodad", "ScopeContains _StreetLamp");
        libAMGT_gf_ARMGardenNightStart();
    }

    if ((lp_onOff == false) && (libAMGT_gv_aRMGardenNightFallen == true)) {
        libAMGT_gv_aRMGardenNightFallen = false;
        ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal Light2Off");
        ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, "Signal NightOff", "Doodad", "ScopeContains _StreetLamp");
        libAMGT_gf_ARMGardenNightEnds();
    }

    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

void libAMGT_gf_ARMGardenNightStart () {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itGarden;
    int lv_itTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal MM1On");
    libCore_gv_mAPMapSoundtrack[1] = "MX_GardenOfTerror_Night_LVL_1";
    libCore_gv_mAPMapSoundtrack[2] = "MX_GardenOfTerror_Night_LVL_10";
    libCore_gv_mAPMapSoundtrack[3] = "MX_GardenOfTerror_Night_LVL_20";
    if ((libSond_gf_SoundtrackIsIntroPlaying() == false)) {
        libSond_gf_SoundtrackPlayMapSoundtrackAsDefaultSoundtrackForAllPlayers();
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Amb_2D_GardenOfTerror_Night", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryUser14, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySPieces, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMessage, true);
}

void libAMGT_gf_ARMGardenNightEnds () {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itGroupIndex;
    unit lv_itMinion;
    int lv_itTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libGame_gf_SendEventMapGardenOfTerrorNightEnds();
    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal MM1Off");
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryUser14, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySPieces, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMessage, false);
    libCore_gv_mAPMapSoundtrack[1] = "MX_GardenOfTerror_Day_LVL_1";
    libCore_gv_mAPMapSoundtrack[2] = "MX_GardenOfTerror_Day_LVL_10";
    libCore_gv_mAPMapSoundtrack[3] = "MX_GardenOfTerror_Day_LVL_20";
    if ((libSond_gf_SoundtrackIsIntroPlaying() == false)) {
        libSond_gf_SoundtrackPlayMapSoundtrackAsDefaultSoundtrackForAllPlayers();
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Amb_2D_GardenOfTerror_Day", c_soundtrackCueAny, c_soundtrackIndexAny, false);
}

void libAMGT_gf_ARMGardenSpotlightController (int lp_level) {
    // Automatic Variable Declarations
    int auto24E96FDA_val;

    // Implementation
    auto24E96FDA_val = lp_level;
    if (auto24E96FDA_val == 1) {
        ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal Light2Off");
        ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal Light3Off");
    }
    else if (auto24E96FDA_val == 2) {
        ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal Light2On");
        ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal Light3Off");
    }
    else if (auto24E96FDA_val == 3) {
        ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal Light3On");
        ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal Light2Off");
    }
    else {
    }
}

void libAMGT_gf_ARMGardenDropSeeds (point lp_location, int lp_count, bool lp_forBoss) {
    // Automatic Variable Declarations
    int auto6B0DD956_n;
    int auto6B0DD956_i;

    // Implementation
    if ((lp_count <= 0)) {
        return ;
    }

    if ((lp_forBoss == true)) {
        if ((lp_count > 1)) {
            CatalogFieldValueSet(c_gameCatalogEffect, "PlantHorrorSpawnSeeds", "PeriodCount", libCore_gv_cOMPUTER_Neutral, IntToString(lp_count));
            PlayerCreateEffectPoint(libCore_gv_cOMPUTER_Neutral, "PlantHorrorSpawnSeeds", lp_location);
        }
        else {
            PlayerCreateEffectPoint(libCore_gv_cOMPUTER_Neutral, "PlantHorrorSpawnSeedsSingleFar", lp_location);
        }
    }
    else {
        auto6B0DD956_n = lp_count;
        for (auto6B0DD956_i = 1; auto6B0DD956_i <= auto6B0DD956_n; auto6B0DD956_i += 1) {
            PlayerCreateEffectPoint(libCore_gv_cOMPUTER_Neutral, "PlantHorrorSpawnSeedsSingleClose", lp_location);
        }
    }
}

void libAMGT_gf_ARMGardenSpawnMonsters () {
    // Automatic Variable Declarations
    int autoA6EA3F32_val;

    // Implementation
    autoA6EA3F32_val = libAMGT_gf_ARMGardenCurrentLevel();
    if (autoA6EA3F32_val == libAMGT_ge_ARMGardenLevel_Level1) {
        libAMGT_gf_ARMGardenL1SpawnNextTerror(0);
    }
    else if (autoA6EA3F32_val == libAMGT_ge_ARMGardenLevel_Level2) {
        libAMGT_gf_ARMGardenL2SpawnNextTerror(0);
    }
    else if (autoA6EA3F32_val == libAMGT_ge_ARMGardenLevel_Level3) {
        libAMGT_gf_ARMGardenL3SpawnTerror();
    }
    else {
    }
    libAMGT_gf_ARMGardenMinionDroppingSeeds();
    libAMGT_gf_ARMGardenTerrorsDroppingSeeds();
}

void libAMGT_gf_ARMGardenVictorySequence (int lp_winningTeam, unit lp_loserTeamCore) {
    // Variable Declarations
    int lv_enemyTeam;
    int lv_arenaLevel;
    unit lv_fertileSoil;
    int lv_plantTerrorOwner;
    const fixed lv_coreAnimationWaitExplodeTime = 2.8;
    const int lv_maxNumberOfShamblers_C = 9;
    unit lv_plantTerror;
    point lv_plantTerrorSpawnPoint;
    point lv_coreLocation;
    unit[lv_maxNumberOfShamblers_C + 1] lv_shamblers;
    int lv_unit;
    fixed lv_offsetAngle;
    fixed lv_shamblerVarianceAngleUpperBound;
    fixed lv_shamblerVarianceAngleLowerBound;
    fixed lv_shamblerVarianceAngle;
    fixed lv_shamblerVarianceRange;
    int lv_shamblerTypeVariance;

    // Automatic Variable Declarations
    const int autoFD37F8C8_ae = lv_maxNumberOfShamblers_C;
    const int autoFD37F8C8_ai = 1;
    const int autoDC6876AC_ae = lv_maxNumberOfShamblers_C;
    const int autoDC6876AC_ai = 1;

    // Variable Initialization
    lv_enemyTeam = libGame_gf_EnemyTeam(lp_winningTeam);
    lv_arenaLevel = libAREN_gf_ArenaCurrentLevelIndex();
    lv_fertileSoil = libAMGT_gv_fertilePlot[lv_enemyTeam][lv_arenaLevel];
    lv_plantTerrorOwner = libGame_gf_ComputerPlayerInTeam(lp_winningTeam);

    // Implementation
    libAREN_gv_aRM_VictorySequencePlaying = true;
    libAREN_gv_aRM_RoundWinningTeam = lp_winningTeam;
    libAREN_gv_aRM_VictorySequenceDelay = 8.0;
    libAREN_gf_ARM_RoundOver();
    libStEx_gf_MoveUnit(lv_fertileSoil, libAMGT_gv_fertilePlotLocations[lv_enemyTeam][lv_arenaLevel], false);
    lv_plantTerrorSpawnPoint = PointWithOffsetPolar(UnitGetPosition(lv_fertileSoil), 2.0, UnitGetFacing(lv_fertileSoil));
    UnitBehaviorAdd(lv_fertileSoil, "UnitNotPuntableByRepulserField", lv_fertileSoil, 1);
    UnitSetOwner(lv_fertileSoil, lv_plantTerrorOwner, true);
    libNtve_gf_PauseUnit(lv_fertileSoil, false);
    UnitCreate(1, "VehiclePlantHorror", 0, lv_plantTerrorOwner, lv_plantTerrorSpawnPoint, UnitGetFacing(lv_fertileSoil), null);
    lv_plantTerror = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(lv_plantTerror, "SetMinimapVisibility");
    UnitBehaviorAdd(lv_plantTerror, "PlantHorrorVictorySequenceDisableAbilityBehavior", lv_plantTerror, 1);
    UnitBehaviorAdd(lv_plantTerror, "VictorySequenceImmunetoStasisBehavior", lv_plantTerror, 1);
    UnitBehaviorAdd(lv_plantTerror, "UnitNotPuntableByRepulserField", lv_plantTerror, 1);
    UnitWeaponAdd(lv_plantTerror, "VehiclePlantHorrorVictoryWeapon", null);
    UnitWeaponRemove(lv_plantTerror, "VehiclePlantHorror");
    libNtve_gf_MakeUnitInvulnerable(lv_plantTerror, true);
    UnitGroupAdd(libAMGT_gv_victoryPlantTerrorUnitGroup, lv_plantTerror);
    libNtve_gf_SendActorMessageToUnit(lp_loserTeamCore, "Create PlantHorrorVictorySequenceCoreFX");
    libGame_gf_BuildingDiesCameraShake(libGame_gv_gameOver_CameraPanTime_C, "Medium", libCore_gv_activeHumanPlayers);
    libNtve_gf_SendActorMessageToUnit(lv_fertileSoil, "Signal Victory");
    lv_unit = 1;
    for ( ; ( (autoFD37F8C8_ai >= 0 && lv_unit <= autoFD37F8C8_ae) || (autoFD37F8C8_ai < 0 && lv_unit >= autoFD37F8C8_ae) ) ; lv_unit += autoFD37F8C8_ai ) {
        lv_offsetAngle += (360.0/lv_maxNumberOfShamblers_C);
        lv_shamblerVarianceAngleLowerBound = (lv_offsetAngle - 35.0);
        lv_shamblerVarianceAngleUpperBound = (lv_offsetAngle + 35.0);
        lv_shamblerVarianceAngle = RandomFixed(lv_shamblerVarianceAngleLowerBound, lv_shamblerVarianceAngleUpperBound);
        lv_shamblerVarianceRange = RandomFixed(6.0, 8.5);
        lv_coreLocation = PointWithOffsetPolar(UnitGetPosition(lp_loserTeamCore), lv_shamblerVarianceRange, lv_shamblerVarianceAngle);
        lv_shamblerTypeVariance = RandomInt(0, 1);
        if ((lv_shamblerTypeVariance >= 1)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Shambler", 0, lv_plantTerrorOwner, lv_coreLocation, UnitGetPosition(lp_loserTeamCore), null);
        }
        else {
            libNtve_gf_UnitCreateFacingPoint(1, "ShamblerRanged", 0, lv_plantTerrorOwner, lv_coreLocation, UnitGetPosition(lp_loserTeamCore), null);
        }
        UnitGroupAdd(libAMGT_gv_victoryPlantTerrorUnitGroup, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "UnitNotPuntableByRepulserField", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "ShamblingHorrorVictorySequenceDamageLimiter", UnitLastCreated(), 1);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetShowStatusBar");
        lv_shamblers[lv_unit] = UnitLastCreated();
    }
    Wait(3.5, c_timeGame);
    UnitBehaviorAdd(lv_plantTerror, "PlantHorrorVictorySequenceDamageLimiter", lv_plantTerror, 1);
    UnitBehaviorRemove(lv_plantTerror, "PlantHorrorBirth", 1);
    UnitBehaviorRemove(lv_plantTerror, "PlantHorrorDeactivated", 1);
    UnitBehaviorRemove(lv_plantTerror, "GenericVehicleBehaviorEmpty", 1);
    UnitIssueOrder(lv_plantTerror, OrderTargetingUnit(AbilityCommand("StormVehicleAttack", 0), lp_loserTeamCore), c_orderQueueReplace);
    lv_unit = 1;
    for ( ; ( (autoDC6876AC_ai >= 0 && lv_unit <= autoDC6876AC_ae) || (autoDC6876AC_ai < 0 && lv_unit >= autoDC6876AC_ae) ) ; lv_unit += autoDC6876AC_ai ) {
        UnitIssueOrder(lv_shamblers[lv_unit], OrderTargetingUnit(AbilityCommand("attack", 0), lp_loserTeamCore), c_orderQueueReplace);
    }
}

void libAMGT_gf_ARMGardenAddMinionGroup (region lp_area, bool lp_aggro, string lp_extraIcon, int lp_side) {
    // Variable Declarations
    int lv_groupIndex;
    unit lv_itMinion;
    int lv_minionIndex;

    // Automatic Variable Declarations
    unitgroup auto843621A4_g;
    int auto843621A4_u;

    // Variable Initialization

    // Implementation
    if ((libAMGT_gv_aRMGardenMinionGroupCount >= libAMGT_gv_aRMGardenMinionGroupMaxCount_C)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_AMGT_2C820F3A"));
        return ;
    }

    libAMGT_gv_aRMGardenMinionGroupCount += 1;
    libAMGT_gv_aRMGardenMinionGroup[libAMGT_gv_aRMGardenMinionGroupCount].lv_area = lp_area;
    libAMGT_gv_aRMGardenMinionGroup[libAMGT_gv_aRMGardenMinionGroupCount].lv_aggro = lp_aggro;
    libAMGT_gv_aRMGardenMinionGroup[libAMGT_gv_aRMGardenMinionGroupCount].lv_groupIcon = lp_extraIcon;
    libAMGT_gv_aRMGardenMinionGroup[libAMGT_gv_aRMGardenMinionGroupCount].lv_side = lp_side;
    auto843621A4_g = UnitGroup(null, libCore_gv_cOMPUTER_Hostile, lp_area, UnitFilter((1 << c_targetFilterCreep), (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto843621A4_u = UnitGroupCount(auto843621A4_g, c_unitCountAll);
    for (;; auto843621A4_u -= 1) {
        lv_itMinion = UnitGroupUnitFromEnd(auto843621A4_g, auto843621A4_u);
        if (lv_itMinion == null) { break; }
        libAMGT_gv_aRMGardenMinionGroup[libAMGT_gv_aRMGardenMinionGroupCount].lv_count += 1;
        lv_minionIndex = libAMGT_gv_aRMGardenMinionGroup[libAMGT_gv_aRMGardenMinionGroupCount].lv_count;
        libAMGT_gv_aRMGardenMinionGroup[libAMGT_gv_aRMGardenMinionGroupCount].lv_types[lv_minionIndex] = UnitGetType(lv_itMinion);
        libAMGT_gv_aRMGardenMinionGroup[libAMGT_gv_aRMGardenMinionGroupCount].lv_positions[lv_minionIndex] = UnitGetPosition(lv_itMinion);
        PointSetFacing(libAMGT_gv_aRMGardenMinionGroup[libAMGT_gv_aRMGardenMinionGroupCount].lv_positions[lv_minionIndex], UnitGetFacing(lv_itMinion));
        UnitRemove(lv_itMinion);
    }
    libAMGT_gv_aRMGardenMinionGroup[libAMGT_gv_aRMGardenMinionGroupCount].lv_spawning = false;
    libAMGT_gv_aRMGardenMinionGroup[libAMGT_gv_aRMGardenMinionGroupCount].lv_defenderAIIndex = 0;
    if ((libAMGT_gv_aRMGardenMinionGroup[libAMGT_gv_aRMGardenMinionGroupCount].lv_iconUnit != null)) {
        UnitRemove(libAMGT_gv_aRMGardenMinionGroup[libAMGT_gv_aRMGardenMinionGroupCount].lv_iconUnit);
        libAMGT_gv_aRMGardenMinionGroup[libAMGT_gv_aRMGardenMinionGroupCount].lv_iconUnit = null;
    }

    UnitGroupClear(libAMGT_gv_aRMGardenMinionGroup[libAMGT_gv_aRMGardenMinionGroupCount].lv_units);
}

int libAMGT_gf_ARMGardenMinionGroupIndex (unit lp_minion) {
    // Automatic Variable Declarations
    // Implementation
    return libCore_gf_IntegerStoredForUnit(lp_minion, 1);
}

trigger auto_libAMGT_gf_ARMGardenSpawnMinionGroupSingle_Trigger = null;
int auto_libAMGT_gf_ARMGardenSpawnMinionGroupSingle_lp_groupIndex;
bool auto_libAMGT_gf_ARMGardenSpawnMinionGroupSingle_lp_delay;

void libAMGT_gf_ARMGardenSpawnMinionGroupSingle (int lp_groupIndex, bool lp_delay) {
    auto_libAMGT_gf_ARMGardenSpawnMinionGroupSingle_lp_groupIndex = lp_groupIndex;
    auto_libAMGT_gf_ARMGardenSpawnMinionGroupSingle_lp_delay = lp_delay;

    if (auto_libAMGT_gf_ARMGardenSpawnMinionGroupSingle_Trigger == null) {
        auto_libAMGT_gf_ARMGardenSpawnMinionGroupSingle_Trigger = TriggerCreate("auto_libAMGT_gf_ARMGardenSpawnMinionGroupSingle_TriggerFunc");
    }

    TriggerExecute(auto_libAMGT_gf_ARMGardenSpawnMinionGroupSingle_Trigger, false, false);
}

bool auto_libAMGT_gf_ARMGardenSpawnMinionGroupSingle_TriggerFunc (bool testConds, bool runActions) {
    int lp_groupIndex = auto_libAMGT_gf_ARMGardenSpawnMinionGroupSingle_lp_groupIndex;
    bool lp_delay = auto_libAMGT_gf_ARMGardenSpawnMinionGroupSingle_lp_delay;

    // Variable Declarations
    int lv_itMinionIndex;
    unitgroup lv_minionGroup;
    unit lv_itMinion;
    int lv_ping1;
    int lv_ping2;

    // Automatic Variable Declarations
    int auto2A0FD6F8_ae;
    const int auto2A0FD6F8_ai = 1;
    unitgroup autoA68113C3_g;
    int autoA68113C3_u;

    // Variable Initialization
    lv_minionGroup = UnitGroupEmpty();
    lv_ping1 = c_invalidPingId;
    lv_ping2 = c_invalidPingId;

    // Implementation
    if ((libAMGT_gv_aRMGardenMinionGroup[lp_groupIndex].lv_spawning == true)) {
        return true;
    }

    libAMGT_gv_aRMGardenMinionGroup[lp_groupIndex].lv_spawning = true;
    if ((lp_delay == true)) {
        Wait(RandomFixed(3.0, 4.0), c_timeGame);
    }
    else {
        Wait(RandomFixed(0.0, 1.0), c_timeGame);
    }
    DialogControlSetVisible(libAMGT_gv_aRMGardenPanel.lv_gardenOfTerrorShamblersFrame, PlayerGroupAll(), true);
    PingCreateFromData(PlayerGroupAll(), "StormArenaAlert", RegionGetCenter(libAMGT_gv_aRMGardenMinionGroup[lp_groupIndex].lv_area));
    PingSetColor(PingLastCreated(), Color(100.00, 100.00, 0.00));
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_AMGT_D17D4BB9"));
    PingSetScale(PingLastCreated(), 0.6);
    lv_ping1 = PingLastCreated();
    PingCreateFromData(PlayerGroupAll(), "StormObjective", RegionGetCenter(libAMGT_gv_aRMGardenMinionGroup[lp_groupIndex].lv_area));
    PingSetColor(PingLastCreated(), Color(100.00, 100.00, 0.00));
    PingSetScale(PingLastCreated(), 0.6);
    lv_ping2 = PingLastCreated();
    SoundPlayForPlayer(SoundLink("ArenaMode_Crowd_Cheer_EventReady", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    if ((lp_delay == true)) {
        Wait(2.0, c_timeGame);
    }

    auto2A0FD6F8_ae = (libAMGT_gv_aRMGardenMinionGroup[lp_groupIndex].lv_count - UnitGroupCount(libAMGT_gv_aRMGardenMinionGroup[lp_groupIndex].lv_units, c_unitCountAlive));
    lv_itMinionIndex = 1;
    for ( ; ( (auto2A0FD6F8_ai >= 0 && lv_itMinionIndex <= auto2A0FD6F8_ae) || (auto2A0FD6F8_ai < 0 && lv_itMinionIndex >= auto2A0FD6F8_ae) ) ; lv_itMinionIndex += auto2A0FD6F8_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, libAMGT_gv_aRMGardenMinionGroup[lp_groupIndex].lv_types[lv_itMinionIndex], c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Hostile, libAMGT_gv_aRMGardenMinionGroup[lp_groupIndex].lv_positions[lv_itMinionIndex], null);
        UnitGroupAdd(libAMGT_gv_aRMGardenMinionGroup[lp_groupIndex].lv_units, UnitLastCreated());
        libCore_gf_StoreIntegerForUnit(UnitLastCreated(), 1, lp_groupIndex);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetMinimapVisibilityAlways");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetMinimapVisibility");
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateStoppable, false);
        UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
        UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
        AddUnitOfInterest(UnitLastCreated(), 0.0, 0.0, "KillShambler", libNtve_ge_GoalTeam_Both, 0);
    }
    Wait(2.0, c_timeGame);
    autoA68113C3_g = libAMGT_gv_aRMGardenMinionGroup[lp_groupIndex].lv_units;
    autoA68113C3_u = UnitGroupCount(autoA68113C3_g, c_unitCountAll);
    for (;; autoA68113C3_u -= 1) {
        lv_itMinion = UnitGroupUnitFromEnd(autoA68113C3_g, autoA68113C3_u);
        if (lv_itMinion == null) { break; }
        UnitSetState(lv_itMinion, c_unitStateSelectable, true);
        UnitSetState(lv_itMinion, c_unitStateStoppable, true);
        UnitSetState(lv_itMinion, c_unitStateInvulnerable, false);
        UnitSetState(lv_itMinion, c_unitStateStatusBar, true);
        UnitSetState(lv_itMinion, c_unitStateTargetable, true);
    }
    Wait(0.0, c_timeGame);
    if ((libAMGT_gv_aRMGardenMinionGroup[lp_groupIndex].lv_defenderAIIndex == 0)) {
        libAIAI_gf_StartDefenderAI(false, libAMGT_gv_aRMGardenMinionGroup[lp_groupIndex].lv_units, libAMGT_gv_aRMGardenMinionGroup[lp_groupIndex].lv_area, null, false);
        libAMGT_gv_aRMGardenMinionGroup[lp_groupIndex].lv_defenderAIIndex = libAIAI_gf_LastCreatedDefenderAI();
    }
    else {
        libAIAI_gf_AddUnitsToDefenderAI(libAMGT_gv_aRMGardenMinionGroup[lp_groupIndex].lv_defenderAIIndex, libAMGT_gv_aRMGardenMinionGroup[lp_groupIndex].lv_units);
    }
    if ((libAMGT_gv_aRMGardenMinionGroup[lp_groupIndex].lv_groupIcon != null)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "JungleCampIconUnit", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Hostile, RegionGetCenter(libAMGT_gv_aRMGardenMinionGroup[lp_groupIndex].lv_area), null);
        libAMGT_gv_aRMGardenMinionGroup[lp_groupIndex].lv_iconUnit = UnitLastCreated();
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), (("MinimapIcon " + (libAMGT_gv_aRMGardenMinionGroup[lp_groupIndex].lv_groupIcon))));
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetMinimapVisibility 1");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetMinimapVisibilityAlways 1");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "MinimapIconScale 0.500000");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "MinimapIconTintColor 255,180,90,218");
    }

    libAMGT_gv_aRMGardenMinionGroup[lp_groupIndex].lv_spawning = false;
    Wait(3.0, c_timeGame);
    if ((lv_ping1 != c_invalidPingId)) {
        PingDestroy(lv_ping1);
    }

    if ((lv_ping2 != c_invalidPingId)) {
        PingDestroy(lv_ping2);
    }

    return true;
}

trigger auto_libAMGT_gf_ARMGardenMinionDroppingSeeds_Trigger = null;

void libAMGT_gf_ARMGardenMinionDroppingSeeds () {
    if (auto_libAMGT_gf_ARMGardenMinionDroppingSeeds_Trigger == null) {
        auto_libAMGT_gf_ARMGardenMinionDroppingSeeds_Trigger = TriggerCreate("auto_libAMGT_gf_ARMGardenMinionDroppingSeeds_TriggerFunc");
    }

    TriggerExecute(auto_libAMGT_gf_ARMGardenMinionDroppingSeeds_Trigger, false, false);
}

bool auto_libAMGT_gf_ARMGardenMinionDroppingSeeds_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itGroup;
    unit lv_itGroup2;

    // Automatic Variable Declarations
    int auto74B3434D_ae;
    const int auto74B3434D_ai = 1;
    unitgroup auto51F79180_g;
    int auto51F79180_u;

    // Variable Initialization

    // Implementation
    while (true) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        auto74B3434D_ae = libAMGT_gv_aRMGardenMinionGroupCount;
        lv_itGroup = 1;
        for ( ; ( (auto74B3434D_ai >= 0 && lv_itGroup <= auto74B3434D_ae) || (auto74B3434D_ai < 0 && lv_itGroup >= auto74B3434D_ae) ) ; lv_itGroup += auto74B3434D_ai ) {
            auto51F79180_g = libAMGT_gv_aRMGardenMinionGroup[lv_itGroup].lv_units;
            auto51F79180_u = UnitGroupCount(auto51F79180_g, c_unitCountAll);
            for (;; auto51F79180_u -= 1) {
                lv_itGroup2 = UnitGroupUnitFromEnd(auto51F79180_g, auto51F79180_u);
                if (lv_itGroup2 == null) { break; }
                if ((UnitIsAlive(lv_itGroup2) == false)) {
                    continue;
                }

                libAMGT_gf_ARMGardenMinionDropsSeeds(lv_itGroup2);
            }
        }
        Wait(0.25, c_timeGame);
    }
    return true;
}

void libAMGT_gf_ARMGardenMinionDropsSeeds (unit lp_bossIndex) {
    // Variable Declarations
    int lv_droppedIndex;
    int lv_dropIndex;
    int lv_dropIndexMax;
    int lv_itDrop;
    int lv_itSeed;
    fixed lv_percent;

    // Automatic Variable Declarations
    int auto214A1643_ae;
    const int auto214A1643_ai = 1;
    const int auto38417DDE_ae = libAMGT_gv_aRMGardenSeedsMinionPerHPDrop_C;
    const int auto38417DDE_ai = 1;

    // Variable Initialization

    // Implementation
    lv_percent = UnitGetPropertyFixed(lp_bossIndex, c_unitPropLifePercent, c_unitPropCurrent);
    lv_droppedIndex = libCore_gf_IntegerStoredForUnit(lp_bossIndex, 2);
    lv_dropIndexMax = ((libAMGT_gv_aRMGardenSeedsMinionStartHPPercent_C+FixedToInt(libAMGT_gv_aRMGardenSeedsMinionPerHPPercent_C)-1)/FixedToInt(libAMGT_gv_aRMGardenSeedsMinionPerHPPercent_C));
    if ((UnitIsAlive(lp_bossIndex) == true)) {
        lv_dropIndex = ((libAMGT_gv_aRMGardenSeedsMinionStartHPPercent_C+FixedToInt(libAMGT_gv_aRMGardenSeedsMinionPerHPPercent_C)-1-FixedToInt(lv_percent))/FixedToInt(libAMGT_gv_aRMGardenSeedsMinionPerHPPercent_C));
        lv_dropIndex = MinI(lv_dropIndex, lv_dropIndexMax);
    }
    else {
        lv_dropIndex = lv_dropIndexMax;
    }
    if ((lv_dropIndex > lv_droppedIndex)) {
        libCore_gf_StoreIntegerForUnit(lp_bossIndex, 2, lv_dropIndex);
        auto214A1643_ae = lv_dropIndex;
        lv_itDrop = (lv_droppedIndex + 1);
        for ( ; ( (auto214A1643_ai >= 0 && lv_itDrop <= auto214A1643_ae) || (auto214A1643_ai < 0 && lv_itDrop >= auto214A1643_ae) ) ; lv_itDrop += auto214A1643_ai ) {
            lv_itSeed = 1;
            for ( ; ( (auto38417DDE_ai >= 0 && lv_itSeed <= auto38417DDE_ae) || (auto38417DDE_ai < 0 && lv_itSeed >= auto38417DDE_ae) ) ; lv_itSeed += auto38417DDE_ai ) {
                libAMGT_gf_ARMGardenDropSeeds(UnitGetPosition(lp_bossIndex), 1, false);
            }
        }
    }

}

void libAMGT_gf_ARMGardenAddTerror (unit lp_terror, region lp_area) {
    // Automatic Variable Declarations
    // Implementation
    libAMGT_gv_aRMGardenTerrorCount += 1;
    libAMGT_gv_aRMGardenTerrors[libAMGT_gv_aRMGardenTerrorCount].lv_area = lp_area;
    libAMGT_gv_aRMGardenTerrors[libAMGT_gv_aRMGardenTerrorCount].lv_position = UnitGetPosition(lp_terror);
    PointSetFacing(libAMGT_gv_aRMGardenTerrors[libAMGT_gv_aRMGardenTerrorCount].lv_position, UnitGetFacing(lp_terror));
    UnitRemove(lp_terror);
    libAMGT_gv_aRMGardenTerrors[libAMGT_gv_aRMGardenTerrorCount].lv_terror = null;
    libAMGT_gv_aRMGardenTerrors[libAMGT_gv_aRMGardenTerrorCount].lv_spawning = false;
}

trigger auto_libAMGT_gf_ARMGardenSpawnTerrorsSingle_Trigger = null;
int auto_libAMGT_gf_ARMGardenSpawnTerrorsSingle_lp_index;

void libAMGT_gf_ARMGardenSpawnTerrorsSingle (int lp_index) {
    auto_libAMGT_gf_ARMGardenSpawnTerrorsSingle_lp_index = lp_index;

    if (auto_libAMGT_gf_ARMGardenSpawnTerrorsSingle_Trigger == null) {
        auto_libAMGT_gf_ARMGardenSpawnTerrorsSingle_Trigger = TriggerCreate("auto_libAMGT_gf_ARMGardenSpawnTerrorsSingle_TriggerFunc");
    }

    TriggerExecute(auto_libAMGT_gf_ARMGardenSpawnTerrorsSingle_Trigger, false, false);
}

bool auto_libAMGT_gf_ARMGardenSpawnTerrorsSingle_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_libAMGT_gf_ARMGardenSpawnTerrorsSingle_lp_index;

    // Variable Declarations
    int lv_ping1;
    int lv_ping2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping1 = c_invalidPingId;
    lv_ping2 = c_invalidPingId;

    // Implementation
    if ((libAMGT_gv_aRMGardenTerrors[lp_index].lv_spawning == true)) {
        return true;
    }

    libAMGT_gv_aRMGardenTerrors[lp_index].lv_spawning = true;
    DialogControlSetVisible(libAMGT_gv_aRMGardenPanel.lv_gardenOfTerrorGolemFrame, PlayerGroupAll(), true);
    PingCreateFromData(PlayerGroupAll(), "StormArenaAlert", libAMGT_gv_aRMGardenTerrors[lp_index].lv_position);
    PingSetColor(PingLastCreated(), Color(100.00, 100.00, 0.00));
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_AMGT_95104AF5"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_ping1 = PingLastCreated();
    PingCreateFromData(PlayerGroupAll(), "StormObjective", libAMGT_gv_aRMGardenTerrors[lp_index].lv_position);
    PingSetColor(PingLastCreated(), Color(100.00, 100.00, 0.00));
    PingSetScale(PingLastCreated(), 0.8);
    lv_ping2 = PingLastCreated();
    SoundPlayForPlayer(SoundLink("ArenaMode_Crowd_Cheer_EventReady", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "JunglePlantHorror", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Hostile, libAMGT_gv_aRMGardenTerrors[lp_index].lv_position, null);
    libAMGT_gv_aRMGardenTerrors[lp_index].lv_terror = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_gardengolem.dds");
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetMinimapVisibility 1");
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetMinimapVisibilityAlways 1");
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "MinimapIconScale 0.700000");
    libAIAI_gf_StartDefenderAI(false, libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), libAMGT_gv_aRMGardenTerrors[lp_index].lv_area, null, false);
    AddUnitOfInterest(UnitLastCreated(), 0.0, 0.0, "KillGardenTerror", libNtve_ge_GoalTeam_Both, 0);
    Wait(10.0, c_timeGame);
    PingDestroy(lv_ping1);
    PingDestroy(lv_ping2);
    libAMGT_gv_aRMGardenTerrors[lp_index].lv_spawning = false;
    return true;
}

int libAMGT_gf_ARMGardenTerrorIndex (unit lp_terror) {
    // Variable Declarations
    int lv_itTerrorIndex;

    // Automatic Variable Declarations
    int auto05953537_ae;
    const int auto05953537_ai = 1;

    // Variable Initialization

    // Implementation
    auto05953537_ae = libAMGT_gv_aRMGardenTerrorCount;
    lv_itTerrorIndex = 1;
    for ( ; ( (auto05953537_ai >= 0 && lv_itTerrorIndex <= auto05953537_ae) || (auto05953537_ai < 0 && lv_itTerrorIndex >= auto05953537_ae) ) ; lv_itTerrorIndex += auto05953537_ai ) {
        if ((libAMGT_gv_aRMGardenTerrors[lv_itTerrorIndex].lv_terror == lp_terror)) {
            return lv_itTerrorIndex;
        }

    }
    return 0;
}

trigger auto_libAMGT_gf_ARMGardenTerrorsDroppingSeeds_Trigger = null;

void libAMGT_gf_ARMGardenTerrorsDroppingSeeds () {
    if (auto_libAMGT_gf_ARMGardenTerrorsDroppingSeeds_Trigger == null) {
        auto_libAMGT_gf_ARMGardenTerrorsDroppingSeeds_Trigger = TriggerCreate("auto_libAMGT_gf_ARMGardenTerrorsDroppingSeeds_TriggerFunc");
    }

    TriggerExecute(auto_libAMGT_gf_ARMGardenTerrorsDroppingSeeds_Trigger, false, false);
}

bool auto_libAMGT_gf_ARMGardenTerrorsDroppingSeeds_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itGroup;

    // Automatic Variable Declarations
    int auto771AA39C_ae;
    const int auto771AA39C_ai = 1;

    // Variable Initialization

    // Implementation
    while (true) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        auto771AA39C_ae = libAMGT_gv_aRMGardenTerrorCount;
        lv_itGroup = 1;
        for ( ; ( (auto771AA39C_ai >= 0 && lv_itGroup <= auto771AA39C_ae) || (auto771AA39C_ai < 0 && lv_itGroup >= auto771AA39C_ae) ) ; lv_itGroup += auto771AA39C_ai ) {
            if ((UnitIsAlive(libAMGT_gv_aRMGardenTerrors[lv_itGroup].lv_terror) == false)) {
                continue;
            }

            libAMGT_gf_ARMGardenTerrorDropsSeeds(libAMGT_gv_aRMGardenTerrors[lv_itGroup].lv_terror);
        }
        Wait(0.25, c_timeGame);
    }
    return true;
}

void libAMGT_gf_ARMGardenTerrorDropsSeeds (unit lp_bossIndex) {
    // Variable Declarations
    int lv_itTerrorIndex;
    int lv_droppedIndex;
    int lv_dropIndex;
    int lv_dropIndexMax;
    int lv_itDrop;
    int lv_itSeed;
    fixed lv_percent;
    point lv_dropLoc;
    point lv_dropLocTemp;

    // Automatic Variable Declarations
    int autoF3E48E0A_ae;
    const int autoF3E48E0A_ai = 1;
    const int auto2C96026B_ae = libAMGT_gv_aRMGardenSeedsTerrorPerHPDrop_C;
    const int auto2C96026B_ai = 1;
    int autoA633DC79_ae;
    const int autoA633DC79_ai = 1;
    const int auto1FA089EA_n = 20;
    int auto1FA089EA_i;

    // Variable Initialization

    // Implementation
    lv_itTerrorIndex = libAMGT_gf_ARMGardenTerrorIndex(lp_bossIndex);
    if ((lv_itTerrorIndex <= 0)) {
        return ;
    }

    lv_percent = UnitGetPropertyFixed(lp_bossIndex, c_unitPropLifePercent, c_unitPropCurrent);
    lv_droppedIndex = libCore_gf_IntegerStoredForUnit(lp_bossIndex, 2);
    lv_dropIndexMax = ((libAMGT_gv_aRMGardenSeedsTerrorStartHPPercent_C+FixedToInt(libAMGT_gv_aRMGardenSeedsTerrorPerHPPercent_C)-1)/FixedToInt(libAMGT_gv_aRMGardenSeedsTerrorPerHPPercent_C));
    if ((UnitIsAlive(lp_bossIndex) == true)) {
        lv_dropIndex = ((libAMGT_gv_aRMGardenSeedsTerrorStartHPPercent_C+FixedToInt(libAMGT_gv_aRMGardenSeedsTerrorPerHPPercent_C)-1-FixedToInt(lv_percent))/FixedToInt(libAMGT_gv_aRMGardenSeedsTerrorPerHPPercent_C));
        lv_dropIndex = MinI(lv_dropIndex, lv_dropIndexMax);
    }
    else {
        lv_dropIndex = lv_dropIndexMax;
    }
    if ((lv_dropIndex > lv_droppedIndex)) {
        libCore_gf_StoreIntegerForUnit(lp_bossIndex, 2, lv_dropIndex);
        autoF3E48E0A_ae = lv_dropIndex;
        lv_itDrop = (lv_droppedIndex + 1);
        for ( ; ( (autoF3E48E0A_ai >= 0 && lv_itDrop <= autoF3E48E0A_ae) || (autoF3E48E0A_ai < 0 && lv_itDrop >= autoF3E48E0A_ae) ) ; lv_itDrop += autoF3E48E0A_ai ) {
            lv_itSeed = 1;
            for ( ; ( (auto2C96026B_ai >= 0 && lv_itSeed <= auto2C96026B_ae) || (auto2C96026B_ai < 0 && lv_itSeed >= auto2C96026B_ae) ) ; lv_itSeed += auto2C96026B_ai ) {
                libAMGT_gf_ARMGardenDropSeeds(UnitGetPosition(lp_bossIndex), 1, true);
            }
        }
    }

    lv_droppedIndex = libCore_gf_IntegerStoredForUnit(lp_bossIndex, 3);
    lv_dropIndexMax = 2;
    if ((UnitIsAlive(lp_bossIndex) == true)) {
        if ((lv_percent <= 30.0)) {
            lv_dropIndex = 2;
        }
        else if ((lv_percent <= 70.0)) {
            lv_dropIndex = 1;
        }
        else if (true) {
            lv_dropIndex = 0;
        }
    }
    else {
        lv_dropIndex = lv_dropIndexMax;
    }
    if ((lv_dropIndex > lv_droppedIndex)) {
        libCore_gf_StoreIntegerForUnit(lp_bossIndex, 3, lv_dropIndex);
        autoA633DC79_ae = lv_dropIndex;
        lv_itDrop = (lv_droppedIndex + 1);
        for ( ; ( (autoA633DC79_ai >= 0 && lv_itDrop <= autoA633DC79_ae) || (autoA633DC79_ai < 0 && lv_itDrop >= autoA633DC79_ae) ) ; lv_itDrop += autoA633DC79_ai ) {
            lv_dropLoc = null;
            for (auto1FA089EA_i = 1; auto1FA089EA_i <= auto1FA089EA_n; auto1FA089EA_i += 1) {
                lv_dropLocTemp = PointWithOffsetPolar(UnitGetPosition(lp_bossIndex), RandomFixed(5.0, 6.5), libNtve_gf_RandomAngle());
                if ((RegionContainsPoint(libAMGT_gv_aRMGardenTerrors[lv_itTerrorIndex].lv_area, lv_dropLocTemp) == true)) {
                    lv_dropLoc = lv_dropLocTemp;
                    break;
                }

            }
            if ((lv_dropLoc == null)) {
                lv_dropLoc = PointWithOffsetPolar(UnitGetPosition(lp_bossIndex), RandomFixed(2.0, 3.0), libNtve_gf_RandomAngle());
            }

            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RegenGlobeNeutral", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, lv_dropLoc, null);
        }
    }

}

void libAMGT_gf_ARMGardenL1SpawnNextTerror (int lp_lastTerror) {
    // Automatic Variable Declarations
    int autoD1845EC1_val;
    int auto015DF750_val;

    // Implementation
    if (((libGame_gv_gameOver == true) || (libAMGT_gf_ARMGardenCurrentLevel() != libAMGT_ge_ARMGardenLevel_Level1))) {
        return ;
    }

    autoD1845EC1_val = lp_lastTerror;
    if (autoD1845EC1_val == 1) {
        libAMGT_gv_aRMGardenL1TerrorSpawnIndex = 2;
    }
    else if (autoD1845EC1_val == 2) {
        libAMGT_gv_aRMGardenL1TerrorSpawnIndex = 3;
    }
    else if (autoD1845EC1_val == 3) {
        libAMGT_gv_aRMGardenL1TerrorSpawnIndex = 1;
    }
    else {
        libAMGT_gv_aRMGardenL1TerrorSpawnIndex = 1;
    }
    auto015DF750_val = libAMGT_gv_aRMGardenL1TerrorSpawnIndex;
    if (auto015DF750_val == 1) {
        libAMGT_gf_ARMGardenSpawnMinionGroupSingle(1, true);
        libAMGT_gf_ARMGardenSpawnMinionGroupSingle(2, true);
        libAMGT_gf_ARMGardenSpawnTerrorsSingle(1);
    }
    else if (auto015DF750_val == 2) {
        libAMGT_gf_ARMGardenSpawnMinionGroupSingle(3, true);
        libAMGT_gf_ARMGardenSpawnMinionGroupSingle(4, true);
        libAMGT_gf_ARMGardenSpawnTerrorsSingle(2);
    }
    else if (auto015DF750_val == 3) {
        libAMGT_gf_ARMGardenSpawnTerrorsSingle(3);
    }
    else {
    }
}

trigger auto_libAMGT_gf_ARMGardenL2SpawnNextTerror_Trigger = null;
int auto_libAMGT_gf_ARMGardenL2SpawnNextTerror_lp_lastTerror;

void libAMGT_gf_ARMGardenL2SpawnNextTerror (int lp_lastTerror) {
    auto_libAMGT_gf_ARMGardenL2SpawnNextTerror_lp_lastTerror = lp_lastTerror;

    if (auto_libAMGT_gf_ARMGardenL2SpawnNextTerror_Trigger == null) {
        auto_libAMGT_gf_ARMGardenL2SpawnNextTerror_Trigger = TriggerCreate("auto_libAMGT_gf_ARMGardenL2SpawnNextTerror_TriggerFunc");
    }

    TriggerExecute(auto_libAMGT_gf_ARMGardenL2SpawnNextTerror_Trigger, false, false);
}

bool auto_libAMGT_gf_ARMGardenL2SpawnNextTerror_TriggerFunc (bool testConds, bool runActions) {
    int lp_lastTerror = auto_libAMGT_gf_ARMGardenL2SpawnNextTerror_lp_lastTerror;

    // Variable Declarations
    int lv_nextTerror;
    bool lv_shamblerGroupsSpawned;

    // Automatic Variable Declarations
    int autoF49CDDDF_val;

    // Variable Initialization

    // Implementation
    if (((libGame_gv_gameOver == true) || (libAMGT_gf_ARMGardenCurrentLevel() != libAMGT_ge_ARMGardenLevel_Level2))) {
        return true;
    }

    autoF49CDDDF_val = lp_lastTerror;
    if (autoF49CDDDF_val == 1) {
        lv_nextTerror = 2;
    }
    else if (autoF49CDDDF_val == 2) {
        lv_nextTerror = 1;
    }
    else {
        lv_nextTerror = 1;
    }
    libAMGT_gf_ARMGardenSpawnTerrorsSingle(lv_nextTerror);
    Wait(2.0, c_timeGame);
    while (true) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((UnitGetPropertyFixed(libAMGT_gv_aRMGardenTerrors[lv_nextTerror].lv_terror, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0) && (lv_shamblerGroupsSpawned == false)) {
            libAMGT_gf_ARMGardenSpawnMinionGroupSingle(1, true);
            libAMGT_gf_ARMGardenSpawnMinionGroupSingle(2, true);
            lv_shamblerGroupsSpawned = true;
        }
        else if ((UnitIsAlive(libAMGT_gv_aRMGardenTerrors[lv_nextTerror].lv_terror) == false)) {
            Wait(5.0, c_timeGame);
            libAMGT_gf_ARMGardenL2SpawnNextTerror(lv_nextTerror);
            return true;
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

void libAMGT_gf_ARMGardenL3SpawnTerror () {
    // Variable Declarations
    int lv_itMinionGroupIndex;

    // Automatic Variable Declarations
    int auto641C40A5_ae;
    const int auto641C40A5_ai = 1;

    // Variable Initialization

    // Implementation
    if (((libGame_gv_gameOver == true) || (libAMGT_gf_ARMGardenCurrentLevel() != libAMGT_ge_ARMGardenLevel_Level3))) {
        return ;
    }

    if ((libAMGT_gv_aRMGardenTerrors[1].lv_terror != null) && (UnitIsAlive(libAMGT_gv_aRMGardenTerrors[1].lv_terror) == true)) {
        return ;
    }

    auto641C40A5_ae = libAMGT_gv_aRMGardenMinionGroupCount;
    lv_itMinionGroupIndex = 1;
    for ( ; ( (auto641C40A5_ai >= 0 && lv_itMinionGroupIndex <= auto641C40A5_ae) || (auto641C40A5_ai < 0 && lv_itMinionGroupIndex >= auto641C40A5_ae) ) ; lv_itMinionGroupIndex += auto641C40A5_ai ) {
        if ((libNtve_gf_UnitGroupIsDead(libAMGT_gv_aRMGardenMinionGroup[lv_itMinionGroupIndex].lv_units) == false)) {
            return ;
        }

    }
    libAMGT_gf_ARMGardenSpawnTerrorsSingle(1);
}

void libAMGT_gf_ARMGardenL3SpawnMinions () {
    // Variable Declarations
    int lv_itMinionGroupIndex;

    // Automatic Variable Declarations
    int auto6C7D0F4D_ae;
    const int auto6C7D0F4D_ai = 1;

    // Variable Initialization

    // Implementation
    if (((libGame_gv_gameOver == true) || (libAMGT_gf_ARMGardenCurrentLevel() != libAMGT_ge_ARMGardenLevel_Level3))) {
        return ;
    }

    auto6C7D0F4D_ae = libAMGT_gv_aRMGardenMinionGroupCount;
    lv_itMinionGroupIndex = 1;
    for ( ; ( (auto6C7D0F4D_ai >= 0 && lv_itMinionGroupIndex <= auto6C7D0F4D_ae) || (auto6C7D0F4D_ai < 0 && lv_itMinionGroupIndex >= auto6C7D0F4D_ae) ) ; lv_itMinionGroupIndex += auto6C7D0F4D_ai ) {
        libAMGT_gf_ARMGardenSpawnMinionGroupSingle(lv_itMinionGroupIndex, true);
    }
}

trigger auto_libAMGT_gf_ARMGardenTransmissionOrder50_Trigger = null;

void libAMGT_gf_ARMGardenTransmissionOrder50 () {
    if (auto_libAMGT_gf_ARMGardenTransmissionOrder50_Trigger == null) {
        auto_libAMGT_gf_ARMGardenTransmissionOrder50_Trigger = TriggerCreate("auto_libAMGT_gf_ARMGardenTransmissionOrder50_TriggerFunc");
    }

    TriggerExecute(auto_libAMGT_gf_ARMGardenTransmissionOrder50_Trigger, false, false);
}

bool auto_libAMGT_gf_ARMGardenTransmissionOrder50_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupOrder;
    playergroup lv_groupChaos;
    playergroup lv_observers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupOrder = PlayerGroupEmpty();
    lv_groupChaos = PlayerGroupEmpty();
    lv_observers = PlayerGroupEmpty();

    // Implementation
    TriggerQueueEnter();
    libAMGT_gf_ARMGardenShowTeamProgressAnnouncement(libGame_gv_teamOrderIndex_C, 50);
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Gardens 50% - Left", "Value", 1, 1);
    lv_groupOrder = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupChaos = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_observers = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("ArenaVO", ("Left"), lv_groupOrder);
    ConversationDataLineSetPlayers("ArenaVO", ("Right"), lv_groupChaos);
    ConversationDataLineSetPlayers("ArenaVO", ("Observer"), lv_observers);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMGT_gf_ARMGardenTransmissionOrder80_Trigger = null;

void libAMGT_gf_ARMGardenTransmissionOrder80 () {
    if (auto_libAMGT_gf_ARMGardenTransmissionOrder80_Trigger == null) {
        auto_libAMGT_gf_ARMGardenTransmissionOrder80_Trigger = TriggerCreate("auto_libAMGT_gf_ARMGardenTransmissionOrder80_TriggerFunc");
    }

    TriggerExecute(auto_libAMGT_gf_ARMGardenTransmissionOrder80_Trigger, false, false);
}

bool auto_libAMGT_gf_ARMGardenTransmissionOrder80_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupOrder;
    playergroup lv_groupChaos;
    playergroup lv_observers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupOrder = PlayerGroupEmpty();
    lv_groupChaos = PlayerGroupEmpty();
    lv_observers = PlayerGroupEmpty();

    // Implementation
    TriggerQueueEnter();
    libAMGT_gf_ARMGardenShowTeamProgressAnnouncement(libGame_gv_teamOrderIndex_C, 80);
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Gardens 80% - Left", "Value", 1, 1);
    lv_groupOrder = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupChaos = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_observers = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("ArenaVO", ("Left"), lv_groupOrder);
    ConversationDataLineSetPlayers("ArenaVO", ("Right"), lv_groupChaos);
    ConversationDataLineSetPlayers("ArenaVO", ("Observer"), lv_observers);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMGT_gf_ARMGardenTransmissionChaos50_Trigger = null;

void libAMGT_gf_ARMGardenTransmissionChaos50 () {
    if (auto_libAMGT_gf_ARMGardenTransmissionChaos50_Trigger == null) {
        auto_libAMGT_gf_ARMGardenTransmissionChaos50_Trigger = TriggerCreate("auto_libAMGT_gf_ARMGardenTransmissionChaos50_TriggerFunc");
    }

    TriggerExecute(auto_libAMGT_gf_ARMGardenTransmissionChaos50_Trigger, false, false);
}

bool auto_libAMGT_gf_ARMGardenTransmissionChaos50_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupOrder;
    playergroup lv_groupChaos;
    playergroup lv_observers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupOrder = PlayerGroupEmpty();
    lv_groupChaos = PlayerGroupEmpty();
    lv_observers = PlayerGroupEmpty();

    // Implementation
    TriggerQueueEnter();
    libAMGT_gf_ARMGardenShowTeamProgressAnnouncement(libGame_gv_teamChaosIndex_C, 50);
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Gardens 50% - Right", "Value", 1, 1);
    lv_groupOrder = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupChaos = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_observers = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("ArenaVO", ("Left"), lv_groupOrder);
    ConversationDataLineSetPlayers("ArenaVO", ("Right"), lv_groupChaos);
    ConversationDataLineSetPlayers("ArenaVO", ("Observer"), lv_observers);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMGT_gf_ARMGardenTransmissionChaos80_Trigger = null;

void libAMGT_gf_ARMGardenTransmissionChaos80 () {
    if (auto_libAMGT_gf_ARMGardenTransmissionChaos80_Trigger == null) {
        auto_libAMGT_gf_ARMGardenTransmissionChaos80_Trigger = TriggerCreate("auto_libAMGT_gf_ARMGardenTransmissionChaos80_TriggerFunc");
    }

    TriggerExecute(auto_libAMGT_gf_ARMGardenTransmissionChaos80_Trigger, false, false);
}

bool auto_libAMGT_gf_ARMGardenTransmissionChaos80_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupOrder;
    playergroup lv_groupChaos;
    playergroup lv_observers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupOrder = PlayerGroupEmpty();
    lv_groupChaos = PlayerGroupEmpty();
    lv_observers = PlayerGroupEmpty();

    // Implementation
    TriggerQueueEnter();
    libAMGT_gf_ARMGardenShowTeamProgressAnnouncement(libGame_gv_teamChaosIndex_C, 80);
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Gardens 80% - Right", "Value", 1, 1);
    lv_groupOrder = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupChaos = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_observers = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("ArenaVO", ("Left"), lv_groupOrder);
    ConversationDataLineSetPlayers("ArenaVO", ("Right"), lv_groupChaos);
    ConversationDataLineSetPlayers("ArenaVO", ("Observer"), lv_observers);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

void libAMGT_gf_MapMechanicsGardenOfTerrorSetSeedCountForTeam (int lp_team, int lp_countText) {
    // Variable Declarations
    fixed lv_coreLife;
    int lv_countText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_countText == 0)) {
        lv_coreLife = 0.1;
        lv_countText = 0;
    }
    else {
        if ((lp_countText > libAMGT_gv_aRMGardenSeedRequired_C)) {
            lv_coreLife = libAMGT_gv_aRMGardenSeedRequired_C;
            lv_countText = libAMGT_gv_aRMGardenSeedRequired_C;
        }
        else {
            lv_coreLife = lp_countText;
            lv_countText = lp_countText;
        }
    }
    UnitSetPropertyFixed(libGame_gv_teams[lp_team].lv_core, c_unitPropLife, lv_coreLife);
    libNtve_gf_SetDialogItemText(libAMGT_gv_aRMGardenPanel.lv_seedsCounts[lp_team], IntToText(lv_countText), PlayerGroupAll());
}

void libAMGT_gf_MapMechanicsGardenOfTerrorSetUpGolemStatusBarForTeam (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    if (true) {
    }
    else {
        UnitSetPropertyFixed(libGame_gv_teams[lp_team].lv_core, c_unitPropLife, 1.0);
    }
    TextExpressionSetToken("Param/Expression/lib_AMGT_42539922", "A", IntToText(FixedToInt(UnitGetPropertyFixed(libGame_gv_teams[lp_team].lv_core, c_unitPropLifePercent, c_unitPropCurrent))));
    libNtve_gf_SetDialogItemText(libAMGT_gv_aRMGardenPanel.lv_seedsCounts[lp_team], TextExpressionAssemble("Param/Expression/lib_AMGT_42539922"), PlayerGroupAll());
}

void libAMGT_gf_ARMGardenShowTeamProgressAnnouncement (int lp_team, int lp_seeds) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_AMGT_BCCF627C", "Seeds", IntToText(lp_seeds));
    libNtve_gf_SetDialogItemText(libAMGT_gv_aRMGardenPanel.lv_progressNotificationLabel[lp_team], TextExpressionAssemble("Param/Expression/lib_AMGT_BCCF627C"), GameAttributePlayersForTeam(lp_team));
    TextExpressionSetToken("Param/Expression/lib_AMGT_930A0D1C", "Seeds", IntToText(lp_seeds));
    libNtve_gf_SetDialogItemText(libAMGT_gv_aRMGardenPanel.lv_progressNotificationLabel[lp_team], TextExpressionAssemble("Param/Expression/lib_AMGT_930A0D1C"), GameAttributePlayersForTeam(libGame_gf_EnemyTeam(lp_team)));
    DialogControlSendAnimationEvent(libAMGT_gv_aRMGardenPanel.lv_progressNotification[lp_team], GameAttributePlayersForTeam(lp_team), "ShowStandardNotification");
    DialogControlSendAnimationEvent(libAMGT_gv_aRMGardenPanel.lv_progressNotification[lp_team], GameAttributePlayersForTeam(libGame_gf_EnemyTeam(lp_team)), "ShowEnemyNotification");
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Garden> Set Round Order
//--------------------------------------------------------------------------------------------------
bool libAMGT_gt_ARMGardenSetRoundOrder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libAREN_gf_ArenaAddRound((libAMGT_gv_aRMGardenLevelRegisteredMechIds[1]));
    libAREN_gf_ArenaAddRound((libAMGT_gv_aRMGardenLevelRegisteredMechIds[2]));
    libAREN_gf_ArenaAddRound((libAMGT_gv_aRMGardenLevelRegisteredMechIds[3]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMGT_gt_ARMGardenSetRoundOrder_Init () {
    libAMGT_gt_ARMGardenSetRoundOrder = TriggerCreate("libAMGT_gt_ARMGardenSetRoundOrder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Garden> Initialization
//--------------------------------------------------------------------------------------------------
bool libAMGT_gt_ARMGardenInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_monsterGroup;
    unit lv_monster;

    // Automatic Variable Declarations
    unitgroup auto28FD1A94_g;
    int auto28FD1A94_u;

    // Variable Initialization
    lv_monsterGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_monsterGroup = UnitGroup("Shambler", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_monsterGroup, UnitGroup("ShamblerRanged", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_monsterGroup, UnitGroup("JunglePlantHorror", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto28FD1A94_g = lv_monsterGroup;
    auto28FD1A94_u = UnitGroupCount(auto28FD1A94_g, c_unitCountAll);
    for (;; auto28FD1A94_u -= 1) {
        lv_monster = UnitGroupUnitFromEnd(auto28FD1A94_g, auto28FD1A94_u);
        if (lv_monster == null) { break; }
        libNtve_gf_ShowHideUnit(lv_monster, false);
        libNtve_gf_PauseUnit(lv_monster, true);
        libNtve_gf_MakeUnitInvulnerable(lv_monster, true);
    }
    libAREN_gv_showCoreStatusBars = false;
    libUIUI_gf_PingCreateNewPingTarget("Shambler", false, null, StringExternal("Param/Value/lib_AMGT_494F7434"), StringExternal("Param/Value/lib_AMGT_CE401EFB"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingCreateNewPingTarget("JunglePlantHorror", false, null, StringExternal("Param/Value/lib_AMGT_11C87D71"), StringExternal("Param/Value/lib_AMGT_DDB7993C"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMGT_gt_ARMGardenInitialization_Init () {
    libAMGT_gt_ARMGardenInitialization = TriggerCreate("libAMGT_gt_ARMGardenInitialization_Func");
    libCore_gf_IncludeModInitialization(libAMGT_gt_ARMGardenInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Garden> Level Start
//--------------------------------------------------------------------------------------------------
bool libAMGT_gt_ARMGardenLevelStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_levelIndex;
    int lv_itTempleIndex;
    int lv_itPlayer;
    int lv_itTeam;
    unit lv_unit;

    // Automatic Variable Declarations
    int autoE21D1462_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_levelIndex = libAREN_gf_ArenaCurrentLevelIndex();
    libAREN_gv_aRM_VictorySequencePlaying = false;
    libAMGT_gf_ARMGardenClearSpawnGroup();
    libAMGT_gv_aRMGardenTeamSeedsCollected[1] = 0;
    libAMGT_gv_aRMGardenTeamSeedsCollected[2] = 0;
    libAMGT_gv_aRMGardenWarningMessageLevel[1] = 0;
    libAMGT_gv_aRMGardenWarningMessageLevel[2] = 0;
    if ((libMapM_gv_mapMechanicControllerActor == null)) {
        libNtve_gf_CreateActorAtPoint("MMController", RegionGetCenter(RegionEntireMap()));
        libMapM_gv_mapMechanicControllerActor = libNtve_gf_ActorLastCreated();
    }

    if ((libAMGT_gv_aRMGardenLevelStartCallback[lv_levelIndex] != null)) {
        TriggerExecute(libAMGT_gv_aRMGardenLevelStartCallback[lv_levelIndex], true, false);
    }

    TriggerEnable(libAMGT_gt_ARMGardenGatesOpened, true);
    TriggerEnable(libAMGT_gt_ARMGardenSeedDropped, true);
    TriggerEnable(libAMGT_gt_ARMGardenSeedPickup, true);
    TriggerEnable(libAMGT_gt_ARMGardenMinionDies, true);
    TriggerEnable(libAMGT_gt_ARMGardenTerrorDies, true);
    autoE21D1462_val = libAMGT_gf_ARMGardenCurrentLevel();
    if (autoE21D1462_val == libAMGT_ge_ARMGardenLevel_Level1) {
        libAMGT_gv_aRMGardenL1MinionSpawnSide = RandomInt(1, 2);
        libAMGT_gf_ARMGardenTurnOnOffNightSettings(false);
        libCore_gv_mAPMapAmbience = "Amb_2D_GardenOfTerror_Day";
    }
    else if (autoE21D1462_val == libAMGT_ge_ARMGardenLevel_Level2) {
        libAMGT_gf_ARMGardenTurnOnOffNightSettings(true);
        libCore_gv_mAPMapAmbience = "Amb_2D_GardenOfTerror_Night";
    }
    else if (autoE21D1462_val == libAMGT_ge_ARMGardenLevel_Level3) {
        libAMGT_gf_ARMGardenTurnOnOffNightSettings(true);
        libCore_gv_mAPMapAmbience = "Amb_2D_GardenOfTerror_Night";
    }
    else {
    }
    TriggerExecute(libAMGT_gt_ARMGardenPanelInit, true, false);
    libAMGT_gf_MapMechanicsGardenOfTerrorSetSeedCountForTeam(1, 0);
    libAMGT_gf_MapMechanicsGardenOfTerrorSetSeedCountForTeam(2, 0);
    libAMGT_gf_MapMechanicsGardenOfTerrorSetSeedCountForTeam(libGame_gv_teamOrderIndex_C, libAMGT_gv_aRMGardenTeamSeedsCollected[libGame_gv_teamOrderIndex_C]);
    libAMGT_gf_MapMechanicsGardenOfTerrorSetSeedCountForTeam(libGame_gv_teamChaosIndex_C, libAMGT_gv_aRMGardenTeamSeedsCollected[libGame_gv_teamChaosIndex_C]);
    libAMGT_gv_fertilePlotLocations[libGame_gv_teamOrderIndex_C][libAREN_gf_ArenaCurrentLevelIndex()] = UnitGetPosition(libAMGT_gv_fertilePlot[libGame_gv_teamOrderIndex_C][libAREN_gf_ArenaCurrentLevelIndex()]);
    libAMGT_gv_fertilePlotLocations[libGame_gv_teamChaosIndex_C][libAREN_gf_ArenaCurrentLevelIndex()] = UnitGetPosition(libAMGT_gv_fertilePlot[libGame_gv_teamChaosIndex_C][libAREN_gf_ArenaCurrentLevelIndex()]);
    libStEx_gf_MoveUnit(libAMGT_gv_fertilePlot[libGame_gv_teamOrderIndex_C][libAREN_gf_ArenaCurrentLevelIndex()], Point(0.0, 0.0), false);
    libStEx_gf_MoveUnit(libAMGT_gv_fertilePlot[libGame_gv_teamChaosIndex_C][libAREN_gf_ArenaCurrentLevelIndex()], Point(0.0, 0.0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMGT_gt_ARMGardenLevelStart_Init () {
    libAMGT_gt_ARMGardenLevelStart = TriggerCreate("libAMGT_gt_ARMGardenLevelStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Garden> Gates Opened
//--------------------------------------------------------------------------------------------------
bool libAMGT_gt_ARMGardenGatesOpened_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_moonwell;

    // Automatic Variable Declarations
    int auto2006B483_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libAMGT_gv_aRMGardenMapEventDisabled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto2006B483_val = libAREN_gf_ArenaCurrentRoundIndex();
    if (auto2006B483_val == 1) {
        Wait(libAMGT_gv_aRMGardenStartDelay_C, c_timeGame);
        libAMGT_gf_ARMGardenSpawnMonsters();
    }
    else if (auto2006B483_val == 2) {
        Wait(libAMGT_gv_aRMGardenStartDelay_C, c_timeGame);
        libAMGT_gf_ARMGardenSpawnMonsters();
    }
    else if (auto2006B483_val == 3) {
        Wait(libAMGT_gv_aRMGardenStartDelay_C, c_timeGame);
        libAMGT_gf_ARMGardenSpawnMonsters();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMGT_gt_ARMGardenGatesOpened_Init () {
    libAMGT_gt_ARMGardenGatesOpened = TriggerCreate("libAMGT_gt_ARMGardenGatesOpened_Func");
    TriggerEnable(libAMGT_gt_ARMGardenGatesOpened, false);
    TriggerAddEventTimer(libAMGT_gt_ARMGardenGatesOpened, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Garden> Seed Dropped
//--------------------------------------------------------------------------------------------------
bool libAMGT_gt_ARMGardenSeedDropped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_seed;
    int lv_itTeam;
    bool[3] lv_visionShared;

    // Automatic Variable Declarations
    const int auto740A6C94_ae = 2;
    const int auto740A6C94_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "ItemSeedPickup"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_seed = EventUnitCreatedUnit();
    SoundPlayAtPointForPlayer(SoundLink("UI_SeedPickup_Drop", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnitCreatedUnit()), 0.0, 100.0, 0.5);
    AIAddCollectable(lv_seed, "CollectSeeds", 1.0);
    while (true) {
        if ((UnitIsAlive(lv_seed) == false)) {
            return true;
        }

        lv_itTeam = 1;
        for ( ; ( (auto740A6C94_ai >= 0 && lv_itTeam <= auto740A6C94_ae) || (auto740A6C94_ai < 0 && lv_itTeam >= auto740A6C94_ae) ) ; lv_itTeam += auto740A6C94_ai ) {
            if ((lv_visionShared[lv_itTeam] == false) && (libNtve_gf_UnitIsVisibleToPlayer(lv_seed, libGame_gf_ComputerPlayerInTeam(lv_itTeam)) == true)) {
                libNtve_gf_ShareVisionofUnit(lv_seed, true, libGame_gf_ComputerPlayerInTeam(lv_itTeam));
                lv_visionShared[lv_itTeam] = true;
                if ((lv_visionShared[1] == true) && (lv_visionShared[2] == true)) {
                    return true;
                }

            }

        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMGT_gt_ARMGardenSeedDropped_Init () {
    libAMGT_gt_ARMGardenSeedDropped = TriggerCreate("libAMGT_gt_ARMGardenSeedDropped_Func");
    TriggerEnable(libAMGT_gt_ARMGardenSeedDropped, false);
    TriggerAddEventUnitCreated(libAMGT_gt_ARMGardenSeedDropped, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Garden> Seed Pickup
//--------------------------------------------------------------------------------------------------
bool libAMGT_gt_ARMGardenSeedPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    int lv_collectingPlayer;
    unit lv_collectingUnit;
    playergroup lv_textTagPlayers;
    int lv_itPlayer;

    // Automatic Variable Declarations
    int auto2049327C_val;
    int auto5BF1FC9D_val;

    // Variable Initialization
    lv_textTagPlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_collectingPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    lv_collectingUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_team = libGame_gf_TeamNumberOfPlayer(lv_collectingPlayer);
    libAMGT_gv_aRMGardenTeamSeedsCollected[lv_team] += 1;
    SoundPlayAtPointForPlayer(SoundLink("UI_SeedPickup_Pickup", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lv_collectingUnit), 0.5, 100.0, 0.0);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gf_AlliedPlayerGroupOfPlayer(lv_collectingPlayer), lv_textTagPlayers);
    PlayerGroupAdd(lv_textTagPlayers, libCore_gv_oBSERVER_ObserverUIPlayer);
    TextTagCreate(StringExternal("Param/Value/lib_AMGT_0EAE148F"), 24, UnitGetPosition(lv_collectingUnit), 1.0, true, true, lv_textTagPlayers);
    TextTagSetVelocity(TextTagLastCreated(), 1.5, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagCreate(StringExternal("Param/Value/lib_AMGT_0835D700"), 24, UnitGetPosition(lv_collectingUnit), 1.0, true, true, libGame_gf_EnemyPlayerGroupOfPlayer(lv_collectingPlayer));
    TextTagSetVelocity(TextTagLastCreated(), 1.5, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    libAMGT_gf_MapMechanicsGardenOfTerrorSetSeedCountForTeam(libGame_gf_TeamNumberOfPlayer(lv_collectingPlayer), libAMGT_gv_aRMGardenTeamSeedsCollected[libGame_gf_TeamNumberOfPlayer(lv_collectingPlayer)]);
    if ((libAMGT_gv_aRMGardenTeamSeedsCollected[lv_team] == 50)) {
        libAREN_gf_ARM_UpdateWallaLevel(2);
        auto2049327C_val = lv_team;
        if (auto2049327C_val == libGame_gv_teamOrderIndex_C) {
            libAMGT_gf_ARMGardenTransmissionOrder50();
        }
        else if (auto2049327C_val == libGame_gv_teamChaosIndex_C) {
            libAMGT_gf_ARMGardenTransmissionChaos50();
        }
        else {
        }
    }

    if ((libAMGT_gv_aRMGardenTeamSeedsCollected[lv_team] == 80)) {
        libAREN_gf_ARM_UpdateWallaLevel(3);
        auto5BF1FC9D_val = lv_team;
        if (auto5BF1FC9D_val == libGame_gv_teamOrderIndex_C) {
            libAMGT_gf_ARMGardenTransmissionOrder80();
        }
        else if (auto5BF1FC9D_val == libGame_gv_teamChaosIndex_C) {
            libAMGT_gf_ARMGardenTransmissionChaos80();
        }
        else {
        }
    }

    if ((libAMGT_gv_aRMGardenTeamSeedsCollected[lv_team] >= libAMGT_gv_aRMGardenSeedRequired_C)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libAMGT_gf_ARMGardenVictorySequence(lv_team, libGame_gv_teams[libGame_gf_EnemyTeam(lv_team)].lv_core);
    }
    else if ((libAMGT_gv_aRMGardenTeamSeedsCollected[lv_team] >= 90)) {
        if ((libAMGT_gv_aRMGardenWarningMessageLevel[libGame_gf_EnemyTeam(lv_team)] < 2)) {
            libAMGT_gv_aRMGardenWarningMessageLevel[libGame_gf_EnemyTeam(lv_team)] = 2;
        }

    }
    else if ((libAMGT_gv_aRMGardenTeamSeedsCollected[lv_team] >= 50)) {
        if ((libAMGT_gv_aRMGardenWarningMessageLevel[libGame_gf_EnemyTeam(lv_team)] < 1)) {
            libAMGT_gv_aRMGardenWarningMessageLevel[libGame_gf_EnemyTeam(lv_team)] = 1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMGT_gt_ARMGardenSeedPickup_Init () {
    libAMGT_gt_ARMGardenSeedPickup = TriggerCreate("libAMGT_gt_ARMGardenSeedPickup_Func");
    TriggerEnable(libAMGT_gt_ARMGardenSeedPickup, false);
    TriggerAddEventPlayerEffectUsed(libAMGT_gt_ARMGardenSeedPickup, c_playerAny, "SeedPickupSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Garden> Core Dies (Debug)
//--------------------------------------------------------------------------------------------------
bool libAMGT_gt_ARMGardenCoreDiesDebug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libAREN_gv_aRM_VictorySequencePlaying == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core)) {
        libAREN_gv_aRM_RoundWinningTeam = libGame_gv_teamChaosIndex_C;
    }
    else {
        libAREN_gv_aRM_RoundWinningTeam = libGame_gv_teamOrderIndex_C;
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_AMGT_D6795749"), true);
    libAREN_gv_aRM_VictorySequenceDelay = 0.0;
    libAREN_gf_ARM_RoundOver();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMGT_gt_ARMGardenCoreDiesDebug_Init () {
    libAMGT_gt_ARMGardenCoreDiesDebug = TriggerCreate("libAMGT_gt_ARMGardenCoreDiesDebug_Func");
    TriggerAddEventUnitDied(libAMGT_gt_ARMGardenCoreDiesDebug, UnitRefFromVariable("libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core"));
    TriggerAddEventUnitDied(libAMGT_gt_ARMGardenCoreDiesDebug, UnitRefFromVariable("libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Garden> Minion Dies
//--------------------------------------------------------------------------------------------------
bool libAMGT_gt_ARMGardenMinionDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itGroupIndex;

    // Automatic Variable Declarations
    int auto119A0410_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Shambler") || (UnitGetType(EventUnit()) == "ShamblerRanged")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_gameOver == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    lv_itGroupIndex = libAMGT_gf_ARMGardenMinionGroupIndex(EventUnit());
    if ((lv_itGroupIndex <= 0)) {
        return true;
    }

    if ((lv_itGroupIndex != libAMGT_gv_aRMGardenLastClearedGroupIndex[1])) {
        libAMGT_gv_aRMGardenLastClearedGroupIndex[2] = libAMGT_gv_aRMGardenLastClearedGroupIndex[1];
        libAMGT_gv_aRMGardenLastClearedGroupIndex[1] = lv_itGroupIndex;
    }

    libAMGT_gf_ARMGardenMinionDropsSeeds(EventUnit());
    libAMGT_gf_ARMGardenDropSeeds(UnitGetPosition(EventUnit()), libAMGT_gv_aRMGardenSeedsMinionFinalDrop_C, false);
    auto119A0410_val = libAMGT_gf_ARMGardenCurrentLevel();
    if (auto119A0410_val == libAMGT_ge_ARMGardenLevel_Level3) {
        libAMGT_gf_ARMGardenL3SpawnTerror();
    }
    else {
    }
    if ((libNtve_gf_UnitGroupIsDead(libAMGT_gv_aRMGardenMinionGroup[lv_itGroupIndex].lv_units) == true)) {
        UnitRemove(libAMGT_gv_aRMGardenMinionGroup[lv_itGroupIndex].lv_iconUnit);
        libAMGT_gv_aRMGardenMinionGroup[lv_itGroupIndex].lv_iconUnit = null;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMGT_gt_ARMGardenMinionDies_Init () {
    libAMGT_gt_ARMGardenMinionDies = TriggerCreate("libAMGT_gt_ARMGardenMinionDies_Func");
    TriggerEnable(libAMGT_gt_ARMGardenMinionDies, false);
    TriggerAddEventUnitDied(libAMGT_gt_ARMGardenMinionDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Garden> Terror Dies
//--------------------------------------------------------------------------------------------------
bool libAMGT_gt_ARMGardenTerrorDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTerrorIndex;
    int lv_diedTerrorIndex;

    // Automatic Variable Declarations
    int auto1CBCA395_ae;
    const int auto1CBCA395_ai = 1;
    int autoE68CEC5A_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "JunglePlantHorror"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_gameOver == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    libAREN_gf_SendEventArenaMechanicActivated();
    auto1CBCA395_ae = libAMGT_gv_aRMGardenTerrorCount;
    lv_itTerrorIndex = 1;
    for ( ; ( (auto1CBCA395_ai >= 0 && lv_itTerrorIndex <= auto1CBCA395_ae) || (auto1CBCA395_ai < 0 && lv_itTerrorIndex >= auto1CBCA395_ae) ) ; lv_itTerrorIndex += auto1CBCA395_ai ) {
        if ((EventUnit() == libAMGT_gv_aRMGardenTerrors[lv_itTerrorIndex].lv_terror)) {
            lv_diedTerrorIndex = lv_itTerrorIndex;
            break;
        }

    }
    if ((lv_diedTerrorIndex == 0)) {
        return true;
    }

    libAMGT_gv_aRMGardenLastClearedTerrorIndex[2] = libAMGT_gv_aRMGardenLastClearedTerrorIndex[1];
    libAMGT_gv_aRMGardenLastClearedTerrorIndex[1] = lv_diedTerrorIndex;
    SoundPlayForPlayer(SoundLink("ArenaMode_Crowd_Cheer_EventWon", -1), c_maxPlayers, PlayerGroupAlliance(c_playerGroupAlly, libNtve_gf_KillingPlayer()), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("ArenaMode_Crowd_Cheer_EventLost", -1), c_maxPlayers, PlayerGroupAlliance(c_playerGroupEnemy, libNtve_gf_KillingPlayer()), 100.0, 0.0);
    libAMGT_gf_ARMGardenTerrorDropsSeeds(EventUnit());
    libAMGT_gf_ARMGardenDropSeeds(UnitGetPosition(EventUnit()), libAMGT_gv_aRMGardenSeedsTerrorFinalDrop_C, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RegenGlobeNeutral", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 4.5)), null);
    autoE68CEC5A_val = libAMGT_gf_ARMGardenCurrentLevel();
    if (autoE68CEC5A_val == libAMGT_ge_ARMGardenLevel_Level1) {
        libAMGT_gf_ARMGardenL1SpawnNextTerror(lv_diedTerrorIndex);
    }
    else if (autoE68CEC5A_val == libAMGT_ge_ARMGardenLevel_Level2) {
    }
    else if (autoE68CEC5A_val == libAMGT_ge_ARMGardenLevel_Level3) {
        libAMGT_gf_ARMGardenL3SpawnMinions();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMGT_gt_ARMGardenTerrorDies_Init () {
    libAMGT_gt_ARMGardenTerrorDies = TriggerCreate("libAMGT_gt_ARMGardenTerrorDies_Func");
    TriggerEnable(libAMGT_gt_ARMGardenTerrorDies, false);
    TriggerAddEventUnitDied(libAMGT_gt_ARMGardenTerrorDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Garden> Panel Init
//--------------------------------------------------------------------------------------------------
bool libAMGT_gt_ARMGardenPanelInit_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_itTeam;
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_enemyTeam;
    int lv_notificationsPanel;

    // Automatic Variable Declarations
    const int auto9FCE7B02_ae = libCore_gv_bALMaxTeams;
    const int auto9FCE7B02_ai = 1;
    const int auto43917915_ae = libCore_gv_bALMaxTeams;
    const int auto43917915_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }
    lv_notificationsPanel = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlCreateInPanelFromTemplate(libUIUI_gv_uIPartyFrame.lv_mainPanel, c_triggerControlTypePanel, "ArenaGarden/ArenaGardenScorePanel");
    libAMGT_gv_aRMGardenPanel.lv_gardenOfTerrorScorePanel = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "HelpText");
    TextExpressionSetToken("Param/Expression/lib_AMGT_623DA00D", "SeedsReq", IntToText(libAMGT_gv_aRMGardenSeedRequired_C));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_AMGT_623DA00D"), PlayerGroupAll());
    lv_itTeam = 1;
    for ( ; ( (auto9FCE7B02_ai >= 0 && lv_itTeam <= auto9FCE7B02_ae) || (auto9FCE7B02_ai < 0 && lv_itTeam >= auto9FCE7B02_ae) ) ; lv_itTeam += auto9FCE7B02_ai ) {
        DialogControlHookup(libAMGT_gv_aRMGardenPanel.lv_gardenOfTerrorScorePanel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("Team" + IntToString(lv_itTeam) + "Score")));
        libAMGT_gv_aRMGardenPanel.lv_seedsCounts[lv_itTeam] = DialogControlLastCreated();
    }
    DialogControlCreateInPanelFromTemplate(libUIUI_gv_mapMechanicsPanel.lv_mainPanel, c_triggerControlTypePanel, "ArenaGarden/ArenaGardenPanel");
    libAMGT_gv_aRMGardenPanel.lv_gardenOfTerrorPanel = DialogControlLastCreated();
    DialogControlHookup(libAMGT_gv_aRMGardenPanel.lv_gardenOfTerrorPanel, c_triggerControlTypePanel, "TerrorSpawnPanel");
    libAMGT_gv_aRMGardenPanel.lv_gardenOfTerrorGolemFrame = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "InfoLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_AMGT_AFCAC1AE"), PlayerGroupAll());
    DialogControlHookup(libAMGT_gv_aRMGardenPanel.lv_gardenOfTerrorPanel, c_triggerControlTypePanel, "ShamblersSpawnPanel");
    libAMGT_gv_aRMGardenPanel.lv_gardenOfTerrorShamblersFrame = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "InfoLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_AMGT_F2800676"), PlayerGroupAll());
    DialogControlCreateInPanelFromTemplate(libUIUI_gv_uIGameUIHandles.lv_fullscreenUpperContainer, c_triggerControlTypePanel, "ArenaGarden/ArenaGardenNotificationsPanel");
    lv_notificationsPanel = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (auto43917915_ai >= 0 && lv_itTeam <= auto43917915_ae) || (auto43917915_ai < 0 && lv_itTeam >= auto43917915_ae) ) ; lv_itTeam += auto43917915_ai ) {
        DialogControlHookup(lv_notificationsPanel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("ProgressAnnouncement" + IntToString(lv_itTeam))));
        libAMGT_gv_aRMGardenPanel.lv_progressNotification[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "StandardNotificationTemplate/NotificationTitle");
        libAMGT_gv_aRMGardenPanel.lv_progressNotificationLabel[lv_itTeam] = DialogControlLastCreated();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMGT_gt_ARMGardenPanelInit_Init () {
    libAMGT_gt_ARMGardenPanelInit = TriggerCreate("libAMGT_gt_ARMGardenPanelInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<Garden> DisableEvent
//--------------------------------------------------------------------------------------------------
bool libAMGT_gt_ARMGardenDisableEvent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libAMGT_gv_aRMGardenMapEventDisabled = true;
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_AMGT_A3D295BE"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMGT_gt_ARMGardenDisableEvent_Init () {
    libAMGT_gt_ARMGardenDisableEvent = TriggerCreate("libAMGT_gt_ARMGardenDisableEvent_Func");
    TriggerAddEventChatMessage(libAMGT_gt_ARMGardenDisableEvent, c_playerAny, "DisableEvent", false);
}

void libAMGT_InitTriggers () {
    libAMGT_gt_ARMGardenSetRoundOrder_Init();
    libAMGT_gt_ARMGardenInitialization_Init();
    libAMGT_gt_ARMGardenLevelStart_Init();
    libAMGT_gt_ARMGardenGatesOpened_Init();
    libAMGT_gt_ARMGardenSeedDropped_Init();
    libAMGT_gt_ARMGardenSeedPickup_Init();
    libAMGT_gt_ARMGardenCoreDiesDebug_Init();
    libAMGT_gt_ARMGardenMinionDies_Init();
    libAMGT_gt_ARMGardenTerrorDies_Init();
    libAMGT_gt_ARMGardenPanelInit_Init();
    libAMGT_gt_ARMGardenDisableEvent_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libAMGT_InitLib_completed = false;

void libAMGT_InitLib () {
    if (libAMGT_InitLib_completed) {
        return;
    }

    libAMGT_InitLib_completed = true;

    libAMGT_InitLibraries();
    libAMGT_InitVariables();
    libAMGT_InitTriggers();
}

