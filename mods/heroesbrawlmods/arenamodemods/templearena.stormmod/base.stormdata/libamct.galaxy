include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/MapMechanicsLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"
include "LibAREN"

include "LibAMCT_h"

//--------------------------------------------------------------------------------------------------
// Library: ARM_Sky Temple
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libAMCT_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libMapM_InitVariables();
    libAIAI_InitVariables();
    libUIUI_InitVariables();
    libAREN_InitVariables();
}

// Variable Initialization
bool libAMCT_InitVariables_completed = false;

void libAMCT_InitVariables () {
    int init_i;
    int init_i1;

    if (libAMCT_InitVariables_completed) {
        return;
    }

    libAMCT_InitVariables_completed = true;

    for (init_i = 0; init_i <= libAREN_gv_aRM_MechanicsCountToPick_C; init_i += 1) {
        libAMCT_gv_aRMSkyTempleLevelRegisteredMechIds[init_i] = libAREN_ge_ArenaMechanics_InvalidMechanic;
    }
    for (init_i = 0; init_i <= libAREN_gv_aRM_MechanicsCountToPick_C; init_i += 1) {
        libAMCT_gv_aRMSkyTempleLevels[init_i] = libAMCT_ge_ARMSkyTempleLevel_None;
    }
    libAMCT_gv_aRMSkyTempleWarningTime = 1.0;
    for (init_i = 0; init_i <= libAMCT_gv_aRMSkyTempleMaxCount_C; init_i += 1) {
        libAMCT_gv_aRMSkyTemple[init_i].lv_defenderLastSpawnedLine = 2;
        libAMCT_gv_aRMSkyTemple[init_i].lv_defendersActivated = UnitGroupEmpty();
    }
    libAMCT_gv_aRMSkyTempleActivateWarningTimer = TimerCreate();
    libAMCT_gv_aRMSkyTempleWarningWaitTimer = TimerCreate();
    libAMCT_gv_aRMSkyTempleTimedTempleTimer = TimerCreate();
    libAMCT_gv_aRMSkyTempleIsFirstTemple = true;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libAMCT_gv_aRMSkyTempleActivateWarningTimerLevel3[init_i] = TimerCreate();
    }
    libAMCT_gv_aRMSkyTempleDefenderWithGlobes = UnitGroupEmpty();
    libAMCT_gv_aRMSkyTempleUI_ScorePanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libAMCT_gv_aRMSkyTempleUI_CoreUnitStatus[init_i] = c_invalidDialogControlId;
    }
    libAMCT_gv_mMCapturePointsPanel.lv_capturePointsPanel = c_invalidDialogControlId;
    libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTimerModeFrame = c_invalidDialogControlId;
    libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTimerModeNameLabel = c_invalidDialogControlId;
    libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleModeFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleFireEffect2[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleBGImageBlue[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleBGImageRed[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleDisabledImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleEnabledImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleTimerLabel[init_i1] = c_invalidDialogControlId;
    }
}

// Presets
// Functions
void libAMCT_gf_WaitForConversationToFinish () {
    // Variable Declarations
    int lv_itPlayer;
    playergroup lv_players;
    bool lv_finished;

    // Automatic Variable Declarations
    const int auto94DB18B0_n = 60;
    int auto94DB18B0_i;
    playergroup auto0249858B_g;

    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), lv_players);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), lv_players);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lv_players);
    for (auto94DB18B0_i = 1; auto94DB18B0_i <= auto94DB18B0_n; auto94DB18B0_i += 1) {
        lv_finished = true;
        auto0249858B_g = lv_players;
        lv_itPlayer = -1;
        while (true) {
            	lv_itPlayer = PlayerGroupNextPlayer(auto0249858B_g, lv_itPlayer);
            	if (lv_itPlayer<0) { break; }
            	if ((TransmissionPlayerHasActiveTransmission(lv_itPlayer) == true)) {
                lv_finished = false;
                break;
            }

        }
        if ((lv_finished == true)) {
            return ;
        }

        Wait(0.5, c_timeGame);
    }
}

int libAMCT_gf_ARMSkyTempleCurrentLevel () {
    // Automatic Variable Declarations
    // Implementation
    return libAMCT_gv_aRMSkyTempleLevels[libAREN_gf_ArenaCurrentLevelIndex()];
}

void libAMCT_gf_ARMSkyTempleAddLevel (int lp_level, region lp_levelRegion, trigger lp_levelStartCallback, text lp_levelName, string lp_levelImageOrder, string lp_levelImageChaos, text lp_levelInfo, region lp_cameraBoundsRegion) {
    // Automatic Variable Declarations
    // Implementation
    libAMCT_gv_aRMSkyTempleLevelCount += 1;
    libAMCT_gv_aRMSkyTempleLevelStartCallback[libAMCT_gv_aRMSkyTempleLevelCount] = lp_levelStartCallback;
    libAMCT_gv_aRMSkyTempleLevels[libAMCT_gv_aRMSkyTempleLevelCount] = lp_level;
    libAREN_gf_ArenaRegisterMechanic(lp_levelName, lp_levelImageOrder, lp_levelImageChaos, lp_levelInfo, libAMCT_gt_ARMSkyTempleLevelStart, lp_levelRegion, lp_cameraBoundsRegion);
    libAMCT_gv_aRMSkyTempleLevelRegisteredMechIds[libAMCT_gv_aRMSkyTempleLevelCount] = libAREN_gf_LastregisteredArenaMechanic();
}

void libAMCT_gf_ARMSkyTempleAddTemple (unit lp_temple, point lp_location1, point lp_location2, point lp_location3, point lp_location4, point lp_location5, point lp_beaconLoc, point lp_blockerLoc, bool lp_timed) {
    // Automatic Variable Declarations
    // Implementation
    libAMCT_gv_aRMSkyTempleTempleCount += 1;
    libAMCT_gf_ARMSkyTempleResetTempleData(libAMCT_gv_aRMSkyTempleTempleCount);
    libAMCT_gv_aRMSkyTemple[libAMCT_gv_aRMSkyTempleTempleCount].lv_temple = lp_temple;
    libAMCT_gv_aRMSkyTemple[libAMCT_gv_aRMSkyTempleTempleCount].lv_defenderSpawnPoints[1] = lp_location1;
    libAMCT_gv_aRMSkyTemple[libAMCT_gv_aRMSkyTempleTempleCount].lv_defenderSpawnPoints[2] = lp_location2;
    libAMCT_gv_aRMSkyTemple[libAMCT_gv_aRMSkyTempleTempleCount].lv_defenderSpawnPoints[3] = lp_location3;
    libAMCT_gv_aRMSkyTemple[libAMCT_gv_aRMSkyTempleTempleCount].lv_defenderSpawnPoints[4] = lp_location4;
    libAMCT_gv_aRMSkyTemple[libAMCT_gv_aRMSkyTempleTempleCount].lv_defenderSpawnPoints[5] = lp_location5;
    libAMCT_gv_aRMSkyTemple[libAMCT_gv_aRMSkyTempleTempleCount].lv_beaconLoc = lp_beaconLoc;
    libAMCT_gv_aRMSkyTemple[libAMCT_gv_aRMSkyTempleTempleCount].lv_blockerLoc = lp_blockerLoc;
    libAMCT_gv_aRMSkyTemple[libAMCT_gv_aRMSkyTempleTempleCount].lv_timed = lp_timed;
    UnitCreate(1, "JungleCampIconUnit", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, UnitGetPosition(lp_temple), UnitGetFacing(lp_temple), null);
    libAMCT_gv_aRMSkyTemple[libAMCT_gv_aRMSkyTempleTempleCount].lv_minimapIcon = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(libAMCT_gv_aRMSkyTemple[libAMCT_gv_aRMSkyTempleTempleCount].lv_temple, "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_skytemplemid.dds");
    libNtve_gf_SendActorMessageToUnit(libAMCT_gv_aRMSkyTemple[libAMCT_gv_aRMSkyTempleTempleCount].lv_temple, "MinimapIconScale 0.800000");
    libNtve_gf_SendActorMessageToUnit(libAMCT_gv_aRMSkyTemple[libAMCT_gv_aRMSkyTempleTempleCount].lv_temple, "MinimapTooltip DOCSTR_Temple");
    libAMCT_gf_ARMSkyTempleUpdateTempleMinimapIcon(libAMCT_gv_aRMSkyTempleTempleCount, libAMCT_ge_ARMSkyTempleMinimapIconState_Disable);
}

void libAMCT_gf_ARMSkyTempleResetTempleData (int lp_templeIndex) {
    // Variable Declarations
    int lv_itDefenderIndex;

    // Automatic Variable Declarations
    const int auto44B3F040_ae = 5;
    const int auto44B3F040_ai = 1;

    // Variable Initialization

    // Implementation
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_beacon = null;
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_beaconIndex = 0;
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_beaconLoc = null;
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_blessed = false;
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_blockerLoc = null;
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderAIIndex = 0;
    lv_itDefenderIndex = 1;
    for ( ; ( (auto44B3F040_ai >= 0 && lv_itDefenderIndex <= auto44B3F040_ae) || (auto44B3F040_ai < 0 && lv_itDefenderIndex >= auto44B3F040_ae) ) ; lv_itDefenderIndex += auto44B3F040_ai ) {
        libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderArray[lv_itDefenderIndex] = null;
    }
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderBossPathingBlocker = null;
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderBossDeathDuration = 0;
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderLastSpawnedLine = 2;
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderRespawning = false;
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defendersActivated = UnitGroupEmpty();
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_minimapIcon = null;
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_progress = 0.0;
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_spawnStage = 0;
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_targetRevealer = null;
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_targetUnit = null;
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple = null;
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_timed = false;
}

point libAMCT_gf_ARMSkyTempleLocation (int lp_templeIndex) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGetPosition(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple);
}

void libAMCT_gf_ARMSkyTemplePrepareTemple (int lp_templeIndex) {
    // Variable Declarations
    int lv_itTempleIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerExecute(libAMCT_gt_ARMSkyTempleBeaconColor, true, false);
    libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormArenaAlert", libAMCT_gf_ARMSkyTempleLocation(lp_templeIndex), Color(100.00, 100.00, 0.00), 3.0);
    SoundPlayAtPointForPlayer(SoundLink("UI_Game_Ping_LuxoriaTemple_Spawned", -1), c_maxPlayers, PlayerGroupAll(), libAMCT_gf_ARMSkyTempleLocation(lp_templeIndex), 0.0, 100.0, 0.0);
    libAMCT_gf_ARMSkyTemplePrepareTempleDefenders(lp_templeIndex);
    TimerStart(libAMCT_gv_aRMSkyTempleActivateWarningTimer, libAMCT_gv_aRMSkyTempleWarningTime, false, c_timeGame);
}

trigger auto_libAMCT_gf_ARMSkyTempleActivateTemple_Trigger = null;
int auto_libAMCT_gf_ARMSkyTempleActivateTemple_lp_templeIndex;

void libAMCT_gf_ARMSkyTempleActivateTemple (int lp_templeIndex) {
    auto_libAMCT_gf_ARMSkyTempleActivateTemple_lp_templeIndex = lp_templeIndex;

    if (auto_libAMCT_gf_ARMSkyTempleActivateTemple_Trigger == null) {
        auto_libAMCT_gf_ARMSkyTempleActivateTemple_Trigger = TriggerCreate("auto_libAMCT_gf_ARMSkyTempleActivateTemple_TriggerFunc");
    }

    TriggerExecute(auto_libAMCT_gf_ARMSkyTempleActivateTemple_Trigger, false, false);
}

bool auto_libAMCT_gf_ARMSkyTempleActivateTemple_TriggerFunc (bool testConds, bool runActions) {
    int lp_templeIndex = auto_libAMCT_gf_ARMSkyTempleActivateTemple_lp_templeIndex;

    // Automatic Variable Declarations
    // Implementation
    libAREN_gf_SendEventArenaMechanicActivated();
    if ((libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_blessed == true)) {
        return true;
    }

    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_blessed = true;
    StatEventCreate("SkyTempleActivated");
    StatEventSend(StatEventLastCreated());
    AddUnitOfInterest(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_beacon, libAMCT_gv_aRMSkyTempleCaptureRadius_C, 0.0, "TempleBeacon", libNtve_ge_GoalTeam_Both, 0);
    libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormArenaAlert", libAMCT_gf_ARMSkyTempleLocation(lp_templeIndex), Color(100.00, 100.00, 0.00), 6.0);
    SoundPlayAtPointForPlayer(SoundLink("UI_Game_Ping_LuxoriaTemple_Ready", -1), c_maxPlayers, PlayerGroupAll(), libAMCT_gf_ARMSkyTempleLocation(lp_templeIndex), 0.0, 100.0, 0.0);
    libGame_gf_CapturePointEnable(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_beaconIndex);
    libCore_gf_SendActorMessageToDoodadsInRegion("Signal ActivateCapturePoint", RegionCircle(UnitGetPosition(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple), 12.0), null);
    UnitStatusBarOverride(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, -1);
    UnitSetPropertyFixed(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, c_unitPropEnergy, libAMCT_gv_aRMSkyTempleStageDuration_C);
    libAMCT_gf_ARMSkyTempleBlessTempleProgress(lp_templeIndex);
    libAMCT_gf_ARMSkyTempleUpdateTempleMinimapIcon(lp_templeIndex, libAMCT_ge_ARMSkyTempleMinimapIconState_Enable);
    return true;
}

trigger auto_libAMCT_gf_ARMSkyTempleBlessTempleProgress_Trigger = null;
int auto_libAMCT_gf_ARMSkyTempleBlessTempleProgress_lp_templeIndex;

void libAMCT_gf_ARMSkyTempleBlessTempleProgress (int lp_templeIndex) {
    auto_libAMCT_gf_ARMSkyTempleBlessTempleProgress_lp_templeIndex = lp_templeIndex;

    if (auto_libAMCT_gf_ARMSkyTempleBlessTempleProgress_Trigger == null) {
        auto_libAMCT_gf_ARMSkyTempleBlessTempleProgress_Trigger = TriggerCreate("auto_libAMCT_gf_ARMSkyTempleBlessTempleProgress_TriggerFunc");
    }

    TriggerExecute(auto_libAMCT_gf_ARMSkyTempleBlessTempleProgress_Trigger, false, false);
}

bool auto_libAMCT_gf_ARMSkyTempleBlessTempleProgress_TriggerFunc (bool testConds, bool runActions) {
    int lp_templeIndex = auto_libAMCT_gf_ARMSkyTempleBlessTempleProgress_lp_templeIndex;

    // Variable Declarations
    fixed lv_timeInterval_C;
    unit lv_target;
    fixed lv_wholeDuration;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timeInterval_C = 0.25;

    // Implementation
    while (true) {
        if ((libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_blessed == false)) {
            return true;
        }

        if ((UnitHasBehavior2(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, "LuxoriaTempleBlessed") == false)) {
            UnitBehaviorAddPlayer(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, "LuxoriaTempleBlessed", libCore_gv_cOMPUTER_Neutral, 1);
        }

        lv_wholeDuration = libAMCT_gv_aRMSkyTempleStageDuration_C;
        libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_progress = (lv_wholeDuration-(UnitGetPropertyFixed(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, c_unitPropEnergy, c_unitPropCurrent)-libAMCT_gv_aRMSkyTempleFinalShotCount_C));
        if ((UnitGetOwner(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple) != libCore_gv_cOMPUTER_Neutral)) {
            if ((libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_progress >= 0.0) && (libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_spawnStage < 1)) {
                libAMCT_gf_ARMSkyTempleActivateTempleDefenderWaves(lp_templeIndex, 1);
                libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_spawnStage = 1;
            }
            else if ((libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_progress >= 10.0) && (libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_spawnStage < 2)) {
                libAMCT_gf_ARMSkyTempleActivateTempleDefenderWaves(lp_templeIndex, 2);
                libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_spawnStage = 2;
            }
            else if ((libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_timed == false) && (libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_progress >= 25.0) && (libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_spawnStage < 3)) {
                libAMCT_gf_ARMSkyTempleActivateTempleDefenderWaves(lp_templeIndex, 3);
                libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_spawnStage = 3;
            }
            if ((libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_progress >= 35.0) && (libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_timed == false)) {
                libAMCT_gf_ARMSkyTempleTempleDefendersRespawnCheckConditions(lp_templeIndex);
            }

        }

        if ((UnitGetPropertyFixed(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, c_unitPropEnergy, c_unitPropCurrent) == 0.0)) {
            libAMCT_gf_ARMSkyTempleBlessTempleDone(lp_templeIndex);
            return true;
        }

        if ((UnitGetOwner(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple) != libCore_gv_cOMPUTER_Neutral)) {
            if ((UnitHasBehavior2(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, "LuxoriaTempleStage1") == false)) {
                UnitBehaviorAdd(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, "LuxoriaTempleStage1", libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, 1);
            }

            if (((UnitIsAlive(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_targetUnit) == false) || (libNtve_gf_UnitIsInvulnerable(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_targetUnit) == true) || (libNtve_gf_PlayerIsEnemy(UnitGetOwner(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple), UnitGetOwner(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_targetUnit), libNtve_ge_PlayerRelation_Enemy) == false))) {
                libAMCT_gf_ARMSkyTempleClearTempleTargetRevealers(lp_templeIndex, 6.0);
                lv_target = libAMCT_gf_ARMSkyTempleNextTempleTarget(lp_templeIndex);
                if ((UnitIsAlive(lv_target) == true) && (UnitBehaviorCount(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_beacon, "DisableBeaconBuff") == 0)) {
                    libAMCT_gf_ARMSkyTempleTempleAttackTarget(lp_templeIndex, lv_target);
                }
                else {
                    libAMCT_gf_ARMSkyTempleStopShooting(lp_templeIndex);
                }
            }

        }
        else {
            if ((UnitHasBehavior2(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, "LuxoriaTempleStage1") == true)) {
                UnitBehaviorRemove(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, "LuxoriaTempleStage1", 1);
            }

            libAMCT_gf_ARMSkyTempleStopShooting(lp_templeIndex);
        }
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        Wait(lv_timeInterval_C, c_timeGame);
    }
    return true;
}

trigger auto_libAMCT_gf_ARMSkyTempleTempleAttackTarget_Trigger = null;
int auto_libAMCT_gf_ARMSkyTempleTempleAttackTarget_lp_templeIndex;
unit auto_libAMCT_gf_ARMSkyTempleTempleAttackTarget_lp_target;

void libAMCT_gf_ARMSkyTempleTempleAttackTarget (int lp_templeIndex, unit lp_target) {
    auto_libAMCT_gf_ARMSkyTempleTempleAttackTarget_lp_templeIndex = lp_templeIndex;
    auto_libAMCT_gf_ARMSkyTempleTempleAttackTarget_lp_target = lp_target;

    if (auto_libAMCT_gf_ARMSkyTempleTempleAttackTarget_Trigger == null) {
        auto_libAMCT_gf_ARMSkyTempleTempleAttackTarget_Trigger = TriggerCreate("auto_libAMCT_gf_ARMSkyTempleTempleAttackTarget_TriggerFunc");
    }

    TriggerExecute(auto_libAMCT_gf_ARMSkyTempleTempleAttackTarget_Trigger, false, false);
}

bool auto_libAMCT_gf_ARMSkyTempleTempleAttackTarget_TriggerFunc (bool testConds, bool runActions) {
    int lp_templeIndex = auto_libAMCT_gf_ARMSkyTempleTempleAttackTarget_lp_templeIndex;
    unit lp_target = auto_libAMCT_gf_ARMSkyTempleTempleAttackTarget_lp_target;

    // Automatic Variable Declarations
    // Implementation
    VisRevealerCreate(UnitGetOwner(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple), RegionCircle(UnitGetPosition(lp_target), 5.0));
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_targetRevealer = VisRevealerLastCreated();
    Wait(0.5, c_timeGame);
    UnitIssueOrder(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, OrderTargetingUnit(AbilityCommand("attack", 0), lp_target), c_orderQueueReplace);
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_targetUnit = lp_target;
    return true;
}

trigger auto_libAMCT_gf_ARMSkyTempleBlessTempleDone_Trigger = null;
int auto_libAMCT_gf_ARMSkyTempleBlessTempleDone_lp_templeIndex;

void libAMCT_gf_ARMSkyTempleBlessTempleDone (int lp_templeIndex) {
    auto_libAMCT_gf_ARMSkyTempleBlessTempleDone_lp_templeIndex = lp_templeIndex;

    if (auto_libAMCT_gf_ARMSkyTempleBlessTempleDone_Trigger == null) {
        auto_libAMCT_gf_ARMSkyTempleBlessTempleDone_Trigger = TriggerCreate("auto_libAMCT_gf_ARMSkyTempleBlessTempleDone_TriggerFunc");
    }

    TriggerExecute(auto_libAMCT_gf_ARMSkyTempleBlessTempleDone_Trigger, false, false);
}

bool auto_libAMCT_gf_ARMSkyTempleBlessTempleDone_TriggerFunc (bool testConds, bool runActions) {
    int lp_templeIndex = auto_libAMCT_gf_ARMSkyTempleBlessTempleDone_lp_templeIndex;

    // Variable Declarations
    unit lv_itDefender;

    // Automatic Variable Declarations
    unitgroup autoEB552216_g;
    int autoEB552216_u;

    // Variable Initialization

    // Implementation
    if ((libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_blessed == false)) {
        return true;
    }

    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_progress = 0.0;
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_spawnStage = 0;
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_targetUnit = null;
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderAIIndex = 0;
    libAMCT_gf_ARMSkyTempleClearTempleTargetRevealers(lp_templeIndex, 6.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_beacon), c_animNameDefault, "Spell", c_animFlagNonLooping, c_animTimeDefault);
    libGame_gv_capturePoints[libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_beaconIndex].lv_enabled = false;
    ActorSend(libNtve_gf_MainActorofUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_beacon), "Signal Hide");
    autoEB552216_g = libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defendersActivated;
    autoEB552216_u = UnitGroupCount(autoEB552216_g, c_unitCountAll);
    for (;; autoEB552216_u -= 1) {
        lv_itDefender = UnitGroupUnitFromEnd(autoEB552216_g, autoEB552216_u);
        if (lv_itDefender == null) { break; }
        libAMCT_gf_ARMSkyTempleDeactivateTempleDefender(lv_itDefender);
    }
    if ((UnitHasBehavior2(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, "LuxoriaTempleStage1") == true)) {
        UnitBehaviorRemovePlayer(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, "LuxoriaTempleStage1", libCore_gv_cOMPUTER_Neutral, 1);
    }

    Wait(1.0, c_timeGame);
    UnitSetOwner(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, libCore_gv_cOMPUTER_Neutral, true);
    UnitSetOwner(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_beacon, libCore_gv_cOMPUTER_Neutral, true);
    libGame_gv_capturePoints[libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_beaconIndex].lv_enabled = true;
    libGame_gf_CapturePointDisable(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_beaconIndex);
    libCore_gf_SendActorMessageToDoodadsInRegion("Signal DeactivateCapturePoint", RegionCircle(UnitGetPosition(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple), 12.0), null);
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_blessed = false;
    libAMCT_gf_ARMSkyTempleUpdateTempleMinimapIcon(lp_templeIndex, libAMCT_ge_ARMSkyTempleMinimapIconState_Disable);
    return true;
}

trigger auto_libAMCT_gf_ARMSkyTempleClearTempleTargetRevealers_Trigger = null;
int auto_libAMCT_gf_ARMSkyTempleClearTempleTargetRevealers_lp_templeIndex;
fixed auto_libAMCT_gf_ARMSkyTempleClearTempleTargetRevealers_lp_delay;

void libAMCT_gf_ARMSkyTempleClearTempleTargetRevealers (int lp_templeIndex, fixed lp_delay) {
    auto_libAMCT_gf_ARMSkyTempleClearTempleTargetRevealers_lp_templeIndex = lp_templeIndex;
    auto_libAMCT_gf_ARMSkyTempleClearTempleTargetRevealers_lp_delay = lp_delay;

    if (auto_libAMCT_gf_ARMSkyTempleClearTempleTargetRevealers_Trigger == null) {
        auto_libAMCT_gf_ARMSkyTempleClearTempleTargetRevealers_Trigger = TriggerCreate("auto_libAMCT_gf_ARMSkyTempleClearTempleTargetRevealers_TriggerFunc");
    }

    TriggerExecute(auto_libAMCT_gf_ARMSkyTempleClearTempleTargetRevealers_Trigger, false, false);
}

bool auto_libAMCT_gf_ARMSkyTempleClearTempleTargetRevealers_TriggerFunc (bool testConds, bool runActions) {
    int lp_templeIndex = auto_libAMCT_gf_ARMSkyTempleClearTempleTargetRevealers_lp_templeIndex;
    fixed lp_delay = auto_libAMCT_gf_ARMSkyTempleClearTempleTargetRevealers_lp_delay;

    // Variable Declarations
    revealer lv_revealers;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_revealers = libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_targetRevealer;
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_targetRevealer = null;
    Wait(lp_delay, c_timeGame);
    VisRevealerDestroy(lv_revealers);
    return true;
}

unit libAMCT_gf_ARMSkyTempleNextTempleTarget (int lp_templeIndex) {
    // Variable Declarations
    unit lv_enemyCore;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitGetOwner(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple) == libCore_gv_cOMPUTER_TeamChaos)) {
        lv_enemyCore = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core;
    }
    else {
        lv_enemyCore = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core;
    }
    if ((UnitIsAlive(lv_enemyCore) == true)) {
        return lv_enemyCore;
    }
    else {
        return null;
    }
}

void libAMCT_gf_ARMSkyTempleStopShooting (int lp_templeIndex) {
    // Automatic Variable Declarations
    // Implementation
    UnitIssueOrder(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_targetUnit = null;
    libAMCT_gf_ARMSkyTempleClearTempleTargetRevealers(lp_templeIndex, 6.0);
}

void libAMCT_gf_ARMSkyTempleCreateShootingBeamPing (point lp_pingLocation, fixed lp_distance, fixed lp_angel) {
    // Variable Declarations
    string lv_pingModels;
    string lv_model;
    fixed lv_scale;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_distance >= 44.0) && (lp_distance < 49.0)) {
        lv_pingModels = "StormPingLightningD";
    }
    else if ((lp_distance >= 49.0) && (lp_distance < 51.0)) {
        lv_pingModels = "StormPingLightningD";
        lv_scale = 1.1;
    }
    else if ((lp_distance >= 72.0) && (lp_distance < 73.0)) {
        lv_pingModels = "StormPingLightningE";
        lv_scale = 1.42;
    }
    else if ((lp_distance >= 35.0) && (lp_distance < 37.0)) {
        lv_pingModels = "StormPingLightningA";
        lv_scale = 1.37;
    }
    libNtve_gf_CreatePingFacingAngleWithType(PlayerGroupAll(), lv_pingModels, lp_pingLocation, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 1.3334, lp_angel, -1, -1);
    if ((lv_scale != 0.0)) {
        PingSetScale(PingLastCreated(), lv_scale);
    }

}

void libAMCT_gf_ARMSkyTempleTempleShootingPing (int lp_templeIndex, unit lp_target) {
    // Variable Declarations
    int lv_team;
    point lv_pointStart;
    point lv_pointEnd;
    point lv_pointEnd2;
    fixed lv_distance;
    fixed lv_angle;
    int lv_damage;
    fixed lv_distanceCenter;

    // Automatic Variable Declarations
    unit auto76A42956_val;

    // Variable Initialization

    // Implementation
    lv_team = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple));
    lv_pointStart = UnitGetPosition(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple);
    lv_pointEnd = UnitGetPosition(lp_target);
    auto76A42956_val = lp_target;
    if (auto76A42956_val == libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core) {
        lv_pointEnd2 = lv_pointEnd;
    }
    else if (auto76A42956_val == libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core) {
        lv_pointEnd2 = lv_pointEnd;
    }
    else {
        return ;
    }
    lv_distance = DistanceBetweenPoints(lv_pointStart, lv_pointEnd);
    lv_distanceCenter = DistanceBetweenPoints(lv_pointStart, lv_pointEnd2);
    lv_angle = AngleBetweenPoints(lv_pointStart, lv_pointEnd2);
    libAMCT_gf_ARMSkyTempleCreateShootingBeamPing(lv_pointStart, lv_distanceCenter, lv_angle);
}

bool libAMCT_gf_ARMSkyTempleTempleActive () {
    // Variable Declarations
    int lv_itTempleIndex;

    // Automatic Variable Declarations
    int auto13E752E7_ae;
    const int auto13E752E7_ai = 1;

    // Variable Initialization

    // Implementation
    auto13E752E7_ae = libAMCT_gv_aRMSkyTempleTempleCount;
    lv_itTempleIndex = 1;
    for ( ; ( (auto13E752E7_ai >= 0 && lv_itTempleIndex <= auto13E752E7_ae) || (auto13E752E7_ai < 0 && lv_itTempleIndex >= auto13E752E7_ae) ) ; lv_itTempleIndex += auto13E752E7_ai ) {
        if ((libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_blessed == true)) {
            return true;
        }

    }
    return false;
}

void libAMCT_gf_ARMSkyTempleUpdateTempleMinimapIcon (int lp_templeIndex, int lp_state) {
    // Automatic Variable Declarations
    int auto3248CD86_val;

    // Implementation
    auto3248CD86_val = lp_state;
    if (auto3248CD86_val == libAMCT_ge_ARMSkyTempleMinimapIconState_Prepare) {
        libNtve_gf_SendActorMessageToUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_minimapIcon, "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_skytemplemid.dds");
        libNtve_gf_SendActorMessageToUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_minimapIcon, "MinimapIconTintColor 255,197,197,197");
        libNtve_gf_SendActorMessageToUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_minimapIcon, "MinimapIconScale 0.800000");
        libNtve_gf_SendActorMessageToUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, "SetMinimapVisibility");
        libNtve_gf_SendActorMessageToUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, "SetMinimapVisibilityAlways");
        libNtve_gf_SendActorMessageToUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_minimapIcon, "SetMinimapVisibility 1");
        libNtve_gf_SendActorMessageToUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_minimapIcon, "SetMinimapVisibilityAlways 1");
    }
    else if (auto3248CD86_val == libAMCT_ge_ARMSkyTempleMinimapIconState_Enable) {
        libNtve_gf_SendActorMessageToUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, "SetMinimapVisibility 1");
        libNtve_gf_SendActorMessageToUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, "SetMinimapVisibilityAlways 1");
        libNtve_gf_SendActorMessageToUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_minimapIcon, "SetMinimapVisibility");
        libNtve_gf_SendActorMessageToUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_minimapIcon, "SetMinimapVisibilityAlways");
    }
    else if (auto3248CD86_val == libAMCT_ge_ARMSkyTempleMinimapIconState_Disable) {
        libNtve_gf_SendActorMessageToUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_minimapIcon, "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_skytemplemid.dds");
        libNtve_gf_SendActorMessageToUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_minimapIcon, "MinimapIconTintColor 255,197,197,197");
        libNtve_gf_SendActorMessageToUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_minimapIcon, "MinimapIconScale 0.800000");
        libNtve_gf_SendActorMessageToUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, "SetMinimapVisibility");
        libNtve_gf_SendActorMessageToUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, "SetMinimapVisibilityAlways");
        libNtve_gf_SendActorMessageToUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_minimapIcon, "SetMinimapVisibility 1");
        libNtve_gf_SendActorMessageToUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_minimapIcon, "SetMinimapVisibilityAlways 1");
    }
    else {
    }
}

void libAMCT_gf_ARMSkyTempleDisableAIGoals () {
    // Variable Declarations
    unitgroup lv_watchTowers;
    unitgroup lv_healingWells;
    unit lv_unit;
    int lv_team;
    int lv_temple;

    // Automatic Variable Declarations
    const int autoEAE31DA2_ae = libAMCT_gv_aRMSkyTempleMaxCount_C;
    const int autoEAE31DA2_ai = 1;

    // Variable Initialization
    lv_watchTowers = UnitGroup("XelNagaWatchTower", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_healingWells = UnitGroup("TownMoonwellL3", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Implementation
    RemoveUnitOfInterest(libAMCT_gv_aRMSkyTemple[1].lv_beacon, "ArenaCenterStaging", libNtve_ge_GoalTeam_Both);
    lv_temple = 1;
    for ( ; ( (autoEAE31DA2_ai >= 0 && lv_temple <= autoEAE31DA2_ae) || (autoEAE31DA2_ai < 0 && lv_temple >= autoEAE31DA2_ae) ) ; lv_temple += autoEAE31DA2_ai ) {
        if ((libAMCT_gv_aRMSkyTemple[lv_temple].lv_beacon != null)) {
            RemoveUnitOfInterest(libAMCT_gv_aRMSkyTemple[lv_temple].lv_beacon, "TempleBeacon", libNtve_ge_GoalTeam_Both);
        }

    }
}

void libAMCT_gf_ARMSkyTempleResetCoreHealthEvents () {
    // Automatic Variable Declarations
    // Implementation
    libAMCT_gv_aRMSkyTempleSecondTempleEventStarted = false;
    libAMCT_gv_aRMSkyTempleOrderCoreBelow50 = false;
    libAMCT_gv_aRMSkyTempleOrderCoreBelow20 = false;
    libAMCT_gv_aRMSkyTempleChaosCoreBelow50 = false;
    libAMCT_gv_aRMSkyTempleChaosCoreBelow20 = false;
}

void libAMCT_gf_ARMSkyTempleCoreHealthTransmissionChecker () {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetPropertyFixed(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0) && (libAMCT_gv_aRMSkyTempleOrderCoreBelow50 == false)) {
        libAMCT_gf_ARMSkyTempleTransmissionOrderCore50();
        libAMCT_gv_aRMSkyTempleOrderCoreBelow50 = true;
        libAREN_gf_ARM_UpdateWallaLevel(2);
    }

    if ((UnitGetPropertyFixed(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core, c_unitPropLifePercent, c_unitPropCurrent) <= 20.0) && (libAMCT_gv_aRMSkyTempleOrderCoreBelow20 == false)) {
        libAMCT_gf_ARMSkyTempleTransmissionOrderCore20();
        libAMCT_gv_aRMSkyTempleOrderCoreBelow20 = true;
        libAREN_gf_ARM_UpdateWallaLevel(3);
    }

    if ((UnitGetPropertyFixed(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0) && (libAMCT_gv_aRMSkyTempleChaosCoreBelow50 == false)) {
        libAMCT_gf_ARMSkyTempleTransmissionChaosCore50();
        libAMCT_gv_aRMSkyTempleChaosCoreBelow50 = true;
        libAREN_gf_ARM_UpdateWallaLevel(2);
    }

    if ((UnitGetPropertyFixed(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, c_unitPropLifePercent, c_unitPropCurrent) <= 20.0) && (libAMCT_gv_aRMSkyTempleChaosCoreBelow20 == false)) {
        libAMCT_gf_ARMSkyTempleTransmissionChaosCore20();
        libAMCT_gv_aRMSkyTempleChaosCoreBelow20 = true;
        libAREN_gf_ARM_UpdateWallaLevel(3);
    }

}

void libAMCT_gf_ARMSkyTemplePrepareTemplesLevel3 () {
    // Variable Declarations
    int lv_itTempleIndex;

    // Automatic Variable Declarations
    int autoC5BF9F5F_ae;
    const int autoC5BF9F5F_ai = 1;

    // Variable Initialization

    // Implementation
    TriggerExecute(libAMCT_gt_ARMSkyTempleBeaconColor, true, false);
    autoC5BF9F5F_ae = libAMCT_gv_aRMSkyTempleTempleCount;
    lv_itTempleIndex = 2;
    for ( ; ( (autoC5BF9F5F_ai >= 0 && lv_itTempleIndex <= autoC5BF9F5F_ae) || (autoC5BF9F5F_ai < 0 && lv_itTempleIndex >= autoC5BF9F5F_ae) ) ; lv_itTempleIndex += autoC5BF9F5F_ai ) {
        libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormArenaAlert", libAMCT_gf_ARMSkyTempleLocation(lv_itTempleIndex), Color(100.00, 100.00, 0.00), 8.0);
        SoundPlayAtPointForPlayer(SoundLink("UI_Game_Ping_LuxoriaTemple_Spawned", -1), c_maxPlayers, PlayerGroupAll(), libAMCT_gf_ARMSkyTempleLocation(lv_itTempleIndex), 0.0, 100.0, 0.0);
        libAMCT_gf_ARMSkyTemplePrepareTempleDefenders(lv_itTempleIndex);
    }
    TimerStart(libAMCT_gv_aRMSkyTempleActivateWarningTimer, libAMCT_gv_aRMSkyTempleWarningTime, false, c_timeGame);
}

void libAMCT_gf_ARMSkyTempleTempleDefendersRespawnCheckConditions (int lp_templeIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_blessed == false)) {
        libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderBossDeathDuration = 0;
        return ;
    }

    if ((libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_timed == false) && (ModF(UnitGetPropertyFixed(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple, c_unitPropEnergy, c_unitPropCurrent), 20.0) == 0.0) && (UnitGroupCount(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defendersActivated, c_unitCountAlive) <= 2)) {
        libAMCT_gf_ARMSkyTempleTempleDefendersRespawnPrepareDefendersRanged(lp_templeIndex);
    }

    if ((UnitIsAlive(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderArray[1]) == false)) {
        if ((UnitGetOwner(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple) != libCore_gv_cOMPUTER_Neutral)) {
            libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderBossDeathDuration += 0.25;
            if ((libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderBossDeathDuration >= 20.0)) {
                libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderBossDeathDuration = 0.0;
                libAMCT_gf_ARMSkyTempleTempleDefendersRespawnRespawnDefender(1, lp_templeIndex);
            }

        }

    }
    else {
        libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderBossDeathDuration = 0.0;
    }
}

trigger auto_libAMCT_gf_ARMSkyTempleTempleDefendersRespawnPrepareDefendersRanged_Trigger = null;
int auto_libAMCT_gf_ARMSkyTempleTempleDefendersRespawnPrepareDefendersRanged_lp_templeIndex;

void libAMCT_gf_ARMSkyTempleTempleDefendersRespawnPrepareDefendersRanged (int lp_templeIndex) {
    auto_libAMCT_gf_ARMSkyTempleTempleDefendersRespawnPrepareDefendersRanged_lp_templeIndex = lp_templeIndex;

    if (auto_libAMCT_gf_ARMSkyTempleTempleDefendersRespawnPrepareDefendersRanged_Trigger == null) {
        auto_libAMCT_gf_ARMSkyTempleTempleDefendersRespawnPrepareDefendersRanged_Trigger = TriggerCreate("auto_libAMCT_gf_ARMSkyTempleTempleDefendersRespawnPrepareDefendersRanged_TriggerFunc");
    }

    TriggerExecute(auto_libAMCT_gf_ARMSkyTempleTempleDefendersRespawnPrepareDefendersRanged_Trigger, false, false);
}

bool auto_libAMCT_gf_ARMSkyTempleTempleDefendersRespawnPrepareDefendersRanged_TriggerFunc (bool testConds, bool runActions) {
    int lp_templeIndex = auto_libAMCT_gf_ARMSkyTempleTempleDefendersRespawnPrepareDefendersRanged_lp_templeIndex;

    // Variable Declarations
    int lv_itDefender;
    int lv_itPosition;
    int lv_itOtherPosition;
    int lv_newSpawnLine;
    int lv_otherSpawnLine;

    // Automatic Variable Declarations
    const int autoE3752D5A_ae = 2;
    const int autoE3752D5A_ai = 1;
    const int auto7D5EBF0C_ae = 2;
    const int auto7D5EBF0C_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderRespawning == true)) {
        return true;
    }

    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderRespawning = true;
    lv_newSpawnLine = (3 - libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderLastSpawnedLine);
    lv_itPosition = 1;
    for ( ; ( (autoE3752D5A_ai >= 0 && lv_itPosition <= autoE3752D5A_ae) || (autoE3752D5A_ai < 0 && lv_itPosition >= autoE3752D5A_ae) ) ; lv_itPosition += autoE3752D5A_ai ) {
        lv_itDefender = ((lv_newSpawnLine-1)*2+lv_itPosition+1);
        if ((UnitIsAlive(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderArray[lv_itDefender]) == false)) {
            libAMCT_gf_ARMSkyTempleTempleDefendersRespawnRespawnDefender(lv_itDefender, lp_templeIndex);
        }
        else {
            lv_otherSpawnLine = (3 - lv_newSpawnLine);
            lv_itOtherPosition = 1;
            for ( ; ( (auto7D5EBF0C_ai >= 0 && lv_itOtherPosition <= auto7D5EBF0C_ae) || (auto7D5EBF0C_ai < 0 && lv_itOtherPosition >= auto7D5EBF0C_ae) ) ; lv_itOtherPosition += auto7D5EBF0C_ai ) {
                lv_itDefender = ((lv_otherSpawnLine-1)*2+lv_itOtherPosition+1);
                if ((UnitIsAlive(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderArray[lv_itDefender]) == false)) {
                    libAMCT_gf_ARMSkyTempleTempleDefendersRespawnRespawnDefender(lv_itDefender, lp_templeIndex);
                    break;
                }

            }
        }
    }
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderLastSpawnedLine = lv_newSpawnLine;
    Wait(5.0, c_timeGame);
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderRespawning = false;
    return true;
}

trigger auto_libAMCT_gf_ARMSkyTempleTempleDefendersRespawnRespawnDefender_Trigger = null;
int auto_libAMCT_gf_ARMSkyTempleTempleDefendersRespawnRespawnDefender_lp_defenderIndex;
int auto_libAMCT_gf_ARMSkyTempleTempleDefendersRespawnRespawnDefender_lp_templeIndex;

void libAMCT_gf_ARMSkyTempleTempleDefendersRespawnRespawnDefender (int lp_defenderIndex, int lp_templeIndex) {
    auto_libAMCT_gf_ARMSkyTempleTempleDefendersRespawnRespawnDefender_lp_defenderIndex = lp_defenderIndex;
    auto_libAMCT_gf_ARMSkyTempleTempleDefendersRespawnRespawnDefender_lp_templeIndex = lp_templeIndex;

    if (auto_libAMCT_gf_ARMSkyTempleTempleDefendersRespawnRespawnDefender_Trigger == null) {
        auto_libAMCT_gf_ARMSkyTempleTempleDefendersRespawnRespawnDefender_Trigger = TriggerCreate("auto_libAMCT_gf_ARMSkyTempleTempleDefendersRespawnRespawnDefender_TriggerFunc");
    }

    TriggerExecute(auto_libAMCT_gf_ARMSkyTempleTempleDefendersRespawnRespawnDefender_Trigger, false, false);
}

bool auto_libAMCT_gf_ARMSkyTempleTempleDefendersRespawnRespawnDefender_TriggerFunc (bool testConds, bool runActions) {
    int lp_defenderIndex = auto_libAMCT_gf_ARMSkyTempleTempleDefendersRespawnRespawnDefender_lp_defenderIndex;
    int lp_templeIndex = auto_libAMCT_gf_ARMSkyTempleTempleDefendersRespawnRespawnDefender_lp_templeIndex;

    // Variable Declarations
    unitgroup lv_newUnits;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_newUnits = UnitGroupEmpty();

    // Implementation
    libAMCT_gf_ARMSkyTemplePrepareTempleDefender(lp_templeIndex, lp_defenderIndex);
    Wait(5.0, c_timeGame);
    while (!((UnitGetOwner(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_temple) != libCore_gv_cOMPUTER_Neutral))) {
        Wait(1.0, c_timeGame);
    }
    UnitGroupAdd(lv_newUnits, libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderArray[lp_defenderIndex]);
    libAMCT_gf_ARMSkyTempleActivateTempleDefenders(lp_templeIndex, lv_newUnits);
    return true;
}

void libAMCT_gf_ARMSkyTemplePrepareTempleDefenders (int lp_templeIndex) {
    // Variable Declarations
    int lv_itDefender;
    int lv_defenderCount;

    // Automatic Variable Declarations
    int auto0BC44263_ae;
    const int auto0BC44263_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_timed == false)) {
        lv_defenderCount = 5;
    }
    else {
        lv_defenderCount = 3;
    }
    auto0BC44263_ae = lv_defenderCount;
    lv_itDefender = 1;
    for ( ; ( (auto0BC44263_ai >= 0 && lv_itDefender <= auto0BC44263_ae) || (auto0BC44263_ai < 0 && lv_itDefender >= auto0BC44263_ae) ) ; lv_itDefender += auto0BC44263_ai ) {
        libAMCT_gf_ARMSkyTemplePrepareTempleDefender(lp_templeIndex, lv_itDefender);
    }
}

void libAMCT_gf_ARMSkyTemplePrepareTempleDefender (int lp_templeIndex, int lp_defenderIndex) {
    // Variable Declarations
    unit lv_itHero;

    // Automatic Variable Declarations
    unitgroup autoEF3A7DAC_g;
    int autoEF3A7DAC_u;

    // Variable Initialization

    // Implementation
    if ((lp_defenderIndex == 1)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "TempleGuardianBoss", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Hostile, libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderSpawnPoints[lp_defenderIndex], null);
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2(1, "TempleDefenderRanged", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Hostile, libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderSpawnPoints[lp_defenderIndex], null);
    }
    libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderArray[lp_defenderIndex] = UnitLastCreated();
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    if ((lp_defenderIndex == 1)) {
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap TempleDefenderMeleeBossSnake");
        libAMCT_gf_ARMSkyTemplePrepareTempleDefenderStatue(lp_templeIndex, lp_defenderIndex);
        autoEF3A7DAC_g = UnitGroup(null, c_playerAny, RegionCircle(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_blockerLoc, 2.0), libCore_gv_filtersHeroic, 0);
        autoEF3A7DAC_u = UnitGroupCount(autoEF3A7DAC_g, c_unitCountAll);
        for (;; autoEF3A7DAC_u -= 1) {
            lv_itHero = UnitGroupUnitFromEnd(autoEF3A7DAC_g, autoEF3A7DAC_u);
            if (lv_itHero == null) { break; }
            UnitSetPosition(lv_itHero, PointWithOffset(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_blockerLoc, 0.0, -2.0), true);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TempleDefenderPathingBlocker", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_blockerLoc, null);
        libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderBossPathingBlocker = UnitLastCreated();
    }
    else {
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap TempleDefenderRangedSnake");
        libAMCT_gf_ARMSkyTemplePrepareTempleDefenderStatue(lp_templeIndex, lp_defenderIndex);
    }
}

trigger auto_libAMCT_gf_ARMSkyTemplePrepareTempleDefenderStatue_Trigger = null;
int auto_libAMCT_gf_ARMSkyTemplePrepareTempleDefenderStatue_lp_templeIndex;
int auto_libAMCT_gf_ARMSkyTemplePrepareTempleDefenderStatue_lp_defenderIndex;

void libAMCT_gf_ARMSkyTemplePrepareTempleDefenderStatue (int lp_templeIndex, int lp_defenderIndex) {
    auto_libAMCT_gf_ARMSkyTemplePrepareTempleDefenderStatue_lp_templeIndex = lp_templeIndex;
    auto_libAMCT_gf_ARMSkyTemplePrepareTempleDefenderStatue_lp_defenderIndex = lp_defenderIndex;

    if (auto_libAMCT_gf_ARMSkyTemplePrepareTempleDefenderStatue_Trigger == null) {
        auto_libAMCT_gf_ARMSkyTemplePrepareTempleDefenderStatue_Trigger = TriggerCreate("auto_libAMCT_gf_ARMSkyTemplePrepareTempleDefenderStatue_TriggerFunc");
    }

    TriggerExecute(auto_libAMCT_gf_ARMSkyTemplePrepareTempleDefenderStatue_Trigger, false, false);
}

bool auto_libAMCT_gf_ARMSkyTemplePrepareTempleDefenderStatue_TriggerFunc (bool testConds, bool runActions) {
    int lp_templeIndex = auto_libAMCT_gf_ARMSkyTemplePrepareTempleDefenderStatue_lp_templeIndex;
    int lp_defenderIndex = auto_libAMCT_gf_ARMSkyTemplePrepareTempleDefenderStatue_lp_defenderIndex;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateActorAtPoint("TempleDefenderBirthActor", UnitGetPosition(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderArray[lp_defenderIndex]));
    if ((lp_defenderIndex == 1)) {
        ActorSend(libNtve_gf_ActorLastCreated(), "Signal MeleeSnake");
    }
    else {
        ActorSend(libNtve_gf_ActorLastCreated(), "Signal RangedSnake");
    }
    libNtve_gf_MakeModelFaceAngle(libNtve_gf_ActorLastCreated(), UnitGetFacing(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderArray[lp_defenderIndex]));
    libCore_gf_StoreActorForUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderArray[lp_defenderIndex], 1, libNtve_gf_ActorLastCreated());
    ActorSend(libNtve_gf_ActorLastCreated(), "AnimBracketStart Statue Stand,Work,Start Stand,Work Stand,Work,End 0 0.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetPlayerId");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetVisibility");
    Wait(0.0625, c_timeGame);
    ActorSend(libNtve_gf_ActorLastCreated(), "SetVisibility 1");
    return true;
}

void libAMCT_gf_ARMSkyTempleActivateTempleDefenderWaves (int lp_templeIndex, int lp_stage) {
    // Variable Declarations
    unitgroup lv_newUnits;
    int[3] lv_stageMinionIndexes;
    int lv_itStageMinionIndex;

    // Automatic Variable Declarations
    int autoAF4B4975_val;
    const int auto53BBE5CB_ae = 2;
    const int auto53BBE5CB_ai = 1;

    // Variable Initialization
    lv_newUnits = UnitGroupEmpty();

    // Implementation
    autoAF4B4975_val = lp_stage;
    if (autoAF4B4975_val == 1) {
        lv_stageMinionIndexes[1] = 1;
        lv_stageMinionIndexes[2] = 0;
    }
    else if (autoAF4B4975_val == 2) {
        lv_stageMinionIndexes[1] = 2;
        lv_stageMinionIndexes[2] = 3;
    }
    else if (autoAF4B4975_val == 3) {
        lv_stageMinionIndexes[1] = 4;
        lv_stageMinionIndexes[2] = 5;
    }
    else {
    }
    lv_itStageMinionIndex = 1;
    for ( ; ( (auto53BBE5CB_ai >= 0 && lv_itStageMinionIndex <= auto53BBE5CB_ae) || (auto53BBE5CB_ai < 0 && lv_itStageMinionIndex >= auto53BBE5CB_ae) ) ; lv_itStageMinionIndex += auto53BBE5CB_ai ) {
        if ((lv_stageMinionIndexes[lv_itStageMinionIndex] > 0)) {
            UnitGroupAdd(lv_newUnits, libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderArray[lv_stageMinionIndexes[lv_itStageMinionIndex]]);
        }

    }
    libAMCT_gf_ARMSkyTempleActivateTempleDefenders(lp_templeIndex, lv_newUnits);
}

trigger auto_libAMCT_gf_ARMSkyTempleActivateTempleDefender_Trigger = null;
int auto_libAMCT_gf_ARMSkyTempleActivateTempleDefender_lp_templeIndex;
unit auto_libAMCT_gf_ARMSkyTempleActivateTempleDefender_lp_defender;

void libAMCT_gf_ARMSkyTempleActivateTempleDefender (int lp_templeIndex, unit lp_defender) {
    auto_libAMCT_gf_ARMSkyTempleActivateTempleDefender_lp_templeIndex = lp_templeIndex;
    auto_libAMCT_gf_ARMSkyTempleActivateTempleDefender_lp_defender = lp_defender;

    if (auto_libAMCT_gf_ARMSkyTempleActivateTempleDefender_Trigger == null) {
        auto_libAMCT_gf_ARMSkyTempleActivateTempleDefender_Trigger = TriggerCreate("auto_libAMCT_gf_ARMSkyTempleActivateTempleDefender_TriggerFunc");
    }

    TriggerExecute(auto_libAMCT_gf_ARMSkyTempleActivateTempleDefender_Trigger, false, false);
}

bool auto_libAMCT_gf_ARMSkyTempleActivateTempleDefender_TriggerFunc (bool testConds, bool runActions) {
    int lp_templeIndex = auto_libAMCT_gf_ARMSkyTempleActivateTempleDefender_lp_templeIndex;
    unit lp_defender = auto_libAMCT_gf_ARMSkyTempleActivateTempleDefender_lp_defender;

    // Variable Declarations
    actor lv_effectActor;

    // Automatic Variable Declarations
    string autoB5782E17_val;

    // Variable Initialization

    // Implementation
    lv_effectActor = libCore_gf_ActorStoredForUnit(lp_defender, 1);
    ActorSend(lv_effectActor, "AnimBracketStop Statue");
    autoB5782E17_val = UnitGetType(lp_defender);
    if (autoB5782E17_val == "TempleGuardianBoss") {
        Wait(3.0, c_timeGame);
        UnitRemove(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderBossPathingBlocker);
        libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderBossPathingBlocker = null;
        Wait(2.2, c_timeGame);
        UnitSetState(lp_defender, c_unitStateStatusBar, true);
    }
    else if (autoB5782E17_val == "TempleDefenderRanged") {
        Wait(4.5, c_timeGame);
        UnitBehaviorAdd(lp_defender, "TempleRangedDefenderBirthDelay", lp_defender, 1);
    }
    else {
    }
    libNtve_gf_ShowHideUnit(lp_defender, true);
    ActorSend(lv_effectActor, "Destroy Immediate");
    libNtve_gf_SendActorMessageToUnit(lp_defender, "AnimSetPausedAll 0");
    libNtve_gf_SendActorMessageToUnit(lp_defender, "AnimPlay Birth Birth 0 0.000000 -1.000000 1.000000 AsTimeScale");
    libNtve_gf_PauseUnit(lp_defender, false);
    libNtve_gf_MakeUnitInvulnerable(lp_defender, false);
    UnitSetState(lp_defender, c_unitStateTargetable, true);
    libNtve_gf_SendActorMessageToUnit(lp_defender, "Signal ActivationSound");
    UnitGroupAdd(libAMCT_gv_aRMSkyTempleDefenderWithGlobes, lp_defender);
    return true;
}

trigger auto_libAMCT_gf_ARMSkyTempleActivateTempleDefenders_Trigger = null;
int auto_libAMCT_gf_ARMSkyTempleActivateTempleDefenders_lp_templeIndex;
unitgroup auto_libAMCT_gf_ARMSkyTempleActivateTempleDefenders_lp_defender;

void libAMCT_gf_ARMSkyTempleActivateTempleDefenders (int lp_templeIndex, unitgroup lp_defender) {
    auto_libAMCT_gf_ARMSkyTempleActivateTempleDefenders_lp_templeIndex = lp_templeIndex;
    auto_libAMCT_gf_ARMSkyTempleActivateTempleDefenders_lp_defender = lp_defender;

    if (auto_libAMCT_gf_ARMSkyTempleActivateTempleDefenders_Trigger == null) {
        auto_libAMCT_gf_ARMSkyTempleActivateTempleDefenders_Trigger = TriggerCreate("auto_libAMCT_gf_ARMSkyTempleActivateTempleDefenders_TriggerFunc");
    }

    TriggerExecute(auto_libAMCT_gf_ARMSkyTempleActivateTempleDefenders_Trigger, false, false);
}

bool auto_libAMCT_gf_ARMSkyTempleActivateTempleDefenders_TriggerFunc (bool testConds, bool runActions) {
    int lp_templeIndex = auto_libAMCT_gf_ARMSkyTempleActivateTempleDefenders_lp_templeIndex;
    unitgroup lp_defender = auto_libAMCT_gf_ARMSkyTempleActivateTempleDefenders_lp_defender;

    // Variable Declarations
    const int lv_leashRadius = 10;
    int lv_itDefenderIndex;
    unit lv_itDefender;

    // Automatic Variable Declarations
    unitgroup autoF26DF946_g;
    int autoF26DF946_u;
    int auto0F63D990_ae;
    const int auto0F63D990_ai = 1;
    int autoF7B35B01_ae;
    const int autoF7B35B01_ai = 1;

    // Variable Initialization

    // Implementation
    if ((UnitGroupCount(lp_defender, c_unitCountAlive) <= 0)) {
        return true;
    }

    autoF26DF946_g = lp_defender;
    autoF26DF946_u = UnitGroupCount(autoF26DF946_g, c_unitCountAll);
    for (;; autoF26DF946_u -= 1) {
        lv_itDefender = UnitGroupUnitFromEnd(autoF26DF946_g, autoF26DF946_u);
        if (lv_itDefender == null) { break; }
        libAMCT_gf_ARMSkyTempleActivateTempleDefender(lp_templeIndex, lv_itDefender);
    }
    if ((libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderAIIndex == 0)) {
        libAIAI_gf_StartDefenderAI(false, lp_defender, RegionCircle(UnitGetPosition(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_beacon), lv_leashRadius), RegionCircle(UnitGetPosition(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_beacon), 5.0), false);
        libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderAIIndex = libAIAI_gf_LastCreatedDefenderAI();
        autoF7B35B01_ae = libAIAI_gf_DefenderUnitCount(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderAIIndex);
        lv_itDefenderIndex = 1;
        for ( ; ( (autoF7B35B01_ai >= 0 && lv_itDefenderIndex <= autoF7B35B01_ae) || (autoF7B35B01_ai < 0 && lv_itDefenderIndex >= autoF7B35B01_ae) ) ; lv_itDefenderIndex += autoF7B35B01_ai ) {
            libAIAI_gf_SetDefenderLeashLocation(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderAIIndex, lv_itDefenderIndex, UnitGetPosition(libAIAI_gf_DefenderUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderAIIndex, lv_itDefenderIndex)));
        }
    }
    else {
        libAIAI_gf_AddUnitsToDefenderAI(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderAIIndex, lp_defender);
        auto0F63D990_ae = libAIAI_gf_DefenderUnitCount(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderAIIndex);
        lv_itDefenderIndex = 1;
        for ( ; ( (auto0F63D990_ai >= 0 && lv_itDefenderIndex <= auto0F63D990_ae) || (auto0F63D990_ai < 0 && lv_itDefenderIndex >= auto0F63D990_ae) ) ; lv_itDefenderIndex += auto0F63D990_ai ) {
            if ((UnitGroupHasUnit(lp_defender, libAIAI_gf_DefenderUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderAIIndex, lv_itDefenderIndex)) == true)) {
                libAIAI_gf_SetDefenderLeashLocation(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderAIIndex, lv_itDefenderIndex, PointWithOffsetPolar(UnitGetPosition(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_beacon), 4.6, AngleBetweenPoints(UnitGetPosition(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_beacon), UnitGetPosition(libAIAI_gf_DefenderUnit(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defenderAIIndex, lv_itDefenderIndex)))));
            }

        }
    }
    UnitGroupAddUnitGroup(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_defendersActivated, lp_defender);
    return true;
}

trigger auto_libAMCT_gf_ARMSkyTempleDeactivateTempleDefender_Trigger = null;
unit auto_libAMCT_gf_ARMSkyTempleDeactivateTempleDefender_lp_defender;

void libAMCT_gf_ARMSkyTempleDeactivateTempleDefender (unit lp_defender) {
    auto_libAMCT_gf_ARMSkyTempleDeactivateTempleDefender_lp_defender = lp_defender;

    if (auto_libAMCT_gf_ARMSkyTempleDeactivateTempleDefender_Trigger == null) {
        auto_libAMCT_gf_ARMSkyTempleDeactivateTempleDefender_Trigger = TriggerCreate("auto_libAMCT_gf_ARMSkyTempleDeactivateTempleDefender_TriggerFunc");
    }

    TriggerExecute(auto_libAMCT_gf_ARMSkyTempleDeactivateTempleDefender_Trigger, false, false);
}

bool auto_libAMCT_gf_ARMSkyTempleDeactivateTempleDefender_TriggerFunc (bool testConds, bool runActions) {
    unit lp_defender = auto_libAMCT_gf_ARMSkyTempleDeactivateTempleDefender_lp_defender;

    // Automatic Variable Declarations
    // Implementation
    UnitGroupRemove(libAMCT_gv_aRMSkyTempleDefenderWithGlobes, lp_defender);
    UnitCreateEffectUnit(lp_defender, "KillSquish", lp_defender);
    return true;
}

int libAMCT_gf_ARMSkyTempleTempleIndexForDefenders (int lp_defenderAIIndex) {
    // Variable Declarations
    int lv_itTempleIndex;

    // Automatic Variable Declarations
    int autoAAF6548C_ae;
    const int autoAAF6548C_ai = 1;

    // Variable Initialization

    // Implementation
    autoAAF6548C_ae = libAMCT_gv_aRMSkyTempleTempleCount;
    lv_itTempleIndex = 1;
    for ( ; ( (autoAAF6548C_ai >= 0 && lv_itTempleIndex <= autoAAF6548C_ae) || (autoAAF6548C_ai < 0 && lv_itTempleIndex >= autoAAF6548C_ae) ) ; lv_itTempleIndex += autoAAF6548C_ai ) {
        if ((libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_defenderAIIndex == lp_defenderAIIndex)) {
            return lv_itTempleIndex;
        }

    }
    return 0;
}

void libAMCT_gf_MMCapturePointsUIHookupTemplePanel (int lp_TempleIndex) {
    // Variable Declarations
    int lv_currentTemplePanel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentTemplePanel = c_invalidDialogControlId;

    // Implementation
    if ((lp_TempleIndex > libAMCT_gv_aRMSkyTempleTempleCount)) {
        return ;
    }

    DialogControlHookup(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleModeFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Shrine" + IntToString(lp_TempleIndex))));
    lv_currentTemplePanel = DialogControlLastCreated();
    libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleFireEffect2[lp_TempleIndex] = DialogControlLastCreated();
    DialogControlSetVisible(lv_currentTemplePanel, PlayerGroupAll(), true);
    DialogControlHookup(lv_currentTemplePanel, c_triggerControlTypePanel, "BackgroundBlue");
    libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleBGImageBlue[lp_TempleIndex] = DialogControlLastCreated();
    DialogControlHookup(lv_currentTemplePanel, c_triggerControlTypePanel, "BackgroundRed");
    libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleBGImageRed[lp_TempleIndex] = DialogControlLastCreated();
    DialogControlHookup(lv_currentTemplePanel, c_triggerControlTypeImage, "Disabled");
    libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleDisabledImage[lp_TempleIndex] = DialogControlLastCreated();
    DialogControlHookup(lv_currentTemplePanel, c_triggerControlTypeImage, "Enabled");
    libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleEnabledImage[lp_TempleIndex] = DialogControlLastCreated();
    DialogControlHookup(lv_currentTemplePanel, c_triggerControlTypeLabel, "TimerLabel");
    libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleTimerLabel[lp_TempleIndex] = DialogControlLastCreated();
}

bool libAMCT_gf_MMCapturePointsUIAnyTempleisBlessed () {
    // Variable Declarations
    int lv_templeIterator;

    // Automatic Variable Declarations
    int auto3008EAD7_ae;

    // Variable Initialization

    // Implementation
    auto3008EAD7_ae = libAMCT_gv_aRMSkyTempleMaxCount_C;
    lv_templeIterator = 1;
    for ( ; lv_templeIterator <= auto3008EAD7_ae ; lv_templeIterator += 1 ) {
        if ((libAMCT_gv_aRMSkyTemple[lv_templeIterator].lv_blessed == true)) {
            return true;
        }

    }
    return false;
}

void libAMCT_gf_MMCapturePointsUIEnableDisableTemple (bool lp_enableDisable, int lp_templeIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enableDisable == true)) {
        DialogControlSetVisible(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleDisabledImage[lp_templeIndex], PlayerGroupAll(), false);
        DialogControlSetVisible(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleEnabledImage[lp_templeIndex], PlayerGroupAll(), true);
        if ((libGame_gf_CapturePointCounter(libAMCT_gv_aRMSkyTemple[lp_templeIndex].lv_beaconIndex) == 0)) {
            DialogControlSetAnimationState(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleFireEffect2[lp_templeIndex], PlayerGroupAll(), "ArrowUpState", "On");
            DialogControlSetAnimationState(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleFireEffect2[lp_templeIndex], PlayerGroupAll(), "ArrowDownState", "On");
        }

    }
    else {
        DialogControlSetVisible(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleDisabledImage[lp_templeIndex], PlayerGroupAll(), true);
        DialogControlSetVisible(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleEnabledImage[lp_templeIndex], PlayerGroupAll(), false);
        DialogControlSetVisible(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleBGImageBlue[lp_templeIndex], PlayerGroupAll(), false);
        DialogControlSetVisible(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleBGImageRed[lp_templeIndex], PlayerGroupAll(), false);
        DialogControlSetAnimationState(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleFireEffect2[lp_templeIndex], PlayerGroupAll(), "ArrowUpState", "Off");
        DialogControlSetAnimationState(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleFireEffect2[lp_templeIndex], PlayerGroupAll(), "ArrowDownState", "Off");
    }
}

void libAMCT_gf_MMCapturePointsUIAnnounceTemplesStatus (int lp_temple) {
    // Variable Declarations
    int lv_templeIndex;

    // Automatic Variable Declarations
    int auto9C2BC0E7_val;
    int auto458FFFDB_ae;
    const int auto458FFFDB_ai = 1;
    int auto53A3211E_ae;
    const int auto53A3211E_ai = 1;
    int auto311E20F1_ae;
    const int auto311E20F1_ai = 1;
    int autoFE79D25A_ae;
    const int autoFE79D25A_ai = 1;

    // Variable Initialization

    // Implementation
    auto9C2BC0E7_val = lp_temple;
    if (auto9C2BC0E7_val == libAMCT_ge_MMCapturePointsUIModes_NoTemples) {
        auto458FFFDB_ae = libAMCT_gv_aRMSkyTempleTempleCount;
        lv_templeIndex = 1;
        for ( ; ( (auto458FFFDB_ai >= 0 && lv_templeIndex <= auto458FFFDB_ae) || (auto458FFFDB_ai < 0 && lv_templeIndex >= auto458FFFDB_ae) ) ; lv_templeIndex += auto458FFFDB_ai ) {
            DialogControlSetVisible(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleTimerLabel[lv_templeIndex], PlayerGroupAll(), false);
        }
    }
    else if (auto9C2BC0E7_val == libAMCT_ge_MMCapturePointsUIModes_TemplesActive) {
        auto53A3211E_ae = libAMCT_gv_aRMSkyTempleTempleCount;
        lv_templeIndex = 1;
        for ( ; ( (auto53A3211E_ai >= 0 && lv_templeIndex <= auto53A3211E_ae) || (auto53A3211E_ai < 0 && lv_templeIndex >= auto53A3211E_ae) ) ; lv_templeIndex += auto53A3211E_ai ) {
            DialogControlSetVisible(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleTimerLabel[lv_templeIndex], PlayerGroupAll(), false);
        }
    }
    else if (auto9C2BC0E7_val == libAMCT_ge_MMCapturePointsUIModes_TemplesActivating) {
        DialogControlSetVisible(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTimerModeFrame, PlayerGroupAll(), true);
        if ((libAMCT_gf_MMCapturePointsUIAnyTempleisBlessed() == false)) {
            libNtve_gf_SetDialogItemText(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTimerModeNameLabel, StringExternal("Param/Value/lib_AMCT_2DF5CC6E"), PlayerGroupAll());
        }
        else {
            if ((libAMCT_gf_ARMSkyTempleCurrentLevel() == libAMCT_ge_ARMSkyTempleLevel_TwoTemples)) {
                libNtve_gf_SetDialogItemText(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTimerModeNameLabel, StringExternal("Param/Value/lib_AMCT_46C5AFF2"), PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemText(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTimerModeNameLabel, StringExternal("Param/Value/lib_AMCT_DC568D56"), PlayerGroupAll());
            }
        }
        auto311E20F1_ae = libAMCT_gv_aRMSkyTempleTempleCount;
        lv_templeIndex = 1;
        for ( ; ( (auto311E20F1_ai >= 0 && lv_templeIndex <= auto311E20F1_ae) || (auto311E20F1_ai < 0 && lv_templeIndex >= auto311E20F1_ae) ) ; lv_templeIndex += auto311E20F1_ai ) {
            DialogControlSetVisible(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleTimerLabel[lv_templeIndex], PlayerGroupAll(), false);
        }
    }
    else if (auto9C2BC0E7_val == libAMCT_ge_MMCapturePointsUIModes_TemplesDeactivating) {
        DialogControlSetVisible(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTimerModeFrame, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTimerModeNameLabel, StringExternal("Param/Value/lib_AMCT_5EF70358"), PlayerGroupAll());
        autoFE79D25A_ae = libAMCT_gv_aRMSkyTempleTempleCount;
        lv_templeIndex = 2;
        for ( ; ( (autoFE79D25A_ai >= 0 && lv_templeIndex <= autoFE79D25A_ae) || (autoFE79D25A_ai < 0 && lv_templeIndex >= autoFE79D25A_ae) ) ; lv_templeIndex += autoFE79D25A_ai ) {
            DialogControlSetVisible(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleTimerLabel[lv_templeIndex], PlayerGroupAll(), true);
        }
    }
    else {
    }
}

void libAMCT_gf_MMCapturePointsUISetTempleCaptureProgress (int lp_templeIndex, int lp_team, int lp_progress, int lp_progerssMax) {
    // Variable Declarations
    int lv_maskBlue;
    int lv_maskRed;
    int lv_enemyTeam;
    const int lv_width_C = 112;
    const int lv_height_C = 112;
    int lv_height;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_maskBlue = c_invalidDialogControlId;
    lv_maskRed = c_invalidDialogControlId;

    // Implementation
    if ((lp_team == 0)) {
        DialogControlSetVisible(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleBGImageBlue[lp_templeIndex], PlayerGroupAll(), false);
        DialogControlSetVisible(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleBGImageRed[lp_templeIndex], PlayerGroupAll(), false);
        return ;
    }

    lv_enemyTeam = libGame_gf_EnemyTeam(lp_team);
    lv_maskBlue = libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleBGImageBlue[lp_templeIndex];
    lv_maskRed = libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleBGImageRed[lp_templeIndex];
    DialogControlSetVisible(lv_maskBlue, libGame_gf_PlayersOnTeamHeroes(lp_team, false), true);
    DialogControlSetVisible(lv_maskRed, libGame_gf_PlayersOnTeamHeroes(lp_team, false), false);
    DialogControlSetVisible(lv_maskRed, libGame_gf_PlayersOnTeamHeroes(lv_enemyTeam, false), true);
    DialogControlSetVisible(lv_maskBlue, libGame_gf_PlayersOnTeamHeroes(lv_enemyTeam, false), false);
    if ((lp_team == libGame_gv_teamOrderIndex_C)) {
        DialogControlSetVisible(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleBGImageBlue[lp_templeIndex], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        DialogControlSetVisible(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleBGImageRed[lp_templeIndex], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    }
    else {
        DialogControlSetVisible(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleBGImageBlue[lp_templeIndex], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        DialogControlSetVisible(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleBGImageRed[lp_templeIndex], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    }
    lv_height = FixedToInt((IntToFixed(lp_progress)*IntToFixed(lv_height_C)/lp_progerssMax));
    DialogControlSetSize(lv_maskBlue, PlayerGroupAll(), lv_width_C, lv_height);
    DialogControlSetSize(lv_maskRed, PlayerGroupAll(), lv_width_C, lv_height);
    libAMCT_gf_MMCapturePointsUISetTempleArrowColor(lp_templeIndex, lp_team, (lp_progress / IntToFixed(lp_progerssMax)));
}

void libAMCT_gf_MMCapturePointsUISetTempleArrowColor (int lp_templeIndex, int lp_team, fixed lp_progress) {
    // Variable Declarations
    int lv_enemyTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_team == 0)) {
        DialogControlSetVisible(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleBGImageBlue[lp_templeIndex], PlayerGroupAll(), false);
        DialogControlSetVisible(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleBGImageRed[lp_templeIndex], PlayerGroupAll(), false);
        return ;
    }

    lv_enemyTeam = libGame_gf_EnemyTeam(lp_team);
    if ((lp_progress > 0.9)) {
        DialogControlSetAnimationState(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleFireEffect2[lp_templeIndex], libGame_gf_PlayersOnTeamHeroes(lp_team, false), "ArrowUpState", "Blue");
        DialogControlSetAnimationState(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleFireEffect2[lp_templeIndex], libGame_gf_PlayersOnTeamHeroes(lv_enemyTeam, false), "ArrowUpState", "Red");
    }
    else {
        DialogControlSetAnimationState(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleFireEffect2[lp_templeIndex], PlayerGroupAll(), "ArrowUpState", "On");
    }
    if ((lp_progress > 0.1)) {
        DialogControlSetAnimationState(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleFireEffect2[lp_templeIndex], libGame_gf_PlayersOnTeamHeroes(lp_team, false), "ArrowDownState", "Blue");
        DialogControlSetAnimationState(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleFireEffect2[lp_templeIndex], libGame_gf_PlayersOnTeamHeroes(lv_enemyTeam, false), "ArrowDownState", "Red");
    }
    else {
        DialogControlSetAnimationState(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleFireEffect2[lp_templeIndex], PlayerGroupAll(), "ArrowDownState", "On");
    }
}

void libAMCT_gf_ARMSkyTempleTransmissionFirstTempleActivates () {
    // Automatic Variable Declarations
    // Implementation
    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Temple Activates - First", "Value", 1, 1);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libAMCT_gf_WaitForConversationToFinish();
    TriggerQueueExit();
}

void libAMCT_gf_ARMSkyTempleTransmissionSingleTempleActivates () {
    // Automatic Variable Declarations
    // Implementation
    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Temple Activates - Single", "Value", 1, 1);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libAMCT_gf_WaitForConversationToFinish();
    TriggerQueueExit();
}

void libAMCT_gf_ARMSkyTempleTransmissionMultipleTemplesActivate () {
    // Automatic Variable Declarations
    // Implementation
    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Temple Activates - Multiple", "Value", 1, 1);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libAMCT_gf_WaitForConversationToFinish();
    TriggerQueueExit();
}

trigger auto_libAMCT_gf_ARMSkyTempleTransmissionOrderCore50_Trigger = null;

void libAMCT_gf_ARMSkyTempleTransmissionOrderCore50 () {
    if (auto_libAMCT_gf_ARMSkyTempleTransmissionOrderCore50_Trigger == null) {
        auto_libAMCT_gf_ARMSkyTempleTransmissionOrderCore50_Trigger = TriggerCreate("auto_libAMCT_gf_ARMSkyTempleTransmissionOrderCore50_TriggerFunc");
    }

    TriggerExecute(auto_libAMCT_gf_ARMSkyTempleTransmissionOrderCore50_Trigger, false, false);
}

bool auto_libAMCT_gf_ARMSkyTempleTransmissionOrderCore50_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupOrder;
    playergroup lv_groupChaos;
    playergroup lv_observers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupOrder = PlayerGroupEmpty();
    lv_groupChaos = PlayerGroupEmpty();
    lv_observers = PlayerGroupEmpty();

    // Implementation
    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Temple 50% - Left", "Value", 1, 1);
    lv_groupOrder = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupChaos = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_observers = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("ArenaVO", ("Left"), lv_groupOrder);
    ConversationDataLineSetPlayers("ArenaVO", ("Right"), lv_groupChaos);
    ConversationDataLineSetPlayers("ArenaVO", ("Observer"), lv_observers);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libAMCT_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMCT_gf_ARMSkyTempleTransmissionChaosCore50_Trigger = null;

void libAMCT_gf_ARMSkyTempleTransmissionChaosCore50 () {
    if (auto_libAMCT_gf_ARMSkyTempleTransmissionChaosCore50_Trigger == null) {
        auto_libAMCT_gf_ARMSkyTempleTransmissionChaosCore50_Trigger = TriggerCreate("auto_libAMCT_gf_ARMSkyTempleTransmissionChaosCore50_TriggerFunc");
    }

    TriggerExecute(auto_libAMCT_gf_ARMSkyTempleTransmissionChaosCore50_Trigger, false, false);
}

bool auto_libAMCT_gf_ARMSkyTempleTransmissionChaosCore50_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupOrder;
    playergroup lv_groupChaos;
    playergroup lv_observers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupOrder = PlayerGroupEmpty();
    lv_groupChaos = PlayerGroupEmpty();
    lv_observers = PlayerGroupEmpty();

    // Implementation
    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Temple 50% - Right", "Value", 1, 1);
    lv_groupOrder = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupChaos = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_observers = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("ArenaVO", ("Left"), lv_groupOrder);
    ConversationDataLineSetPlayers("ArenaVO", ("Right"), lv_groupChaos);
    ConversationDataLineSetPlayers("ArenaVO", ("Observer"), lv_observers);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libAMCT_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMCT_gf_ARMSkyTempleTransmissionOrderCore20_Trigger = null;

void libAMCT_gf_ARMSkyTempleTransmissionOrderCore20 () {
    if (auto_libAMCT_gf_ARMSkyTempleTransmissionOrderCore20_Trigger == null) {
        auto_libAMCT_gf_ARMSkyTempleTransmissionOrderCore20_Trigger = TriggerCreate("auto_libAMCT_gf_ARMSkyTempleTransmissionOrderCore20_TriggerFunc");
    }

    TriggerExecute(auto_libAMCT_gf_ARMSkyTempleTransmissionOrderCore20_Trigger, false, false);
}

bool auto_libAMCT_gf_ARMSkyTempleTransmissionOrderCore20_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupOrder;
    playergroup lv_groupChaos;
    playergroup lv_observers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupOrder = PlayerGroupEmpty();
    lv_groupChaos = PlayerGroupEmpty();
    lv_observers = PlayerGroupEmpty();

    // Implementation
    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Temple 20% - Left", "Value", 1, 1);
    lv_groupOrder = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupChaos = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_observers = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("ArenaVO", ("Left"), lv_groupOrder);
    ConversationDataLineSetPlayers("ArenaVO", ("Right"), lv_groupChaos);
    ConversationDataLineSetPlayers("ArenaVO", ("Observer"), lv_observers);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libAMCT_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libAMCT_gf_ARMSkyTempleTransmissionChaosCore20_Trigger = null;

void libAMCT_gf_ARMSkyTempleTransmissionChaosCore20 () {
    if (auto_libAMCT_gf_ARMSkyTempleTransmissionChaosCore20_Trigger == null) {
        auto_libAMCT_gf_ARMSkyTempleTransmissionChaosCore20_Trigger = TriggerCreate("auto_libAMCT_gf_ARMSkyTempleTransmissionChaosCore20_TriggerFunc");
    }

    TriggerExecute(auto_libAMCT_gf_ARMSkyTempleTransmissionChaosCore20_Trigger, false, false);
}

bool auto_libAMCT_gf_ARMSkyTempleTransmissionChaosCore20_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupOrder;
    playergroup lv_groupChaos;
    playergroup lv_observers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupOrder = PlayerGroupEmpty();
    lv_groupChaos = PlayerGroupEmpty();
    lv_observers = PlayerGroupEmpty();

    // Implementation
    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Temple 20% - Right", "Value", 1, 1);
    lv_groupOrder = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupChaos = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_observers = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("ArenaVO", ("Left"), lv_groupOrder);
    ConversationDataLineSetPlayers("ArenaVO", ("Right"), lv_groupChaos);
    ConversationDataLineSetPlayers("ArenaVO", ("Observer"), lv_observers);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libAMCT_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: ARM<SkyTemple> Level Start
//--------------------------------------------------------------------------------------------------
bool libAMCT_gt_ARMSkyTempleLevelStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_levelIndex;
    int lv_itTempleIndex;
    int lv_itPlayer;
    int lv_itTeam;

    // Automatic Variable Declarations
    int autoF62E7D20_ae;
    const int autoF62E7D20_ai = 1;
    playergroup auto96A05B87_g;
    int autoFD853AA6_val;
    const int auto52E15A0D_ae = 2;
    const int auto52E15A0D_ai = 1;
    const int autoB8076471_ae = 2;
    const int autoB8076471_ai = 1;
    const int autoE05EADB5_ae = 2;
    const int autoE05EADB5_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_levelIndex = libAREN_gf_ArenaCurrentLevelIndex();
    libAMCT_gv_aRMSkyTempleTempleCount = 0;
    libAMCT_gv_aRMSkyTempleNextTemple = 0;
    libAMCT_gv_aRMSkyTempleIsFirstTemple = true;
    if ((libAMCT_gv_aRMSkyTempleLevelStartCallback[lv_levelIndex] != null)) {
        TriggerExecute(libAMCT_gv_aRMSkyTempleLevelStartCallback[lv_levelIndex], true, false);
    }

    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal MM1Off");
    TriggerEnable(libAMCT_gt_ARMSkyTempleGatesOpened, true);
    TriggerEnable(libAMCT_gt_ARMSkyTempleWarningTimerExpires, true);
    TriggerEnable(libAMCT_gt_ARMSkyTempleBeaconCaptured, true);
    TriggerEnable(libAMCT_gt_ARMSkyTempleBeaconColor, true);
    TriggerEnable(libAMCT_gt_ARMSkyTempleTempleAttacks, true);
    TriggerEnable(libAMCT_gt_ARMSkyTempleTempleDefenderDies, true);
    TriggerEnable(libAMCT_gt_ARMSkyTempleCoreDiesGameOver, true);
    libUIUI_gf_PingCreateNewPingTarget("LuxoriaTemple", false, null, StringExternal("Param/Value/lib_AMCT_6005FFD7"), StringExternal("Param/Value/lib_AMCT_FA047CEA"), SoundLink("UI_Game_Ping_Help", -1), SoundLink("UI_Game_Ping_Attack", -1));
    autoF62E7D20_ae = libAMCT_gv_aRMSkyTempleTempleCount;
    lv_itTempleIndex = 1;
    for ( ; ( (autoF62E7D20_ai >= 0 && lv_itTempleIndex <= autoF62E7D20_ae) || (autoF62E7D20_ai < 0 && lv_itTempleIndex >= autoF62E7D20_ae) ) ; lv_itTempleIndex += autoF62E7D20_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "InvisibleBeacon", 0, UnitGetOwner(libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_temple), libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_beaconLoc, null);
        libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_beacon = UnitLastCreated();
        libGame_gf_CapturePointCreate(UnitLastCreated(), libAMCT_gv_aRMSkyTempleCaptureRadius_C, libAMCT_gv_aRMSkyTempleCaptureTime_C, libAMCT_gv_aRMSkyTempleCaptureOverTime_C, libGame_ge_CapturePointDecay_Neutral, libGame_ge_CapturePointDecay_Neutral, true);
        libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_beaconIndex = libGame_gf_LastCreatedCapturePoint();
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetScale 1.300000");
        libGame_gf_CapturePointDisable(libGame_gf_LastCreatedCapturePoint());
        auto96A05B87_g = PlayerGroupAll();
        lv_itPlayer = -1;
        while (true) {
            	lv_itPlayer = PlayerGroupNextPlayer(auto96A05B87_g, lv_itPlayer);
            	if (lv_itPlayer<0) { break; }
            	VisRevealArea(lv_itPlayer, RegionCircle(libAMCT_gf_ARMSkyTempleLocation(lv_itTempleIndex), libAMCT_gv_aRMSkyTempleCaptureRadius_C), 0.125, false);
        }
    }
    autoFD853AA6_val = libAMCT_gf_ARMSkyTempleCurrentLevel();
    if (autoFD853AA6_val == libAMCT_ge_ARMSkyTempleLevel_OneTemple) {
        lv_itTeam = 1;
        for ( ; ( (auto52E15A0D_ai >= 0 && lv_itTeam <= auto52E15A0D_ae) || (auto52E15A0D_ai < 0 && lv_itTeam >= auto52E15A0D_ae) ) ; lv_itTeam += auto52E15A0D_ai ) {
            UnitSetPropertyFixed(libGame_gv_teams[lv_itTeam].lv_core, c_unitPropLifeMax, 75.0);
            UnitSetPropertyFixed(libGame_gv_teams[lv_itTeam].lv_core, c_unitPropLifePercent, 100.0);
        }
        libAMCT_gv_aRMSkyTempleNextTemple = 1;
        libAMCT_gf_ARMSkyTempleUpdateTempleMinimapIcon(libAMCT_gv_aRMSkyTempleNextTemple, libAMCT_ge_ARMSkyTempleMinimapIconState_Prepare);
    }
    else if (autoFD853AA6_val == libAMCT_ge_ARMSkyTempleLevel_TwoTemples) {
        lv_itTeam = 1;
        for ( ; ( (autoB8076471_ai >= 0 && lv_itTeam <= autoB8076471_ae) || (autoB8076471_ai < 0 && lv_itTeam >= autoB8076471_ae) ) ; lv_itTeam += autoB8076471_ai ) {
            UnitSetPropertyFixed(libGame_gv_teams[lv_itTeam].lv_core, c_unitPropLifeMax, 125.0);
            UnitSetPropertyFixed(libGame_gv_teams[lv_itTeam].lv_core, c_unitPropLifePercent, 100.0);
        }
        libAMCT_gv_aRMSkyTempleNextTemple = RandomInt(1, 2);
        libAMCT_gf_ARMSkyTempleUpdateTempleMinimapIcon(libAMCT_gv_aRMSkyTempleNextTemple, libAMCT_ge_ARMSkyTempleMinimapIconState_Prepare);
    }
    else if (autoFD853AA6_val == libAMCT_ge_ARMSkyTempleLevel_ThreeTemples) {
        lv_itTeam = 1;
        for ( ; ( (autoE05EADB5_ai >= 0 && lv_itTeam <= autoE05EADB5_ae) || (autoE05EADB5_ai < 0 && lv_itTeam >= autoE05EADB5_ae) ) ; lv_itTeam += autoE05EADB5_ai ) {
            UnitSetPropertyFixed(libGame_gv_teams[lv_itTeam].lv_core, c_unitPropLifeMax, 150.0);
            UnitSetPropertyFixed(libGame_gv_teams[lv_itTeam].lv_core, c_unitPropLifePercent, 100.0);
        }
        libAMCT_gv_aRMSkyTempleNextTemple = 1;
        libAMCT_gf_ARMSkyTempleUpdateTempleMinimapIcon(libAMCT_gv_aRMSkyTempleNextTemple, libAMCT_ge_ARMSkyTempleMinimapIconState_Prepare);
    }
    else {
    }
    TriggerExecute(libAMCT_gt_ARMSkyTempleUICoreHealthInitialize, true, false);
    TriggerExecute(libAMCT_gt_MMCapturePointsUIInitialize, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMCT_gt_ARMSkyTempleLevelStart_Init () {
    libAMCT_gt_ARMSkyTempleLevelStart = TriggerCreate("libAMCT_gt_ARMSkyTempleLevelStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<SkyTemple> Gates Opened
//--------------------------------------------------------------------------------------------------
bool libAMCT_gt_ARMSkyTempleGatesOpened_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_healingWells;
    int lv_round;
    unit lv_unit;
    int lv_team;

    // Automatic Variable Declarations
    int auto388A7C0E_val;

    // Variable Initialization
    lv_healingWells = UnitGroup("TownMoonwellL3", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Conditions
    if (testConds) {
        if (!((libAMCT_gv_aRMTempleMapEventDisabled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_round = libAREN_gf_ArenaCurrentRoundIndex();
    TimerStart(libAMCT_gv_aRMSkyTempleWarningWaitTimer, (libAMCT_gv_aRMSkyTempleStartTime_C - libAMCT_gv_aRMSkyTempleWarningTime), false, c_timeGame);
    AddUnitOfInterest(libAMCT_gv_aRMSkyTemple[1].lv_beacon, 0.0, 0.0, "ArenaCenterStaging", libNtve_ge_GoalTeam_Both, 0);
    libNtve_gf_WaitForTimer(TimerLastStarted(), 0.0, false);
    if ((TriggerIsEnabled(TriggerGetCurrent()) == false)) {
        return true;
    }

    if ((libAREN_gf_ArenaCurrentRoundIndex() != lv_round)) {
        return true;
    }

    libAMCT_gf_ARMSkyTempleResetCoreHealthEvents();
    auto388A7C0E_val = libAMCT_gf_ARMSkyTempleCurrentLevel();
    if (auto388A7C0E_val == libAMCT_ge_ARMSkyTempleLevel_OneTemple) {
        TriggerEnable(libAMCT_gt_ARMSkyTempleLevel1CoreMonitor, true);
        libAMCT_gf_ARMSkyTemplePrepareTemple(1);
    }
    else if (auto388A7C0E_val == libAMCT_ge_ARMSkyTempleLevel_TwoTemples) {
        TriggerEnable(libAMCT_gt_ARMSkyTempleLevel2CoreMonitor, true);
        libAMCT_gf_ARMSkyTemplePrepareTemple(libAMCT_gv_aRMSkyTempleNextTemple);
    }
    else if (auto388A7C0E_val == libAMCT_ge_ARMSkyTempleLevel_ThreeTemples) {
        TriggerEnable(libAMCT_gt_ARMSkyTempleLevel3CoreMonitor, true);
        libAMCT_gf_ARMSkyTemplePrepareTemple(1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMCT_gt_ARMSkyTempleGatesOpened_Init () {
    libAMCT_gt_ARMSkyTempleGatesOpened = TriggerCreate("libAMCT_gt_ARMSkyTempleGatesOpened_Func");
    TriggerEnable(libAMCT_gt_ARMSkyTempleGatesOpened, false);
    TriggerAddEventTimer(libAMCT_gt_ARMSkyTempleGatesOpened, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<SkyTemple> Warning Timer Expires
//--------------------------------------------------------------------------------------------------
bool libAMCT_gt_ARMSkyTempleWarningTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTempleIndex;
    bool lv_bothTempleDone;
    int lv_itUnit;

    // Automatic Variable Declarations
    int auto7F95A4DF_val;
    int autoD099DF12_val;
    const int autoE9B58B3D_ae = libAMCT_gv_aRMSkyTempleMaxCount_C;
    const int autoE9B58B3D_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libAMCT_gv_aRMSkyTempleIsFirstTemple == true)) {
        libAMCT_gf_ARMSkyTempleTransmissionFirstTempleActivates();
    }

    auto7F95A4DF_val = libAMCT_gf_ARMSkyTempleCurrentLevel();
    if (auto7F95A4DF_val == libAMCT_ge_ARMSkyTempleLevel_OneTemple) {
        if ((libAMCT_gv_aRMSkyTempleIsFirstTemple == false)) {
            libAMCT_gf_ARMSkyTempleTransmissionSingleTempleActivates();
        }
        else {
            libAMCT_gv_aRMSkyTempleIsFirstTemple = false;
        }
        libAMCT_gf_ARMSkyTempleActivateTemple(libAMCT_gv_aRMSkyTempleNextTemple);
    }
    else if (auto7F95A4DF_val == libAMCT_ge_ARMSkyTempleLevel_TwoTemples) {
        if ((libAMCT_gv_aRMSkyTempleIsFirstTemple == false)) {
            libAMCT_gf_ARMSkyTempleTransmissionSingleTempleActivates();
        }
        else {
            libAMCT_gv_aRMSkyTempleIsFirstTemple = false;
        }
        libAMCT_gf_ARMSkyTempleActivateTemple(libAMCT_gv_aRMSkyTempleNextTemple);
        libAMCT_gv_aRMSkyTempleNextTemple = (3 - libAMCT_gv_aRMSkyTempleNextTemple);
    }
    else if (auto7F95A4DF_val == libAMCT_ge_ARMSkyTempleLevel_ThreeTemples) {
        autoD099DF12_val = libAMCT_gv_aRMSkyTempleNextTemple;
        if (autoD099DF12_val == 1) {
            if ((libAMCT_gv_aRMSkyTempleIsFirstTemple == false)) {
                libAMCT_gf_ARMSkyTempleTransmissionSingleTempleActivates();
            }
            else {
                libAMCT_gv_aRMSkyTempleIsFirstTemple = false;
            }
            libAMCT_gf_ARMSkyTempleActivateTemple(1);
            libAMCT_gv_aRMSkyTempleNextTemple += 1;
        }
        else if (autoD099DF12_val == 2) {
            if ((libAMCT_gv_aRMSkyTempleIsFirstTemple == false)) {
                libAMCT_gf_ARMSkyTempleTransmissionMultipleTemplesActivate();
            }
            else {
                libAMCT_gv_aRMSkyTempleIsFirstTemple = false;
            }
            libAMCT_gf_ARMSkyTempleActivateTemple(2);
            libAMCT_gf_ARMSkyTempleActivateTemple(3);
            TimerStart(libAMCT_gv_aRMSkyTempleTimedTempleTimer, libAMCT_gv_aRMSkyTempleLevel3StageDuration_C, false, c_timeGame);
            while (true) {
                if ((TimerGetRemaining(libAMCT_gv_aRMSkyTempleTimedTempleTimer) == 0.0)) {
                    break;
                }

                Wait(0.0625, c_timeGame);
            }
            UnitSetPropertyFixed(libAMCT_gv_aRMSkyTemple[2].lv_temple, c_unitPropEnergy, 0.0);
            UnitSetPropertyFixed(libAMCT_gv_aRMSkyTemple[3].lv_temple, c_unitPropEnergy, 0.0);
            Wait(2.0, c_timeGame);
            lv_itUnit = 1;
            for ( ; ( (autoE9B58B3D_ai >= 0 && lv_itUnit <= autoE9B58B3D_ae) || (autoE9B58B3D_ai < 0 && lv_itUnit >= autoE9B58B3D_ae) ) ; lv_itUnit += autoE9B58B3D_ai ) {
                ActorSend(libCore_gf_ActorStoredForUnit(libAMCT_gv_aRMSkyTemple[2].lv_defenderArray[lv_itUnit], 1), "Signal Clear");
                ActorSend(libCore_gf_ActorStoredForUnit(libAMCT_gv_aRMSkyTemple[3].lv_defenderArray[lv_itUnit], 1), "Signal Clear");
                libAMCT_gf_ARMSkyTempleDeactivateTempleDefender(libAMCT_gv_aRMSkyTemple[2].lv_defenderArray[lv_itUnit]);
                libAMCT_gf_ARMSkyTempleDeactivateTempleDefender(libAMCT_gv_aRMSkyTemple[3].lv_defenderArray[lv_itUnit]);
            }
            Wait((libAMCT_gv_aRMSkyTempleLevel3TempleCooldown_C - libAMCT_gv_aRMSkyTempleWarningTime), c_timeGame);
            libAMCT_gf_ARMSkyTemplePrepareTemplesLevel3();
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMCT_gt_ARMSkyTempleWarningTimerExpires_Init () {
    libAMCT_gt_ARMSkyTempleWarningTimerExpires = TriggerCreate("libAMCT_gt_ARMSkyTempleWarningTimerExpires_Func");
    TriggerEnable(libAMCT_gt_ARMSkyTempleWarningTimerExpires, false);
    TriggerAddEventTimer(libAMCT_gt_ARMSkyTempleWarningTimerExpires, libAMCT_gv_aRMSkyTempleActivateWarningTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<SkyTemple> Beacon Color
//--------------------------------------------------------------------------------------------------
bool libAMCT_gt_ARMSkyTempleBeaconColor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTempleIndex;
    int lv_owner;
    int lv_oldOwner;
    int lv_itDefenderIndex;

    // Automatic Variable Declarations
    int autoE1BAAC72_ae;
    const int autoE1BAAC72_ai = 1;
    int autoA2B26DAA_val;
    const int auto786CAAA2_ae = 5;
    const int auto786CAAA2_ai = 1;
    int auto9221CB08_val;

    // Variable Initialization
    lv_oldOwner = libCore_gv_cOMPUTER_Neutral;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        autoE1BAAC72_ae = libAMCT_gv_aRMSkyTempleTempleCount;
        lv_itTempleIndex = 1;
        for ( ; ( (autoE1BAAC72_ai >= 0 && lv_itTempleIndex <= autoE1BAAC72_ae) || (autoE1BAAC72_ai < 0 && lv_itTempleIndex >= autoE1BAAC72_ae) ) ; lv_itTempleIndex += autoE1BAAC72_ai ) {
            if ((libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_blessed == false)) {
                if ((lv_oldOwner != libCore_gv_cOMPUTER_Neutral)) {
                    libCore_gf_SendActorMessageToDoodadsInRegion("Signal NeutralOwner", RegionCircle(UnitGetPosition(libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_beacon), 12.0), null);
                    lv_oldOwner = libCore_gv_cOMPUTER_Neutral;
                }

            }
            else {
                lv_owner = UnitGetOwner(libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_beacon);
                if ((lv_owner != lv_oldOwner)) {
                    autoA2B26DAA_val = lv_owner;
                    if (autoA2B26DAA_val == libCore_gv_cOMPUTER_TeamOrder) {
                        libCore_gf_SendActorMessageToDoodadsInRegion("Signal OrderOwner", RegionCircle(UnitGetPosition(libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_beacon), 12.0), null);
                    }
                    else if (autoA2B26DAA_val == libCore_gv_cOMPUTER_TeamChaos) {
                        libCore_gf_SendActorMessageToDoodadsInRegion("Signal ChaosOwner", RegionCircle(UnitGetPosition(libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_beacon), 12.0), null);
                    }
                    else if (autoA2B26DAA_val == libCore_gv_cOMPUTER_Neutral) {
                        libCore_gf_SendActorMessageToDoodadsInRegion("Signal NeutralOwner", RegionCircle(UnitGetPosition(libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_beacon), 12.0), null);
                    }
                    else {
                    }
                    lv_itDefenderIndex = 1;
                    for ( ; ( (auto786CAAA2_ai >= 0 && lv_itDefenderIndex <= auto786CAAA2_ae) || (auto786CAAA2_ai < 0 && lv_itDefenderIndex >= auto786CAAA2_ae) ) ; lv_itDefenderIndex += auto786CAAA2_ai ) {
                        if ((libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_defenderArray[lv_itDefenderIndex] != null) && (UnitIsAlive(libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_defenderArray[lv_itDefenderIndex]) == true) && (libCore_gf_ActorStoredForUnit(libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_defenderArray[lv_itDefenderIndex], 1) != null) && (UnitGroupHasUnit(libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_defendersActivated, libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_defenderArray[lv_itDefenderIndex]) == false)) {
                            auto9221CB08_val = lv_owner;
                            if (auto9221CB08_val == libCore_gv_cOMPUTER_TeamOrder) {
                                ActorSend(libCore_gf_ActorStoredForUnit(libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_defenderArray[lv_itDefenderIndex], 1), "SetPlayerId 11");
                            }
                            else if (auto9221CB08_val == libCore_gv_cOMPUTER_TeamChaos) {
                                ActorSend(libCore_gf_ActorStoredForUnit(libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_defenderArray[lv_itDefenderIndex], 1), "SetPlayerId 12");
                            }
                            else if (auto9221CB08_val == libCore_gv_cOMPUTER_Neutral) {
                                ActorSend(libCore_gf_ActorStoredForUnit(libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_defenderArray[lv_itDefenderIndex], 1), "SetPlayerId");
                            }
                            else {
                            }
                        }

                    }
                    lv_oldOwner = lv_owner;
                }

            }
        }
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMCT_gt_ARMSkyTempleBeaconColor_Init () {
    libAMCT_gt_ARMSkyTempleBeaconColor = TriggerCreate("libAMCT_gt_ARMSkyTempleBeaconColor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<SkyTemple> Beacon Captured
//--------------------------------------------------------------------------------------------------
bool libAMCT_gt_ARMSkyTempleBeaconCaptured_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_count;
    playergroup lv_capturingPlayer;
    int lv_itTempleIndex;

    // Automatic Variable Declarations
    int auto79D57997_ae;
    const int auto79D57997_ai = 1;

    // Variable Initialization
    lv_capturingPlayer = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "InvisibleBeacon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto79D57997_ae = libAMCT_gv_aRMSkyTempleTempleCount;
    lv_itTempleIndex = 1;
    for ( ; ( (auto79D57997_ai >= 0 && lv_itTempleIndex <= auto79D57997_ae) || (auto79D57997_ai < 0 && lv_itTempleIndex >= auto79D57997_ae) ) ; lv_itTempleIndex += auto79D57997_ai ) {
        if ((EventUnit() != libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_beacon)) {
            continue;
        }

        UnitSetOwner(libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_temple, UnitGetOwner(libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_beacon), true);
        StatEventCreate("SkyTempleCaptured");
        StatEventAddDataInt(StatEventLastCreated(), "TeamID", libGame_gf_TeamNumberOfPlayer(UnitGetOwner(libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_temple)));
        StatEventSend(StatEventLastCreated());
        if ((libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_blessed == true)) {
            libAMCT_gf_ARMSkyTempleUpdateTempleMinimapIcon(lv_itTempleIndex, libAMCT_ge_ARMSkyTempleMinimapIconState_Enable);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMCT_gt_ARMSkyTempleBeaconCaptured_Init () {
    libAMCT_gt_ARMSkyTempleBeaconCaptured = TriggerCreate("libAMCT_gt_ARMSkyTempleBeaconCaptured_Func");
    TriggerEnable(libAMCT_gt_ARMSkyTempleBeaconCaptured, false);
    TriggerAddEventUnitChangeOwner(libAMCT_gt_ARMSkyTempleBeaconCaptured, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<SkyTemple> Temple Attacks
//--------------------------------------------------------------------------------------------------
bool libAMCT_gt_ARMSkyTempleTempleAttacks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTempleIndex;

    // Automatic Variable Declarations
    int autoB2D091E2_ae;
    const int autoB2D091E2_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitTarget()) == "LuxoriaTemple"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB2D091E2_ae = libAMCT_gv_aRMSkyTempleTempleCount;
    lv_itTempleIndex = 1;
    for ( ; ( (autoB2D091E2_ai >= 0 && lv_itTempleIndex <= autoB2D091E2_ae) || (autoB2D091E2_ai < 0 && lv_itTempleIndex >= autoB2D091E2_ae) ) ; lv_itTempleIndex += autoB2D091E2_ai ) {
        if ((libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_temple == EventUnitTarget())) {
            libAMCT_gf_ARMSkyTempleTempleShootingPing(lv_itTempleIndex, EventUnit());
            StatEventCreate("SkyTempleShotsFired");
            StatEventAddDataInt(StatEventLastCreated(), "TempleID", lv_itTempleIndex);
            StatEventAddDataInt(StatEventLastCreated(), "TeamID", libGame_gf_TeamNumberOfPlayer(UnitGetOwner(libAMCT_gv_aRMSkyTemple[lv_itTempleIndex].lv_temple)));
            StatEventSend(StatEventLastCreated());
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMCT_gt_ARMSkyTempleTempleAttacks_Init () {
    libAMCT_gt_ARMSkyTempleTempleAttacks = TriggerCreate("libAMCT_gt_ARMSkyTempleTempleAttacks_Func");
    TriggerEnable(libAMCT_gt_ARMSkyTempleTempleAttacks, false);
    TriggerAddEventUnitAttacked2(libAMCT_gt_ARMSkyTempleTempleAttacks, null, "LuxoriaTempleStage1Weapon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<SkyTemple> Level 1 - Core Monitor
//--------------------------------------------------------------------------------------------------
bool libAMCT_gt_ARMSkyTempleLevel1CoreMonitor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAMCT_gf_ARMSkyTempleCoreHealthTransmissionChecker();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMCT_gt_ARMSkyTempleLevel1CoreMonitor_Init () {
    libAMCT_gt_ARMSkyTempleLevel1CoreMonitor = TriggerCreate("libAMCT_gt_ARMSkyTempleLevel1CoreMonitor_Func");
    TriggerEnable(libAMCT_gt_ARMSkyTempleLevel1CoreMonitor, false);
    TriggerAddEventUnitDamaged(libAMCT_gt_ARMSkyTempleLevel1CoreMonitor, UnitRefFromVariable("libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libAMCT_gt_ARMSkyTempleLevel1CoreMonitor, UnitRefFromVariable("libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<SkyTemple> Level 2 - Core Monitor
//--------------------------------------------------------------------------------------------------
bool libAMCT_gt_ARMSkyTempleLevel2CoreMonitor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_coreHealthTotal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_coreHealthTotal += UnitGetPropertyFixed(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core, c_unitPropLifePercent, c_unitPropCurrent);
    lv_coreHealthTotal += UnitGetPropertyFixed(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, c_unitPropLifePercent, c_unitPropCurrent);
    if ((lv_coreHealthTotal <= 180.0) && (libAMCT_gv_aRMSkyTempleSecondTempleEventStarted == false)) {
        libAMCT_gf_ARMSkyTemplePrepareTemple(libAMCT_gv_aRMSkyTempleNextTemple);
        libAMCT_gv_aRMSkyTempleSecondTempleEventStarted = true;
    }

    libAMCT_gf_ARMSkyTempleCoreHealthTransmissionChecker();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMCT_gt_ARMSkyTempleLevel2CoreMonitor_Init () {
    libAMCT_gt_ARMSkyTempleLevel2CoreMonitor = TriggerCreate("libAMCT_gt_ARMSkyTempleLevel2CoreMonitor_Func");
    TriggerEnable(libAMCT_gt_ARMSkyTempleLevel2CoreMonitor, false);
    TriggerAddEventUnitDamaged(libAMCT_gt_ARMSkyTempleLevel2CoreMonitor, UnitRefFromVariable("libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libAMCT_gt_ARMSkyTempleLevel2CoreMonitor, UnitRefFromVariable("libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<SkyTemple> Level 3 - Core Monitor
//--------------------------------------------------------------------------------------------------
bool libAMCT_gt_ARMSkyTempleLevel3CoreMonitor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_coreHealthTotal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_coreHealthTotal += UnitGetPropertyFixed(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core, c_unitPropLifePercent, c_unitPropCurrent);
    lv_coreHealthTotal += UnitGetPropertyFixed(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, c_unitPropLifePercent, c_unitPropCurrent);
    if ((lv_coreHealthTotal <= 180.0) && (libAMCT_gv_aRMSkyTempleSecondTempleEventStarted == false)) {
        libAMCT_gf_ARMSkyTemplePrepareTemplesLevel3();
        libAMCT_gv_aRMSkyTempleSecondTempleEventStarted = true;
    }

    libAMCT_gf_ARMSkyTempleCoreHealthTransmissionChecker();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMCT_gt_ARMSkyTempleLevel3CoreMonitor_Init () {
    libAMCT_gt_ARMSkyTempleLevel3CoreMonitor = TriggerCreate("libAMCT_gt_ARMSkyTempleLevel3CoreMonitor_Func");
    TriggerEnable(libAMCT_gt_ARMSkyTempleLevel3CoreMonitor, false);
    TriggerAddEventUnitDamaged(libAMCT_gt_ARMSkyTempleLevel3CoreMonitor, UnitRefFromVariable("libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libAMCT_gt_ARMSkyTempleLevel3CoreMonitor, UnitRefFromVariable("libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<SkyTemple> Defender Attack Logic
//--------------------------------------------------------------------------------------------------
bool libAMCT_gt_ARMSkyTempleDefenderAttackLogic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defenderAIIndex;
    int lv_templeIndex;
    unit lv_creepUnit;
    unitgroup lv_validTargets;
    order lv_currentOrder;
    unit lv_currentOrderTarget;
    unitgroup lv_testTargets;
    unit lv_bestTarget;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_defenderAIIndex = libCore_gv_segTriggerIndex;
    lv_creepUnit = libCore_gv_segTriggerUnit;
    lv_validTargets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_templeIndex = libAMCT_gf_ARMSkyTempleTempleIndexForDefenders(lv_defenderAIIndex);
    if ((lv_templeIndex <= 0)) {
        return true;
    }

    if ((libAIAI_gv_defenderAICreepNeedsNewOrder == false)) {
        return true;
    }

    lv_validTargets = libAIAI_gf_DefenderValidTargets(lv_defenderAIIndex);
    if ((UnitGroupCount(lv_validTargets, c_unitCountAlive) <= 0)) {
        return true;
    }

    lv_currentOrder = UnitOrder(lv_creepUnit, 0);
    if ((!(((lv_currentOrder == null) || (OrderGetAbilityCommand(lv_currentOrder) == AbilityCommand("move", 0)) || (OrderGetAbilityCommand(lv_currentOrder) == AbilityCommand("move", 4)) || (OrderGetAbilityCommand(lv_currentOrder) == AbilityCommand("attack", 0)) || (OrderGetAbilityCommand(lv_currentOrder) == AbilityCommand("AttackAlly", 0)))))) {
        return true;
    }

    lv_currentOrderTarget = OrderGetTargetUnit(lv_currentOrder);
    if ((UnitGetOwner(libAMCT_gv_aRMSkyTemple[lv_templeIndex].lv_temple) != libCore_gv_cOMPUTER_Neutral)) {
        lv_testTargets = UnitGroupFilterAlliance(lv_validTargets, UnitGetOwner(libAMCT_gv_aRMSkyTemple[lv_templeIndex].lv_beacon), c_unitAllianceAlly, 0);
        if ((UnitIsValid(lv_currentOrderTarget) == true) && (UnitGroupHasUnit(lv_testTargets, lv_currentOrderTarget) == true)) {
            lv_bestTarget = lv_currentOrderTarget;
        }
        else {
            lv_bestTarget = UnitGroupClosestToPoint(lv_testTargets, UnitGetPosition(lv_creepUnit));
        }
    }

    if ((UnitIsValid(lv_bestTarget) != true)) {
        lv_testTargets = UnitGroupFilterRegion(lv_validTargets, libAIAI_gf_DefenderAgroRegion(lv_defenderAIIndex), 0);
        lv_bestTarget = UnitGroupClosestToPoint(lv_testTargets, UnitGetPosition(lv_creepUnit));
    }

    if ((UnitIsValid(lv_bestTarget) != true)) {
        if ((UnitIsValid(lv_currentOrderTarget) == true) && (UnitGroupHasUnit(lv_validTargets, lv_currentOrderTarget) == true)) {
            lv_bestTarget = lv_currentOrderTarget;
        }
        else {
            lv_bestTarget = UnitGroupClosestToPoint(lv_validTargets, UnitGetPosition(lv_creepUnit));
        }
    }

    if ((lv_bestTarget != null) && (lv_bestTarget != lv_currentOrderTarget)) {
        UnitIssueOrder(lv_creepUnit, OrderTargetingUnit(AbilityCommand("attack", 0), lv_bestTarget), c_orderQueueReplace);
    }

    libAIAI_gv_defenderAICreepNeedsNewOrder = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMCT_gt_ARMSkyTempleDefenderAttackLogic_Init () {
    libAMCT_gt_ARMSkyTempleDefenderAttackLogic = TriggerCreate("libAMCT_gt_ARMSkyTempleDefenderAttackLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<SkyTemple> Temple Defender Dies
//--------------------------------------------------------------------------------------------------
bool libAMCT_gt_ARMSkyTempleTempleDefenderDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libAMCT_gv_aRMSkyTempleDefenderWithGlobes, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RegenGlobeNeutral", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, UnitGetPosition(EventUnit()), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMCT_gt_ARMSkyTempleTempleDefenderDies_Init () {
    libAMCT_gt_ARMSkyTempleTempleDefenderDies = TriggerCreate("libAMCT_gt_ARMSkyTempleTempleDefenderDies_Func");
    TriggerEnable(libAMCT_gt_ARMSkyTempleTempleDefenderDies, false);
    TriggerAddEventUnitDied(libAMCT_gt_ARMSkyTempleTempleDefenderDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<SkyTemple> Core Dies (Game Over)
//--------------------------------------------------------------------------------------------------
bool libAMCT_gt_ARMSkyTempleCoreDiesGameOver_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayerTracking;
    const fixed lv_coreAnimationWaitExplodeTime = 2.8;
    int lv_winningTeam;
    int lv_itTemple;
    unit lv_visionBeacon;

    // Automatic Variable Declarations
    int autoC8BD1990_ae;
    const int autoC8BD1990_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAMCT_gf_ARMSkyTempleDisableAIGoals();
    if ((EventUnit() == libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core)) {
        lv_winningTeam = libGame_gv_teamChaosIndex_C;
    }
    else if ((EventUnit() == libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core)) {
        lv_winningTeam = libGame_gv_teamOrderIndex_C;
    }
    libAREN_gv_aRM_RoundWinningTeam = lv_winningTeam;
    libAREN_gf_ARM_RoundOver();
    TriggerEnable(TriggerGetCurrent(), false);
    libAREN_gv_aRM_VictorySequenceDelay = 3.0;
    TriggerStop(libAMCT_gt_MMCapturePointsUIHandler);
    TriggerEnable(libAMCT_gt_ARMSkyTempleLevel1CoreMonitor, false);
    TriggerEnable(libAMCT_gt_ARMSkyTempleLevel2CoreMonitor, false);
    TriggerEnable(libAMCT_gt_ARMSkyTempleLevel3CoreMonitor, false);
    TimerPause(libAMCT_gv_aRMSkyTempleTimedTempleTimer, true);
    libGame_gf_BuildingDiesCameraShake(lv_coreAnimationWaitExplodeTime, "ImmuneToSkillshots", libCore_gv_activeHumanPlayers);
    autoC8BD1990_ae = libAMCT_gv_aRMSkyTempleTempleCount;
    lv_itTemple = 1;
    for ( ; ( (autoC8BD1990_ai >= 0 && lv_itTemple <= autoC8BD1990_ae) || (autoC8BD1990_ai < 0 && lv_itTemple >= autoC8BD1990_ae) ) ; lv_itTemple += autoC8BD1990_ai ) {
        UnitAbilityEnable(libAMCT_gv_aRMSkyTemple[lv_itTemple].lv_temple, "attack", false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMCT_gt_ARMSkyTempleCoreDiesGameOver_Init () {
    libAMCT_gt_ARMSkyTempleCoreDiesGameOver = TriggerCreate("libAMCT_gt_ARMSkyTempleCoreDiesGameOver_Func");
    TriggerEnable(libAMCT_gt_ARMSkyTempleCoreDiesGameOver, false);
    TriggerAddEventUnitDied(libAMCT_gt_ARMSkyTempleCoreDiesGameOver, UnitRefFromVariable("libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core"));
    TriggerAddEventUnitDied(libAMCT_gt_ARMSkyTempleCoreDiesGameOver, UnitRefFromVariable("libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<SkyTemple> UI Core Health - Initialize
//--------------------------------------------------------------------------------------------------
bool libAMCT_gt_ARMSkyTempleUICoreHealthInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    int lv_healthLabel;

    // Automatic Variable Declarations
    const int autoF990F1E7_ae = libCore_gv_bALMaxTeams;
    const int autoF990F1E7_ai = 1;

    // Variable Initialization
    lv_healthLabel = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlCreateInPanelFromTemplate(libUIUI_gv_uIPartyFrame.lv_mainPanel, c_triggerControlTypePanel, "ArenaSkyTemple/ArenaTempleScorePanel");
    libAMCT_gv_aRMSkyTempleUI_ScorePanel = DialogControlLastCreated();
    DialogControlHookup(libAMCT_gv_aRMSkyTempleUI_ScorePanel, c_triggerControlTypeLabel, "HelpText");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_AMCT_36293B83"), PlayerGroupAll());
    lv_itTeam = 1;
    for ( ; ( (autoF990F1E7_ai >= 0 && lv_itTeam <= autoF990F1E7_ae) || (autoF990F1E7_ai < 0 && lv_itTeam >= autoF990F1E7_ae) ) ; lv_itTeam += autoF990F1E7_ai ) {
        DialogControlHookup(libAMCT_gv_aRMSkyTempleUI_ScorePanel, c_triggerControlTypeUnitStatus, libNtve_gf_ConvertStringToUILayoutFrameName(("Team" + IntToString(lv_itTeam) + "CoreStatus")));
        libAMCT_gv_aRMSkyTempleUI_CoreUnitStatus[lv_itTeam] = DialogControlLastCreated();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMCT_gt_ARMSkyTempleUICoreHealthInitialize_Init () {
    libAMCT_gt_ARMSkyTempleUICoreHealthInitialize = TriggerCreate("libAMCT_gt_ARMSkyTempleUICoreHealthInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<SkyTemple> UI Core Health - Set Core Units
//--------------------------------------------------------------------------------------------------
bool libAMCT_gt_ARMSkyTempleUICoreHealthSetCoreUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto5B4C75C9_ae = libCore_gv_bALMaxTeams;
    const int auto5B4C75C9_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itTeam = 1;
    for ( ; ( (auto5B4C75C9_ai >= 0 && lv_itTeam <= auto5B4C75C9_ae) || (auto5B4C75C9_ai < 0 && lv_itTeam >= auto5B4C75C9_ae) ) ; lv_itTeam += auto5B4C75C9_ai ) {
        libNtve_gf_SetDialogItemUnit(libAMCT_gv_aRMSkyTempleUI_CoreUnitStatus[lv_itTeam], libGame_gv_teams[lv_itTeam].lv_core, PlayerGroupAll());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMCT_gt_ARMSkyTempleUICoreHealthSetCoreUnits_Init () {
    libAMCT_gt_ARMSkyTempleUICoreHealthSetCoreUnits = TriggerCreate("libAMCT_gt_ARMSkyTempleUICoreHealthSetCoreUnits_Func");
    libAREN_gf_MapRavenLordTributeWarning(libAMCT_gt_ARMSkyTempleUICoreHealthSetCoreUnits);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Capture Points UI Initialize
//--------------------------------------------------------------------------------------------------
bool libAMCT_gt_MMCapturePointsUIInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    int lv_itTemple;

    // Automatic Variable Declarations
    int auto5BD73FD6_val;
    int auto72EC2FC9_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libAMCT_gv_mMCapturePointsPanel.lv_capturePointsPanel == c_invalidDialogControlId)) {
        DialogControlCreateInPanelFromTemplate(libUIUI_gv_mapMechanicsPanel.lv_mainPanel, c_triggerControlTypePanel, "ArenaSkyTemple/CapturePointsPanel");
        libAMCT_gv_mMCapturePointsPanel.lv_capturePointsPanel = DialogControlLastCreated();
    }

    DialogControlHookup(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsPanel, c_triggerControlTypePanel, "TempleAnnounceFrame");
    libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTimerModeFrame = DialogControlLastCreated();
    DialogControlHookup(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTimerModeFrame, c_triggerControlTypeLabel, "TempleActivateLabel");
    libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTimerModeNameLabel = DialogControlLastCreated();
    DialogControlHookup(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsPanel, c_triggerControlTypePanel, "TempleModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleModeFrame = DialogControlLastCreated();
    auto5BD73FD6_val = libAMCT_gf_ARMSkyTempleCurrentLevel();
    if (auto5BD73FD6_val == libAMCT_ge_ARMSkyTempleLevel_OneTemple) {
        DialogControlSetAnimationState(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsPanel, PlayerGroupAll(), "Round", "Round1");
    }
    else if (auto5BD73FD6_val == libAMCT_ge_ARMSkyTempleLevel_TwoTemples) {
        DialogControlSetAnimationState(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsPanel, PlayerGroupAll(), "Round", "Round2");
    }
    else if (auto5BD73FD6_val == libAMCT_ge_ARMSkyTempleLevel_ThreeTemples) {
        DialogControlSetAnimationState(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsPanel, PlayerGroupAll(), "Round", "Round3");
    }
    else {
    }
    auto72EC2FC9_ae = libAMCT_gv_aRMSkyTempleTempleCount;
    lv_itTemple = 1;
    for ( ; lv_itTemple <= auto72EC2FC9_ae ; lv_itTemple += 1 ) {
        libAMCT_gf_MMCapturePointsUIHookupTemplePanel(lv_itTemple);
    }
    TriggerExecute(libAMCT_gt_MMCapturePointsUIHandler, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMCT_gt_MMCapturePointsUIInitialize_Init () {
    libAMCT_gt_MMCapturePointsUIInitialize = TriggerCreate("libAMCT_gt_MMCapturePointsUIInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM CapturePoints UI Handler
//--------------------------------------------------------------------------------------------------
bool libAMCT_gt_MMCapturePointsUIHandler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    int lv_itTeamEnemy;
    int lv_itTemplIndex;
    int lv_state;
    int lv_lastState;
    int lv_stage;
    int lv_ownerTeam;

    // Automatic Variable Declarations
    int auto3EEECE49_ae;
    const int auto3EEECE49_ai = 1;
    int auto0235397E_ae;
    const int auto0235397E_ai = 1;
    int auto768BA10F_ae;
    const int auto768BA10F_ai = 1;

    // Variable Initialization
    lv_state = libAMCT_ge_MMCapturePointsUIState_None;
    lv_lastState = libAMCT_ge_MMCapturePointsUIState_None;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((TimerIsPaused(libAMCT_gv_aRMSkyTempleActivateWarningTimer) == false) && (TimerGetRemaining(libAMCT_gv_aRMSkyTempleActivateWarningTimer) > 0.0)) {
            lv_state = libAMCT_ge_MMCapturePointsUIState_Preparing;
            if ((lv_state != lv_lastState)) {
                libAMCT_gf_MMCapturePointsUIAnnounceTemplesStatus(libAMCT_ge_MMCapturePointsUIModes_TemplesActivating);
            }

            lv_lastState = lv_state;
        }
        else if ((libAMCT_gf_MMCapturePointsUIAnyTempleisBlessed() == true) && (TimerIsPaused(libAMCT_gv_aRMSkyTempleTimedTempleTimer) == false) && (TimerGetRemaining(libAMCT_gv_aRMSkyTempleTimedTempleTimer) > 0.0) && (TimerGetRemaining(libAMCT_gv_aRMSkyTempleTimedTempleTimer) <= 7.0)) {
            lv_state = libAMCT_ge_MMCapturePointsUIState_Expiring;
            if ((lv_state != lv_lastState)) {
                libAMCT_gf_MMCapturePointsUIAnnounceTemplesStatus(libAMCT_ge_MMCapturePointsUIModes_TemplesDeactivating);
            }

            auto3EEECE49_ae = libAMCT_gv_aRMSkyTempleTempleCount;
            lv_itTemplIndex = 1;
            for ( ; ( (auto3EEECE49_ai >= 0 && lv_itTemplIndex <= auto3EEECE49_ae) || (auto3EEECE49_ai < 0 && lv_itTemplIndex >= auto3EEECE49_ae) ) ; lv_itTemplIndex += auto3EEECE49_ai ) {
                if ((libAMCT_gv_aRMSkyTemple[lv_itTemplIndex].lv_blessed == true)) {
                    libAMCT_gf_MMCapturePointsUIEnableDisableTemple(true, lv_itTemplIndex);
                }
                else {
                    libAMCT_gf_MMCapturePointsUIEnableDisableTemple(false, lv_itTemplIndex);
                }
            }
            lv_lastState = lv_state;
        }
        else if ((libAMCT_gf_MMCapturePointsUIAnyTempleisBlessed() == true)) {
            lv_state = libAMCT_ge_MMCapturePointsUIState_Blessed;
            if ((lv_state != lv_lastState)) {
                libAMCT_gf_MMCapturePointsUIAnnounceTemplesStatus(libAMCT_ge_MMCapturePointsUIModes_TemplesActive);
                TriggerExecute(libAMCT_gt_MMCapturePointsUIHandlerCaptureProgress, true, false);
            }

            auto0235397E_ae = libAMCT_gv_aRMSkyTempleTempleCount;
            lv_itTemplIndex = 1;
            for ( ; ( (auto0235397E_ai >= 0 && lv_itTemplIndex <= auto0235397E_ae) || (auto0235397E_ai < 0 && lv_itTemplIndex >= auto0235397E_ae) ) ; lv_itTemplIndex += auto0235397E_ai ) {
                if ((libAMCT_gv_aRMSkyTemple[lv_itTemplIndex].lv_blessed == true)) {
                    libAMCT_gf_MMCapturePointsUIEnableDisableTemple(true, lv_itTemplIndex);
                }
                else {
                    libAMCT_gf_MMCapturePointsUIEnableDisableTemple(false, lv_itTemplIndex);
                }
            }
            lv_lastState = lv_state;
        }
        else if (true) {
            lv_state = libAMCT_ge_MMCapturePointsUIState_Idle;
            if ((lv_state != lv_lastState)) {
                libAMCT_gf_MMCapturePointsUIAnnounceTemplesStatus(libAMCT_ge_MMCapturePointsUIModes_NoTemples);
                TriggerStop(libAMCT_gt_MMCapturePointsUIHandlerCaptureProgress);
                TriggerEnable(libAMCT_gt_MMCapturePointsUIHandlerCaptureProgress, true);
            }

            auto768BA10F_ae = libAMCT_gv_aRMSkyTempleTempleCount;
            lv_itTemplIndex = 1;
            for ( ; ( (auto768BA10F_ai >= 0 && lv_itTemplIndex <= auto768BA10F_ae) || (auto768BA10F_ai < 0 && lv_itTemplIndex >= auto768BA10F_ae) ) ; lv_itTemplIndex += auto768BA10F_ai ) {
                libAMCT_gf_MMCapturePointsUIEnableDisableTemple(false, lv_itTemplIndex);
            }
            lv_lastState = lv_state;
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMCT_gt_MMCapturePointsUIHandler_Init () {
    libAMCT_gt_MMCapturePointsUIHandler = TriggerCreate("libAMCT_gt_MMCapturePointsUIHandler_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM CapturePoints UI Handler Capture Progress
//--------------------------------------------------------------------------------------------------
bool libAMCT_gt_MMCapturePointsUIHandlerCaptureProgress_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTemplIndex;
    int lv_ownerTeam;

    // Automatic Variable Declarations
    int auto2D3304C7_ae;
    const int auto2D3304C7_ai = 1;
    int autoA01F99FE_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        auto2D3304C7_ae = libAMCT_gv_aRMSkyTempleTempleCount;
        lv_itTemplIndex = 1;
        for ( ; ( (auto2D3304C7_ai >= 0 && lv_itTemplIndex <= auto2D3304C7_ae) || (auto2D3304C7_ai < 0 && lv_itTemplIndex >= auto2D3304C7_ae) ) ; lv_itTemplIndex += auto2D3304C7_ai ) {
            if ((libAMCT_gv_aRMSkyTemple[lv_itTemplIndex].lv_blessed == true)) {
                autoA01F99FE_val = UnitGetOwner(libAMCT_gv_aRMSkyTemple[lv_itTemplIndex].lv_beacon);
                if (autoA01F99FE_val == libCore_gv_cOMPUTER_TeamOrder) {
                    lv_ownerTeam = libGame_gv_teamOrderIndex_C;
                }
                else if (autoA01F99FE_val == libCore_gv_cOMPUTER_TeamChaos) {
                    lv_ownerTeam = libGame_gv_teamChaosIndex_C;
                }
                else if (autoA01F99FE_val == libCore_gv_cOMPUTER_Neutral) {
                    if ((libGame_gf_CapturePointCounter(libAMCT_gv_aRMSkyTemple[lv_itTemplIndex].lv_beaconIndex) > 0)) {
                        lv_ownerTeam = libGame_gv_teamOrderIndex_C;
                    }
                    else if ((libGame_gf_CapturePointCounter(libAMCT_gv_aRMSkyTemple[lv_itTemplIndex].lv_beaconIndex) < 0)) {
                        lv_ownerTeam = libGame_gv_teamChaosIndex_C;
                    }
                    else if (true) {
                        lv_ownerTeam = 0;
                    }
                }
                else {
                }
                libAMCT_gf_MMCapturePointsUISetTempleCaptureProgress(lv_itTemplIndex, lv_ownerTeam, AbsI(libGame_gf_CapturePointCounter(libAMCT_gv_aRMSkyTemple[lv_itTemplIndex].lv_beaconIndex)), libGame_gf_CapturePointCounterMax(libAMCT_gv_aRMSkyTemple[lv_itTemplIndex].lv_beaconIndex));
                if ((TimerIsPaused(libAMCT_gv_aRMSkyTempleTimedTempleTimer) == false) && (TimerGetRemaining(libAMCT_gv_aRMSkyTempleTimedTempleTimer) >= 0.0) && (TimerGetRemaining(libAMCT_gv_aRMSkyTempleTimedTempleTimer) <= 7.0)) {
                    libNtve_gf_SetDialogItemText(libAMCT_gv_mMCapturePointsPanel.lv_capturePointsTempleTimerLabel[lv_itTemplIndex], FixedToText(TimerGetRemaining(libAMCT_gv_aRMSkyTempleTimedTempleTimer), 1), PlayerGroupAll());
                }

            }

        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMCT_gt_MMCapturePointsUIHandlerCaptureProgress_Init () {
    libAMCT_gt_MMCapturePointsUIHandlerCaptureProgress = TriggerCreate("libAMCT_gt_MMCapturePointsUIHandlerCaptureProgress_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ARM<SkyTemple> DisableEvent
//--------------------------------------------------------------------------------------------------
bool libAMCT_gt_ARMSkyTempleDisableEvent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(libAMCT_gv_aRMSkyTempleWarningWaitTimer, true);
    libAMCT_gv_aRMTempleMapEventDisabled = true;
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_AMCT_605159D0"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAMCT_gt_ARMSkyTempleDisableEvent_Init () {
    libAMCT_gt_ARMSkyTempleDisableEvent = TriggerCreate("libAMCT_gt_ARMSkyTempleDisableEvent_Func");
    TriggerAddEventChatMessage(libAMCT_gt_ARMSkyTempleDisableEvent, c_playerAny, "DisableEvent", false);
}

void libAMCT_InitTriggers () {
    libAMCT_gt_ARMSkyTempleLevelStart_Init();
    libAMCT_gt_ARMSkyTempleGatesOpened_Init();
    libAMCT_gt_ARMSkyTempleWarningTimerExpires_Init();
    libAMCT_gt_ARMSkyTempleBeaconColor_Init();
    libAMCT_gt_ARMSkyTempleBeaconCaptured_Init();
    libAMCT_gt_ARMSkyTempleTempleAttacks_Init();
    libAMCT_gt_ARMSkyTempleLevel1CoreMonitor_Init();
    libAMCT_gt_ARMSkyTempleLevel2CoreMonitor_Init();
    libAMCT_gt_ARMSkyTempleLevel3CoreMonitor_Init();
    libAMCT_gt_ARMSkyTempleDefenderAttackLogic_Init();
    libAMCT_gt_ARMSkyTempleTempleDefenderDies_Init();
    libAMCT_gt_ARMSkyTempleCoreDiesGameOver_Init();
    libAMCT_gt_ARMSkyTempleUICoreHealthInitialize_Init();
    libAMCT_gt_ARMSkyTempleUICoreHealthSetCoreUnits_Init();
    libAMCT_gt_MMCapturePointsUIInitialize_Init();
    libAMCT_gt_MMCapturePointsUIHandler_Init();
    libAMCT_gt_MMCapturePointsUIHandlerCaptureProgress_Init();
    libAMCT_gt_ARMSkyTempleDisableEvent_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libAMCT_InitLib_completed = false;

void libAMCT_InitLib () {
    if (libAMCT_InitLib_completed) {
        return;
    }

    libAMCT_InitLib_completed = true;

    libAMCT_InitLibraries();
    libAMCT_InitVariables();
    libAMCT_InitTriggers();
}

