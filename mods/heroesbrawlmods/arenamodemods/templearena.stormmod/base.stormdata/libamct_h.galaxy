include "LibAREN"

//--------------------------------------------------------------------------------------------------
// Library: ARM_Sky Temple
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libAMCT_ge_ARMSkyTempleLevel_None = 0;
const int libAMCT_ge_ARMSkyTempleLevel_OneTemple = 1;
const int libAMCT_ge_ARMSkyTempleLevel_TwoTemples = 2;
const int libAMCT_ge_ARMSkyTempleLevel_ThreeTemples = 3;
const int libAMCT_ge_ARMSkyTempleMinimapIconState_Prepare = 0;
const int libAMCT_ge_ARMSkyTempleMinimapIconState_Enable = 1;
const int libAMCT_ge_ARMSkyTempleMinimapIconState_Disable = 2;
const int libAMCT_ge_MMCapturePointsUIModes_NoTemples = 0;
const int libAMCT_ge_MMCapturePointsUIModes_TemplesActivating = 1;
const int libAMCT_ge_MMCapturePointsUIModes_TemplesActive = 2;
const int libAMCT_ge_MMCapturePointsUIModes_TemplesDeactivating = 3;
const int libAMCT_ge_MMCapturePointsUIState_None = 0;
const int libAMCT_ge_MMCapturePointsUIState_Idle = 1;
const int libAMCT_ge_MMCapturePointsUIState_Preparing = 2;
const int libAMCT_ge_MMCapturePointsUIState_Blessed = 3;
const int libAMCT_ge_MMCapturePointsUIState_Expiring = 4;

// Constants
const int libAMCT_gv_aRMSkyTempleMaxCount_C = 3;
const int libAMCT_gv_aRMSkyTempleCaptureRadius_C = 5;
const int libAMCT_gv_aRMSkyTempleCaptureTime_C = 2;
const fixed libAMCT_gv_aRMSkyTempleStartTime_C = 6.0;
const int libAMCT_gv_aRMSkyTempleCaptureOverTime_C = 0;
const fixed libAMCT_gv_aRMSkyTempleCooldown_C = 120.0;
const fixed libAMCT_gv_aRMSkyTempleFinalBlastLifeThreshold_C = 500.0;
const int libAMCT_gv_aRMSkyTempleFinalShotCount_C = 0;
const int libAMCT_gv_aRMSkyTempleTotalShots = 45;
const fixed libAMCT_gv_aRMSkyTempleStageDuration_C = 9999.0;
const fixed libAMCT_gv_aRMSkyTempleLevel3StageDuration_C = 50.0;
const fixed libAMCT_gv_aRMSkyTempleLevel3TempleCooldown_C = 30.0;

// Structures
struct libAMCT_gs_ARMSkyTemple {
    unit lv_temple;
    point lv_blockerLoc;
    point lv_beaconLoc;
    unit lv_beacon;
    int lv_beaconIndex;
    unit lv_minimapIcon;
    bool lv_timed;
    bool lv_blessed;
    fixed lv_progress;
    int lv_spawnStage;
    unit lv_targetUnit;
    revealer lv_targetRevealer;
    int lv_defenderLastSpawnedLine;
    point[7] lv_defenderSpawnPoints;
    unit[6] lv_defenderArray;
    unit lv_defenderBossPathingBlocker;
    int lv_defenderAIIndex;
    unitgroup lv_defendersActivated;
    bool lv_defenderRespawning;
    fixed lv_defenderBossDeathDuration;
};

struct libAMCT_gs_MMCapturePointsPanel {
    int lv_capturePointsPanel;
    int lv_capturePointsTimerModeFrame;
    int lv_capturePointsTimerModeNameLabel;
    int lv_capturePointsTempleModeFrame;
    int[4] lv_capturePointsTempleFireEffect2;
    int[4] lv_capturePointsTempleBGImageBlue;
    int[4] lv_capturePointsTempleBGImageRed;
    int[4] lv_capturePointsTempleDisabledImage;
    int[4] lv_capturePointsTempleEnabledImage;
    int[4] lv_capturePointsTempleTimerLabel;
};

// Variable Declarations
int[libAREN_gv_aRM_MechanicsCountToPick_C + 1] libAMCT_gv_aRMSkyTempleLevelRegisteredMechIds;
int libAMCT_gv_aRMSkyTempleLevelCount;
int[libAREN_gv_aRM_MechanicsCountToPick_C + 1] libAMCT_gv_aRMSkyTempleLevels;
trigger[libAREN_gv_aRM_MechanicsCountToPick_C + 1] libAMCT_gv_aRMSkyTempleLevelStartCallback;
fixed libAMCT_gv_aRMSkyTempleWarningTime;
libAMCT_gs_ARMSkyTemple[libAMCT_gv_aRMSkyTempleMaxCount_C + 1] libAMCT_gv_aRMSkyTemple;
int libAMCT_gv_aRMSkyTempleTempleCount;
timer libAMCT_gv_aRMSkyTempleActivateWarningTimer;
timer libAMCT_gv_aRMSkyTempleWarningWaitTimer;
int libAMCT_gv_aRMSkyTempleNextTemple;
timer libAMCT_gv_aRMSkyTempleTimedTempleTimer;
bool libAMCT_gv_aRMSkyTempleIsFirstTemple;
bool libAMCT_gv_aRMSkyTempleSecondTempleEventStarted;
bool libAMCT_gv_aRMSkyTempleOrderCoreBelow50;
bool libAMCT_gv_aRMSkyTempleOrderCoreBelow20;
bool libAMCT_gv_aRMSkyTempleChaosCoreBelow50;
bool libAMCT_gv_aRMSkyTempleChaosCoreBelow20;
timer[4] libAMCT_gv_aRMSkyTempleActivateWarningTimerLevel3;
unitgroup libAMCT_gv_aRMSkyTempleDefenderWithGlobes;
int libAMCT_gv_aRMSkyTempleUI_ScorePanel;
int[3] libAMCT_gv_aRMSkyTempleUI_CoreUnitStatus;
libAMCT_gs_MMCapturePointsPanel libAMCT_gv_mMCapturePointsPanel;
bool libAMCT_gv_aRMTempleMapEventDisabled;

// Function Declarations
void libAMCT_gf_WaitForConversationToFinish ();
int libAMCT_gf_ARMSkyTempleCurrentLevel ();
void libAMCT_gf_ARMSkyTempleAddLevel (int lp_level, region lp_levelRegion, trigger lp_levelStartCallback, text lp_levelName, string lp_levelImageOrder, string lp_levelImageChaos, text lp_levelInfo, region lp_cameraBoundsRegion);
void libAMCT_gf_ARMSkyTempleAddTemple (unit lp_temple, point lp_location1, point lp_location2, point lp_location3, point lp_location4, point lp_location5, point lp_beaconLoc, point lp_blockerLoc, bool lp_timed);
void libAMCT_gf_ARMSkyTempleResetTempleData (int lp_templeIndex);
point libAMCT_gf_ARMSkyTempleLocation (int lp_templeIndex);
void libAMCT_gf_ARMSkyTemplePrepareTemple (int lp_templeIndex);
void libAMCT_gf_ARMSkyTempleActivateTemple (int lp_templeIndex);
void libAMCT_gf_ARMSkyTempleBlessTempleProgress (int lp_templeIndex);
void libAMCT_gf_ARMSkyTempleTempleAttackTarget (int lp_templeIndex, unit lp_target);
void libAMCT_gf_ARMSkyTempleBlessTempleDone (int lp_templeIndex);
void libAMCT_gf_ARMSkyTempleClearTempleTargetRevealers (int lp_templeIndex, fixed lp_delay);
unit libAMCT_gf_ARMSkyTempleNextTempleTarget (int lp_templeIndex);
void libAMCT_gf_ARMSkyTempleStopShooting (int lp_templeIndex);
void libAMCT_gf_ARMSkyTempleCreateShootingBeamPing (point lp_pingLocation, fixed lp_distance, fixed lp_angel);
void libAMCT_gf_ARMSkyTempleTempleShootingPing (int lp_templeIndex, unit lp_target);
bool libAMCT_gf_ARMSkyTempleTempleActive ();
void libAMCT_gf_ARMSkyTempleUpdateTempleMinimapIcon (int lp_templeIndex, int lp_state);
void libAMCT_gf_ARMSkyTempleDisableAIGoals ();
void libAMCT_gf_ARMSkyTempleResetCoreHealthEvents ();
void libAMCT_gf_ARMSkyTempleCoreHealthTransmissionChecker ();
void libAMCT_gf_ARMSkyTemplePrepareTemplesLevel3 ();
void libAMCT_gf_ARMSkyTempleTempleDefendersRespawnCheckConditions (int lp_templeIndex);
void libAMCT_gf_ARMSkyTempleTempleDefendersRespawnPrepareDefendersRanged (int lp_templeIndex);
void libAMCT_gf_ARMSkyTempleTempleDefendersRespawnRespawnDefender (int lp_defenderIndex, int lp_templeIndex);
void libAMCT_gf_ARMSkyTemplePrepareTempleDefenders (int lp_templeIndex);
void libAMCT_gf_ARMSkyTemplePrepareTempleDefender (int lp_templeIndex, int lp_defenderIndex);
void libAMCT_gf_ARMSkyTemplePrepareTempleDefenderStatue (int lp_templeIndex, int lp_defenderIndex);
void libAMCT_gf_ARMSkyTempleActivateTempleDefenderWaves (int lp_templeIndex, int lp_stage);
void libAMCT_gf_ARMSkyTempleActivateTempleDefender (int lp_templeIndex, unit lp_defender);
void libAMCT_gf_ARMSkyTempleActivateTempleDefenders (int lp_templeIndex, unitgroup lp_defender);
void libAMCT_gf_ARMSkyTempleDeactivateTempleDefender (unit lp_defender);
int libAMCT_gf_ARMSkyTempleTempleIndexForDefenders (int lp_defenderAIIndex);
void libAMCT_gf_MMCapturePointsUIHookupTemplePanel (int lp_TempleIndex);
bool libAMCT_gf_MMCapturePointsUIAnyTempleisBlessed ();
void libAMCT_gf_MMCapturePointsUIEnableDisableTemple (bool lp_enableDisable, int lp_templeIndex);
void libAMCT_gf_MMCapturePointsUIAnnounceTemplesStatus (int lp_temple);
void libAMCT_gf_MMCapturePointsUISetTempleCaptureProgress (int lp_templeIndex, int lp_team, int lp_progress, int lp_progerssMax);
void libAMCT_gf_MMCapturePointsUISetTempleArrowColor (int lp_templeIndex, int lp_team, fixed lp_progress);
void libAMCT_gf_ARMSkyTempleTransmissionFirstTempleActivates ();
void libAMCT_gf_ARMSkyTempleTransmissionSingleTempleActivates ();
void libAMCT_gf_ARMSkyTempleTransmissionMultipleTemplesActivate ();
void libAMCT_gf_ARMSkyTempleTransmissionOrderCore50 ();
void libAMCT_gf_ARMSkyTempleTransmissionChaosCore50 ();
void libAMCT_gf_ARMSkyTempleTransmissionOrderCore20 ();
void libAMCT_gf_ARMSkyTempleTransmissionChaosCore20 ();

// Trigger Declarations
trigger libAMCT_gt_ARMSkyTempleLevelStart;
trigger libAMCT_gt_ARMSkyTempleGatesOpened;
trigger libAMCT_gt_ARMSkyTempleWarningTimerExpires;
trigger libAMCT_gt_ARMSkyTempleBeaconColor;
trigger libAMCT_gt_ARMSkyTempleBeaconCaptured;
trigger libAMCT_gt_ARMSkyTempleTempleAttacks;
trigger libAMCT_gt_ARMSkyTempleLevel1CoreMonitor;
trigger libAMCT_gt_ARMSkyTempleLevel2CoreMonitor;
trigger libAMCT_gt_ARMSkyTempleLevel3CoreMonitor;
trigger libAMCT_gt_ARMSkyTempleDefenderAttackLogic;
trigger libAMCT_gt_ARMSkyTempleTempleDefenderDies;
trigger libAMCT_gt_ARMSkyTempleCoreDiesGameOver;
trigger libAMCT_gt_ARMSkyTempleUICoreHealthInitialize;
trigger libAMCT_gt_ARMSkyTempleUICoreHealthSetCoreUnits;
trigger libAMCT_gt_MMCapturePointsUIInitialize;
trigger libAMCT_gt_MMCapturePointsUIHandler;
trigger libAMCT_gt_MMCapturePointsUIHandlerCaptureProgress;
trigger libAMCT_gt_ARMSkyTempleDisableEvent;

// Library Initialization
void libAMCT_InitVariables ();

