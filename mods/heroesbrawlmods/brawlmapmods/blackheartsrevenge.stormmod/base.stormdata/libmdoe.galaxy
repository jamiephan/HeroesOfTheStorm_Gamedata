include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/MapMechanicsLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"
include "TriggerLibs/GameDataHelperLib"
include "LibIGHS"
include "LibAREN"
include "LibAtDe"

include "LibMDoE_h"

//--------------------------------------------------------------------------------------------------
// Library: Blackheart's Revenge (Mod)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libMDoE_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libMapM_InitVariables();
    libAIAI_InitVariables();
    libUIUI_InitVariables();
    libGDHL_InitVariables();
    libIGHS_InitVariables();
    libAREN_InitVariables();
    libAtDe_InitVariables();
}

// Variable Initialization
bool libMDoE_InitVariables_completed = false;

void libMDoE_InitVariables () {
    int init_i;
    int init_i1;

    if (libMDoE_InitVariables_completed) {
        return;
    }

    libMDoE_InitVariables_completed = true;

    for (init_i = 0; init_i <= 12; init_i += 1) {
        libMDoE_gv_mDoE_AIStartingGatesAssignments[init_i] = -1;
    }
    libMDoE_gv_mDoE_TimeForBoatToSucceed = 265.0;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libMDoE_gv_mDoE_Boat[init_i].lv_boatHasGT80Life = true;
        libMDoE_gv_mDoE_Boat[init_i].lv_boatHasGT50Life = true;
        libMDoE_gv_mDoE_Boat[init_i].lv_boatHasGT40Life = true;
        libMDoE_gv_mDoE_Boat[init_i].lv_boatHasGT20Life = true;
        libMDoE_gv_mDoE_Boat[init_i].lv_boatCanBarragePlayers = true;
        libMDoE_gv_mDoE_Boat[init_i].lv_boatProgressTimer = TimerCreate();
        libMDoE_gv_mDoE_Boat[init_i].lv_boatAttackCoreTimer = TimerCreate();
    }
    libMDoE_gv_mDoE_LaunchNumber = 1;
    libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup = UnitGroupEmpty();
    libMDoE_gv_mDoE_Cannons.lv_activeCannonUnitGroup = UnitGroupEmpty();
    libMDoE_gv_mDoE_Cannons.lv_cannonsCurrentlyOnCooldown = UnitGroupEmpty();
    libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup1 = UnitGroupEmpty();
    libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup2 = UnitGroupEmpty();
    libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup3 = UnitGroupEmpty();
    libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup4 = UnitGroupEmpty();
    libMDoE_gv_mDoE_Cannons.lv_playersWhoHaveNotTurnedInAmmo = PlayerGroupEmpty();
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        libMDoE_gv_mDoE_Cannons.lv_attackerCannonTextTag[init_i1] = c_textTagNone;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        libMDoE_gv_mDoE_Cannons.lv_defenderCannonTextTag[init_i1] = c_textTagNone;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libMDoE_gv_mDoE_CannonballTurnInCost[init_i] = 1;
    }
    libMDoE_gv_mDoE_AmmoCache.lv_playersWhoHaveNotPickedUpAmmo = PlayerGroupEmpty();
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        libMDoE_gv_mDoE_AmmoCache.lv_ammoAttackerTextTag[init_i1] = c_textTagNone;
    }
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        libMDoE_gv_mDoE_AmmoCache.lv_ammoDefenderTextTag[init_i1] = c_textTagNone;
    }
    libMDoE_gv_mDoE_AmmoCache.lv_availableAmmoCaches = UnitGroupEmpty();
    libMDoE_gv_MMTreasureVaultPanel.lv_mainPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libMDoE_gv_MMTreasureVaultPanel.lv_towerPushEnergyGlobePower[init_i1] = c_invalidDialogControlId;
    }
    libMDoE_gv_MMTreasureVaultPanel.lv_altarWarningFrame = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_altarWarningInfoLabel = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_altarWarningTimerLabel = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_altarActiveBackgroundFrame = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_altarActiveBackgroundImage = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_altarActiveTimerLabel = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_healthFrame = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_mainPanel2 = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame7 = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame10 = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame11 = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame12 = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame13 = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame2[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame3[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame4[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame14[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame15[init_i1] = c_invalidDialogControlId;
    }
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame5 = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame6 = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame8 = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame9 = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_greedSpawnedFrame = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_greedSpawnedInfoLabel = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_CollectableAmmoCachesCounterBlue = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_CollectableAmmoCachesCounterRed = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_CollectableAmmoCachesLabelBlue = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_CollectableAmmoCachesLabelRed = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusLabel = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusLabel2 = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesBackgroundBlue = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesBackgroundRed = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesBlue = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesRed = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesLabelBlue = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesLabelRed = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libMDoE_gv_MMTreasureVaultPanel.lv_cannonFiredFrame[init_i1] = c_invalidDialogControlId;
    }
    libMDoE_gv_MMTreasureVaultPanel.lv_cannonFiredFrameIndex = 1;
    libMDoE_gv_MMTreasureVaultPanel.lv_boatNotificationFrame = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_boatNotificationLabel = c_invalidDialogControlId;
    libMDoE_gv_MMTreasureVaultPanel.lv_boatGoesToSurface = c_invalidDialogControlId;
    libMDoE_gv_mDoeUITopPanel.lv_scorePanel = c_invalidDialogControlId;
    libMDoE_gv_mDoeUITopPanel.lv_boatIcon = c_invalidDialogControlId;
    libMDoE_gv_mDoeUITopPanel.lv_cannonballIcon = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libMDoE_gv_mDoeUITopPanel.lv_scoreHintLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libMDoE_gv_mDoeUITopPanel.lv_scoreLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libMDoE_gv_mDoeUITopPanel.lv_scoreSuffixLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libMDoE_gv_mDoeUITopPanel.lv_boatProgressBar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libMDoE_gv_mDoeUITopPanel.lv_boatProgressLabel[init_i1] = c_invalidDialogControlId;
    }
    libMDoE_gv_mDoeUITopPanel.lv_topNotificationPanel = c_invalidDialogControlId;
    libMDoE_gv_mDoeUITopPanel.lv_helpText = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libMDoE_gv_mDoeUITopPanel.lv_shotsFiredPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libMDoE_gv_mDoeUITopPanel.lv_coreHealthLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libMDoE_gv_mDoeUITopPanel.lv_coreHealthLabelObs[init_i1] = c_invalidDialogControlId;
    }
    libMDoE_gv_mDoeUITopPanel.lv_roundInstructionsPanel = c_invalidDialogControlId;
    libMDoE_gv_mDoeUITopPanel.lv_roundInstructionsTitle = c_invalidDialogControlId;
    libMDoE_gv_mDoeUITopPanel.lv_roundInstructionsDescription = c_invalidDialogControlId;
}

// Presets
// Functions
void libMDoE_gf_MDoEGameOverSequence () {
    // Variable Declarations
    const fixed lv_coreAnimationWaitExplodeTime = 2.8;
    int lv_itPlayer;
    unit lv_itHeroUnit;

    // Automatic Variable Declarations
    const int autoE7A3742D_ae = libCore_gv_bALMaxPlayers;
    const int autoE7A3742D_ai = 1;
    unitgroup autoD3CC0BEE_g;
    int autoD3CC0BEE_u;
    playergroup auto409BA195_g;
    int auto409BA195_var;
    playergroup autoC56B2D95_g;
    int autoC56B2D95_var;

    // Variable Initialization

    // Implementation
    UnitPauseAll(true);
    lv_itPlayer = 1;
    for ( ; ( (autoE7A3742D_ai >= 0 && lv_itPlayer <= autoE7A3742D_ae) || (autoE7A3742D_ai < 0 && lv_itPlayer >= autoE7A3742D_ae) ) ; lv_itPlayer += autoE7A3742D_ai ) {
        autoD3CC0BEE_g = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
        autoD3CC0BEE_u = UnitGroupCount(autoD3CC0BEE_g, c_unitCountAll);
        for (;; autoD3CC0BEE_u -= 1) {
            lv_itHeroUnit = UnitGroupUnitFromEnd(autoD3CC0BEE_g, autoD3CC0BEE_u);
            if (lv_itHeroUnit == null) { break; }
            libNtve_gf_ChangeUnitDamage(lv_itHeroUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
            libNtve_gf_ChangeUnitDamage(lv_itHeroUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        }
    }
    libAIAI_gf_MinionAIPauseUnpauseMinionAISystem(true);
    libMDoE_gf_MDoEUIShowHideBoatIsNotAttackableFrame(false);
    libGame_gf_BuildingDiesCameraShake(lv_coreAnimationWaitExplodeTime, "ImmuneToSkillshots", libCore_gv_activeHumanPlayers);
    auto409BA195_g = libCore_gv_activeHumanPlayers;
    auto409BA195_var = -1;
    while (true) {
        	auto409BA195_var = PlayerGroupNextPlayer(auto409BA195_g, auto409BA195_var);
        	if (auto409BA195_var<0) { break; }
        	CameraLockInput(auto409BA195_var, true);
        PlayerOptionOverride(auto409BA195_var, "camerafollow", "0");
        libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(false, auto409BA195_var);
    }
    Wait(0.0625, c_timeGame);
    autoC56B2D95_g = libCore_gv_activeHumanPlayers;
    autoC56B2D95_var = -1;
    while (true) {
        	autoC56B2D95_var = PlayerGroupNextPlayer(autoC56B2D95_g, autoC56B2D95_var);
        	if (autoC56B2D95_var<0) { break; }
        	CameraFollowUnitGroup(autoC56B2D95_var, CameraFollowUnitGroupGet(autoC56B2D95_var), false, false);
        libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(autoC56B2D95_var, UnitGetPosition(EventUnit()), libGame_gv_gameOver_CameraPanTime_C, -1, 10, false);
    }
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(libCore_gv_oBSERVER_ObserverUIPlayer, UnitGetPosition(EventUnit()), libGame_gv_gameOver_CameraPanTime_C, -1, 10, false);
}

void libMDoE_gf_InitializeLaneStagingPoints (point lp_orderPoint, point lp_chaosPoint1, point lp_chaosPoint2) {
    // Automatic Variable Declarations
    // Implementation
    libMDoE_gv_orderStagingPoint = lp_orderPoint;
    libMDoE_gv_chaosStagingPoints[1] = lp_chaosPoint1;
    libMDoE_gv_chaosStagingPoints[2] = lp_chaosPoint2;
}

void libMDoE_gf_AddRemoveStagingGoals (bool lp_toggle, int lp_attackingTeam) {
    // Variable Declarations
    int lv_defendingTeam;
    int lv_attackingGoalTeam;
    int lv_defendingGoalTeam;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_defendingTeam = libGame_gf_EnemyTeam(lp_attackingTeam);

    // Implementation
    if ((lp_attackingTeam == libGame_gv_teamOrderIndex_C)) {
        lv_attackingGoalTeam = libNtve_ge_GoalTeam_Order;
        lv_defendingGoalTeam = libNtve_ge_GoalTeam_Chaos;
    }
    else {
        lv_attackingGoalTeam = libNtve_ge_GoalTeam_Chaos;
        lv_defendingGoalTeam = libNtve_ge_GoalTeam_Order;
    }
    if ((lp_toggle == true)) {
        AddPointOfInterest(libMDoE_gv_orderStagingPoint, 0.0, 0.0, "LaneStaging", lv_attackingGoalTeam, 0);
        AddPointOfInterest(libMDoE_gv_chaosStagingPoints[1], 0.0, 0.0, "LaneStaging", lv_defendingGoalTeam, 0);
        AddPointOfInterest(libMDoE_gv_chaosStagingPoints[2], 0.0, 0.0, "LaneStaging", lv_defendingGoalTeam, 0);
    }
    else {
        RemovePointOfInterest(libMDoE_gv_orderStagingPoint, "LaneStaging", lv_attackingGoalTeam);
        RemovePointOfInterest(libMDoE_gv_chaosStagingPoints[1], "LaneStaging", lv_defendingGoalTeam);
        RemovePointOfInterest(libMDoE_gv_chaosStagingPoints[2], "LaneStaging", lv_defendingGoalTeam);
    }
}

void libMDoE_gf_InitializeGameStartPathingBlockerLocations () {
    // Variable Declarations
    unit lv_blocker;

    // Automatic Variable Declarations
    unitgroup auto932099CC_g;
    int auto932099CC_u;
    unitgroup auto89FAB3C2_g;
    int auto89FAB3C2_u;

    // Variable Initialization

    // Implementation
    auto932099CC_g = UnitGroup("StormGameStartPathingBlocker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto932099CC_u = UnitGroupCount(auto932099CC_g, c_unitCountAll);
    for (;; auto932099CC_u -= 1) {
        lv_blocker = UnitGroupUnitFromEnd(auto932099CC_g, auto932099CC_u);
        if (lv_blocker == null) { break; }
        libMDoE_gv_gameStartPathingBlockerCount += 1;
        if ((libMDoE_gv_gameStartPathingBlockerCount >= libMDoE_gv_gameStartPathingBlockerMaxCount_C)) {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_MDoE_2E324381"), true);
            return ;
        }

        libMDoE_gv_gameStartPathingBlockerLocations[libMDoE_gv_gameStartPathingBlockerCount] = UnitGetPosition(lv_blocker);
        libMDoE_gv_gameStartPathingBlockerTypes[libMDoE_gv_gameStartPathingBlockerCount] = "StormGameStartPathingBlocker";
    }
    auto89FAB3C2_g = UnitGroup("StormGameStartPathingBlockerDiagonal", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto89FAB3C2_u = UnitGroupCount(auto89FAB3C2_g, c_unitCountAll);
    for (;; auto89FAB3C2_u -= 1) {
        lv_blocker = UnitGroupUnitFromEnd(auto89FAB3C2_g, auto89FAB3C2_u);
        if (lv_blocker == null) { break; }
        if ((libMDoE_gv_gameStartPathingBlockerCount >= libMDoE_gv_gameStartPathingBlockerMaxCount_C)) {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_MDoE_D2DEBDFA"), true);
            return ;
        }

        libMDoE_gv_gameStartPathingBlockerCount += 1;
        libMDoE_gv_gameStartPathingBlockerLocations[libMDoE_gv_gameStartPathingBlockerCount] = UnitGetPosition(lv_blocker);
        libMDoE_gv_gameStartPathingBlockerTypes[libMDoE_gv_gameStartPathingBlockerCount] = "StormGameStartPathingBlockerDiagonal";
    }
}

void libMDoE_gf_ReplaceGameStartPathingBlockers () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoCC36CCE0_ae;
    const int autoCC36CCE0_ai = 1;

    // Variable Initialization

    // Implementation
    autoCC36CCE0_ae = libMDoE_gv_gameStartPathingBlockerCount;
    lv_i = 1;
    for ( ; ( (autoCC36CCE0_ai >= 0 && lv_i <= autoCC36CCE0_ae) || (autoCC36CCE0_ai < 0 && lv_i >= autoCC36CCE0_ae) ) ; lv_i += autoCC36CCE0_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, libMDoE_gv_gameStartPathingBlockerTypes[lv_i], c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, libMDoE_gv_gameStartPathingBlockerLocations[lv_i], null);
    }
}

trigger auto_libMDoE_gf_BoatMovingLogic_Trigger = null;
int auto_libMDoE_gf_BoatMovingLogic_lp_team;

void libMDoE_gf_BoatMovingLogic (int lp_team) {
    auto_libMDoE_gf_BoatMovingLogic_lp_team = lp_team;

    if (auto_libMDoE_gf_BoatMovingLogic_Trigger == null) {
        auto_libMDoE_gf_BoatMovingLogic_Trigger = TriggerCreate("auto_libMDoE_gf_BoatMovingLogic_TriggerFunc");
    }

    TriggerExecute(auto_libMDoE_gf_BoatMovingLogic_Trigger, false, false);
}

bool auto_libMDoE_gf_BoatMovingLogic_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libMDoE_gf_BoatMovingLogic_lp_team;

    // Variable Declarations
    unit lv_boatUnit;
    int lv_currentWaypointIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_boatUnit = libGame_gv_teams[lp_team].lv_core;
    libMDoE_gf_MDoEActivateValidCannonsInUnitGroup(libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup1, false);
    libMDoE_gf_RunBoatProgressLogic(lp_team);
    while ((UnitIsAlive(lv_boatUnit) == true) && (libMDoE_gv_mDoE_Boat[lp_team].lv_progress < 0.97) && (libMDoE_gv_mDoE_BoatWaypoints[lv_currentWaypointIndex] != null)) {
        libMDoE_gv_mDoE_NextWaypoint = libMDoE_gv_mDoE_BoatWaypoints[lv_currentWaypointIndex];
        UnitIssueOrder(lv_boatUnit, OrderTargetingPoint(AbilityCommand("move", 0), libMDoE_gv_mDoE_NextWaypoint), c_orderQueueReplace);
        while ((UnitIsAlive(lv_boatUnit) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_boatUnit), libMDoE_gv_mDoE_NextWaypoint) > 0.0)) {
            libMDoE_gv_mDoE_Boat[lp_team].lv_newBoatPosition = UnitGetPosition(lv_boatUnit);
            Wait(0.0625, c_timeGame);
            libMDoE_gv_mDoE_Boat[lp_team].lv_oldBoatPosition = libMDoE_gv_mDoE_Boat[lp_team].lv_newBoatPosition;
        }
        if ((lv_currentWaypointIndex == 3)) {
            libMDoE_gf_MDoEActivateValidCannonsInUnitGroup(libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup2, true);
        }

        if ((lv_currentWaypointIndex == 6)) {
            libMDoE_gf_MDoEActivateValidCannonsInUnitGroup(libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup3, true);
        }

        if ((lv_currentWaypointIndex == 10)) {
            libMDoE_gf_MDoEActivateValidCannonsInUnitGroup(libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup4, true);
        }

        if (((lv_currentWaypointIndex == 5) || (lv_currentWaypointIndex == 9))) {
            TriggerExecute(libMDoE_gt_MDoE_PlayBoatSubmergeAnims, true, false);
        }

        if ((lv_currentWaypointIndex == 13)) {
            libNtve_gf_SendActorMessageToUnit(libGame_gv_teams[libAtDe_gv_attackDefend.lv_attackingTeam].lv_core, "Signal BoatDocked");
            libNtve_gf_MakeUnitFacePoint(libGame_gv_teams[libAtDe_gv_attackDefend.lv_attackingTeam].lv_core, UnitGetPosition(libGame_gv_teams[libAtDe_gv_attackDefend.lv_defendingTeam].lv_core), 2.0);
        }

        lv_currentWaypointIndex += 1;
    }
    return true;
}

trigger auto_libMDoE_gf_RunBoatProgressLogic_Trigger = null;
int auto_libMDoE_gf_RunBoatProgressLogic_lp_team;

void libMDoE_gf_RunBoatProgressLogic (int lp_team) {
    auto_libMDoE_gf_RunBoatProgressLogic_lp_team = lp_team;

    if (auto_libMDoE_gf_RunBoatProgressLogic_Trigger == null) {
        auto_libMDoE_gf_RunBoatProgressLogic_Trigger = TriggerCreate("auto_libMDoE_gf_RunBoatProgressLogic_TriggerFunc");
    }

    TriggerExecute(auto_libMDoE_gf_RunBoatProgressLogic_Trigger, false, false);
}

bool auto_libMDoE_gf_RunBoatProgressLogic_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libMDoE_gf_RunBoatProgressLogic_lp_team;

    // Variable Declarations
    unit lv_boatUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_boatUnit = libGame_gv_teams[lp_team].lv_core;
    TimerStart(libMDoE_gv_mDoE_Boat[lp_team].lv_boatProgressTimer, libMDoE_gv_mDoE_TimeForBoatToSucceed, false, c_timeGame);
    TimerStart(libMDoE_gv_mDoE_Boat[lp_team].lv_boatAttackCoreTimer, (libMDoE_gv_mDoE_TimeForBoatToSucceed - 7), false, c_timeGame);
    while ((TimerGetRemaining(libMDoE_gv_mDoE_Boat[lp_team].lv_boatProgressTimer) > 0.0) && (UnitIsAlive(lv_boatUnit) == true) && (libMDoE_gv_mDoE_Boat[lp_team].lv_progress < 1.0)) {
        libMDoE_gf_CalculateBoatProgressNew(lp_team);
        if ((TimerGetElapsed(libGame_gv_gameTimer) == 59.25)) {
            libMDoE_gf_MDoEUIShowHideBoatIsNotAttackableFrame(true);
            libMDoE_gf_WarnAllPlayersThatDeactivatedCannonsAboutToActivate(libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup2);
        }
        else {
            if ((TimerGetElapsed(libGame_gv_gameTimer) == 147.5)) {
                libMDoE_gf_MDoEUIShowHideBoatIsNotAttackableFrame(true);
                libMDoE_gf_WarnAllPlayersThatDeactivatedCannonsAboutToActivate(libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup3);
            }
            else {
                if ((TimerGetElapsed(libGame_gv_gameTimer) == 220.4375)) {
                    libMDoE_gf_MDoEUIShowHideBoatIsNotAttackableFrame(true);
                    libMDoE_gf_WarnAllPlayersThatDeactivatedCannonsAboutToActivate(libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup4);
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

void libMDoE_gf_CalculateBoatProgressNew (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    libMDoE_gv_mDoE_Boat[lp_team].lv_progress = ((TimerGetElapsed(libMDoE_gv_mDoE_Boat[lp_team].lv_boatProgressTimer) / libMDoE_gv_mDoE_TimeForBoatToSucceed));
    libMDoE_gf_MDoE_UIUpdateShipProgress(lp_team);
}

trigger auto_libMDoE_gf_AttackCore_Trigger = null;

void libMDoE_gf_AttackCore () {
    if (auto_libMDoE_gf_AttackCore_Trigger == null) {
        auto_libMDoE_gf_AttackCore_Trigger = TriggerCreate("auto_libMDoE_gf_AttackCore_TriggerFunc");
    }

    TriggerExecute(auto_libMDoE_gf_AttackCore_Trigger, false, false);
}

bool auto_libMDoE_gf_AttackCore_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_coreAnimationWaitExplodeTime = 2.8;
    int lv_itPlayer;
    unit lv_itHeroUnit;
    point lv_pointToPanCameraTo;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    VisRevealArea(libGame_gf_ComputerPlayerInTeam(libAtDe_gv_attackDefend.lv_attackingTeam), RegionCircle(UnitGetPosition(libGame_gv_teams[libAtDe_gv_attackDefend.lv_defendingTeam].lv_core), 8.0), 15.0, false);
    VisRevealArea(libGame_gf_ComputerPlayerInTeam(libAtDe_gv_attackDefend.lv_defendingTeam), RegionCircle(UnitGetPosition(libGame_gv_teams[libAtDe_gv_attackDefend.lv_defendingTeam].lv_core), 8.0), 15.0, false);
    Wait(0.0625, c_timeGame);
    libMDoE_gf_MDoETransmissionBoatProgress100();
    libMDoE_gf_MDoEUIShowHideCannonBarrageUI(true);
    UnitBehaviorRemoveCategory(libGame_gv_teams[libAtDe_gv_attackDefend.lv_defendingTeam].lv_core, c_behaviorCategoryInvulnerable);
    libNtve_gf_SendActorMessageToUnit(libGame_gv_teams[libAtDe_gv_attackDefend.lv_defendingTeam].lv_core, "Signal ClearShield");
    return true;
}

void libMDoE_gf_MDoEFireCannon (unit lp_cannon) {
    // Automatic Variable Declarations
    // Implementation
    libMDoE_gv_mDoE_AmmoCache.lv_ammoCarriedByPlayers -= 1;
    libMDoE_gf_MDoEUIUpdateCannonballCount(libMDoE_gv_mDoE_AmmoCache.lv_ammoExistingOnGround, libMDoE_gv_mDoE_AmmoCache.lv_ammoCarriedByPlayers);
    UnitIssueOrder(lp_cannon, OrderTargetingUnit(AbilityCommand("CannonAttack", 0), libGame_gv_teams[libAtDe_gv_attackDefend.lv_attackingTeam].lv_core), c_orderQueueReplace);
    TriggerExecute(libMDoE_gt_SpawnNewAmmoCache, true, false);
}

void libMDoE_gf_MMCannonballsBattleshipShootingShakingCamera (point lp_targetLocation) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto43EED731_ae = libCore_gv_bALMaxPlayers;
    const int auto43EED731_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itPlayer = 1;
    for ( ; ( (auto43EED731_ai >= 0 && lv_itPlayer <= auto43EED731_ae) || (auto43EED731_ai < 0 && lv_itPlayer >= auto43EED731_ae) ) ; lv_itPlayer += auto43EED731_ai ) {
        if ((PlayerStatus(lv_itPlayer) != c_playerStatusActive)) {
            continue;
        }

        if ((DistanceBetweenPoints(CameraGetTarget(lv_itPlayer), lp_targetLocation) <= 20.0)) {
            CameraShake(lv_itPlayer, "Heavy", "Earthquake", 0.0, 0.5, 0.75);
        }
        else if ((DistanceBetweenPoints(CameraGetTarget(lv_itPlayer), lp_targetLocation) <= 40.0)) {
            CameraShake(lv_itPlayer, "Medium", "Earthquake", 0.0, 0.5, 0.5);
        }
    }
}

void libMDoE_gf_MDoEActivateCannon (unit lp_unit, bool lp_ping) {
    // Variable Declarations
    int lv_cannonTeam;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cannonTeam = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_unit));

    // Implementation
    if ((lp_ping == true)) {
        libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "CannonActivated", UnitGetPosition(lp_unit), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 3.0);
    }

    UnitBehaviorRemove(lp_unit, "CannonDeactivated", 1);
    UnitBehaviorRemove(lp_unit, "CannonDeactivatedVisualBehavior", 1);
    AddUnitOfInterest(lp_unit, 0.0, 0.0, "DeliverCannonball", libAIAI_gf_ConvertIntegertoGoalTeam(lv_cannonTeam), 0);
    AddUnitOfInterest(lp_unit, 0.0, 0.0, "DefendCannon", libAIAI_gf_ConvertIntegertoGoalTeam(libGame_gf_EnemyTeam(libAIAI_gf_ConvertIntegertoGoalTeam(lv_cannonTeam))), 0);
}

trigger auto_libMDoE_gf_MDoEDisableCannon_Trigger = null;
unit auto_libMDoE_gf_MDoEDisableCannon_lp_unit;

void libMDoE_gf_MDoEDisableCannon (unit lp_unit) {
    auto_libMDoE_gf_MDoEDisableCannon_lp_unit = lp_unit;

    if (auto_libMDoE_gf_MDoEDisableCannon_Trigger == null) {
        auto_libMDoE_gf_MDoEDisableCannon_Trigger = TriggerCreate("auto_libMDoE_gf_MDoEDisableCannon_TriggerFunc");
    }

    TriggerExecute(auto_libMDoE_gf_MDoEDisableCannon_Trigger, false, false);
}

bool auto_libMDoE_gf_MDoEDisableCannon_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libMDoE_gf_MDoEDisableCannon_lp_unit;

    // Variable Declarations
    int lv_cannonTeam;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cannonTeam = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_unit));

    // Implementation
    RemoveUnitOfInterest(lp_unit, "DeliverCannonball", libAIAI_gf_ConvertIntegertoGoalTeam(lv_cannonTeam));
    RemoveUnitOfInterest(lp_unit, "DefendCannon", libAIAI_gf_ConvertIntegertoGoalTeam(libGame_gf_EnemyTeam(libAIAI_gf_ConvertIntegertoGoalTeam(lv_cannonTeam))));
    while (!((UnitHasBehavior2(lp_unit, "CaptureMacguffinTargetDummy") == false))) {
        Wait(0.0625, c_timeGame);
    }
    UnitBehaviorAdd(lp_unit, "CannonDeactivated", lp_unit, 1);
    UnitBehaviorAdd(lp_unit, "CannonDeactivatedVisualBehavior", lp_unit, 1);
    TextTagShow(libCore_gf_TextTagStoredForUnit(lp_unit, libGame_gv_teamOrderIndex_C), PlayerGroupAll(), false);
    TextTagShow(libCore_gf_TextTagStoredForUnit(lp_unit, libGame_gv_teamChaosIndex_C), PlayerGroupAll(), false);
    return true;
}

void libMDoE_gf_MDoEDisableAllCannons () {
    // Automatic Variable Declarations
    const int autoB18DB27B_ae = 4;
    int autoB18DB27B_var;
    unitgroup autoE2F8828D_g;
    int autoE2F8828D_u;
    unit autoE2F8828D_var;

    // Implementation
    autoB18DB27B_var = 1;
    for ( ; autoB18DB27B_var <= autoB18DB27B_ae; autoB18DB27B_var += 1 ) {
        VisRevealerDestroy(libMDoE_gv_mDoE_Cannons.lv_chaosCannonRevealer[2][autoB18DB27B_var]);
        VisRevealerDestroy(libMDoE_gv_mDoE_Cannons.lv_orderCannonRevealer[2][autoB18DB27B_var]);
        VisRevealerDestroy(libMDoE_gv_mDoE_Cannons.lv_chaosCannonRevealer[3][autoB18DB27B_var]);
        VisRevealerDestroy(libMDoE_gv_mDoE_Cannons.lv_orderCannonRevealer[3][autoB18DB27B_var]);
    }
    autoE2F8828D_g = libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup;
    autoE2F8828D_u = UnitGroupCount(autoE2F8828D_g, c_unitCountAll);
    for (;; autoE2F8828D_u -= 1) {
        autoE2F8828D_var = UnitGroupUnitFromEnd(autoE2F8828D_g, autoE2F8828D_u);
        if (autoE2F8828D_var == null) { break; }
        libMDoE_gf_MDoEDisableCannon(autoE2F8828D_var);
    }
}

void libMDoE_gf_MDoEActivateValidCannons () {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libMDoE_gv_mDoE_Cannons.lv_firstCannonActivated == true)) {
        libMDoE_gf_MDoEActivateCannon(UnitGroupUnit(libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup, 1), true);
    }

    if ((libMDoE_gv_mDoE_Cannons.lv_secondCannonActivated == true)) {
        libMDoE_gf_MDoEActivateCannon(UnitGroupUnit(libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup, 2), true);
    }

    if ((libMDoE_gv_mDoE_Cannons.lv_thirdCannonActivated == true)) {
        libMDoE_gf_MDoEActivateCannon(UnitGroupUnit(libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup, 3), true);
    }

    if ((libMDoE_gv_mDoE_Cannons.lv_fourthCannonActivated == true)) {
        libMDoE_gf_MDoEActivateCannon(UnitGroupUnit(libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup, 4), true);
    }

}

void libMDoE_gf_MDoEActivateValidCannonsInUnitGroup (unitgroup lp_unitGroup, bool lp_pingUnits) {
    // Variable Declarations
    unit lv_itUnit;
    int lv_unitGroupIndex;
    int lv_unitCount;
    int lv_cannonCount;

    // Automatic Variable Declarations
    unitgroup autoCE15C566_val;
    const int autoE62DFB5F_ae = 2;
    int autoE62DFB5F_var;
    unitgroup autoC56D3790_g;
    int autoC56D3790_u;
    unit autoC56D3790_var;
    unitgroup auto98962299_g;
    int auto98962299_u;
    unit auto98962299_var;

    // Variable Initialization

    // Implementation
    UnitGroupClear(libMDoE_gv_mDoE_Cannons.lv_activeCannonUnitGroup);
    autoCE15C566_val = lp_unitGroup;
    if (autoCE15C566_val == libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup1) {
        lv_unitGroupIndex = 1;
    }
    else if (autoCE15C566_val == libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup2) {
        autoE62DFB5F_var = 1;
        for ( ; autoE62DFB5F_var <= autoE62DFB5F_ae; autoE62DFB5F_var += 1 ) {
            VisRevealerDestroy(libMDoE_gv_mDoE_Cannons.lv_orderCannonRevealer[1][autoE62DFB5F_var]);
            VisRevealerDestroy(libMDoE_gv_mDoE_Cannons.lv_chaosCannonRevealer[1][autoE62DFB5F_var]);
        }
        lv_unitGroupIndex = 2;
    }
    else if (autoCE15C566_val == libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup3) {
        lv_unitGroupIndex = 3;
    }
    else if (autoCE15C566_val == libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup4) {
        lv_unitGroupIndex = 4;
    }
    else {
    }
    autoC56D3790_g = libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup;
    autoC56D3790_u = UnitGroupCount(autoC56D3790_g, c_unitCountAll);
    for (;; autoC56D3790_u -= 1) {
        autoC56D3790_var = UnitGroupUnitFromEnd(autoC56D3790_g, autoC56D3790_u);
        if (autoC56D3790_var == null) { break; }
        lv_cannonCount += 1;
        if ((UnitGroupHasUnit(lp_unitGroup, autoC56D3790_var) == false)) {
            libMDoE_gf_MDoEDisableCannon(autoC56D3790_var);
        }

    }
    auto98962299_g = lp_unitGroup;
    auto98962299_u = UnitGroupCount(auto98962299_g, c_unitCountAll);
    for (;; auto98962299_u -= 1) {
        auto98962299_var = UnitGroupUnitFromEnd(auto98962299_g, auto98962299_u);
        if (auto98962299_var == null) { break; }
        libMDoE_gf_MDoEActivateCannon(auto98962299_var, lp_pingUnits);
        UnitGroupAdd(libMDoE_gv_mDoE_Cannons.lv_activeCannonUnitGroup, auto98962299_var);
        UnitCreateEffectUnit(auto98962299_var, "MakeCannonFaceBoatModifyUnit", libGame_gv_teams[libGame_gf_EnemyTeam(libGame_gf_TeamNumberOfPlayer(UnitGetOwner(auto98962299_var)))].lv_core);
        lv_unitCount += 1;
    }
}

void libMDoE_gf_MDoEResetCannonSetup () {
    // Automatic Variable Declarations
    const int autoC1A6188F_ae = 2;
    int autoC1A6188F_var;
    const int autoE7935909_ae = 4;
    int autoE7935909_var;
    const int auto2445888A_ae = 4;
    int auto2445888A_var;
    const int auto1BE256E4_ae = 4;
    int auto1BE256E4_var;

    // Implementation
    libMDoE_gf_MDoEDisableAllCannons();
    UnitSetOwner(UnitGroupUnit(libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup, 1), libGame_gf_ComputerPlayerInTeam(libAtDe_gv_attackDefend.lv_defendingTeam), true);
    UnitSetOwner(UnitGroupUnit(libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup, 2), libGame_gf_ComputerPlayerInTeam(libAtDe_gv_attackDefend.lv_defendingTeam), true);
    UnitSetOwner(UnitGroupUnit(libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup, 3), libGame_gf_ComputerPlayerInTeam(libAtDe_gv_attackDefend.lv_defendingTeam), true);
    UnitSetOwner(UnitGroupUnit(libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup, 4), libGame_gf_ComputerPlayerInTeam(libAtDe_gv_attackDefend.lv_defendingTeam), true);
    UnitSetOwner(UnitGroupUnit(libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup, 5), libGame_gf_ComputerPlayerInTeam(libAtDe_gv_attackDefend.lv_defendingTeam), true);
    UnitSetOwner(UnitGroupUnit(libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup, 6), libGame_gf_ComputerPlayerInTeam(libAtDe_gv_attackDefend.lv_defendingTeam), true);
    UnitSetOwner(UnitGroupUnit(libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup, 7), libGame_gf_ComputerPlayerInTeam(libAtDe_gv_attackDefend.lv_defendingTeam), true);
    UnitSetOwner(UnitGroupUnit(libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup, 8), libGame_gf_ComputerPlayerInTeam(libAtDe_gv_attackDefend.lv_defendingTeam), true);
    libMDoE_gv_mDoE_AmmoCache.lv_playerPickedUpAmmoOnce = false;
    libMDoE_gv_mDoE_Cannons.lv_firstCannonActivated = false;
    libMDoE_gv_mDoE_Cannons.lv_secondCannonActivated = false;
    libMDoE_gv_mDoE_Cannons.lv_fourthCannonActivated = false;
    autoC1A6188F_var = 1;
    for ( ; autoC1A6188F_var <= autoC1A6188F_ae; autoC1A6188F_var += 1 ) {
        VisRevealerDestroy(libMDoE_gv_mDoE_Cannons.lv_chaosCannonRevealer[1][autoC1A6188F_var]);
        VisRevealerDestroy(libMDoE_gv_mDoE_Cannons.lv_orderCannonRevealer[1][autoC1A6188F_var]);
    }
    autoE7935909_var = 1;
    for ( ; autoE7935909_var <= autoE7935909_ae; autoE7935909_var += 1 ) {
        VisRevealerDestroy(libMDoE_gv_mDoE_Cannons.lv_chaosCannonRevealer[2][autoE7935909_var]);
        VisRevealerDestroy(libMDoE_gv_mDoE_Cannons.lv_orderCannonRevealer[2][autoE7935909_var]);
    }
    auto2445888A_var = 1;
    for ( ; auto2445888A_var <= auto2445888A_ae; auto2445888A_var += 1 ) {
        VisRevealerDestroy(libMDoE_gv_mDoE_Cannons.lv_chaosCannonRevealer[3][auto2445888A_var]);
        VisRevealerDestroy(libMDoE_gv_mDoE_Cannons.lv_orderCannonRevealer[3][auto2445888A_var]);
    }
    auto1BE256E4_var = 1;
    for ( ; auto1BE256E4_var <= auto1BE256E4_ae; auto1BE256E4_var += 1 ) {
        VisRevealerDestroy(libMDoE_gv_mDoE_Cannons.lv_chaosCannonRevealer[4][auto1BE256E4_var]);
        VisRevealerDestroy(libMDoE_gv_mDoE_Cannons.lv_orderCannonRevealer[4][auto1BE256E4_var]);
    }
}

void libMDoE_gf_PingAllActiveCannonsForPlayer (int lp_player) {
    // Automatic Variable Declarations
    unitgroup auto95BE8D5C_g;
    int auto95BE8D5C_u;
    unit auto95BE8D5C_var;

    // Implementation
    auto95BE8D5C_g = libMDoE_gv_mDoE_Cannons.lv_activeCannonUnitGroup;
    auto95BE8D5C_u = UnitGroupCount(auto95BE8D5C_g, c_unitCountAll);
    for (;; auto95BE8D5C_u -= 1) {
        auto95BE8D5C_var = UnitGroupUnitFromEnd(auto95BE8D5C_g, auto95BE8D5C_u);
        if (auto95BE8D5C_var == null) { break; }
        libCore_gf_CreateMinimapPingStorm(PlayerGroupSingle(lp_player), "StormAlert", UnitGetPosition(auto95BE8D5C_var), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 3.0);
    }
}

void libMDoE_gf_PingAllActiveCannonsForAllPlayers () {
    // Automatic Variable Declarations
    unitgroup auto2B70B501_g;
    int auto2B70B501_u;
    unit auto2B70B501_var;

    // Implementation
    auto2B70B501_g = libMDoE_gv_mDoE_Cannons.lv_activeCannonUnitGroup;
    auto2B70B501_u = UnitGroupCount(auto2B70B501_g, c_unitCountAll);
    for (;; auto2B70B501_u -= 1) {
        auto2B70B501_var = UnitGroupUnitFromEnd(auto2B70B501_g, auto2B70B501_u);
        if (auto2B70B501_var == null) { break; }
        libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormAlert", UnitGetPosition(auto2B70B501_var), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 3.0);
    }
}

void libMDoE_gf_WarnAllPlayersThatDeactivatedCannonsAboutToActivate (unitgroup lp_cannonGroup) {
    // Automatic Variable Declarations
    unitgroup auto3CABC955_g;
    int auto3CABC955_u;
    unit auto3CABC955_var;

    // Implementation
    auto3CABC955_g = lp_cannonGroup;
    auto3CABC955_u = UnitGroupCount(auto3CABC955_g, c_unitCountAll);
    for (;; auto3CABC955_u -= 1) {
        auto3CABC955_var = UnitGroupUnitFromEnd(auto3CABC955_g, auto3CABC955_u);
        if (auto3CABC955_var == null) { break; }
        if ((UnitGroupHasUnit(libMDoE_gv_mDoE_Cannons.lv_activeCannonUnitGroup, auto3CABC955_var) == false)) {
            libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "CannonCountdown", UnitGetPosition(auto3CABC955_var), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 5.0);
            libNtve_gf_SendActorMessageToUnit(auto3CABC955_var, "Signal AboutToActivate");
            libMDoE_gf_CannonActivationWarningTextTagCreation(auto3CABC955_var);
        }

    }
}

void libMDoE_gf_InitializeAllCannonTextTags () {
    // Variable Declarations
    int lv_cannonCount;

    // Automatic Variable Declarations
    unitgroup auto6D4F9666_g;
    int auto6D4F9666_u;
    unit auto6D4F9666_var;

    // Variable Initialization

    // Implementation
    auto6D4F9666_g = libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup;
    auto6D4F9666_u = UnitGroupCount(auto6D4F9666_g, c_unitCountAll);
    for (;; auto6D4F9666_u -= 1) {
        auto6D4F9666_var = UnitGroupUnitFromEnd(auto6D4F9666_g, auto6D4F9666_u);
        if (auto6D4F9666_var == null) { break; }
        TextTagCreate(StringExternal("Param/Value/lib_MDoE_6160E190"), 24, UnitGetPosition(auto6D4F9666_var), 2.0, true, false, PlayerGroupAll());
        TextTagShow(TextTagLastCreated(), GameAttributePlayersForTeam(libGame_gv_teamOrderIndex_C), true);
        TextTagShow(TextTagLastCreated(), GameAttributePlayersForTeam(libGame_gv_teamChaosIndex_C), false);
        libCore_gf_StoreTextTagForUnit(auto6D4F9666_var, libGame_gv_teamOrderIndex_C, TextTagLastCreated());
        TextTagCreate(StringExternal("Param/Value/lib_MDoE_A3F58C13"), 24, UnitGetPosition(auto6D4F9666_var), 2.0, true, false, PlayerGroupAll());
        TextTagShow(TextTagLastCreated(), PlayerGroupAll(), false);
        libCore_gf_StoreTextTagForUnit(auto6D4F9666_var, libGame_gv_teamChaosIndex_C, TextTagLastCreated());
    }
}

trigger auto_libMDoE_gf_CannonActivationWarningTextTagCreation_Trigger = null;
unit auto_libMDoE_gf_CannonActivationWarningTextTagCreation_lp_cannonUnit;

void libMDoE_gf_CannonActivationWarningTextTagCreation (unit lp_cannonUnit) {
    auto_libMDoE_gf_CannonActivationWarningTextTagCreation_lp_cannonUnit = lp_cannonUnit;

    if (auto_libMDoE_gf_CannonActivationWarningTextTagCreation_Trigger == null) {
        auto_libMDoE_gf_CannonActivationWarningTextTagCreation_Trigger = TriggerCreate("auto_libMDoE_gf_CannonActivationWarningTextTagCreation_TriggerFunc");
    }

    TriggerExecute(auto_libMDoE_gf_CannonActivationWarningTextTagCreation_Trigger, false, false);
}

bool auto_libMDoE_gf_CannonActivationWarningTextTagCreation_TriggerFunc (bool testConds, bool runActions) {
    unit lp_cannonUnit = auto_libMDoE_gf_CannonActivationWarningTextTagCreation_lp_cannonUnit;

    // Variable Declarations
    const fixed lv_warningTime_C = 10.0;
    timer lv_cannonActivationWarningTimer;
    int lv_teamIndex;
    int lv_orderTextTag;
    int lv_chaosTextTag;

    // Automatic Variable Declarations
    const int auto20314A21_ae = libCore_gv_bALMaxTeams;
    const int auto20314A21_ai = 1;

    // Variable Initialization
    lv_cannonActivationWarningTimer = TimerCreate();
    lv_orderTextTag = libCore_gf_TextTagStoredForUnit(lp_cannonUnit, libGame_gv_teamOrderIndex_C);
    lv_chaosTextTag = libCore_gf_TextTagStoredForUnit(lp_cannonUnit, libGame_gv_teamChaosIndex_C);

    // Implementation
    TimerStart(lv_cannonActivationWarningTimer, lv_warningTime_C, false, c_timeGame);
    TextExpressionSetToken("Param/Expression/lib_MDoE_CB8DE8D6", "A", TextTimeFormat(StringToText("<sectotal/>"), FixedToInt(TimerGetDuration(lv_cannonActivationWarningTimer))));
    TextTagSetText(lv_orderTextTag, TextExpressionAssemble("Param/Expression/lib_MDoE_CB8DE8D6"));
    TextExpressionSetToken("Param/Expression/lib_MDoE_85F1D362", "A", TextTimeFormat(StringToText("<sectotal/>"), FixedToInt(TimerGetDuration(lv_cannonActivationWarningTimer))));
    TextTagSetText(lv_chaosTextTag, TextExpressionAssemble("Param/Expression/lib_MDoE_85F1D362"));
    TextTagShow(lv_orderTextTag, PlayerGroupAll(), true);
    TextTagShow(lv_chaosTextTag, PlayerGroupAll(), true);
    lv_teamIndex = 1;
    for ( ; ( (auto20314A21_ai >= 0 && lv_teamIndex <= auto20314A21_ae) || (auto20314A21_ai < 0 && lv_teamIndex >= auto20314A21_ae) ) ; lv_teamIndex += auto20314A21_ai ) {
        while ((UnitHasBehavior2(lp_cannonUnit, "CannonDeactivated") == true)) {
            TextExpressionSetToken("Param/Expression/lib_MDoE_99823B9F", "A", TextTimeFormat(StringToText("<sectotal/>"), FixedToInt(TimerGetRemaining(lv_cannonActivationWarningTimer))));
            TextTagSetText(lv_orderTextTag, TextExpressionAssemble("Param/Expression/lib_MDoE_99823B9F"));
            TextExpressionSetToken("Param/Expression/lib_MDoE_7D03AB59", "A", TextTimeFormat(StringToText("<sectotal/>"), FixedToInt(TimerGetRemaining(lv_cannonActivationWarningTimer))));
            TextTagSetText(lv_chaosTextTag, TextExpressionAssemble("Param/Expression/lib_MDoE_7D03AB59"));
            Wait(1.0, c_timeGame);
        }
    }
    TextTagShow(lv_orderTextTag, PlayerGroupAll(), false);
    TextTagShow(lv_chaosTextTag, PlayerGroupAll(), false);
    libMDoE_gf_ShowHideRelevantDefenderCannonTextRightClickMechanic();
    return true;
}

void libMDoE_gf_HideDefenderTextTagsOnAllCannonsForPlayer (int lp_player) {
    // Automatic Variable Declarations
    unitgroup auto4D98250A_g;
    int auto4D98250A_u;
    unit auto4D98250A_var;

    // Implementation
    PlayerGroupRemove(libMDoE_gv_mDoE_Cannons.lv_playersWhoHaveNotTurnedInAmmo, lp_player);
    auto4D98250A_g = libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup;
    auto4D98250A_u = UnitGroupCount(auto4D98250A_g, c_unitCountAll);
    for (;; auto4D98250A_u -= 1) {
        auto4D98250A_var = UnitGroupUnitFromEnd(auto4D98250A_g, auto4D98250A_u);
        if (auto4D98250A_var == null) { break; }
        TextTagShow(libCore_gf_TextTagStoredForUnit(auto4D98250A_var, libGame_gv_teamChaosIndex_C), PlayerGroupSingle(lp_player), false);
    }
}

void libMDoE_gf_ShowHideRelevantDefenderCannonTextRightClickMechanic () {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    unitgroup autoD89CBBED_g;
    int autoD89CBBED_u;
    unit autoD89CBBED_var;
    playergroup auto367C004B_g;

    // Variable Initialization

    // Implementation
    autoD89CBBED_g = libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup;
    autoD89CBBED_u = UnitGroupCount(autoD89CBBED_g, c_unitCountAll);
    for (;; autoD89CBBED_u -= 1) {
        autoD89CBBED_var = UnitGroupUnitFromEnd(autoD89CBBED_g, autoD89CBBED_u);
        if (autoD89CBBED_var == null) { break; }
        if ((UnitGroupHasUnit(libMDoE_gv_mDoE_Cannons.lv_activeCannonUnitGroup, autoD89CBBED_var) == true) && (UnitGroupHasUnit(libMDoE_gv_mDoE_Cannons.lv_cannonsCurrentlyOnCooldown, autoD89CBBED_var) == false)) {
            auto367C004B_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
            lv_itPlayer = -1;
            while (true) {
                	lv_itPlayer = PlayerGroupNextPlayer(auto367C004B_g, lv_itPlayer);
                	if (lv_itPlayer<0) { break; }
                	if ((TechTreeBehaviorCount(lv_itPlayer, "MapMechanicStack", c_techCountCompleteOnly) >= 1)) {
                    TextTagSetText(libCore_gf_TextTagStoredForUnit(autoD89CBBED_var, libGame_gv_teamChaosIndex_C), StringExternal("Param/Value/lib_MDoE_2AD56E6B"));
                    TextTagShow(libCore_gf_TextTagStoredForUnit(autoD89CBBED_var, libGame_gv_teamChaosIndex_C), PlayerGroupSingle(lv_itPlayer), true);
                }
                else {
                    TextTagShow(libCore_gf_TextTagStoredForUnit(autoD89CBBED_var, libGame_gv_teamChaosIndex_C), PlayerGroupSingle(lv_itPlayer), false);
                }
            }
        }
        else {
            TextTagShow(libCore_gf_TextTagStoredForUnit(autoD89CBBED_var, libGame_gv_teamChaosIndex_C), PlayerGroupAll(), false);
        }
    }
}

void libMDoE_gf_HideAllCannonText () {
    // Automatic Variable Declarations
    unitgroup autoEBC2C504_g;
    int autoEBC2C504_u;
    unit autoEBC2C504_var;

    // Implementation
    autoEBC2C504_g = libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup;
    autoEBC2C504_u = UnitGroupCount(autoEBC2C504_g, c_unitCountAll);
    for (;; autoEBC2C504_u -= 1) {
        autoEBC2C504_var = UnitGroupUnitFromEnd(autoEBC2C504_g, autoEBC2C504_u);
        if (autoEBC2C504_var == null) { break; }
        TextTagShow(libCore_gf_TextTagStoredForUnit(autoEBC2C504_var, libGame_gv_teamOrderIndex_C), PlayerGroupAll(), false);
        TextTagShow(libCore_gf_TextTagStoredForUnit(autoEBC2C504_var, libGame_gv_teamChaosIndex_C), PlayerGroupAll(), false);
    }
}

int libMDoE_gf_DoESGetCannonballCountOnHero (int lp_player, unit lp_heroUnit) {
    // Variable Declarations
    fixed lv_GoldCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_GoldCount = UnitBehaviorCount(lp_heroUnit, "MapMechanicStack");
    return FixedToInt(lv_GoldCount);
}

void libMDoE_gf_DoEsModifyHeroCannonballCount (int lp_player, unit lp_heroUnit, int lp_count) {
    // Variable Declarations
    unit lv_heroUnit;
    int lv_finalCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_count == 0)) {
        return ;
    }

    lv_finalCount = (libMDoE_gf_DoESGetCannonballCountOnHero(lp_player, lp_heroUnit) + lp_count);
    lv_finalCount = MaxI(lv_finalCount, 0);
    libMDoE_gf_DoEsSetHeroCannonballCount(lp_player, lp_heroUnit, lv_finalCount);
}

void libMDoE_gf_DoEsSetHeroCannonballCount (int lp_player, unit lp_heroUnit, int lp_count) {
    // Variable Declarations
    unit lv_unitGroupUnit;
    int lv_tempCount;
    int lv_finalCount;
    int lv_itPlayer;
    unit lv_vehicleUnit;
    int lv_numCannonballs;

    // Automatic Variable Declarations
    unitgroup auto6802BC0D_g;
    int auto6802BC0D_u;

    // Variable Initialization

    // Implementation
    lv_finalCount = lp_count;
    lv_numCannonballs = libMDoE_gf_DoESGetCannonballCountOnHero(lp_player, lp_heroUnit);
    UnitBehaviorRemove(lp_heroUnit, "MapMechanicStack", lv_numCannonballs);
    if ((lp_count > 0)) {
        UnitBehaviorAdd(lp_heroUnit, "MapMechanicStack", lp_heroUnit, lp_count);
    }

    if ((UnitGroupCount(libGame_gv_players[lp_player].lv_heroUnitGroup, c_unitCountAll) > 1)) {
        auto6802BC0D_g = libGame_gv_players[lp_player].lv_heroUnitGroup;
        auto6802BC0D_u = UnitGroupCount(auto6802BC0D_g, c_unitCountAll);
        for (;; auto6802BC0D_u -= 1) {
            lv_unitGroupUnit = UnitGroupUnitFromEnd(auto6802BC0D_g, auto6802BC0D_u);
            if (lv_unitGroupUnit == null) { break; }
            lv_tempCount += UnitBehaviorCount(lv_unitGroupUnit, "MapMechanicStack");
        }
        lv_finalCount = lv_tempCount;
    }

    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "CarriedMechanic", lv_finalCount);
}

void libMDoE_gf_DoEsResetCannonballCounter (int lp_newMaxCount) {
    // Automatic Variable Declarations
    // Implementation
    libMDoE_gv_mDoE_CannonballTurnedIn[libGame_gv_teamOrderIndex_C] = 0;
    libMDoE_gv_mDoE_CannonballTurnedIn[libGame_gv_teamChaosIndex_C] = 0;
    libMDoE_gv_mDoE_CannonballTurnInCost[libGame_gv_teamOrderIndex_C] = lp_newMaxCount;
    libMDoE_gv_mDoE_CannonballTurnInCost[libGame_gv_teamChaosIndex_C] = lp_newMaxCount;
}

void libMDoE_gf_PlayerPicksUpAmmoDisplayText (int lp_player, unit lp_unit) {
    // Variable Declarations
    int lv_alliedTeam;
    int lv_enemyTeam;
    text lv_colorForTarget;
    text lv_nameOfPingingHero;
    text lv_pingMessage;
    text lv_pingMessage2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_alliedTeam = libGame_gf_TeamNumberOfPlayer(lp_player);
    lv_enemyTeam = libGame_gf_EnemyTeam(lv_alliedTeam);
    lv_nameOfPingingHero = UnitTypeGetName(UnitGetType(libGame_gv_players[lp_player].lv_heroUnit));
    if ((libGame_gv_players[lp_player].lv_heroUsesAnnouncementAlias == true)) {
        lv_nameOfPingingHero = UnitTypeGetName(UnitGetType(libGame_gv_players[lp_player].lv_heroUnit));
    }
    else {
        lv_nameOfPingingHero = UnitTypeGetName(UnitGetType(lp_unit));
    }
    TextExpressionSetToken("Param/Expression/lib_MDoE_DA85B06D", "A", lv_nameOfPingingHero);
    lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_MDoE_DA85B06D");
    UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_alliedTeam, false), c_messageAreaChat, lv_pingMessage);
    TextExpressionSetToken("Param/Expression/lib_MDoE_3CC13B4A", "A", lv_nameOfPingingHero);
    lv_pingMessage2 = TextExpressionAssemble("Param/Expression/lib_MDoE_3CC13B4A");
    UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_enemyTeam, false), c_messageAreaChat, lv_pingMessage2);
    libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormAlert", UnitGetPosition(lp_unit), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 1.5);
    PingSetUnit(PingLastCreated(), lp_unit);
}

void libMDoE_gf_PlayerTurnsInAmmoDisplayText (int lp_player, unit lp_unit) {
    // Variable Declarations
    int lv_alliedTeam;
    int lv_enemyTeam;
    text lv_colorForTarget;
    text lv_nameOfPingingHero;
    text lv_pingMessage;
    text lv_pingMessage2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_alliedTeam = libGame_gf_TeamNumberOfPlayer(lp_player);
    lv_enemyTeam = libGame_gf_EnemyTeam(lv_alliedTeam);
    lv_nameOfPingingHero = UnitTypeGetName(UnitGetType(libGame_gv_players[lp_player].lv_heroUnit));
    if ((libGame_gv_players[lp_player].lv_heroUsesAnnouncementAlias == true)) {
        lv_nameOfPingingHero = UnitTypeGetName(UnitGetType(libGame_gv_players[lp_player].lv_heroUnit));
    }
    else {
        lv_nameOfPingingHero = UnitTypeGetName(UnitGetType(lp_unit));
    }
    TextExpressionSetToken("Param/Expression/lib_MDoE_8C154537", "A", lv_nameOfPingingHero);
    lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_MDoE_8C154537");
    UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_alliedTeam, false), c_messageAreaChat, lv_pingMessage);
    TextExpressionSetToken("Param/Expression/lib_MDoE_065A9BD0", "A", lv_nameOfPingingHero);
    lv_pingMessage2 = TextExpressionAssemble("Param/Expression/lib_MDoE_065A9BD0");
    UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lv_enemyTeam, false), c_messageAreaChat, lv_pingMessage2);
    libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "CannonFired", UnitGetPosition(lp_unit), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 1.5);
    PingSetUnit(PingLastCreated(), lp_unit);
}

void libMDoE_gf_MDoESpawnInitialAmmoCaches (int lp_defendingTeam) {
    // Variable Declarations
    playergroup lv_playerGroup;
    int lv_randomInteger;
    int lv_attackingTeam;

    // Automatic Variable Declarations
    playergroup auto979DE84E_g;
    int auto979DE84E_var;

    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();
    lv_attackingTeam = libGame_gf_EnemyTeam(lp_defendingTeam);

    // Implementation
    libMDoE_gv_mDoE_AmmoCache.lv_ammoExistingOnGround = 0;
    libMDoE_gv_mDoE_AmmoCache.lv_ammoCarriedByPlayers = 0;
    if ((lp_defendingTeam == libGame_gv_teamOrderIndex_C)) {
        libMDoE_gv_mDoE_AmmoCache.lv_owningPlayer = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        if ((lp_defendingTeam == libGame_gv_teamChaosIndex_C)) {
            libMDoE_gv_mDoE_AmmoCache.lv_owningPlayer = libCore_gv_cOMPUTER_TeamChaos;
        }

    }
    PlayerGroupAdd(lv_playerGroup, 1);
    PlayerGroupAdd(lv_playerGroup, 2);
    PlayerGroupAdd(lv_playerGroup, 3);
    PlayerGroupAdd(lv_playerGroup, 4);
    lv_randomInteger = RandomInt(1, 4);
    PlayerGroupRemove(lv_playerGroup, lv_randomInteger);
    libMDoE_gv_mDoE_AmmoCache.lv_amountOfAvailableLocations += 1;
    libMDoE_gv_mDoE_AmmoCache.lv_nextPointToSpawnAt[libMDoE_gv_mDoE_AmmoCache.lv_amountOfAvailableLocations] = lv_randomInteger;
    auto979DE84E_g = lv_playerGroup;
    auto979DE84E_var = -1;
    while (true) {
        	auto979DE84E_var = PlayerGroupNextPlayer(auto979DE84E_g, auto979DE84E_var);
        	if (auto979DE84E_var<0) { break; }
        	libNtve_gf_CreateUnitsAtPoint2(1, "AmmoCache", c_unitCreateIgnorePlacement, libMDoE_gv_mDoE_AmmoCache.lv_owningPlayer, libMDoE_gv_mDoE_AmmoCache.lv_ammoSpawnPoints[auto979DE84E_var], null);
        UnitGroupAdd(libMDoE_gv_mDoE_AmmoCache.lv_availableAmmoCaches, UnitLastCreated());
        libMDoE_gv_mDoE_AmmoCache.lv_unit[auto979DE84E_var] = UnitLastCreated();
        VisRevealerCreate(libCore_gv_cOMPUTER_TeamOrder, RegionCircle(UnitGetPosition(UnitLastCreated()), libMapM_gv_mMRavenRevealRadius_C));
        libMDoE_gv_mDoE_AmmoCache.lv_ammoOrderRevealer[auto979DE84E_var] = VisRevealerLastCreated();
        VisRevealerCreate(libCore_gv_cOMPUTER_TeamChaos, RegionCircle(UnitGetPosition(UnitLastCreated()), libMapM_gv_mMRavenRevealRadius_C));
        libMDoE_gv_mDoE_AmmoCache.lv_ammoChaosRevealer[auto979DE84E_var] = VisRevealerLastCreated();
        TextTagCreate(StringExternal("Param/Value/lib_MDoE_DA115643"), 24, UnitGetPosition(UnitLastCreated()), 2.0, true, true, libGame_gv_teams[libAtDe_gv_attackDefend.lv_attackingTeam].lv_teamPlayerGroup);
        libMDoE_gv_mDoE_AmmoCache.lv_ammoAttackerTextTag[auto979DE84E_var] = TextTagLastCreated();
        TextTagCreate(StringExternal("Param/Value/lib_MDoE_4EC432CA"), 24, UnitGetPosition(UnitLastCreated()), 2.0, true, true, libMDoE_gv_mDoE_AmmoCache.lv_playersWhoHaveNotPickedUpAmmo);
        libMDoE_gv_mDoE_AmmoCache.lv_ammoDefenderTextTag[auto979DE84E_var] = TextTagLastCreated();
        libMDoE_gv_mDoE_AmmoCache.lv_ammoExistingOnGround += 1;
        libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormAlert", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 3.0);
        AddUnitOfInterest(libMDoE_gv_mDoE_AmmoCache.lv_unit[auto979DE84E_var], 0.0, 0.0, "PickupCannonball", libAIAI_gf_ConvertIntegertoGoalTeam(lp_defendingTeam), 0);
    }
    libMDoE_gf_MDoEUIUpdateCannonballCount(libMDoE_gv_mDoE_AmmoCache.lv_ammoExistingOnGround, libMDoE_gv_mDoE_AmmoCache.lv_ammoCarriedByPlayers);
    libMDoE_gf_MDoEUIShowHideMainPanel3(true);
}

void libMDoE_gf_MDoEUpdateAmmoSpawnLocationQueue () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoF8D801D9_ae;
    const int autoF8D801D9_ai = 1;

    // Variable Initialization

    // Implementation
    autoF8D801D9_ae = (libMDoE_gv_mDoE_AmmoCache.lv_amountOfAvailableLocations - 1);
    lv_i = 1;
    for ( ; ( (autoF8D801D9_ai >= 0 && lv_i <= autoF8D801D9_ae) || (autoF8D801D9_ai < 0 && lv_i >= autoF8D801D9_ae) ) ; lv_i += autoF8D801D9_ai ) {
        libMDoE_gv_mDoE_AmmoCache.lv_nextPointToSpawnAt[lv_i] = libMDoE_gv_mDoE_AmmoCache.lv_nextPointToSpawnAt[(lv_i + 1)];
    }
    libMDoE_gv_mDoE_AmmoCache.lv_amountOfAvailableLocations -= 1;
}

void libMDoE_gf_HideTextTagsOnAllActiveAmmoCachesForPlayer (int lp_player) {
    // Variable Declarations
    int lv_itAmmo;

    // Automatic Variable Declarations
    const int auto119A2AFF_ae = 4;
    const int auto119A2AFF_ai = 1;

    // Variable Initialization

    // Implementation
    PlayerGroupRemove(libMDoE_gv_mDoE_AmmoCache.lv_playersWhoHaveNotPickedUpAmmo, lp_player);
    lv_itAmmo = 1;
    for ( ; ( (auto119A2AFF_ai >= 0 && lv_itAmmo <= auto119A2AFF_ae) || (auto119A2AFF_ai < 0 && lv_itAmmo >= auto119A2AFF_ae) ) ; lv_itAmmo += auto119A2AFF_ai ) {
        TextTagShow(libMDoE_gv_mDoE_AmmoCache.lv_ammoDefenderTextTag[lv_itAmmo], PlayerGroupSingle(lp_player), false);
    }
}

void libMDoE_gf_DoEs_AddTeleporter (unit lp_exitUnitChaos, unit lp_exitUnitOrder, unit lp_entranceUnit) {
    // Automatic Variable Declarations
    // Implementation
    libMDoE_gv_mDoE_WaygateCount += 1;
    libMDoE_gv_mDoE_Teleporter[libMDoE_gv_mDoE_WaygateCount].lv_entranceUnit = lp_entranceUnit;
    libMDoE_gv_mDoE_Teleporter[libMDoE_gv_mDoE_WaygateCount].lv_exitUnitChaos = lp_exitUnitChaos;
    libMDoE_gv_mDoE_Teleporter[libMDoE_gv_mDoE_WaygateCount].lv_exitUnitOrder = lp_exitUnitOrder;
    libMDoE_gv_mDoE_Teleporter[libMDoE_gv_mDoE_WaygateCount].lv_positionOrder = UnitGetPosition(lp_exitUnitOrder);
    libMDoE_gv_mDoE_Teleporter[libMDoE_gv_mDoE_WaygateCount].lv_positionChaos = UnitGetPosition(lp_exitUnitChaos);
}

void libMDoE_gf_DoEs_ActivateTeleporters () {
    // Variable Declarations
    int lv_waygateIndex;

    // Automatic Variable Declarations
    int auto5126A0CE_ae;
    const int auto5126A0CE_ai = 1;

    // Variable Initialization

    // Implementation
    auto5126A0CE_ae = libMDoE_gv_mDoE_WaygateCount;
    lv_waygateIndex = 1;
    for ( ; ( (auto5126A0CE_ai >= 0 && lv_waygateIndex <= auto5126A0CE_ae) || (auto5126A0CE_ai < 0 && lv_waygateIndex >= auto5126A0CE_ae) ) ; lv_waygateIndex += auto5126A0CE_ai ) {
        if (true) {
            UnitSetState(libMDoE_gv_mDoE_Teleporter[lv_waygateIndex].lv_entranceUnit, c_unitStateHighlightable, true);
            UnitSetState(libMDoE_gv_mDoE_Teleporter[lv_waygateIndex].lv_entranceUnit, c_unitStateTargetable, true);
            if ((UnitGetType(libMDoE_gv_mDoE_Teleporter[lv_waygateIndex].lv_entranceUnit) != "TeleporterNeutral")) {
                UnitBehaviorAdd(libMDoE_gv_mDoE_Teleporter[lv_waygateIndex].lv_entranceUnit, "MacguffinActivated", libMDoE_gv_mDoE_Teleporter[lv_waygateIndex].lv_entranceUnit, 1);
            }

            UnitBehaviorRemove(libMDoE_gv_mDoE_Teleporter[lv_waygateIndex].lv_entranceUnit, "UnitCannotBePinged", 1);
            libNtve_gf_SendActorMessageToUnit(libMDoE_gv_mDoE_Teleporter[lv_waygateIndex].lv_exitUnitOrder, "SetMinimapVisibility 1");
            AIAddPortal(libCore_gv_cOMPUTER_Neutral, libMDoE_gv_mDoE_Teleporter[lv_waygateIndex].lv_entranceUnit, libMDoE_gv_mDoE_Teleporter[lv_waygateIndex].lv_exitUnitOrder, 0.25, 0.0, "CaptureMacGuffinTwo", null);
            if ((lv_waygateIndex == 1)) {
                libNtve_gf_SendActorMessageToUnit(libMDoE_gv_mDoE_Teleporter[lv_waygateIndex].lv_entranceUnit, "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_Ladder_Up.dds");
            }
            else {
                libNtve_gf_SendActorMessageToUnit(libMDoE_gv_mDoE_Teleporter[lv_waygateIndex].lv_entranceUnit, "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_Ladder_Down.dds");
            }
        }

    }
}

void libMDoE_gf_MDoEUIInit (int lp_parentPanel) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_itTeam;
    int lv_enemyTeam;
    int lv_attackTeam;
    int lv_defendTeam;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    DialogControlSetAnimationState(libUIUI_gv_uIGameUIHandles.lv_gameUIContainer, PlayerGroupAll(), "SingleStackCarryBehavior", "True");
    lv_attackTeam = libAtDe_gv_attackDefend.lv_attackingTeam;
    lv_defendTeam = libAtDe_gv_attackDefend.lv_defendingTeam;
    DialogControlCreateInPanelFromTemplate(lp_parentPanel, c_triggerControlTypePanel, "DocksEscort/DocksEscortPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libMDoE_gv_MMTreasureVaultPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "CannonModeFrame");
    libMDoE_gv_MMTreasureVaultPanel.lv_mainPanel2 = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CannonballsLeftLabelBlue");
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame8 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame8, StringExternal("Param/Value/lib_MDoE_A60318E9"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CannonballsLeftLabelRed");
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame9 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame9, StringExternal("Param/Value/lib_MDoE_CF7D7758"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "ShotCounterBlue");
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame6 = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "ShotCounterRed");
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame5 = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "CannonShotFrame1");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "ActiveCannonBallBlue");
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame2[lv_attackTeam] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "ActiveCannonBallRed");
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame2[lv_defendTeam] = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "CannonShotFrame2");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "ActiveCannonBallBlue");
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame3[lv_attackTeam] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "ActiveCannonBallRed");
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame3[lv_defendTeam] = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "CannonShotFrame3");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "ActiveCannonBallBlue");
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame4[lv_attackTeam] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "ActiveCannonBallRed");
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame4[lv_defendTeam] = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "CannonShotFrame4");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "ActiveCannonBallBlue");
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame14[lv_attackTeam] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "ActiveCannonBallRed");
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame14[lv_defendTeam] = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "CannonShotFrame5");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "ActiveCannonBallBlue");
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame15[lv_attackTeam] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "ActiveCannonBallRed");
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame15[lv_defendTeam] = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
    libMDoE_gf_MDoEUISetCannonBarrageUIAllianceColors();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "BoatNotAttackableNotificationFrame");
    libMDoE_gv_MMTreasureVaultPanel.lv_boatNotificationFrame = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "NotificationLabel");
    libMDoE_gv_MMTreasureVaultPanel.lv_boatNotificationLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "BoatAttackableNotificationFrame");
    libMDoE_gv_MMTreasureVaultPanel.lv_boatGoesToSurface = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TreasureCollectedFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "CarriedAmmoCachesBackgroundBlue");
    libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesBackgroundBlue = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_defendTeam].lv_teamPlayerGroupNoNPCPlayers, true);
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_attackTeam].lv_teamPlayerGroupNoNPCPlayers, false);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "CarriedAmmoCachesBlue");
    libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesBlue = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_defendTeam].lv_teamPlayerGroupNoNPCPlayers, true);
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_attackTeam].lv_teamPlayerGroupNoNPCPlayers, false);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CarriedAmmoCachesLabelBlue");
    libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesLabelBlue = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_MDoE_14573639"), PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_defendTeam].lv_teamPlayerGroupNoNPCPlayers, true);
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_attackTeam].lv_teamPlayerGroupNoNPCPlayers, false);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "CarriedAmmoCachesBackgroundRed");
    libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesBackgroundRed = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_attackTeam].lv_teamPlayerGroupNoNPCPlayers, true);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_defendTeam].lv_teamPlayerGroupNoNPCPlayers, false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "CarriedAmmoCachesRed");
    libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesRed = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_attackTeam].lv_teamPlayerGroupNoNPCPlayers, true);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_defendTeam].lv_teamPlayerGroupNoNPCPlayers, false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CarriedAmmoCachesLabelRed");
    libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesLabelRed = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_MDoE_76A605C2"), PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_attackTeam].lv_teamPlayerGroupNoNPCPlayers, true);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_defendTeam].lv_teamPlayerGroupNoNPCPlayers, false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CarriedAmmoCachesCounterRed");
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusLabel2 = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_attackTeam].lv_teamPlayerGroupNoNPCPlayers, true);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_defendTeam].lv_teamPlayerGroupNoNPCPlayers, false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CarriedAmmoCachesCounterBlue");
    libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusLabel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_defendTeam].lv_teamPlayerGroupNoNPCPlayers, true);
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_attackTeam].lv_teamPlayerGroupNoNPCPlayers, false);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    lv_currentPanelLayer -= 1;
    libMDoE_gf_MDoEUIShowHideMainPanel(true);
}

void libMDoE_gf_MMTVUISetMode (int lp_mode) {
    // Automatic Variable Declarations
    int autoFB04667B_val;

    // Implementation
    autoFB04667B_val = lp_mode;
    if (autoFB04667B_val == libMDoE_ge_MDoEUIModes_Idle) {
        DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_altarWarningFrame, PlayerGroupAll(), false);
        libMDoE_gf_MDoEUIShowHideMainPanel2(false);
    }
    else if (autoFB04667B_val == libMDoE_ge_MDoEUIModes_AltarWarning) {
        DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_altarWarningFrame, PlayerGroupAll(), true);
        libMDoE_gf_MDoEUIShowHideMainPanel2(false);
    }
    else if (autoFB04667B_val == libMDoE_ge_MDoEUIModes_AltarSpawned) {
        DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_altarWarningFrame, PlayerGroupAll(), false);
        libMDoE_gf_MDoEUIShowHideMainPanel2(true);
    }
    else {
    }
}

void libMDoE_gf_MDoEUISwapCannonballFrameAlliance () {
    // Variable Declarations
    int lv_attackTeam;
    int lv_defendTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_attackTeam = libAtDe_gv_attackDefend.lv_attackingTeam;
    lv_defendTeam = libAtDe_gv_attackDefend.lv_defendingTeam;
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesBackgroundBlue, libGame_gv_teams[lv_defendTeam].lv_teamPlayerGroupNoNPCPlayers, true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesBackgroundBlue, libGame_gv_teams[lv_attackTeam].lv_teamPlayerGroupNoNPCPlayers, false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesBackgroundBlue, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesBlue, libGame_gv_teams[lv_defendTeam].lv_teamPlayerGroupNoNPCPlayers, true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesBlue, libGame_gv_teams[lv_attackTeam].lv_teamPlayerGroupNoNPCPlayers, false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesBlue, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesLabelBlue, libGame_gv_teams[lv_defendTeam].lv_teamPlayerGroupNoNPCPlayers, true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesLabelBlue, libGame_gv_teams[lv_attackTeam].lv_teamPlayerGroupNoNPCPlayers, false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesLabelBlue, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesBackgroundRed, libGame_gv_teams[lv_attackTeam].lv_teamPlayerGroupNoNPCPlayers, true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesBackgroundRed, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesBackgroundRed, libGame_gv_teams[lv_defendTeam].lv_teamPlayerGroupNoNPCPlayers, false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesRed, libGame_gv_teams[lv_attackTeam].lv_teamPlayerGroupNoNPCPlayers, true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesRed, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesRed, libGame_gv_teams[lv_defendTeam].lv_teamPlayerGroupNoNPCPlayers, false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesLabelRed, libGame_gv_teams[lv_attackTeam].lv_teamPlayerGroupNoNPCPlayers, true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesLabelRed, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_CarriedAmmoCachesLabelRed, libGame_gv_teams[lv_defendTeam].lv_teamPlayerGroupNoNPCPlayers, false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusLabel2, libGame_gv_teams[lv_attackTeam].lv_teamPlayerGroupNoNPCPlayers, true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusLabel2, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusLabel2, libGame_gv_teams[lv_defendTeam].lv_teamPlayerGroupNoNPCPlayers, false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusLabel, libGame_gv_teams[lv_defendTeam].lv_teamPlayerGroupNoNPCPlayers, true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusLabel, libGame_gv_teams[lv_attackTeam].lv_teamPlayerGroupNoNPCPlayers, false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusLabel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
}

void libMDoE_gf_MDoEUIShowHideMainPanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_mainPanel, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_mainPanel, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libMDoE_gf_MDoEUIShowHideMainPanel3 (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libMDoE_gf_MDoEUIShowHideMainPanel2 (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_healthFrame, PlayerGroupAll(), lp_showHide);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_altarActiveBackgroundFrame, PlayerGroupAll(), lp_showHide);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_altarActiveBackgroundImage, PlayerGroupAll(), lp_showHide);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_altarActiveTimerLabel, PlayerGroupAll(), lp_showHide);
}

void libMDoE_gf_MDoEUISetAltarWarningTimer (int lp_progressUnit) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libMDoE_gv_MMTreasureVaultPanel.lv_altarWarningTimerLabel, TextTimeFormat(StringToText("<min2/>:<sec2/>"), lp_progressUnit), PlayerGroupAll());
}

void libMDoE_gf_MDoEUISetAltarActiveTimer (int lp_progressUnit) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libMDoE_gv_MMTreasureVaultPanel.lv_altarActiveTimerLabel, TextTimeFormat(StringToText("<min2/>:<sec2/>"), lp_progressUnit), PlayerGroupAll());
}

void libMDoE_gf_MDoEUIUpdateCannonballCount (int lp_count, int lp_count2) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_MDoE_E4E2D4B3", "A", IntToText(lp_count2));
    TextExpressionSetToken("Param/Expression/lib_MDoE_E4E2D4B3", "B", IntToText(3));
    libNtve_gf_SetDialogItemText(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusLabel, TextExpressionAssemble("Param/Expression/lib_MDoE_E4E2D4B3"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_MDoE_32AC6BBB", "A", IntToText(lp_count2));
    TextExpressionSetToken("Param/Expression/lib_MDoE_32AC6BBB", "B", IntToText(3));
    libNtve_gf_SetDialogItemText(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusLabel2, TextExpressionAssemble("Param/Expression/lib_MDoE_32AC6BBB"), PlayerGroupAll());
}

void libMDoE_gf_MDoEUIShowHideCannonBarrageUI (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_mainPanel2, PlayerGroupAll(), lp_showHide);
}

void libMDoE_gf_MDoEUISetCannonBarrageUIAllianceColors () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame2[1], libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false), true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame3[1], libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false), true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame4[1], libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false), true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame14[1], libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false), true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame15[1], libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false), true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame2[2], libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false), false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame3[2], libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false), false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame4[2], libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false), false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame14[2], libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false), false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame15[2], libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false), false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame6, libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false), true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame8, libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false), true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame5, libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false), false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame9, libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false), false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame2[2], libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false), true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame3[2], libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false), true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame4[2], libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false), true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame14[2], libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false), true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame15[2], libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false), true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame2[1], libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false), false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame3[1], libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false), false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame4[1], libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false), false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame14[1], libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false), false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame15[1], libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false), false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame6, libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false), false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame8, libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false), false);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame5, libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false), true);
    DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame9, libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false), true);
    TextExpressionSetToken("Param/Expression/lib_MDoE_73C3E2E8", "A", IntToText(5));
    libNtve_gf_SetDialogItemText(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame5, TextExpressionAssemble("Param/Expression/lib_MDoE_73C3E2E8"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_MDoE_131BB64C", "A", IntToText(5));
    libNtve_gf_SetDialogItemText(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame6, TextExpressionAssemble("Param/Expression/lib_MDoE_131BB64C"), PlayerGroupAll());
}

void libMDoE_gf_MDoEUIUpdateCannonBarrageShotsRemaining (int lp_count) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_MDoE_07F37BB9", "A", IntToText(lp_count));
    TextExpressionSetToken("Param/Expression/lib_MDoE_07F37BB9", "A", IntToText(lp_count));
    libNtve_gf_SetDialogItemText(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame5, TextExpressionAssemble("Param/Expression/lib_MDoE_07F37BB9"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_MDoE_1733C50B", "A", IntToText(lp_count));
    TextExpressionSetToken("Param/Expression/lib_MDoE_1733C50B", "A", IntToText(lp_count));
    libNtve_gf_SetDialogItemText(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame6, TextExpressionAssemble("Param/Expression/lib_MDoE_1733C50B"), PlayerGroupAll());
}

trigger auto_libMDoE_gf_MDoEUIShowHideCannonFiredFrame_Trigger = null;

void libMDoE_gf_MDoEUIShowHideCannonFiredFrame () {
    if (auto_libMDoE_gf_MDoEUIShowHideCannonFiredFrame_Trigger == null) {
        auto_libMDoE_gf_MDoEUIShowHideCannonFiredFrame_Trigger = TriggerCreate("auto_libMDoE_gf_MDoEUIShowHideCannonFiredFrame_TriggerFunc");
    }

    TriggerExecute(auto_libMDoE_gf_MDoEUIShowHideCannonFiredFrame_Trigger, false, false);
}

bool auto_libMDoE_gf_MDoEUIShowHideCannonFiredFrame_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialogItem;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;

    // Implementation
    DialogControlSendAnimationEvent(libMDoE_gv_mDoeUITopPanel.lv_topNotificationPanel, PlayerGroupAll(), "Fire");
    return true;
}

trigger auto_libMDoE_gf_MDoEUIShowHideBoatIsNotAttackableFrame_Trigger = null;
bool auto_libMDoE_gf_MDoEUIShowHideBoatIsNotAttackableFrame_lp_showHide;

void libMDoE_gf_MDoEUIShowHideBoatIsNotAttackableFrame (bool lp_showHide) {
    auto_libMDoE_gf_MDoEUIShowHideBoatIsNotAttackableFrame_lp_showHide = lp_showHide;

    if (auto_libMDoE_gf_MDoEUIShowHideBoatIsNotAttackableFrame_Trigger == null) {
        auto_libMDoE_gf_MDoEUIShowHideBoatIsNotAttackableFrame_Trigger = TriggerCreate("auto_libMDoE_gf_MDoEUIShowHideBoatIsNotAttackableFrame_TriggerFunc");
    }

    TriggerExecute(auto_libMDoE_gf_MDoEUIShowHideBoatIsNotAttackableFrame_Trigger, false, false);
}

bool auto_libMDoE_gf_MDoEUIShowHideBoatIsNotAttackableFrame_TriggerFunc (bool testConds, bool runActions) {
    bool lp_showHide = auto_libMDoE_gf_MDoEUIShowHideBoatIsNotAttackableFrame_lp_showHide;

    // Variable Declarations
    int lv_timerIncrement;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_showHide == true)) {
        DialogControlSendAnimationEvent(libMDoE_gv_MMTreasureVaultPanel.lv_boatNotificationFrame, PlayerGroupAll(), "Show");
        while ((lv_timerIncrement < 10)) {
            TextExpressionSetToken("Param/Expression/lib_MDoE_033CB666", "A", IntToText((10 - lv_timerIncrement)));
            libNtve_gf_SetDialogItemText(libMDoE_gv_MMTreasureVaultPanel.lv_boatNotificationLabel, TextExpressionAssemble("Param/Expression/lib_MDoE_033CB666"), PlayerGroupAll());
            Wait(1.0, c_timeGame);
            lv_timerIncrement += 1;
        }
        libNtve_gf_SetDialogItemText(libMDoE_gv_MMTreasureVaultPanel.lv_boatNotificationLabel, TextExpressionAssemble("Param/Expression/lib_MDoE_43A46B2F"), PlayerGroupAll());
        Wait(1.0, c_timeGame);
        DialogControlSendAnimationEvent(libMDoE_gv_MMTreasureVaultPanel.lv_boatNotificationFrame, PlayerGroupAll(), "Hide");
    }
    else {
        DialogControlSendAnimationEvent(libMDoE_gv_MMTreasureVaultPanel.lv_boatNotificationFrame, PlayerGroupAll(), "Hide");
    }
    return true;
}

trigger auto_libMDoE_gf_MDoEUIShowHideBoatAttackingCore_Trigger = null;
bool auto_libMDoE_gf_MDoEUIShowHideBoatAttackingCore_lp_showHide;

void libMDoE_gf_MDoEUIShowHideBoatAttackingCore (bool lp_showHide) {
    auto_libMDoE_gf_MDoEUIShowHideBoatAttackingCore_lp_showHide = lp_showHide;

    if (auto_libMDoE_gf_MDoEUIShowHideBoatAttackingCore_Trigger == null) {
        auto_libMDoE_gf_MDoEUIShowHideBoatAttackingCore_Trigger = TriggerCreate("auto_libMDoE_gf_MDoEUIShowHideBoatAttackingCore_TriggerFunc");
    }

    TriggerExecute(auto_libMDoE_gf_MDoEUIShowHideBoatAttackingCore_Trigger, false, false);
}

bool auto_libMDoE_gf_MDoEUIShowHideBoatAttackingCore_TriggerFunc (bool testConds, bool runActions) {
    bool lp_showHide = auto_libMDoE_gf_MDoEUIShowHideBoatAttackingCore_lp_showHide;

    // Variable Declarations
    int lv_timerIncrement;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_showHide == true)) {
        libNtve_gf_SetDialogItemText(libMDoE_gv_MMTreasureVaultPanel.lv_boatNotificationLabel, TextExpressionAssemble("Param/Expression/lib_MDoE_1625E4E8"), PlayerGroupAll());
        DialogControlSendAnimationEvent(libMDoE_gv_MMTreasureVaultPanel.lv_boatNotificationFrame, PlayerGroupAll(), "Show");
    }
    else {
        DialogControlSendAnimationEvent(libMDoE_gv_MMTreasureVaultPanel.lv_boatNotificationFrame, PlayerGroupAll(), "Hide");
    }
    return true;
}

void libMDoE_gf_DoEsUIUpdateCoreHealth () {
    // Variable Declarations
    int lv_damage;
    int lv_healthMax;
    int lv_itTeam;

    // Automatic Variable Declarations
    const int autoBB379FED_ae = libCore_gv_bALMaxTeams;
    const int autoBB379FED_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itTeam = 1;
    for ( ; ( (autoBB379FED_ai >= 0 && lv_itTeam <= autoBB379FED_ae) || (autoBB379FED_ai < 0 && lv_itTeam >= autoBB379FED_ae) ) ; lv_itTeam += autoBB379FED_ai ) {
        if ((libAtDe_gv_attackDefend.lv_attackingTeam == lv_itTeam)) {
            lv_healthMax = FixedToInt(UnitGetPropertyFixed(libGame_gv_teams[lv_itTeam].lv_core, c_unitPropLife, c_unitPropNormal));
            lv_damage = (lv_healthMax - FixedToInt(UnitGetPropertyFixed(libGame_gv_teams[lv_itTeam].lv_core, c_unitPropLife, c_unitPropCurrent)));
            libNtve_gf_SetDialogItemText(libMDoE_gv_mDoeUITopPanel.lv_coreHealthLabel[lv_itTeam], IntToText(libAtDe_gv_attackDefend.lv_score[libAtDe_gv_attackDefend.lv_defendingTeam]), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libMDoE_gv_mDoeUITopPanel.lv_coreHealthLabelObs[lv_itTeam], IntToText(libAtDe_gv_attackDefend.lv_score[libAtDe_gv_attackDefend.lv_defendingTeam]), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libMDoE_gv_mDoeUITopPanel.lv_shotsFiredPanel[libAtDe_gv_attackDefend.lv_defendingTeam], IntToText(libAtDe_gv_attackDefend.lv_score[libAtDe_gv_attackDefend.lv_defendingTeam]), PlayerGroupAll());
            libMDoE_gv_mDoE_Boat[lv_itTeam].lv_life = UnitGetPropertyFixed(libGame_gv_teams[lv_itTeam].lv_core, c_unitPropLife, c_unitPropCurrent);
            DialogControlSetAnimationState(libMDoE_gv_mDoeUITopPanel.lv_scorePanel, PlayerGroupAll(), "ShipDamage", IntToString(libAtDe_gv_attackDefend.lv_score[libAtDe_gv_attackDefend.lv_defendingTeam]));
        }

    }
}

void libMDoE_gf_MDoE_UIUpdateShipProgress (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    if ((libMDoE_gv_mDoE_Has50PercentProgressAudioPlayed == false) && (TimerGetElapsed(libMDoE_gv_mDoE_Boat[lp_team].lv_boatProgressTimer) >= (libMDoE_gv_mDoE_TimeForBoatToSucceed * 0.5))) {
        libMDoE_gf_MDoETransmissionBoatProgress50();
        libMDoE_gv_mDoE_Has50PercentProgressAudioPlayed = true;
    }

    if ((libMDoE_gv_mDoE_Has75PercentProgressAudioPlayed == false) && (TimerGetElapsed(libMDoE_gv_mDoE_Boat[lp_team].lv_boatProgressTimer) >= (libMDoE_gv_mDoE_TimeForBoatToSucceed * 0.75))) {
        libMDoE_gf_MDoETransmissionBoatProgress75();
        libMDoE_gv_mDoE_Has75PercentProgressAudioPlayed = true;
    }

    libNtve_gf_SetDialogItemText(libMDoE_gv_mDoeUITopPanel.lv_boatProgressLabel[lp_team], FixedToText((100.0 * libMDoE_gv_mDoE_Boat[lp_team].lv_progress), 0), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(libMDoE_gv_mDoeUITopPanel.lv_boatProgressBar[lp_team], libMDoE_gv_mDoE_Boat[lp_team].lv_progress, PlayerGroupAll());
}

int libMDoE_gf_GetShotstoWin (int lp_itTeam) {
    // Automatic Variable Declarations
    // Implementation
    return MinI(FixedToInt((libAtDe_gv_attackDefend.lv_score[lp_itTeam] + 1)), 5);
}

void libMDoE_gf_MDoEUIUpdateCannonBarrageShotsRemaining2 () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libMDoE_gv_mDoeUITopPanel.lv_boatIcon, GameAttributePlayersForTeam(libAtDe_gv_attackDefend.lv_attackingTeam), true);
    DialogControlSetVisible(libMDoE_gv_mDoeUITopPanel.lv_boatIcon, GameAttributePlayersForTeam(libAtDe_gv_attackDefend.lv_defendingTeam), false);
    DialogControlSetVisible(libMDoE_gv_mDoeUITopPanel.lv_cannonballIcon, GameAttributePlayersForTeam(libAtDe_gv_attackDefend.lv_defendingTeam), true);
    DialogControlSetVisible(libMDoE_gv_mDoeUITopPanel.lv_cannonballIcon, GameAttributePlayersForTeam(libAtDe_gv_attackDefend.lv_attackingTeam), false);
}

trigger auto_libMDoE_gf_MDoETransmissionBoatHealth80_Trigger = null;

void libMDoE_gf_MDoETransmissionBoatHealth80 () {
    if (auto_libMDoE_gf_MDoETransmissionBoatHealth80_Trigger == null) {
        auto_libMDoE_gf_MDoETransmissionBoatHealth80_Trigger = TriggerCreate("auto_libMDoE_gf_MDoETransmissionBoatHealth80_TriggerFunc");
    }

    TriggerExecute(auto_libMDoE_gf_MDoETransmissionBoatHealth80_Trigger, false, false);
}

bool auto_libMDoE_gf_MDoETransmissionBoatHealth80_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = PlayerGroupEmpty();
    lv_groupDefenders = PlayerGroupEmpty();
    lv_groupObserver = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Docks - Boat Under Attack", "Value", 1, 1);
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("ArenaVO", ("Left"), lv_groupAttackers);
    ConversationDataLineSetPlayers("ArenaVO", ("Right"), lv_groupDefenders);
    ConversationDataLineSetPlayers("ArenaVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMDoE_gf_MDoETransmissionBoatHealth60_Trigger = null;

void libMDoE_gf_MDoETransmissionBoatHealth60 () {
    if (auto_libMDoE_gf_MDoETransmissionBoatHealth60_Trigger == null) {
        auto_libMDoE_gf_MDoETransmissionBoatHealth60_Trigger = TriggerCreate("auto_libMDoE_gf_MDoETransmissionBoatHealth60_TriggerFunc");
    }

    TriggerExecute(auto_libMDoE_gf_MDoETransmissionBoatHealth60_Trigger, false, false);
}

bool auto_libMDoE_gf_MDoETransmissionBoatHealth60_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = PlayerGroupEmpty();
    lv_groupDefenders = PlayerGroupEmpty();
    lv_groupObserver = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Docks - Boat 60% Life", "Value", 1, 1);
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("ArenaVO", ("Left"), lv_groupAttackers);
    ConversationDataLineSetPlayers("ArenaVO", ("Right"), lv_groupDefenders);
    ConversationDataLineSetPlayers("ArenaVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMDoE_gf_MDoETransmissionBoatHealth40_Trigger = null;

void libMDoE_gf_MDoETransmissionBoatHealth40 () {
    if (auto_libMDoE_gf_MDoETransmissionBoatHealth40_Trigger == null) {
        auto_libMDoE_gf_MDoETransmissionBoatHealth40_Trigger = TriggerCreate("auto_libMDoE_gf_MDoETransmissionBoatHealth40_TriggerFunc");
    }

    TriggerExecute(auto_libMDoE_gf_MDoETransmissionBoatHealth40_Trigger, false, false);
}

bool auto_libMDoE_gf_MDoETransmissionBoatHealth40_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = PlayerGroupEmpty();
    lv_groupDefenders = PlayerGroupEmpty();
    lv_groupObserver = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Docks - Boat 40% Life", "Value", 1, 1);
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("ArenaVO", ("Left"), lv_groupAttackers);
    ConversationDataLineSetPlayers("ArenaVO", ("Right"), lv_groupDefenders);
    ConversationDataLineSetPlayers("ArenaVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMDoE_gf_MDoETransmissionBoatHealth20_Trigger = null;

void libMDoE_gf_MDoETransmissionBoatHealth20 () {
    if (auto_libMDoE_gf_MDoETransmissionBoatHealth20_Trigger == null) {
        auto_libMDoE_gf_MDoETransmissionBoatHealth20_Trigger = TriggerCreate("auto_libMDoE_gf_MDoETransmissionBoatHealth20_TriggerFunc");
    }

    TriggerExecute(auto_libMDoE_gf_MDoETransmissionBoatHealth20_Trigger, false, false);
}

bool auto_libMDoE_gf_MDoETransmissionBoatHealth20_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = PlayerGroupEmpty();
    lv_groupDefenders = PlayerGroupEmpty();
    lv_groupObserver = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Docks - Boat 20% Life", "Value", 1, 1);
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("ArenaVO", ("Left"), lv_groupAttackers);
    ConversationDataLineSetPlayers("ArenaVO", ("Right"), lv_groupDefenders);
    ConversationDataLineSetPlayers("ArenaVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMDoE_gf_MDoETransmissionBoatProgress50_Trigger = null;

void libMDoE_gf_MDoETransmissionBoatProgress50 () {
    if (auto_libMDoE_gf_MDoETransmissionBoatProgress50_Trigger == null) {
        auto_libMDoE_gf_MDoETransmissionBoatProgress50_Trigger = TriggerCreate("auto_libMDoE_gf_MDoETransmissionBoatProgress50_TriggerFunc");
    }

    TriggerExecute(auto_libMDoE_gf_MDoETransmissionBoatProgress50_Trigger, false, false);
}

bool auto_libMDoE_gf_MDoETransmissionBoatProgress50_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = PlayerGroupEmpty();
    lv_groupDefenders = PlayerGroupEmpty();
    lv_groupObserver = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Docks - Boat 50% Progress", "Value", 1, 1);
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("ArenaVO", ("Left"), lv_groupAttackers);
    ConversationDataLineSetPlayers("ArenaVO", ("Right"), lv_groupDefenders);
    ConversationDataLineSetPlayers("ArenaVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMDoE_gf_MDoETransmissionBoatProgress75_Trigger = null;

void libMDoE_gf_MDoETransmissionBoatProgress75 () {
    if (auto_libMDoE_gf_MDoETransmissionBoatProgress75_Trigger == null) {
        auto_libMDoE_gf_MDoETransmissionBoatProgress75_Trigger = TriggerCreate("auto_libMDoE_gf_MDoETransmissionBoatProgress75_TriggerFunc");
    }

    TriggerExecute(auto_libMDoE_gf_MDoETransmissionBoatProgress75_Trigger, false, false);
}

bool auto_libMDoE_gf_MDoETransmissionBoatProgress75_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = PlayerGroupEmpty();
    lv_groupDefenders = PlayerGroupEmpty();
    lv_groupObserver = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Docks - Boat 75% Progress", "Value", 1, 1);
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("ArenaVO", ("Left"), lv_groupAttackers);
    ConversationDataLineSetPlayers("ArenaVO", ("Right"), lv_groupDefenders);
    ConversationDataLineSetPlayers("ArenaVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMDoE_gf_MDoETransmissionBoatProgress100_Trigger = null;

void libMDoE_gf_MDoETransmissionBoatProgress100 () {
    if (auto_libMDoE_gf_MDoETransmissionBoatProgress100_Trigger == null) {
        auto_libMDoE_gf_MDoETransmissionBoatProgress100_Trigger = TriggerCreate("auto_libMDoE_gf_MDoETransmissionBoatProgress100_TriggerFunc");
    }

    TriggerExecute(auto_libMDoE_gf_MDoETransmissionBoatProgress100_Trigger, false, false);
}

bool auto_libMDoE_gf_MDoETransmissionBoatProgress100_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = PlayerGroupEmpty();
    lv_groupDefenders = PlayerGroupEmpty();
    lv_groupObserver = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("ArenaVO", ("Left"));
    ConversationDataLineResetPlayers("ArenaVO", ("Right"));
    ConversationDataLineResetPlayers("ArenaVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Docks - Core Attack", "Value", 1, 1);
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("ArenaVO", ("Left"), lv_groupAttackers);
    ConversationDataLineSetPlayers("ArenaVO", ("Right"), lv_groupDefenders);
    ConversationDataLineSetPlayers("ArenaVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("ArenaVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include Docks Escort
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_IncludeDocksEscort_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_IncludeDocksEscort_Init () {
    libMDoE_gt_IncludeDocksEscort = TriggerCreate("libMDoE_gt_IncludeDocksEscort_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MDoE Init
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_MDoEInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gf_MapMechanicInitializationMechanicType() == libMDoE_gv_mDoE_MechanicName_C))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libMDoE_gt_DoEsCannonballHandedIn, true);
    TriggerEnable(libMDoE_gt_DoEsHeroLootsAmmoCacher, true);
    TriggerEnable(libMDoE_gt_DoEsHeroPicksUpCannonball, true);
    TriggerEnable(libMDoE_gt_HeroDiesWithCannonball, true);
    TriggerEnable(libGame_gt_TowerCoreHasTakenDamage, false);
    TriggerEnable(libGame_gt_CoreDiesGameOver, false);
    libGame_gv_afk_UseBrawlAFKSystem = true;
    libCore_gv_sYSGameMode = libCore_ge_GameModes_AttackDefend;
    libGame_gv_towerMapPlaysCoreWarning = false;
    libAREN_gv_aRM_PlayCrowdCheerSounds = false;
    libGame_gf_DisableEndofMatchAwards();
    libMDoE_gf_InitializeGameStartPathingBlockerLocations();
    libAtDe_gf_AtDe_UI_TeamScoreInit();
    libAtDe_gf_AttackDefendGameStarts();
    if ((libGame_gv_heroSpawnReady == true)) {
        CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    }

    TriggerExecute(libMDoE_gt_DoEsUICoreHealthInitialize, true, false);
    TriggerExecute(libMDoE_gt_MDoEInitPingData, true, false);
    ActorSendAsText(libNtve_gf_MainActorofUnit(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core), StringExternal("Param/Value/lib_MDoE_0D0544BF"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_MDoEInit_Init () {
    libMDoE_gt_MDoEInit = TriggerCreate("libMDoE_gt_MDoEInit_Func");
    libGame_gf_MapMechanicInitialization(libMDoE_gt_MDoEInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MDoE_Init Tower & Cannon Goals
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_MDoE_InitTowerCannonGoals_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tower;
    unit lv_cannon;

    // Automatic Variable Declarations
    unitgroup autoFE45C5E0_g;
    int autoFE45C5E0_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoFE45C5E0_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterTower), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFE45C5E0_u = UnitGroupCount(autoFE45C5E0_g, c_unitCountAll);
    for (;; autoFE45C5E0_u -= 1) {
        lv_tower = UnitGroupUnitFromEnd(autoFE45C5E0_g, autoFE45C5E0_u);
        if (lv_tower == null) { break; }
        AITrackUnitDanger(lv_tower);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_MDoE_InitTowerCannonGoals_Init () {
    libMDoE_gt_MDoE_InitTowerCannonGoals = TriggerCreate("libMDoE_gt_MDoE_InitTowerCannonGoals_Func");
    TriggerAddEventTimer(libMDoE_gt_MDoE_InitTowerCannonGoals, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MDoE_Add Intercept Goal to Heroes Leaving Safe Zone
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_MDoE_AddInterceptGoaltoHeroesLeavingSafeZone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "MapMechanicStack") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AddUnitOfInterest(EventUnit(), 0.0, 0.0, "InterceptCannonball", libNtve_ge_GoalTeam_Both, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_MDoE_AddInterceptGoaltoHeroesLeavingSafeZone_Init () {
    libMDoE_gt_MDoE_AddInterceptGoaltoHeroesLeavingSafeZone = TriggerCreate("libMDoE_gt_MDoE_AddInterceptGoaltoHeroesLeavingSafeZone_Func");
    TriggerAddEventUnitBehaviorChange(libMDoE_gt_MDoE_AddInterceptGoaltoHeroesLeavingSafeZone, null, "HallOfStormsProtectionBuff", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MDoE_Remove Intercept Goal from Heroes in Safe Zone
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_MDoE_RemoveInterceptGoalfromHeroesinSafeZone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "MapMechanicStack") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    RemoveUnitOfInterest(EventUnit(), "InterceptCannonball", libNtve_ge_GoalTeam_Both);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_MDoE_RemoveInterceptGoalfromHeroesinSafeZone_Init () {
    libMDoE_gt_MDoE_RemoveInterceptGoalfromHeroesinSafeZone = TriggerCreate("libMDoE_gt_MDoE_RemoveInterceptGoalfromHeroesinSafeZone_Func");
    TriggerAddEventUnitBehaviorChange(libMDoE_gt_MDoE_RemoveInterceptGoalfromHeroesinSafeZone, null, "HallOfStormsProtectionBuff", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MDoE Init Ping Data
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_MDoEInitPingData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_PingCreateNewPingTarget("Cannon", false, null, StringExternal("Param/Value/lib_MDoE_DB722D39"), StringExternal("Param/Value/lib_MDoE_D617483F"), SoundLink("UI_Game_Ping_Help", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingCreateNewPingTarget("AmmoCache", false, null, StringExternal("Param/Value/lib_MDoE_B648E7E4"), StringExternal("Param/Value/lib_MDoE_43D29955"), SoundLink("UI_Game_Ping_Help", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingCreateNewPingTarget("Boat", false, StringExternal("Param/Value/lib_MDoE_EE13DE5E"), StringExternal("Param/Value/lib_MDoE_B3CC932D"), StringExternal("Param/Value/lib_MDoE_A1048A17"), SoundLink("UI_Game_Ping_Defend", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetAllyEnemyTargetHeroVOForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libCore_ge_HeroVOEvents_Null, libCore_ge_HeroVOEvents_Null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_MDoEInitPingData_Init () {
    libMDoE_gt_MDoEInitPingData = TriggerCreate("libMDoE_gt_MDoEInitPingData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Open The Gates Timer Starts
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_InitialOpenTheGatesTimerStarts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lifeTotal;

    // Automatic Variable Declarations
    unitgroup autoCEC9577C_g;
    int autoCEC9577C_u;
    unit autoCEC9577C_var;

    // Variable Initialization
    lv_lifeTotal = libAtDe_gv_attackDefend.lv_defendingTeam;

    // Actions
    if (!runActions) {
        return true;
    }

    libMDoE_gf_AddRemoveStagingGoals(true, libAtDe_gv_attackDefend.lv_attackingTeam);
    libGame_gv_gameOver = false;
    UnitPauseAll(false);
    libMDoE_gv_mDoE_AmmoCache.lv_playersWhoHaveNotPickedUpAmmo = PlayerGroupCopy(libGame_gv_teams[libAtDe_gv_attackDefend.lv_defendingTeam].lv_teamPlayerGroupNoNPCPlayers);
    libMDoE_gv_mDoE_Cannons.lv_playersWhoHaveNotTurnedInAmmo = PlayerGroupCopy(libGame_gv_teams[libAtDe_gv_attackDefend.lv_defendingTeam].lv_teamPlayerGroupNoNPCPlayers);
    libGame_gf_AFKBrawlTurnDetectionTriggersOnOff(true);
    if ((libAtDe_gv_attackDefend.lv_currentRound == 1)) {
        UnitSetPropertyFixed(libGame_gv_teams[libAtDe_gv_attackDefend.lv_attackingTeam].lv_core, c_unitPropLifeMax, 5.0);
        UnitSetPropertyFixed(libGame_gv_teams[libAtDe_gv_attackDefend.lv_attackingTeam].lv_core, c_unitPropLife, 5.0);
    }
    else {
        UnitSetPropertyFixed(libGame_gv_teams[libAtDe_gv_attackDefend.lv_attackingTeam].lv_core, c_unitPropLife, IntToFixed(libMDoE_gf_GetShotstoWin(libAtDe_gv_attackDefend.lv_attackingTeam)));
    }
    libMDoE_gf_InitializeAllCannonTextTags();
    autoCEC9577C_g = libMDoE_gv_mDoE_Cannons.lv_cannonUnitGroup1;
    autoCEC9577C_u = UnitGroupCount(autoCEC9577C_g, c_unitCountAll);
    for (;; autoCEC9577C_u -= 1) {
        autoCEC9577C_var = UnitGroupUnitFromEnd(autoCEC9577C_g, autoCEC9577C_u);
        if (autoCEC9577C_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoCEC9577C_var, "Signal OpenTheGatesTimerStarted");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_InitialOpenTheGatesTimerStarts_Init () {
    libMDoE_gt_InitialOpenTheGatesTimerStarts = TriggerCreate("libMDoE_gt_InitialOpenTheGatesTimerStarts_Func");
    libGame_gf_GameOpenTimerStarted(libMDoE_gt_InitialOpenTheGatesTimerStarts);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open The Game Timer Expires
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_OpenTheGameTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libMDoE_gf_BoatMovingLogic(libAtDe_gv_attackDefend.lv_attackingTeam);
    libMDoE_gf_MDoESpawnInitialAmmoCaches(libAtDe_gv_attackDefend.lv_defendingTeam);
    libNtve_gf_SendActorMessageToUnit(libGame_gv_teams[libAtDe_gv_attackDefend.lv_attackingTeam].lv_core, "Signal BoatMoveStart");
    Wait(3.0, c_timeGame);
    libMDoE_gf_PingAllActiveCannonsForAllPlayers();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_OpenTheGameTimerExpires_Init () {
    libMDoE_gt_OpenTheGameTimerExpires = TriggerCreate("libMDoE_gt_OpenTheGameTimerExpires_Func");
    TriggerAddEventTimer(libMDoE_gt_OpenTheGameTimerExpires, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Round Ends
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_RoundEnds_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libMDoE_gt_SpawnNewAmmoCache);
    TriggerExecute(libMDoE_gt_RoundEndsClearAmmo, true, false);
    TriggerExecute(libMDoE_gt_RoundEndsChangeTopBar, true, false);
    libAIAI_gf_HeroAICleanupAllAIData();
    libMDoE_gf_MDoEUISwapCannonballFrameAlliance();
    libMDoE_gf_MDoEResetCannonSetup();
    libAtDe_gf_DisplayTeamInstructionsForTeams();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_RoundEnds_Init () {
    libMDoE_gt_RoundEnds = TriggerCreate("libMDoE_gt_RoundEnds_Func");
    libAtDe_gf_AttackDefendRoundResetOccurring(libMDoE_gt_RoundEnds);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core Dies
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_CoreDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_heroUnit;
    int lv_player;

    // Automatic Variable Declarations
    const int autoA480C875_ae = libCore_gv_bALMaxPlayers;
    const int autoA480C875_ai = 1;
    playergroup auto981EA4B9_g;
    int auto981EA4B9_var;
    unitgroup auto226F9102_g;
    int auto226F9102_u;
    unit auto226F9102_var;
    playergroup autoE2F8DB5E_g;
    int autoE2F8DB5E_var;
    playergroup autoD01FF052_g;
    int autoD01FF052_var;
    playergroup auto6DFE6170_g;
    int auto6DFE6170_var;
    const int auto49FF86F0_ae = libCore_gv_bALMaxPlayers;
    const int auto49FF86F0_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_gameOver = true;
    libGame_gf_SendEventClearHeroSpecificUI();
    libMDoE_gf_AddRemoveStagingGoals(false, libAtDe_gv_attackDefend.lv_attackingTeam);
    lv_player = 1;
    for ( ; ( (autoA480C875_ai >= 0 && lv_player <= autoA480C875_ae) || (autoA480C875_ai < 0 && lv_player >= autoA480C875_ae) ) ; lv_player += autoA480C875_ai ) {
        libAREN_gf_ARM_ClearHeroDeathEffect(lv_player);
        libUIUI_gf_FullscreenOverlayStopandClearCutsceneQueueForPlayer(lv_player);
    }
    libGame_gf_AfkStopAfkWarningSystem();
    if ((UnitGetPropertyFixed(libGame_gv_teams[libAtDe_gv_attackDefend.lv_attackingTeam].lv_core, c_unitPropLife, c_unitPropCurrent) > 0.0)) {
        libAtDe_gv_attackDefend.lv_lastWinningTeam = libAtDe_gv_attackDefend.lv_attackingTeam;
    }
    else {
        libAtDe_gv_attackDefend.lv_lastWinningTeam = libAtDe_gv_attackDefend.lv_defendingTeam;
    }
    UnitPauseAll(true);
    libNtve_gf_StopTimer(libMDoE_gv_mDoE_Boat[libAtDe_gv_attackDefend.lv_attackingTeam].lv_boatAttackCoreTimer);
    libNtve_gf_StopTimer(libMDoE_gv_mDoE_Boat[libAtDe_gv_attackDefend.lv_attackingTeam].lv_boatProgressTimer);
    auto981EA4B9_g = PlayerGroupAll();
    auto981EA4B9_var = -1;
    while (true) {
        	auto981EA4B9_var = PlayerGroupNextPlayer(auto981EA4B9_g, auto981EA4B9_var);
        	if (auto981EA4B9_var<0) { break; }
        	DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage, libCore_gv_playerGroupFromPlayer[auto981EA4B9_var], 0.0, 100.0);
        DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage, libCore_gv_playerGroupFromPlayer[auto981EA4B9_var], 0.0, 100.0);
        DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lowHealthPersistentImage, libCore_gv_playerGroupFromPlayer[auto981EA4B9_var], 0.0, 100.0);
        auto226F9102_g = libGame_gv_players[auto981EA4B9_var].lv_heroUnitGroup;
        auto226F9102_u = UnitGroupCount(auto226F9102_g, c_unitCountAll);
        for (;; auto226F9102_u -= 1) {
            auto226F9102_var = UnitGroupUnitFromEnd(auto226F9102_g, auto226F9102_u);
            if (auto226F9102_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto226F9102_var, "SetShowStatusBar");
        }
    }
    autoE2F8DB5E_g = PlayerGroupAll();
    autoE2F8DB5E_var = -1;
    while (true) {
        	autoE2F8DB5E_var = PlayerGroupNextPlayer(autoE2F8DB5E_g, autoE2F8DB5E_var);
        	if (autoE2F8DB5E_var<0) { break; }
        	CameraLockInput(autoE2F8DB5E_var, true);
        PlayerOptionOverride(autoE2F8DB5E_var, "camerafollow", "0");
    }
    Wait(0.0625, c_timeGame);
    autoD01FF052_g = PlayerGroupAll();
    autoD01FF052_var = -1;
    while (true) {
        	autoD01FF052_var = PlayerGroupNextPlayer(autoD01FF052_g, autoD01FF052_var);
        	if (autoD01FF052_var<0) { break; }
        	CameraFollowUnitGroup(autoD01FF052_var, CameraFollowUnitGroupGet(autoD01FF052_var), false, false);
        libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(autoD01FF052_var, UnitGetPosition(EventUnit()), libGame_gv_gameOver_CameraPanTime_C, -1, 10, false);
    }
    Wait(2.0, c_timeGame);
    auto6DFE6170_g = PlayerGroupActive();
    auto6DFE6170_var = -1;
    while (true) {
        	auto6DFE6170_var = PlayerGroupNextPlayer(auto6DFE6170_g, auto6DFE6170_var);
        	if (auto6DFE6170_var<0) { break; }
        	libUIUI_gf_UIHeroConsoleShowHideForPlayer(false, auto6DFE6170_var);
        UISetMode(libCore_gv_playerGroupFromPlayer[auto6DFE6170_var], c_uiModeFullscreen, c_transitionDurationImmediate);
        DialogControlSetVisible(libUIUI_gv_uIGameUIHandles.lv_talentsButton, libCore_gv_playerGroupFromPlayer[auto6DFE6170_var], false);
        UISetFrameVisible(libCore_gv_playerGroupFromPlayer[auto6DFE6170_var], c_syncFrameTypeMinimapPanel, false);
        libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer(false, auto6DFE6170_var);
        libUIUI_gf_UIGameUIShowHideConsolePanelForPlayer(false, auto6DFE6170_var);
        libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(true, auto6DFE6170_var);
        DialogControlSetVisible(libMDoE_gv_mDoeUITopPanel.lv_topNotificationPanel, PlayerGroupAll(), false);
    }
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeGame);
    lv_player = 1;
    for ( ; ( (auto49FF86F0_ai >= 0 && lv_player <= auto49FF86F0_ae) || (auto49FF86F0_ai < 0 && lv_player >= auto49FF86F0_ae) ) ; lv_player += auto49FF86F0_ai ) {
        libAtDe_gf_RoundEndsClearHeroForPlayer(lv_player);
    }
    if ((libAtDe_gv_attackDefend.lv_currentRound == 1)) {
        TextExpressionSetToken("Param/Expression/lib_MDoE_4371428F", "A", IntToText(libAtDe_gv_attackDefend.lv_currentRound));
        libGame_gf_AnnouncementAddItemForPlayerGroup(PlayerGroupAll(), libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Null, "ShowStandardNotification", TextExpressionAssemble("Param/Expression/lib_MDoE_4371428F"), null, null, null, null, 1.5, false);
    }
    else {
        libGame_gf_AnnouncementAddItemForPlayerGroup(PlayerGroupAll(), libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Null, "ShowStandardNotification", TextExpressionAssemble("Param/Expression/lib_MDoE_D9B10B91"), null, null, null, null, 1.5, false);
    }
    Wait(2.0, c_timeGame);
    if ((UnitGetPropertyFixed(libGame_gv_teams[libAtDe_gv_attackDefend.lv_attackingTeam].lv_core, c_unitPropLife, c_unitPropCurrent) > 0.0)) {
        libMDoE_gv_victoryScore[libAtDe_gv_attackDefend.lv_attackingTeam] += 1;
    }

    TextExpressionSetToken("Param/Expression/lib_MDoE_B96ABD99", "A", IntToText(libAtDe_gv_attackDefend.lv_score[libGame_gv_teamOrderIndex_C]));
    TextExpressionSetToken("Param/Expression/lib_MDoE_B96ABD99", "B", IntToText(libAtDe_gv_attackDefend.lv_score[libGame_gv_teamChaosIndex_C]));
    libGame_gf_AnnouncementAddItemForPlayerGroup(PlayerGroupAll(), libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Null, "ShowStandardNotification", TextExpressionAssemble("Param/Expression/lib_MDoE_B96ABD99"), null, null, null, null, 4.0, false);
    Wait(4.0, c_timeGame);
    if ((libAtDe_gv_attackDefend.lv_currentRound == 1)) {
        libGame_gv_heroSpawnReady = false;
        libIGHS_gf_ReshuffleHeroPicksAndShowShuffleUI();
        libMDoE_gf_ReplaceGameStartPathingBlockers();
        while (!((libGame_gv_heroSpawnReady == true))) {
            Wait(0.0625, c_timeGame);
        }
    }

    libAtDe_gf_SendEventAttackDefendRoundEnds(FixedToInt(UnitGetPropertyFixed(libGame_gv_teams[libAtDe_gv_attackDefend.lv_attackingTeam].lv_core, c_unitPropLife, c_unitPropCurrent)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_CoreDies_Init () {
    libMDoE_gt_CoreDies = TriggerCreate("libMDoE_gt_CoreDies_Func");
    TriggerAddEventUnitDied(libMDoE_gt_CoreDies, UnitRefFromVariable("libGame_gv_teams[1].lv_core"));
    TriggerAddEventUnitDied(libMDoE_gt_CoreDies, UnitRefFromVariable("libGame_gv_teams[2].lv_core"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teams Updated
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_TeamsUpdated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_DataAnnouncerVOSetDefaultAnnouncerForPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false), "Blackheart");
    libCore_gf_DataAnnouncerVOSetDefaultAnnouncerForPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false), "CommodoreFord");
    if ((libGame_gv_teamOrderIndex_C == libAtDe_gv_attackDefend.lv_attackingTeam)) {
        libCore_gf_DataAnnouncerVOSetDefaultAnnouncerForPlayerGroup(PlayerGroupSingle(libCore_gv_oBSERVER_ObserverUIPlayer), "Blackheart");
    }
    else {
        libCore_gf_DataAnnouncerVOSetDefaultAnnouncerForPlayerGroup(PlayerGroupSingle(libCore_gv_oBSERVER_ObserverUIPlayer), "CommodoreFord");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_TeamsUpdated_Init () {
    libMDoE_gt_TeamsUpdated = TriggerCreate("libMDoE_gt_TeamsUpdated_Func");
    libAtDe_gf_AttackDefendTeamsUpdated(libMDoE_gt_TeamsUpdated);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boat Attack Timer Expires
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_BoatAttackTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_teams[libAtDe_gv_attackDefend.lv_attackingTeam].lv_core, "AttackCoreCreatePersistent", libGame_gv_teams[libAtDe_gv_attackDefend.lv_defendingTeam].lv_core);
    libMDoE_gf_AttackCore();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_BoatAttackTimerExpires_Init () {
    libMDoE_gt_BoatAttackTimerExpires = TriggerCreate("libMDoE_gt_BoatAttackTimerExpires_Func");
    TriggerAddEventTimer(libMDoE_gt_BoatAttackTimerExpires, libMDoE_gv_mDoE_Boat[1].lv_boatAttackCoreTimer);
    TriggerAddEventTimer(libMDoE_gt_BoatAttackTimerExpires, libMDoE_gv_mDoE_Boat[2].lv_boatAttackCoreTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MDoE_Play Boat Submerge Anims
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_MDoE_PlayBoatSubmergeAnims_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_unsubmergeDelayTime_C = 18.5;
    const fixed lv_showCaptainDelayTime_C = 2.75;
    unit lv_boatUnit;
    int lv_boatOwner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_boatUnit = libGame_gv_teams[libAtDe_gv_attackDefend.lv_attackingTeam].lv_core;
    lv_boatOwner = libAtDe_gv_attackDefend.lv_attackingTeam;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(lv_boatUnit, "Signal BoatSubmerged");
    UnitBehaviorAdd(lv_boatUnit, "BoatSubmergedBehavior", lv_boatUnit, 1);
    Wait(lv_unsubmergeDelayTime_C, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(lv_boatUnit, "Signal BoatAfloat");
    UnitBehaviorRemove(lv_boatUnit, "BoatSubmergedBehavior", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_MDoE_PlayBoatSubmergeAnims_Init () {
    libMDoE_gt_MDoE_PlayBoatSubmergeAnims = TriggerCreate("libMDoE_gt_MDoE_PlayBoatSubmergeAnims_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Core Tracker
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_AttackCoreTracker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoD755BC4E_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD755BC4E_val = libMDoE_gv_mDoE_LaunchNumber;
    if (autoD755BC4E_val == 1.0) {
        DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame2[1], PlayerGroupAll(), false);
        DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame2[2], PlayerGroupAll(), false);
    }
    else if (autoD755BC4E_val == 2.0) {
        DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame3[1], PlayerGroupAll(), false);
        DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame3[2], PlayerGroupAll(), false);
    }
    else if (autoD755BC4E_val == 3.0) {
        DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame4[1], PlayerGroupAll(), false);
        DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame4[2], PlayerGroupAll(), false);
    }
    else if (autoD755BC4E_val == 4.0) {
        DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame14[1], PlayerGroupAll(), false);
        DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame14[2], PlayerGroupAll(), false);
    }
    else if (autoD755BC4E_val == 5.0) {
        DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame15[1], PlayerGroupAll(), false);
        DialogControlSetVisible(libMDoE_gv_MMTreasureVaultPanel.lv_AmmoCacheStatusFrame15[2], PlayerGroupAll(), false);
    }
    else {
    }
    Wait(0.0625, c_timeGame);
    libMDoE_gv_mDoE_LaunchNumber = (libMDoE_gv_mDoE_LaunchNumber + 1);
    libMDoE_gf_MDoEUIUpdateCannonBarrageShotsRemaining((6 - libMDoE_gv_mDoE_LaunchNumber));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_AttackCoreTracker_Init () {
    libMDoE_gt_AttackCoreTracker = TriggerCreate("libMDoE_gt_AttackCoreTracker_Func");
    TriggerAddEventPlayerEffectUsed(libMDoE_gt_AttackCoreTracker, c_playerAny, "AttackCoreLaunchMissile");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cannonball Is Fired
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_CannonballIsFired_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_missile;
    int lv_pingBall;
    int lv_pingTrail;
    point lv_missilePosition;
    sound lv_ballLoopingSound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pingBall = c_invalidPingId;
    lv_pingTrail = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "CannonAttackMissile") || (UnitGetType(EventUnitCreatedUnit()) == "CannonBarrageMissile")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_missile = EventUnitCreatedUnit();
    libNtve_gf_CreatePingFacingAngleWithType(PlayerGroupAll(), "BattleshipBombardMissile", UnitGetPosition(lv_missile), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, UnitGetFacing(lv_missile), -1, -1);
    SoundPlayForPlayer(SoundLink("Event_GhostShip_Cannon_Fire_Close", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    lv_pingBall = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.05);
    PingSetUnit(PingLastCreated(), lv_missile);
    Wait(0.125, c_timeGame);
    libNtve_gf_CreatePingFacingAngleWithType(PlayerGroupAll(), "DemonHunterHungeringArrowMissile", UnitGetPosition(lv_missile), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, UnitGetFacing(lv_missile), -1, -1);
    lv_pingTrail = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.1);
    PingSetUnit(PingLastCreated(), lv_missile);
    SoundPlayOnUnitForPlayer(SoundLink("Event_GhostShip_CannonBall_Loop", -1), c_maxPlayers, PlayerGroupAll(), lv_missile, 0.0, 100.0, 0.0);
    lv_ballLoopingSound = SoundLastPlayed();
    while (true) {
        if ((UnitIsAlive(lv_missile) == false)) {
            SoundStop(lv_ballLoopingSound, true);
            PingDestroy(lv_pingBall);
            PingDestroy(lv_pingTrail);
            libNtve_gf_CreatePingFacingAngleWithType(PlayerGroupAll(), "BattleshipBombardImpact", lv_missilePosition, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0625, 270.0, -1, -1);
            SoundPlayForPlayer(SoundLink("Event_GhostShip_Cannon_Explo_Close", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            PingSetScale(PingLastCreated(), 0.04);
            libMDoE_gf_MMCannonballsBattleshipShootingShakingCamera(lv_missilePosition);
            return true;
        }

        lv_missilePosition = UnitGetPosition(lv_missile);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_CannonballIsFired_Init () {
    libMDoE_gt_CannonballIsFired = TriggerCreate("libMDoE_gt_CannonballIsFired_Func");
    TriggerAddEventUnitCreated(libMDoE_gt_CannonballIsFired, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide Cannon Text Tags On Round End
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_HideCannonTextTagsOnRoundEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libMDoE_gv_mDoE_AmmoCache.lv_playersWhoHaveNotPickedUpAmmo = PlayerGroupCopy(libGame_gv_teams[libAtDe_gv_attackDefend.lv_defendingTeam].lv_teamPlayerGroupNoNPCPlayers);
    libMDoE_gv_mDoE_Cannons.lv_playersWhoHaveNotTurnedInAmmo = PlayerGroupCopy(libGame_gv_teams[libAtDe_gv_attackDefend.lv_defendingTeam].lv_teamPlayerGroupNoNPCPlayers);
    libMDoE_gf_HideAllCannonText();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_HideCannonTextTagsOnRoundEnd_Init () {
    libMDoE_gt_HideCannonTextTagsOnRoundEnd = TriggerCreate("libMDoE_gt_HideCannonTextTagsOnRoundEnd_Func");
    libAtDe_gf_AttackDefendRoundResetComplete(libMDoE_gt_HideCannonTextTagsOnRoundEnd);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Round Ends Clear Ammo
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_RoundEndsClearAmmo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto70CD72FB_g;
    int auto70CD72FB_u;
    unit auto70CD72FB_var;
    const int autoA25C1D8F_ae = 4;
    const int autoA25C1D8F_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto70CD72FB_g = libMDoE_gv_mDoE_AmmoCache.lv_availableAmmoCaches;
    auto70CD72FB_u = UnitGroupCount(auto70CD72FB_g, c_unitCountAll);
    for (;; auto70CD72FB_u -= 1) {
        auto70CD72FB_var = UnitGroupUnitFromEnd(auto70CD72FB_g, auto70CD72FB_u);
        if (auto70CD72FB_var == null) { break; }
        UnitGroupRemove(libMDoE_gv_mDoE_AmmoCache.lv_availableAmmoCaches, auto70CD72FB_var);
    }
    lv_i = 1;
    for ( ; ( (autoA25C1D8F_ai >= 0 && lv_i <= autoA25C1D8F_ae) || (autoA25C1D8F_ai < 0 && lv_i >= autoA25C1D8F_ae) ) ; lv_i += autoA25C1D8F_ai ) {
        TextTagDestroy(libMDoE_gv_mDoE_AmmoCache.lv_ammoAttackerTextTag[lv_i]);
        TextTagDestroy(libMDoE_gv_mDoE_AmmoCache.lv_ammoDefenderTextTag[lv_i]);
        UnitRemove(libMDoE_gv_mDoE_AmmoCache.lv_unit[lv_i]);
        libMDoE_gv_mDoE_AmmoCache.lv_unit[lv_i] = null;
        VisRevealerDestroy(libMDoE_gv_mDoE_AmmoCache.lv_ammoOrderRevealer[lv_i]);
        VisRevealerDestroy(libMDoE_gv_mDoE_AmmoCache.lv_ammoChaosRevealer[lv_i]);
    }
    libMDoE_gv_mDoE_AmmoCache.lv_amountOfAvailableLocations = 0;
    libMDoE_gf_MDoEUIShowHideMainPanel3(false);
    libMDoE_gf_MDoEUISetCannonBarrageUIAllianceColors();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_RoundEndsClearAmmo_Init () {
    libMDoE_gt_RoundEndsClearAmmo = TriggerCreate("libMDoE_gt_RoundEndsClearAmmo_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Swapped Update Score Values
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_HeroSwappedUpdateScoreValues_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_ScoreValuesReportIntegerValueAndLog(libGame_gf_DebugHeroSwappedPlayer(), "CarriedMechanic", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_HeroSwappedUpdateScoreValues_Init () {
    libMDoE_gt_HeroSwappedUpdateScoreValues = TriggerCreate("libMDoE_gt_HeroSwappedUpdateScoreValues_Func");
    libGame_gf_DebugHeroSwapped(libMDoE_gt_HeroSwappedUpdateScoreValues);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn New Ammo Cache
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_SpawnNewAmmoCache_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ammoIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.0, c_timeGame);
    lv_ammoIndex = libMDoE_gv_mDoE_AmmoCache.lv_nextPointToSpawnAt[1];
    libMDoE_gf_MDoEUpdateAmmoSpawnLocationQueue();
    libNtve_gf_CreateUnitsAtPoint2(1, "AmmoCache", c_unitCreateIgnorePlacement, libMDoE_gv_mDoE_AmmoCache.lv_owningPlayer, libMDoE_gv_mDoE_AmmoCache.lv_ammoSpawnPoints[lv_ammoIndex], null);
    UnitGroupAdd(libMDoE_gv_mDoE_AmmoCache.lv_availableAmmoCaches, UnitLastCreated());
    libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormAlert", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 3.0);
    TextTagCreate(StringExternal("Param/Value/lib_MDoE_0DD4F746"), 24, UnitGetPosition(UnitLastCreated()), 2.0, true, true, libGame_gv_teams[libAtDe_gv_attackDefend.lv_attackingTeam].lv_teamPlayerGroup);
    libMDoE_gv_mDoE_AmmoCache.lv_ammoAttackerTextTag[lv_ammoIndex] = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/lib_MDoE_91916135"), 24, UnitGetPosition(UnitLastCreated()), 2.0, true, true, libMDoE_gv_mDoE_AmmoCache.lv_playersWhoHaveNotPickedUpAmmo);
    libMDoE_gv_mDoE_AmmoCache.lv_ammoDefenderTextTag[lv_ammoIndex] = TextTagLastCreated();
    VisRevealerCreate(libCore_gv_cOMPUTER_TeamOrder, RegionCircle(UnitGetPosition(UnitLastCreated()), libMapM_gv_mMRavenRevealRadius_C));
    libMDoE_gv_mDoE_AmmoCache.lv_ammoOrderRevealer[lv_ammoIndex] = VisRevealerLastCreated();
    VisRevealerCreate(libCore_gv_cOMPUTER_TeamChaos, RegionCircle(UnitGetPosition(UnitLastCreated()), libMapM_gv_mMRavenRevealRadius_C));
    libMDoE_gv_mDoE_AmmoCache.lv_ammoChaosRevealer[lv_ammoIndex] = VisRevealerLastCreated();
    libMDoE_gv_mDoE_AmmoCache.lv_unit[lv_ammoIndex] = UnitLastCreated();
    libMDoE_gv_mDoE_AmmoCache.lv_ammoExistingOnGround += 1;
    libMDoE_gf_MDoEUIUpdateCannonballCount(libMDoE_gv_mDoE_AmmoCache.lv_ammoExistingOnGround, libMDoE_gv_mDoE_AmmoCache.lv_ammoCarriedByPlayers);
    AddUnitOfInterest(libMDoE_gv_mDoE_AmmoCache.lv_unit[lv_ammoIndex], 0.0, 0.0, "PickupCannonball", libNtve_ge_GoalTeam_Both, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_SpawnNewAmmoCache_Init () {
    libMDoE_gt_SpawnNewAmmoCache = TriggerCreate("libMDoE_gt_SpawnNewAmmoCache_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cannonball Handed In
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_DoEsCannonballHandedIn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_handInPlayer;
    int lv_handInTeam;
    unit lv_handInHeroUnit;
    int lv_handInTeamPlayer;
    int lv_handInTeamEnemy;
    playergroup lv_soundPlayerGroup;
    int lv_GoldHandedIn;
    unit lv_handInHeroUnit2;

    // Automatic Variable Declarations
    int auto482C174F_val;

    // Variable Initialization
    lv_soundPlayerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "Cannon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_handInHeroUnit2 = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    UnitGroupAdd(libMDoE_gv_mDoE_Cannons.lv_cannonsCurrentlyOnCooldown, lv_handInHeroUnit2);
    lv_handInPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_handInHeroUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_handInTeam = libGame_gf_TeamNumberOfPlayer(lv_handInPlayer);
    RemoveUnitOfInterest(lv_handInHeroUnit, "InterceptCannonball", libNtve_ge_GoalTeam_Both);
    if (((libMDoE_gv_mDoE_CannonballTurnedIn[1] >= libMDoE_gv_mDoE_CannonballTurnInCost[1]) || (libMDoE_gv_mDoE_CannonballTurnedIn[2] >= libMDoE_gv_mDoE_CannonballTurnInCost[2]))) {
        return true;
    }

    auto482C174F_val = lv_handInTeam;
    if (auto482C174F_val == 1) {
        lv_handInTeamPlayer = libCore_gv_cOMPUTER_TeamOrder;
    }
    else if (auto482C174F_val == 2) {
        lv_handInTeamPlayer = libCore_gv_cOMPUTER_TeamChaos;
    }
    else {
        return true;
    }
    lv_handInTeamEnemy = libGame_gf_EnemyTeam(lv_handInTeam);
    lv_GoldHandedIn = MinI(libMDoE_gf_DoESGetCannonballCountOnHero(lv_handInPlayer, lv_handInHeroUnit), (libMDoE_gv_mDoE_CannonballTurnInCost[lv_handInTeam] - libMDoE_gv_mDoE_CannonballTurnedIn[lv_handInTeam]));
    if ((libGame_gv_players[lv_handInPlayer].lv_activeVehicle == lv_handInHeroUnit)) {
        UnitBehaviorRemove(libGame_gv_players[lv_handInPlayer].lv_heroUnit, "MapMechanicStack", lv_GoldHandedIn);
    }

    TextExpressionSetToken("Param/Expression/lib_MDoE_60945D37", "A", IntToText(lv_GoldHandedIn));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_MDoE_60945D37"), 24, UnitGetPosition(lv_handInHeroUnit2), 3.0, true, true, libGame_gf_PlayersOnTeamHeroes(lv_handInTeam, false));
    TextTagSetVelocity(TextTagLastCreated(), 1.5, 90.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
    TextExpressionSetToken("Param/Expression/lib_MDoE_AE051398", "A", IntToText(lv_GoldHandedIn));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_MDoE_AE051398"), 24, UnitGetPosition(lv_handInHeroUnit2), 3.0, true, true, libGame_gf_PlayersOnTeamHeroes(lv_handInTeamEnemy, false));
    TextTagSetVelocity(TextTagLastCreated(), 1.5, 90.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
    TextExpressionSetToken("Param/Expression/lib_MDoE_D7163D0C", "A", IntToText(lv_GoldHandedIn));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_MDoE_D7163D0C"), 24, UnitGetPosition(lv_handInHeroUnit2), 3.0, true, true, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    TextTagSetVelocity(TextTagLastCreated(), 1.5, 90.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
    lv_soundPlayerGroup = PlayerGroupCopy(PlayerGroupAll());
    PlayerGroupRemove(lv_soundPlayerGroup, lv_handInPlayer);
    SoundPlayAtPointForPlayer(SoundLink("UI_Doubloon_Pickup", -1), c_maxPlayers, lv_soundPlayerGroup, UnitGetPosition(lv_handInHeroUnit2), 2.0, 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("UI_Doubloon_Pickup", -1), c_maxPlayers, PlayerGroupSingle(lv_handInPlayer), 100.0, 0.0);
    libMDoE_gv_mDoE_CannonballTurnedIn[lv_handInTeam] += lv_GoldHandedIn;
    libMDoE_gf_DoEsSetHeroCannonballCount(lv_handInPlayer, lv_handInHeroUnit, (libMDoE_gf_DoESGetCannonballCountOnHero(lv_handInPlayer, lv_handInHeroUnit) - lv_GoldHandedIn));
    if ((libMDoE_gv_mDoE_CannonballTurnedIn[lv_handInTeam] >= libMDoE_gv_mDoE_CannonballTurnInCost[lv_handInTeam])) {
        libMDoE_gf_PlayerTurnsInAmmoDisplayText(lv_handInPlayer, lv_handInHeroUnit);
        libMDoE_gf_MDoEFireCannon(lv_handInHeroUnit2);
        libMDoE_gf_MDoEUIShowHideCannonFiredFrame();
        libMDoE_gf_DoEsResetCannonballCounter(1);
        TextTagShow(libCore_gf_TextTagStoredForUnit(lv_handInHeroUnit2, libGame_gv_teamChaosIndex_C), PlayerGroupAll(), false);
        Wait(0.0625, c_timeGame);
        if ((TechTreeBehaviorCount(lv_handInPlayer, "MapMechanicStack", c_techCountCompleteOnly) <= 0)) {
            libMDoE_gf_HideDefenderTextTagsOnAllCannonsForPlayer(lv_handInPlayer);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_DoEsCannonballHandedIn_Init () {
    libMDoE_gt_DoEsCannonballHandedIn = TriggerCreate("libMDoE_gt_DoEsCannonballHandedIn_Func");
    TriggerEnable(libMDoE_gt_DoEsCannonballHandedIn, false);
    TriggerAddEventPlayerEffectUsed(libMDoE_gt_DoEsCannonballHandedIn, c_playerAny, "CaptureMacGuffinCastComplete");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Picks Up Cannonball
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_DoEsHeroPicksUpCannonball_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_collectingUnit;
    int lv_collectingPlayer;
    int lv_collectingTeam;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_collectingUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_collectingPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    lv_collectingTeam = libGame_gf_TeamNumberOfPlayer(lv_collectingPlayer);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTestState(lv_collectingUnit, c_unitStateHallucination) == true) && (UnitHasBehavior2(lv_collectingUnit, "UltimateEvolutionBuff") == false)) {
        if ((libGame_gv_players[lv_collectingPlayer].lv_activeVehicle != null)) {
            lv_collectingUnit = libGame_gv_players[lv_collectingPlayer].lv_activeVehicle;
        }
        else {
            lv_collectingUnit = libGame_gv_players[lv_collectingPlayer].lv_heroUnit;
        }
    }

    libMDoE_gf_DoEsModifyHeroCannonballCount(lv_collectingPlayer, lv_collectingUnit, 1);
    libMDoE_gv_mDoE_AmmoCache.lv_ammoExistingOnGround -= 1;
    libMDoE_gv_mDoE_AmmoCache.lv_ammoCarriedByPlayers += 1;
    libMDoE_gf_MDoEUIUpdateCannonballCount(libMDoE_gv_mDoE_AmmoCache.lv_ammoExistingOnGround, libMDoE_gv_mDoE_AmmoCache.lv_ammoCarriedByPlayers);
    libMDoE_gf_PlayerPicksUpAmmoDisplayText(lv_collectingPlayer, lv_collectingUnit);
    if ((lv_collectingTeam == libGame_gv_teamOrderIndex_C)) {
        PlayerCreateEffectUnit(libCore_gv_cOMPUTER_TeamChaos, "ApplyCannonballRevealed", lv_collectingUnit);
    }
    else {
        PlayerCreateEffectUnit(libCore_gv_cOMPUTER_TeamOrder, "ApplyCannonballRevealed", lv_collectingUnit);
    }
    AddUnitOfInterest(lv_collectingUnit, 0.0, 0.0, "InterceptCannonball", libNtve_ge_GoalTeam_Both, 0);
    libMDoE_gf_ShowHideRelevantDefenderCannonTextRightClickMechanic();
    libUIUI_gf_CreateMapMechanicPickupTextTag(lv_collectingUnit, TextExpressionAssemble("Param/Expression/lib_MDoE_FC7DEB72"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_DoEsHeroPicksUpCannonball_Init () {
    libMDoE_gt_DoEsHeroPicksUpCannonball = TriggerCreate("libMDoE_gt_DoEsHeroPicksUpCannonball_Func");
    TriggerEnable(libMDoE_gt_DoEsHeroPicksUpCannonball, false);
    TriggerAddEventPlayerEffectUsed(libMDoE_gt_DoEsHeroPicksUpCannonball, c_playerAny, "DoubloonPickupSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Loots Ammo Cache
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_DoEsHeroLootsAmmoCacher_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_collectingUnit;
    int lv_collectingPlayer;
    int lv_collectingTeam;

    // Automatic Variable Declarations
    unit autoA5E65E97_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "AmmoCache"))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libMDoE_gv_mDoE_AmmoCache.lv_availableAmmoCaches, EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(libMDoE_gv_mDoE_AmmoCache.lv_availableAmmoCaches, EventPlayerEffectUsedUnit(c_effectUnitTarget));
    if ((libMDoE_gv_mDoE_AmmoCache.lv_playerPickedUpAmmoOnce == false)) {
        libMDoE_gv_mDoE_AmmoCache.lv_playerPickedUpAmmoOnce = true;
    }

    libMDoE_gv_mDoE_AmmoCache.lv_amountOfAvailableLocations += 1;
    autoA5E65E97_val = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    if (autoA5E65E97_val == libMDoE_gv_mDoE_AmmoCache.lv_unit[1]) {
        libMDoE_gv_mDoE_AmmoCache.lv_nextPointToSpawnAt[libMDoE_gv_mDoE_AmmoCache.lv_amountOfAvailableLocations] = 1;
        VisRevealerDestroy(libMDoE_gv_mDoE_AmmoCache.lv_ammoOrderRevealer[1]);
        VisRevealerDestroy(libMDoE_gv_mDoE_AmmoCache.lv_ammoChaosRevealer[1]);
        TextTagDestroy(libMDoE_gv_mDoE_AmmoCache.lv_ammoAttackerTextTag[1]);
        TextTagDestroy(libMDoE_gv_mDoE_AmmoCache.lv_ammoDefenderTextTag[1]);
    }
    else if (autoA5E65E97_val == libMDoE_gv_mDoE_AmmoCache.lv_unit[2]) {
        libMDoE_gv_mDoE_AmmoCache.lv_nextPointToSpawnAt[libMDoE_gv_mDoE_AmmoCache.lv_amountOfAvailableLocations] = 2;
        VisRevealerDestroy(libMDoE_gv_mDoE_AmmoCache.lv_ammoOrderRevealer[2]);
        VisRevealerDestroy(libMDoE_gv_mDoE_AmmoCache.lv_ammoChaosRevealer[2]);
        TextTagDestroy(libMDoE_gv_mDoE_AmmoCache.lv_ammoAttackerTextTag[2]);
        TextTagDestroy(libMDoE_gv_mDoE_AmmoCache.lv_ammoDefenderTextTag[2]);
    }
    else if (autoA5E65E97_val == libMDoE_gv_mDoE_AmmoCache.lv_unit[3]) {
        libMDoE_gv_mDoE_AmmoCache.lv_nextPointToSpawnAt[libMDoE_gv_mDoE_AmmoCache.lv_amountOfAvailableLocations] = 3;
        VisRevealerDestroy(libMDoE_gv_mDoE_AmmoCache.lv_ammoOrderRevealer[3]);
        VisRevealerDestroy(libMDoE_gv_mDoE_AmmoCache.lv_ammoChaosRevealer[3]);
        TextTagDestroy(libMDoE_gv_mDoE_AmmoCache.lv_ammoAttackerTextTag[3]);
        TextTagDestroy(libMDoE_gv_mDoE_AmmoCache.lv_ammoDefenderTextTag[3]);
    }
    else if (autoA5E65E97_val == libMDoE_gv_mDoE_AmmoCache.lv_unit[4]) {
        libMDoE_gv_mDoE_AmmoCache.lv_nextPointToSpawnAt[libMDoE_gv_mDoE_AmmoCache.lv_amountOfAvailableLocations] = 4;
        VisRevealerDestroy(libMDoE_gv_mDoE_AmmoCache.lv_ammoOrderRevealer[4]);
        VisRevealerDestroy(libMDoE_gv_mDoE_AmmoCache.lv_ammoChaosRevealer[4]);
        TextTagDestroy(libMDoE_gv_mDoE_AmmoCache.lv_ammoAttackerTextTag[4]);
        TextTagDestroy(libMDoE_gv_mDoE_AmmoCache.lv_ammoDefenderTextTag[4]);
    }
    else {
    }
    UnitKill(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    lv_collectingUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_collectingPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_collectingTeam = libGame_gf_TeamNumberOfPlayer(lv_collectingPlayer);
    libMDoE_gf_HideTextTagsOnAllActiveAmmoCachesForPlayer(lv_collectingPlayer);
    libMDoE_gf_PingAllActiveCannonsForPlayer(lv_collectingPlayer);
    if ((UnitTestState(lv_collectingUnit, c_unitStateHallucination) == true) && (UnitHasBehavior2(lv_collectingUnit, "UltimateEvolutionBuff") == false)) {
        if ((libGame_gv_players[lv_collectingPlayer].lv_activeVehicle != null)) {
            lv_collectingUnit = libGame_gv_players[lv_collectingPlayer].lv_activeVehicle;
        }
        else {
            lv_collectingUnit = libGame_gv_players[lv_collectingPlayer].lv_heroUnit;
        }
    }

    PlayerCreateEffectUnit(lv_collectingPlayer, "DoubloonPickupSet", lv_collectingUnit);
    if ((lv_collectingTeam == libGame_gv_teamOrderIndex_C)) {
        PlayerCreateEffectUnit(libCore_gv_cOMPUTER_TeamChaos, "ApplyCannonballRevealed", lv_collectingUnit);
    }
    else {
        PlayerCreateEffectUnit(libCore_gv_cOMPUTER_TeamOrder, "ApplyCannonballRevealed", lv_collectingUnit);
    }
    AddUnitOfInterest(lv_collectingUnit, 0.0, 0.0, "InterceptCannonball", libNtve_ge_GoalTeam_Both, 0);
    libMDoE_gf_ShowHideRelevantDefenderCannonTextRightClickMechanic();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_DoEsHeroLootsAmmoCacher_Init () {
    libMDoE_gt_DoEsHeroLootsAmmoCacher = TriggerCreate("libMDoE_gt_DoEsHeroLootsAmmoCacher_Func");
    TriggerEnable(libMDoE_gt_DoEsHeroLootsAmmoCacher, false);
    TriggerAddEventPlayerEffectUsed(libMDoE_gt_DoEsHeroLootsAmmoCacher, c_playerAny, "CaptureMacGuffinCastComplete");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cannonball Times Out
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_CannonballTimesOut_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == "ItemCannonball"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libMDoE_gv_mDoE_AmmoCache.lv_ammoExistingOnGround -= 1;
    libMDoE_gf_MDoEUIUpdateCannonballCount(libMDoE_gv_mDoE_AmmoCache.lv_ammoExistingOnGround, libMDoE_gv_mDoE_AmmoCache.lv_ammoCarriedByPlayers);
    TriggerExecute(libMDoE_gt_SpawnNewAmmoCache, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_CannonballTimesOut_Init () {
    libMDoE_gt_CannonballTimesOut = TriggerCreate("libMDoE_gt_CannonballTimesOut_Func");
    TriggerAddEventPlayerEffectUsed(libMDoE_gt_CannonballTimesOut, 11, "StormSuicide");
    TriggerAddEventPlayerEffectUsed(libMDoE_gt_CannonballTimesOut, 12, "StormSuicide");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Dies With Cannonball
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_HeroDiesWithCannonball_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_count;
    point lv_spawnLocation;
    unit lv_deadHero;
    unit lv_itItem;
    int lv_teamofPlayer;
    int lv_computerPlayer;

    // Automatic Variable Declarations
    int auto827D6744_n;
    int auto827D6744_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = libGame_gf_HeroKilledPlayer();
    lv_teamofPlayer = libGame_gf_TeamNumberOfPlayer(lv_player);
    if ((lv_teamofPlayer == libGame_gv_teamOrderIndex_C)) {
        lv_computerPlayer = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        lv_computerPlayer = libCore_gv_cOMPUTER_TeamChaos;
    }
    lv_deadHero = libGame_gf_HeroKilledUnit();
    lv_count = libMDoE_gf_DoESGetCannonballCountOnHero(lv_player, lv_deadHero);
    RemoveUnitOfInterest(lv_deadHero, "InterceptCannonball", libNtve_ge_GoalTeam_Both);
    libMDoE_gf_DoEsModifyHeroCannonballCount(lv_player, lv_deadHero, (lv_count * -1));
    if ((lv_count <= 0)) {
        return true;
    }

    lv_spawnLocation = libGame_gf_HeroKilledLocation();
    if ((TechTreeBehaviorCount(lv_player, "MapMechanicStack", c_techCountCompleteOnly) <= 0)) {
        libMDoE_gf_HideDefenderTextTagsOnAllCannonsForPlayer(lv_player);
    }

    Wait(0.25, c_timeGame);
    libMDoE_gv_mDoE_AmmoCache.lv_ammoExistingOnGround += lv_count;
    libMDoE_gv_mDoE_AmmoCache.lv_ammoCarriedByPlayers -= lv_count;
    libMDoE_gf_MDoEUIUpdateCannonballCount(libMDoE_gv_mDoE_AmmoCache.lv_ammoExistingOnGround, libMDoE_gv_mDoE_AmmoCache.lv_ammoCarriedByPlayers);
    libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormAlert", lv_spawnLocation, ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 1.0);
    auto827D6744_n = lv_count;
    for (auto827D6744_i = 1; auto827D6744_i <= auto827D6744_n; auto827D6744_i += 1) {
        PlayerCreateEffectPoint(lv_computerPlayer, "DropCannonballsPersistent", lv_spawnLocation);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_HeroDiesWithCannonball_Init () {
    libMDoE_gt_HeroDiesWithCannonball = TriggerCreate("libMDoE_gt_HeroDiesWithCannonball_Func");
    TriggerEnable(libMDoE_gt_HeroDiesWithCannonball, false);
    libGame_gf_HeroKilled(libMDoE_gt_HeroDiesWithCannonball);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MDoE Hero Used Teleporter
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_DoEs_HeroUsedTeleporter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    unit lv_waygateEntranceUnit;
    int lv_player;
    int lv_computerTeam;
    int lv_waygateIndex;
    unit lv_waygateExitUnit;

    // Automatic Variable Declarations
    const int auto12949091_ae = libMDoE_gv_DoEs_TeleporterMaxCount;
    const int auto12949091_ai = 1;
    unitgroup auto3C9082B1_g;
    int auto3C9082B1_u;
    unit auto3C9082B1_var;
    unitgroup auto7A452FF5_g;
    int auto7A452FF5_u;
    unit auto7A452FF5_var;
    unitgroup auto4B048C3C_g;
    int auto4B048C3C_u;
    unit auto4B048C3C_var;
    unitgroup auto1258A020_g;
    int auto1258A020_u;
    unit auto1258A020_var;
    unitgroup auto97E2EA56_g;
    int auto97E2EA56_u;
    unit auto97E2EA56_var;
    unitgroup autoE8761F5A_g;
    int autoE8761F5A_u;
    unit autoE8761F5A_var;
    unitgroup auto053AA9BD_g;
    int auto053AA9BD_u;
    unit auto053AA9BD_var;

    // Variable Initialization
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_waygateEntranceUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = UnitGetOwner(lv_hero);

    // Conditions
    if (testConds) {
        if (!((libGame_gf_UnitIsHero(lv_hero) == true))) {
            return false;
        }

        if (!((UnitGetType(lv_waygateEntranceUnit) == "TeleporterTeam"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gf_TeamNumberOfPlayer(lv_player) == libGame_gv_teamOrderIndex_C)) {
        lv_computerTeam = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        lv_computerTeam = libCore_gv_cOMPUTER_TeamChaos;
    }
    UnitCreateEffectPoint(lv_hero, "TeleportVisualDummyEffect", UnitGetPosition(lv_hero));
    libNtve_gf_SendActorMessageToUnit(lv_hero, "Signal InvisibleModel");
    UnitSetState(lv_hero, c_unitStateTargetable, false);
    UnitSetState(lv_hero, c_unitStateStoppable, false);
    lv_waygateIndex = 1;
    for ( ; ( (auto12949091_ai >= 0 && lv_waygateIndex <= auto12949091_ae) || (auto12949091_ai < 0 && lv_waygateIndex >= auto12949091_ae) ) ; lv_waygateIndex += auto12949091_ai ) {
        if ((lv_waygateEntranceUnit == libMDoE_gv_mDoE_Teleporter[lv_waygateIndex].lv_entranceUnit)) {
            break;
        }

        if ((libMDoE_gv_mDoE_Teleporter[lv_waygateIndex].lv_entranceUnit == null)) {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_MDoE_9C03F64E"), true);
            return true;
        }

    }
    if ((libMDoE_gv_mDoE_Teleporter[lv_waygateIndex].lv_exitUnitChaos != null) && (libMDoE_gv_mDoE_Teleporter[lv_waygateIndex].lv_exitUnitOrder != null)) {
        if ((lv_computerTeam == libCore_gv_cOMPUTER_TeamOrder)) {
            UnitSetPosition(lv_hero, libMDoE_gv_mDoE_Teleporter[lv_waygateIndex].lv_positionOrder, false);
        }
        else {
            UnitSetPosition(lv_hero, libMDoE_gv_mDoE_Teleporter[lv_waygateIndex].lv_positionChaos, false);
        }
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_MDoE_51B4C456"), true);
        return true;
    }
    UnitCreateEffectUnit(lv_hero, "UnderworldTeleport", lv_hero);
    if ((UnitGetType(lv_hero) == "HeroArthas")) {
        auto3C9082B1_g = UnitGroup("ArthasGhoul", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3C9082B1_u = UnitGroupCount(auto3C9082B1_g, c_unitCountAll);
        for (;; auto3C9082B1_u -= 1) {
            auto3C9082B1_var = UnitGroupUnitFromEnd(auto3C9082B1_g, auto3C9082B1_u);
            if (auto3C9082B1_var == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(lv_hero), UnitGetPosition(auto3C9082B1_var)) <= 8.0)) {
                UnitSetPosition(auto3C9082B1_var, UnitGetPosition(lv_hero), false);
                UnitIssueOrder(auto3C9082B1_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            }

        }
    }

    if ((UnitGetType(lv_hero) == "HeroJaina")) {
        auto7A452FF5_g = UnitGroup("JainaWaterElemental", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7A452FF5_u = UnitGroupCount(auto7A452FF5_g, c_unitCountAll);
        for (;; auto7A452FF5_u -= 1) {
            auto7A452FF5_var = UnitGroupUnitFromEnd(auto7A452FF5_g, auto7A452FF5_u);
            if (auto7A452FF5_var == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(lv_hero), UnitGetPosition(auto7A452FF5_var)) <= 8.0)) {
                UnitSetPosition(auto7A452FF5_var, UnitGetPosition(lv_hero), false);
                UnitIssueOrder(auto7A452FF5_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            }

        }
    }

    if ((UnitGetType(lv_hero) == "HeroRexxar")) {
        auto4B048C3C_g = UnitGroup("RexxarMisha", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4B048C3C_u = UnitGroupCount(auto4B048C3C_g, c_unitCountAll);
        for (;; auto4B048C3C_u -= 1) {
            auto4B048C3C_var = UnitGroupUnitFromEnd(auto4B048C3C_g, auto4B048C3C_u);
            if (auto4B048C3C_var == null) { break; }
            UnitSetPosition(auto4B048C3C_var, UnitGetPosition(lv_hero), false);
            UnitIssueOrder(auto4B048C3C_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }
    }

    if ((UnitGetType(lv_hero) == "HeroStitches")) {
        auto1258A020_g = UnitGroup("StitchesStinkling", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1258A020_u = UnitGroupCount(auto1258A020_g, c_unitCountAll);
        for (;; auto1258A020_u -= 1) {
            auto1258A020_var = UnitGroupUnitFromEnd(auto1258A020_g, auto1258A020_u);
            if (auto1258A020_var == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(lv_hero), UnitGetPosition(auto1258A020_var)) <= 8.0)) {
                UnitSetPosition(auto1258A020_var, UnitGetPosition(lv_hero), false);
                UnitIssueOrder(auto1258A020_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            }

        }
    }

    if ((UnitGetType(lv_hero) == "HeroRaynor")) {
        auto97E2EA56_g = UnitGroup("RaynorRaynorsBanshee", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto97E2EA56_u = UnitGroupCount(auto97E2EA56_g, c_unitCountAll);
        for (;; auto97E2EA56_u -= 1) {
            auto97E2EA56_var = UnitGroupUnitFromEnd(auto97E2EA56_g, auto97E2EA56_u);
            if (auto97E2EA56_var == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(lv_hero), UnitGetPosition(auto97E2EA56_var)) <= 8.0)) {
                UnitSetPosition(auto97E2EA56_var, UnitGetPosition(lv_hero), false);
                UnitIssueOrder(auto97E2EA56_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                libGDHL_gv_heroRaynorRaynorsBansheeIsAttacking[UnitGetOwner(lv_hero)] = false;
            }

        }
    }

    if ((UnitGetType(lv_hero) == "HeroWitchDoctor")) {
        autoE8761F5A_g = UnitGroup("WitchDoctorGargantuan", lv_player, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE8761F5A_u = UnitGroupCount(autoE8761F5A_g, c_unitCountAll);
        for (;; autoE8761F5A_u -= 1) {
            autoE8761F5A_var = UnitGroupUnitFromEnd(autoE8761F5A_g, autoE8761F5A_u);
            if (autoE8761F5A_var == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(lv_hero), UnitGetPosition(autoE8761F5A_var)) <= 8.0)) {
                UnitSetPosition(autoE8761F5A_var, UnitGetPosition(lv_hero), false);
            }

        }
    }

    if ((UnitGetType(lv_hero) == "HeroKerrigan")) {
        auto053AA9BD_g = UnitGroup("KerriganUltralisk", lv_player, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto053AA9BD_u = UnitGroupCount(auto053AA9BD_g, c_unitCountAll);
        for (;; auto053AA9BD_u -= 1) {
            auto053AA9BD_var = UnitGroupUnitFromEnd(auto053AA9BD_g, auto053AA9BD_u);
            if (auto053AA9BD_var == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(lv_hero), UnitGetPosition(auto053AA9BD_var)) <= 8.0)) {
                UnitSetPosition(auto053AA9BD_var, UnitGetPosition(lv_hero), false);
                libAIAI_gf_MinionAIStartMinionAI(-1, auto053AA9BD_var, libGame_gv_spawnedMinionLane, libGame_gv_spawnedMinionFirstWaypointIndex, false, false, false, 0, false);
            }

        }
    }

    if ((EventPlayerEffectUsedUnit(c_effectUnitCaster) == UnitGroupUnit(libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn, 1))) {
        libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_player, UnitGetPosition(lv_hero), 0.0, -1, 0.0, false);
    }

    SoundPlayOnUnitForPlayer(SoundLink("Event_Mines_EnterMinesEnd", -1), c_maxPlayers, PlayerGroupAll(), lv_hero, 0.0, 100.0, 0.0);
    Wait(0.125, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(lv_hero, false);
    UnitSetState(lv_hero, c_unitStateTargetable, true);
    UnitSetState(lv_hero, c_unitStateStoppable, true);
    libNtve_gf_SendActorMessageToUnit(lv_hero, "Signal RestoreModel");
    PathSetSourceUnit(libGame_gv_players[lv_player].lv_pathDisplay, lv_hero);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_DoEs_HeroUsedTeleporter_Init () {
    libMDoE_gt_DoEs_HeroUsedTeleporter = TriggerCreate("libMDoE_gt_DoEs_HeroUsedTeleporter_Func");
    TriggerAddEventPlayerEffectUsed(libMDoE_gt_DoEs_HeroUsedTeleporter, c_playerAny, "CaptureMacGuffinTwoCastComplete");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boat Dies
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_BoatDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libMDoE_gf_MDoEUIShowHideBoatAttackingCore(false);
    libMDoE_gf_MDoEUIShowHideCannonBarrageUI(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_BoatDies_Init () {
    libMDoE_gt_BoatDies = TriggerCreate("libMDoE_gt_BoatDies_Func");
    TriggerAddEventUnitDied(libMDoE_gt_BoatDies, UnitRefFromVariable("libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core"));
    TriggerAddEventUnitDied(libMDoE_gt_BoatDies, UnitRefFromVariable("libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Select - Set Extra Info Text 
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_HeroSelectSetExtraInfoText_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto12C611F1_g;
    int auto12C611F1_var;
    playergroup auto57061799_g;
    int auto57061799_var;
    playergroup autoE9A39094_g;
    int autoE9A39094_var;
    playergroup autoABF12920_g;
    int autoABF12920_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libAtDe_gv_attackDefend.lv_lastWinningTeam == 0)) {
        autoE9A39094_g = GameAttributePlayersForTeam(libGame_gv_teamOrderIndex_C);
        autoE9A39094_var = -1;
        while (true) {
            	autoE9A39094_var = PlayerGroupNextPlayer(autoE9A39094_g, autoE9A39094_var);
            	if (autoE9A39094_var<0) { break; }
            	libIGHS_gf_SetShuffleScreenExtraInfoTextForPlayer(autoE9A39094_var, StringExternal("Param/Value/lib_MDoE_AD8CFA7F"));
        }
        autoABF12920_g = GameAttributePlayersForTeam(libGame_gv_teamChaosIndex_C);
        autoABF12920_var = -1;
        while (true) {
            	autoABF12920_var = PlayerGroupNextPlayer(autoABF12920_g, autoABF12920_var);
            	if (autoABF12920_var<0) { break; }
            	libIGHS_gf_SetShuffleScreenExtraInfoTextForPlayer(autoABF12920_var, StringExternal("Param/Value/lib_MDoE_8CF81E19"));
        }
    }
    else {
        auto12C611F1_g = GameAttributePlayersForTeam(libGame_gv_teamOrderIndex_C);
        auto12C611F1_var = -1;
        while (true) {
            	auto12C611F1_var = PlayerGroupNextPlayer(auto12C611F1_g, auto12C611F1_var);
            	if (auto12C611F1_var<0) { break; }
            	libIGHS_gf_SetShuffleScreenExtraInfoTextForPlayer(auto12C611F1_var, StringExternal("Param/Value/lib_MDoE_AA2BAFAD"));
        }
        auto57061799_g = GameAttributePlayersForTeam(libGame_gv_teamChaosIndex_C);
        auto57061799_var = -1;
        while (true) {
            	auto57061799_var = PlayerGroupNextPlayer(auto57061799_g, auto57061799_var);
            	if (auto57061799_var<0) { break; }
            	libIGHS_gf_SetShuffleScreenExtraInfoTextForPlayer(auto57061799_var, StringExternal("Param/Value/lib_MDoE_48E17914"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_HeroSelectSetExtraInfoText_Init () {
    libMDoE_gt_HeroSelectSetExtraInfoText = TriggerCreate("libMDoE_gt_HeroSelectSetExtraInfoText_Func");
    libIGHS_gf_ShufflePickUIShown(libMDoE_gt_HeroSelectSetExtraInfoText);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MDoE UI Mod Initialize
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_MDoEUIModInitialize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libMDoE_gf_MDoEUIInit(libUIUI_gv_mapMechanicsPanel.lv_mainPanel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_MDoEUIModInitialize_Init () {
    libMDoE_gt_MDoEUIModInitialize = TriggerCreate("libMDoE_gt_MDoEUIModInitialize_Func");
    libCore_gf_IncludeModInitialization(libMDoE_gt_MDoEUIModInitialize);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MDoE UI Handler
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_MDoEUIHandler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_state;
    int lv_lastState;
    int lv_itTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        lv_lastState = lv_state;
        if (true) {
            lv_state = libMDoE_ge_MDoEUIModes_AltarWarning;
            if ((lv_state != lv_lastState)) {
                libMDoE_gf_MMTVUISetMode(lv_state);
            }

            lv_lastState = lv_state;
        }
        else if (true) {
            lv_state = libMDoE_ge_MDoEUIModes_AltarSpawned;
            if ((lv_state != lv_lastState)) {
                libMDoE_gf_MMTVUISetMode(lv_state);
            }

            lv_lastState = lv_state;
        }
        else if (true) {
            lv_state = libMDoE_ge_MDoEUIModes_Idle;
            if ((lv_state != lv_lastState)) {
                libMDoE_gf_MMTVUISetMode(lv_state);
            }

            lv_lastState = lv_state;
        }
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_MDoEUIHandler_Init () {
    libMDoE_gt_MDoEUIHandler = TriggerCreate("libMDoE_gt_MDoEUIHandler_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Display Round Instructions
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_DisplayRoundInstructions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(libMDoE_gv_mDoeUITopPanel.lv_roundInstructionsTitle, StringExternal("Param/Value/lib_MDoE_47B2102E"), libGame_gv_teams[libAtDe_gv_attackDefend.lv_attackingTeam].lv_teamPlayerGroup);
    libNtve_gf_SetDialogItemText(libMDoE_gv_mDoeUITopPanel.lv_roundInstructionsTitle, StringExternal("Param/Value/lib_MDoE_B78FB935"), libGame_gv_teams[libAtDe_gv_attackDefend.lv_defendingTeam].lv_teamPlayerGroup);
    libNtve_gf_SetDialogItemText(libMDoE_gv_mDoeUITopPanel.lv_roundInstructionsDescription, StringExternal("Param/Value/lib_MDoE_9961BF04"), libGame_gv_teams[libAtDe_gv_attackDefend.lv_attackingTeam].lv_teamPlayerGroup);
    libNtve_gf_SetDialogItemText(libMDoE_gv_mDoeUITopPanel.lv_roundInstructionsDescription, StringExternal("Param/Value/lib_MDoE_BC4FE98D"), libGame_gv_teams[libAtDe_gv_attackDefend.lv_defendingTeam].lv_teamPlayerGroup);
    DialogControlSetVisible(libMDoE_gv_mDoeUITopPanel.lv_roundInstructionsPanel, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_DisplayRoundInstructions_Init () {
    libMDoE_gt_DisplayRoundInstructions = TriggerCreate("libMDoE_gt_DisplayRoundInstructions_Func");
    libGame_gf_GameOpenTimerStarted(libMDoE_gt_DisplayRoundInstructions);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MDoE_UI Ship Progress/Damage Initialize
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_DoEsUICoreHealthInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_itTeam;
    int lv_healthLabel;
    int[3] lv_obsOgHealthLabels;

    // Automatic Variable Declarations
    const int auto0CDDA460_ae = libCore_gv_bALMaxTeams;
    const int auto0CDDA460_ai = 1;
    int auto7F0E69FA_val;

    // Variable Initialization
    lv_healthLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_obsOgHealthLabels[init_i] = c_invalidDialogControlId;
    }

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamLevelInfoPanel[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamLevelInfoPanel[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamLevelInfoPanel[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamLevelInfoPanel[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), false);
    DialogControlCreateInPanelFromTemplate(libUIUI_gv_uIGameUIHandles.lv_fullscreenUpperContainer, c_triggerControlTypePanel, "BlackheartsRevengeTopBar/BlackheartsRevengeTopNotificationPanel");
    libMDoE_gv_mDoeUITopPanel.lv_topNotificationPanel = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(libUIUI_gv_uIPartyFrame.lv_mainPanel, c_triggerControlTypePanel, "BlackheartsRevengeTopBar/BlackheartsRevengeScorePanel");
    libMDoE_gv_mDoeUITopPanel.lv_scorePanel = DialogControlLastCreated();
    DialogControlHookup(libMDoE_gv_mDoeUITopPanel.lv_scorePanel, c_triggerControlTypeLabel, "Team1Score/ScoreHint");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_MDoE_D39D28D8"), PlayerGroupAll());
    libMDoE_gv_mDoeUITopPanel.lv_scoreHintLabel[libAtDe_gv_attackDefend.lv_attackingTeam] = DialogControlLastCreated();
    DialogControlHookup(libMDoE_gv_mDoeUITopPanel.lv_scorePanel, c_triggerControlTypeLabel, "Team2Score/ScoreHint");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_MDoE_545A9C92"), PlayerGroupAll());
    libMDoE_gv_mDoeUITopPanel.lv_scoreHintLabel[libAtDe_gv_attackDefend.lv_defendingTeam] = DialogControlLastCreated();
    DialogControlHookup(libMDoE_gv_mDoeUITopPanel.lv_helpText, c_triggerControlTypeLabel, "HelpText");
    libMDoE_gv_mDoeUITopPanel.lv_helpText = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_MDoE_3E4FB237"), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_MDoE_06EB0330"), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false));
    DialogControlHookup(libMDoE_gv_mDoeUITopPanel.lv_scorePanel, c_triggerControlTypeImage, "CannonTop");
    libMDoE_gv_mDoeUITopPanel.lv_cannonballIcon = DialogControlLastCreated();
    DialogControlHookup(libMDoE_gv_mDoeUITopPanel.lv_scorePanel, c_triggerControlTypeImage, "ShipTop");
    libMDoE_gv_mDoeUITopPanel.lv_boatIcon = DialogControlLastCreated();
    libMDoE_gf_MDoEUIUpdateCannonBarrageShotsRemaining2();
    DialogControlHookup(libMDoE_gv_mDoeUITopPanel.lv_scorePanel, c_triggerControlTypeLabel, "Team1Score/Score");
    libMDoE_gv_mDoeUITopPanel.lv_coreHealthLabel[libAtDe_gv_attackDefend.lv_defendingTeam] = DialogControlLastCreated();
    libMDoE_gv_mDoeUITopPanel.lv_boatProgressLabel[libAtDe_gv_attackDefend.lv_attackingTeam] = DialogControlLastCreated();
    DialogControlHookup(libMDoE_gv_mDoeUITopPanel.lv_scorePanel, c_triggerControlTypeLabel, "Team2Score/Score");
    libMDoE_gv_mDoeUITopPanel.lv_coreHealthLabel[libAtDe_gv_attackDefend.lv_attackingTeam] = DialogControlLastCreated();
    libMDoE_gv_mDoeUITopPanel.lv_boatProgressLabel[libAtDe_gv_attackDefend.lv_defendingTeam] = DialogControlLastCreated();
    DialogControlHookup(libMDoE_gv_mDoeUITopPanel.lv_topNotificationPanel, c_triggerControlTypeLabel, "Team1NotificationFrame/NotificationLabel");
    libMDoE_gv_mDoeUITopPanel.lv_shotsFiredPanel[libAtDe_gv_attackDefend.lv_attackingTeam] = DialogControlLastCreated();
    DialogControlHookup(libMDoE_gv_mDoeUITopPanel.lv_topNotificationPanel, c_triggerControlTypeLabel, "Team2NotificationFrame/NotificationLabel");
    libMDoE_gv_mDoeUITopPanel.lv_shotsFiredPanel[libAtDe_gv_attackDefend.lv_defendingTeam] = DialogControlLastCreated();
    DialogControlHookup(libMDoE_gv_mDoeUITopPanel.lv_scorePanel, c_triggerControlTypeLabel, "Team1Score/ScoreSuffix");
    libMDoE_gv_mDoeUITopPanel.lv_scoreSuffixLabel[libAtDe_gv_attackDefend.lv_attackingTeam] = DialogControlLastCreated();
    DialogControlHookup(libMDoE_gv_mDoeUITopPanel.lv_scorePanel, c_triggerControlTypeLabel, "Team2Score/ScoreSuffix");
    libMDoE_gv_mDoeUITopPanel.lv_scoreSuffixLabel[libAtDe_gv_attackDefend.lv_defendingTeam] = DialogControlLastCreated();
    DialogControlHookup(libMDoE_gv_mDoeUITopPanel.lv_scorePanel, c_triggerControlTypeProgressBar, "Team1Score/ShipProgress/ShipProgressBar");
    libMDoE_gv_mDoeUITopPanel.lv_boatProgressBar[libAtDe_gv_attackDefend.lv_attackingTeam] = DialogControlLastCreated();
    DialogControlHookup(libMDoE_gv_mDoeUITopPanel.lv_scorePanel, c_triggerControlTypeProgressBar, "Team2Score/ShipProgress/ShipProgressBar");
    libMDoE_gv_mDoeUITopPanel.lv_boatProgressBar[libAtDe_gv_attackDefend.lv_defendingTeam] = DialogControlLastCreated();
    lv_itTeam = 1;
    for ( ; ( (auto0CDDA460_ai >= 0 && lv_itTeam <= auto0CDDA460_ae) || (auto0CDDA460_ai < 0 && lv_itTeam >= auto0CDDA460_ae) ) ; lv_itTeam += auto0CDDA460_ai ) {
        DialogControlHookup(libUIUI_gv_uIObserverUI.lv_coreHealthUnitStatusFrames[lv_itTeam], c_triggerControlTypeUnitStatusLabel, "HealthLabel");
        DialogControlFadeTransparency(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], 0.0, 100.0);
        lv_obsOgHealthLabels[lv_itTeam] = DialogControlLastCreated();
        libMDoE_gv_mDoeUITopPanel.lv_coreHealthLabelObs[lv_itTeam] = DialogControlLastCreated();
        auto7F0E69FA_val = lv_itTeam;
        if (auto7F0E69FA_val == 1) {
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ObsBar_CorePercentage_L", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
            DialogControlSetPositionRelative(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], c_anchorCenter, lv_obsOgHealthLabels[lv_itTeam], c_anchorCenter, -65, 0);
        }
        else if (auto7F0E69FA_val == 2) {
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ObsBar_CorePercentage_R", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
            DialogControlSetPositionRelative(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], c_anchorCenter, lv_obsOgHealthLabels[lv_itTeam], c_anchorCenter, 65, 0);
        }
        else {
        }
        DialogControlSendAnimationEvent(lv_obsOgHealthLabels[lv_itTeam], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "ToDCoreHealthLabel");
        DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_coreHealthUnitStatusFrames[lv_itTeam], PlayerGroupAll(), true);
        libMDoE_gf_DoEsUIUpdateCoreHealth();
    }
    DialogControlCreateInPanelFromTemplate(libUIUI_gv_uIGameUIHandles.lv_fullscreenUpperContainer, c_triggerControlTypePanel, "BlackheartsRevengeTopBar/RoundInstructions");
    libMDoE_gv_mDoeUITopPanel.lv_roundInstructionsPanel = DialogControlLastCreated();
    DialogControlHookup(libMDoE_gv_mDoeUITopPanel.lv_roundInstructionsPanel, c_triggerControlTypeLabel, "RoundTitleFrame/TitleLabel");
    libMDoE_gv_mDoeUITopPanel.lv_roundInstructionsTitle = DialogControlLastCreated();
    DialogControlHookup(libMDoE_gv_mDoeUITopPanel.lv_roundInstructionsPanel, c_triggerControlTypeLabel, "RoundTitleFrame/RoundDescriptionLabel");
    libMDoE_gv_mDoeUITopPanel.lv_roundInstructionsDescription = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_DoEsUICoreHealthInitialize_Init () {
    libMDoE_gt_DoEsUICoreHealthInitialize = TriggerCreate("libMDoE_gt_DoEsUICoreHealthInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MDoE_UI On Ship Damage Update
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_DoEsUICoreHealthUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gf_TeamNumberOfPlayer(EventPlayer()) == libAtDe_gv_attackDefend.lv_attackingTeam)) {
        libAtDe_gv_attackDefend.lv_score[libAtDe_gv_attackDefend.lv_defendingTeam] = (libAtDe_gv_attackDefend.lv_score[libAtDe_gv_attackDefend.lv_defendingTeam] + 1);
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) == 1.0)) {
            libMDoE_gv_mDoE_Boat[libAtDe_gv_attackDefend.lv_attackingTeam].lv_boatHasGT20Life = false;
            libMDoE_gf_MDoETransmissionBoatHealth20();
        }

        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) == 2.0)) {
            libMDoE_gv_mDoE_Boat[libAtDe_gv_attackDefend.lv_attackingTeam].lv_boatHasGT40Life = false;
            libMDoE_gf_MDoETransmissionBoatHealth40();
        }

        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) == 3.0)) {
            libMDoE_gf_MDoETransmissionBoatHealth60();
        }

        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) == 4.0)) {
            libMDoE_gf_MDoETransmissionBoatHealth80();
        }

    }

    libMDoE_gf_DoEsUIUpdateCoreHealth();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_DoEsUICoreHealthUpdate_Init () {
    libMDoE_gt_DoEsUICoreHealthUpdate = TriggerCreate("libMDoE_gt_DoEsUICoreHealthUpdate_Func");
    TriggerAddEventUnitDamaged(libMDoE_gt_DoEsUICoreHealthUpdate, UnitRefFromVariable("libGame_gv_teams[1].lv_core"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libMDoE_gt_DoEsUICoreHealthUpdate, UnitRefFromVariable("libGame_gv_teams[2].lv_core"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Round Ends Change Top Bar
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_RoundEndsChangeTopBar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_Team;

    // Automatic Variable Declarations
    const int autoFAB156B0_ae = libCore_gv_bALMaxTeams;
    const int autoFAB156B0_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_coreHealthUnitStatusFrames[libAtDe_gv_attackDefend.lv_attackingTeam], PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemColor(libUIUI_gv_topBarPanel.lv_coreHealthUnitStatusFrames[libAtDe_gv_attackDefend.lv_defendingTeam], Color(38.04, 38.04, 38.04), PlayerGroupAll());
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_topBarPanel.lv_coreHealthUnitStatusFrames[libGame_gv_teamChaosIndex_C], libGame_gv_teams[libAtDe_gv_attackDefend.lv_attackingTeam].lv_core, PlayerGroupAll());
    DialogControlSetVisible(libMDoE_gv_mDoeUITopPanel.lv_coreHealthLabel[libAtDe_gv_attackDefend.lv_attackingTeam], PlayerGroupAll(), true);
    DialogControlSetVisible(libMDoE_gv_mDoeUITopPanel.lv_coreHealthLabelObs[libAtDe_gv_attackDefend.lv_attackingTeam], PlayerGroupAll(), true);
    lv_Team = 1;
    for ( ; ( (autoFAB156B0_ai >= 0 && lv_Team <= autoFAB156B0_ae) || (autoFAB156B0_ai < 0 && lv_Team >= autoFAB156B0_ae) ) ; lv_Team += autoFAB156B0_ai ) {
        libMDoE_gf_MDoE_UIUpdateShipProgress(lv_Team);
    }
    libNtve_gf_SetDialogItemText(libMDoE_gv_mDoeUITopPanel.lv_scoreHintLabel[libAtDe_gv_attackDefend.lv_attackingTeam], StringExternal("Param/Value/lib_MDoE_D7412ACA"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libMDoE_gv_mDoeUITopPanel.lv_scoreHintLabel[libAtDe_gv_attackDefend.lv_defendingTeam], StringExternal("Param/Value/lib_MDoE_44841D09"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libMDoE_gv_mDoeUITopPanel.lv_scoreSuffixLabel[libAtDe_gv_attackDefend.lv_defendingTeam], (StringExternal("Param/Value/lib_MDoE_FB602512") + IntToText(libMDoE_gf_GetShotstoWin(libAtDe_gv_attackDefend.lv_attackingTeam))), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libMDoE_gv_mDoeUITopPanel.lv_scoreSuffixLabel[libAtDe_gv_attackDefend.lv_attackingTeam], StringExternal("Param/Value/lib_MDoE_1BDEB05B"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libMDoE_gv_mDoeUITopPanel.lv_helpText, StringExternal("Param/Value/lib_MDoE_843E759F"), libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_attackingTeam, false));
    libNtve_gf_SetDialogItemText(libMDoE_gv_mDoeUITopPanel.lv_helpText, StringExternal("Param/Value/lib_MDoE_2EE4E5FA"), libGame_gf_PlayersOnTeamHeroes(libAtDe_gv_attackDefend.lv_defendingTeam, false));
    libMDoE_gf_DoEsUIUpdateCoreHealth();
    libMDoE_gf_MDoEUIUpdateCannonBarrageShotsRemaining2();
    DialogControlSetAnimationState(libMDoE_gv_mDoeUITopPanel.lv_topNotificationPanel, PlayerGroupAll(), "Round", IntToString(2));
    libMDoE_gv_mDoE_LaunchNumber = 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_RoundEndsChangeTopBar_Init () {
    libMDoE_gt_RoundEndsChangeTopBar = TriggerCreate("libMDoE_gt_RoundEndsChangeTopBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Round
//--------------------------------------------------------------------------------------------------
bool libMDoE_gt_EndRound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAtDe_gf_SendEventAttackDefendRoundEnds(StringToInt(StringWord(EventChatMessage(false), 2)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMDoE_gt_EndRound_Init () {
    libMDoE_gt_EndRound = TriggerCreate("libMDoE_gt_EndRound_Func");
    TriggerAddEventChatMessage(libMDoE_gt_EndRound, c_playerAny, "-endround", false);
}

void libMDoE_InitTriggers () {
    libMDoE_gt_IncludeDocksEscort_Init();
    libMDoE_gt_MDoEInit_Init();
    libMDoE_gt_MDoE_InitTowerCannonGoals_Init();
    libMDoE_gt_MDoE_AddInterceptGoaltoHeroesLeavingSafeZone_Init();
    libMDoE_gt_MDoE_RemoveInterceptGoalfromHeroesinSafeZone_Init();
    libMDoE_gt_MDoEInitPingData_Init();
    libMDoE_gt_InitialOpenTheGatesTimerStarts_Init();
    libMDoE_gt_OpenTheGameTimerExpires_Init();
    libMDoE_gt_RoundEnds_Init();
    libMDoE_gt_CoreDies_Init();
    libMDoE_gt_TeamsUpdated_Init();
    libMDoE_gt_BoatAttackTimerExpires_Init();
    libMDoE_gt_MDoE_PlayBoatSubmergeAnims_Init();
    libMDoE_gt_AttackCoreTracker_Init();
    libMDoE_gt_CannonballIsFired_Init();
    libMDoE_gt_HideCannonTextTagsOnRoundEnd_Init();
    libMDoE_gt_RoundEndsClearAmmo_Init();
    libMDoE_gt_HeroSwappedUpdateScoreValues_Init();
    libMDoE_gt_SpawnNewAmmoCache_Init();
    libMDoE_gt_DoEsCannonballHandedIn_Init();
    libMDoE_gt_DoEsHeroPicksUpCannonball_Init();
    libMDoE_gt_DoEsHeroLootsAmmoCacher_Init();
    libMDoE_gt_CannonballTimesOut_Init();
    libMDoE_gt_HeroDiesWithCannonball_Init();
    libMDoE_gt_DoEs_HeroUsedTeleporter_Init();
    libMDoE_gt_BoatDies_Init();
    libMDoE_gt_HeroSelectSetExtraInfoText_Init();
    libMDoE_gt_MDoEUIModInitialize_Init();
    libMDoE_gt_MDoEUIHandler_Init();
    libMDoE_gt_DisplayRoundInstructions_Init();
    libMDoE_gt_DoEsUICoreHealthInitialize_Init();
    libMDoE_gt_DoEsUICoreHealthUpdate_Init();
    libMDoE_gt_RoundEndsChangeTopBar_Init();
    libMDoE_gt_EndRound_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libMDoE_InitLib_completed = false;

void libMDoE_InitLib () {
    if (libMDoE_InitLib_completed) {
        return;
    }

    libMDoE_InitLib_completed = true;

    libMDoE_InitLibraries();
    libMDoE_InitVariables();
    libMDoE_InitTriggers();
}

