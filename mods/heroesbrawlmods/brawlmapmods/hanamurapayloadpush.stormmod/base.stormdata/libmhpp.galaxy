include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/MapMechanicsLib"
include "TriggerLibs/UILib"
include "TriggerLibs/StartingExperienceLib"
include "TriggerLibs/SoundLib"
include "LibIGHS"

include "LibMHPP_h"

//--------------------------------------------------------------------------------------------------
// Library: Hanamura Payload Push
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libMHPP_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libMapM_InitVariables();
    libUIUI_InitVariables();
    libStEx_InitVariables();
    libSond_InitVariables();
    libIGHS_InitVariables();
}

// Variable Initialization
bool libMHPP_InitVariables_completed = false;

void libMHPP_InitVariables () {
    int init_i1;

    if (libMHPP_InitVariables_completed) {
        return;
    }

    libMHPP_InitVariables_completed = true;

    libMHPP_gv_mHPP_CheckPointReachedBonusTime_C = 135.0;
    libMHPP_gv_mHPP_DefenseTotalTimeToWin = libMHPP_gv_mHPP_DefenseTimeToWin_C;
    libMHPP_gv_mHPP_DefenseTimeToWinTimer = TimerCreate();
    libMHPP_gv_payloadPath.lv_lastCheckpointReachedIndex = 1;
    libMHPP_gv_payloadPath.lv_transmissionAnnouncementCD = 30.0;
    libMHPP_gv_payloadPath.lv_currentPathIndex = 1;
    libMHPP_gv_payloadPath.lv_pathIndexMax = 1;
    libMHPP_gv_payload.lv_overtimeTimer = TimerCreate();
    libMHPP_gv_payload.lv_overtimeTime = 3.0;
    libMHPP_gv_payload.lv_futureCheckPointIndex = 1;
    libMHPP_gv_mHPPTransmissions.lv_approachingCheckpointWarningTimerCD = TimerCreate();
    libMHPP_gv_mHPPTransmissions.lv_approachingCheckpointAnnounceCDTime = 90.0;
    libMHPP_gv_mHPPTransmissions.lv_approachingDestinationWarningTimerCD = TimerCreate();
    libMHPP_gv_mHPPTransmissions.lv_approachingDestinationAnnounceCDTime = 120.0;
    libMHPP_gv_mHPPTransmissions.lv_payloadIsStoppedWarningTimerCD = TimerCreate();
    libMHPP_gv_mHPPTransmissions.lv_payloadIsStoppedAnnounceCDTime = 120.0;
    libMHPP_gv_mHPPTransmissions.lv_payloadIsMovingWarningTimerCD = TimerCreate();
    libMHPP_gv_mHPPTransmissions.lv_payloadIsMovingAnnounceCDTime = 180.0;
    libMHPP_gv_mHPPUI.lv_topPanel = c_invalidDialogControlId;
    libMHPP_gv_mHPPUI.lv_topPanel_HelpText = c_invalidDialogControlId;
    libMHPP_gv_mHPPUI.lv_topPanel_RoundTime = c_invalidDialogControlId;
    libMHPP_gv_mHPPUI.lv_topPanel_PayloadProgressLabel = c_invalidDialogControlId;
    libMHPP_gv_mHPPUI.lv_mHPP_UI_PayloadProgressBar = c_invalidDialogControlId;
    libMHPP_gv_mHPPUI.lv_DoEs_CoreHealthLabel3 = c_invalidDialogControlId;
    libMHPP_gv_mHPPUI.lv_DoEs_CoreHealthLabel2 = c_invalidDialogControlId;
    libMHPP_gv_mHPPUI.lv_topPanel_OvertimeContainer = c_invalidDialogControlId;
    libMHPP_gv_mHPPUI.lv_topPanel_OvertimeProgressBar = c_invalidDialogControlId;
    libMHPP_gv_mHPPUI.lv_topPanel_OvertimeProgressBarFillImageContainer = c_invalidDialogControlId;
    libMHPP_gv_mHPPUI.lv_topPanel_OvertimeProgressBarGlow = c_invalidDialogControlId;
    libMHPP_gv_mHPPUI.lv_mapMechanic = c_invalidDialogControlId;
    libMHPP_gv_mHPPUI.lv_payloadFrame = c_invalidDialogControlId;
    libMHPP_gv_mHPPUI.lv_payloadProgress = c_invalidDialogControlId;
    libMHPP_gv_mHPPUI.lv_timeLeftNotificationFrame = c_invalidDialogControlId;
    libMHPP_gv_mHPPUI.lv_timeLeftNotificationLabel = c_invalidDialogControlId;
    libMHPP_gv_mHPPUI.lv_mapMechanic_PayloadUnitStatus = c_invalidDialogControlId;
    libMHPP_gv_mHPPUI.lv_mHPP_UI_PayloadProgressBar2 = c_invalidDialogControlId;
    libMHPP_gv_mHPPUI.lv_mapMechanic_PayloadProgressLabel = c_invalidDialogControlId;
    libMHPP_gv_mHPPUI.lv_mapMechanic_PayloadProgressBarFillImageContainer = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerFrames[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerBars[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerImages[init_i1] = c_invalidDialogControlId;
    }
}

// Functions
void libMHPP_gf_MHPPCheckpoint () {
    // Automatic Variable Declarations
    // Implementation
    if ((libMHPP_gv_payloadPath.lv_checkpointReached[1] == false)) {
        libMHPP_gv_payloadPath.lv_checkpointReached[1] = true;
        DialogControlSetVisible(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerLabels[1], PlayerGroupAll(), false);
        DialogControlSendAnimationEvent(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerImages[1], PlayerGroupAll(), "ChangeColor");
        libMHPP_gv_mHPP_DefenderDeathTimeBonus += 2.5;
    }
    else {
        if ((libMHPP_gv_payloadPath.lv_checkpointReached[2] == false)) {
            libMHPP_gv_payloadPath.lv_checkpointReached[2] = true;
            DialogControlSetVisible(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerLabels[2], PlayerGroupAll(), false);
            DialogControlSendAnimationEvent(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerImages[2], PlayerGroupAll(), "ChangeColor");
            libMHPP_gv_mHPP_DefenderDeathTimeBonus += 2.5;
        }
    }
    DialogControlSendAnimationEvent(libMHPP_gv_mHPPUI.lv_DoEs_CoreHealthLabel3, PlayerGroupAll(), "Show");
    libMHPP_gf_MHPP_TransmissionCheckpointReached();
    libMHPP_gf_MHPP_TransmissionTimeAdded();
    SoundPlayForPlayer(SoundLink("CheckPointReachedAllySound", -1), c_maxPlayers, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("CheckPointReachedAllyStinger", -1), c_maxPlayers, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("CheckPointReachedEnemySound", -1), c_maxPlayers, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("CheckPointReachedEnemyStinger", -1), c_maxPlayers, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), 100.0, 0.0);
}

void libMHPP_gf_MHPPOvertime () {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TimerStart(libMHPP_gv_payload.lv_overtimeTimer, libMHPP_gv_payload.lv_overtimeTime, false, c_timeGame);
    libMHPP_gv_payload.lv_overtimeTime = 3.0;
    libCore_gv_bALDeathTimeOverride = 12.5;
    libMHPP_gf_MHPP_TransmissionOvertime();
    libMHPP_gf_MHPP_UIOvertime();
    TriggerEnable(libMHPP_gt_MHPPOvertimeTimerExpires, true);
    while (true) {
        if (((TimerGetRemaining(libMHPP_gv_mHPP_DefenseTimeToWinTimer) > 0.0) || (libGame_gv_gameOver == true))) {
            libCore_gv_bALDeathTimeOverride = 9.0;
            libNtve_gf_StopTimer(libMHPP_gv_payload.lv_overtimeTimer);
            TriggerEnable(libMHPP_gt_MHPPOvertimeTimerExpires, false);
            return ;
        }

        if (((UnitTechTreeBehaviorCount(libMHPP_gv_payload.lv_payload, "PayloadAllyProximityBehavior1", c_techCountQueuedOrBetter) >= 1) || (UnitTechTreeBehaviorCount(libMHPP_gv_payload.lv_payload, "PayloadAllyProximityBehavior2", c_techCountQueuedOrBetter) >= 1) || (UnitTechTreeBehaviorCount(libMHPP_gv_payload.lv_payload, "PayloadAllyProximityBehavior3", c_techCountQueuedOrBetter) >= 1))) {
            if ((lv_count < 240)) {
                lv_count += 1;
                libMHPP_gv_payload.lv_overtimeTime = 3.0;
            }
            else {
                if ((libMHPP_gv_payload.lv_overtimeTime >= 1.0)) {
                    libMHPP_gv_payload.lv_overtimeTime -= 0.01;
                }

            }
            TimerStart(libMHPP_gv_payload.lv_overtimeTimer, libMHPP_gv_payload.lv_overtimeTime, false, c_timeGame);
        }

        Wait(0.0625, c_timeGame);
    }
}

void libMHPP_gf_MHPPGameOver (int lp_winningTeam) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto0A32B30D_g;

    // Variable Initialization

    // Implementation
    TriggerEnable(libMHPP_gt_PayloadLosesReverseBehavior, false);
    TriggerEnable(libMHPP_gt_PayloadGainsContestedBehavior, false);
    libMHPP_gf_PlayGameOverStinger(lp_winningTeam);
    libGame_gf_PlayVictoryDefeatVO(lp_winningTeam);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "VictoryExplosionDummyUnit", c_unitCreateIgnorePlacement, libGame_gf_ComputerPlayerInTeam(lp_winningTeam), UnitGetPosition(libMHPP_gv_payload.lv_payload), null);
    UnitCreateEffectUnit(UnitLastCreated(), "PayloadVictoryExplosionDummy", libMHPP_gv_payload.lv_payload);
    SoundPlayForPlayer(SoundLink("Payload_Brawl_Complete_Sound", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libGame_gv_gameOver = true;
    GameSetGlobalTimeScale(0.5);
    TimerPause(libGame_gv_gameTimer, true);
    TimerPause(libGame_gv_matchGameplayTimer, true);
    TriggerQueueClear(c_triggerQueueRemove);
    TransmissionClearAll();
    auto0A32B30D_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto0A32B30D_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	libGame_gf_AnnouncementClearQueueForPlayer(lv_itPlayer);
    }
    libGame_gv_announcement_SystemEnabled = false;
    Wait(3.0, c_timeGame);
    libSond_gf_MuteMostSoundChannelsForGameOverState(true);
    libGame_gf_GameOver(lp_winningTeam);
}

trigger auto_libMHPP_gf_PlayGameOverStinger_Trigger = null;
int auto_libMHPP_gf_PlayGameOverStinger_lp_winningTeam;

void libMHPP_gf_PlayGameOverStinger (int lp_winningTeam) {
    auto_libMHPP_gf_PlayGameOverStinger_lp_winningTeam = lp_winningTeam;

    if (auto_libMHPP_gf_PlayGameOverStinger_Trigger == null) {
        auto_libMHPP_gf_PlayGameOverStinger_Trigger = TriggerCreate("auto_libMHPP_gf_PlayGameOverStinger_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_PlayGameOverStinger_Trigger, false, false);
}

bool auto_libMHPP_gf_PlayGameOverStinger_TriggerFunc (bool testConds, bool runActions) {
    int lp_winningTeam = auto_libMHPP_gf_PlayGameOverStinger_lp_winningTeam;

    // Automatic Variable Declarations
    // Implementation
    libSond_gf_SoundtrackSetUniqueSoundtrackState(false);
    if ((lp_winningTeam == 0)) {
        libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_Stinger_Defeat", libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup);
        libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_Stinger_Defeat", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup);
    }
    else {
        libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_Stinger_Victory", libGame_gf_PlayersOnTeamHeroes(lp_winningTeam, false));
        libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_Stinger_Defeat", libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeam(lp_winningTeam), false));
    }
    return true;
}

void libMHPP_gf_InitPayloadPath () {
    // Variable Declarations
    int lv_itPathPoint;

    // Automatic Variable Declarations
    int auto074BC04B_ae;
    const int auto074BC04B_ai = 1;

    // Variable Initialization

    // Implementation
    auto074BC04B_ae = libMHPP_gv_payloadPath.lv_finalWaypointIndex;
    lv_itPathPoint = 1;
    for ( ; ( (auto074BC04B_ai >= 0 && lv_itPathPoint <= auto074BC04B_ae) || (auto074BC04B_ai < 0 && lv_itPathPoint >= auto074BC04B_ae) ) ; lv_itPathPoint += auto074BC04B_ai ) {
        if ((libMHPP_gv_payloadPath.lv_pathPointIsWaypoint[lv_itPathPoint] == true)) {
            libNtve_gf_UnitCreateFacingPoint(1, "PayloadCheckpointUnit", 0, libStEx_gv_pLAYER_11_ORDER, libMHPP_gv_payloadPath.lv_path[lv_itPathPoint], libMHPP_gv_payloadPath.lv_path[(lv_itPathPoint-1)], null);
            libMHPP_gv_payloadPath.lv_payloadCheckpointUnit[lv_itPathPoint] = UnitLastCreated();
            libNtve_gf_UnitCreateFacingPoint(1, "PayloadCheckpointUnitEnemy", 0, libStEx_gv_pLAYER_11_ORDER, libMHPP_gv_payloadPath.lv_path[lv_itPathPoint], libMHPP_gv_payloadPath.lv_path[(lv_itPathPoint+1)], null);
            libMHPP_gv_payloadPath.lv_payloadCheckpointUnitEnemy[lv_itPathPoint] = UnitLastCreated();
            TextTagCreate(StringExternal("Param/Value/lib_MHPP_F431F69A"), 18, UnitGetPosition(UnitLastCreated()), 1.0, true, false, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false));
            libMHPP_gv_payloadPath.lv_checkpointTextTagAlly[lv_itPathPoint] = TextTagLastCreated();
            TextTagCreate(StringExternal("Param/Value/lib_MHPP_A0175154"), 18, UnitGetPosition(UnitLastCreated()), 1.0, true, true, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false));
            libMHPP_gv_payloadPath.lv_checkpointTextTagEnemy[lv_itPathPoint] = TextTagLastCreated();
            if ((libMHPP_gv_payloadPath.lv_checkpoint[1] == 0)) {
                libMHPP_gv_payloadPath.lv_checkpoint[1] = lv_itPathPoint;
                libMHPP_gv_payloadPath.lv_checkpointDistance[1] = libMHPP_gf_CalculatePayloadTravelDistanceToCheckPoint(1);
                libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkers[1] = (libMHPP_gv_payloadPath.lv_checkpointDistance[1]/libMHPP_gv_payloadPath.lv_totalDistanceToTravel);
            }
            else {
                libMHPP_gv_payloadPath.lv_checkpoint[2] = lv_itPathPoint;
                libMHPP_gv_payloadPath.lv_checkpointDistance[2] = libMHPP_gf_CalculatePayloadTravelDistanceToCheckPoint(2);
                libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkers[2] = (libMHPP_gv_payloadPath.lv_checkpointDistance[2]/libMHPP_gv_payloadPath.lv_totalDistanceToTravel);
            }
        }

    }
    libNtve_gf_UnitCreateFacingPoint(1, "PayloadDestinationMinimapIcon", 0, libCore_gv_cOMPUTER_Neutral, libMHPP_gv_payloadPath.lv_path[libMHPP_gv_payloadPath.lv_finalWaypointIndex], libMHPP_gv_payloadPath.lv_path[(libMHPP_gv_payloadPath.lv_finalWaypointIndex-1)], null);
    libMHPP_gv_payloadPath.lv_payloadDestinationUnit = UnitLastCreated();
    TextTagCreate(StringExternal("Param/Value/lib_MHPP_CFD3D9DA"), 18, UnitGetPosition(UnitLastCreated()), 1.0, true, false, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false));
    TextTagCreate(StringExternal("Param/Value/lib_MHPP_FEC5B9C1"), 18, UnitGetPosition(UnitLastCreated()), 1.0, true, true, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false));
    libNtve_gf_UnitCreateFacingPoint(1, "PayloadDestinationPingTargetUnit", 0, libStEx_gv_pLAYER_11_ORDER, libMHPP_gv_payloadPath.lv_path[libMHPP_gv_payloadPath.lv_finalWaypointIndex], libMHPP_gv_payloadPath.lv_path[(libMHPP_gv_payloadPath.lv_finalWaypointIndex-1)], null);
    libMHPP_gf_PayloadCreateMinimapPath(libMHPP_gv_payload.lv_payload);
}

void libMHPP_gf_PayloadCreateMinimapPath (unit lp_payloadUnit) {
    // Variable Declarations
    int lv_finalWaypointIndex;
    int lv_itWaypoint;

    // Automatic Variable Declarations
    int autoD5752285_ae;
    const int autoD5752285_ai = 1;

    // Variable Initialization
    lv_itWaypoint = 2;

    // Implementation
    if ((libMHPP_gv_payloadPath.lv_pathDisplay != 0)) {
        PathClearWayPoints(libMHPP_gv_payloadPath.lv_pathDisplay);
        PathDestroy(libMHPP_gv_payloadPath.lv_pathDisplay);
        libMHPP_gv_payloadPath.lv_pathDisplay = 0;
    }

    if ((UnitIsAlive(lp_payloadUnit) == false)) {
        return ;
    }

    libMHPP_gv_payloadPath.lv_currentPathIndex = 1;
    libMHPP_gv_payloadPath.lv_pathIndexMax = 1;
    PathCreateForUnit(PlayerGroupAll(), lp_payloadUnit);
    PathSetOwnerPlayerId(PathLastCreated(), libStEx_gv_pLAYER_11_ORDER);
    PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "Assets\\Textures\\storm_waypointline.dds");
    libMHPP_gv_payloadPath.lv_pathDisplay = PathLastCreated();
    PathSetVisible(libMHPP_gv_payloadPath.lv_pathDisplay, c_pathLocationWorld, false);
    lv_finalWaypointIndex = libMHPP_gv_payloadPath.lv_finalWaypointIndex;
    PathSetDestinationPoint(libMHPP_gv_payloadPath.lv_pathDisplay, libMHPP_gv_payloadPath.lv_path[libMHPP_gv_payloadPath.lv_finalWaypointIndex]);
    autoD5752285_ae = libMHPP_gv_payloadPath.lv_finalWaypointIndex;
    lv_itWaypoint = (libMHPP_gv_payloadPath.lv_payloadCurrentIndex + 1);
    for ( ; ( (autoD5752285_ai >= 0 && lv_itWaypoint <= autoD5752285_ae) || (autoD5752285_ai < 0 && lv_itWaypoint >= autoD5752285_ae) ) ; lv_itWaypoint += autoD5752285_ai ) {
        PathAddWayPoint(libMHPP_gv_payloadPath.lv_pathDisplay, libMHPP_gv_payloadPath.lv_path[lv_itWaypoint]);
        libMHPP_gv_payloadPath.lv_pathIndexMax += 1;
    }
}

void libMHPP_gf_CreatePayloadPathBackward (unit lp_payloadUnit) {
    // Variable Declarations
    int lv_finalWaypointIndex;
    int lv_lastReachedCheckpointIndex;
    int lv_itWaypoint;

    // Automatic Variable Declarations
    int auto23E03454_ae;
    const int auto23E03454_ai = -1;

    // Variable Initialization
    lv_itWaypoint = 2;

    // Implementation
    if ((libMHPP_gv_payloadPath.lv_pathDisplay != 0)) {
        PathClearWayPoints(libMHPP_gv_payloadPath.lv_pathDisplay);
        PathDestroy(libMHPP_gv_payloadPath.lv_pathDisplay);
        libMHPP_gv_payloadPath.lv_pathDisplay = 0;
    }

    if ((UnitIsAlive(lp_payloadUnit) == false)) {
        return ;
    }

    libMHPP_gv_payloadPath.lv_currentPathIndex = 1;
    libMHPP_gv_payloadPath.lv_pathIndexMax = 1;
    PathCreateForUnit(PlayerGroupAll(), lp_payloadUnit);
    PathSetOwnerPlayerId(PathLastCreated(), libStEx_gv_pLAYER_11_ORDER);
    PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "Assets\\Textures\\storm_waypointline.dds");
    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
    libMHPP_gv_payloadPath.lv_pathDisplay = PathLastCreated();
    lv_finalWaypointIndex = libMHPP_gv_payloadPath.lv_finalWaypointIndex;
    lv_lastReachedCheckpointIndex = libMHPP_gv_payloadPath.lv_lastCheckpointReachedIndex;
    PathSetDestinationPoint(libMHPP_gv_payloadPath.lv_pathDisplay, libMHPP_gv_payloadPath.lv_path[libMHPP_gv_payloadPath.lv_lastCheckpointReachedIndex]);
    auto23E03454_ae = lv_lastReachedCheckpointIndex;
    lv_itWaypoint = libMHPP_gv_payloadPath.lv_payloadCurrentIndex;
    for ( ; ( (auto23E03454_ai >= 0 && lv_itWaypoint <= auto23E03454_ae) || (auto23E03454_ai < 0 && lv_itWaypoint >= auto23E03454_ae) ) ; lv_itWaypoint += auto23E03454_ai ) {
        PathAddWayPoint(libMHPP_gv_payloadPath.lv_pathDisplay, libMHPP_gv_payloadPath.lv_path[lv_itWaypoint]);
        libMHPP_gv_payloadPath.lv_pathIndexMax += 1;
    }
}

trigger auto_libMHPP_gf_MovePayloadForward_Trigger = null;
unit auto_libMHPP_gf_MovePayloadForward_lp_payloadUnit;

void libMHPP_gf_MovePayloadForward (unit lp_payloadUnit) {
    auto_libMHPP_gf_MovePayloadForward_lp_payloadUnit = lp_payloadUnit;

    if (auto_libMHPP_gf_MovePayloadForward_Trigger == null) {
        auto_libMHPP_gf_MovePayloadForward_Trigger = TriggerCreate("auto_libMHPP_gf_MovePayloadForward_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MovePayloadForward_Trigger, false, false);
}

bool auto_libMHPP_gf_MovePayloadForward_TriggerFunc (bool testConds, bool runActions) {
    unit lp_payloadUnit = auto_libMHPP_gf_MovePayloadForward_lp_payloadUnit;

    // Variable Declarations
    int lv_lastTravelledWaypointIndex;
    int lv_waypointIndex;
    int lv_currentDestinationPointIndex;
    fixed lv_defenseTimeLeft;
    fixed lv_distanceFromDestination;

    // Automatic Variable Declarations
    int autoB8155973_ae;
    const int autoB8155973_ai = 1;

    // Variable Initialization
    lv_lastTravelledWaypointIndex = -1;

    // Implementation
    lv_lastTravelledWaypointIndex = libMHPP_gv_payloadPath.lv_payloadCurrentIndex;
    UnitIssueOrder(lp_payloadUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    autoB8155973_ae = libMHPP_gv_payloadPath.lv_finalWaypointIndex;
    lv_waypointIndex = (lv_lastTravelledWaypointIndex + 1);
    for ( ; ( (autoB8155973_ai >= 0 && lv_waypointIndex <= autoB8155973_ae) || (autoB8155973_ai < 0 && lv_waypointIndex >= autoB8155973_ae) ) ; lv_waypointIndex += autoB8155973_ai ) {
        UnitIssueOrder(lp_payloadUnit, OrderTargetingPoint(AbilityCommand("move", 0), libMHPP_gv_payloadPath.lv_path[lv_waypointIndex]), c_orderQueueAddToEnd);
    }
    lv_currentDestinationPointIndex = (lv_lastTravelledWaypointIndex + 1);
    libMHPP_gf_PayloadCreateMinimapPath(lp_payloadUnit);
    while (true) {
        if ((UnitHasBehavior2(lp_payloadUnit, "PayloadReverseBehavior") == true)) {
            return true;
        }

        if ((UnitOrderCount(lp_payloadUnit) == 0) && (lv_currentDestinationPointIndex == libMHPP_gv_payloadPath.lv_finalWaypointIndex)) {
            libMHPP_gv_payloadPath.lv_payloadCurrentIndex += 1;
            lv_currentDestinationPointIndex += 1;
            DialogControlSetVisible(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerLabels[libMHPP_gv_payload.lv_futureCheckPointIndex], PlayerGroupAll(), false);
            DialogControlSendAnimationEvent(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerImages[3], PlayerGroupAll(), "ChangeColor");
            SoundPlayForPlayer(SoundLink("PayloadDestinationReached", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            UnitKill(libMHPP_gv_payloadPath.lv_payloadDestinationUnit);
            libMHPP_gv_payload.lv_timeWhenLastPayloadReachedDestination = GameGetMissionTime();
            libMHPP_gf_MHPPGameOver(libGame_gv_teamOrderIndex_C);
            Wait(3.0, c_timeGame);
            return true;
        }
        else {
            if ((OrderGetTargetPoint(UnitOrder(lp_payloadUnit, 0)) == libMHPP_gv_payloadPath.lv_path[(lv_currentDestinationPointIndex + 1)])) {
                if ((libMHPP_gv_payloadPath.lv_pathPointIsWaypoint[lv_currentDestinationPointIndex] == true) && (lv_currentDestinationPointIndex != libMHPP_gv_payloadPath.lv_lastCheckpointReachedIndex)) {
                    libMHPP_gv_payload.lv_futureCheckPointIndex += 1;
                    libMHPP_gv_payloadPath.lv_lastCheckpointReachedIndex = lv_currentDestinationPointIndex;
                    lv_defenseTimeLeft = TimerGetRemaining(libMHPP_gv_mHPP_DefenseTimeToWinTimer);
                    libMHPP_gv_mHPP_DefenseTotalTimeToWin += libMHPP_gv_mHPP_CheckPointReachedBonusTime_C;
                    libMHPP_gf_MHPP_UICheckpointRoundTimerUpdate(lv_defenseTimeLeft);
                    libNtve_gf_SendActorMessageToUnit(libMHPP_gv_payloadPath.lv_payloadCheckpointUnit[lv_currentDestinationPointIndex], "Signal Captured");
                    libNtve_gf_SendActorMessageToUnit(libMHPP_gv_payloadPath.lv_payloadCheckpointUnitEnemy[lv_currentDestinationPointIndex], "Signal Captured");
                    TextTagDestroy(libMHPP_gv_payloadPath.lv_checkpointTextTagAlly[lv_currentDestinationPointIndex]);
                    TextTagDestroy(libMHPP_gv_payloadPath.lv_checkpointTextTagEnemy[lv_currentDestinationPointIndex]);
                    libMHPP_gf_MHPPCheckpoint();
                }

                libMHPP_gv_payloadPath.lv_payloadCurrentIndex += 1;
                libMHPP_gv_payloadPath.lv_currentPathIndex += 1;
                lv_currentDestinationPointIndex += 1;
                if ((libMHPP_gv_payloadPath.lv_currentPathIndex < libMHPP_gv_payloadPath.lv_pathIndexMax)) {
                    PathSetWayPointIndexStart(libMHPP_gv_payloadPath.lv_pathDisplay, libMHPP_gv_payloadPath.lv_currentPathIndex);
                }

            }

        }
        libMHPP_gv_payload.lv_totalProgress = (libMHPP_gf_PayloadCurrentDistance() / libMHPP_gv_payloadPath.lv_totalDistanceToTravel);
        libMHPP_gf_MHPP_UIUpdatePayloadProgress();
        if ((libMHPP_gv_payload.lv_futureCheckPointIndex != 3)) {
            if ((libMHPP_gf_CalculatePayloadTravelDistanceToCheckPoint(libMHPP_gv_payload.lv_futureCheckPointIndex) <= 20.0) && (libMHPP_gf_CalculatePayloadTravelDistanceToCheckPoint(libMHPP_gv_payload.lv_futureCheckPointIndex) > 0.0)) {
                DialogControlFadeTransparency(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerImages[libMHPP_gv_payload.lv_futureCheckPointIndex], PlayerGroupAll(), 0.0, (40-(40-(2*libMHPP_gf_CalculatePayloadTravelDistanceToCheckPoint(libMHPP_gv_payload.lv_futureCheckPointIndex)))));
                libMHPP_gf_MHPP_TransmissionApproachingCheckpoint();
            }

            if ((libMHPP_gv_payloadPath.lv_checkpointReached[libMHPP_gv_payload.lv_futureCheckPointIndex] == false) && (libMHPP_gf_CalculatePayloadTravelDistanceToCheckPoint(libMHPP_gv_payload.lv_futureCheckPointIndex) <= 5.0) && (libMHPP_gf_CalculatePayloadTravelDistanceToCheckPoint(libMHPP_gv_payload.lv_futureCheckPointIndex) >= 0.0)) {
                DialogControlSetVisible(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerLabels[libMHPP_gv_payload.lv_futureCheckPointIndex], PlayerGroupAll(), true);
                TextExpressionSetToken("Param/Expression/lib_MHPP_7FFF2225", "A", FixedToText(libMHPP_gf_CalculatePayloadTravelDistanceToCheckPoint(libMHPP_gv_payload.lv_futureCheckPointIndex), 2));
                libNtve_gf_SetDialogItemText(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerLabels[libMHPP_gv_payload.lv_futureCheckPointIndex], TextExpressionAssemble("Param/Expression/lib_MHPP_7FFF2225"), PlayerGroupAll());
            }

        }
        else {
            if ((libMHPP_gv_payload.lv_totalProgress >= 0.9)) {
                libMHPP_gf_MHPP_TransmissionApproachingDestination();
                DialogControlFadeTransparency(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerImages[libMHPP_gv_payload.lv_futureCheckPointIndex], PlayerGroupAll(), 0.0, (40-(40*(10*(libMHPP_gv_payload.lv_totalProgress-.9)))));
                lv_distanceFromDestination = (libMHPP_gv_payloadPath.lv_totalDistanceToTravel-libMHPP_gf_PayloadCurrentDistance());
            }

            if ((lv_distanceFromDestination <= 5.0) && (lv_distanceFromDestination > 0.0)) {
                DialogControlSetVisible(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerLabels[libMHPP_gv_payload.lv_futureCheckPointIndex], PlayerGroupAll(), true);
                TextExpressionSetToken("Param/Expression/lib_MHPP_90D9DFBB", "A", FixedToText(lv_distanceFromDestination, 2));
                libNtve_gf_SetDialogItemText(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerLabels[libMHPP_gv_payload.lv_futureCheckPointIndex], TextExpressionAssemble("Param/Expression/lib_MHPP_90D9DFBB"), PlayerGroupAll());
            }

        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

void libMHPP_gf_MovePayloadBackward (unit lp_payloadUnit) {
    // Variable Declarations
    int lv_lastTravelledWaypointIndex;
    int lv_lastKnownCheckpointIndex;
    int lv_waypointIndex;
    int lv_currentDestinationPointIndex;
    fixed lv_distanceFromDestination;

    // Automatic Variable Declarations
    int autoF10C24CD_ae;
    const int autoF10C24CD_ai = -1;

    // Variable Initialization

    // Implementation
    if ((libMHPP_gv_payloadPath.lv_payloadCurrentIndex < 1)) {
        return ;
    }

    lv_lastTravelledWaypointIndex = libMHPP_gv_payloadPath.lv_payloadCurrentIndex;
    lv_lastKnownCheckpointIndex = libMHPP_gv_payloadPath.lv_lastCheckpointReachedIndex;
    UnitIssueOrder(lp_payloadUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    autoF10C24CD_ae = lv_lastKnownCheckpointIndex;
    lv_waypointIndex = lv_lastTravelledWaypointIndex;
    for ( ; ( (autoF10C24CD_ai >= 0 && lv_waypointIndex <= autoF10C24CD_ae) || (autoF10C24CD_ai < 0 && lv_waypointIndex >= autoF10C24CD_ae) ) ; lv_waypointIndex += autoF10C24CD_ai ) {
        UnitIssueOrder(lp_payloadUnit, OrderTargetingPoint(AbilityCommand("move", 0), libMHPP_gv_payloadPath.lv_path[lv_waypointIndex]), c_orderQueueAddToEnd);
    }
    lv_currentDestinationPointIndex = lv_lastTravelledWaypointIndex;
    libMHPP_gf_CreatePayloadPathBackward(lp_payloadUnit);
    while (true) {
        if ((UnitHasBehavior2(lp_payloadUnit, "PayloadReverseBehavior") == false)) {
            return ;
        }

        if ((UnitHasBehavior2(lp_payloadUnit, "PayloadAtStartPointBehavior") == false) && (UnitOrderCount(lp_payloadUnit) == 0) && (lv_currentDestinationPointIndex == lv_lastKnownCheckpointIndex)) {
            libMHPP_gv_payloadPath.lv_payloadCurrentIndex -= 1;
            lv_currentDestinationPointIndex -= 1;
            UnitBehaviorRemove(lp_payloadUnit, "PayloadReverseBehavior", 1);
            UnitBehaviorAdd(lp_payloadUnit, "PayloadAtStartPointBehavior", lp_payloadUnit, 1);
            return ;
        }
        else {
            if ((OrderGetTargetPoint(UnitOrder(lp_payloadUnit, 0)) == libMHPP_gv_payloadPath.lv_path[(lv_currentDestinationPointIndex - 1)])) {
                libMHPP_gv_payloadPath.lv_payloadCurrentIndex -= 1;
                lv_currentDestinationPointIndex -= 1;
                libMHPP_gv_payloadPath.lv_currentPathIndex += 1;
                if ((libMHPP_gv_payloadPath.lv_currentPathIndex < libMHPP_gv_payloadPath.lv_pathIndexMax)) {
                    PathSetWayPointIndexStart(libMHPP_gv_payloadPath.lv_pathDisplay, libMHPP_gv_payloadPath.lv_currentPathIndex);
                }

            }

        }
        libMHPP_gv_payload.lv_totalProgress = (libMHPP_gf_PayloadCurrentDistance() / libMHPP_gv_payloadPath.lv_totalDistanceToTravel);
        libMHPP_gf_MHPP_UIUpdatePayloadProgress();
        if ((libMHPP_gv_payload.lv_futureCheckPointIndex != 3)) {
            if ((libMHPP_gf_CalculatePayloadTravelDistanceToCheckPoint(libMHPP_gv_payload.lv_futureCheckPointIndex) <= 20.0) && (libMHPP_gf_CalculatePayloadTravelDistanceToCheckPoint(libMHPP_gv_payload.lv_futureCheckPointIndex) > 0.0)) {
                DialogControlFadeTransparency(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerImages[libMHPP_gv_payload.lv_futureCheckPointIndex], PlayerGroupAll(), 0.0, (40-(40-(2*libMHPP_gf_CalculatePayloadTravelDistanceToCheckPoint(libMHPP_gv_payload.lv_futureCheckPointIndex)))));
            }

            if ((libMHPP_gv_payloadPath.lv_checkpointReached[libMHPP_gv_payload.lv_futureCheckPointIndex] == false) && (libMHPP_gf_CalculatePayloadTravelDistanceToCheckPoint(libMHPP_gv_payload.lv_futureCheckPointIndex) <= 5.0) && (libMHPP_gf_CalculatePayloadTravelDistanceToCheckPoint(libMHPP_gv_payload.lv_futureCheckPointIndex) >= 0.0)) {
                DialogControlSetVisible(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerLabels[libMHPP_gv_payload.lv_futureCheckPointIndex], PlayerGroupAll(), true);
                TextExpressionSetToken("Param/Expression/lib_MHPP_7E24F69E", "A", FixedToText(libMHPP_gf_CalculatePayloadTravelDistanceToCheckPoint(libMHPP_gv_payload.lv_futureCheckPointIndex), 2));
                libNtve_gf_SetDialogItemText(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerLabels[libMHPP_gv_payload.lv_futureCheckPointIndex], TextExpressionAssemble("Param/Expression/lib_MHPP_7E24F69E"), PlayerGroupAll());
            }
            else {
                DialogControlSetVisible(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerLabels[libMHPP_gv_payload.lv_futureCheckPointIndex], PlayerGroupAll(), false);
            }
        }
        else {
            if ((libMHPP_gv_payload.lv_totalProgress >= 0.9)) {
                libMHPP_gf_MHPP_TransmissionApproachingDestination();
                DialogControlFadeTransparency(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerImages[libMHPP_gv_payload.lv_futureCheckPointIndex], PlayerGroupAll(), 0.0, (40-(40*(10*(libMHPP_gv_payload.lv_totalProgress-.9)))));
                lv_distanceFromDestination = (libMHPP_gv_payloadPath.lv_totalDistanceToTravel-libMHPP_gf_PayloadCurrentDistance());
            }

            if ((lv_distanceFromDestination <= 5.0) && (lv_distanceFromDestination > 0.0)) {
                DialogControlSetVisible(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerLabels[libMHPP_gv_payload.lv_futureCheckPointIndex], PlayerGroupAll(), true);
                TextExpressionSetToken("Param/Expression/lib_MHPP_489F2AEB", "A", FixedToText(lv_distanceFromDestination, 2));
                libNtve_gf_SetDialogItemText(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerLabels[libMHPP_gv_payload.lv_futureCheckPointIndex], TextExpressionAssemble("Param/Expression/lib_MHPP_489F2AEB"), PlayerGroupAll());
            }

        }
        Wait(0.0625, c_timeGame);
    }
}

fixed libMHPP_gf_CalculatePayloadTravelDistancetoDestination () {
    // Variable Declarations
    fixed lv_totalDistance;
    int lv_itPoints;
    fixed lv_distance;

    // Automatic Variable Declarations
    int autoE2FF339B_ae;
    const int autoE2FF339B_ai = 1;

    // Variable Initialization

    // Implementation
    autoE2FF339B_ae = (libMHPP_gv_payloadPath.lv_finalWaypointIndex - 1);
    lv_itPoints = 1;
    for ( ; ( (autoE2FF339B_ai >= 0 && lv_itPoints <= autoE2FF339B_ae) || (autoE2FF339B_ai < 0 && lv_itPoints >= autoE2FF339B_ae) ) ; lv_itPoints += autoE2FF339B_ai ) {
        lv_distance = DistanceBetweenPoints(libMHPP_gv_payloadPath.lv_path[lv_itPoints], libMHPP_gv_payloadPath.lv_path[(lv_itPoints + 1)]);
        lv_totalDistance += lv_distance;
    }
    return lv_totalDistance;
}

fixed libMHPP_gf_CalculatePayloadTravelDistanceToCheckPoint (int lp_checkPoint) {
    // Variable Declarations
    fixed lv_totalDistance;
    int lv_itPoint;
    fixed lv_distance;
    int lv_checkPointIndex;
    fixed lv_distanceFromCurrentIndex;

    // Automatic Variable Declarations
    int autoCC76550A_ae;
    const int autoCC76550A_ai = 1;
    int auto5AE1F113_ae;
    const int auto5AE1F113_ai = 1;

    // Variable Initialization

    // Implementation
    autoCC76550A_ae = (libMHPP_gv_payloadPath.lv_finalWaypointIndex - 1);
    lv_itPoint = libMHPP_gv_payloadPath.lv_payloadCurrentIndex;
    for ( ; ( (autoCC76550A_ai >= 0 && lv_itPoint <= autoCC76550A_ae) || (autoCC76550A_ai < 0 && lv_itPoint >= autoCC76550A_ae) ) ; lv_itPoint += autoCC76550A_ai ) {
        if ((libMHPP_gv_payloadPath.lv_checkpoint[lp_checkPoint] == lv_itPoint)) {
            lv_checkPointIndex = lv_itPoint;
            break;
        }

    }
    auto5AE1F113_ae = (lv_checkPointIndex - 1);
    lv_itPoint = libMHPP_gv_payloadPath.lv_payloadCurrentIndex;
    for ( ; ( (auto5AE1F113_ai >= 0 && lv_itPoint <= auto5AE1F113_ae) || (auto5AE1F113_ai < 0 && lv_itPoint >= auto5AE1F113_ae) ) ; lv_itPoint += auto5AE1F113_ai ) {
        if ((libMHPP_gv_payloadPath.lv_path[lv_itPoint] != null)) {
            lv_distance = DistanceBetweenPoints(libMHPP_gv_payloadPath.lv_path[lv_itPoint], libMHPP_gv_payloadPath.lv_path[(lv_itPoint + 1)]);
            lv_totalDistance += lv_distance;
        }

    }
    if ((libMHPP_gv_payloadPath.lv_path[libMHPP_gv_payloadPath.lv_payloadCurrentIndex] != null)) {
        lv_distanceFromCurrentIndex = DistanceBetweenPoints(libMHPP_gv_payloadPath.lv_path[libMHPP_gv_payloadPath.lv_payloadCurrentIndex], UnitGetPosition(libMHPP_gv_payload.lv_payload));
    }

    lv_totalDistance -= lv_distanceFromCurrentIndex;
    return lv_totalDistance;
}

fixed libMHPP_gf_PayloadCurrentDistance () {
    // Variable Declarations
    int lv_itPoints;
    fixed lv_totalDistance;
    fixed lv_distance;

    // Automatic Variable Declarations
    int auto697158DD_ae;
    const int auto697158DD_ai = 1;

    // Variable Initialization

    // Implementation
    auto697158DD_ae = (libMHPP_gv_payloadPath.lv_payloadCurrentIndex - 1);
    lv_itPoints = 1;
    for ( ; ( (auto697158DD_ai >= 0 && lv_itPoints <= auto697158DD_ae) || (auto697158DD_ai < 0 && lv_itPoints >= auto697158DD_ae) ) ; lv_itPoints += auto697158DD_ai ) {
        lv_distance = DistanceBetweenPoints(libMHPP_gv_payloadPath.lv_path[lv_itPoints], libMHPP_gv_payloadPath.lv_path[(lv_itPoints + 1)]);
        lv_totalDistance += lv_distance;
    }
    if ((libMHPP_gv_payloadPath.lv_path[libMHPP_gv_payloadPath.lv_payloadCurrentIndex] != null)) {
        lv_totalDistance += DistanceBetweenPoints(UnitGetPosition(libMHPP_gv_payload.lv_payload), libMHPP_gv_payloadPath.lv_path[libMHPP_gv_payloadPath.lv_payloadCurrentIndex]);
    }

    return lv_totalDistance;
}

trigger auto_libMHPP_gf_MHPPInitialTimeRemainingTransmissionController_Trigger = null;

void libMHPP_gf_MHPPInitialTimeRemainingTransmissionController () {
    if (auto_libMHPP_gf_MHPPInitialTimeRemainingTransmissionController_Trigger == null) {
        auto_libMHPP_gf_MHPPInitialTimeRemainingTransmissionController_Trigger = TriggerCreate("auto_libMHPP_gf_MHPPInitialTimeRemainingTransmissionController_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MHPPInitialTimeRemainingTransmissionController_Trigger, false, false);
}

bool auto_libMHPP_gf_MHPPInitialTimeRemainingTransmissionController_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv__30SecondsRemainingTransmissionPlayed;
    bool lv__10SecondsRemainingTransmissionPlayed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv__30SecondsRemainingTransmissionPlayed == false) && (TimerGetRemaining(libGame_gv_openTheGatesTimer) > 31.0)) {
        Wait(1.0, c_timeGame);
    }
    if ((TimerGetRemaining(libGame_gv_openTheGatesTimer) <= 0.0)) {
        return true;
    }
    else {
        lv__30SecondsRemainingTransmissionPlayed = true;
        libMHPP_gf_MHPP_TransmissionMapInitial30SecondsRemaining();
    }
    while ((lv__10SecondsRemainingTransmissionPlayed == false) && (TimerGetRemaining(libGame_gv_openTheGatesTimer) > 11.0)) {
        Wait(1.0, c_timeGame);
    }
    if ((TimerGetRemaining(libGame_gv_openTheGatesTimer) <= 0.0)) {
        return true;
    }
    else {
        lv__10SecondsRemainingTransmissionPlayed = true;
        libMHPP_gf_MHPP_TransmissionMapInitial10SecondsRemaining();
    }
    return true;
}

trigger auto_libMHPP_gf_MHPPMatchTimeRemainingTransmissionController_Trigger = null;

void libMHPP_gf_MHPPMatchTimeRemainingTransmissionController () {
    if (auto_libMHPP_gf_MHPPMatchTimeRemainingTransmissionController_Trigger == null) {
        auto_libMHPP_gf_MHPPMatchTimeRemainingTransmissionController_Trigger = TriggerCreate("auto_libMHPP_gf_MHPPMatchTimeRemainingTransmissionController_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MHPPMatchTimeRemainingTransmissionController_Trigger, false, false);
}

bool auto_libMHPP_gf_MHPPMatchTimeRemainingTransmissionController_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv__60SecondsRemainingTransmissionPlayed;
    bool lv__30SecondsRemainingTransmissionPlayed;
    bool lv__10SecondsRemainingTransmissionPlayed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv__60SecondsRemainingTransmissionPlayed == false) && (TimerGetRemaining(libMHPP_gv_mHPP_DefenseTimeToWinTimer) > 61.0)) {
        Wait(1.0, c_timeGame);
    }
    lv__60SecondsRemainingTransmissionPlayed = true;
    libMHPP_gf_MHPP_TransmissionMatchTime60SecondsRemaining();
    libNtve_gf_SetDialogItemText(libMHPP_gv_mHPPUI.lv_timeLeftNotificationLabel, StringExternal("Param/Value/lib_MHPP_67AED0AB"), PlayerGroupAll());
    libMHPP_gf_MHPP_UIShowHideDialogItemThread(libMHPP_gv_mHPPUI.lv_timeLeftNotificationFrame, 2.5);
    while ((lv__30SecondsRemainingTransmissionPlayed == false) && (TimerGetRemaining(libMHPP_gv_mHPP_DefenseTimeToWinTimer) > 31.0)) {
        Wait(1.0, c_timeGame);
    }
    lv__30SecondsRemainingTransmissionPlayed = true;
    libMHPP_gf_MHPP_TransmissionMatchTime30SecondsRemaining();
    libNtve_gf_SetDialogItemText(libMHPP_gv_mHPPUI.lv_timeLeftNotificationLabel, StringExternal("Param/Value/lib_MHPP_F6CE3CB8"), PlayerGroupAll());
    libMHPP_gf_MHPP_UIShowHideDialogItemThread(libMHPP_gv_mHPPUI.lv_timeLeftNotificationFrame, 2.5);
    while ((lv__10SecondsRemainingTransmissionPlayed == false) && (TimerGetRemaining(libMHPP_gv_mHPP_DefenseTimeToWinTimer) > 11.0)) {
        Wait(1.0, c_timeGame);
    }
    lv__10SecondsRemainingTransmissionPlayed = true;
    libMHPP_gf_MHPP_TransmissionMatchTime10SecondsRemaining();
    libNtve_gf_SetDialogItemText(libMHPP_gv_mHPPUI.lv_timeLeftNotificationLabel, StringExternal("Param/Value/lib_MHPP_F172B81B"), PlayerGroupAll());
    libMHPP_gf_MHPP_UIShowHideDialogItemThread(libMHPP_gv_mHPPUI.lv_timeLeftNotificationFrame, 2.5);
    return true;
}

trigger auto_libMHPP_gf_MHPP_TransmissionMapInitialStart_Trigger = null;

void libMHPP_gf_MHPP_TransmissionMapInitialStart () {
    if (auto_libMHPP_gf_MHPP_TransmissionMapInitialStart_Trigger == null) {
        auto_libMHPP_gf_MHPP_TransmissionMapInitialStart_Trigger = TriggerCreate("auto_libMHPP_gf_MHPP_TransmissionMapInitialStart_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MHPP_TransmissionMapInitialStart_Trigger, false, false);
}

bool auto_libMHPP_gf_MHPP_TransmissionMapInitialStart_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("PayloadVO", ("Left"));
    ConversationDataLineResetPlayers("PayloadVO", ("Right"));
    ConversationDataLineResetPlayers("PayloadVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Payload Push - Map Initial Start", "Value", 1, 1);
    ConversationDataLineSetPlayers("PayloadVO", ("Left"), lv_groupAttackers);
    ConversationDataLineSetPlayers("PayloadVO", ("Right"), lv_groupDefenders);
    ConversationDataLineSetPlayers("PayloadVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("PayloadVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHPP_gf_MHPP_TransmissionMapStart_Trigger = null;

void libMHPP_gf_MHPP_TransmissionMapStart () {
    if (auto_libMHPP_gf_MHPP_TransmissionMapStart_Trigger == null) {
        auto_libMHPP_gf_MHPP_TransmissionMapStart_Trigger = TriggerCreate("auto_libMHPP_gf_MHPP_TransmissionMapStart_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MHPP_TransmissionMapStart_Trigger, false, false);
}

bool auto_libMHPP_gf_MHPP_TransmissionMapStart_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("PayloadVO", ("Left"));
    ConversationDataLineResetPlayers("PayloadVO", ("Right"));
    ConversationDataLineResetPlayers("PayloadVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Payload Push - Map Start", "Value", 1, 1);
    ConversationDataLineSetPlayers("PayloadVO", ("Left"), lv_groupAttackers);
    ConversationDataLineSetPlayers("PayloadVO", ("Right"), lv_groupDefenders);
    ConversationDataLineSetPlayers("PayloadVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("PayloadVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHPP_gf_MHPP_TransmissionMapInitial60SecondsRemaining_Trigger = null;

void libMHPP_gf_MHPP_TransmissionMapInitial60SecondsRemaining () {
    if (auto_libMHPP_gf_MHPP_TransmissionMapInitial60SecondsRemaining_Trigger == null) {
        auto_libMHPP_gf_MHPP_TransmissionMapInitial60SecondsRemaining_Trigger = TriggerCreate("auto_libMHPP_gf_MHPP_TransmissionMapInitial60SecondsRemaining_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MHPP_TransmissionMapInitial60SecondsRemaining_Trigger, false, false);
}

bool auto_libMHPP_gf_MHPP_TransmissionMapInitial60SecondsRemaining_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("PayloadVO", ("Left"));
    ConversationDataLineResetPlayers("PayloadVO", ("Right"));
    ConversationDataLineResetPlayers("PayloadVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Payload Push - Initial Countdown 60 Seconds Remaining", "Value", 1, 1);
    ConversationDataLineSetPlayers("PayloadVO", ("Left"), lv_groupAttackers);
    ConversationDataLineSetPlayers("PayloadVO", ("Right"), lv_groupDefenders);
    ConversationDataLineSetPlayers("PayloadVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("PayloadVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHPP_gf_MHPP_TransmissionMapInitial30SecondsRemaining_Trigger = null;

void libMHPP_gf_MHPP_TransmissionMapInitial30SecondsRemaining () {
    if (auto_libMHPP_gf_MHPP_TransmissionMapInitial30SecondsRemaining_Trigger == null) {
        auto_libMHPP_gf_MHPP_TransmissionMapInitial30SecondsRemaining_Trigger = TriggerCreate("auto_libMHPP_gf_MHPP_TransmissionMapInitial30SecondsRemaining_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MHPP_TransmissionMapInitial30SecondsRemaining_Trigger, false, false);
}

bool auto_libMHPP_gf_MHPP_TransmissionMapInitial30SecondsRemaining_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("PayloadVO", ("Left"));
    ConversationDataLineResetPlayers("PayloadVO", ("Right"));
    ConversationDataLineResetPlayers("PayloadVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Payload Push - Initial Countdown 30 Seconds Remaining", "Value", 1, 1);
    ConversationDataLineSetPlayers("PayloadVO", ("Left"), lv_groupAttackers);
    ConversationDataLineSetPlayers("PayloadVO", ("Right"), lv_groupDefenders);
    ConversationDataLineSetPlayers("PayloadVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("PayloadVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHPP_gf_MHPP_TransmissionMapInitial10SecondsRemaining_Trigger = null;

void libMHPP_gf_MHPP_TransmissionMapInitial10SecondsRemaining () {
    if (auto_libMHPP_gf_MHPP_TransmissionMapInitial10SecondsRemaining_Trigger == null) {
        auto_libMHPP_gf_MHPP_TransmissionMapInitial10SecondsRemaining_Trigger = TriggerCreate("auto_libMHPP_gf_MHPP_TransmissionMapInitial10SecondsRemaining_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MHPP_TransmissionMapInitial10SecondsRemaining_Trigger, false, false);
}

bool auto_libMHPP_gf_MHPP_TransmissionMapInitial10SecondsRemaining_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("PayloadVO", ("Left"));
    ConversationDataLineResetPlayers("PayloadVO", ("Right"));
    ConversationDataLineResetPlayers("PayloadVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Payload Push - Initial Countdown 10 Seconds Remaining", "Value", 1, 1);
    ConversationDataLineSetPlayers("PayloadVO", ("Left"), lv_groupAttackers);
    ConversationDataLineSetPlayers("PayloadVO", ("Right"), lv_groupDefenders);
    ConversationDataLineSetPlayers("PayloadVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("PayloadVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHPP_gf_MHPP_TransmissionMatchTime60SecondsRemaining_Trigger = null;

void libMHPP_gf_MHPP_TransmissionMatchTime60SecondsRemaining () {
    if (auto_libMHPP_gf_MHPP_TransmissionMatchTime60SecondsRemaining_Trigger == null) {
        auto_libMHPP_gf_MHPP_TransmissionMatchTime60SecondsRemaining_Trigger = TriggerCreate("auto_libMHPP_gf_MHPP_TransmissionMatchTime60SecondsRemaining_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MHPP_TransmissionMatchTime60SecondsRemaining_Trigger, false, false);
}

bool auto_libMHPP_gf_MHPP_TransmissionMatchTime60SecondsRemaining_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("PayloadVO", ("Left"));
    ConversationDataLineResetPlayers("PayloadVO", ("Right"));
    ConversationDataLineResetPlayers("PayloadVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Payload Push - 60 seconds Remaining", "Value", 1, 1);
    ConversationDataRun("PayloadVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHPP_gf_MHPP_TransmissionMatchTime30SecondsRemaining_Trigger = null;

void libMHPP_gf_MHPP_TransmissionMatchTime30SecondsRemaining () {
    if (auto_libMHPP_gf_MHPP_TransmissionMatchTime30SecondsRemaining_Trigger == null) {
        auto_libMHPP_gf_MHPP_TransmissionMatchTime30SecondsRemaining_Trigger = TriggerCreate("auto_libMHPP_gf_MHPP_TransmissionMatchTime30SecondsRemaining_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MHPP_TransmissionMatchTime30SecondsRemaining_Trigger, false, false);
}

bool auto_libMHPP_gf_MHPP_TransmissionMatchTime30SecondsRemaining_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("PayloadVO", ("Left"));
    ConversationDataLineResetPlayers("PayloadVO", ("Right"));
    ConversationDataLineResetPlayers("PayloadVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Payload Push - 30 seconds Remaining", "Value", 1, 1);
    ConversationDataRun("PayloadVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHPP_gf_MHPP_TransmissionMatchTime10SecondsRemaining_Trigger = null;

void libMHPP_gf_MHPP_TransmissionMatchTime10SecondsRemaining () {
    if (auto_libMHPP_gf_MHPP_TransmissionMatchTime10SecondsRemaining_Trigger == null) {
        auto_libMHPP_gf_MHPP_TransmissionMatchTime10SecondsRemaining_Trigger = TriggerCreate("auto_libMHPP_gf_MHPP_TransmissionMatchTime10SecondsRemaining_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MHPP_TransmissionMatchTime10SecondsRemaining_Trigger, false, false);
}

bool auto_libMHPP_gf_MHPP_TransmissionMatchTime10SecondsRemaining_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("PayloadVO", ("Left"));
    ConversationDataLineResetPlayers("PayloadVO", ("Right"));
    ConversationDataLineResetPlayers("PayloadVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Payload Push - 10 seconds Remaining", "Value", 1, 1);
    ConversationDataRun("PayloadVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHPP_gf_MHPP_TransmissionApproachingCheckpoint_Trigger = null;

void libMHPP_gf_MHPP_TransmissionApproachingCheckpoint () {
    if (auto_libMHPP_gf_MHPP_TransmissionApproachingCheckpoint_Trigger == null) {
        auto_libMHPP_gf_MHPP_TransmissionApproachingCheckpoint_Trigger = TriggerCreate("auto_libMHPP_gf_MHPP_TransmissionApproachingCheckpoint_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MHPP_TransmissionApproachingCheckpoint_Trigger, false, false);
}

bool auto_libMHPP_gf_MHPP_TransmissionApproachingCheckpoint_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];

    // Implementation
    if (((libGame_gv_gameOver == true) || (TimerGetRemaining(libMHPP_gv_mHPPTransmissions.lv_approachingCheckpointWarningTimerCD) > 0.0)) && ((UnitTechTreeBehaviorCount(libMHPP_gv_payload.lv_payload, "PayloadAllyProximityBehavior1", c_techCountCompleteOnly) < 1) || (UnitTechTreeBehaviorCount(libMHPP_gv_payload.lv_payload, "PayloadAllyProximityBehavior2", c_techCountCompleteOnly) < 1) || (UnitTechTreeBehaviorCount(libMHPP_gv_payload.lv_payload, "PayloadAllyProximityBehavior3", c_techCountCompleteOnly) < 1))) {
        return true;
    }
    else {
        TimerStart(libMHPP_gv_mHPPTransmissions.lv_approachingCheckpointWarningTimerCD, libMHPP_gv_mHPPTransmissions.lv_approachingCheckpointAnnounceCDTime, false, c_timeGame);
    }
    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("PayloadVO", ("Left"));
    ConversationDataLineResetPlayers("PayloadVO", ("Right"));
    ConversationDataLineResetPlayers("PayloadVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Payload Push - Payload Approaching Checkpoint", "Value", 1, 1);
    ConversationDataRun("PayloadVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHPP_gf_MHPP_TransmissionCheckpointReached_Trigger = null;

void libMHPP_gf_MHPP_TransmissionCheckpointReached () {
    if (auto_libMHPP_gf_MHPP_TransmissionCheckpointReached_Trigger == null) {
        auto_libMHPP_gf_MHPP_TransmissionCheckpointReached_Trigger = TriggerCreate("auto_libMHPP_gf_MHPP_TransmissionCheckpointReached_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MHPP_TransmissionCheckpointReached_Trigger, false, false);
}

bool auto_libMHPP_gf_MHPP_TransmissionCheckpointReached_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("PayloadVO", ("Left"));
    ConversationDataLineResetPlayers("PayloadVO", ("Right"));
    ConversationDataLineResetPlayers("PayloadVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Payload Push - Checkpoint Reached", "Value", 1, 1);
    ConversationDataRun("PayloadVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHPP_gf_MHPP_TransmissionTimeAdded_Trigger = null;

void libMHPP_gf_MHPP_TransmissionTimeAdded () {
    if (auto_libMHPP_gf_MHPP_TransmissionTimeAdded_Trigger == null) {
        auto_libMHPP_gf_MHPP_TransmissionTimeAdded_Trigger = TriggerCreate("auto_libMHPP_gf_MHPP_TransmissionTimeAdded_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MHPP_TransmissionTimeAdded_Trigger, false, false);
}

bool auto_libMHPP_gf_MHPP_TransmissionTimeAdded_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    libCore_gf_WaitForConversationToFinish();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("PayloadVO", ("Left"));
    ConversationDataLineResetPlayers("PayloadVO", ("Right"));
    ConversationDataLineResetPlayers("PayloadVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Payload Push - Time Added", "Value", 1, 1);
    ConversationDataRun("PayloadVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHPP_gf_MHPP_TransmissionPayloadStopped_Trigger = null;

void libMHPP_gf_MHPP_TransmissionPayloadStopped () {
    if (auto_libMHPP_gf_MHPP_TransmissionPayloadStopped_Trigger == null) {
        auto_libMHPP_gf_MHPP_TransmissionPayloadStopped_Trigger = TriggerCreate("auto_libMHPP_gf_MHPP_TransmissionPayloadStopped_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MHPP_TransmissionPayloadStopped_Trigger, false, false);
}

bool auto_libMHPP_gf_MHPP_TransmissionPayloadStopped_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];

    // Implementation
    if (((libGame_gv_gameOver == true) || (TimerGetRemaining(libMHPP_gv_mHPPTransmissions.lv_payloadIsStoppedWarningTimerCD) > 0.0))) {
        return true;
    }
    else {
        TimerStart(libMHPP_gv_mHPPTransmissions.lv_payloadIsStoppedWarningTimerCD, libMHPP_gv_mHPPTransmissions.lv_payloadIsStoppedAnnounceCDTime, false, c_timeGame);
    }
    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("PayloadVO", ("Left"));
    ConversationDataLineResetPlayers("PayloadVO", ("Right"));
    ConversationDataLineResetPlayers("PayloadVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Payload Push - Payload is Stopped", "Value", 1, 1);
    ConversationDataLineSetPlayers("PayloadVO", ("Left"), lv_groupAttackers);
    ConversationDataLineSetPlayers("PayloadVO", ("Right"), lv_groupDefenders);
    ConversationDataLineSetPlayers("PayloadVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("PayloadVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHPP_gf_MHPP_TransmissionPayloadisMoving_Trigger = null;

void libMHPP_gf_MHPP_TransmissionPayloadisMoving () {
    if (auto_libMHPP_gf_MHPP_TransmissionPayloadisMoving_Trigger == null) {
        auto_libMHPP_gf_MHPP_TransmissionPayloadisMoving_Trigger = TriggerCreate("auto_libMHPP_gf_MHPP_TransmissionPayloadisMoving_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MHPP_TransmissionPayloadisMoving_Trigger, false, false);
}

bool auto_libMHPP_gf_MHPP_TransmissionPayloadisMoving_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];

    // Implementation
    if (((libGame_gv_gameOver == true) || (TimerGetRemaining(libMHPP_gv_mHPPTransmissions.lv_payloadIsMovingWarningTimerCD) > 0.0) || (UnitHasBehavior2(libMHPP_gv_payload.lv_payload, "PayloadIsContestedBehavior") == true))) {
        return true;
    }
    else {
        TimerStart(libMHPP_gv_mHPPTransmissions.lv_payloadIsMovingWarningTimerCD, libMHPP_gv_mHPPTransmissions.lv_payloadIsMovingAnnounceCDTime, false, c_timeGame);
    }
    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("PayloadVO", ("Left"));
    ConversationDataLineResetPlayers("PayloadVO", ("Right"));
    ConversationDataLineResetPlayers("PayloadVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Payload Push - Payload is Moving", "Value", 1, 1);
    ConversationDataLineSetPlayers("PayloadVO", ("Left"), lv_groupAttackers);
    ConversationDataLineSetPlayers("PayloadVO", ("Right"), lv_groupDefenders);
    ConversationDataLineSetPlayers("PayloadVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("PayloadVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHPP_gf_MHPP_TransmissionApproachingDestination_Trigger = null;

void libMHPP_gf_MHPP_TransmissionApproachingDestination () {
    if (auto_libMHPP_gf_MHPP_TransmissionApproachingDestination_Trigger == null) {
        auto_libMHPP_gf_MHPP_TransmissionApproachingDestination_Trigger = TriggerCreate("auto_libMHPP_gf_MHPP_TransmissionApproachingDestination_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MHPP_TransmissionApproachingDestination_Trigger, false, false);
}

bool auto_libMHPP_gf_MHPP_TransmissionApproachingDestination_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];

    // Implementation
    if (((libGame_gv_gameOver == true) || (TimerGetRemaining(libMHPP_gv_mHPPTransmissions.lv_approachingDestinationWarningTimerCD) > 0.0)) && ((UnitTechTreeBehaviorCount(libMHPP_gv_payload.lv_payload, "PayloadAllyProximityBehavior1", c_techCountQueuedOrBetter) < 1) || (UnitTechTreeBehaviorCount(libMHPP_gv_payload.lv_payload, "PayloadAllyProximityBehavior2", c_techCountQueuedOrBetter) < 1) || (UnitTechTreeBehaviorCount(libMHPP_gv_payload.lv_payload, "PayloadAllyProximityBehavior3", c_techCountQueuedOrBetter) < 1))) {
        return true;
    }
    else {
        TimerStart(libMHPP_gv_mHPPTransmissions.lv_approachingDestinationWarningTimerCD, libMHPP_gv_mHPPTransmissions.lv_approachingDestinationAnnounceCDTime, false, c_timeGame);
    }
    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("PayloadVO", ("Left"));
    ConversationDataLineResetPlayers("PayloadVO", ("Right"));
    ConversationDataLineResetPlayers("PayloadVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Payload Push - Payload Approaching Destination", "Value", 1, 1);
    ConversationDataRun("PayloadVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHPP_gf_MHPP_TransmissionOvertime_Trigger = null;

void libMHPP_gf_MHPP_TransmissionOvertime () {
    if (auto_libMHPP_gf_MHPP_TransmissionOvertime_Trigger == null) {
        auto_libMHPP_gf_MHPP_TransmissionOvertime_Trigger = TriggerCreate("auto_libMHPP_gf_MHPP_TransmissionOvertime_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MHPP_TransmissionOvertime_Trigger, false, false);
}

bool auto_libMHPP_gf_MHPP_TransmissionOvertime_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupAttackers;
    playergroup lv_groupDefenders;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupAttackers = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupDefenders = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("PayloadVO", ("Left"));
    ConversationDataLineResetPlayers("PayloadVO", ("Right"));
    ConversationDataLineResetPlayers("PayloadVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Payload Push - Overtime", "Value", 1, 1);
    ConversationDataRun("PayloadVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHPP_gf_LNYHUDUIInit_Trigger = null;

void libMHPP_gf_LNYHUDUIInit () {
    if (auto_libMHPP_gf_LNYHUDUIInit_Trigger == null) {
        auto_libMHPP_gf_LNYHUDUIInit_Trigger = TriggerCreate("auto_libMHPP_gf_LNYHUDUIInit_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_LNYHUDUIInit_Trigger, false, false);
}

bool auto_libMHPP_gf_LNYHUDUIInit_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    string lv_string;

    // Automatic Variable Declarations
    const int auto40A75CF8_ae = 3;
    const int auto40A75CF8_ai = 1;

    // Variable Initialization
    lv_string = IntToString(lv_i);

    // Implementation
    DialogControlCreateInPanelFromTemplate(libUIUI_gv_mapMechanicsPanel.lv_mainPanel, c_triggerControlTypePanel, "HanamuraPayloadPushMapMechanic/HanamuraPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libMHPP_gv_mHPPUI.lv_mapMechanic = DialogControlLastCreated();
    DialogControlHookup(libMHPP_gv_mHPPUI.lv_mapMechanic, c_triggerControlTypePanel, "TimeLeftNotificationFrame");
    libMHPP_gv_mHPPUI.lv_timeLeftNotificationFrame = DialogControlLastCreated();
    DialogControlHookup(libMHPP_gv_mHPPUI.lv_timeLeftNotificationFrame, c_triggerControlTypeLabel, "NotificationLabel");
    libMHPP_gv_mHPPUI.lv_timeLeftNotificationLabel = DialogControlLastCreated();
    DialogControlHookup(libMHPP_gv_mHPPUI.lv_mapMechanic, c_triggerControlTypePanel, "PayloadPanel");
    libMHPP_gv_mHPPUI.lv_payloadFrame = DialogControlLastCreated();
    DialogControlHookup(libMHPP_gv_mHPPUI.lv_payloadFrame, c_triggerControlTypePanel, "PayloadBarLeftPath1");
    libMHPP_gv_mHPPUI.lv_payloadProgress = DialogControlLastCreated();
    DialogControlHookup(libMHPP_gv_mHPPUI.lv_payloadProgress, c_triggerControlTypeProgressBar, "PayloadProgressBar");
    libMHPP_gv_mHPPUI.lv_mHPP_UI_PayloadProgressBar2 = DialogControlLastCreated();
    lv_i = 1;
    for ( ; ( (auto40A75CF8_ai >= 0 && lv_i <= auto40A75CF8_ae) || (auto40A75CF8_ai < 0 && lv_i >= auto40A75CF8_ae) ) ; lv_i += auto40A75CF8_ai ) {
        DialogControlHookup(libMHPP_gv_mHPPUI.lv_payloadFrame, c_triggerControlTypeImage, "PayloadProgressMarker"+(IntToString(lv_i)));
        libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerImages[lv_i] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
        DialogControlHookup(libMHPP_gv_mHPPUI.lv_payloadFrame, c_triggerControlTypeLabel, "PayloadProgressMarkerLabel"+(IntToString(lv_i)));
        libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerLabels[lv_i] = DialogControlLastCreated();
        DialogControlHookup(libMHPP_gv_mHPPUI.lv_payloadFrame, c_triggerControlTypePanel, "PayloadProgressBarMarker"+(IntToString(lv_i)));
        libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerFrames[lv_i] = DialogControlLastCreated();
        DialogControlHookup(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerFrames[lv_i], c_triggerControlTypeProgressBar, "PayloadProgressBar");
        libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerBars[lv_i] = DialogControlLastCreated();
    }
    DialogControlHookup(libMHPP_gv_mHPPUI.lv_payloadFrame, c_triggerControlTypeUnitStatus, "AttackersProgressUnitStatus");
    libNtve_gf_SetDialogItemUnit(DialogControlLastCreated(), libMHPP_gv_payload.lv_payload, PlayerGroupAll());
    libMHPP_gv_mHPPUI.lv_mapMechanic_PayloadUnitStatus = DialogControlLastCreated();
    return true;
}

trigger auto_libMHPP_gf_LNYHUDUIInit2_Trigger = null;

void libMHPP_gf_LNYHUDUIInit2 () {
    if (auto_libMHPP_gf_LNYHUDUIInit2_Trigger == null) {
        auto_libMHPP_gf_LNYHUDUIInit2_Trigger = TriggerCreate("auto_libMHPP_gf_LNYHUDUIInit2_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_LNYHUDUIInit2_Trigger, false, false);
}

bool auto_libMHPP_gf_LNYHUDUIInit2_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    while ((libGame_gv_gameOver == false)) {
        if ((TimerGetRemaining(libGame_gv_openTheGatesTimer) > 0.0)) {
            libNtve_gf_SetDialogItemText(libMHPP_gv_mHPPUI.lv_topPanel_RoundTime, TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(libGame_gv_openTheGatesTimer))), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(libMHPP_gv_mHPPUI.lv_topPanel_RoundTime, TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(libMHPP_gv_mHPP_DefenseTimeToWinTimer))), PlayerGroupAll());
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

trigger auto_libMHPP_gf_MHPP_UICheckpointRoundTimerUpdate_Trigger = null;
fixed auto_libMHPP_gf_MHPP_UICheckpointRoundTimerUpdate_lp_defenseTimeLeft;

void libMHPP_gf_MHPP_UICheckpointRoundTimerUpdate (fixed lp_defenseTimeLeft) {
    auto_libMHPP_gf_MHPP_UICheckpointRoundTimerUpdate_lp_defenseTimeLeft = lp_defenseTimeLeft;

    if (auto_libMHPP_gf_MHPP_UICheckpointRoundTimerUpdate_Trigger == null) {
        auto_libMHPP_gf_MHPP_UICheckpointRoundTimerUpdate_Trigger = TriggerCreate("auto_libMHPP_gf_MHPP_UICheckpointRoundTimerUpdate_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MHPP_UICheckpointRoundTimerUpdate_Trigger, false, false);
}

bool auto_libMHPP_gf_MHPP_UICheckpointRoundTimerUpdate_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_defenseTimeLeft = auto_libMHPP_gf_MHPP_UICheckpointRoundTimerUpdate_lp_defenseTimeLeft;

    // Variable Declarations
    fixed lv_currentTime;
    bool lv_restartTimeLeftController;

    // Automatic Variable Declarations
    const int auto7A00C253_n = 32;
    int auto7A00C253_i;

    // Variable Initialization
    lv_currentTime = lp_defenseTimeLeft;

    // Implementation
    if ((lv_currentTime <= 0.0)) {
        lv_restartTimeLeftController = true;
    }

    for (auto7A00C253_i = 1; auto7A00C253_i <= auto7A00C253_n; auto7A00C253_i += 1) {
        lv_currentTime += (libMHPP_gv_mHPP_CheckPointReachedBonusTime_C/32);
        TimerStart(libMHPP_gv_mHPP_DefenseTimeToWinTimer, lv_currentTime, false, c_timeGame);
        libNtve_gf_SetDialogItemText(libMHPP_gv_mHPPUI.lv_topPanel_RoundTime, TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(libMHPP_gv_mHPP_DefenseTimeToWinTimer))), PlayerGroupAll());
        Wait(0.0625, c_timeGame);
    }
    if ((lv_restartTimeLeftController == true)) {
        libMHPP_gf_MHPPMatchTimeRemainingTransmissionController();
    }

    return true;
}

trigger auto_libMHPP_gf_LNYHUDUIInit3_Trigger = null;

void libMHPP_gf_LNYHUDUIInit3 () {
    if (auto_libMHPP_gf_LNYHUDUIInit3_Trigger == null) {
        auto_libMHPP_gf_LNYHUDUIInit3_Trigger = TriggerCreate("auto_libMHPP_gf_LNYHUDUIInit3_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_LNYHUDUIInit3_Trigger, false, false);
}

bool auto_libMHPP_gf_LNYHUDUIInit3_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distance1;
    fixed lv_distance2;
    fixed lv_distance3;

    // Automatic Variable Declarations
    const int auto6434468C_n = 8;
    int auto6434468C_i;
    const int auto16AA0795_n = 8;
    int auto16AA0795_i;
    const int autoF31982FE_n = 8;
    int autoF31982FE_i;

    // Variable Initialization

    // Implementation
    for (auto6434468C_i = 1; auto6434468C_i <= auto6434468C_n; auto6434468C_i += 1) {
        lv_distance1 += ((100*(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkers[1]/8)));
        libNtve_gf_SetDialogItemCurrentValue(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerBars[1], lv_distance1, PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerBars[2], lv_distance1, PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerBars[3], lv_distance1, PlayerGroupAll());
        Wait(0.0625, c_timeGame);
    }
    lv_distance2 = lv_distance1;
    for (auto16AA0795_i = 1; auto16AA0795_i <= auto16AA0795_n; auto16AA0795_i += 1) {
        lv_distance2 += (100*(((libMHPP_gv_payloadPath.lv_checkpointDistance[2]-libMHPP_gv_payloadPath.lv_checkpointDistance[1])/libMHPP_gv_payloadPath.lv_totalDistanceToTravel)/8));
        libNtve_gf_SetDialogItemCurrentValue(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerBars[2], lv_distance2, PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerBars[3], lv_distance2, PlayerGroupAll());
        Wait(0.0625, c_timeGame);
    }
    lv_distance3 = lv_distance2;
    for (autoF31982FE_i = 1; autoF31982FE_i <= autoF31982FE_n; autoF31982FE_i += 1) {
        lv_distance3 += (100*(((libMHPP_gv_payloadPath.lv_totalDistanceToTravel-libMHPP_gv_payloadPath.lv_checkpointDistance[2])/libMHPP_gv_payloadPath.lv_totalDistanceToTravel)/8));
        libNtve_gf_SetDialogItemCurrentValue(libMHPP_gv_mHPPUI.lv_mapMechanic_ProgressBarMarkerBars[3], lv_distance3, PlayerGroupAll());
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_libMHPP_gf_MHPP_UIUpdatePayloadProgress_Trigger = null;

void libMHPP_gf_MHPP_UIUpdatePayloadProgress () {
    if (auto_libMHPP_gf_MHPP_UIUpdatePayloadProgress_Trigger == null) {
        auto_libMHPP_gf_MHPP_UIUpdatePayloadProgress_Trigger = TriggerCreate("auto_libMHPP_gf_MHPP_UIUpdatePayloadProgress_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MHPP_UIUpdatePayloadProgress_Trigger, false, false);
}

bool auto_libMHPP_gf_MHPP_UIUpdatePayloadProgress_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemCurrentValue(libMHPP_gv_mHPPUI.lv_mHPP_UI_PayloadProgressBar2, (libMHPP_gv_payload.lv_totalProgress*100), PlayerGroupAll());
    return true;
}

trigger auto_libMHPP_gf_MHPP_UIOvertime_Trigger = null;

void libMHPP_gf_MHPP_UIOvertime () {
    if (auto_libMHPP_gf_MHPP_UIOvertime_Trigger == null) {
        auto_libMHPP_gf_MHPP_UIOvertime_Trigger = TriggerCreate("auto_libMHPP_gf_MHPP_UIOvertime_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MHPP_UIOvertime_Trigger, false, false);
}

bool auto_libMHPP_gf_MHPP_UIOvertime_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libMHPP_gv_mHPPUI.lv_topPanel_OvertimeContainer, PlayerGroupAll(), true);
    while ((TimerGetDuration(libMHPP_gv_payload.lv_overtimeTimer) > 0.0) && (TimerGetRemaining(libMHPP_gv_mHPP_DefenseTimeToWinTimer) <= 0.0)) {
        libNtve_gf_SetDialogItemCurrentValue(libMHPP_gv_mHPPUI.lv_topPanel_OvertimeProgressBar, (TimerGetRemaining(libMHPP_gv_payload.lv_overtimeTimer) / libMHPP_gv_payload.lv_overtimeTime), PlayerGroupAll());
        Wait(0.0625, c_timeGame);
    }
    DialogControlSetVisible(libMHPP_gv_mHPPUI.lv_topPanel_OvertimeContainer, PlayerGroupAll(), false);
    return true;
}

trigger auto_libMHPP_gf_MHPP_UIShowHideDialogItemThread_Trigger = null;
int auto_libMHPP_gf_MHPP_UIShowHideDialogItemThread_lp_dialogItem;
fixed auto_libMHPP_gf_MHPP_UIShowHideDialogItemThread_lp_duration;

void libMHPP_gf_MHPP_UIShowHideDialogItemThread (int lp_dialogItem, fixed lp_duration) {
    auto_libMHPP_gf_MHPP_UIShowHideDialogItemThread_lp_dialogItem = lp_dialogItem;
    auto_libMHPP_gf_MHPP_UIShowHideDialogItemThread_lp_duration = lp_duration;

    if (auto_libMHPP_gf_MHPP_UIShowHideDialogItemThread_Trigger == null) {
        auto_libMHPP_gf_MHPP_UIShowHideDialogItemThread_Trigger = TriggerCreate("auto_libMHPP_gf_MHPP_UIShowHideDialogItemThread_TriggerFunc");
    }

    TriggerExecute(auto_libMHPP_gf_MHPP_UIShowHideDialogItemThread_Trigger, false, false);
}

bool auto_libMHPP_gf_MHPP_UIShowHideDialogItemThread_TriggerFunc (bool testConds, bool runActions) {
    int lp_dialogItem = auto_libMHPP_gf_MHPP_UIShowHideDialogItemThread_lp_dialogItem;
    fixed lp_duration = auto_libMHPP_gf_MHPP_UIShowHideDialogItemThread_lp_duration;

    // Automatic Variable Declarations
    // Implementation
    DialogControlSendAnimationEvent(lp_dialogItem, PlayerGroupAll(), "Show");
    Wait(lp_duration, c_timeGame);
    DialogControlSendAnimationEvent(lp_dialogItem, PlayerGroupAll(), "Hide");
    return true;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Mod Initialization
//--------------------------------------------------------------------------------------------------
bool libMHPP_gt_ModInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto158F1F6B_g;
    int auto158F1F6B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCore_gv_bALDeathTimeOverride = 9.0;
    libCore_gv_sYSIsBrawlGame = true;
    libCore_gv_sYSXPOn = false;
    libCore_gv_sYSHeroStartLevel = 10;
    libGame_gv_endofMatchAwardsDisabled = true;
    libMHPP_gv_payloadPath.lv_totalDistanceToTravel = libMHPP_gf_CalculatePayloadTravelDistancetoDestination();
    libGame_gf_InitializeHealthPackGenerators();
    libUIUI_gf_PingCreateNewPingTarget("PayloadCheckpointUnit", false, StringExternal("Param/Value/lib_MHPP_F4040E3F"), StringExternal("Param/Value/lib_MHPP_06C10335"), StringExternal("Param/Value/lib_MHPP_FE1D17B6"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Defend", -1));
    libUIUI_gf_PingCreateNewPingTarget("PayloadDestinationPingTargetUnit", false, StringExternal("Param/Value/lib_MHPP_242D4989"), StringExternal("Param/Value/lib_MHPP_F6D44261"), StringExternal("Param/Value/lib_MHPP_F2C26177"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Defend", -1));
    auto158F1F6B_g = PlayerGroupAll();
    auto158F1F6B_var = -1;
    while (true) {
        	auto158F1F6B_var = PlayerGroupNextPlayer(auto158F1F6B_g, auto158F1F6B_var);
        	if (auto158F1F6B_var<0) { break; }
        	PlayerSetAnnouncerPack(auto158F1F6B_var, "Athena");
    }
    SetTalentTierEnabled(1, false);
    SetTalentTierEnabled(2, false);
    SetTalentTierEnabled(3, false);
    SetTalentTierEnabled(4, true);
    SetTalentTierEnabled(5, false);
    SetTalentTierEnabled(6, false);
    SetTalentTierEnabled(7, false);
    TriggerExecute(libMHPP_gt_DoEsUICoreHealthInitialize, true, false);
    libMHPP_gf_InitPayloadPath();
    TimerStart(libMHPP_gv_mHPP_DefenseTimeToWinTimer, libMHPP_gv_mHPP_DefenseTimeToWin_C, false, c_timeGame);
    TimerPause(TimerLastStarted(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHPP_gt_ModInitialization_Init () {
    libMHPP_gt_ModInitialization = TriggerCreate("libMHPP_gt_ModInitialization_Func");
    libCore_gf_IncludeModInitialization(libMHPP_gt_ModInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Spawn
//--------------------------------------------------------------------------------------------------
bool libMHPP_gt_HeroSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_region;

    // Automatic Variable Declarations
    unitgroup auto75493099_g;
    int auto75493099_u;
    unit auto75493099_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityEnable(libGame_gv_players[libGame_gf_HeroSpawnPlayer()].lv_heroUnit, "Hearthstone", false);
    UnitAbilityShow(libGame_gv_players[libGame_gf_HeroSpawnPlayer()].lv_heroUnit, "Hearthstone", false);
    if ((TimerGetRemaining(libGame_gv_openTheGatesTimer) > 0.0)) {
        if ((libGame_gf_TeamNumberOfPlayer(libGame_gf_HeroSpawnPlayer()) == libGame_gv_teamOrderIndex_C)) {
            lv_region = libCore_gv_mAPOrderBaseRegion;
        }
        else {
            lv_region = libCore_gv_mAPChaosBaseRegion;
        }
        auto75493099_g = libGame_gv_players[libGame_gf_HeroSpawnPlayer()].lv_heroUnitGroup;
        auto75493099_u = UnitGroupCount(auto75493099_g, c_unitCountAll);
        for (;; auto75493099_u -= 1) {
            auto75493099_var = UnitGroupUnitFromEnd(auto75493099_g, auto75493099_u);
            if (auto75493099_var == null) { break; }
            libMapM_gf_RestrictAbilitiesToRegionForUnit(auto75493099_var, lv_region);
            if ((UnitGetType(auto75493099_var) == "HeroSamuro")) {
                UnitAbilityEnable(auto75493099_var, "SamuroMirrorImage", false);
            }
            else if ((UnitGetType(auto75493099_var) == "HeroSgtHammer") && (libGame_gf_TeamNumberOfPlayer(libGame_gf_HeroSpawnPlayer()) == libGame_gv_teamOrderIndex_C)) {
                UnitAbilityEnable(auto75493099_var, "SgtHammerSiegeMode", false);
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHPP_gt_HeroSpawn_Init () {
    libMHPP_gt_HeroSpawn = TriggerCreate("libMHPP_gt_HeroSpawn_Func");
    libGame_gf_HeroSpawn(libMHPP_gt_HeroSpawn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MHPP Game Open Timer Started
//--------------------------------------------------------------------------------------------------
bool libMHPP_gt_MHPPGameOpenTimerStarted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(libGame_gv_openTheGatesTimer, 45.0, false, c_timeGame);
    libMHPP_gf_LNYHUDUIInit2();
    libMHPP_gf_MHPP_UIUpdatePayloadProgress();
    libNtve_gf_SetDialogItemText(libMHPP_gv_mHPPUI.lv_topPanel_HelpText, StringExternal("Param/Value/lib_MHPP_1F9F2479"), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false));
    libNtve_gf_SetDialogItemText(libMHPP_gv_mHPPUI.lv_topPanel_HelpText, StringExternal("Param/Value/lib_MHPP_09158EDB"), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false));
    libMHPP_gf_MHPP_TransmissionMapInitialStart();
    libMHPP_gf_MHPPInitialTimeRemainingTransmissionController();
    libNtve_gf_SetDialogItemUnit(libMHPP_gv_mHPPUI.lv_mapMechanic_PayloadUnitStatus, libMHPP_gv_payload.lv_payload, PlayerGroupAll());
    AddUnitOfInterest(libMHPP_gv_payload.lv_payload, 500.0, 0.0, "EscortPayload", libNtve_ge_GoalTeam_Both, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHPP_gt_MHPPGameOpenTimerStarted_Init () {
    libMHPP_gt_MHPPGameOpenTimerStarted = TriggerCreate("libMHPP_gt_MHPPGameOpenTimerStarted_Func");
    libGame_gf_GameOpenTimerStarted(libMHPP_gt_MHPPGameOpenTimerStarted);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MMHP Game Started
//--------------------------------------------------------------------------------------------------
bool libMHPP_gt_MMHPGameStarted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA9197BCC_g;
    int autoA9197BCC_var;
    unitgroup auto8681A4B7_g;
    int auto8681A4B7_u;
    unit auto8681A4B7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoA9197BCC_g = PlayerGroupAll();
    autoA9197BCC_var = -1;
    while (true) {
        	autoA9197BCC_var = PlayerGroupNextPlayer(autoA9197BCC_g, autoA9197BCC_var);
        	if (autoA9197BCC_var<0) { break; }
        	auto8681A4B7_g = libGame_gv_players[autoA9197BCC_var].lv_heroUnitGroup;
        auto8681A4B7_u = UnitGroupCount(auto8681A4B7_g, c_unitCountAll);
        for (;; auto8681A4B7_u -= 1) {
            auto8681A4B7_var = UnitGroupUnitFromEnd(auto8681A4B7_g, auto8681A4B7_u);
            if (auto8681A4B7_var == null) { break; }
            libMapM_gf_RestrictAbilitiesToRegionForUnit(auto8681A4B7_var, null);
            if ((UnitGetType(auto8681A4B7_var) == "HeroSamuro")) {
                UnitAbilityEnable(auto8681A4B7_var, "SamuroMirrorImage", true);
            }
            else if ((UnitGetType(auto8681A4B7_var) == "HeroSgtHammer") && (libGame_gf_TeamNumberOfPlayer(autoA9197BCC_var) == libGame_gv_teamOrderIndex_C)) {
                UnitAbilityEnable(auto8681A4B7_var, "SgtHammerSiegeMode", true);
            }
        }
    }
    libMHPP_gf_LNYHUDUIInit3();
    TimerStart(libMHPP_gv_mHPP_DefenseTimeToWinTimer, libMHPP_gv_mHPP_DefenseTimeToWin_C, false, c_timeGame);
    TimerStart(libMHPP_gv_mHPPTransmissions.lv_payloadIsMovingWarningTimerCD, libMHPP_gv_mHPPTransmissions.lv_payloadIsMovingAnnounceCDTime, false, c_timeGame);
    TimerStart(libMHPP_gv_mHPPTransmissions.lv_payloadIsStoppedWarningTimerCD, libMHPP_gv_mHPPTransmissions.lv_payloadIsStoppedAnnounceCDTime, false, c_timeGame);
    TriggerEnable(libMHPP_gt_PayloadGainsReverseBehavior, true);
    TriggerEnable(libMHPP_gt_PayloadLosesReverseBehavior, true);
    TriggerEnable(libMHPP_gt_PayloadGainsContestedBehavior, true);
    TriggerEnable(libMHPP_gt_PayloadLosesContestedBehavior, true);
    libMHPP_gf_MHPP_TransmissionMapStart();
    libMHPP_gf_MHPPMatchTimeRemainingTransmissionController();
    UnitBehaviorAdd(libMHPP_gv_payload.lv_payload, "PayloadAtStartPointBehavior", libMHPP_gv_payload.lv_payload, 1);
    UnitBehaviorRemove(libMHPP_gv_payload.lv_payload, "PayloadReverseCountdownBehavior", c_unitBehaviorCountAll);
    UnitBehaviorRemove(libMHPP_gv_payload.lv_payload, "PayloadReverseBehavior", c_unitBehaviorCountAll);
    libMHPP_gf_MovePayloadForward(libMHPP_gv_payload.lv_payload);
    libNtve_gf_SetDialogItemText(libMHPP_gv_mHPPUI.lv_topPanel_HelpText, StringExternal("Param/Value/lib_MHPP_B4934A07"), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false));
    libNtve_gf_SetDialogItemText(libMHPP_gv_mHPPUI.lv_topPanel_HelpText, StringExternal("Param/Value/lib_MHPP_C97F1B71"), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHPP_gt_MMHPGameStarted_Init () {
    libMHPP_gt_MMHPGameStarted = TriggerCreate("libMHPP_gt_MMHPGameStarted_Func");
    TriggerAddEventTimer(libMHPP_gt_MMHPGameStarted, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MHPP Defense Time To Win Expires - Defense Wins
//--------------------------------------------------------------------------------------------------
bool libMHPP_gt_MHPPDefenseTimeToWinExpiresDefenseWins_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitTechTreeBehaviorCount(libMHPP_gv_payload.lv_payload, "PayloadAllyProximityBehavior1", c_techCountQueuedOrBetter) >= 1) || (UnitTechTreeBehaviorCount(libMHPP_gv_payload.lv_payload, "PayloadAllyProximityBehavior2", c_techCountQueuedOrBetter) >= 1) || (UnitTechTreeBehaviorCount(libMHPP_gv_payload.lv_payload, "PayloadAllyProximityBehavior3", c_techCountQueuedOrBetter) >= 1))) {
        libMHPP_gf_MHPPOvertime();
    }
    else {
        libMHPP_gf_MHPPGameOver(libGame_gv_teamChaosIndex_C);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHPP_gt_MHPPDefenseTimeToWinExpiresDefenseWins_Init () {
    libMHPP_gt_MHPPDefenseTimeToWinExpiresDefenseWins = TriggerCreate("libMHPP_gt_MHPPDefenseTimeToWinExpiresDefenseWins_Func");
    TriggerAddEventTimer(libMHPP_gt_MHPPDefenseTimeToWinExpiresDefenseWins, libMHPP_gv_mHPP_DefenseTimeToWinTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MHPP Overtime Timer Expires
//--------------------------------------------------------------------------------------------------
bool libMHPP_gt_MHPPOvertimeTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libMHPP_gf_MHPPGameOver(libGame_gv_teamChaosIndex_C);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHPP_gt_MHPPOvertimeTimerExpires_Init () {
    libMHPP_gt_MHPPOvertimeTimerExpires = TriggerCreate("libMHPP_gt_MHPPOvertimeTimerExpires_Func");
    TriggerEnable(libMHPP_gt_MHPPOvertimeTimerExpires, false);
    TriggerAddEventTimer(libMHPP_gt_MHPPOvertimeTimerExpires, libMHPP_gv_payload.lv_overtimeTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Payload Gains Reverse Behavior
//--------------------------------------------------------------------------------------------------
bool libMHPP_gt_PayloadGainsReverseBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libMHPP_gf_MHPP_TransmissionPayloadStopped();
    libMHPP_gf_MovePayloadBackward(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHPP_gt_PayloadGainsReverseBehavior_Init () {
    libMHPP_gt_PayloadGainsReverseBehavior = TriggerCreate("libMHPP_gt_PayloadGainsReverseBehavior_Func");
    TriggerEnable(libMHPP_gt_PayloadGainsReverseBehavior, false);
    TriggerAddEventUnitBehaviorChange(libMHPP_gt_PayloadGainsReverseBehavior, UnitRefFromVariable("libMHPP_gv_payload.lv_payload"), "PayloadReverseBehavior", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Payload Loses Reverse Behavior
//--------------------------------------------------------------------------------------------------
bool libMHPP_gt_PayloadLosesReverseBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libMHPP_gf_MHPP_TransmissionPayloadisMoving();
    libMHPP_gf_MovePayloadForward(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHPP_gt_PayloadLosesReverseBehavior_Init () {
    libMHPP_gt_PayloadLosesReverseBehavior = TriggerCreate("libMHPP_gt_PayloadLosesReverseBehavior_Func");
    TriggerEnable(libMHPP_gt_PayloadLosesReverseBehavior, false);
    TriggerAddEventUnitBehaviorChange(libMHPP_gt_PayloadLosesReverseBehavior, UnitRefFromVariable("libMHPP_gv_payload.lv_payload"), "PayloadReverseBehavior", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chaos Player Dies - Modify Player Respawn Timer
//--------------------------------------------------------------------------------------------------
bool libMHPP_gt_ChaosPlayerDiesModifyPlayerRespawnTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_respawnTimeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), libGame_gf_HeroKilledPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_respawnTimeDuration = TimerGetRemaining(libGame_gv_players[libGame_gf_HeroKilledPlayer()].lv_respawnTimer);
    libGame_gf_HeroDeathUpdateRespawnTimer(libGame_gf_HeroKilledPlayer(), (lv_respawnTimeDuration + libMHPP_gv_mHPP_DefenderDeathTimeBonus));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHPP_gt_ChaosPlayerDiesModifyPlayerRespawnTimer_Init () {
    libMHPP_gt_ChaosPlayerDiesModifyPlayerRespawnTimer = TriggerCreate("libMHPP_gt_ChaosPlayerDiesModifyPlayerRespawnTimer_Func");
    libGame_gf_HeroKilled(libMHPP_gt_ChaosPlayerDiesModifyPlayerRespawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Extra Info During Selection
//--------------------------------------------------------------------------------------------------
bool libMHPP_gt_SetExtraInfoDuringSelection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA582E9C0_g;
    int autoA582E9C0_var;
    playergroup auto6FEF1769_g;
    int auto6FEF1769_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA582E9C0_g = GameAttributePlayersForTeam(libGame_gv_teamOrderIndex_C);
    autoA582E9C0_var = -1;
    while (true) {
        	autoA582E9C0_var = PlayerGroupNextPlayer(autoA582E9C0_g, autoA582E9C0_var);
        	if (autoA582E9C0_var<0) { break; }
        	libIGHS_gf_SetShuffleScreenExtraInfoTextForPlayer(autoA582E9C0_var, StringExternal("Param/Value/lib_MHPP_AAC0ED64"));
    }
    auto6FEF1769_g = GameAttributePlayersForTeam(libGame_gv_teamChaosIndex_C);
    auto6FEF1769_var = -1;
    while (true) {
        	auto6FEF1769_var = PlayerGroupNextPlayer(auto6FEF1769_g, auto6FEF1769_var);
        	if (auto6FEF1769_var<0) { break; }
        	libIGHS_gf_SetShuffleScreenExtraInfoTextForPlayer(auto6FEF1769_var, StringExternal("Param/Value/lib_MHPP_7B139487"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHPP_gt_SetExtraInfoDuringSelection_Init () {
    libMHPP_gt_SetExtraInfoDuringSelection = TriggerCreate("libMHPP_gt_SetExtraInfoDuringSelection_Func");
    libIGHS_gf_ShufflePickUIShown(libMHPP_gt_SetExtraInfoDuringSelection);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MHPP_UI PayloadProgress / DefenseTime Initialize
//--------------------------------------------------------------------------------------------------
bool libMHPP_gt_DoEsUICoreHealthInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libMHPP_gf_LNYHUDUIInit();
    DialogControlCreateInPanelFromTemplate(libUIUI_gv_mapMechanicsPanel.lv_mainPanel, c_triggerControlTypePanel, "HanamuraPayloadPushTopBar/HanamuraPayloadPushScorePanel");
    libMHPP_gv_mHPPUI.lv_topPanel = DialogControlLastCreated();
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamLevelInfoPanel[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_teamLevelInfoPanel[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), false);
    DialogControlHookup(libMHPP_gv_mHPPUI.lv_topPanel, c_triggerControlTypeLabel, "RoundTime");
    libMHPP_gv_mHPPUI.lv_topPanel_RoundTime = DialogControlLastCreated();
    DialogControlHookup(libMHPP_gv_mHPPUI.lv_topPanel, c_triggerControlTypeLabel, "HelpText");
    libMHPP_gv_mHPPUI.lv_topPanel_HelpText = DialogControlLastCreated();
    DialogControlHookup(libMHPP_gv_mHPPUI.lv_topPanel, c_triggerControlTypePanel, "TimeAddedContainer");
    libMHPP_gv_mHPPUI.lv_DoEs_CoreHealthLabel3 = DialogControlLastCreated();
    DialogControlHookup(libMHPP_gv_mHPPUI.lv_DoEs_CoreHealthLabel3, c_triggerControlTypeLabel, "TimeAdded");
    TextExpressionSetToken("Param/Expression/lib_MHPP_9366682D", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(libMHPP_gv_mHPP_CheckPointReachedBonusTime_C)));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_MHPP_9366682D"), PlayerGroupAll());
    libMHPP_gv_mHPPUI.lv_DoEs_CoreHealthLabel2 = DialogControlLastCreated();
    DialogControlHookup(libMHPP_gv_mHPPUI.lv_topPanel, c_triggerControlTypePanel, "OvertimeContainer");
    libMHPP_gv_mHPPUI.lv_topPanel_OvertimeContainer = DialogControlLastCreated();
    DialogControlHookup(libMHPP_gv_mHPPUI.lv_topPanel_OvertimeContainer, c_triggerControlTypeProgressBar, "OvertimeProgressBar");
    libMHPP_gv_mHPPUI.lv_topPanel_OvertimeProgressBar = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHPP_gt_DoEsUICoreHealthInitialize_Init () {
    libMHPP_gt_DoEsUICoreHealthInitialize = TriggerCreate("libMHPP_gt_DoEsUICoreHealthInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Payload Gains Contested Behavior
//--------------------------------------------------------------------------------------------------
bool libMHPP_gt_PayloadGainsContestedBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pathIndex = libCore_gf_IntegerStoredForUnit(EventUnit(), 1);

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSendAnimationEvent(libMHPP_gv_mHPPUI.lv_mHPP_UI_PayloadProgressBar2, PlayerGroupAll(), "Contested");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHPP_gt_PayloadGainsContestedBehavior_Init () {
    libMHPP_gt_PayloadGainsContestedBehavior = TriggerCreate("libMHPP_gt_PayloadGainsContestedBehavior_Func");
    TriggerEnable(libMHPP_gt_PayloadGainsContestedBehavior, false);
    TriggerAddEventUnitBehaviorChange(libMHPP_gt_PayloadGainsContestedBehavior, UnitRefFromVariable("libMHPP_gv_payload.lv_payload"), "PayloadIsContestedBehavior", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Payload Loses Contested Behavior
//--------------------------------------------------------------------------------------------------
bool libMHPP_gt_PayloadLosesContestedBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pathIndex = libCore_gf_IntegerStoredForUnit(EventUnit(), 1);

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSendAnimationEvent(libMHPP_gv_mHPPUI.lv_mHPP_UI_PayloadProgressBar2, PlayerGroupAll(), "Uncontested");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHPP_gt_PayloadLosesContestedBehavior_Init () {
    libMHPP_gt_PayloadLosesContestedBehavior = TriggerCreate("libMHPP_gt_PayloadLosesContestedBehavior_Func");
    TriggerEnable(libMHPP_gt_PayloadLosesContestedBehavior, false);
    TriggerAddEventUnitBehaviorChange(libMHPP_gt_PayloadLosesContestedBehavior, UnitRefFromVariable("libMHPP_gv_payload.lv_payload"), "PayloadIsContestedBehavior", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug End
//--------------------------------------------------------------------------------------------------
bool libMHPP_gt_DebugEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventChatMessage(false) == "debug-victory")) {
        libMHPP_gf_MHPPGameOver(libGame_gf_TeamNumberOfPlayer(EventPlayer()));
    }

    if ((EventChatMessage(false) == "debug-defeat")) {
        libMHPP_gf_MHPPGameOver(libGame_gf_EnemyTeam(libGame_gf_TeamNumberOfPlayer(EventPlayer())));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHPP_gt_DebugEnd_Init () {
    libMHPP_gt_DebugEnd = TriggerCreate("libMHPP_gt_DebugEnd_Func");
    TriggerAddEventChatMessage(libMHPP_gt_DebugEnd, c_playerAny, "debug-victory", true);
    TriggerAddEventChatMessage(libMHPP_gt_DebugEnd, c_playerAny, "debug-defeat", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_Overtime
//--------------------------------------------------------------------------------------------------
bool libMHPP_gt_Debug_Overtime_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libMHPP_gv_mHPP_DefenseTimeToWinTimer, 1.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHPP_gt_Debug_Overtime_Init () {
    libMHPP_gt_Debug_Overtime = TriggerCreate("libMHPP_gt_Debug_Overtime_Func");
    TriggerAddEventChatMessage(libMHPP_gt_Debug_Overtime, c_playerAny, "-ot", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_SetTimer
//--------------------------------------------------------------------------------------------------
bool libMHPP_gt_Debug_SetTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libGame_gv_openTheGatesTimer, 0.0, false, c_timeGame);
    if ((StringWord(EventChatMessage(false), 2) == "infinite")) {
        TimerStart(libMHPP_gv_mHPP_DefenseTimeToWinTimer, c_timerDurationInfinite, false, c_timeGame);
    }
    else {
        TimerStart(libMHPP_gv_mHPP_DefenseTimeToWinTimer, StringToFixed(StringWord(EventChatMessage(false), 2)), false, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHPP_gt_Debug_SetTimer_Init () {
    libMHPP_gt_Debug_SetTimer = TriggerCreate("libMHPP_gt_Debug_SetTimer_Func");
    TriggerAddEventChatMessage(libMHPP_gt_Debug_SetTimer, c_playerAny, "-timer", false);
}

void libMHPP_InitTriggers () {
    libMHPP_gt_ModInitialization_Init();
    libMHPP_gt_HeroSpawn_Init();
    libMHPP_gt_MHPPGameOpenTimerStarted_Init();
    libMHPP_gt_MMHPGameStarted_Init();
    libMHPP_gt_MHPPDefenseTimeToWinExpiresDefenseWins_Init();
    libMHPP_gt_MHPPOvertimeTimerExpires_Init();
    libMHPP_gt_PayloadGainsReverseBehavior_Init();
    libMHPP_gt_PayloadLosesReverseBehavior_Init();
    libMHPP_gt_ChaosPlayerDiesModifyPlayerRespawnTimer_Init();
    libMHPP_gt_SetExtraInfoDuringSelection_Init();
    libMHPP_gt_DoEsUICoreHealthInitialize_Init();
    libMHPP_gt_PayloadGainsContestedBehavior_Init();
    libMHPP_gt_PayloadLosesContestedBehavior_Init();
    libMHPP_gt_DebugEnd_Init();
    libMHPP_gt_Debug_Overtime_Init();
    libMHPP_gt_Debug_SetTimer_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libMHPP_InitLib_completed = false;

void libMHPP_InitLib () {
    if (libMHPP_InitLib_completed) {
        return;
    }

    libMHPP_InitLib_completed = true;

    libMHPP_InitLibraries();
    libMHPP_InitVariables();
    libMHPP_InitTriggers();
}

