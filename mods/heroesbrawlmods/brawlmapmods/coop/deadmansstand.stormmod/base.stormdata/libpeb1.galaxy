include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"
include "TriggerLibs/StartingExperienceLib"
include "TriggerLibs/SoundLib"
include "TriggerLibs/GameDataHelperLib"
include "TriggerLibs/SupportLib"
include "LibPVEM"
include "LibPVEU"

include "LibPEB1_h"

//--------------------------------------------------------------------------------------------------
// Library: Deadmans Stand (Mod)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libPEB1_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libAIAI_InitVariables();
    libUIUI_InitVariables();
    libStEx_InitVariables();
    libSond_InitVariables();
    libGDHL_InitVariables();
    libSprt_InitVariables();
    libPVEM_InitVariables();
    libPVEU_InitVariables();
}

// Variable Initialization
bool libPEB1_InitVariables_completed = false;

void libPEB1_InitVariables () {
    int init_i;
    int init_j;
    int init_i1;

    if (libPEB1_InitVariables_completed) {
        return;
    }

    libPEB1_InitVariables_completed = true;

    for (init_i = 0; init_i <= libGame_gv_laneMaxCount_C; init_i += 1) {
        for (init_j = 0; init_j <= libPEB1_gv_pVEMinionWaveNumberOfMinionTypes_C; init_j += 1) {
            libPEB1_gv_pVEMinionWaveMinionsGroups[init_i][init_j] = UnitGroupEmpty();
        }
    }
    for (init_i = 0; init_i <= libGame_gv_laneMaxCount_C; init_i += 1) {
        libPEB1_gv_pVEMinionWaveMinionsInLane[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libGame_gv_laneMaxCount_C; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libPEB1_gv_pVEMinionWaveMaxRallyLocations_C; init_i1 += 1) {
            libPEB1_gv_pVEMinionWaveMinionRally[init_i].lv_rallyStructureGroup[init_i1] = UnitGroupEmpty();
        }
    }
    libPEB1_gv_civilianRunners = UnitGroupEmpty();
    libPEB1_gv_civilianRunnerDestination_C = RegionFromName("Civilian Runner Destination");
    libPEB1_gv_civilianRunnerFade_C = RegionFromName("Civilian Runner Fade");
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libPEB1_gv_bunkersAlive[init_i] = true;
    }
    libPEB1_gv_activeZergMinions = UnitGroupEmpty();
    libPEB1_gv_murkyDeathTimer = TimerCreate();
    libPEB1_gv_murkyRespawnDelay = 15.0;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        libPEB1_gv_zergHeroes[init_i].lv_respawnTimer = TimerCreate();
        libPEB1_gv_zergHeroes[init_i].lv_active = true;
        libPEB1_gv_zergHeroes[init_i].lv_state = libPEB1_ge_ZergHeroState_NotYetSpawned;
    }
    libPEB1_gv_zergHeroSpawnCounter = 1;
    libPEB1_gv_activeZergHeroes = UnitGroupEmpty();
    libPEB1_gv_zergHeroLevel = 10;
    libPEB1_gv_globalAttackGroup = UnitGroupEmpty();
    libPEB1_gv_nydusGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= 31; init_i += 1) {
        libPEB1_gv_hatcheries[init_i].lv_defenderGroup = UnitGroupEmpty();
    }
    libPEB1_gv_scourgeMissileTargetPing = c_invalidPingId;
    libPEB1_gv_scougeNests = UnitGroupEmpty();
    for (init_i = 0; init_i <= 5; init_i += 1) {
        libPEB1_gv_archangelAreas[init_i].lv_type = libPEB1_ge_ArchangelAreaType_None;
        for (init_i1 = 0; init_i1 <= 255; init_i1 += 1) {
            libPEB1_gv_archangelAreas[init_i].lv_doodadTypes[init_i1] = libPEB1_ge_ArchangelAreaType_None;
        }
        libPEB1_gv_archangelAreas[init_i].lv_archangelPing = c_invalidPingId;
    }
    libPEB1_gv_archangelAdds = UnitGroupEmpty();
    libPEB1_gv_archangelBanelingGroup = UnitGroupEmpty();
    libPEB1_gv_previousGapIndex = 99;
    libPEB1_gv_archangelRotateClockwise = true;
    libPEB1_gv_archangelRotationSpeed = 1.2;
    libPEB1_gv_archangelRotationAngle = 145.0;
    libPEB1_gv_holdout1_Timer = TimerCreate();
    libPEB1_gv_holdout2_Timer = TimerCreate();
    libPEB1_gv_holdout3_Timer = TimerCreate();
    libPEB1_gv_archangel1_Timer = TimerCreate();
    libPEB1_gv_archangel2_Timer = TimerCreate();
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libPEB1_gv_marineRescue[init_i].lv_marineGroup = UnitGroupEmpty();
        libPEB1_gv_marineRescue[init_i].lv_zergGroup = UnitGroupEmpty();
        libPEB1_gv_marineRescue[init_i].lv_rescueTextTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        libPEB1_gv_creepCamps[init_i].lv_defenderAI_Index = -1;
        libPEB1_gv_creepCamps[init_i].lv_defenderUnits = UnitGroupEmpty();
        libPEB1_gv_creepCamps[init_i].lv_respawnTimer = TimerCreate();
        libPEB1_gv_creepCamps[init_i].lv_buffTimerXXXXXXXXXXXXXXXXXXX = TimerCreate();
        libPEB1_gv_creepCamps[init_i].lv_lane = libPEB1_ge_Lane_Bottom;
        libPEB1_gv_creepCamps[init_i].lv_helperTextTag = c_textTagNone;
        libPEB1_gv_creepCamps[init_i].lv_outerStructures = UnitGroupEmpty();
        libPEB1_gv_creepCamps[init_i].lv_innerStructures = UnitGroupEmpty();
    }
    libPEB1_gv_pickupSpawnCounter = 2;
    libPEB1_gv_defeatReason = libPEB1_ge_DefeatReason_None;
    libPEB1_gv_pZEMapPanel = c_invalidDialogControlId;
    libPEB1_gv_pZEObjectivePanel.lv_objectivePanel = c_invalidDialogControlId;
    libPEB1_gv_pZEObjectivePanel.lv_objectivePanelIcon = c_invalidDialogControlId;
    libPEB1_gv_pZEObjectivePanel.lv_objectivePanelIconCompleted = c_invalidDialogControlId;
    libPEB1_gv_pZEObjectivePanel.lv_objectivePanelInfoLabel1 = c_invalidDialogControlId;
    libPEB1_gv_pZEObjectivePanel.lv_objectivePanelInfoLabel2 = c_invalidDialogControlId;
    libPEB1_gv_pZEObjectivePanel.lv_objectivePanelInfoLabel3 = c_invalidDialogControlId;
    libPEB1_gv_pZEObjectivePanel.lv_objectivePanelTimerLabel1 = c_invalidDialogControlId;
    libPEB1_gv_pZEObjectivePanel.lv_objectivePanelTimerLabel2 = c_invalidDialogControlId;
    libPEB1_gv_pZEObjectivePanel.lv_objectivePanelMissionSuccessfulFrame = c_invalidDialogControlId;
    libPEB1_gv_pZEObjectivePanel.lv_objectivePanelMissionSuccessfulLabel = c_invalidDialogControlId;
    libPEB1_gv_pZEObjectivePanel.lv_objectivePanelTimer = TimerCreate();
    libPEB1_gv_pZEObjectivePanel.lv_state = libPEB1_ge_PZEObjectivePanelState_OnTimer;
    libPEB1_gv_pZEHoldoutPanel.lv_timerPanel = c_invalidDialogControlId;
    libPEB1_gv_pZEHoldoutPanel.lv_timerPanelTimerLabel = c_invalidDialogControlId;
    libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconArchangel = c_invalidDialogControlId;
    libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconArchangelDefeated = c_invalidDialogControlId;
    libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconZerg = c_invalidDialogControlId;
    libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconDefense = c_invalidDialogControlId;
    libPEB1_gv_pZEHoldoutPanel.lv_timerPanelInfoLabel = c_invalidDialogControlId;
    libPEB1_gv_pZEHoldoutPanel.lv_timerPanelTimer = TimerCreate();
    libPEB1_gv_pZEHoldoutPanel.lv_state = libPEB1_ge_PZEHoldoutPanelState_OnTimer;
    libPEB1_gv_pZEScoreScreenPanel.lv_mainPanel = c_invalidDialogControlId;
    libPEB1_gv_pZEScoreScreenPanel.lv_timeLabel = c_invalidDialogControlId;
    libPEB1_gv_pZEScoreScreenPanel.lv_closeButton = c_invalidDialogControlId;
    libPEB1_gv_pZETabScreenPanel.lv_mainPanel = c_invalidDialogControlId;
    libPEB1_gv_pZETabScreenPanel.lv_tabControl = c_invalidDialogControlId;
    libPEB1_gv_pZETabScreenPanel.lv_timeRunSubPanel = c_invalidDialogControlId;
    libPEB1_gv_pZETabScreenPanel.lv_currentTimeLabel = c_invalidDialogControlId;
    libPEB1_gv_pZETabScreenPanel.lv_previousBestTimeLabel = c_invalidDialogControlId;
    libPEB1_gv_pZETabScreenPanel.lv_epicRunTime = c_invalidDialogControlId;
    libPEB1_gv_baseHealthBar.lv_baseHealthPanel = c_invalidDialogControlId;
    libPEB1_gv_baseHealthBar.lv_baseHealthLabel = c_invalidDialogControlId;
    libPEB1_gv_baseHealthBar.lv_basePercentLabel = c_invalidDialogControlId;
    libPEB1_gv_baseHealthBar.lv_baseCoreLabel = c_invalidDialogControlId;
    libPEB1_gv_baseHealthBar.lv_baseCoreBar = c_invalidDialogControlId;
    libPEB1_gv_baseHealthBar.lv_baseCoreBarBg = c_invalidDialogControlId;
    libPEB1_gv_baseHealthBar.lv_baseKeepLabel = c_invalidDialogControlId;
    libPEB1_gv_baseHealthBar.lv_baseKeepBar = c_invalidDialogControlId;
    libPEB1_gv_baseHealthBar.lv_baseKeepBarBg = c_invalidDialogControlId;
    libPEB1_gv_baseHealthBar.lv_baseBunkersLabel = c_invalidDialogControlId;
    libPEB1_gv_baseHealthBar.lv_baseBunkersBar = c_invalidDialogControlId;
    libPEB1_gv_baseHealthBar.lv_baseBunkersBarBg = c_invalidDialogControlId;
    libPEB1_gv_baseStructures = UnitGroupEmpty();
    libPEB1_gv_baseStructuresCore = UnitGroupEmpty();
    libPEB1_gv_baseStructuresKeep = UnitGroupEmpty();
    libPEB1_gv_baseStructuresBunkers = UnitGroupEmpty();
}

// Presets
// Functions
void libPEB1_gf_PVESpawnMinion (int lp_lane, int lp_owner, int lp_type, point lp_spawnPoint) {
    // Variable Declarations
    string lv_spawnUnitType;
    int lv_minionTypeIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libGame_gv_gameOver == true) || (libGame_gv_minionSpawningEnabled == false) || (libPEB1_gv_disableZergSpawning == true))) {
        return ;
    }

    lv_spawnUnitType = libCore_gf_DataMinionUnitTypeFromPreset(lp_type);
    if ((lv_spawnUnitType == null)) {
        return ;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, lv_spawnUnitType, 0, lp_owner, lp_spawnPoint, null);
    UnitBehaviorAdd(UnitLastCreated(), "PVEMinionMonitorIdle", UnitLastCreated(), 1);
    libPEB1_gf_PVEMinionWaveAssignMiniontoWave(lp_lane, UnitLastCreated());
    if ((libGame_gv_minionTakesReducedSpellDamage == true)) {
        UnitBehaviorAdd(UnitLastCreated(), "MinionSpellDamageReduction", UnitLastCreated(), 1);
    }

    if ((libGame_gv_minionScalingEnabled == true)) {
        lv_minionTypeIndex = (lp_type);
        libGame_gf_UpdateScalingForUnit(UnitLastCreated(), libGame_gv_scalingTicks, 0);
    }

}

void libPEB1_gf_PVEMinionWaveAssignMiniontoWave (int lp_lane, unit lp_minion) {
    // Automatic Variable Declarations
    int auto4DF672BB_val;
    string autoF5712A85_val;

    // Implementation
    auto4DF672BB_val = lp_lane;
    if (auto4DF672BB_val == ((libPEB1_ge_Lane_Top) + 1)) {
        UnitGroupAdd(libPEB1_gv_pVEMinionWaveMinionsInLane[((libPEB1_ge_Lane_Top) + 1)], lp_minion);
    }
    else if (auto4DF672BB_val == ((libPEB1_ge_Lane_Bottom) + 1)) {
        UnitGroupAdd(libPEB1_gv_pVEMinionWaveMinionsInLane[((libPEB1_ge_Lane_Bottom) + 1)], lp_minion);
    }
    else {
    }
    autoF5712A85_val = UnitGetType(lp_minion);
    if (autoF5712A85_val == libCore_gv_dataMinionData[libCore_ge_MinionTypes_Footmen].lv_unitType) {
        UnitGroupAdd(libPEB1_gv_pVEMinionWaveMinionsGroups[lp_lane][libCore_ge_MinionTypes_Footmen], lp_minion);
    }
    else if (autoF5712A85_val == libCore_gv_dataMinionData[libCore_ge_MinionTypes_Ranged].lv_unitType) {
        UnitGroupAdd(libPEB1_gv_pVEMinionWaveMinionsGroups[lp_lane][libCore_ge_MinionTypes_Ranged], lp_minion);
    }
    else if (autoF5712A85_val == libCore_gv_dataMinionData[libCore_ge_MinionTypes_Wizard].lv_unitType) {
        UnitGroupAdd(libPEB1_gv_pVEMinionWaveMinionsGroups[lp_lane][libCore_ge_MinionTypes_Wizard], lp_minion);
    }
    else {
    }
    libPEB1_gf_PVEMinionWaveIssueMinionRally();
}

void libPEB1_gf_PVEMinionWaveIssueMinionRally () {
    // Variable Declarations
    int lv_itIterator;
    int lv_itMinionType;
    int lv_itLane;
    int lv_position;

    // Automatic Variable Declarations
    int auto052BE948_ae;
    const int auto052BE948_ai = 1;
    const int auto5939EB29_ae = libPEB1_gv_pVEMinionWaveMaxRallyLocations_C;
    const int auto5939EB29_ai = 1;
    const int auto74BE6A17_ae = libPEB1_gv_pVEMinionWaveNumberOfMinionTypes_C;
    const int auto74BE6A17_ai = 1;
    int autoE12E0C7C_ae;
    const int autoE12E0C7C_ai = 1;

    // Variable Initialization

    // Implementation
    auto052BE948_ae = libGame_gv_laneCount;
    lv_itLane = 1;
    for ( ; ( (auto052BE948_ai >= 0 && lv_itLane <= auto052BE948_ae) || (auto052BE948_ai < 0 && lv_itLane >= auto052BE948_ae) ) ; lv_itLane += auto052BE948_ai ) {
        lv_itIterator = 1;
        for ( ; ( (auto5939EB29_ai >= 0 && lv_itIterator <= auto5939EB29_ae) || (auto5939EB29_ai < 0 && lv_itIterator >= auto5939EB29_ae) ) ; lv_itIterator += auto5939EB29_ai ) {
            if ((UnitGroupCount(libPEB1_gv_pVEMinionWaveMinionRally[lv_itLane].lv_rallyStructureGroup[lv_itIterator], c_unitCountAlive) > 0)) {
                lv_position = lv_itIterator;
            }
            else {
                break;
            }
        }
        lv_itMinionType = 1;
        for ( ; ( (auto74BE6A17_ai >= 0 && lv_itMinionType <= auto74BE6A17_ae) || (auto74BE6A17_ai < 0 && lv_itMinionType >= auto74BE6A17_ae) ) ; lv_itMinionType += auto74BE6A17_ai ) {
            autoE12E0C7C_ae = UnitGroupCount(libPEB1_gv_pVEMinionWaveMinionsGroups[lv_itLane][lv_itMinionType], c_unitCountAlive);
            lv_itIterator = 1;
            for ( ; ( (autoE12E0C7C_ai >= 0 && lv_itIterator <= autoE12E0C7C_ae) || (autoE12E0C7C_ai < 0 && lv_itIterator >= autoE12E0C7C_ae) ) ; lv_itIterator += autoE12E0C7C_ai ) {
                if ((libPEB1_gv_pVEMinionWaveMinionRally[lv_itLane].lv_rallyPosition[libPEB1_ge_PVEMinionWaveRallyLocation_PVEMinionWaveRallyLocation_Core][lv_itMinionType][lv_itIterator] != null) && (UnitHasAIThinkTree(UnitGroupUnit(libPEB1_gv_pVEMinionWaveMinionsGroups[lv_itLane][lv_itMinionType], lv_itIterator)) == false)) {
                    UnitIssueOrder(UnitGroupUnit(libPEB1_gv_pVEMinionWaveMinionsGroups[lv_itLane][lv_itMinionType], lv_itIterator), OrderTargetingPoint(AbilityCommand("move", 0), libPEB1_gv_pVEMinionWaveMinionRally[lv_itLane].lv_rallyPosition[lv_position][lv_itMinionType][lv_itIterator]), c_orderQueueReplace);
                }

            }
        }
    }
}

void libPEB1_gf_PVEMinionWaveSetRallyLocations (point lp_anchorPoint, int lp_lane, int lp_position) {
    // Variable Declarations
    const fixed lv_rangedWidth_C = 2.75;
    const fixed lv_rangedRank_C = -1.5;
    const fixed lv_leaderWidth_C = 3.0;
    const fixed lv_meleeWidth_C = 2.5;
    const fixed lv_meleeRank_C = 2.0;
    point lv_meleeAnchor;
    point lv_rangedAnchor;
    fixed lv_facingAngle;
    int lv_rallyStructures;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_facingAngle = PointGetFacing(lp_anchorPoint);
    lv_meleeAnchor = PointWithOffsetPolar(lp_anchorPoint, lv_meleeRank_C, lv_facingAngle);
    lv_rangedAnchor = PointWithOffsetPolar(lp_anchorPoint, lv_rangedRank_C, lv_facingAngle);
    lv_rallyStructures = (lp_position);
    PointSetFacing(lv_meleeAnchor, lv_facingAngle);
    PointSetFacing(lv_rangedAnchor, lv_facingAngle);
    libPEB1_gv_pVEMinionWaveMinionRally[lp_lane].lv_rallyPosition[lv_rallyStructures][libCore_ge_MinionTypes_Footmen][1] = lv_meleeAnchor;
    libPEB1_gv_pVEMinionWaveMinionRally[lp_lane].lv_rallyPosition[lv_rallyStructures][libCore_ge_MinionTypes_Footmen][2] = PointWithOffsetPolar(lv_meleeAnchor, lv_meleeWidth_C, (lv_facingAngle + 90.0));
    libPEB1_gv_pVEMinionWaveMinionRally[lp_lane].lv_rallyPosition[lv_rallyStructures][libCore_ge_MinionTypes_Footmen][3] = PointWithOffsetPolar(lv_meleeAnchor, lv_meleeWidth_C, (lv_facingAngle - 90.0));
    libPEB1_gv_pVEMinionWaveMinionRally[lp_lane].lv_rallyPosition[lv_rallyStructures][libCore_ge_MinionTypes_Footmen][4] = PointWithOffsetPolar(lv_meleeAnchor, (lv_meleeWidth_C * 2.0), (lv_facingAngle + 90.0));
    libPEB1_gv_pVEMinionWaveMinionRally[lp_lane].lv_rallyPosition[lv_rallyStructures][libCore_ge_MinionTypes_Footmen][5] = PointWithOffsetPolar(lv_meleeAnchor, (lv_meleeWidth_C * 2.0), (lv_facingAngle - 90.0));
    libPEB1_gv_pVEMinionWaveMinionRally[lp_lane].lv_rallyPosition[lv_rallyStructures][libCore_ge_MinionTypes_Wizard][1] = lp_anchorPoint;
    libPEB1_gv_pVEMinionWaveMinionRally[lp_lane].lv_rallyPosition[lv_rallyStructures][libCore_ge_MinionTypes_Wizard][2] = PointWithOffsetPolar(lp_anchorPoint, lv_leaderWidth_C, (lv_facingAngle + 90.0));
    libPEB1_gv_pVEMinionWaveMinionRally[lp_lane].lv_rallyPosition[lv_rallyStructures][libCore_ge_MinionTypes_Wizard][3] = PointWithOffsetPolar(lp_anchorPoint, lv_leaderWidth_C, (lv_facingAngle - 90.0));
    libPEB1_gv_pVEMinionWaveMinionRally[lp_lane].lv_rallyPosition[lv_rallyStructures][libCore_ge_MinionTypes_Ranged][1] = lv_rangedAnchor;
    libPEB1_gv_pVEMinionWaveMinionRally[lp_lane].lv_rallyPosition[lv_rallyStructures][libCore_ge_MinionTypes_Ranged][2] = PointWithOffsetPolar(lv_rangedAnchor, lv_rangedWidth_C, (lv_facingAngle + 90.0));
    libPEB1_gv_pVEMinionWaveMinionRally[lp_lane].lv_rallyPosition[lv_rallyStructures][libCore_ge_MinionTypes_Ranged][3] = PointWithOffsetPolar(lv_rangedAnchor, lv_rangedWidth_C, (lv_facingAngle - 90.0));
    libPEB1_gv_pVEMinionWaveMinionRally[lp_lane].lv_rallyPosition[lv_rallyStructures][libCore_ge_MinionTypes_Ranged][4] = PointWithOffsetPolar(lv_rangedAnchor, (lv_rangedWidth_C * 2.0), (lv_facingAngle + 90.0));
    libPEB1_gv_pVEMinionWaveMinionRally[lp_lane].lv_rallyPosition[lv_rallyStructures][libCore_ge_MinionTypes_Ranged][5] = PointWithOffsetPolar(lv_rangedAnchor, (lv_rangedWidth_C * 2.0), (lv_facingAngle - 90.0));
    PointSetFacing(libPEB1_gv_pVEMinionWaveMinionRally[lp_lane].lv_rallyPosition[lv_rallyStructures][libCore_ge_MinionTypes_Wizard][1], lv_facingAngle);
}

void libPEB1_gf_TurnOnOffZergMinionAI (unit lp_minion, bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true)) {
        if ((UnitGetType(lp_minion) != "SlivanBossPod")) {
            UnitGroupAdd(libPEB1_gv_activeZergMinions, lp_minion);
        }

        if ((UnitGetType(lp_minion) == "ZergUltralisk")) {
            UnitBehaviorAdd(lp_minion, "UltraliskChargeAbilityScan", lp_minion, 1);
        }

        if ((UnitHasAIThinkTree(lp_minion) == false)) {
            UnitCreateAIThinkTree(lp_minion);
        }

    }
    else {
        UnitGroupRemove(libPEB1_gv_activeZergMinions, lp_minion);
        UnitBehaviorRemove(lp_minion, "UltraliskChargeAbilityScan", 1);
        if ((UnitHasAIThinkTree(lp_minion) == true)) {
            UnitDestroyAIThinkTree(lp_minion);
        }

    }
}

void libPEB1_gf_TurnOnOffZergMinionGroupAI (unitgroup lp_minions, bool lp_onOff) {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup autoF2A255F4_g;
    int autoF2A255F4_u;

    // Variable Initialization

    // Implementation
    autoF2A255F4_g = lp_minions;
    autoF2A255F4_u = UnitGroupCount(autoF2A255F4_g, c_unitCountAll);
    for (;; autoF2A255F4_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoF2A255F4_g, autoF2A255F4_u);
        if (lv_itUnit == null) { break; }
        libPEB1_gf_TurnOnOffZergMinionAI(lv_itUnit, lp_onOff);
    }
}

point libPEB1_gf_ToxicNestSpawnPoint (point lp_point) {
    // Variable Declarations
    int lv_currentBestIndex;
    int lv_regionIndex;
    int lv_abathurPlayer;

    // Automatic Variable Declarations
    const int autoF1DC05AF_ae = 31;
    const int autoF1DC05AF_ai = 1;
    const int auto335E0A9E_ae = 31;
    const int auto335E0A9E_ai = 1;

    // Variable Initialization

    // Implementation
    lv_abathurPlayer = libPVEM_gf_PvENPCHeroPlayerFromUnitType(libPVEM_gf_PvENPCHeroUnitType("Abathur"));
    lv_regionIndex = 1;
    for ( ; ( (autoF1DC05AF_ai >= 0 && lv_regionIndex <= autoF1DC05AF_ae) || (autoF1DC05AF_ai < 0 && lv_regionIndex >= autoF1DC05AF_ae) ) ; lv_regionIndex += autoF1DC05AF_ai ) {
        if ((RegionFromName(("Toxic Nest Region " + IntToString(lv_regionIndex))) == null)) {
            break;
        }

        if ((UnitGroupCount(UnitGroup("AbathurToxicNest", lv_abathurPlayer, RegionFromName(("Toxic Nest Region " + IntToString(lv_regionIndex))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 4)) {
            if ((lv_currentBestIndex == 0)) {
                lv_currentBestIndex = lv_regionIndex;
            }
            else {
                if ((DistanceBetweenPoints(lp_point, RegionGetCenter(RegionFromName(("Toxic Nest Region " + IntToString(lv_regionIndex))))) < DistanceBetweenPoints(lp_point, RegionGetCenter(RegionFromName(("Toxic Nest Region " + IntToString(lv_currentBestIndex))))))) {
                    lv_currentBestIndex = lv_regionIndex;
                }

            }
        }

    }
    if ((lv_currentBestIndex == 0)) {
        lv_regionIndex = 1;
        for ( ; ( (auto335E0A9E_ai >= 0 && lv_regionIndex <= auto335E0A9E_ae) || (auto335E0A9E_ai < 0 && lv_regionIndex >= auto335E0A9E_ae) ) ; lv_regionIndex += auto335E0A9E_ai ) {
            if ((RegionFromName(("Toxic Nest Region " + IntToString(lv_regionIndex))) == null)) {
                break;
            }

            if ((lv_currentBestIndex == 0)) {
                lv_currentBestIndex = lv_regionIndex;
            }
            else {
                if ((DistanceBetweenPoints(lp_point, RegionGetCenter(RegionFromName(("Toxic Nest Region " + IntToString(lv_regionIndex))))) < DistanceBetweenPoints(lp_point, RegionGetCenter(RegionFromName(("Toxic Nest Region " + IntToString(lv_currentBestIndex))))))) {
                    lv_currentBestIndex = lv_regionIndex;
                }

            }
        }
    }

    if ((lv_currentBestIndex == 0)) {
        return RegionRandomPoint(RegionCircle(lp_point, 4.0));
    }
    else {
        return RegionRandomPoint(RegionFromName(("Toxic Nest Region " + IntToString(lv_currentBestIndex))));
    }
}

point libPEB1_gf_DeepTunnelTeleportLocation (point lp_point) {
    // Variable Declarations
    int lv_pointIndex;
    point[4] lv_validDeepTunnelPoints;
    int lv_validDeepTunnelPointsCount;

    // Automatic Variable Declarations
    const int autoDAA442CE_ae = 3;
    const int autoDAA442CE_ai = 1;

    // Variable Initialization

    // Implementation
    lv_pointIndex = 1;
    for ( ; ( (autoDAA442CE_ai >= 0 && lv_pointIndex <= autoDAA442CE_ae) || (autoDAA442CE_ai < 0 && lv_pointIndex >= autoDAA442CE_ae) ) ; lv_pointIndex += autoDAA442CE_ai ) {
        if ((RegionContainsPoint(RegionCircle(libPEB1_gv_archangelAreas[5].lv_defenseHeroRandomSpawns[lv_pointIndex], 10.0), lp_point) == true)) {
            continue;
        }

        if ((UnitIsAlive(libPEB1_gv_murkyEggUnit) == true) && (libNtve_gf_UnitInRegion(libPEB1_gv_murkyEggUnit, RegionCircle(libPEB1_gv_archangelAreas[5].lv_defenseHeroRandomSpawns[lv_pointIndex], 10.0)) == true)) {
            continue;
        }

        lv_validDeepTunnelPointsCount += 1;
        lv_validDeepTunnelPoints[lv_validDeepTunnelPointsCount] = libPEB1_gv_archangelAreas[5].lv_defenseHeroRandomSpawns[lv_pointIndex];
    }
    if ((lv_validDeepTunnelPointsCount == 0)) {
        return null;
    }
    else {
        return lv_validDeepTunnelPoints[RandomInt(1, lv_validDeepTunnelPointsCount)];
    }
}

unit libPEB1_gf_GetBestSymbioteTarget () {
    // Variable Declarations
    int lv_heroIndex;
    unitgroup lv_validTargets;
    unit lv_bestTarget;

    // Automatic Variable Declarations
    const int auto00A57B79_ae = 5;
    const int auto00A57B79_ai = 1;
    unitgroup auto11272C75_g;
    int auto11272C75_u;
    unit auto11272C75_var;
    unitgroup auto8EAFCC53_g;
    int auto8EAFCC53_u;
    unit auto8EAFCC53_var;
    unitgroup auto3977A031_g;
    int auto3977A031_u;
    unit auto3977A031_var;

    // Variable Initialization
    lv_validTargets = UnitGroupEmpty();

    // Implementation
    lv_heroIndex = 1;
    for ( ; ( (auto00A57B79_ai >= 0 && lv_heroIndex <= auto00A57B79_ae) || (auto00A57B79_ai < 0 && lv_heroIndex >= auto00A57B79_ae) ) ; lv_heroIndex += auto00A57B79_ai ) {
        if ((UnitIsAlive(libPVEM_gf_PvENPCHeroUnit(libPEB1_gv_zergHeroes[lv_heroIndex].lv_hero)) == true) && (libPEB1_gv_zergHeroes[lv_heroIndex].lv_hero != "Abathur")) {
            if ((UnitGroupCount(UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(libPVEM_gf_PvENPCHeroUnit(libPEB1_gv_zergHeroes[lv_heroIndex].lv_hero)), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                UnitGroupAdd(lv_validTargets, libPVEM_gf_PvENPCHeroUnit(libPEB1_gv_zergHeroes[lv_heroIndex].lv_hero));
            }

        }

    }
    auto11272C75_g = UnitGroupAlliance(libStEx_gv_pLAYER_11_ORDER, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto11272C75_u = UnitGroupCount(auto11272C75_g, c_unitCountAll);
    for (;; auto11272C75_u -= 1) {
        auto11272C75_var = UnitGroupUnitFromEnd(auto11272C75_g, auto11272C75_u);
        if (auto11272C75_var == null) { break; }
        if (((UnitGetType(auto11272C75_var) == "AbathurEvolvedMonstrosity") || (UnitGetType(auto11272C75_var) == "TerranArchangelDefender") || (UnitGetType(auto11272C75_var) == "ZergUltralisk")) && (UnitGroupCount(UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto11272C75_var), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
            UnitGroupAdd(lv_validTargets, auto11272C75_var);
        }

    }
    if ((UnitGroupCount(lv_validTargets, c_unitCountAlive) == 0)) {
        auto8EAFCC53_g = UnitGroupAlliance(libStEx_gv_pLAYER_11_ORDER, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto8EAFCC53_u = UnitGroupCount(auto8EAFCC53_g, c_unitCountAll);
        for (;; auto8EAFCC53_u -= 1) {
            auto8EAFCC53_var = UnitGroupUnitFromEnd(auto8EAFCC53_g, auto8EAFCC53_u);
            if (auto8EAFCC53_var == null) { break; }
            if ((UnitGetType(auto8EAFCC53_var) == "AbathurLocustNormal") && (UnitGroupCount(UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto8EAFCC53_var), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                UnitGroupAdd(lv_validTargets, auto8EAFCC53_var);
            }

        }
    }

    auto3977A031_g = lv_validTargets;
    auto3977A031_u = UnitGroupCount(auto3977A031_g, c_unitCountAll);
    for (;; auto3977A031_u -= 1) {
        auto3977A031_var = UnitGroupUnitFromEnd(auto3977A031_g, auto3977A031_u);
        if (auto3977A031_var == null) { break; }
        if ((lv_bestTarget == null)) {
            lv_bestTarget = auto3977A031_var;
        }
        else {
            if ((UnitGroupCount(UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto3977A031_var), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > UnitGroupCount(UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_bestTarget), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))) {
                lv_bestTarget = auto3977A031_var;
            }

        }
    }
    return lv_bestTarget;
}

trigger auto_libPEB1_gf_AbathurAI_Trigger = null;

void libPEB1_gf_AbathurAI () {
    if (auto_libPEB1_gf_AbathurAI_Trigger == null) {
        auto_libPEB1_gf_AbathurAI_Trigger = TriggerCreate("auto_libPEB1_gf_AbathurAI_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_AbathurAI_Trigger, false, false);
}

bool auto_libPEB1_gf_AbathurAI_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_abathur;
    int lv_abathurPlayer;
    timer lv_deepTunnelCooldown;
    point lv_deepTunnelLocation;
    unitgroup lv_nearbyUnits;
    unit lv_symbioteTarget;

    // Automatic Variable Declarations
    unitgroup auto7C9A2E23_g;
    int auto7C9A2E23_u;
    unit auto7C9A2E23_var;
    unitgroup auto0A49F9F0_g;
    int auto0A49F9F0_u;
    unit auto0A49F9F0_var;
    unitgroup autoEAA346DB_g;
    int autoEAA346DB_u;
    unit autoEAA346DB_var;

    // Variable Initialization
    lv_deepTunnelCooldown = TimerCreate();
    lv_nearbyUnits = UnitGroupEmpty();

    // Implementation
    if ((UnitIsAlive(libPVEM_gf_PvENPCHeroUnit("Abathur")) == false)) {
        return true;
    }
    else {
        lv_abathur = libPVEM_gf_PvENPCHeroUnit("Abathur");
        lv_abathurPlayer = UnitGetOwner(lv_abathur);
    }
    UnitBehaviorRemove(lv_abathur, "LocustSpawnTimer", 1);
    while (true) {
        Wait(1.0, c_timeGame);
        if (((UnitIsAlive(lv_abathur) == false) || (libGame_gv_gameOver == true))) {
            return true;
        }

        if ((libPEB1_gv_archangelAreas[5].lv_areaDefeated == true)) {
            libGame_gv_players[UnitGetOwner(lv_abathur)].lv_suppressKillLogwhenKilled = true;
            UnitCreateEffectUnit(lv_abathur, "Kill", lv_abathur);
            return true;
        }

        if ((UnitGroupCount(UnitGroupAlliance(libStEx_gv_pLAYER_11_ORDER, c_unitAllianceAlly, RegionFromName("Zagara 5"), libPVEM_gv_pvEEventHeroicFilters, 1), c_unitCountAlive) > 0)) {
            break;
        }

        UnitIssueOrder(lv_abathur, OrderTargetingPoint(AbilityCommand("AbathurToxicNest", 0), libPEB1_gf_ToxicNestSpawnPoint(UnitGetPosition(lv_abathur))), c_orderQueueReplace);
    }
    UnitBehaviorAdd(lv_abathur, "LocustSpawnTimer", lv_abathur, 1);
    while (true) {
        Wait(0.5, c_timeGame);
        if (((UnitIsAlive(lv_abathur) == false) || (libGame_gv_gameOver == true))) {
            return true;
        }

        if ((libPEB1_gv_archangelAreas[5].lv_areaDefeated == true)) {
            libPEB1_gv_noAbathurSecondChance = true;
            libGame_gv_players[UnitGetOwner(lv_abathur)].lv_suppressKillLogwhenKilled = true;
            UnitCreateEffectUnit(lv_abathur, "Kill", lv_abathur);
            return true;
        }

        if ((TimerGetRemaining(lv_deepTunnelCooldown) < 0.1) && (libNtve_gf_UnitIsVisibleToPlayer(lv_abathur, libStEx_gv_pLAYER_11_ORDER) == true) && (UnitGroupCount(UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_abathur), 13.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
            lv_deepTunnelLocation = libPEB1_gf_DeepTunnelTeleportLocation(UnitGetPosition(lv_abathur));
            if ((lv_deepTunnelLocation != null)) {
                TimerStart(lv_deepTunnelCooldown, 7.0, false, c_timeGame);
                auto7C9A2E23_g = UnitGroup("AbathurSymbiote", lv_abathurPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto7C9A2E23_u = UnitGroupCount(auto7C9A2E23_g, c_unitCountAll);
                for (;; auto7C9A2E23_u -= 1) {
                    auto7C9A2E23_var = UnitGroupUnitFromEnd(auto7C9A2E23_g, auto7C9A2E23_u);
                    if (auto7C9A2E23_var == null) { break; }
                    UnitIssueOrder(auto7C9A2E23_var, Order(AbilityCommand("AbathurAssumingDirectControlCancel", 0)), c_orderQueueReplace);
                }
                Wait(2.0, c_timeGame);
                UnitIssueOrder(lv_abathur, OrderTargetingPoint(AbilityCommand("AbathurDeepTunnel", 0), lv_deepTunnelLocation), c_orderQueueReplace);
                Wait(2.5, c_timeGame);
                continue;
            }

        }

        if ((UnitGroupCount(UnitGroup("AbathurEvolvedMonstrosity", lv_abathurPlayer, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            lv_nearbyUnits = UnitGroup("AbathurLocustNormal", lv_abathurPlayer, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((UnitGroupCount(lv_nearbyUnits, c_unitCountAlive) > 0)) {
                UnitIssueOrder(lv_abathur, OrderTargetingUnit(AbilityCommand("AbathurEvolveMonstrosity", 0), UnitGroupClosestToPoint(lv_nearbyUnits, UnitGetPosition(lv_abathur))), c_orderQueueReplace);
            }

        }

        auto0A49F9F0_g = UnitGroup("AbathurEvolvedMonstrosity", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0A49F9F0_u = UnitGroupCount(auto0A49F9F0_g, c_unitCountAll);
        for (;; auto0A49F9F0_u -= 1) {
            auto0A49F9F0_var = UnitGroupUnitFromEnd(auto0A49F9F0_g, auto0A49F9F0_u);
            if (auto0A49F9F0_var == null) { break; }
            if ((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, UnitGetOwner(auto0A49F9F0_var)) == true)) {
                UnitIssueOrder(auto0A49F9F0_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(auto0A49F9F0_var)))), c_orderQueueReplace);
            }

        }
        UnitIssueOrder(lv_abathur, OrderTargetingPoint(AbilityCommand("AbathurToxicNest", 0), libPEB1_gf_ToxicNestSpawnPoint(UnitGetPosition(lv_abathur))), c_orderQueueReplace);
        if ((UnitGroupCount(UnitGroup("AbathurSymbiote", lv_abathurPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            autoEAA346DB_g = UnitGroup("AbathurSymbiote", lv_abathurPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoEAA346DB_u = UnitGroupCount(autoEAA346DB_g, c_unitCountAll);
            for (;; autoEAA346DB_u -= 1) {
                autoEAA346DB_var = UnitGroupUnitFromEnd(autoEAA346DB_g, autoEAA346DB_u);
                if (autoEAA346DB_var == null) { break; }
                lv_nearbyUnits = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoEAA346DB_var), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((UnitGroupCount(lv_nearbyUnits, c_unitCountAlive) > 0)) {
                    UnitIssueOrder(autoEAA346DB_var, Order(AbilityCommand("AbathurSymbioteSpikeBurst", 0)), c_orderQueueAddToFront);
                }

                lv_nearbyUnits = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoEAA346DB_var), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((UnitGroupCount(lv_nearbyUnits, c_unitCountAlive) > 0)) {
                    UnitIssueOrder(autoEAA346DB_var, OrderTargetingPoint(AbilityCommand("AbathurSymbioteStab", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_nearbyUnits, UnitGetPosition(autoEAA346DB_var)))), c_orderQueueAddToFront);
                    UnitIssueOrder(autoEAA346DB_var, Order(AbilityCommand("AbathurSymbioteCarapace", 0)), c_orderQueueAddToFront);
                }

                lv_nearbyUnits = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoEAA346DB_var), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((UnitGroupCount(lv_nearbyUnits, c_unitCountAlive) == 0)) {
                    UnitIssueOrder(autoEAA346DB_var, Order(AbilityCommand("AbathurAssumingDirectControlCancel", 0)), c_orderQueueReplace);
                    break;
                }

            }
        }
        else {
            lv_symbioteTarget = libPEB1_gf_GetBestSymbioteTarget();
            if ((lv_symbioteTarget != null)) {
                UnitIssueOrder(lv_abathur, OrderTargetingUnit(AbilityCommand("AbathurSymbiote", 0), lv_symbioteTarget), c_orderQueueReplace);
            }

        }
    }
    return true;
}

void libPEB1_gf_ApplyAnubArakTalents (int lp_playerIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPVEM_gf_PvEGameDifficulty() == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Heroic)) {
        CatalogFieldValueModifyFixed(c_gameCatalogEffect, "AnubarakCocoonCryptweaverApplyBehavior", "Chance", lp_playerIndex, 1.0, c_upgradeOperationSet);
        CatalogFieldValueModifyFixed(c_gameCatalogEffect, "AnubarakCocoonCryptweaverRangeIndicatorApplyBehavior", "Chance", lp_playerIndex, 1.0, c_upgradeOperationSet);
    }

}

void libPEB1_gf_ApplyButcherTalents (int lp_playerIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPVEM_gf_PvEGameDifficulty() == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Heroic)) {
        CatalogFieldValueModifyInt(c_gameCatalogEffect, "ButcherLambToTheSlaughterPostSearch", "AreaArray[" + IntToString(0) + "].MaxCount", lp_playerIndex, 14, c_upgradeOperationAdd);
    }

}

void libPEB1_gf_ApplyDehakaTalents (int lp_playerIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPVEM_gf_PvEGameDifficulty() == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Heroic)) {
        CatalogFieldValueSet(c_gameCatalogEffect, "DehakaIsolationContagionTalentSearch", "Chance", lp_playerIndex, "1.0");
    }

}

void libPEB1_gf_ApplyDiabloTalents (int lp_playerIndex) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueSet(c_gameCatalogAbil, "DiabloShadowCharge", "Range", lp_playerIndex, FixedToString((CatalogFieldValueGetAsFixed(c_gameCatalogAbil, "DiabloShadowCharge", "Range", 0) * CatalogFieldValueGetAsFixed(c_gameCatalogTalent, "DiabloMasteryFromTheShadowsShadowCharge", "AbilityModificationArray[" + IntToString(0) + "].Modifications[" + IntToString(0) + "].Value", 0)), c_fixedPrecisionAny));
    PlayerAddTalent(lp_playerIndex, "DiabloTalentDominationOverpower");
    if ((libPVEM_gf_PvEGameDifficulty() == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Heroic)) {
        CatalogFieldValueModifyFixed(c_gameCatalogEffect, "DiabloLightningBreathOffsetPersistent", "PeriodicOffsetArray[" + IntToString(0) + "]", lp_playerIndex, 2.25, c_upgradeOperationSubtract);
        CatalogFieldValueModifyFixed(c_gameCatalogEffect, "DiabloLightningBreathSearchArea", "AreaArray[" + IntToString(0) + "].RectangleHeight", lp_playerIndex, 4.5, c_upgradeOperationAdd);
        CatalogFieldValueModifyFixed(c_gameCatalogBehavior, "DiabloLightningBreathController", "Duration", lp_playerIndex, 2.0, c_upgradeOperationAdd);
        CatalogFieldValueModifyFixed(c_gameCatalogBehavior, "DiabloLightningBreathUnstoppable", "Duration", lp_playerIndex, 2.0, c_upgradeOperationAdd);
        CatalogFieldValueModifyFixed(c_gameCatalogActor, "DiabloLightningBreathChargeBreatheInModel", "Scale", lp_playerIndex, 0.5, c_upgradeOperationAdd);
        CatalogFieldValueModifyFixed(c_gameCatalogActor, "DiabloLightningBreathChargeBreatheOutModel", "Scale", lp_playerIndex, 0.5, c_upgradeOperationAdd);
        CatalogFieldValueModifyFixed(c_gameCatalogActor, "DiabloLightningBreathGuide", "Height", lp_playerIndex, 4.5, c_upgradeOperationAdd);
        CatalogLinkReplace(lp_playerIndex, c_gameCatalogSound, "Diablo_LightningBreath_Launch", "Diablo_LightningEndless_Launch");
    }

}

void libPEB1_gf_ApplyKerriganTalents (int lp_playerIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPVEM_gf_PvEGameDifficulty() == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Heroic)) {
        CatalogFieldValueModifyFixed(c_gameCatalogEffect, "MaelstromSearch", "AreaArray[" + IntToString(0) + "].Radius", lp_playerIndex, 1.0, c_upgradeOperationAdd);
        CatalogFieldValueModifyFixed(c_gameCatalogActor, "KerriganMaelstromBuff", "Scale", lp_playerIndex, 0.4, c_upgradeOperationAdd);
        CatalogLinkReplace(lp_playerIndex, c_gameCatalogSound, "Kerrigan_Maelstrom_Cast", "Kerrigan_Omegastorm_Cast");
        CatalogLinkReplace(lp_playerIndex, c_gameCatalogSound, "Kerrigan_Maelstrom_Loop", "Kerrigan_Omegastorm_Loop");
        CatalogLinkReplace(lp_playerIndex, c_gameCatalogSound, "Kerrigan_Maelstrom_Impact", "Kerrigan_Omegastorm_Impact");
        CatalogLinkReplace(lp_playerIndex, c_gameCatalogSound, "Kerrigan_Maelstrom_End", "Kerrigan_Omegastorm_End");
        CatalogFieldValueModifyFixed(c_gameCatalogActor, "KerriganMaelstromRangeSplat", "Scale", lp_playerIndex, 1.0, c_upgradeOperationAdd);
        UnitBehaviorAdd(libGame_gv_players[lp_playerIndex].lv_heroUnit, "KerriganMaelstromMasteryCarryBehavior", libGame_gv_players[lp_playerIndex].lv_heroUnit, 1);
    }

}

void libPEB1_gf_ApplyMurkyTalents (int lp_playerIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPVEM_gf_PvEGameDifficulty() == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Heroic)) {
        UnitBehaviorAdd(libGame_gv_players[lp_playerIndex].lv_heroUnit, "OctoGrabMasteryCarryBehavior", libGame_gv_players[lp_playerIndex].lv_heroUnit, 1);
    }

}

void libPEB1_gf_ApplyStitchesTalents (int lp_playerIndex) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "DevourApplyMasteryHealBehavior", "Chance", lp_playerIndex, "1");
    CatalogFieldValueSet(c_gameCatalogEffect, "SlamDamage", "Amount", lp_playerIndex, "144");
    UnitBehaviorAddPlayer(libGame_gv_players[lp_playerIndex].lv_heroUnit, "StitchesTenderizer", lp_playerIndex, 1);
    CatalogFieldValueSet(c_gameCatalogEffect, "SlamSearch", "AreaArray[" + IntToString(0) + "].Radius", lp_playerIndex, "10");
    CatalogFieldValueSet(c_gameCatalogEffect, "SlamSearch", "AreaArray[" + IntToString(0) + "].Arc", lp_playerIndex, "87.5");
    CatalogLinkReplace(lp_playerIndex, c_gameCatalogModel, "StitchesSlamModel", "StitchesSlamSmashModel");
    CatalogFieldValueSet(c_gameCatalogEffect, "SlamApplyStunBehavior", "Chance", lp_playerIndex, "1");
    CatalogFieldValueSet(c_gameCatalogAbil, "StitchesSlam", "Cost.Cooldown.TimeUse", lp_playerIndex, "6");
    CatalogLinkReplace(lp_playerIndex, c_gameCatalogSound, "Stitches_Slam_Cast", "Stitches_Slam_Pulverize_Cast");
}

void libPEB1_gf_ApplyStukovTalents (int lp_playerIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPVEM_gf_PvEGameDifficulty() == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Heroic)) {
        PlayerAddTalent(lp_playerIndex, "StukovPushComesToShove");
        PlayerAddTalent(lp_playerIndex, "StukovPushComesToShove");
        CatalogFieldValueModifyFixed(c_gameCatalogBehavior, "StukovMassiveShovePeriodicForce", "Modification.MoveSpeedMinimum", lp_playerIndex, 5.5, c_upgradeOperationAdd);
        CatalogFieldValueModifyFixed(c_gameCatalogBehavior, "StukovMassiveShovePeriodicForce", "Modification.MoveSpeedMaximum", lp_playerIndex, 5.5, c_upgradeOperationAdd);
        CatalogFieldValueModifyFixed(c_gameCatalogBehavior, "StukovMassiveShoveSegmentSpawningBehavior", "Period", lp_playerIndex, 0.125, c_upgradeOperationSubtract);
    }

}

void libPEB1_gf_ApplyTychusTalents (int lp_playerIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPVEM_gf_PvEGameDifficulty() == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Heroic)) {
        CatalogFieldValueSet(c_gameCatalogEffect, "TychusOdinRagnarokMissilesNuclearBlastInitialSet", "Chance", lp_playerIndex, "1.0");
    }

}

string libPEB1_gf_PZEZergBossSkin (string lp_boss) {
    // Automatic Variable Declarations
    string auto6E607832_val;

    // Implementation
    auto6E607832_val = lp_boss;
    if (auto6E607832_val == "Stitches") {
        return "StitchesDecay";
    }
    else if (auto6E607832_val == "Butcher") {
        return "ButcherButcherlisk";
    }
    else if (auto6E607832_val == "Kerrigan") {
        return "KerriganUltimate";
    }
    else if (auto6E607832_val == "Zagara") {
        return "ZagaraUltimate";
    }
    else if (auto6E607832_val == "Abathur") {
        return "AbathurUltimate";
    }
    else if (auto6E607832_val == "Tychus") {
        return "TychusInfestedBase";
    }
    else if (auto6E607832_val == "Murky") {
        return "MurkyGruntyRed";
    }
    else if (auto6E607832_val == "Diablo") {
        return "DiabloKaijoeRed";
    }
    else if (auto6E607832_val == "Anubarak") {
        return "AnubarakZergVar2";
    }
    else if (auto6E607832_val == "Dehaka") {
        return "DehakaMasterVar2";
    }
    else if (auto6E607832_val == "Stukov") {
        return "StukovBaseVar1";
    }
    else {
        return "StitchesDecay";
    }
}

text libPEB1_gf_PZEZergBossName (string lp_boss) {
    // Automatic Variable Declarations
    string auto6B5FE65A_val;

    // Implementation
    auto6B5FE65A_val = lp_boss;
    if (auto6B5FE65A_val == "Abathur") {
        return StringExternal("Param/Value/lib_PEB1_03EBD140");
    }
    else if (auto6B5FE65A_val == "Anubarak") {
        return StringExternal("Param/Value/lib_PEB1_90A7FD4D");
    }
    else if (auto6B5FE65A_val == "Dehaka") {
        return StringExternal("Param/Value/lib_PEB1_0112CCD7");
    }
    else if (auto6B5FE65A_val == "Diablo") {
        return StringExternal("Param/Value/lib_PEB1_E07257DC");
    }
    else if (auto6B5FE65A_val == "Butcher") {
        return StringExternal("Param/Value/lib_PEB1_76F7C3D7");
    }
    else if (auto6B5FE65A_val == "Kerrigan") {
        return StringExternal("Param/Value/lib_PEB1_9B2E3ABA");
    }
    else if (auto6B5FE65A_val == "Murky") {
        return StringExternal("Param/Value/lib_PEB1_DF1F3D7C");
    }
    else if (auto6B5FE65A_val == "Stitches") {
        return StringExternal("Param/Value/lib_PEB1_2ED224A1");
    }
    else if (auto6B5FE65A_val == "Tychus") {
        return StringExternal("Param/Value/lib_PEB1_C38D48F0");
    }
    else if (auto6B5FE65A_val == "Zagara") {
        return StringExternal("Param/Value/lib_PEB1_E92934CF");
    }
    else if (auto6B5FE65A_val == "Stukov") {
        return StringExternal("Param/Value/lib_PEB1_9D855EE0");
    }
    else {
    }
    return StringExternal("Param/Value/lib_PEB1_16661C2A");
}

void libPEB1_gf_TurnOnOffZergHeroAI (unit lp_boss, bool lp_onOff) {
    // Variable Declarations
    bool lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_onOff == true)) {
        UnitGroupAdd(libPEB1_gv_activeZergHeroes, lp_boss);
        if ((lp_boss == libPVEM_gf_PvENPCHeroUnit("Abathur"))) {
            libPEB1_gf_AbathurAI();
            return ;
        }

        AIEnableForPlayer(UnitGetOwner(lp_boss), (libAIAI_ge_HeroAIDifficulty_HeroAIElite));
    }
    else {
        UnitGroupRemove(libPEB1_gv_activeZergHeroes, lp_boss);
        AIDisableForPlayer(UnitGetOwner(lp_boss));
    }
}

trigger auto_libPEB1_gf_SpawnZergHeroforWave_Trigger = null;
point auto_libPEB1_gf_SpawnZergHeroforWave_lp_spawnLocation;
unitgroup auto_libPEB1_gf_SpawnZergHeroforWave_lp_waveGroup;

void libPEB1_gf_SpawnZergHeroforWave (point lp_spawnLocation, unitgroup lp_waveGroup) {
    auto_libPEB1_gf_SpawnZergHeroforWave_lp_spawnLocation = lp_spawnLocation;
    auto_libPEB1_gf_SpawnZergHeroforWave_lp_waveGroup = lp_waveGroup;

    if (auto_libPEB1_gf_SpawnZergHeroforWave_Trigger == null) {
        auto_libPEB1_gf_SpawnZergHeroforWave_Trigger = TriggerCreate("auto_libPEB1_gf_SpawnZergHeroforWave_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_SpawnZergHeroforWave_Trigger, false, false);
}

bool auto_libPEB1_gf_SpawnZergHeroforWave_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnLocation = auto_libPEB1_gf_SpawnZergHeroforWave_lp_spawnLocation;
    unitgroup lp_waveGroup = auto_libPEB1_gf_SpawnZergHeroforWave_lp_waveGroup;

    // Variable Declarations
    int lv_reviveIndex;
    int[6] lv_orderArray;
    int lv_orderIndex;
    unit lv_spawnedHero;

    // Automatic Variable Declarations
    const int autoFA2A67F7_ae = 5;
    const int autoFA2A67F7_ai = 1;
    int auto2467C3A5_ae;
    const int auto2467C3A5_ai = 1;
    const int autoDF00626E_ae = 5;
    const int autoDF00626E_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    if ((libPEB1_gv_disableZergSpawning == true)) {
        return true;
    }

    lv_orderIndex = 0;
    lv_reviveIndex = libPEB1_gv_zergHeroSpawnCounter;
    for ( ; ( (autoFA2A67F7_ai >= 0 && lv_reviveIndex <= autoFA2A67F7_ae) || (autoFA2A67F7_ai < 0 && lv_reviveIndex >= autoFA2A67F7_ae) ) ; lv_reviveIndex += autoFA2A67F7_ai ) {
        lv_orderIndex += 1;
        lv_orderArray[lv_orderIndex] = lv_reviveIndex;
    }
    auto2467C3A5_ae = (libPEB1_gv_zergHeroSpawnCounter - 1);
    lv_reviveIndex = 1;
    for ( ; ( (auto2467C3A5_ai >= 0 && lv_reviveIndex <= auto2467C3A5_ae) || (auto2467C3A5_ai < 0 && lv_reviveIndex >= auto2467C3A5_ae) ) ; lv_reviveIndex += auto2467C3A5_ai ) {
        lv_orderIndex += 1;
        lv_orderArray[lv_orderIndex] = lv_reviveIndex;
    }
    lv_orderIndex = 1;
    for ( ; ( (autoDF00626E_ai >= 0 && lv_orderIndex <= autoDF00626E_ae) || (autoDF00626E_ai < 0 && lv_orderIndex >= autoDF00626E_ae) ) ; lv_orderIndex += autoDF00626E_ai ) {
        if ((libPEB1_gv_zergHeroes[lv_orderArray[lv_orderIndex]].lv_active == true) && (libPEB1_gv_zergHeroes[lv_orderArray[lv_orderIndex]].lv_state != libPEB1_ge_ZergHeroState_Alive) && (TimerGetRemaining(libPEB1_gv_zergHeroes[lv_orderArray[lv_orderIndex]].lv_respawnTimer) < 0.1)) {
            libPEB1_gv_zergHeroes[lv_orderArray[lv_orderIndex]].lv_state = libPEB1_ge_ZergHeroState_Alive;
            TimerStart(libPEB1_gv_zergHeroes[lv_orderArray[lv_orderIndex]].lv_respawnTimer, 10.0, false, c_timeGame);
            if ((libPEB1_gv_zergHeroes[lv_orderArray[lv_orderIndex]].lv_hero == "Murky")) {
                if ((RandomInt(1, 2) == 1)) {
                    libPVEM_gf_PvESpawnNPCHero(libPEB1_gv_zergHeroes[lv_orderArray[lv_orderIndex]].lv_hero, PointFromName("Murky Final Holdout Left"), libPEB1_gv_zergHeroLevel);
                }
                else {
                    libPVEM_gf_PvESpawnNPCHero(libPEB1_gv_zergHeroes[lv_orderArray[lv_orderIndex]].lv_hero, PointFromName("Murky Final Holdout Right"), libPEB1_gv_zergHeroLevel);
                }
            }
            else {
                libPVEM_gf_PvESpawnNPCHero(libPEB1_gv_zergHeroes[lv_orderArray[lv_orderIndex]].lv_hero, lp_spawnLocation, libPEB1_gv_zergHeroLevel);
                lv_spawnedHero = libPVEM_gf_PvENPCHeroUnit(libPEB1_gv_zergHeroes[lv_orderArray[lv_orderIndex]].lv_hero);
                UnitGroupAdd(lp_waveGroup, lv_spawnedHero);
                UnitBehaviorAddPlayer(lv_spawnedHero, "MovementBuff15", UnitGetOwner(lv_spawnedHero), 1);
                if ((RegionContainsPoint(libPEB1_gv_zergSpawnRegions[1], lp_spawnLocation) == true)) {
                    UnitIssueOrder(lv_spawnedHero, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName("Lane 1 - 1")), c_orderQueueReplace);
                }

                if ((RegionContainsPoint(libPEB1_gv_zergSpawnRegions[2], lp_spawnLocation) == true)) {
                    UnitIssueOrder(lv_spawnedHero, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName("Lane 2 - 1")), c_orderQueueReplace);
                }

            }
            if ((lv_orderArray[lv_orderIndex] == libPEB1_gv_zergHeroSpawnCounter)) {
                libPEB1_gv_zergHeroSpawnCounter += 1;
                if ((libPEB1_gv_zergHeroSpawnCounter == 6)) {
                    libPEB1_gv_zergHeroSpawnCounter = 1;
                }

            }

            return true;
        }

    }
    return true;
}

trigger auto_libPEB1_gf_PrepareTheNextHero_Trigger = null;
int auto_libPEB1_gf_PrepareTheNextHero_lp_index;

void libPEB1_gf_PrepareTheNextHero (int lp_index) {
    auto_libPEB1_gf_PrepareTheNextHero_lp_index = lp_index;

    if (auto_libPEB1_gf_PrepareTheNextHero_Trigger == null) {
        auto_libPEB1_gf_PrepareTheNextHero_Trigger = TriggerCreate("auto_libPEB1_gf_PrepareTheNextHero_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_PrepareTheNextHero_Trigger, false, false);
}

bool auto_libPEB1_gf_PrepareTheNextHero_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_libPEB1_gf_PrepareTheNextHero_lp_index;

    // Variable Declarations
    int lv_itAvailableIndex;
    int lv_itHeroIndex;
    string[21] lv_unusedHeroes;
    int lv_unusedHeroesCount;
    bool lv_found;
    string lv_nextHero;

    // Automatic Variable Declarations
    int autoCD1DBF91_ae;
    const int autoCD1DBF91_ai = 1;
    const int auto2AC7F565_ae = libPVEM_gv_pvENPCHeroMaxCount_C;
    const int auto2AC7F565_ai = 1;

    // Variable Initialization

    // Implementation
    libPEB1_gv_zergHeroes[lp_index].lv_active = false;
    Wait(8.0, c_timeGame);
    if ((libPEB1_gv_spawnMurkyForFinalHoldout == true)) {
        libPEB1_gv_spawnMurkyForFinalHoldout = false;
        lv_nextHero = "Murky";
    }
    else {
        lv_unusedHeroesCount = 0;
        autoCD1DBF91_ae = libPEB1_gv_availableHeroTypesCount;
        lv_itAvailableIndex = 1;
        for ( ; ( (autoCD1DBF91_ai >= 0 && lv_itAvailableIndex <= autoCD1DBF91_ae) || (autoCD1DBF91_ai < 0 && lv_itAvailableIndex >= autoCD1DBF91_ae) ) ; lv_itAvailableIndex += autoCD1DBF91_ai ) {
            lv_found = false;
            lv_itHeroIndex = 1;
            for ( ; ( (auto2AC7F565_ai >= 0 && lv_itHeroIndex <= auto2AC7F565_ae) || (auto2AC7F565_ai < 0 && lv_itHeroIndex >= auto2AC7F565_ae) ) ; lv_itHeroIndex += auto2AC7F565_ai ) {
                if ((libPEB1_gv_zergHeroes[lv_itHeroIndex].lv_hero == libPEB1_gv_availableHeroTypes[lv_itAvailableIndex])) {
                    lv_found = true;
                    break;
                }

            }
            if ((lv_found == false)) {
                lv_unusedHeroesCount += 1;
                lv_unusedHeroes[lv_unusedHeroesCount] = libPEB1_gv_availableHeroTypes[lv_itAvailableIndex];
            }

        }
        if ((lv_unusedHeroesCount == 0)) {
            lv_nextHero = libPEB1_gv_zergHeroes[lp_index].lv_hero;
        }
        else {
            lv_nextHero = lv_unusedHeroes[RandomInt(1, lv_unusedHeroesCount)];
        }
    }
    libPVEM_gf_PvEResetNPCHero(libPEB1_gv_zergHeroes[lp_index].lv_hero);
    libPVEM_gf_PvEPrepareNPCHero(lv_nextHero, libPEB1_gf_PZEZergBossSkin(lv_nextHero));
    libPEB1_gv_zergHeroes[lp_index].lv_hero = lv_nextHero;
    libPEB1_gv_zergHeroes[lp_index].lv_state = libPEB1_ge_ZergHeroState_NotYetSpawned;
    Wait(10.0, c_timeGame);
    libPEB1_gv_zergHeroes[lp_index].lv_active = true;
    return true;
}

void libPEB1_gf_ConfigureAttackWaveWaypointsforLane (int lp_waveIndex, int lp_lane) {
    // Automatic Variable Declarations
    int autoE41EFFDF_val;

    // Implementation
    autoE41EFFDF_val = lp_lane;
    if (autoE41EFFDF_val == 1) {
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 1 - 1"));
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 1 - 2"));
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 1 - 3"));
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 1 - 4"));
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 1 - 5"));
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 1 - 6"));
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 1 - 7"));
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 1 - 8"));
    }
    else if (autoE41EFFDF_val == 2) {
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 2 - 1"));
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 2 - 2"));
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 2 - 3"));
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 2 - 4"));
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 2 - 5"));
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 2 - 6"));
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 2 - 7"));
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 2 - 8"));
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 2 - 9"));
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 2 - 10"));
    }
    else if (autoE41EFFDF_val == 3) {
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 3 - 1"));
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 3 - 2"));
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 3 - 3"));
    }
    else if (autoE41EFFDF_val == 4) {
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 4 - 1"));
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 4 - 2"));
        libPVEM_gf_PvEAddAttackWaveWaypoint(lp_waveIndex, PointFromName("Lane 4 - 3"));
    }
    else {
    }
}

trigger auto_libPEB1_gf_CreateBasicAttackWave_Trigger = null;
string auto_libPEB1_gf_CreateBasicAttackWave_lp_unitType1;
string auto_libPEB1_gf_CreateBasicAttackWave_lp_unitType2;
string auto_libPEB1_gf_CreateBasicAttackWave_lp_unitType3;
int auto_libPEB1_gf_CreateBasicAttackWave_lp_count1;
int auto_libPEB1_gf_CreateBasicAttackWave_lp_count2;
int auto_libPEB1_gf_CreateBasicAttackWave_lp_count3;
int auto_libPEB1_gf_CreateBasicAttackWave_lp_lane;

void libPEB1_gf_CreateBasicAttackWave (string lp_unitType1, string lp_unitType2, string lp_unitType3, int lp_count1, int lp_count2, int lp_count3, int lp_lane) {
    auto_libPEB1_gf_CreateBasicAttackWave_lp_unitType1 = lp_unitType1;
    auto_libPEB1_gf_CreateBasicAttackWave_lp_unitType2 = lp_unitType2;
    auto_libPEB1_gf_CreateBasicAttackWave_lp_unitType3 = lp_unitType3;
    auto_libPEB1_gf_CreateBasicAttackWave_lp_count1 = lp_count1;
    auto_libPEB1_gf_CreateBasicAttackWave_lp_count2 = lp_count2;
    auto_libPEB1_gf_CreateBasicAttackWave_lp_count3 = lp_count3;
    auto_libPEB1_gf_CreateBasicAttackWave_lp_lane = lp_lane;

    if (auto_libPEB1_gf_CreateBasicAttackWave_Trigger == null) {
        auto_libPEB1_gf_CreateBasicAttackWave_Trigger = TriggerCreate("auto_libPEB1_gf_CreateBasicAttackWave_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_CreateBasicAttackWave_Trigger, false, false);
}

bool auto_libPEB1_gf_CreateBasicAttackWave_TriggerFunc (bool testConds, bool runActions) {
    string lp_unitType1 = auto_libPEB1_gf_CreateBasicAttackWave_lp_unitType1;
    string lp_unitType2 = auto_libPEB1_gf_CreateBasicAttackWave_lp_unitType2;
    string lp_unitType3 = auto_libPEB1_gf_CreateBasicAttackWave_lp_unitType3;
    int lp_count1 = auto_libPEB1_gf_CreateBasicAttackWave_lp_count1;
    int lp_count2 = auto_libPEB1_gf_CreateBasicAttackWave_lp_count2;
    int lp_count3 = auto_libPEB1_gf_CreateBasicAttackWave_lp_count3;
    int lp_lane = auto_libPEB1_gf_CreateBasicAttackWave_lp_lane;

    // Variable Declarations
    int lv_waveIndex;
    int lv_laneIndex;

    // Automatic Variable Declarations
    int autoFE6CCC34_val;
    int auto624A188E_n;
    int auto624A188E_i;
    int autoD95CC485_n;
    int autoD95CC485_i;
    int autoEBC8100F_n;
    int autoEBC8100F_i;

    // Variable Initialization

    // Implementation
    if ((libPEB1_gv_disableZergSpawning == true)) {
        return true;
    }

    if ((libPEB1_gv_basicWavePaused == true)) {
        return true;
    }

    libPVEM_gf_PvECreateAttackWave();
    lv_waveIndex = libPVEM_gf_PvELastCreatedAttackWave();
    autoFE6CCC34_val = lp_lane;
    if (autoFE6CCC34_val == libPEB1_ge_Lane_Top) {
        lv_laneIndex = 1;
    }
    else if (autoFE6CCC34_val == libPEB1_ge_Lane_Bottom) {
        lv_laneIndex = 2;
    }
    else {
    }
    auto624A188E_n = lp_count1;
    for (auto624A188E_i = 1; auto624A188E_i <= auto624A188E_n; auto624A188E_i += 1) {
        libPVEM_gf_PvESpawnNPCMinions(lp_unitType1, libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
        libPVEM_gf_PvEAddUnitToAttackWave(lv_waveIndex, UnitLastCreated());
        UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 2"))), c_orderQueueReplace);
        Wait(0.0625, c_timeGame);
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

    }
    autoD95CC485_n = lp_count2;
    for (autoD95CC485_i = 1; autoD95CC485_i <= autoD95CC485_n; autoD95CC485_i += 1) {
        libPVEM_gf_PvESpawnNPCMinions(lp_unitType2, libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
        libPVEM_gf_PvEAddUnitToAttackWave(lv_waveIndex, UnitLastCreated());
        UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 2"))), c_orderQueueReplace);
        Wait(0.0625, c_timeGame);
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

    }
    autoEBC8100F_n = lp_count3;
    for (autoEBC8100F_i = 1; autoEBC8100F_i <= autoEBC8100F_n; autoEBC8100F_i += 1) {
        libPVEM_gf_PvESpawnNPCMinions(lp_unitType3, libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
        libPVEM_gf_PvEAddUnitToAttackWave(lv_waveIndex, UnitLastCreated());
        UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 2"))), c_orderQueueReplace);
        Wait(0.0625, c_timeGame);
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

    }
    libPEB1_gf_ConfigureAttackWaveWaypointsforLane(lv_waveIndex, lv_laneIndex);
    libPVEM_gf_PvESendAttackWave(lv_waveIndex);
    return true;
}

unit libPEB1_gf_NydusWormSpawn (point lp_location) {
    // Automatic Variable Declarations
    int auto9467A08B_val;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CoopNydusWorm", 0, libCore_gv_cOMPUTER_TeamChaos, lp_location, null);
    libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, libCore_gv_cOMPUTER_TeamOrder);
    auto9467A08B_val = RandomInt(1, 2);
    if (auto9467A08B_val == 1) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), "birth", "Birth 01", c_animFlagFullMatch | c_animFlagNonLooping, 0.0);
        Wait(4.2, c_timeGame);
    }
    else if (auto9467A08B_val == 2) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), "birth", "Birth 02", c_animFlagFullMatch | c_animFlagNonLooping, 0.0);
        Wait(3.3, c_timeGame);
    }
    else {
    }
    return UnitLastCreated();
}

trigger auto_libPEB1_gf_CreateDropPod_Trigger = null;
point auto_libPEB1_gf_CreateDropPod_lp_location;
string auto_libPEB1_gf_CreateDropPod_lp_unitType;
int auto_libPEB1_gf_CreateDropPod_lp_count;

void libPEB1_gf_CreateDropPod (point lp_location, string lp_unitType, int lp_count) {
    auto_libPEB1_gf_CreateDropPod_lp_location = lp_location;
    auto_libPEB1_gf_CreateDropPod_lp_unitType = lp_unitType;
    auto_libPEB1_gf_CreateDropPod_lp_count = lp_count;

    if (auto_libPEB1_gf_CreateDropPod_Trigger == null) {
        auto_libPEB1_gf_CreateDropPod_Trigger = TriggerCreate("auto_libPEB1_gf_CreateDropPod_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_CreateDropPod_Trigger, false, false);
}

bool auto_libPEB1_gf_CreateDropPod_TriggerFunc (bool testConds, bool runActions) {
    point lp_location = auto_libPEB1_gf_CreateDropPod_lp_location;
    string lp_unitType = auto_libPEB1_gf_CreateDropPod_lp_unitType;
    int lp_count = auto_libPEB1_gf_CreateDropPod_lp_count;

    // Variable Declarations
    actor lv_dropPodModel;
    unitgroup lv_distantTargets;

    // Automatic Variable Declarations
    int auto3C642155_n;
    int auto3C642155_i;

    // Variable Initialization
    lv_distantTargets = UnitGroupEmpty();

    // Implementation
    libNtve_gf_CreateModelAtPoint("ZagaraInfestedDropDropPod", lp_location);
    lv_dropPodModel = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetTeamColor 128,0,128 128,0,128");
    Wait(1.4, c_timeGame);
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("ZagaraCreepTumor", c_playerAny, RegionCircle(lp_location, 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("ZagaraCreepTumorBurrowed", c_playerAny, RegionCircle(lp_location, 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZagaraCreepTumor", 0, libCore_gv_cOMPUTER_TeamChaos, lp_location, null);
    }

    auto3C642155_n = lp_count;
    for (auto3C642155_i = 1; auto3C642155_i <= auto3C642155_n; auto3C642155_i += 1) {
        libPVEM_gf_PvESpawnNPCMinions(lp_unitType, libCore_gv_cOMPUTER_TeamChaos, lp_location, libNtve_gf_RandomAngle(), c_unitCreateIgnorePlacement);
        libPEB1_gf_TurnOnOffZergMinionAI(UnitLastCreated(), true);
        libPEB1_gf_ChangeZergMinionAIToAutoSeekEnemy(UnitLastCreated());
    }
    Wait(1.7, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

void libPEB1_gf_CreateNydusWormUnits (unit lp_nydusWorm, string lp_unitType, int lp_count) {
    // Automatic Variable Declarations
    int auto19FE1A3C_n;
    int auto19FE1A3C_i;

    // Implementation
    auto19FE1A3C_n = lp_count;
    for (auto19FE1A3C_i = 1; auto19FE1A3C_i <= auto19FE1A3C_n; auto19FE1A3C_i += 1) {
        libPVEM_gf_PvESpawnNPCMinions(lp_unitType, libCore_gv_cOMPUTER_TeamChaos, PointWithOffsetPolar(UnitGetPosition(lp_nydusWorm), 2.0, UnitGetFacing(lp_nydusWorm)), libNtve_gf_RandomAngle(), c_unitCreateIgnorePlacement);
        libPEB1_gf_TurnOnOffZergMinionAI(UnitLastCreated(), true);
        libPEB1_gf_ChangeZergMinionAIToAutoSeekEnemy(UnitLastCreated());
        UnitGroupAdd(libPEB1_gv_nydusGroup, UnitLastCreated());
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_nydusWorm), "Spell", "Spell,B", c_animFlagNonLooping, c_animTimeDefault);
}

trigger auto_libPEB1_gf_CreateNydusWormatPoint_Trigger = null;
point auto_libPEB1_gf_CreateNydusWormatPoint_lp_point;

void libPEB1_gf_CreateNydusWormatPoint (point lp_point) {
    auto_libPEB1_gf_CreateNydusWormatPoint_lp_point = lp_point;

    if (auto_libPEB1_gf_CreateNydusWormatPoint_Trigger == null) {
        auto_libPEB1_gf_CreateNydusWormatPoint_Trigger = TriggerCreate("auto_libPEB1_gf_CreateNydusWormatPoint_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_CreateNydusWormatPoint_Trigger, false, false);
}

bool auto_libPEB1_gf_CreateNydusWormatPoint_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_libPEB1_gf_CreateNydusWormatPoint_lp_point;

    // Variable Declarations
    unit lv_nydusWorm;

    // Automatic Variable Declarations
    int autoD0388E2A_val;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    MinimapPing(PlayerGroupAll(), lp_point, 5.0, Color(100.00, 0.00, 0.00));
    lv_nydusWorm = libPEB1_gf_NydusWormSpawn(lp_point);
    Wait(1.0, c_timeGame);
    while (true) {
        while (!(((UnitIsAlive(lv_nydusWorm) == false) || ((libPEB1_gv_pauseNydusSpawning == false) && (UnitGroupCount(libPEB1_gv_nydusGroup, c_unitCountAlive) < 50))))) {
            Wait(1.0, c_timeGame);
        }
        if (((libGame_gv_gameOver == true) || (UnitIsAlive(lv_nydusWorm) == false))) {
            return true;
        }

        autoD0388E2A_val = RandomInt(1, 4);
        if (autoD0388E2A_val == 1) {
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergZergling", libPVEM_gf_PvEDifficultyValueInt(4, 6));
        }
        else if (autoD0388E2A_val == 2) {
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergZergling", libPVEM_gf_PvEDifficultyValueInt(0, 2));
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(1, 1));
        }
        else if (autoD0388E2A_val == 3) {
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergZergling", libPVEM_gf_PvEDifficultyValueInt(0, 2));
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(1, 1));
        }
        else if (autoD0388E2A_val == 4) {
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergBaneling", libPVEM_gf_PvEDifficultyValueInt(2, 3));
        }
        else {
        }
        Wait(libPEB1_gv_nydusWormSpawnInterval, c_timeGame);
    }
    return true;
}

trigger auto_libPEB1_gf_CreateEventWavePing_Trigger = null;
unitgroup auto_libPEB1_gf_CreateEventWavePing_lp_attackGroup;
bool auto_libPEB1_gf_CreateEventWavePing_lp_heroic;

void libPEB1_gf_CreateEventWavePing (unitgroup lp_attackGroup, bool lp_heroic) {
    auto_libPEB1_gf_CreateEventWavePing_lp_attackGroup = lp_attackGroup;
    auto_libPEB1_gf_CreateEventWavePing_lp_heroic = lp_heroic;

    if (auto_libPEB1_gf_CreateEventWavePing_Trigger == null) {
        auto_libPEB1_gf_CreateEventWavePing_Trigger = TriggerCreate("auto_libPEB1_gf_CreateEventWavePing_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_CreateEventWavePing_Trigger, false, false);
}

bool auto_libPEB1_gf_CreateEventWavePing_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_attackGroup = auto_libPEB1_gf_CreateEventWavePing_lp_attackGroup;
    bool lp_heroic = auto_libPEB1_gf_CreateEventWavePing_lp_heroic;

    // Variable Declarations
    int lv_attackPing1;
    int lv_attackPing2;
    point lv_pingPos;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackPing1 = c_invalidPingId;
    lv_attackPing2 = c_invalidPingId;

    // Implementation
    PingCreate(PlayerGroupAll(), "PingSimple", UnitGroupCenterOfGroup(lp_attackGroup), libCore_gv_cOLOREnemyColor, 0.0, 0);
    lv_attackPing1 = PingLastCreated();
    PingSetTooltip(lv_attackPing1, StringExternal("Param/Value/lib_PEB1_BF7E8162"));
    PingSetScale(lv_attackPing1, 0.6);
    if ((lp_heroic == true)) {
        PingCreate(PlayerGroupAll(), "PingObjective", UnitGroupCenterOfGroup(lp_attackGroup), Color(100.00, 7.84, 7.84), 0.0, 0);
        lv_attackPing2 = PingLastCreated();
        PingSetScale(lv_attackPing2, 0.5);
    }

    while (true) {
        Wait(0.0625, c_timeGame);
        lv_pingPos = UnitGroupCenterOfGroup(lp_attackGroup);
        if ((lv_attackPing2 != c_invalidPingId)) {
            if ((VisIsVisibleForPlayer(libCore_gv_cOMPUTER_TeamOrder, lv_pingPos) == true)) {
                PingSetVisible(lv_attackPing2, false);
            }
            else {
                PingSetVisible(lv_attackPing2, true);
            }
        }

        if (((libGame_gv_gameOver == true) || (libNtve_gf_UnitGroupIsDead(lp_attackGroup) == true) || ((UnitGroupCount(UnitGroup(null, libCore_gv_cOMPUTER_TeamOrder, RegionCircle(lv_pingPos, 20.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) && (VisIsVisibleForPlayer(libCore_gv_cOMPUTER_TeamOrder, lv_pingPos) == true)))) {
            PingDestroy(lv_attackPing1);
            if ((lv_attackPing2 != c_invalidPingId)) {
                PingDestroy(lv_attackPing2);
            }

            return true;
        }

        PingSetPosition(lv_attackPing1, lv_pingPos);
        if ((lv_attackPing2 != c_invalidPingId)) {
            PingSetPosition(lv_attackPing2, lv_pingPos);
        }

    }
    return true;
}

trigger auto_libPEB1_gf_CreateEventWavePingSmallRadius_Trigger = null;
unitgroup auto_libPEB1_gf_CreateEventWavePingSmallRadius_lp_attackGroup;

void libPEB1_gf_CreateEventWavePingSmallRadius (unitgroup lp_attackGroup) {
    auto_libPEB1_gf_CreateEventWavePingSmallRadius_lp_attackGroup = lp_attackGroup;

    if (auto_libPEB1_gf_CreateEventWavePingSmallRadius_Trigger == null) {
        auto_libPEB1_gf_CreateEventWavePingSmallRadius_Trigger = TriggerCreate("auto_libPEB1_gf_CreateEventWavePingSmallRadius_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_CreateEventWavePingSmallRadius_Trigger, false, false);
}

bool auto_libPEB1_gf_CreateEventWavePingSmallRadius_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_attackGroup = auto_libPEB1_gf_CreateEventWavePingSmallRadius_lp_attackGroup;

    // Variable Declarations
    int lv_attackPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackPing = c_invalidPingId;

    // Implementation
    PingCreate(PlayerGroupAll(), "PingSimple", UnitGroupCenterOfGroup(lp_attackGroup), libCore_gv_cOLOREnemyColor, 0.0, 0);
    lv_attackPing = PingLastCreated();
    PingSetTooltip(lv_attackPing, StringExternal("Param/Value/lib_PEB1_94D64E74"));
    PingSetScale(lv_attackPing, 0.6);
    while (true) {
        Wait(0.0625, c_timeGame);
        if (((libGame_gv_gameOver == true) || (libNtve_gf_UnitGroupIsDead(lp_attackGroup) == true) || (UnitGroupCount(UnitGroup(null, libCore_gv_cOMPUTER_TeamOrder, RegionCircle(PingGetPosition(lv_attackPing), 6.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            PingDestroy(lv_attackPing);
            return true;
        }

        PingSetPosition(lv_attackPing, UnitGroupCenterOfGroup(lp_attackGroup));
    }
    return true;
}

trigger auto_libPEB1_gf_SendEventWavewithDelay_Trigger = null;
int auto_libPEB1_gf_SendEventWavewithDelay_lp_waveIndex;
unitgroup auto_libPEB1_gf_SendEventWavewithDelay_lp_attackGroup;
fixed auto_libPEB1_gf_SendEventWavewithDelay_lp_delay;

void libPEB1_gf_SendEventWavewithDelay (int lp_waveIndex, unitgroup lp_attackGroup, fixed lp_delay) {
    auto_libPEB1_gf_SendEventWavewithDelay_lp_waveIndex = lp_waveIndex;
    auto_libPEB1_gf_SendEventWavewithDelay_lp_attackGroup = lp_attackGroup;
    auto_libPEB1_gf_SendEventWavewithDelay_lp_delay = lp_delay;

    if (auto_libPEB1_gf_SendEventWavewithDelay_Trigger == null) {
        auto_libPEB1_gf_SendEventWavewithDelay_Trigger = TriggerCreate("auto_libPEB1_gf_SendEventWavewithDelay_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_SendEventWavewithDelay_Trigger, false, false);
}

bool auto_libPEB1_gf_SendEventWavewithDelay_TriggerFunc (bool testConds, bool runActions) {
    int lp_waveIndex = auto_libPEB1_gf_SendEventWavewithDelay_lp_waveIndex;
    unitgroup lp_attackGroup = auto_libPEB1_gf_SendEventWavewithDelay_lp_attackGroup;
    fixed lp_delay = auto_libPEB1_gf_SendEventWavewithDelay_lp_delay;

    // Variable Declarations
    timer lv_delayTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_delayTimer = TimerCreate();

    // Implementation
    TimerStart(lv_delayTimer, lp_delay, false, c_timeGame);
    while (true) {
        Wait(1.0, c_timeGame);
        if (((libGame_gv_gameOver == true) || (libNtve_gf_UnitGroupIsDead(lp_attackGroup) == true))) {
            return true;
        }

        if (((TimerGetRemaining(lv_delayTimer) < 0.1) || (libPEB1_gf_ValidOrderUnitNearbyUnitGroup(lp_attackGroup, 13.0) == true))) {
            libPVEM_gf_PvESendAttackWave(lp_waveIndex);
            return true;
        }

    }
    return true;
}

trigger auto_libPEB1_gf_CreateZergCamp_Trigger = null;
string auto_libPEB1_gf_CreateZergCamp_lp_type1;
int auto_libPEB1_gf_CreateZergCamp_lp_count1;
string auto_libPEB1_gf_CreateZergCamp_lp_type2;
int auto_libPEB1_gf_CreateZergCamp_lp_count2;
region auto_libPEB1_gf_CreateZergCamp_lp_region;

void libPEB1_gf_CreateZergCamp (string lp_type1, int lp_count1, string lp_type2, int lp_count2, region lp_region) {
    auto_libPEB1_gf_CreateZergCamp_lp_type1 = lp_type1;
    auto_libPEB1_gf_CreateZergCamp_lp_count1 = lp_count1;
    auto_libPEB1_gf_CreateZergCamp_lp_type2 = lp_type2;
    auto_libPEB1_gf_CreateZergCamp_lp_count2 = lp_count2;
    auto_libPEB1_gf_CreateZergCamp_lp_region = lp_region;

    if (auto_libPEB1_gf_CreateZergCamp_Trigger == null) {
        auto_libPEB1_gf_CreateZergCamp_Trigger = TriggerCreate("auto_libPEB1_gf_CreateZergCamp_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_CreateZergCamp_Trigger, false, false);
}

bool auto_libPEB1_gf_CreateZergCamp_TriggerFunc (bool testConds, bool runActions) {
    string lp_type1 = auto_libPEB1_gf_CreateZergCamp_lp_type1;
    int lp_count1 = auto_libPEB1_gf_CreateZergCamp_lp_count1;
    string lp_type2 = auto_libPEB1_gf_CreateZergCamp_lp_type2;
    int lp_count2 = auto_libPEB1_gf_CreateZergCamp_lp_count2;
    region lp_region = auto_libPEB1_gf_CreateZergCamp_lp_region;

    // Variable Declarations
    unitgroup lv_zergGroup;
    region lv_spawnRegion;
    int lv_respawnCounter;

    // Automatic Variable Declarations
    int auto95BA4BA5_n;
    int auto95BA4BA5_i;
    int auto9603F159_n;
    int auto9603F159_i;

    // Variable Initialization
    lv_zergGroup = UnitGroupEmpty();

    // Implementation
    while (true) {
        while (!((libPEB1_gf_ValidOrderUnitNearbyPoint(RegionGetCenter(lp_region), 40.0) == true))) {
            Wait(1.0, c_timeGame);
        }
        lv_spawnRegion = libPEB1_gf_NearestSpawnLocation(RegionGetCenter(lp_region));
        if ((DistanceBetweenPoints(RegionGetCenter(lp_region), RegionGetCenter(lv_spawnRegion)) > 70.0)) {
            return true;
        }

        auto95BA4BA5_n = (lp_count1 - UnitGroupCount(UnitGroupFilter(lp_type1, libCore_gv_cOMPUTER_TeamChaos, lv_zergGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        for (auto95BA4BA5_i = 1; auto95BA4BA5_i <= auto95BA4BA5_n; auto95BA4BA5_i += 1) {
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

            libPVEM_gf_PvESpawnNPCMinions(lp_type1, libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(lv_spawnRegion), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(lv_zergGroup, UnitLastCreated());
            libPEB1_gf_UnburrowZergUnitforCamp(UnitLastCreated(), lp_region);
            Wait(0.0625, c_timeGame);
        }
        auto9603F159_n = (lp_count2 - UnitGroupCount(UnitGroupFilter(lp_type2, libCore_gv_cOMPUTER_TeamChaos, lv_zergGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        for (auto9603F159_i = 1; auto9603F159_i <= auto9603F159_n; auto9603F159_i += 1) {
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

            libPVEM_gf_PvESpawnNPCMinions(lp_type2, libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(lv_spawnRegion), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(lv_zergGroup, UnitLastCreated());
            libPEB1_gf_UnburrowZergUnitforCamp(UnitLastCreated(), lp_region);
            Wait(0.0625, c_timeGame);
        }
        Wait(1.3875, c_timeGame);
        while ((UnitGroupCount(lv_zergGroup, c_unitCountAlive) > 0) && (libPEB1_gf_ValidOrderUnitNearbyPoint(RegionGetCenter(lp_region), 48.0) == true)) {
            libPEB1_gf_RunZergCampAILoop(lv_zergGroup, lp_region);
        }
        if ((libNtve_gf_UnitGroupIsDead(lv_zergGroup) == true)) {
            return true;
        }

        libPEB1_gf_BurrowZergUnitGroup(lv_zergGroup);
        Wait(5.0, c_timeGame);
    }
    return true;
}

void libPEB1_gf_InitHatchery (unit lp_hatchery) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitIsAlive(lp_hatchery) == false)) {
        return ;
    }

    libPEB1_gv_hatcheryCount += 1;
    if ((libPEB1_gv_hatcheryCount > 31)) {
        libPEB1_gv_hatcheryCount = 31;
        return ;
    }

    libPEB1_gv_hatcheries[libPEB1_gv_hatcheryCount].lv_structure = lp_hatchery;
    libPEB1_gv_hatcheries[libPEB1_gv_hatcheryCount].lv_defenseRegion = RegionCircle(UnitGetPosition(lp_hatchery), 16.0);
    libPEB1_gv_hatcheries[libPEB1_gv_hatcheryCount].lv_homeRegion = RegionCircle(UnitGetPosition(lp_hatchery), 8.0);
    libPEB1_gv_hatcheries[libPEB1_gv_hatcheryCount].lv_spawnRegion = libPEB1_gf_NearestSpawnLocation(UnitGetPosition(lp_hatchery));
    CreepModify(UnitGetPosition(lp_hatchery), 12.0, true, true);
}

void libPEB1_gf_RunZergCampAILoop (unitgroup lp_zergGroup, region lp_region) {
    // Variable Declarations
    int lv_zergCount;
    unit lv_nearestPlayerUnit;
    fixed lv_nearestZergDistance;
    bool lv_unitDamaged;
    bool lv_leash;
    unitgroup lv_idleUnits;
    bool lv_stillLeashing;
    unitgroup lv_homeGroup;
    unitgroup lv_defenseGroup;
    unitgroup lv_distantTargets;

    // Automatic Variable Declarations
    unitgroup autoDE8228D4_g;
    int autoDE8228D4_u;
    unit autoDE8228D4_var;
    unitgroup auto6C97CE22_g;
    int auto6C97CE22_u;
    unit auto6C97CE22_var;
    unitgroup autoAB1FB279_g;
    int autoAB1FB279_u;
    unit autoAB1FB279_var;
    unitgroup auto7CAEC42A_g;
    int auto7CAEC42A_u;
    unit auto7CAEC42A_var;
    unitgroup auto671F676A_g;
    int auto671F676A_u;
    unit auto671F676A_var;
    unitgroup auto02F00A9E_g;
    int auto02F00A9E_u;
    unit auto02F00A9E_var;
    unitgroup autoAD9940F6_g;
    int autoAD9940F6_u;
    unit autoAD9940F6_var;
    unitgroup autoC9E420DC_g;
    int autoC9E420DC_u;
    unit autoC9E420DC_var;
    unitgroup auto210BD56B_g;
    int auto210BD56B_u;
    unit auto210BD56B_var;
    unitgroup autoD31E3868_g;
    int autoD31E3868_u;
    unit autoD31E3868_var;
    unitgroup autoDC1C2413_g;
    int autoDC1C2413_u;
    unit autoDC1C2413_var;

    // Variable Initialization
    lv_idleUnits = UnitGroupEmpty();
    lv_homeGroup = UnitGroupEmpty();
    lv_defenseGroup = UnitGroupEmpty();
    lv_distantTargets = UnitGroupEmpty();

    // Implementation
    lv_zergCount = UnitGroupCount(lp_zergGroup, c_unitCountAlive);
    autoDE8228D4_g = lp_zergGroup;
    autoDE8228D4_u = UnitGroupCount(autoDE8228D4_g, c_unitCountAll);
    for (;; autoDE8228D4_u -= 1) {
        autoDE8228D4_var = UnitGroupUnitFromEnd(autoDE8228D4_g, autoDE8228D4_u);
        if (autoDE8228D4_var == null) { break; }
        UnitSetCustomValue(autoDE8228D4_var, 0, UnitGetPropertyFixed(autoDE8228D4_var, c_unitPropLife, c_unitPropCurrent));
    }
    while (true) {
        Wait(1.0, c_timeGame);
        if (((libGame_gv_gameOver == true) || (libNtve_gf_UnitGroupIsDead(lp_zergGroup) == true) || (libPEB1_gf_ValidOrderUnitNearbyPoint(RegionGetCenter(lp_region), 48.0) == false))) {
            return ;
        }

        if ((libPEB1_gf_ValidOrderUnitNearbyPoint(UnitGroupCenterOfGroup(lp_zergGroup), 16.0) == true)) {
            break;
        }

        if ((UnitGroupCount(lp_zergGroup, c_unitCountAlive) < lv_zergCount)) {
            if ((libPEB1_gf_ValidOrderUnitNearbyPoint(UnitGroupCenterOfGroup(lp_zergGroup), 20.0) == true)) {
                break;
            }
            else {
                lv_zergCount = UnitGroupCount(lp_zergGroup, c_unitCountAlive);
            }
        }

        lv_unitDamaged = false;
        auto6C97CE22_g = lp_zergGroup;
        auto6C97CE22_u = UnitGroupCount(auto6C97CE22_g, c_unitCountAll);
        for (;; auto6C97CE22_u -= 1) {
            auto6C97CE22_var = UnitGroupUnitFromEnd(auto6C97CE22_g, auto6C97CE22_u);
            if (auto6C97CE22_var == null) { break; }
            if ((UnitGetPropertyFixed(auto6C97CE22_var, c_unitPropLife, c_unitPropCurrent) < UnitGetCustomValue(auto6C97CE22_var, 0))) {
                lv_unitDamaged = true;
                break;
            }

        }
        if ((lv_unitDamaged == true) && (libPEB1_gf_ValidOrderUnitNearbyPoint(UnitGroupCenterOfGroup(lp_zergGroup), 20.0) == true)) {
            break;
        }

        autoAB1FB279_g = lp_zergGroup;
        autoAB1FB279_u = UnitGroupCount(autoAB1FB279_g, c_unitCountAll);
        for (;; autoAB1FB279_u -= 1) {
            autoAB1FB279_var = UnitGroupUnitFromEnd(autoAB1FB279_g, autoAB1FB279_u);
            if (autoAB1FB279_var == null) { break; }
            if ((UnitGetPropertyFixed(autoAB1FB279_var, c_unitPropLife, c_unitPropCurrent) < UnitGetPropertyFixed(autoAB1FB279_var, c_unitPropLifeMax, c_unitPropCurrent))) {
                if (((UnitGetPropertyFixed(autoAB1FB279_var, c_unitPropLifeMax, c_unitPropCurrent) - UnitGetPropertyFixed(autoAB1FB279_var, c_unitPropLife, c_unitPropCurrent)) < (UnitGetPropertyFixed(autoAB1FB279_var, c_unitPropLifeMax, c_unitPropCurrent) * 0.02))) {
                    UnitSetPropertyFixed(autoAB1FB279_var, c_unitPropLifePercent, 100.0);
                }
                else {
                    UnitSetPropertyFixed(autoAB1FB279_var, c_unitPropLife, (UnitGetPropertyFixed(autoAB1FB279_var, c_unitPropLife, c_unitPropCurrent) + (UnitGetPropertyFixed(autoAB1FB279_var, c_unitPropLifeMax, c_unitPropCurrent) * 0.02)));
                }
                UnitSetCustomValue(autoAB1FB279_var, 0, UnitGetPropertyFixed(autoAB1FB279_var, c_unitPropLife, c_unitPropCurrent));
            }

        }
        auto7CAEC42A_g = lp_zergGroup;
        auto7CAEC42A_u = UnitGroupCount(auto7CAEC42A_g, c_unitCountAll);
        for (;; auto7CAEC42A_u -= 1) {
            auto7CAEC42A_var = UnitGroupUnitFromEnd(auto7CAEC42A_g, auto7CAEC42A_u);
            if (auto7CAEC42A_var == null) { break; }
            if ((RandomInt(1, 16) == 1)) {
                UnitIssueOrder(auto7CAEC42A_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lp_region)), c_orderQueueReplace);
            }

        }
    }
    libPEB1_gf_TurnOnOffZergMinionGroupAI(lp_zergGroup, true);
    while (true) {
        Wait(1.0, c_timeGame);
        if (((libGame_gv_gameOver == true) || (libNtve_gf_UnitGroupIsDead(lp_zergGroup) == true))) {
            return ;
        }

        lv_leash = false;
        auto671F676A_g = lp_zergGroup;
        auto671F676A_u = UnitGroupCount(auto671F676A_g, c_unitCountAll);
        for (;; auto671F676A_u -= 1) {
            auto671F676A_var = UnitGroupUnitFromEnd(auto671F676A_g, auto671F676A_u);
            if (auto671F676A_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(auto671F676A_var, libPEB1_gv_zergTerritory) == false)) {
                lv_leash = true;
                break;
            }

        }
        if ((lv_leash == true)) {
            break;
        }

        if ((libPEB1_gf_ValidOrderUnitNearbyPoint(UnitGroupCenterOfGroup(lp_zergGroup), 20.0) == false)) {
            break;
        }

        lv_distantTargets = libPEB1_gf_HeroicOrderUnitsinRegion(libPEB1_gv_zergTerritory);
        if ((UnitGroupCount(lv_distantTargets, c_unitCountAlive) > 0)) {
            auto02F00A9E_g = lp_zergGroup;
            auto02F00A9E_u = UnitGroupCount(auto02F00A9E_g, c_unitCountAll);
            for (;; auto02F00A9E_u -= 1) {
                auto02F00A9E_var = UnitGroupUnitFromEnd(auto02F00A9E_g, auto02F00A9E_u);
                if (auto02F00A9E_var == null) { break; }
                if ((libPEB1_gf_ValidOrderUnitNearbyPoint(UnitGetPosition(auto02F00A9E_var), 12.0) == false)) {
                    UnitIssueOrder(auto02F00A9E_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_distantTargets, UnitGetPosition(auto02F00A9E_var)))), c_orderQueueReplace);
                }

            }
        }

    }
    libPEB1_gf_TurnOnOffZergMinionGroupAI(lp_zergGroup, false);
    autoAD9940F6_g = lp_zergGroup;
    autoAD9940F6_u = UnitGroupCount(autoAD9940F6_g, c_unitCountAll);
    for (;; autoAD9940F6_u -= 1) {
        autoAD9940F6_var = UnitGroupUnitFromEnd(autoAD9940F6_g, autoAD9940F6_u);
        if (autoAD9940F6_var == null) { break; }
        UnitIssueOrder(autoAD9940F6_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lp_region)), c_orderQueueReplace);
    }
    while (true) {
        Wait(2.0, c_timeGame);
        if (((libGame_gv_gameOver == true) || (libNtve_gf_UnitGroupIsDead(lp_zergGroup) == true))) {
            return ;
        }

        lv_idleUnits = UnitGroupIdle(libCore_gv_cOMPUTER_TeamChaos, false);
        autoC9E420DC_g = lp_zergGroup;
        autoC9E420DC_u = UnitGroupCount(autoC9E420DC_g, c_unitCountAll);
        for (;; autoC9E420DC_u -= 1) {
            autoC9E420DC_var = UnitGroupUnitFromEnd(autoC9E420DC_g, autoC9E420DC_u);
            if (autoC9E420DC_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(autoC9E420DC_var, lp_region) == false) && (UnitGroupHasUnit(lv_idleUnits, autoC9E420DC_var) == true)) {
                UnitIssueOrder(autoC9E420DC_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lp_region)), c_orderQueueReplace);
            }

        }
        lv_homeGroup = UnitGroupFilterRegion(lp_zergGroup, lp_region, 0);
        if ((UnitGroupCount(lv_homeGroup, c_unitCountAlive) > 0) && (libPEB1_gf_ValidOrderUnitNearbyPoint(RegionGetCenter(lp_region), 16.0) == true)) {
            auto210BD56B_g = lv_homeGroup;
            auto210BD56B_u = UnitGroupCount(auto210BD56B_g, c_unitCountAll);
            for (;; auto210BD56B_u -= 1) {
                auto210BD56B_var = UnitGroupUnitFromEnd(auto210BD56B_g, auto210BD56B_u);
                if (auto210BD56B_var == null) { break; }
                if ((UnitGroupHasUnit(lv_defenseGroup, auto210BD56B_var) == false)) {
                    UnitGroupAdd(lv_defenseGroup, auto210BD56B_var);
                    libPEB1_gf_TurnOnOffZergMinionAI(auto210BD56B_var, true);
                }

            }
        }

        if ((UnitGroupCount(lv_defenseGroup, c_unitCountAlive) > 0) && (libPEB1_gf_ValidOrderUnitNearbyPoint(UnitGroupCenterOfGroup(lv_defenseGroup), 16.0) == false)) {
            autoD31E3868_g = lv_defenseGroup;
            autoD31E3868_u = UnitGroupCount(autoD31E3868_g, c_unitCountAll);
            for (;; autoD31E3868_u -= 1) {
                autoD31E3868_var = UnitGroupUnitFromEnd(autoD31E3868_g, autoD31E3868_u);
                if (autoD31E3868_var == null) { break; }
                UnitGroupRemove(lv_defenseGroup, autoD31E3868_var);
                libPEB1_gf_TurnOnOffZergMinionAI(autoD31E3868_var, false);
                UnitIssueOrder(autoD31E3868_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lp_region)), c_orderQueueReplace);
            }
        }

        if ((UnitGroupCount(lv_defenseGroup, c_unitCountAlive) == 0)) {
            lv_stillLeashing = false;
            autoDC1C2413_g = lp_zergGroup;
            autoDC1C2413_u = UnitGroupCount(autoDC1C2413_g, c_unitCountAll);
            for (;; autoDC1C2413_u -= 1) {
                autoDC1C2413_var = UnitGroupUnitFromEnd(autoDC1C2413_g, autoDC1C2413_u);
                if (autoDC1C2413_var == null) { break; }
                if ((libNtve_gf_UnitInRegion(autoDC1C2413_var, lp_region) == false)) {
                    lv_stillLeashing = true;
                    break;
                }

            }
            if ((lv_stillLeashing == false)) {
                return ;
            }

        }

    }
}

trigger auto_libPEB1_gf_UnburrowZergUnitforCamp_Trigger = null;
unit auto_libPEB1_gf_UnburrowZergUnitforCamp_lp_zergUnit;
region auto_libPEB1_gf_UnburrowZergUnitforCamp_lp_region;

void libPEB1_gf_UnburrowZergUnitforCamp (unit lp_zergUnit, region lp_region) {
    auto_libPEB1_gf_UnburrowZergUnitforCamp_lp_zergUnit = lp_zergUnit;
    auto_libPEB1_gf_UnburrowZergUnitforCamp_lp_region = lp_region;

    if (auto_libPEB1_gf_UnburrowZergUnitforCamp_Trigger == null) {
        auto_libPEB1_gf_UnburrowZergUnitforCamp_Trigger = TriggerCreate("auto_libPEB1_gf_UnburrowZergUnitforCamp_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_UnburrowZergUnitforCamp_Trigger, false, false);
}

bool auto_libPEB1_gf_UnburrowZergUnitforCamp_TriggerFunc (bool testConds, bool runActions) {
    unit lp_zergUnit = auto_libPEB1_gf_UnburrowZergUnitforCamp_lp_zergUnit;
    region lp_region = auto_libPEB1_gf_UnburrowZergUnitforCamp_lp_region;

    // Automatic Variable Declarations
    string auto9E85B6D4_val;

    // Implementation
    libNtve_gf_ShowHideUnit(lp_zergUnit, false);
    libNtve_gf_PauseUnit(lp_zergUnit, true);
    libNtve_gf_MakeUnitInvulnerable(lp_zergUnit, true);
    UnitSetState(lp_zergUnit, c_unitStateStatusBar, false);
    if (((UnitGetType(lp_zergUnit) == "ZergMutalisk") || (UnitGetType(lp_zergUnit) == "ZergGuardian"))) {
        UnitSetHeight(lp_zergUnit, 10.0, 0.0);
        Wait(0.0625, c_timeGame);
        if ((UnitIsAlive(lp_zergUnit) == false)) {
            return true;
        }

        libNtve_gf_ShowHideUnit(lp_zergUnit, true);
        libNtve_gf_PauseUnit(lp_zergUnit, false);
        libNtve_gf_MakeUnitInvulnerable(lp_zergUnit, false);
        UnitSetState(lp_zergUnit, c_unitStateStatusBar, true);
        UnitSetHeight(lp_zergUnit, UnitGetPropertyFixed(lp_zergUnit, c_unitPropHeight, c_unitPropNormal), 1.3875);
        Wait(1.3875, c_timeGame);
    }
    else {
        auto9E85B6D4_val = UnitGetType(lp_zergUnit);
        if (auto9E85B6D4_val == "ZergRoach") {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_zergUnit), "Unburrow", "Birth", 0, c_animTimeDefault);
            Wait(0.0625, c_timeGame);
            if ((UnitIsAlive(lp_zergUnit) == false)) {
                return true;
            }

            libNtve_gf_ShowHideUnit(lp_zergUnit, true);
            libNtve_gf_MakeUnitInvulnerable(lp_zergUnit, false);
            UnitSetState(lp_zergUnit, c_unitStateStatusBar, true);
        }
        else if (auto9E85B6D4_val == "ZergBaneling") {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_zergUnit), "Unburrow", "Birth", 0, c_animTimeDefault);
            Wait(0.0625, c_timeGame);
            if ((UnitIsAlive(lp_zergUnit) == false)) {
                return true;
            }

            libNtve_gf_ShowHideUnit(lp_zergUnit, true);
            libNtve_gf_MakeUnitInvulnerable(lp_zergUnit, false);
            UnitSetState(lp_zergUnit, c_unitStateStatusBar, true);
        }
        else if (auto9E85B6D4_val == "ZergUltralisk") {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_zergUnit), "Unburrow", "Stand Cover End", 0, c_animTimeDefault);
            Wait(0.0625, c_timeGame);
            if ((UnitIsAlive(lp_zergUnit) == false)) {
                return true;
            }

            libNtve_gf_ShowHideUnit(lp_zergUnit, true);
            libNtve_gf_MakeUnitInvulnerable(lp_zergUnit, false);
            UnitSetState(lp_zergUnit, c_unitStateStatusBar, true);
            Wait(0.6045, c_timeGame);
        }
        else {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_zergUnit), "Unburrow", "Unburrow", 0, c_animTimeDefault);
            Wait(0.0625, c_timeGame);
            if ((UnitIsAlive(lp_zergUnit) == false)) {
                return true;
            }

            libNtve_gf_CreateActorAtPoint("AnubarakBeetleBurrow", UnitGetPosition(lp_zergUnit));
            if ((UnitGetType(lp_zergUnit) == "ZergHydralisk")) {
                ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.200000");
            }

            libNtve_gf_ShowHideUnit(lp_zergUnit, true);
            libNtve_gf_MakeUnitInvulnerable(lp_zergUnit, false);
            UnitSetState(lp_zergUnit, c_unitStateStatusBar, true);
            Wait(0.6045, c_timeGame);
        }
        libNtve_gf_PauseUnit(lp_zergUnit, false);
    }
    if ((UnitIsAlive(lp_zergUnit) == false)) {
        return true;
    }

    UnitIssueOrder(lp_zergUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lp_region)), c_orderQueueReplace);
    return true;
}

trigger auto_libPEB1_gf_UnburrowZergUnitforHatcheryDefense_Trigger = null;
unit auto_libPEB1_gf_UnburrowZergUnitforHatcheryDefense_lp_zergUnit;
point auto_libPEB1_gf_UnburrowZergUnitforHatcheryDefense_lp_attackPoint;

void libPEB1_gf_UnburrowZergUnitforHatcheryDefense (unit lp_zergUnit, point lp_attackPoint) {
    auto_libPEB1_gf_UnburrowZergUnitforHatcheryDefense_lp_zergUnit = lp_zergUnit;
    auto_libPEB1_gf_UnburrowZergUnitforHatcheryDefense_lp_attackPoint = lp_attackPoint;

    if (auto_libPEB1_gf_UnburrowZergUnitforHatcheryDefense_Trigger == null) {
        auto_libPEB1_gf_UnburrowZergUnitforHatcheryDefense_Trigger = TriggerCreate("auto_libPEB1_gf_UnburrowZergUnitforHatcheryDefense_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_UnburrowZergUnitforHatcheryDefense_Trigger, false, false);
}

bool auto_libPEB1_gf_UnburrowZergUnitforHatcheryDefense_TriggerFunc (bool testConds, bool runActions) {
    unit lp_zergUnit = auto_libPEB1_gf_UnburrowZergUnitforHatcheryDefense_lp_zergUnit;
    point lp_attackPoint = auto_libPEB1_gf_UnburrowZergUnitforHatcheryDefense_lp_attackPoint;

    // Automatic Variable Declarations
    string auto073282FC_val;

    // Implementation
    libNtve_gf_ShowHideUnit(lp_zergUnit, false);
    libNtve_gf_PauseUnit(lp_zergUnit, true);
    libNtve_gf_MakeUnitInvulnerable(lp_zergUnit, true);
    UnitSetState(lp_zergUnit, c_unitStateStatusBar, false);
    if (((UnitGetType(lp_zergUnit) == "ZergMutalisk") || (UnitGetType(lp_zergUnit) == "ZergGuardian"))) {
        UnitSetHeight(lp_zergUnit, 10.0, 0.0);
        Wait(0.0625, c_timeGame);
        if ((UnitIsAlive(lp_zergUnit) == false)) {
            return true;
        }

        libNtve_gf_ShowHideUnit(lp_zergUnit, true);
        libNtve_gf_PauseUnit(lp_zergUnit, false);
        libNtve_gf_MakeUnitInvulnerable(lp_zergUnit, false);
        UnitSetState(lp_zergUnit, c_unitStateStatusBar, true);
        UnitSetHeight(lp_zergUnit, UnitGetPropertyFixed(lp_zergUnit, c_unitPropHeight, c_unitPropNormal), 1.3875);
        Wait(1.3875, c_timeGame);
    }
    else {
        auto073282FC_val = UnitGetType(lp_zergUnit);
        if (auto073282FC_val == "ZergRoach") {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_zergUnit), "Unburrow", "Birth", 0, c_animTimeDefault);
            Wait(0.0625, c_timeGame);
            if ((UnitIsAlive(lp_zergUnit) == false)) {
                return true;
            }

            libNtve_gf_ShowHideUnit(lp_zergUnit, true);
            libNtve_gf_MakeUnitInvulnerable(lp_zergUnit, false);
            UnitSetState(lp_zergUnit, c_unitStateStatusBar, true);
        }
        else if (auto073282FC_val == "ZergBaneling") {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_zergUnit), "Unburrow", "Birth", 0, c_animTimeDefault);
            Wait(0.0625, c_timeGame);
            if ((UnitIsAlive(lp_zergUnit) == false)) {
                return true;
            }

            libNtve_gf_ShowHideUnit(lp_zergUnit, true);
            libNtve_gf_MakeUnitInvulnerable(lp_zergUnit, false);
            UnitSetState(lp_zergUnit, c_unitStateStatusBar, true);
        }
        else if (auto073282FC_val == "ZergUltralisk") {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_zergUnit), "Unburrow", "Stand Cover End", 0, c_animTimeDefault);
            Wait(0.0625, c_timeGame);
            if ((UnitIsAlive(lp_zergUnit) == false)) {
                return true;
            }

            libNtve_gf_ShowHideUnit(lp_zergUnit, true);
            libNtve_gf_MakeUnitInvulnerable(lp_zergUnit, false);
            UnitSetState(lp_zergUnit, c_unitStateStatusBar, true);
            Wait(0.6045, c_timeGame);
        }
        else {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_zergUnit), "Unburrow", "Unburrow", 0, c_animTimeDefault);
            Wait(0.0625, c_timeGame);
            if ((UnitIsAlive(lp_zergUnit) == false)) {
                return true;
            }

            libNtve_gf_CreateActorAtPoint("AnubarakBeetleBurrow", UnitGetPosition(lp_zergUnit));
            if ((UnitGetType(lp_zergUnit) == "ZergHydralisk")) {
                ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.200000");
            }

            libNtve_gf_ShowHideUnit(lp_zergUnit, true);
            libNtve_gf_MakeUnitInvulnerable(lp_zergUnit, false);
            UnitSetState(lp_zergUnit, c_unitStateStatusBar, true);
            Wait(0.6045, c_timeGame);
        }
        libNtve_gf_PauseUnit(lp_zergUnit, false);
    }
    if ((UnitIsAlive(lp_zergUnit) == false)) {
        return true;
    }

    UnitIssueOrder(lp_zergUnit, OrderTargetingPoint(AbilityCommand("move", 0), lp_attackPoint), c_orderQueueReplace);
    libPEB1_gf_TurnOnOffZergMinionAI(lp_zergUnit, true);
    return true;
}

trigger auto_libPEB1_gf_BurrowZergUnitGroup_Trigger = null;
unitgroup auto_libPEB1_gf_BurrowZergUnitGroup_lp_zergGroup;

void libPEB1_gf_BurrowZergUnitGroup (unitgroup lp_zergGroup) {
    auto_libPEB1_gf_BurrowZergUnitGroup_lp_zergGroup = lp_zergGroup;

    if (auto_libPEB1_gf_BurrowZergUnitGroup_Trigger == null) {
        auto_libPEB1_gf_BurrowZergUnitGroup_Trigger = TriggerCreate("auto_libPEB1_gf_BurrowZergUnitGroup_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_BurrowZergUnitGroup_Trigger, false, false);
}

bool auto_libPEB1_gf_BurrowZergUnitGroup_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_zergGroup = auto_libPEB1_gf_BurrowZergUnitGroup_lp_zergGroup;

    // Automatic Variable Declarations
    unitgroup auto63626C58_g;
    int auto63626C58_u;
    unit auto63626C58_var;
    unitgroup autoE22E0617_g;
    int autoE22E0617_u;
    unit autoE22E0617_var;

    // Implementation
    auto63626C58_g = lp_zergGroup;
    auto63626C58_u = UnitGroupCount(auto63626C58_g, c_unitCountAll);
    for (;; auto63626C58_u -= 1) {
        auto63626C58_var = UnitGroupUnitFromEnd(auto63626C58_g, auto63626C58_u);
        if (auto63626C58_var == null) { break; }
        libNtve_gf_PauseUnit(auto63626C58_var, true);
        libNtve_gf_MakeUnitInvulnerable(auto63626C58_var, true);
        UnitSetState(auto63626C58_var, c_unitStateStatusBar, false);
        UnitSetState(auto63626C58_var, c_unitStateTargetable, false);
        UnitSetState(auto63626C58_var, c_unitStateCursorable, false);
        UnitSetState(auto63626C58_var, c_unitStateTooltipable, false);
        if (((UnitGetType(auto63626C58_var) == "ZergMutalisk") || (UnitGetType(auto63626C58_var) == "ZergGuardian"))) {
            UnitSetHeight(auto63626C58_var, 10.0, 2.0);
            libNtve_gf_SendActorMessageToUnit(auto63626C58_var, "SetOpacity 0.000000 2.000000");
        }
        else {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto63626C58_var), "Burrow", "Burrow", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        }
    }
    Wait(2.0, c_timeGame);
    autoE22E0617_g = lp_zergGroup;
    autoE22E0617_u = UnitGroupCount(autoE22E0617_g, c_unitCountAll);
    for (;; autoE22E0617_u -= 1) {
        autoE22E0617_var = UnitGroupUnitFromEnd(autoE22E0617_g, autoE22E0617_u);
        if (autoE22E0617_var == null) { break; }
        UnitRemove(autoE22E0617_var);
    }
    return true;
}

trigger auto_libPEB1_gf_SpawnZergDefendersforHatchery_Trigger = null;
int auto_libPEB1_gf_SpawnZergDefendersforHatchery_lp_hatcheryIndex;
unitgroup auto_libPEB1_gf_SpawnZergDefendersforHatchery_lp_nearbyPlayerUnits;

void libPEB1_gf_SpawnZergDefendersforHatchery (int lp_hatcheryIndex, unitgroup lp_nearbyPlayerUnits) {
    auto_libPEB1_gf_SpawnZergDefendersforHatchery_lp_hatcheryIndex = lp_hatcheryIndex;
    auto_libPEB1_gf_SpawnZergDefendersforHatchery_lp_nearbyPlayerUnits = lp_nearbyPlayerUnits;

    if (auto_libPEB1_gf_SpawnZergDefendersforHatchery_Trigger == null) {
        auto_libPEB1_gf_SpawnZergDefendersforHatchery_Trigger = TriggerCreate("auto_libPEB1_gf_SpawnZergDefendersforHatchery_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_SpawnZergDefendersforHatchery_Trigger, false, false);
}

bool auto_libPEB1_gf_SpawnZergDefendersforHatchery_TriggerFunc (bool testConds, bool runActions) {
    int lp_hatcheryIndex = auto_libPEB1_gf_SpawnZergDefendersforHatchery_lp_hatcheryIndex;
    unitgroup lp_nearbyPlayerUnits = auto_libPEB1_gf_SpawnZergDefendersforHatchery_lp_nearbyPlayerUnits;

    // Automatic Variable Declarations
    int autoBD7A2536_n;
    int autoBD7A2536_i;
    int auto8357C23C_val;
    const int autoC2C03D9F_n = 4;
    int autoC2C03D9F_i;
    const int autoA193A4F4_n = 4;
    int autoA193A4F4_i;

    // Implementation
    autoBD7A2536_n = libPVEM_gf_PvEDifficultyValueInt(2, 3);
    for (autoBD7A2536_i = 1; autoBD7A2536_i <= autoBD7A2536_n; autoBD7A2536_i += 1) {
        auto8357C23C_val = RandomInt(1, 5);
        if (auto8357C23C_val == 1) {
            for (autoC2C03D9F_i = 1; autoC2C03D9F_i <= autoC2C03D9F_n; autoC2C03D9F_i += 1) {
                UnitCreate(1, "ZergZergling", 0, libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_hatcheries[lp_hatcheryIndex].lv_spawnRegion), libNtve_gf_RandomAngle(), null);
                UnitGroupAdd(libPEB1_gv_hatcheries[lp_hatcheryIndex].lv_defenderGroup, UnitLastCreated());
                libPEB1_gf_UnburrowZergUnitforHatcheryDefense(UnitLastCreated(), UnitGetPosition(UnitGroupClosestToPoint(lp_nearbyPlayerUnits, UnitGetPosition(UnitLastCreated()))));
                Wait(0.0625, c_timeGame);
            }
        }
        else if (auto8357C23C_val == 2) {
            UnitCreate(1, "ZergHydralisk", 0, libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_hatcheries[lp_hatcheryIndex].lv_spawnRegion), libNtve_gf_RandomAngle(), null);
            UnitGroupAdd(libPEB1_gv_hatcheries[lp_hatcheryIndex].lv_defenderGroup, UnitLastCreated());
            libPEB1_gf_UnburrowZergUnitforHatcheryDefense(UnitLastCreated(), UnitGetPosition(UnitGroupClosestToPoint(lp_nearbyPlayerUnits, UnitGetPosition(UnitLastCreated()))));
            Wait(0.0625, c_timeGame);
        }
        else if (auto8357C23C_val == 3) {
            UnitCreate(1, "ZergRoach", 0, libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_hatcheries[lp_hatcheryIndex].lv_spawnRegion), libNtve_gf_RandomAngle(), null);
            UnitGroupAdd(libPEB1_gv_hatcheries[lp_hatcheryIndex].lv_defenderGroup, UnitLastCreated());
            libPEB1_gf_UnburrowZergUnitforHatcheryDefense(UnitLastCreated(), UnitGetPosition(UnitGroupClosestToPoint(lp_nearbyPlayerUnits, UnitGetPosition(UnitLastCreated()))));
            Wait(0.0625, c_timeGame);
        }
        else if (auto8357C23C_val == 4) {
            UnitCreate(1, "ZergMutalisk", 0, libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_hatcheries[lp_hatcheryIndex].lv_spawnRegion), libNtve_gf_RandomAngle(), null);
            UnitGroupAdd(libPEB1_gv_hatcheries[lp_hatcheryIndex].lv_defenderGroup, UnitLastCreated());
            libPEB1_gf_UnburrowZergUnitforHatcheryDefense(UnitLastCreated(), UnitGetPosition(UnitGroupClosestToPoint(lp_nearbyPlayerUnits, UnitGetPosition(UnitLastCreated()))));
            Wait(0.0625, c_timeGame);
        }
        else if (auto8357C23C_val == 5) {
            for (autoA193A4F4_i = 1; autoA193A4F4_i <= autoA193A4F4_n; autoA193A4F4_i += 1) {
                UnitCreate(1, "ZergZergling", 0, libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_hatcheries[lp_hatcheryIndex].lv_spawnRegion), libNtve_gf_RandomAngle(), null);
                UnitGroupAdd(libPEB1_gv_hatcheries[lp_hatcheryIndex].lv_defenderGroup, UnitLastCreated());
                libPEB1_gf_UnburrowZergUnitforHatcheryDefense(UnitLastCreated(), UnitGetPosition(UnitGroupClosestToPoint(lp_nearbyPlayerUnits, UnitGetPosition(UnitLastCreated()))));
                Wait(0.0625, c_timeGame);
            }
        }
        else {
        }
    }
    return true;
}

bool libPEB1_gf_ValidOrderUnitNearbyPoint (point lp_point, fixed lp_range) {
    // Variable Declarations
    unitgroup lv_nearbyUnits;
    unit lv_nearbyUnit;

    // Automatic Variable Declarations
    unitgroup autoC1F27D16_g;
    int autoC1F27D16_u;

    // Variable Initialization
    lv_nearbyUnits = UnitGroupEmpty();

    // Implementation
    lv_nearbyUnits = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamOrder, c_unitAllianceAlly, RegionCircle(lp_point, lp_range), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 1);
    if ((UnitGroupCount(lv_nearbyUnits, c_unitCountAlive) > 0)) {
        return true;
    }

    lv_nearbyUnits = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamOrder, c_unitAllianceAlly, RegionCircle(lp_point, lp_range), UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
    autoC1F27D16_g = lv_nearbyUnits;
    autoC1F27D16_u = UnitGroupCount(autoC1F27D16_g, c_unitCountAll);
    for (;; autoC1F27D16_u -= 1) {
        lv_nearbyUnit = UnitGroupUnitFromEnd(autoC1F27D16_g, autoC1F27D16_u);
        if (lv_nearbyUnit == null) { break; }
        if ((libNtve_gf_UnitIsVisibleToPlayer(lv_nearbyUnit, libCore_gv_cOMPUTER_TeamChaos) == true)) {
            return true;
        }

    }
    return false;
}

bool libPEB1_gf_ValidOrderUnitNearbyUnitGroup (unitgroup lp_unitGroup, fixed lp_range) {
    // Variable Declarations
    unit lv_zergUnit;

    // Automatic Variable Declarations
    unitgroup autoD5866670_g;
    int autoD5866670_u;

    // Variable Initialization

    // Implementation
    autoD5866670_g = lp_unitGroup;
    autoD5866670_u = UnitGroupCount(autoD5866670_g, c_unitCountAll);
    for (;; autoD5866670_u -= 1) {
        lv_zergUnit = UnitGroupUnitFromEnd(autoD5866670_g, autoD5866670_u);
        if (lv_zergUnit == null) { break; }
        if ((libPEB1_gf_ValidOrderUnitNearbyPoint(UnitGetPosition(lv_zergUnit), lp_range) == true)) {
            return true;
        }

    }
    return false;
}

unitgroup libPEB1_gf_HeroicOrderUnitsinRegion (region lp_region) {
    // Variable Declarations
    unitgroup lv_validUnits;

    // Automatic Variable Declarations
    unitgroup auto8D9C744C_g;
    int auto8D9C744C_u;
    unit auto8D9C744C_var;

    // Variable Initialization
    lv_validUnits = UnitGroupEmpty();

    // Implementation
    lv_validUnits = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamOrder, c_unitAllianceAlly, lp_region, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
    auto8D9C744C_g = lv_validUnits;
    auto8D9C744C_u = UnitGroupCount(auto8D9C744C_g, c_unitCountAll);
    for (;; auto8D9C744C_u -= 1) {
        auto8D9C744C_var = UnitGroupUnitFromEnd(auto8D9C744C_g, auto8D9C744C_u);
        if (auto8D9C744C_var == null) { break; }
        if ((UnitGetType(auto8D9C744C_var) == "WarheadSingle")) {
            UnitGroupRemove(lv_validUnits, auto8D9C744C_var);
        }

        if ((UnitTestState(auto8D9C744C_var, c_unitStateCloaked) == true) && (libNtve_gf_UnitIsVisibleToPlayer(auto8D9C744C_var, libCore_gv_cOMPUTER_TeamChaos) == false)) {
            UnitGroupRemove(lv_validUnits, auto8D9C744C_var);
        }

    }
    return lv_validUnits;
}

region libPEB1_gf_NearestSpawnLocation (point lp_point) {
    // Variable Declarations
    int lv_locationIndex;
    int lv_bestLocation;
    fixed lv_bestDistance;

    // Automatic Variable Declarations
    const int auto5A9FBD3A_ae = 27;
    const int auto5A9FBD3A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_bestLocation = 1;
    lv_bestDistance = DistanceBetweenPoints(lp_point, RegionGetCenter(RegionFromName(("Spawn Region " + IntToString(1)))));
    lv_locationIndex = 2;
    for ( ; ( (auto5A9FBD3A_ai >= 0 && lv_locationIndex <= auto5A9FBD3A_ae) || (auto5A9FBD3A_ai < 0 && lv_locationIndex >= auto5A9FBD3A_ae) ) ; lv_locationIndex += auto5A9FBD3A_ai ) {
        if ((lv_locationIndex > 2) && (UnitGroupCount(UnitGroup("Hatchery", libCore_gv_cOMPUTER_TeamChaos, RegionCircle(RegionGetCenter(RegionFromName(("Spawn Region " + IntToString(lv_locationIndex)))), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
            continue;
        }

        if ((DistanceBetweenPoints(lp_point, RegionGetCenter(RegionFromName(("Spawn Region " + IntToString(lv_locationIndex))))) < lv_bestDistance)) {
            lv_bestLocation = lv_locationIndex;
            lv_bestDistance = DistanceBetweenPoints(lp_point, RegionGetCenter(RegionFromName(("Spawn Region " + IntToString(lv_bestLocation)))));
        }

    }
    return RegionFromName(("Spawn Region " + IntToString(lv_bestLocation)));
}

unit libPEB1_gf_GetScourgeMissileTarget (point lp_location) {
    // Variable Declarations
    unit lv_itStructure;

    // Automatic Variable Declarations
    unitgroup auto469E05FC_g;
    int auto469E05FC_u;
    unitgroup autoF654C7C3_g;
    int autoF654C7C3_u;

    // Variable Initialization

    // Implementation
    auto469E05FC_g = libPEB1_gv_baseStructuresBunkers;
    auto469E05FC_u = UnitGroupCount(auto469E05FC_g, c_unitCountAll);
    for (;; auto469E05FC_u -= 1) {
        lv_itStructure = UnitGroupUnitFromEnd(auto469E05FC_g, auto469E05FC_u);
        if (lv_itStructure == null) { break; }
        if ((UnitIsAlive(lv_itStructure) == false)) {
            UnitGroupRemove(libPEB1_gv_baseStructuresBunkers, lv_itStructure);
        }

    }
    autoF654C7C3_g = libPEB1_gv_baseStructuresKeep;
    autoF654C7C3_u = UnitGroupCount(autoF654C7C3_g, c_unitCountAll);
    for (;; autoF654C7C3_u -= 1) {
        lv_itStructure = UnitGroupUnitFromEnd(autoF654C7C3_g, autoF654C7C3_u);
        if (lv_itStructure == null) { break; }
        if (((UnitIsAlive(lv_itStructure) == false) || (UnitGetType(lv_itStructure) == "TownCannonTowerDead"))) {
            UnitGroupRemove(libPEB1_gv_baseStructuresKeep, lv_itStructure);
        }

    }
    if ((UnitGroupCount(libPEB1_gv_baseStructuresBunkers, c_unitCountAlive) > 0)) {
        return UnitGroupClosestToPoint(libPEB1_gv_baseStructuresBunkers, lp_location);
    }

    if ((UnitGroupCount(libPEB1_gv_baseStructuresKeep, c_unitCountAlive) > 0)) {
        return UnitGroupClosestToPoint(libPEB1_gv_baseStructuresKeep, lp_location);
    }

    if ((UnitGroupCount(libPEB1_gv_baseStructuresCore, c_unitCountAlive) > 0)) {
        return UnitGroupClosestToPoint(libPEB1_gv_baseStructuresCore, lp_location);
    }

    return null;
}

void libPEB1_gf_CreateScourgeNest () {
    // Variable Declarations
    unitgroup lv_validSilos;
    int lv_archangelIndex;
    unit lv_itNest;

    // Automatic Variable Declarations
    const int auto26B23F15_ae = 5;
    const int auto26B23F15_ai = 1;
    unitgroup auto8C5ADA29_g;
    int auto8C5ADA29_u;

    // Variable Initialization
    lv_validSilos = UnitGroupEmpty();

    // Implementation
    lv_archangelIndex = 1;
    for ( ; ( (auto26B23F15_ai >= 0 && lv_archangelIndex <= auto26B23F15_ae) || (auto26B23F15_ai < 0 && lv_archangelIndex >= auto26B23F15_ae) ) ; lv_archangelIndex += auto26B23F15_ai ) {
        if ((UnitIsAlive(libPEB1_gv_archangelAreas[lv_archangelIndex].lv_archangelUnit) == true)) {
            UnitGroupAdd(lv_validSilos, libPEB1_gv_archangelAreas[lv_archangelIndex].lv_nukeSilos[1]);
        }

    }
    if ((UnitGroupCount(lv_validSilos, c_unitCountAlive) == 0)) {
        return ;
    }

    auto8C5ADA29_g = lv_validSilos;
    auto8C5ADA29_u = UnitGroupCount(auto8C5ADA29_g, c_unitCountAll);
    for (;; auto8C5ADA29_u -= 1) {
        lv_itNest = UnitGroupUnitFromEnd(auto8C5ADA29_g, auto8C5ADA29_u);
        if (lv_itNest == null) { break; }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_itNest), c_animNameDefault, "Birth 02", c_animFlagFullMatch | c_animFlagNonLooping, 0.0);
        libNtve_gf_ShowHideUnit(lv_itNest, true);
    }
    libPEB1_gv_scougeNests = lv_validSilos;
    Wait(3.5, c_timeGame);
}

trigger auto_libPEB1_gf_CreateScourgeMissile_Trigger = null;

void libPEB1_gf_CreateScourgeMissile () {
    if (auto_libPEB1_gf_CreateScourgeMissile_Trigger == null) {
        auto_libPEB1_gf_CreateScourgeMissile_Trigger = TriggerCreate("auto_libPEB1_gf_CreateScourgeMissile_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_CreateScourgeMissile_Trigger, false, false);
}

bool auto_libPEB1_gf_CreateScourgeMissile_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_validSilos;
    int lv_archangelIndex;

    // Automatic Variable Declarations
    const int autoA2E4E43E_ae = 5;
    const int autoA2E4E43E_ai = 1;

    // Variable Initialization
    lv_validSilos = UnitGroupEmpty();

    // Implementation
    lv_archangelIndex = 1;
    for ( ; ( (autoA2E4E43E_ai >= 0 && lv_archangelIndex <= autoA2E4E43E_ae) || (autoA2E4E43E_ai < 0 && lv_archangelIndex >= autoA2E4E43E_ae) ) ; lv_archangelIndex += autoA2E4E43E_ai ) {
        if ((UnitIsAlive(libPEB1_gv_archangelAreas[lv_archangelIndex].lv_archangelUnit) == true)) {
            UnitGroupAdd(lv_validSilos, libPEB1_gv_archangelAreas[lv_archangelIndex].lv_nukeSilos[1]);
        }

    }
    if ((UnitGroupCount(lv_validSilos, c_unitCountAlive) == 0)) {
        return true;
    }

    if ((libPEB1_gv_currentScourgeMissileCaster == null)) {
        libPEB1_gv_currentScourgeMissileCaster = UnitGroupRandomUnit(lv_validSilos, c_unitCountAlive);
    }

    if ((UnitIsAlive(libPEB1_gv_currentScourgeMissileCaster) == false)) {
        return true;
    }

    libPEB1_gv_currentScourgeMissileTargetUnit = libPEB1_gf_GetScourgeMissileTarget(UnitGetPosition(libPEB1_gv_currentScourgeMissileCaster));
    libPEB1_gv_currentScourgeMissileTargetPoint = UnitGetPosition(libPEB1_gv_currentScourgeMissileTargetUnit);
    if (((libPEB1_gv_currentScourgeMissileTargetUnit == null) || (UnitIsAlive(libPEB1_gv_currentScourgeMissileTargetUnit) == false))) {
        return true;
    }

    VisRevealArea(libCore_gv_cOMPUTER_TeamChaos, RegionCircle(libPEB1_gv_currentScourgeMissileTargetPoint, 4.0), 4.0, false);
    VisRevealArea(libCore_gv_cOMPUTER_TeamOrder, RegionCircle(UnitGetPosition(libPEB1_gv_currentScourgeMissileCaster), 6.0), 4.0, false);
    UnitAbilityAddChargeUsed(libPEB1_gv_currentScourgeMissileCaster, "GhostShipBombardChargedPort", "Abil/BattleshipBombardCharged", 1.0);
    if ((libPEB1_gv_scourgeMissileTargetPing == c_invalidPingId)) {
        libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormGhostShipImpact", UnitGetPosition(libPEB1_gv_currentScourgeMissileTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 3.0);
        libPEB1_gv_scourgeMissileTargetPing = PingLastCreated();
    }

    TriggerEnable(libPEB1_gt_ScourgeMissileCreated, true);
    UnitIssueOrder(libPEB1_gv_currentScourgeMissileCaster, OrderTargetingUnit(AbilityCommand("GhostShipBombardChargedPort", 0), libPEB1_gv_currentScourgeMissileTargetUnit), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("Event_GhostShip_Cannon_Fire_Distant", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    libPEB1_gv_scourgeMissileTargetPing = c_invalidPingId;
    TriggerEnable(libPEB1_gt_ScourgeMissileCreated, false);
    return true;
}

void libPEB1_gf_DestroyAllSourgeNests () {
    // Variable Declarations
    unit lv_itNest;

    // Automatic Variable Declarations
    unitgroup auto8013C8B7_g;
    int auto8013C8B7_u;

    // Variable Initialization

    // Implementation
    auto8013C8B7_g = libPEB1_gv_scougeNests;
    auto8013C8B7_u = UnitGroupCount(auto8013C8B7_g, c_unitCountAll);
    for (;; auto8013C8B7_u -= 1) {
        lv_itNest = UnitGroupUnitFromEnd(auto8013C8B7_g, auto8013C8B7_u);
        if (lv_itNest == null) { break; }
        UnitKill(lv_itNest);
    }
}

void libPEB1_gf_ScourgeMissileCameraShake (point lp_targetLocation) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto22E6504F_ae = libCore_gv_bALMaxPlayers;
    const int auto22E6504F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itPlayer = 1;
    for ( ; ( (auto22E6504F_ai >= 0 && lv_itPlayer <= auto22E6504F_ae) || (auto22E6504F_ai < 0 && lv_itPlayer >= auto22E6504F_ae) ) ; lv_itPlayer += auto22E6504F_ai ) {
        if ((PlayerStatus(lv_itPlayer) != c_playerStatusActive)) {
            continue;
        }

        if ((DistanceBetweenPoints(CameraGetTarget(lv_itPlayer), lp_targetLocation) <= 15.0)) {
            CameraShake(lv_itPlayer, "Medium", "Earthquake", 0.0, 0.5, 0.75);
        }
        else if ((DistanceBetweenPoints(CameraGetTarget(lv_itPlayer), lp_targetLocation) <= 30.0)) {
            CameraShake(lv_itPlayer, "Creep", "Earthquake", 0.0, 0.5, 0.5);
        }
    }
}

void libPEB1_gf_PrepareArchangelArea (int lp_areaIndex) {
    // Automatic Variable Declarations
    // Implementation
    VisRevealerCreate(libStEx_gv_pLAYER_11_ORDER, libPEB1_gv_archangelAreas[lp_areaIndex].lv_region);
    libPEB1_gv_archangelAreas[lp_areaIndex].lv_revealer = VisRevealerLastCreated();
    VisRevealerEnable(VisRevealerLastCreated(), true);
    MinimapPing(PlayerGroupAll(), RegionGetCenter(libPEB1_gv_archangelAreas[lp_areaIndex].lv_region), 5.0, libCore_gv_cOLOREnemyColor);
}

void libPEB1_gf_SetArchangelPingText (int lp_areaIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelPing != c_invalidPingId)) {
        PingSetTooltip(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelPing, StringExternal("Param/Value/lib_PEB1_7F129EDB"));
    }

}

trigger auto_libPEB1_gf_SpawnArchangelforArea_Trigger = null;
int auto_libPEB1_gf_SpawnArchangelforArea_lp_areaIndex;
int auto_libPEB1_gf_SpawnArchangelforArea_lp_level;

void libPEB1_gf_SpawnArchangelforArea (int lp_areaIndex, int lp_level) {
    auto_libPEB1_gf_SpawnArchangelforArea_lp_areaIndex = lp_areaIndex;
    auto_libPEB1_gf_SpawnArchangelforArea_lp_level = lp_level;

    if (auto_libPEB1_gf_SpawnArchangelforArea_Trigger == null) {
        auto_libPEB1_gf_SpawnArchangelforArea_Trigger = TriggerCreate("auto_libPEB1_gf_SpawnArchangelforArea_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_SpawnArchangelforArea_Trigger, false, false);
}

bool auto_libPEB1_gf_SpawnArchangelforArea_TriggerFunc (bool testConds, bool runActions) {
    int lp_areaIndex = auto_libPEB1_gf_SpawnArchangelforArea_lp_areaIndex;
    int lp_level = auto_libPEB1_gf_SpawnArchangelforArea_lp_level;

    // Automatic Variable Declarations
    int auto538BDAD7_val;
    const int auto85A01E86_n = 7;
    int auto85A01E86_i;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranArchangelDefender", 0, libCore_gv_cOMPUTER_TeamChaos, RegionGetCenter(libPEB1_gv_archangelAreas[lp_areaIndex].lv_region), null);
    libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit, "Signal FlyingBirth");
    UnitXPAddXP(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit, "TerranArchangelDefenderScaling", (lp_level - 1));
    UnitDestroyAIThinkTree(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit);
    libPVEM_gf_PvECreateDefenderAI(libNtve_gf_ConvertUnitToUnitGroup(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit), RegionCircle(UnitGetPosition(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit), 10.0), libPEB1_gv_archangelAreas[lp_areaIndex].lv_region, true);
    libPEB1_gv_archangelDefenderIndex[lp_areaIndex] = libAIAI_gf_LastCreatedDefenderAI();
    PingCreateFromData(PlayerGroupAll(), "StormBoss", RegionGetCenter(libPEB1_gv_archangelAreas[lp_areaIndex].lv_region));
    libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelPing = PingLastCreated();
    PingSetColor(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelPing, libCore_gv_cOLOREnemyColor);
    PingSetUnit(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelPing, libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit);
    libPEB1_gf_SetArchangelPingText(lp_areaIndex);
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroNameLabel", libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEB1_92A7F472"), PlayerGroupAll());
    auto538BDAD7_val = libPEB1_gv_archangelAreas[lp_areaIndex].lv_type;
    if (auto538BDAD7_val == libPEB1_ge_ArchangelAreaType_Loadout1) {
        UnitBehaviorAdd(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit, "ArchangelLoadout1", libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit, 1);
        libNtve_gf_CreateUnitsAtPoint2(1, "ArchangelEMPBlocker", 0, libCore_gv_cOMPUTER_TeamOrder, PointFromName(("Psi Disruptor Blocker " + IntToString(lp_areaIndex) + " - 1")), null);
        libNtve_gf_CreateUnitsAtPoint2(1, "ArchangelEMPBlocker", 0, libCore_gv_cOMPUTER_TeamOrder, PointFromName(("Psi Disruptor Blocker " + IntToString(lp_areaIndex) + " - 2")), null);
        libNtve_gf_CreateUnitsAtPoint2(1, "ArchangelEMPBlocker", 0, libCore_gv_cOMPUTER_TeamOrder, PointFromName(("Psi Disruptor Blocker " + IntToString(lp_areaIndex) + " - 3")), null);
        libNtve_gf_CreateUnitsAtPoint2(1, "ArchangelEMPBlocker", 0, libCore_gv_cOMPUTER_TeamOrder, PointFromName(("Psi Disruptor Blocker " + IntToString(lp_areaIndex) + " - 4")), null);
    }
    else if (auto538BDAD7_val == libPEB1_ge_ArchangelAreaType_Loadout2) {
        UnitBehaviorAdd(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit, "ArchangelLoadout2", libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit, 1);
        for (auto85A01E86_i = 1; auto85A01E86_i <= auto85A01E86_n; auto85A01E86_i += 1) {
            libNtve_gf_CreateActorAtPoint("Storm_Doodad_SCBraxis_PuddleOil", RegionRandomPoint(RegionCircle(UnitGetPosition(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit), 10.0)));
        }
    }
    else if (auto538BDAD7_val == libPEB1_ge_ArchangelAreaType_Loadout3) {
        UnitBehaviorAdd(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit, "ArchangelLoadout3", libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit, 1);
    }
    else if (auto538BDAD7_val == libPEB1_ge_ArchangelAreaType_Loadout4) {
        UnitBehaviorAdd(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit, "ArchangelLoadout4", libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit, 1);
    }
    else {
    }
    return true;
}

trigger auto_libPEB1_gf_SpawnDefenseHeroforArchangelArea_Trigger = null;
int auto_libPEB1_gf_SpawnDefenseHeroforArchangelArea_lp_archangelArea;
string auto_libPEB1_gf_SpawnDefenseHeroforArchangelArea_lp_defenseHeroType;

void libPEB1_gf_SpawnDefenseHeroforArchangelArea (int lp_archangelArea, string lp_defenseHeroType) {
    auto_libPEB1_gf_SpawnDefenseHeroforArchangelArea_lp_archangelArea = lp_archangelArea;
    auto_libPEB1_gf_SpawnDefenseHeroforArchangelArea_lp_defenseHeroType = lp_defenseHeroType;

    if (auto_libPEB1_gf_SpawnDefenseHeroforArchangelArea_Trigger == null) {
        auto_libPEB1_gf_SpawnDefenseHeroforArchangelArea_Trigger = TriggerCreate("auto_libPEB1_gf_SpawnDefenseHeroforArchangelArea_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_SpawnDefenseHeroforArchangelArea_Trigger, false, false);
}

bool auto_libPEB1_gf_SpawnDefenseHeroforArchangelArea_TriggerFunc (bool testConds, bool runActions) {
    int lp_archangelArea = auto_libPEB1_gf_SpawnDefenseHeroforArchangelArea_lp_archangelArea;
    string lp_defenseHeroType = auto_libPEB1_gf_SpawnDefenseHeroforArchangelArea_lp_defenseHeroType;

    // Variable Declarations
    int lv_heroIndex;
    point lv_spawnPoint;

    // Automatic Variable Declarations
    const int auto368AA358_ae = 5;
    int auto368AA358_var;

    // Variable Initialization

    // Implementation
    while (true) {
        if (((libGame_gv_gameOver == true) || (libPEB1_gv_archangelAreas[lp_archangelArea].lv_areaDefeated == true))) {
            return true;
        }

        auto368AA358_var = 1;
        for ( ; auto368AA358_var <= auto368AA358_ae; auto368AA358_var += 1 ) {
            if ((libPEB1_gv_zergHeroes[auto368AA358_var].lv_active == true) && (libPEB1_gv_zergHeroes[auto368AA358_var].lv_state != libPEB1_ge_ZergHeroState_Alive)) {
                lv_heroIndex = auto368AA358_var;
                break;
            }

        }
        if ((lv_heroIndex > 0)) {
            break;
        }

        Wait(1.0, c_timeGame);
    }
    libPEB1_gv_archangelAreas[lp_archangelArea].lv_defenseHero = lp_defenseHeroType;
    libPEB1_gv_zergHeroes[lv_heroIndex].lv_active = false;
    libPVEM_gf_PvEResetNPCHero(libPEB1_gv_zergHeroes[lv_heroIndex].lv_hero);
    libPVEM_gf_PvEPrepareNPCHero(libPEB1_gv_archangelAreas[lp_archangelArea].lv_defenseHero, libPEB1_gf_PZEZergBossSkin(libPEB1_gv_archangelAreas[lp_archangelArea].lv_defenseHero));
    libPEB1_gv_zergHeroes[lv_heroIndex].lv_hero = libPEB1_gv_archangelAreas[lp_archangelArea].lv_defenseHero;
    libPEB1_gv_zergHeroes[lv_heroIndex].lv_state = libPEB1_ge_ZergHeroState_NotYetSpawned;
    Wait(10.0, c_timeGame);
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    if ((libPEB1_gv_archangelAreas[lp_archangelArea].lv_areaDefeated == true)) {
        libPEB1_gf_PrepareTheNextHero(lv_heroIndex);
        return true;
    }

    if ((libPEB1_gv_zergHeroes[lv_heroIndex].lv_hero == "Zagara")) {
        lv_spawnPoint = libPEB1_gv_archangelAreas[lp_archangelArea].lv_zagaraSpawn;
    }
    else {
        lv_spawnPoint = libPEB1_gv_archangelAreas[lp_archangelArea].lv_defenseHeroRandomSpawns[RandomInt(1, 3)];
    }
    libPEB1_gv_zergHeroes[lv_heroIndex].lv_active = true;
    libPEB1_gv_zergHeroes[lv_heroIndex].lv_state = libPEB1_ge_ZergHeroState_Alive;
    TimerStart(libPEB1_gv_zergHeroes[lv_heroIndex].lv_respawnTimer, 10.0, false, c_timeGame);
    libPVEM_gf_PvESpawnNPCHero(libPEB1_gv_zergHeroes[lv_heroIndex].lv_hero, lv_spawnPoint, libPEB1_gv_zergHeroLevel);
    return true;
}

trigger auto_libPEB1_gf_ArchangelSpawnBaseDropship_Trigger = null;
point auto_libPEB1_gf_ArchangelSpawnBaseDropship_lp_position;

void libPEB1_gf_ArchangelSpawnBaseDropship (point lp_position) {
    auto_libPEB1_gf_ArchangelSpawnBaseDropship_lp_position = lp_position;

    if (auto_libPEB1_gf_ArchangelSpawnBaseDropship_Trigger == null) {
        auto_libPEB1_gf_ArchangelSpawnBaseDropship_Trigger = TriggerCreate("auto_libPEB1_gf_ArchangelSpawnBaseDropship_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_ArchangelSpawnBaseDropship_Trigger, false, false);
}

bool auto_libPEB1_gf_ArchangelSpawnBaseDropship_TriggerFunc (bool testConds, bool runActions) {
    point lp_position = auto_libPEB1_gf_ArchangelSpawnBaseDropship_lp_position;

    // Variable Declarations
    actor lv_landingPad;
    int lv_campIndex;
    int lv_defenderIndex;
    string lv_laneString;
    unit lv_medivacSummoner;
    point lv_rallyPoint;
    unit lv_mercRaven;
    timer lv_departureTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_laneString = "";
    lv_departureTimer = TimerCreate();

    // Implementation
    lv_rallyPoint = PointFromName("MedivacRallyPoint");
    libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormObjective", lp_position, ColorWithAlpha(0,0,0,0), 2.0);
    SoundPlayAtPointForPlayer(SoundLink("PVE_MercMedivac_Alert", -1), c_maxPlayers, PlayerGroupAll(), lp_position, 0.0, 100.0, 0.0);
    libNtve_gf_UnitCreateFacingPoint(1, "MedicMedivacDropship", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_TeamOrder, lp_position, lv_rallyPoint, null);
    libPEB1_gv_archangelDropship = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth", c_animFlagNonLooping, 0.0);
    libNtve_gf_SendActorMessageToUnit(libPEB1_gv_archangelDropship, "MinimapIcon Assets\\Textures\\storm_temp_btn-unit-terran-medivac.dds");
    libNtve_gf_SendActorMessageToUnit(libPEB1_gv_archangelDropship, "MinimapIconScale 0.350000");
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitSetState(UnitLastCreated(), c_unitStateStoppable, false);
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    UnitBehaviorAddPlayer(UnitLastCreated(), "IsMacguffin", UnitGetOwner(UnitLastCreated()), 1);
    UnitBehaviorAddPlayer(UnitLastCreated(), "MacguffinActivated", UnitGetOwner(UnitLastCreated()), 1);
    UnitBehaviorRemovePlayer(UnitLastCreated(), "UnitCanBeSmartCommandInteracted", UnitGetOwner(UnitLastCreated()), 1);
    Wait(2.0, c_timeGame);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, true);
    Wait(29.5, c_timeGame);
    UnitRemove(libPEB1_gv_archangelDropship);
    TextTagDestroy(TextTagLastCreated());
    return true;
}

trigger auto_libPEB1_gf_SpawnToxicSludglings_Trigger = null;
int auto_libPEB1_gf_SpawnToxicSludglings_lp_archangelArea;
int auto_libPEB1_gf_SpawnToxicSludglings_lp_side;

void libPEB1_gf_SpawnToxicSludglings (int lp_archangelArea, int lp_side) {
    auto_libPEB1_gf_SpawnToxicSludglings_lp_archangelArea = lp_archangelArea;
    auto_libPEB1_gf_SpawnToxicSludglings_lp_side = lp_side;

    if (auto_libPEB1_gf_SpawnToxicSludglings_Trigger == null) {
        auto_libPEB1_gf_SpawnToxicSludglings_Trigger = TriggerCreate("auto_libPEB1_gf_SpawnToxicSludglings_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_SpawnToxicSludglings_Trigger, false, false);
}

bool auto_libPEB1_gf_SpawnToxicSludglings_TriggerFunc (bool testConds, bool runActions) {
    int lp_archangelArea = auto_libPEB1_gf_SpawnToxicSludglings_lp_archangelArea;
    int lp_side = auto_libPEB1_gf_SpawnToxicSludglings_lp_side;

    // Variable Declarations
    unit[16] lv_sludglings;
    point[16] lv_spawnPoints;
    point[16] lv_targetPoints;
    fixed lv_movementAngle;
    fixed lv_increment;
    unitgroup lv_sludglingGroup;
    bool lv_spawnPointFound;
    point lv_testPoint;
    int lv_gapIndex;

    // Automatic Variable Declarations
    const int auto6897257E_n = 10;
    int auto6897257E_i;
    int auto2AE35F51_val;
    const int auto4CB41B2D_ae = 15;
    int auto4CB41B2D_var;
    int autoB510538B_val;
    const int auto03EB99C6_n = 10;
    int auto03EB99C6_i;
    const int autoEC9D75B1_ae = 15;
    int autoEC9D75B1_var;
    const int auto778436B2_ae = 15;
    int auto778436B2_var;
    const int auto4FD4D06E_ae = 15;
    int auto4FD4D06E_var;
    const int autoCB37B20D_ae = 15;
    int autoCB37B20D_var;

    // Variable Initialization
    lv_sludglingGroup = UnitGroupEmpty();

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    SoundPlayAtPointForPlayer(SoundLink("ToxicSludglingSpawn", -1), c_maxPlayers, PlayerGroupAll(), RegionGetCenter(libPEB1_gv_archangelAreas[lp_archangelArea].lv_region), 0.0, 100.0, 0.0);
    for (auto6897257E_i = 1; auto6897257E_i <= auto6897257E_n; auto6897257E_i += 1) {
        lv_gapIndex = RandomInt(4, 12);
        if ((AbsI((lv_gapIndex - libPEB1_gv_previousGapIndex)) >= 4)) {
            break;
        }

    }
    libPEB1_gv_previousGapIndex = lv_gapIndex;
    auto2AE35F51_val = lp_side;
    if (auto2AE35F51_val == libPEB1_ge_ArchangelAreaSide_Left) {
        lv_increment = (libPEB1_gv_archangelAreas[lp_archangelArea].lv_height / 16.0);
        lv_movementAngle = 45.0;
    }
    else if (auto2AE35F51_val == libPEB1_ge_ArchangelAreaSide_Right) {
        lv_increment = (libPEB1_gv_archangelAreas[lp_archangelArea].lv_height / 16.0);
        lv_movementAngle = 225.0;
    }
    else if (auto2AE35F51_val == libPEB1_ge_ArchangelAreaSide_Top) {
        lv_increment = (libPEB1_gv_archangelAreas[lp_archangelArea].lv_width / 16.0);
        lv_movementAngle = 315.0;
    }
    else if (auto2AE35F51_val == libPEB1_ge_ArchangelAreaSide_Bottom) {
        lv_increment = (libPEB1_gv_archangelAreas[lp_archangelArea].lv_width / 16.0);
        lv_movementAngle = 135.0;
    }
    else {
    }
    auto4CB41B2D_var = 1;
    for ( ; auto4CB41B2D_var <= auto4CB41B2D_ae; auto4CB41B2D_var += 1 ) {
        if (((auto4CB41B2D_var < (lv_gapIndex - 1)) || (auto4CB41B2D_var > (lv_gapIndex + 1)))) {
            autoB510538B_val = lp_side;
            if (autoB510538B_val == libPEB1_ge_ArchangelAreaSide_Left) {
                lv_spawnPoints[auto4CB41B2D_var] = PointWithOffsetPolar(RegionGetCenter(libPEB1_gv_archangelAreas[lp_archangelArea].lv_region), (libPEB1_gv_archangelAreas[lp_archangelArea].lv_width / 2.0), 225.0);
                lv_spawnPoints[auto4CB41B2D_var] = PointWithOffsetPolar(lv_spawnPoints[auto4CB41B2D_var], (libPEB1_gv_archangelAreas[lp_archangelArea].lv_height / 2.0), 135.0);
                lv_spawnPoints[auto4CB41B2D_var] = PointWithOffsetPolar(lv_spawnPoints[auto4CB41B2D_var], (lv_increment * auto4CB41B2D_var), 315.0);
            }
            else if (autoB510538B_val == libPEB1_ge_ArchangelAreaSide_Right) {
                lv_spawnPoints[auto4CB41B2D_var] = PointWithOffsetPolar(RegionGetCenter(libPEB1_gv_archangelAreas[lp_archangelArea].lv_region), (libPEB1_gv_archangelAreas[lp_archangelArea].lv_width / 2.0), 45.0);
                lv_spawnPoints[auto4CB41B2D_var] = PointWithOffsetPolar(lv_spawnPoints[auto4CB41B2D_var], (libPEB1_gv_archangelAreas[lp_archangelArea].lv_height / 2.0), 315.0);
                lv_spawnPoints[auto4CB41B2D_var] = PointWithOffsetPolar(lv_spawnPoints[auto4CB41B2D_var], (lv_increment * auto4CB41B2D_var), 135.0);
            }
            else if (autoB510538B_val == libPEB1_ge_ArchangelAreaSide_Top) {
                lv_spawnPoints[auto4CB41B2D_var] = PointWithOffsetPolar(RegionGetCenter(libPEB1_gv_archangelAreas[lp_archangelArea].lv_region), (libPEB1_gv_archangelAreas[lp_archangelArea].lv_height / 2.0), 135.0);
                lv_spawnPoints[auto4CB41B2D_var] = PointWithOffsetPolar(lv_spawnPoints[auto4CB41B2D_var], (libPEB1_gv_archangelAreas[lp_archangelArea].lv_width / 2.0), 45.0);
                lv_spawnPoints[auto4CB41B2D_var] = PointWithOffsetPolar(lv_spawnPoints[auto4CB41B2D_var], (lv_increment * auto4CB41B2D_var), 225.0);
            }
            else if (autoB510538B_val == libPEB1_ge_ArchangelAreaSide_Bottom) {
                lv_spawnPoints[auto4CB41B2D_var] = PointWithOffsetPolar(RegionGetCenter(libPEB1_gv_archangelAreas[lp_archangelArea].lv_region), (libPEB1_gv_archangelAreas[lp_archangelArea].lv_height / 2.0), 315.0);
                lv_spawnPoints[auto4CB41B2D_var] = PointWithOffsetPolar(lv_spawnPoints[auto4CB41B2D_var], (libPEB1_gv_archangelAreas[lp_archangelArea].lv_width / 2.0), 225.0);
                lv_spawnPoints[auto4CB41B2D_var] = PointWithOffsetPolar(lv_spawnPoints[auto4CB41B2D_var], (lv_increment * auto4CB41B2D_var), 45.0);
            }
            else {
            }
            for (auto03EB99C6_i = 1; auto03EB99C6_i <= auto03EB99C6_n; auto03EB99C6_i += 1) {
                if ((PathingType(lv_spawnPoints[auto4CB41B2D_var]) == c_pathingGround)) {
                    lv_spawnPointFound = true;
                    break;
                }
                else {
                    lv_spawnPoints[auto4CB41B2D_var] = PointWithOffsetPolar(lv_spawnPoints[auto4CB41B2D_var], 1.0, lv_movementAngle);
                }
            }
            if ((lv_spawnPointFound == false)) {
                lv_spawnPoints[auto4CB41B2D_var] = null;
            }

        }

    }
    autoEC9D75B1_var = 1;
    for ( ; autoEC9D75B1_var <= autoEC9D75B1_ae; autoEC9D75B1_var += 1 ) {
        if ((lv_spawnPoints[autoEC9D75B1_var] != null)) {
            lv_targetPoints[autoEC9D75B1_var] = lv_spawnPoints[autoEC9D75B1_var];
            while (true) {
                lv_testPoint = PointWithOffsetPolar(lv_targetPoints[autoEC9D75B1_var], 1.0, lv_movementAngle);
                if ((PathingType(lv_testPoint) == c_pathingGround) && (RegionContainsPoint(libPEB1_gv_archangelAreas[lp_archangelArea].lv_region, lv_testPoint) == true)) {
                    lv_targetPoints[autoEC9D75B1_var] = lv_testPoint;
                }
                else {
                    break;
                }
            }
        }

    }
    auto778436B2_var = 1;
    for ( ; auto778436B2_var <= auto778436B2_ae; auto778436B2_var += 1 ) {
        if ((lv_spawnPoints[auto778436B2_var] != null)) {
            UnitCreate(1, "ArchangelToxicSludgling", c_unitCreateIgnorePlacement, libStEx_gv_pLAYER_12_CHAOS, lv_spawnPoints[auto778436B2_var], lv_movementAngle, null);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth", 0, c_animTimeDefault);
            lv_sludglings[auto778436B2_var] = UnitLastCreated();
            UnitGroupAdd(lv_sludglingGroup, UnitLastCreated());
            UnitGroupAdd(libPEB1_gv_archangelAdds, UnitLastCreated());
            UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.5);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 1.5);
        }

    }
    Wait(2.0, c_timeGame);
    while (true) {
        if (((libNtve_gf_UnitGroupIsDead(lv_sludglingGroup) == true) || (libGame_gv_gameOver == true))) {
            return true;
        }

        if ((UnitIsAlive(libPEB1_gv_archangelAreas[lp_archangelArea].lv_archangelUnit) == false)) {
            auto4FD4D06E_var = 1;
            for ( ; auto4FD4D06E_var <= auto4FD4D06E_ae; auto4FD4D06E_var += 1 ) {
                if ((UnitIsAlive(lv_sludglings[auto4FD4D06E_var]) == true)) {
                    UnitCreateEffectUnit(lv_sludglings[auto4FD4D06E_var], "Kill", lv_sludglings[auto4FD4D06E_var]);
                }

            }
            return true;
        }

        autoCB37B20D_var = 1;
        for ( ; autoCB37B20D_var <= autoCB37B20D_ae; autoCB37B20D_var += 1 ) {
            if ((UnitIsAlive(lv_sludglings[autoCB37B20D_var]) == true)) {
                if ((libNtve_gf_UnitInRegion(lv_sludglings[autoCB37B20D_var], RegionCircle(lv_targetPoints[autoCB37B20D_var], 2.0)) == true)) {
                    UnitCreateEffectUnit(lv_sludglings[autoCB37B20D_var], "Kill", lv_sludglings[autoCB37B20D_var]);
                }
                else {
                    UnitIssueOrder(lv_sludglings[autoCB37B20D_var], OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoints[autoCB37B20D_var]), c_orderQueueReplace);
                }
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

void libPEB1_gf_SpawnVileTumor (int lp_areaIndex) {
    // Variable Declarations
    point[5] lv_vileTumorPoints;
    point[5] lv_openLocations;
    int lv_numberOfOpenLocations;
    int lv_locationIndex;

    // Automatic Variable Declarations
    const int auto4409E2FB_ae = 4;
    const int auto4409E2FB_ai = 1;

    // Variable Initialization

    // Implementation
    if (((libGame_gv_gameOver == true) || (UnitIsAlive(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit) == false) || (UnitGroupCount(UnitGroup("ArchangelVileTumor", c_playerAny, libPEB1_gv_archangelAreas[lp_areaIndex].lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= libPVEM_gf_PvEDifficultyValueInt(1, 2)))) {
        return ;
    }

    lv_vileTumorPoints[1] = PointFromName(("Vile Tumor " + IntToString(lp_areaIndex) + "-1"));
    lv_vileTumorPoints[2] = PointFromName(("Vile Tumor " + IntToString(lp_areaIndex) + "-2"));
    lv_vileTumorPoints[3] = PointFromName(("Vile Tumor " + IntToString(lp_areaIndex) + "-3"));
    lv_vileTumorPoints[4] = PointFromName(("Vile Tumor " + IntToString(lp_areaIndex) + "-4"));
    lv_locationIndex = 1;
    for ( ; ( (auto4409E2FB_ai >= 0 && lv_locationIndex <= auto4409E2FB_ae) || (auto4409E2FB_ai < 0 && lv_locationIndex >= auto4409E2FB_ae) ) ; lv_locationIndex += auto4409E2FB_ai ) {
        if ((UnitGroupCount(UnitGroup("ArchangelVileTumor", c_playerAny, RegionCircle(lv_vileTumorPoints[lv_locationIndex], 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
            lv_numberOfOpenLocations += 1;
            lv_openLocations[lv_numberOfOpenLocations] = lv_vileTumorPoints[lv_locationIndex];
        }

    }
    if ((lv_numberOfOpenLocations == 0)) {
        return ;
    }

    UnitIssueOrder(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit, OrderTargetingPoint(AbilityCommand("ArchangelVileTumor", 0), lv_openLocations[RandomInt(1, lv_numberOfOpenLocations)]), c_orderQueueReplace);
}

void libPEB1_gf_CastBileLauncher (int lp_areaIndex) {
    int init_i;

    // Variable Declarations
    unit lv_currentTarget;
    int[5] lv_tumorTags;
    int lv_tagIndex;
    int lv_tagCount;
    actor lv_arrowModel;

    // Automatic Variable Declarations
    playergroup autoF0FD8862_g;
    int autoF0FD8862_var;
    unitgroup autoA8B19E84_g;
    int autoA8B19E84_u;
    unit autoA8B19E84_var;
    int auto125C4B5F_ae;
    const int auto125C4B5F_ai = 1;
    unitgroup autoB92EE41F_g;
    int autoB92EE41F_u;
    unit autoB92EE41F_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_tumorTags[init_i] = c_textTagNone;
    }

    // Implementation
    if (((libGame_gv_gameOver == true) || (UnitIsAlive(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit) == false))) {
        return ;
    }

    autoF0FD8862_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    autoF0FD8862_var = -1;
    while (true) {
        	autoF0FD8862_var = PlayerGroupNextPlayer(autoF0FD8862_g, autoF0FD8862_var);
        	if (autoF0FD8862_var<0) { break; }
        	if ((UnitIsAlive(libGame_gv_players[autoF0FD8862_var].lv_heroUnit) == true) && (libNtve_gf_UnitInRegion(libGame_gv_players[autoF0FD8862_var].lv_heroUnit, libPEB1_gv_archangelAreas[lp_areaIndex].lv_region) == true)) {
            if ((lv_currentTarget == null)) {
                lv_currentTarget = libGame_gv_players[autoF0FD8862_var].lv_heroUnit;
            }
            else {
                if ((DistanceBetweenPoints(UnitGetPosition(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit), UnitGetPosition(libGame_gv_players[autoF0FD8862_var].lv_heroUnit)) > DistanceBetweenPoints(UnitGetPosition(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit), UnitGetPosition(lv_currentTarget)))) {
                    lv_currentTarget = libGame_gv_players[autoF0FD8862_var].lv_heroUnit;
                }

            }
        }

    }
    if ((lv_currentTarget == null)) {
        return ;
    }

    UnitIssueOrder(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit, OrderTargetingUnit(AbilityCommand("ArchangelBileLauncher", 0), lv_currentTarget), c_orderQueueReplace);
    autoA8B19E84_g = UnitGroup("ArchangelVileTumor", c_playerAny, libPEB1_gv_archangelAreas[lp_areaIndex].lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA8B19E84_u = UnitGroupCount(autoA8B19E84_g, c_unitCountAll);
    for (;; autoA8B19E84_u -= 1) {
        autoA8B19E84_var = UnitGroupUnitFromEnd(autoA8B19E84_g, autoA8B19E84_u);
        if (autoA8B19E84_var == null) { break; }
        lv_tagCount += 1;
        if ((lv_tagCount > 4)) {
            lv_tagCount = 4;
            break;
        }

        libNtve_gf_SendActorMessageToUnit(autoA8B19E84_var, "HaloStart");
        libNtve_gf_SendActorMessageToUnit(autoA8B19E84_var, "HaloSetColor 0,255,0");
        TextTagCreate(StringExternal("Param/Value/lib_PEB1_44FB41DD"), 24, UnitGetPosition(autoA8B19E84_var), 3.0, true, false, PlayerGroupAll());
        lv_tumorTags[lv_tagCount] = TextTagLastCreated();
    }
    libNtve_gf_AttachModelToUnit(lv_currentTarget, "ArchangelEMPSafetyMarker", "Ref_Overhead");
    lv_arrowModel = libNtve_gf_ActorLastCreated();
    ActorSend(lv_arrowModel, "SetScale 4.000000");
    Wait(2.0, c_timeGame);
    while (true) {
        Wait(0.5, c_timeGame);
        if (((libGame_gv_gameOver == true) || (UnitIsAlive(lv_currentTarget) == false) || (UnitIsAlive(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit) == false) || (UnitGroupCount(UnitGroup("ArchangelBileLauncherMissile", c_playerAny, libPEB1_gv_archangelAreas[lp_areaIndex].lv_region, UnitFilter((1 << c_targetFilterMissile), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0) || (UnitGroupCount(UnitGroup("ArchangelVileTumor", c_playerAny, libPEB1_gv_archangelAreas[lp_areaIndex].lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            auto125C4B5F_ae = lv_tagCount;
            lv_tagIndex = 1;
            for ( ; ( (auto125C4B5F_ai >= 0 && lv_tagIndex <= auto125C4B5F_ae) || (auto125C4B5F_ai < 0 && lv_tagIndex >= auto125C4B5F_ae) ) ; lv_tagIndex += auto125C4B5F_ai ) {
                TextTagDestroy(lv_tumorTags[lv_tagIndex]);
            }
            autoB92EE41F_g = UnitGroup("ArchangelVileTumor", c_playerAny, libPEB1_gv_archangelAreas[lp_areaIndex].lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoB92EE41F_u = UnitGroupCount(autoB92EE41F_g, c_unitCountAll);
            for (;; autoB92EE41F_u -= 1) {
                autoB92EE41F_var = UnitGroupUnitFromEnd(autoB92EE41F_g, autoB92EE41F_u);
                if (autoB92EE41F_var == null) { break; }
                libNtve_gf_SendActorMessageToUnit(autoB92EE41F_var, "HaloStop");
            }
            libNtve_gf_KillModel(lv_arrowModel);
            return ;
        }

    }
}

trigger auto_libPEB1_gf_ArchangelFroggerRoutine_Trigger = null;
int auto_libPEB1_gf_ArchangelFroggerRoutine_lp_areaIndex;

void libPEB1_gf_ArchangelFroggerRoutine (int lp_areaIndex) {
    auto_libPEB1_gf_ArchangelFroggerRoutine_lp_areaIndex = lp_areaIndex;

    if (auto_libPEB1_gf_ArchangelFroggerRoutine_Trigger == null) {
        auto_libPEB1_gf_ArchangelFroggerRoutine_Trigger = TriggerCreate("auto_libPEB1_gf_ArchangelFroggerRoutine_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_ArchangelFroggerRoutine_Trigger, false, false);
}

bool auto_libPEB1_gf_ArchangelFroggerRoutine_TriggerFunc (bool testConds, bool runActions) {
    int lp_areaIndex = auto_libPEB1_gf_ArchangelFroggerRoutine_lp_areaIndex;

    // Variable Declarations
    timer lv_sludglingTimer;
    timer lv_vileTumorTimer;
    timer lv_bileLauncherTimer;
    fixed lv_sludglingDelay;
    int lv_sludgingCounter;
    int lv_currentSide;

    // Automatic Variable Declarations
    int autoB41B0B39_val;
    unitgroup auto3A39F479_g;
    int auto3A39F479_u;
    unit auto3A39F479_var;

    // Variable Initialization
    lv_sludglingTimer = TimerCreate();
    lv_vileTumorTimer = TimerCreate();
    lv_bileLauncherTimer = TimerCreate();
    lv_currentSide = libPEB1_ge_ArchangelAreaSide_Left;

    // Implementation
    if ((libPEB1_gv_archangelAreas[lp_areaIndex].lv_aIScriptActive == true)) {
        return true;
    }

    libPEB1_gv_archangelAreas[lp_areaIndex].lv_aIScriptActive = true;
    TimerStart(lv_sludglingTimer, 2.0, false, c_timeGame);
    TimerStart(lv_vileTumorTimer, 5.0, false, c_timeGame);
    TimerStart(lv_bileLauncherTimer, 10.0, false, c_timeGame);
    autoB41B0B39_val = RandomInt(1, 2);
    if (autoB41B0B39_val == 1) {
        lv_currentSide = libPEB1_ge_ArchangelAreaSide_Left;
    }
    else if (autoB41B0B39_val == 2) {
        lv_currentSide = libPEB1_ge_ArchangelAreaSide_Bottom;
    }
    else {
    }
    while (true) {
        if (((libGame_gv_gameOver == true) || (UnitIsAlive(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit) == false) || (libPEB1_gv_archangelAreas[lp_areaIndex].lv_aggroed == false))) {
            auto3A39F479_g = UnitGroup("ArchangelVileTumor", c_playerAny, libPEB1_gv_archangelAreas[lp_areaIndex].lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto3A39F479_u = UnitGroupCount(auto3A39F479_g, c_unitCountAll);
            for (;; auto3A39F479_u -= 1) {
                auto3A39F479_var = UnitGroupUnitFromEnd(auto3A39F479_g, auto3A39F479_u);
                if (auto3A39F479_var == null) { break; }
                UnitCreateEffectUnit(auto3A39F479_var, "Kill", auto3A39F479_var);
            }
            libPEB1_gv_archangelAreas[lp_areaIndex].lv_aIScriptActive = false;
            return true;
        }

        if ((TimerGetRemaining(lv_sludglingTimer) < 0.1)) {
            lv_sludgingCounter += 1;
            if ((lv_sludgingCounter == 3)) {
                TimerStart(lv_sludglingTimer, 14.0, false, c_timeGame);
            }
            else {
                TimerStart(lv_sludglingTimer, 10.0, false, c_timeGame);
            }
            if ((lv_sludgingCounter >= 4)) {
                lv_sludgingCounter = 1;
                if (((lv_currentSide == libPEB1_ge_ArchangelAreaSide_Left) || (lv_currentSide == libPEB1_ge_ArchangelAreaSide_Right))) {
                    if ((RandomInt(1, 2) == 1)) {
                        lv_currentSide = libPEB1_ge_ArchangelAreaSide_Top;
                    }
                    else {
                        lv_currentSide = libPEB1_ge_ArchangelAreaSide_Bottom;
                    }
                }
                else {
                    if ((RandomInt(1, 2) == 1)) {
                        lv_currentSide = libPEB1_ge_ArchangelAreaSide_Left;
                    }
                    else {
                        lv_currentSide = libPEB1_ge_ArchangelAreaSide_Right;
                    }
                }
            }

            libPEB1_gf_SpawnToxicSludglings(lp_areaIndex, lv_currentSide);
        }

        if ((TimerGetRemaining(lv_vileTumorTimer) < 0.1)) {
            if ((UnitGetPropertyFixed(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit, c_unitPropLifePercent, c_unitPropCurrent) < 50.0)) {
                TimerStart(lv_vileTumorTimer, libPVEM_gf_PvEDifficultyValueReal(13.0, 11.0), false, c_timeGame);
            }
            else {
                TimerStart(lv_vileTumorTimer, libPVEM_gf_PvEDifficultyValueReal(14.0, 12.0), false, c_timeGame);
            }
            libPEB1_gf_SpawnVileTumor(lp_areaIndex);
            Wait(1.0, c_timeGame);
            continue;
        }

        if ((TimerGetRemaining(lv_bileLauncherTimer) < 0.1) && (UnitGroupCount(UnitGroup("ArchangelVileTumor", c_playerAny, libPEB1_gv_archangelAreas[lp_areaIndex].lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroup("ArchangelBileLauncherMissile", c_playerAny, libPEB1_gv_archangelAreas[lp_areaIndex].lv_region, UnitFilter((1 << c_targetFilterMissile), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
            if ((UnitGetPropertyFixed(libPEB1_gv_archangelAreas[lp_areaIndex].lv_archangelUnit, c_unitPropLifePercent, c_unitPropCurrent) < 50.0)) {
                TimerStart(lv_bileLauncherTimer, libPVEM_gf_PvEDifficultyValueReal(12.0, 10.0), false, c_timeGame);
            }
            else {
                TimerStart(lv_bileLauncherTimer, libPVEM_gf_PvEDifficultyValueReal(13.0, 11.0), false, c_timeGame);
            }
            libPEB1_gf_CastBileLauncher(lp_areaIndex);
            Wait(1.0, c_timeGame);
            continue;
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

trigger auto_libPEB1_gf_ArchangelChaserBanelingLogic_Trigger = null;
unit auto_libPEB1_gf_ArchangelChaserBanelingLogic_lp_baneling;
int auto_libPEB1_gf_ArchangelChaserBanelingLogic_lp_areaIndex;

void libPEB1_gf_ArchangelChaserBanelingLogic (unit lp_baneling, int lp_areaIndex) {
    auto_libPEB1_gf_ArchangelChaserBanelingLogic_lp_baneling = lp_baneling;
    auto_libPEB1_gf_ArchangelChaserBanelingLogic_lp_areaIndex = lp_areaIndex;

    if (auto_libPEB1_gf_ArchangelChaserBanelingLogic_Trigger == null) {
        auto_libPEB1_gf_ArchangelChaserBanelingLogic_Trigger = TriggerCreate("auto_libPEB1_gf_ArchangelChaserBanelingLogic_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_ArchangelChaserBanelingLogic_Trigger, false, false);
}

bool auto_libPEB1_gf_ArchangelChaserBanelingLogic_TriggerFunc (bool testConds, bool runActions) {
    unit lp_baneling = auto_libPEB1_gf_ArchangelChaserBanelingLogic_lp_baneling;
    int lp_areaIndex = auto_libPEB1_gf_ArchangelChaserBanelingLogic_lp_areaIndex;

    // Variable Declarations
    unit lv_target;
    unitgroup lv_targetUnits;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetUnits = UnitGroupEmpty();

    // Implementation
    while (true) {
        if (((UnitIsAlive(lp_baneling) == false) || (libGame_gv_gameOver == true))) {
            return true;
        }

        if (((UnitIsValid(lv_target) == false) || (UnitIsAlive(lv_target) == false) || (libNtve_gf_UnitInRegion(lv_target, libPEB1_gv_archangelAreas[lp_areaIndex].lv_region) == false))) {
            lv_targetUnits = UnitGroupAlliance(UnitGetOwner(lp_baneling), c_unitAllianceEnemy, libPEB1_gv_archangelAreas[lp_areaIndex].lv_region, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv_target = UnitGroupClosestToPoint(lv_targetUnits, UnitGetPosition(lp_baneling));
            if ((UnitIsValid(lv_target) == true)) {
                UnitIssueOrder(lp_baneling, OrderTargetingUnit(AbilityCommand("ArchangelSuperBanelingChase", 0), lv_target), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lp_baneling, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            }
        }
        else {
            if ((UnitOrderCount(lp_baneling) == 0)) {
                UnitIssueOrder(lp_baneling, OrderTargetingUnit(AbilityCommand("ArchangelSuperBanelingChase", 0), lv_target), c_orderQueueReplace);
            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

void libPEB1_gf_IncludeHeroIntheNextAttackWave (int lp_lane1Count, int lp_lane2Count) {
    // Automatic Variable Declarations
    // Implementation
    libPEB1_gv_attackWaveHeroCount[1] = lp_lane1Count;
    libPEB1_gv_attackWaveHeroCount[2] = lp_lane2Count;
}

void libPEB1_gf_AddMarineRescueEvent (point lp_marineLocation1, point lp_marineLocation2, point lp_marineLocation3, region lp_zergSpawnRegion, region lp_revealRegion, region lp_rescueRegion) {
    // Automatic Variable Declarations
    // Implementation
    libPEB1_gv_marineRescueCount += 1;
    libPEB1_gv_marineRescue[libPEB1_gv_marineRescueCount].lv_marineSpawnLocation[1] = lp_marineLocation1;
    libPEB1_gv_marineRescue[libPEB1_gv_marineRescueCount].lv_marineSpawnLocation[2] = lp_marineLocation2;
    libPEB1_gv_marineRescue[libPEB1_gv_marineRescueCount].lv_marineSpawnLocation[3] = lp_marineLocation3;
    libPEB1_gv_marineRescue[libPEB1_gv_marineRescueCount].lv_zergSpawnRegion = lp_zergSpawnRegion;
    libPEB1_gv_marineRescue[libPEB1_gv_marineRescueCount].lv_revealRegion = lp_revealRegion;
    libPEB1_gv_marineRescue[libPEB1_gv_marineRescueCount].lv_rescueRegion = lp_rescueRegion;
}

void libPEB1_gf_MarineRescueEventCreateAll () {
    // Variable Declarations
    int lv_itMarineRescue;

    // Automatic Variable Declarations
    int autoC86FF328_ae;
    const int autoC86FF328_ai = 1;

    // Variable Initialization

    // Implementation
    autoC86FF328_ae = libPEB1_gv_marineRescueCount;
    lv_itMarineRescue = 1;
    for ( ; ( (autoC86FF328_ai >= 0 && lv_itMarineRescue <= autoC86FF328_ae) || (autoC86FF328_ai < 0 && lv_itMarineRescue >= autoC86FF328_ae) ) ; lv_itMarineRescue += autoC86FF328_ai ) {
        libPEB1_gf_MarineRescueEventCreateSingle(lv_itMarineRescue);
    }
}

trigger auto_libPEB1_gf_MarineRescueEventCreateSingle_Trigger = null;
int auto_libPEB1_gf_MarineRescueEventCreateSingle_lp_index;

void libPEB1_gf_MarineRescueEventCreateSingle (int lp_index) {
    auto_libPEB1_gf_MarineRescueEventCreateSingle_lp_index = lp_index;

    if (auto_libPEB1_gf_MarineRescueEventCreateSingle_Trigger == null) {
        auto_libPEB1_gf_MarineRescueEventCreateSingle_Trigger = TriggerCreate("auto_libPEB1_gf_MarineRescueEventCreateSingle_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_MarineRescueEventCreateSingle_Trigger, false, false);
}

bool auto_libPEB1_gf_MarineRescueEventCreateSingle_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_libPEB1_gf_MarineRescueEventCreateSingle_lp_index;

    // Variable Declarations
    int lv_itMarineIndex;
    unit lv_itMarine;
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto6050BB2B_ae = 3;
    const int auto6050BB2B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itMarineIndex = 1;
    for ( ; ( (auto6050BB2B_ai >= 0 && lv_itMarineIndex <= auto6050BB2B_ae) || (auto6050BB2B_ai < 0 && lv_itMarineIndex >= auto6050BB2B_ae) ) ; lv_itMarineIndex += auto6050BB2B_ai ) {
        if ((libPEB1_gv_marineRescue[lp_index].lv_marineSpawnLocation[lv_itMarineIndex] != null)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "RangedMinion", c_unitCreateIgnorePlacement, 13, libPEB1_gv_marineRescue[lp_index].lv_marineSpawnLocation[lv_itMarineIndex], null);
            UnitCopyAIThinkTree(libPEB1_gv_aIHelper_MarineForRescue, UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "BenignFlag", UnitGetOwner(UnitLastCreated()), 1);
            UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
            UnitGroupAdd(libPEB1_gv_marineRescue[lp_index].lv_marineGroup, UnitLastCreated());
            libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
            libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega);
        }

    }
    while (true) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(libPEB1_gv_marineRescue[lp_index].lv_marineGroup) == true)) {
            return true;
        }

        if ((libPEB1_gv_marineRescue[lp_index].lv_rescued == true)) {
            return true;
        }

        if ((libPEB1_gv_marineRescue[lp_index].lv_revealed == false)) {
            if ((libNtve_gf_UnitGroupIsDead(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamOrder, c_unitAllianceAlly, libPEB1_gv_marineRescue[lp_index].lv_revealRegion, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == false)) {
                libPEB1_gv_marineRescue[lp_index].lv_revealed = true;
                libPEB1_gf_MarineRescueEventReveal(lp_index);
            }

        }

        if ((libNtve_gf_UnitGroupIsDead(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamOrder, c_unitAllianceAlly, libPEB1_gv_marineRescue[lp_index].lv_rescueRegion, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == false)) {
            libPEB1_gv_marineRescue[lp_index].lv_rescued = true;
            libPEB1_gf_MarineRescueEventRescue(lp_index);
            return true;
        }

        Wait(0.5, c_timeGame);
    }
    return true;
}

trigger auto_libPEB1_gf_MarineRescueEventReveal_Trigger = null;
int auto_libPEB1_gf_MarineRescueEventReveal_lp_index;

void libPEB1_gf_MarineRescueEventReveal (int lp_index) {
    auto_libPEB1_gf_MarineRescueEventReveal_lp_index = lp_index;

    if (auto_libPEB1_gf_MarineRescueEventReveal_Trigger == null) {
        auto_libPEB1_gf_MarineRescueEventReveal_Trigger = TriggerCreate("auto_libPEB1_gf_MarineRescueEventReveal_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_MarineRescueEventReveal_Trigger, false, false);
}

bool auto_libPEB1_gf_MarineRescueEventReveal_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_libPEB1_gf_MarineRescueEventReveal_lp_index;

    // Variable Declarations
    int lv_itMarineIndex;
    unit lv_itMarine;

    // Automatic Variable Declarations
    unitgroup auto0533C1BB_g;
    int auto0533C1BB_u;

    // Variable Initialization

    // Implementation
    auto0533C1BB_g = libPEB1_gv_marineRescue[lp_index].lv_marineGroup;
    auto0533C1BB_u = UnitGroupCount(auto0533C1BB_g, c_unitCountAll);
    for (;; auto0533C1BB_u -= 1) {
        lv_itMarine = UnitGroupUnitFromEnd(auto0533C1BB_g, auto0533C1BB_u);
        if (lv_itMarine == null) { break; }
        libNtve_gf_ShareVisionofUnit(lv_itMarine, true, libCore_gv_cOMPUTER_TeamOrder);
    }
    libCore_gf_CreateReticleEffectAndTextTagAtPoint(libCore_ge_ReticleType_BonusObjective, libCore_ge_ReticleSize_Medium, StringExternal("Param/Value/lib_PEB1_0F92B7EC"), PointWithOffset(UnitGroupCenterOfGroup(libPEB1_gv_marineRescue[lp_index].lv_marineGroup), 0.0, 1.0));
    libPEB1_gv_marineRescue[lp_index].lv_rescueReticle = libNtve_gf_ActorLastCreated();
    libPEB1_gv_marineRescue[lp_index].lv_rescueTextTag = TextTagLastCreated();
    Wait(1.0, c_timeGame);
    libPEB1_gf_MarineRescueEventDoHarassment(lp_index);
    return true;
}

trigger auto_libPEB1_gf_MarineRescueEventDoHarassment_Trigger = null;
int auto_libPEB1_gf_MarineRescueEventDoHarassment_lp_index;

void libPEB1_gf_MarineRescueEventDoHarassment (int lp_index) {
    auto_libPEB1_gf_MarineRescueEventDoHarassment_lp_index = lp_index;

    if (auto_libPEB1_gf_MarineRescueEventDoHarassment_Trigger == null) {
        auto_libPEB1_gf_MarineRescueEventDoHarassment_Trigger = TriggerCreate("auto_libPEB1_gf_MarineRescueEventDoHarassment_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_MarineRescueEventDoHarassment_Trigger, false, false);
}

bool auto_libPEB1_gf_MarineRescueEventDoHarassment_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_libPEB1_gf_MarineRescueEventDoHarassment_lp_index;

    // Variable Declarations
    int lv_zergCount;
    unit lv_itZerg;

    // Automatic Variable Declarations
    int auto932BB87D_n;
    int auto932BB87D_i;
    unitgroup auto35054691_g;
    int auto35054691_u;
    unitgroup auto61BBD62A_g;
    int auto61BBD62A_u;

    // Variable Initialization

    // Implementation
    while (true) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(libPEB1_gv_marineRescue[lp_index].lv_marineGroup) == true)) {
            return true;
        }

        if ((libPEB1_gv_marineRescue[lp_index].lv_rescued == true)) {
            return true;
        }

        lv_zergCount = RandomInt(1, 2);
        auto932BB87D_n = lv_zergCount;
        for (auto932BB87D_i = 1; auto932BB87D_i <= auto932BB87D_n; auto932BB87D_i += 1) {
            libPEB1_gf_MarineRescueUnburrowZerg("ZergZergling", RegionRandomPoint(libPEB1_gv_marineRescue[lp_index].lv_zergSpawnRegion), false);
        }
        Wait(0.125, c_timeGame);
        UnitGroupAddUnitGroup(libPEB1_gv_marineRescue[lp_index].lv_zergGroup, UnitGroup("ZergZergling", libCore_gv_cOMPUTER_TeamChaos, libPEB1_gv_marineRescue[lp_index].lv_zergSpawnRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(libPEB1_gv_marineRescue[lp_index].lv_zergGroup, UnitGroup("ZergZerglingNotMinion", libCore_gv_cOMPUTER_TeamChaos, libPEB1_gv_marineRescue[lp_index].lv_zergSpawnRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        auto35054691_g = libPEB1_gv_marineRescue[lp_index].lv_zergGroup;
        auto35054691_u = UnitGroupCount(auto35054691_g, c_unitCountAll);
        for (;; auto35054691_u -= 1) {
            lv_itZerg = UnitGroupUnitFromEnd(auto35054691_g, auto35054691_u);
            if (lv_itZerg == null) { break; }
            UnitDestroyAIThinkTree(lv_itZerg);
        }
        Wait(0.5, c_timeGame);
        auto61BBD62A_g = libPEB1_gv_marineRescue[lp_index].lv_zergGroup;
        auto61BBD62A_u = UnitGroupCount(auto61BBD62A_g, c_unitCountAll);
        for (;; auto61BBD62A_u -= 1) {
            lv_itZerg = UnitGroupUnitFromEnd(auto61BBD62A_g, auto61BBD62A_u);
            if (lv_itZerg == null) { break; }
            UnitIssueOrder(lv_itZerg, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(libPEB1_gv_marineRescue[lp_index].lv_marineGroup, UnitGetPosition(lv_itZerg))), c_orderQueueReplace);
        }
        while (!((libNtve_gf_UnitGroupIsDead(libPEB1_gv_marineRescue[lp_index].lv_zergGroup) == true))) {
            Wait(1.0, c_timeGame);
        }
        Wait(RandomFixed(5.0, 10.0), c_timeGame);
    }
    return true;
}

trigger auto_libPEB1_gf_MarineRescueEventRescue_Trigger = null;
int auto_libPEB1_gf_MarineRescueEventRescue_lp_index;

void libPEB1_gf_MarineRescueEventRescue (int lp_index) {
    auto_libPEB1_gf_MarineRescueEventRescue_lp_index = lp_index;

    if (auto_libPEB1_gf_MarineRescueEventRescue_Trigger == null) {
        auto_libPEB1_gf_MarineRescueEventRescue_Trigger = TriggerCreate("auto_libPEB1_gf_MarineRescueEventRescue_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_MarineRescueEventRescue_Trigger, false, false);
}

bool auto_libPEB1_gf_MarineRescueEventRescue_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_libPEB1_gf_MarineRescueEventRescue_lp_index;

    // Variable Declarations
    unit lv_itMarine;

    // Automatic Variable Declarations
    unitgroup auto86A57328_g;
    int auto86A57328_u;

    // Variable Initialization

    // Implementation
    auto86A57328_g = libPEB1_gv_marineRescue[lp_index].lv_marineGroup;
    auto86A57328_u = UnitGroupCount(auto86A57328_g, c_unitCountAll);
    for (;; auto86A57328_u -= 1) {
        lv_itMarine = UnitGroupUnitFromEnd(auto86A57328_g, auto86A57328_u);
        if (lv_itMarine == null) { break; }
        libNtve_gf_RescueUnit(lv_itMarine, libCore_gv_cOMPUTER_TeamOrder, true);
    }
    if ((libPEB1_gv_marineRescue[lp_index].lv_rescueReticle != null)) {
        libNtve_gf_KillModel(libPEB1_gv_marineRescue[lp_index].lv_rescueReticle);
        TextTagDestroy(libPEB1_gv_marineRescue[lp_index].lv_rescueTextTag);
        libPEB1_gv_marineRescue[lp_index].lv_rescueReticle = null;
        libPEB1_gv_marineRescue[lp_index].lv_rescueTextTag = c_textTagNone;
    }

    TextTagCreate(StringExternal("Param/Value/lib_PEB1_4956CE22"), 32, UnitGroupCenterOfGroup(libPEB1_gv_marineRescue[lp_index].lv_marineGroup), 2.0, true, false, PlayerGroupAll());
    TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
    Wait(2.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    libPEB1_gf_MarineRescueEventMedivac(lp_index);
    Wait(1.5, c_timeGame);
    libPVEM_gf_PvEPickupSpawnRandom(UnitGroupCenterOfGroup(libPEB1_gv_marineRescue[lp_index].lv_marineGroup));
    return true;
}

trigger auto_libPEB1_gf_MarineRescueEventMedivac_Trigger = null;
int auto_libPEB1_gf_MarineRescueEventMedivac_lp_index;

void libPEB1_gf_MarineRescueEventMedivac (int lp_index) {
    auto_libPEB1_gf_MarineRescueEventMedivac_lp_index = lp_index;

    if (auto_libPEB1_gf_MarineRescueEventMedivac_Trigger == null) {
        auto_libPEB1_gf_MarineRescueEventMedivac_Trigger = TriggerCreate("auto_libPEB1_gf_MarineRescueEventMedivac_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_MarineRescueEventMedivac_Trigger, false, false);
}

bool auto_libPEB1_gf_MarineRescueEventMedivac_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_libPEB1_gf_MarineRescueEventMedivac_lp_index;

    // Variable Declarations
    point lv_pickupLocation;
    unit lv_medivac;
    unit lv_itMarine;
    fixed lv_angle;

    // Automatic Variable Declarations
    unitgroup autoAFCFB900_g;
    int autoAFCFB900_u;

    // Variable Initialization

    // Implementation
    lv_pickupLocation = UnitGroupCenterOfGroup(libPEB1_gv_marineRescue[lp_index].lv_marineGroup);
    lv_angle = AngleBetweenPoints(UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core), lv_pickupLocation);
    libNtve_gf_UnitCreateFacingPoint(1, "MercMedivac", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_TeamOrder, PointWithOffsetPolar(lv_pickupLocation, 20.0, lv_angle), UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core), null);
    lv_medivac = UnitLastCreated();
    UnitSetState(lv_medivac, c_unitStateInvulnerable, true);
    libNtve_gf_SendActorMessageToUnit(lv_medivac, "Signal Arrive");
    UnitIssueOrder(lv_medivac, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lv_pickupLocation, 1.0, lv_angle)), c_orderQueueAddToEnd);
    while (!((UnitOrderCount(lv_medivac) == 0))) {
        Wait(1.0, c_timeGame);
    }
    Wait(0.5, c_timeGame);
    autoAFCFB900_g = libPEB1_gv_marineRescue[lp_index].lv_marineGroup;
    autoAFCFB900_u = UnitGroupCount(autoAFCFB900_g, c_unitCountAll);
    for (;; autoAFCFB900_u -= 1) {
        lv_itMarine = UnitGroupUnitFromEnd(autoAFCFB900_g, autoAFCFB900_u);
        if (lv_itMarine == null) { break; }
        UnitIssueOrder(lv_medivac, OrderTargetingUnit(AbilityCommand("MercMedivacTransport", 0), lv_itMarine), c_orderQueueAddToEnd);
    }
    Wait(1.0, c_timeGame);
    while (!((UnitOrderCount(lv_medivac) == 0))) {
        Wait(1.0, c_timeGame);
    }
    Wait(0.5, c_timeGame);
    UnitIssueOrder(lv_medivac, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_medivac), 75.0, (lv_angle + 180.0))), c_orderQueueAddToEnd);
    Wait(4.0, c_timeGame);
    UnitRemove(lv_medivac);
    return true;
}

trigger auto_libPEB1_gf_MarineRescueUnburrowZerg_Trigger = null;
string auto_libPEB1_gf_MarineRescueUnburrowZerg_lp_unitType;
point auto_libPEB1_gf_MarineRescueUnburrowZerg_lp_position;
bool auto_libPEB1_gf_MarineRescueUnburrowZerg_lp_aIOnOff;

void libPEB1_gf_MarineRescueUnburrowZerg (string lp_unitType, point lp_position, bool lp_aIOnOff) {
    auto_libPEB1_gf_MarineRescueUnburrowZerg_lp_unitType = lp_unitType;
    auto_libPEB1_gf_MarineRescueUnburrowZerg_lp_position = lp_position;
    auto_libPEB1_gf_MarineRescueUnburrowZerg_lp_aIOnOff = lp_aIOnOff;

    if (auto_libPEB1_gf_MarineRescueUnburrowZerg_Trigger == null) {
        auto_libPEB1_gf_MarineRescueUnburrowZerg_Trigger = TriggerCreate("auto_libPEB1_gf_MarineRescueUnburrowZerg_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_MarineRescueUnburrowZerg_Trigger, false, false);
}

bool auto_libPEB1_gf_MarineRescueUnburrowZerg_TriggerFunc (bool testConds, bool runActions) {
    string lp_unitType = auto_libPEB1_gf_MarineRescueUnburrowZerg_lp_unitType;
    point lp_position = auto_libPEB1_gf_MarineRescueUnburrowZerg_lp_position;
    bool lp_aIOnOff = auto_libPEB1_gf_MarineRescueUnburrowZerg_lp_aIOnOff;

    // Automatic Variable Declarations
    string autoFB7630A5_val;

    // Implementation
    libPVEM_gf_PvESpawnNPCMinions(lp_unitType, libCore_gv_cOMPUTER_TeamChaos, lp_position, libNtve_gf_RandomAngle(), 0);
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    autoFB7630A5_val = lp_unitType;
    if (autoFB7630A5_val == "ZergRoach") {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), "Unburrow", "Birth", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        if ((UnitIsAlive(UnitLastCreated()) == false)) {
            return true;
        }

        libNtve_gf_ShowHideUnit(UnitLastCreated(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, true);
    }
    else if (autoFB7630A5_val == "ZergBaneling") {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), "Unburrow", "Birth", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        if ((UnitIsAlive(UnitLastCreated()) == false)) {
            return true;
        }

        libNtve_gf_ShowHideUnit(UnitLastCreated(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, true);
    }
    else if (autoFB7630A5_val == "ZergUltralisk") {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), "Unburrow", "Stand Cover End", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        if ((UnitIsAlive(UnitLastCreated()) == false)) {
            return true;
        }

        libNtve_gf_ShowHideUnit(UnitLastCreated(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, true);
        Wait(0.6045, c_timeGame);
    }
    else {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), "Unburrow", "Unburrow", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        if ((UnitIsAlive(UnitLastCreated()) == false)) {
            return true;
        }

        libNtve_gf_CreateActorAtPoint("KerriganCrushingGripZerglingUnburrowSplat", UnitGetPosition(UnitLastCreated()));
        if ((UnitGetType(UnitLastCreated()) == "ZergHydralisk")) {
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.200000");
        }

        libNtve_gf_ShowHideUnit(UnitLastCreated(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, true);
        Wait(0.6045, c_timeGame);
    }
    libNtve_gf_PauseUnit(UnitLastCreated(), false);
    if ((UnitIsAlive(UnitLastCreated()) == false)) {
        return true;
    }

    libPEB1_gf_TurnOnOffZergMinionAI(UnitLastCreated(), lp_aIOnOff);
    return true;
}

trigger auto_libPEB1_gf_SpawnCreepCamp_Trigger = null;
int auto_libPEB1_gf_SpawnCreepCamp_lp_campIndex;

void libPEB1_gf_SpawnCreepCamp (int lp_campIndex) {
    auto_libPEB1_gf_SpawnCreepCamp_lp_campIndex = lp_campIndex;

    if (auto_libPEB1_gf_SpawnCreepCamp_Trigger == null) {
        auto_libPEB1_gf_SpawnCreepCamp_Trigger = TriggerCreate("auto_libPEB1_gf_SpawnCreepCamp_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_SpawnCreepCamp_Trigger, false, false);
}

bool auto_libPEB1_gf_SpawnCreepCamp_TriggerFunc (bool testConds, bool runActions) {
    int lp_campIndex = auto_libPEB1_gf_SpawnCreepCamp_lp_campIndex;

    // Variable Declarations
    int lv_defenderIndex;
    fixed lv_StaggeredBirth;
    unitgroup lv_defenderUnits;

    // Automatic Variable Declarations
    unitgroup auto91F25FD7_g;
    int auto91F25FD7_u;
    unit auto91F25FD7_var;
    const int autoF8430F69_ae = 4;
    const int autoF8430F69_ai = 1;
    int autoFEC55F93_val;
    unitgroup auto959BE3E3_g;
    int auto959BE3E3_u;
    unit auto959BE3E3_var;

    // Variable Initialization
    lv_defenderIndex = 1;
    lv_defenderUnits = UnitGroupEmpty();

    // Implementation
    auto91F25FD7_g = UnitGroup("PVESpecialAbilityPickupUnit", c_playerAny, RegionCircle(libPEB1_gv_creepCamps[lp_campIndex].lv_pingPoint, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto91F25FD7_u = UnitGroupCount(auto91F25FD7_g, c_unitCountAll);
    for (;; auto91F25FD7_u -= 1) {
        auto91F25FD7_var = UnitGroupUnitFromEnd(auto91F25FD7_g, auto91F25FD7_u);
        if (auto91F25FD7_var == null) { break; }
        UnitKill(auto91F25FD7_var);
    }
    lv_defenderIndex = 1;
    for ( ; ( (autoF8430F69_ai >= 0 && lv_defenderIndex <= autoF8430F69_ae) || (autoF8430F69_ai < 0 && lv_defenderIndex >= autoF8430F69_ae) ) ; lv_defenderIndex += autoF8430F69_ai ) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((libPEB1_gv_creepCamps[lp_campIndex].lv_spawnPoints[lv_defenderIndex] != null)) {
            autoFEC55F93_val = lv_defenderIndex;
            if (autoFEC55F93_val == 1) {
                libNtve_gf_CreateUnitsAtPoint2(1, "TerranGoliathDefender", 0, libCore_gv_cOMPUTER_TeamChaos, libPEB1_gv_creepCamps[lp_campIndex].lv_spawnPoints[lv_defenderIndex], null);
            }
            else if (autoFEC55F93_val == 2) {
                libNtve_gf_CreateUnitsAtPoint2(1, "TerranGoliathDefender", 0, libCore_gv_cOMPUTER_TeamChaos, libPEB1_gv_creepCamps[lp_campIndex].lv_spawnPoints[lv_defenderIndex], null);
            }
            else if (autoFEC55F93_val == 3) {
                libNtve_gf_CreateUnitsAtPoint2(1, "TerranGoliathDefender", 0, libCore_gv_cOMPUTER_TeamChaos, libPEB1_gv_creepCamps[lp_campIndex].lv_spawnPoints[lv_defenderIndex], null);
            }
            else if (autoFEC55F93_val == 4) {
                libNtve_gf_CreateUnitsAtPoint2(1, "TerranRavenDefender", 0, libCore_gv_cOMPUTER_TeamChaos, libPEB1_gv_creepCamps[lp_campIndex].lv_spawnPoints[lv_defenderIndex], null);
            }
            else {
            }
            UnitGroupAdd(lv_defenderUnits, UnitLastCreated());
            UnitBehaviorAdd(UnitLastCreated(), "JungleCreepPassive", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "JungleMercDefenderBirthInvulnerability", UnitLastCreated(), 1);
            UnitBehaviorSetDurationRemaining(UnitLastCreated(), "JungleMercDefenderBirthInvulnerability", (UnitBehaviorDuration(UnitLastCreated(), "JungleMercDefenderBirthInvulnerability") - lv_StaggeredBirth));
            lv_StaggeredBirth += 0.0625;
            Wait(0.0625, c_timeGame);
        }

    }
    libPEB1_gv_creepCamps[lp_campIndex].lv_defenderUnits = lv_defenderUnits;
    libPEB1_gv_creepCamps[lp_campIndex].lv_defenderGroupAlive = true;
    libAIAI_gf_StartDefenderAI(false, lv_defenderUnits, libPEB1_gv_creepCamps[lp_campIndex].lv_leashRegion, libPEB1_gv_creepCamps[lp_campIndex].lv_aggroRegion, true);
    libPEB1_gv_creepCamps[lp_campIndex].lv_defenderAI_Index = libAIAI_gf_LastCreatedDefenderAI();
    auto959BE3E3_g = lv_defenderUnits;
    auto959BE3E3_u = UnitGroupCount(auto959BE3E3_g, c_unitCountAll);
    for (;; auto959BE3E3_u -= 1) {
        auto959BE3E3_var = UnitGroupUnitFromEnd(auto959BE3E3_g, auto959BE3E3_u);
        if (auto959BE3E3_var == null) { break; }
        libGame_gf_UpdateScalingForUnit(auto959BE3E3_var, libGame_gv_scalingTicks, 0);
        UnitSetPropertyFixed(auto959BE3E3_var, c_unitPropLifePercent, 100.0);
    }
    libPEB1_gv_creepCamps[lp_campIndex].lv_currentScaling = libGame_gv_scalingTicks;
    return true;
}

trigger auto_libPEB1_gf_ToggleCreepCampStatus_Trigger = null;
int auto_libPEB1_gf_ToggleCreepCampStatus_lp_campIndex;
bool auto_libPEB1_gf_ToggleCreepCampStatus_lp_status;

void libPEB1_gf_ToggleCreepCampStatus (int lp_campIndex, bool lp_status) {
    auto_libPEB1_gf_ToggleCreepCampStatus_lp_campIndex = lp_campIndex;
    auto_libPEB1_gf_ToggleCreepCampStatus_lp_status = lp_status;

    if (auto_libPEB1_gf_ToggleCreepCampStatus_Trigger == null) {
        auto_libPEB1_gf_ToggleCreepCampStatus_Trigger = TriggerCreate("auto_libPEB1_gf_ToggleCreepCampStatus_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_ToggleCreepCampStatus_Trigger, false, false);
}

bool auto_libPEB1_gf_ToggleCreepCampStatus_TriggerFunc (bool testConds, bool runActions) {
    int lp_campIndex = auto_libPEB1_gf_ToggleCreepCampStatus_lp_campIndex;
    bool lp_status = auto_libPEB1_gf_ToggleCreepCampStatus_lp_status;

    // Variable Declarations
    int lv_defenderIndex;
    unit lv_mercMedivac;
    point lv_rallyPoint;
    unit lv_mercRaven;
    unitgroup lv_goliaths;

    // Automatic Variable Declarations
    const int auto6324091F_ae = 4;
    const int auto6324091F_ai = 1;
    int auto5DF6523D_val;
    unitgroup auto9736471E_g;
    int auto9736471E_u;
    unit auto9736471E_var;
    unitgroup auto4E91A6CE_g;
    int auto4E91A6CE_u;
    unit auto4E91A6CE_var;
    unitgroup auto521C6480_g;
    int auto521C6480_u;
    unit auto521C6480_var;

    // Variable Initialization
    lv_goliaths = UnitGroupEmpty();

    // Implementation
    if ((lp_status == true)) {
        UnitSetOwner(libPEB1_gv_creepCamps[lp_campIndex].lv_iconUnit, libStEx_gv_pLAYER_11_ORDER, true);
    }
    else {
        UnitSetOwner(libPEB1_gv_creepCamps[lp_campIndex].lv_iconUnit, 0, true);
    }
    if ((lp_status == true)) {
        ActorSend(libPEB1_gv_creepCamps[lp_campIndex].lv_captureSlab, "Signal EventStart");
        ActorSend(libPEB1_gv_creepCamps[lp_campIndex].lv_captureSlab, "Signal BothBeaconsCaptured");
        ActorSend(libPEB1_gv_creepCamps[lp_campIndex].lv_captureSlab, "Signal BeaconCapturedOrder");
    }
    else {
        ActorSend(libPEB1_gv_creepCamps[lp_campIndex].lv_captureSlab, "Signal EventStop");
        ActorSend(libPEB1_gv_creepCamps[lp_campIndex].lv_captureSlab, "Signal BothBeaconsNoLongerCaptured");
        ActorSend(libPEB1_gv_creepCamps[lp_campIndex].lv_captureSlab, "Signal StageDone");
    }
    if ((lp_status == true)) {
        if ((libPEB1_gv_creepCamps[lp_campIndex].lv_lane == libPEB1_ge_Lane_Top)) {
            if ((UnitGroupCount(UnitGroup("PVEBunker", libStEx_gv_pLAYER_11_ORDER, RegionFromName("Left Revealer"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                lv_rallyPoint = PointFromName("Player Minion Rally - Top Lane - Outer");
            }
            else {
                if ((UnitGroupCount(UnitGroup("TownTownHallL3", libStEx_gv_pLAYER_11_ORDER, RegionFromName("Order Base Region"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                    lv_rallyPoint = PointFromName("Player Minion Rally - Top Lane - Inner");
                }
                else {
                    lv_rallyPoint = PointFromName("Rally Core Left");
                }
            }
        }
        else {
            if ((UnitGroupCount(UnitGroup("PVEBunker", libStEx_gv_pLAYER_11_ORDER, RegionFromName("Right Revealer"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                lv_rallyPoint = PointFromName("Player Minion Rally - Bot Lane - Outer");
            }
            else {
                if ((UnitGroupCount(UnitGroup("TownTownHallL3", libStEx_gv_pLAYER_11_ORDER, RegionFromName("Order Base Region"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                    lv_rallyPoint = PointFromName("Player Minion Rally - Bot Lane - Inner");
                }
                else {
                    lv_rallyPoint = PointFromName("Rally Core Right");
                }
            }
        }
        SoundPlayAtPointForPlayer(SoundLink("PVE_MercMedivac_Alert", -1), c_maxPlayers, PlayerGroupAll(), lv_rallyPoint, 0.0, 100.0, 0.0);
        libNtve_gf_UnitCreateFacingPoint(1, "MercMedivac", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_TeamOrder, PointWithOffsetPolar(libPEB1_gv_creepCamps[lp_campIndex].lv_pingPoint, -12.0, AngleBetweenPoints(libPEB1_gv_creepCamps[lp_campIndex].lv_pingPoint, lv_rallyPoint)), lv_rallyPoint, null);
        lv_mercMedivac = UnitLastCreated();
        UnitSetState(lv_mercMedivac, c_unitStateInvulnerable, true);
        PathCreateForUnit(PlayerGroupAll(), lv_mercMedivac);
        libPEB1_gv_creepCamps[lp_campIndex].lv_path = PathLastCreated();
        PathSetVisible(libPEB1_gv_creepCamps[lp_campIndex].lv_path, c_pathLocationAll, true);
        PathSetColor(libPEB1_gv_creepCamps[lp_campIndex].lv_path, c_pathLocationAll, Color(0.00, 50.20, 100.00));
        PathSetLineTexture(libPEB1_gv_creepCamps[lp_campIndex].lv_path, c_pathLocationMinimap, "Assets\\Textures\\storm_waypointline.dds");
        libNtve_gf_SendActorMessageToUnit(lv_mercMedivac, "Signal Arrive");
        UnitIssueOrder(lv_mercMedivac, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(libPEB1_gv_creepCamps[lp_campIndex].lv_pingPoint, -3.0, AngleBetweenPoints(libPEB1_gv_creepCamps[lp_campIndex].lv_pingPoint, lv_rallyPoint))), c_orderQueueAddToEnd);
        lv_defenderIndex = 1;
        for ( ; ( (auto6324091F_ai >= 0 && lv_defenderIndex <= auto6324091F_ae) || (auto6324091F_ai < 0 && lv_defenderIndex >= auto6324091F_ae) ) ; lv_defenderIndex += auto6324091F_ai ) {
            if ((libPEB1_gv_creepCamps[lp_campIndex].lv_spawnPoints[lv_defenderIndex] != null)) {
                auto5DF6523D_val = lv_defenderIndex;
                if (auto5DF6523D_val == 1) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranGoliath", 0, libCore_gv_cOMPUTER_TeamOrder, libPEB1_gv_creepCamps[lp_campIndex].lv_spawnPoints[lv_defenderIndex], null);
                    UnitGroupAdd(lv_goliaths, UnitLastCreated());
                }
                else if (auto5DF6523D_val == 2) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranGoliath", 0, libCore_gv_cOMPUTER_TeamOrder, libPEB1_gv_creepCamps[lp_campIndex].lv_spawnPoints[lv_defenderIndex], null);
                    UnitGroupAdd(lv_goliaths, UnitLastCreated());
                }
                else if (auto5DF6523D_val == 3) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranGoliath", 0, libCore_gv_cOMPUTER_TeamOrder, libPEB1_gv_creepCamps[lp_campIndex].lv_spawnPoints[lv_defenderIndex], null);
                    UnitGroupAdd(lv_goliaths, UnitLastCreated());
                }
                else if (auto5DF6523D_val == 4) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranRaven", 0, libCore_gv_cOMPUTER_TeamOrder, libPEB1_gv_creepCamps[lp_campIndex].lv_spawnPoints[lv_defenderIndex], null);
                }
                else {
                }
                if (((libGame_gv_scalingTicks + 30) < libCore_gv_dataScalingMaxScalingTicks)) {
                    libGame_gf_UpdateScalingForUnit(UnitLastCreated(), (libGame_gv_scalingTicks + 30), 0);
                }
                else {
                    libGame_gf_UpdateScalingForUnit(UnitLastCreated(), libCore_gv_dataScalingMaxScalingTicks, 0);
                }
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
            }

        }
        Wait(2.0, c_timeGame);
        while (!((UnitOrderCount(lv_mercMedivac) == 0))) {
            Wait(1.0, c_timeGame);
        }
        auto9736471E_g = UnitGroup("TerranGoliath", libCore_gv_cOMPUTER_TeamOrder, RegionCircle(libPEB1_gv_creepCamps[lp_campIndex].lv_pingPoint, 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9736471E_u = UnitGroupCount(auto9736471E_g, c_unitCountAll);
        for (;; auto9736471E_u -= 1) {
            auto9736471E_var = UnitGroupUnitFromEnd(auto9736471E_g, auto9736471E_u);
            if (auto9736471E_var == null) { break; }
            UnitIssueOrder(lv_mercMedivac, OrderTargetingUnit(AbilityCommand("MercMedivacTransport", 0), auto9736471E_var), c_orderQueueAddToEnd);
        }
        while (!((UnitGroupCount(UnitCargoGroup(lv_mercMedivac), c_unitCountAlive) == UnitGroupCount(lv_goliaths, c_unitCountAlive)))) {
            Wait(1.0, c_timeGame);
        }
        UnitIssueOrder(lv_mercMedivac, OrderTargetingPoint(AbilityCommand("move", 0), lv_rallyPoint), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_mercMedivac, Order(AbilityCommand("MercMedivacTransport", 1)), c_orderQueueAddToEnd);
        Wait(1.0, c_timeGame);
        auto4E91A6CE_g = UnitGroup("TerranRaven", libCore_gv_cOMPUTER_TeamOrder, RegionCircle(libPEB1_gv_creepCamps[lp_campIndex].lv_pingPoint, 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4E91A6CE_u = UnitGroupCount(auto4E91A6CE_g, c_unitCountAll);
        for (;; auto4E91A6CE_u -= 1) {
            auto4E91A6CE_var = UnitGroupUnitFromEnd(auto4E91A6CE_g, auto4E91A6CE_u);
            if (auto4E91A6CE_var == null) { break; }
            UnitBehaviorAdd(auto4E91A6CE_var, "MercMedivacEscort", lv_mercMedivac, 1);
            UnitIssueOrder(auto4E91A6CE_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lv_rallyPoint, 3.0, PointGetFacing(lv_rallyPoint))), c_orderQueueReplace);
            lv_mercRaven = UnitLastCreated();
        }
        while (!((UnitOrderCount(lv_mercMedivac) == 0))) {
            Wait(1.0, c_timeGame);
        }
        libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormObjective", lv_rallyPoint, ColorWithAlpha(0,0,0,0), 2.0);
        libNtve_gf_SendActorMessageToUnit(lv_mercMedivac, "Signal Depart");
        PathDestroy(libPEB1_gv_creepCamps[lp_campIndex].lv_path);
        UnitBehaviorRemove(lv_mercRaven, "MercMedivacEscort", 1);
        auto521C6480_g = UnitGroup("TerranGoliath", libCore_gv_cOMPUTER_TeamOrder, RegionCircle(lv_rallyPoint, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto521C6480_u = UnitGroupCount(auto521C6480_g, c_unitCountAll);
        for (;; auto521C6480_u -= 1) {
            auto521C6480_var = UnitGroupUnitFromEnd(auto521C6480_g, auto521C6480_u);
            if (auto521C6480_var == null) { break; }
            UnitCreateAIThinkTree(auto521C6480_var);
        }
        UnitCreateAIThinkTree(lv_mercRaven);
        Wait(2.25, c_timeGame);
        UnitRemove(lv_mercMedivac);
    }

    return true;
}

trigger auto_libPEB1_gf_ShowRespawnTextTagforCreepCamp_Trigger = null;
int auto_libPEB1_gf_ShowRespawnTextTagforCreepCamp_lp_campIndex;

void libPEB1_gf_ShowRespawnTextTagforCreepCamp (int lp_campIndex) {
    auto_libPEB1_gf_ShowRespawnTextTagforCreepCamp_lp_campIndex = lp_campIndex;

    if (auto_libPEB1_gf_ShowRespawnTextTagforCreepCamp_Trigger == null) {
        auto_libPEB1_gf_ShowRespawnTextTagforCreepCamp_Trigger = TriggerCreate("auto_libPEB1_gf_ShowRespawnTextTagforCreepCamp_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_ShowRespawnTextTagforCreepCamp_Trigger, false, false);
}

bool auto_libPEB1_gf_ShowRespawnTextTagforCreepCamp_TriggerFunc (bool testConds, bool runActions) {
    int lp_campIndex = auto_libPEB1_gf_ShowRespawnTextTagforCreepCamp_lp_campIndex;

    // Automatic Variable Declarations
    int auto025A31FC_val;
    int auto5317DCD6_val;

    // Implementation
    while (true) {
        if (((libGame_gv_gameOver == true) || (libNtve_gf_UnitGroupIsDead(libPEB1_gv_creepCamps[lp_campIndex].lv_defenderUnits) == false) || (TimerGetRemaining(libPEB1_gv_creepCamps[lp_campIndex].lv_respawnTimer) < 0.1))) {
            auto025A31FC_val = libPEB1_gv_creepCamps[lp_campIndex].lv_lane;
            if (auto025A31FC_val == libPEB1_ge_Lane_Bottom) {
                TextTagSetText(libPEB1_gv_creepCamps[lp_campIndex].lv_helperTextTag, StringExternal("Param/Value/lib_PEB1_9132F43D"));
            }
            else if (auto025A31FC_val == libPEB1_ge_Lane_Top) {
                TextTagSetText(libPEB1_gv_creepCamps[lp_campIndex].lv_helperTextTag, StringExternal("Param/Value/lib_PEB1_1FE6AB50"));
            }
            else {
            }
            return true;
        }
        else {
            auto5317DCD6_val = libPEB1_gv_creepCamps[lp_campIndex].lv_lane;
            if (auto5317DCD6_val == libPEB1_ge_Lane_Bottom) {
                TextExpressionSetToken("Param/Expression/lib_PEB1_84D206AC", "A", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(libPEB1_gv_creepCamps[lp_campIndex].lv_respawnTimer))));
                TextTagSetText(libPEB1_gv_creepCamps[lp_campIndex].lv_helperTextTag, TextExpressionAssemble("Param/Expression/lib_PEB1_84D206AC"));
            }
            else if (auto5317DCD6_val == libPEB1_ge_Lane_Top) {
                TextExpressionSetToken("Param/Expression/lib_PEB1_3BFB3325", "A", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(libPEB1_gv_creepCamps[lp_campIndex].lv_respawnTimer))));
                TextTagSetText(libPEB1_gv_creepCamps[lp_campIndex].lv_helperTextTag, TextExpressionAssemble("Param/Expression/lib_PEB1_3BFB3325"));
            }
            else {
            }
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

void libPEB1_gf_SpawnRandomPickup (point lp_pos) {
    // Automatic Variable Declarations
    int autoE6AC2ED0_val;

    // Implementation
    if ((libPEB1_gv_pickupSpawnCounter >= 2)) {
        libPEB1_gv_pickupSpawnCounter = 0;
        autoE6AC2ED0_val = RandomInt(1, 3);
        if (autoE6AC2ED0_val == 1) {
            libPVEM_gf_PvEPickupSpawnPickup("PVERejuvenationPulsePickup", lp_pos, false);
        }
        else if (autoE6AC2ED0_val == 2) {
            libPVEM_gf_PvEPickupSpawnPickup("PVETeamStimpackPickup", lp_pos, false);
        }
        else if (autoE6AC2ED0_val == 3) {
            libPVEM_gf_PvEPickupSpawnPickup("PVEPsiEmitterPickup", lp_pos, false);
        }
        else {
        }
    }
    else {
        libPEB1_gv_pickupSpawnCounter += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RegenGlobe", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_TeamOrder, lp_pos, null);
    }
}

void libPEB1_gf_Victory (region lp_cameraRevealRegion, point lp_cameraTarget) {
    // Automatic Variable Declarations
    // Implementation
    SoundStop(libPEB1_gv_coreChargingLoop, true);
    libPVEM_gf_PvEVictoryDefeat(true, lp_cameraRevealRegion, lp_cameraTarget);
    KickFromGame(PlayerGroupAll());
}

void libPEB1_gf_Defeat () {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libPVEM_gv_pvEDefeatDisabled == true)) {
        return ;
    }

    libGame_gv_gameOver = true;
    libPVEM_gv_pvEGameOverResult = c_gameOverDefeat;
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundStop(libPEB1_gv_coreChargingLoop, true);
    TimerPause(libGame_gv_gameTimer, true);
    TimerPause(libGame_gv_matchGameplayTimer, true);
    libPEB1_gv_defeatTime = FixedToInt(libUIUI_gf_HeroesGameTime());
    ActorSend(libPEB1_gv_coreChargingEffect, "SetOpacity 0.000000 0.500000");
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(libPEB1_gv_coreChargingEffect);
    UnitPauseAll(true);
    TriggerExecute(libPEB1_gt_EndofGameMessages, true, false);
    Wait(2.0, c_timeGame);
    libPEB1_gf_ShowHideHoldoutPanel(false);
    libPVEM_gf_PvEVictoryDefeat(false, null, null);
    KickFromGame(PlayerGroupAll());
}

trigger auto_libPEB1_gf_ZergHeroSlainQ_Trigger = null;
string auto_libPEB1_gf_ZergHeroSlainQ_lp_killedUnitType;

void libPEB1_gf_ZergHeroSlainQ (string lp_killedUnitType) {
    auto_libPEB1_gf_ZergHeroSlainQ_lp_killedUnitType = lp_killedUnitType;

    if (auto_libPEB1_gf_ZergHeroSlainQ_Trigger == null) {
        auto_libPEB1_gf_ZergHeroSlainQ_Trigger = TriggerCreate("auto_libPEB1_gf_ZergHeroSlainQ_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_ZergHeroSlainQ_Trigger, false, false);
}

bool auto_libPEB1_gf_ZergHeroSlainQ_TriggerFunc (bool testConds, bool runActions) {
    string lp_killedUnitType = auto_libPEB1_gf_ZergHeroSlainQ_lp_killedUnitType;

    // Automatic Variable Declarations
    string auto72F7C5EA_val;

    // Implementation
    TriggerQueueEnter();
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    auto72F7C5EA_val = lp_killedUnitType;
    if (auto72F7C5EA_val == "HeroButcher") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("DeadmanPVEVO_MiraHan_104"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto72F7C5EA_val == "HeroKerrigan") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("DeadmanPVEVO_MiraHan_105"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto72F7C5EA_val == "HeroDiablo") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("DeadmanPVEVO_MiraHan_106"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto72F7C5EA_val == "HeroZagara") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("DeadmanPVEVO_MiraHan_107"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto72F7C5EA_val == "HeroDehaka") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("DeadmanPVEVO_MiraHan_108"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto72F7C5EA_val == "HeroTychus") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("DeadmanPVEVO_MiraHan_109"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto72F7C5EA_val == "HeroMurky") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("DeadmanPVEVO_MiraHan_110"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto72F7C5EA_val == "HeroAnubarak") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("DeadmanPVEVO_MiraHan_111"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto72F7C5EA_val == "HeroAbathur") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("DeadmanPVEVO_MiraHan_113"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto72F7C5EA_val == "HeroStitches") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("DeadmanPVEVO_MiraHan_116"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto72F7C5EA_val == "HeroStukov") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("DeadmanPVEVO_MiraHan_114"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

void libPEB1_gf_HoldoutPanelInit () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/PVEBrawlHoldoutPanel");
    libPEB1_gv_pZEMapPanel = DialogControlLastCreated();
    DialogControlHookup(libPEB1_gv_pZEMapPanel, c_triggerControlTypePanel, "ObjectivePanel");
    libPEB1_gv_pZEObjectivePanel.lv_objectivePanel = DialogControlLastCreated();
    DialogControlHookup(libPEB1_gv_pZEObjectivePanel.lv_objectivePanel, c_triggerControlTypeImage, "TimerImageDoorTimer");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPEB1_gv_pZEObjectivePanel.lv_objectivePanel, c_triggerControlTypeImage, "TimerImage");
    libPEB1_gv_pZEObjectivePanel.lv_objectivePanelIcon = DialogControlLastCreated();
    DialogControlHookup(libPEB1_gv_pZEObjectivePanel.lv_objectivePanel, c_triggerControlTypeImage, "TimerImageComplete");
    libPEB1_gv_pZEObjectivePanel.lv_objectivePanelIconCompleted = DialogControlLastCreated();
    DialogControlHookup(libPEB1_gv_pZEObjectivePanel.lv_objectivePanel, c_triggerControlTypeLabel, "InfoLabel1");
    libPEB1_gv_pZEObjectivePanel.lv_objectivePanelInfoLabel1 = DialogControlLastCreated();
    DialogControlHookup(libPEB1_gv_pZEObjectivePanel.lv_objectivePanel, c_triggerControlTypeLabel, "InfoLabel2");
    libPEB1_gv_pZEObjectivePanel.lv_objectivePanelInfoLabel2 = DialogControlLastCreated();
    DialogControlHookup(libPEB1_gv_pZEObjectivePanel.lv_objectivePanel, c_triggerControlTypeLabel, "InfoLabel3");
    libPEB1_gv_pZEObjectivePanel.lv_objectivePanelInfoLabel3 = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPEB1_gv_pZEObjectivePanel.lv_objectivePanel, c_triggerControlTypeLabel, "TimerLabel1");
    libPEB1_gv_pZEObjectivePanel.lv_objectivePanelTimerLabel1 = DialogControlLastCreated();
    DialogControlHookup(libPEB1_gv_pZEObjectivePanel.lv_objectivePanel, c_triggerControlTypeLabel, "TimerLabel2");
    libPEB1_gv_pZEObjectivePanel.lv_objectivePanelTimerLabel2 = DialogControlLastCreated();
    DialogControlHookup(libPEB1_gv_pZEObjectivePanel.lv_objectivePanel, c_triggerControlTypePanel, "MissionSuccessfulFrame");
    libPEB1_gv_pZEObjectivePanel.lv_objectivePanelMissionSuccessfulFrame = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPEB1_gv_pZEObjectivePanel.lv_objectivePanel, c_triggerControlTypeLabel, "MissionSuccessfulLabel");
    libPEB1_gv_pZEObjectivePanel.lv_objectivePanelMissionSuccessfulLabel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
}

trigger auto_libPEB1_gf_DisplayObjectivePanel_Trigger = null;
text auto_libPEB1_gf_DisplayObjectivePanel_lp_text1;
text auto_libPEB1_gf_DisplayObjectivePanel_lp_countText;
text auto_libPEB1_gf_DisplayObjectivePanel_lp_text2;
timer auto_libPEB1_gf_DisplayObjectivePanel_lp_timerPanelTimer;

void libPEB1_gf_DisplayObjectivePanel (text lp_text1, text lp_countText, text lp_text2, timer lp_timerPanelTimer) {
    auto_libPEB1_gf_DisplayObjectivePanel_lp_text1 = lp_text1;
    auto_libPEB1_gf_DisplayObjectivePanel_lp_countText = lp_countText;
    auto_libPEB1_gf_DisplayObjectivePanel_lp_text2 = lp_text2;
    auto_libPEB1_gf_DisplayObjectivePanel_lp_timerPanelTimer = lp_timerPanelTimer;

    if (auto_libPEB1_gf_DisplayObjectivePanel_Trigger == null) {
        auto_libPEB1_gf_DisplayObjectivePanel_Trigger = TriggerCreate("auto_libPEB1_gf_DisplayObjectivePanel_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_DisplayObjectivePanel_Trigger, false, false);
}

bool auto_libPEB1_gf_DisplayObjectivePanel_TriggerFunc (bool testConds, bool runActions) {
    text lp_text1 = auto_libPEB1_gf_DisplayObjectivePanel_lp_text1;
    text lp_countText = auto_libPEB1_gf_DisplayObjectivePanel_lp_countText;
    text lp_text2 = auto_libPEB1_gf_DisplayObjectivePanel_lp_text2;
    timer lp_timerPanelTimer = auto_libPEB1_gf_DisplayObjectivePanel_lp_timerPanelTimer;

    // Automatic Variable Declarations
    // Implementation
    libPEB1_gv_pZEObjectivePanel.lv_state = libPEB1_ge_PZEObjectivePanelState_OnTimer;
    DialogControlSetVisible(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelIconCompleted, PlayerGroupAll(), false);
    DialogControlSetVisible(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelInfoLabel3, PlayerGroupAll(), false);
    DialogControlSetVisible(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelInfoLabel2, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelInfoLabel1, lp_text1, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelTimerLabel1, lp_countText, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelInfoLabel2, lp_text2, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelInfoLabel2, "Storm_CoopZerg_ObjectiveLabel_BottomLeft", PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelTimerLabel2, "Storm_CoopZerg_ObjectiveLabel_BottomLeft", PlayerGroupAll());
    DialogControlSetVisible(libPEB1_gv_pZEMapPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(libPEB1_gv_pZEObjectivePanel.lv_objectivePanel, PlayerGroupAll(), true);
    if ((lp_timerPanelTimer != null)) {
        DialogControlSetVisible(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelTimerLabel2, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelTimerLabel2, PlayerGroupAll(), false);
        return true;
    }
    while (true) {
        libNtve_gf_SetDialogItemText(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelTimerLabel2, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timerPanelTimer))), PlayerGroupAll());
        Wait(0.5, c_timeGame);
        if ((libPEB1_gv_pZEObjectivePanel.lv_state != libPEB1_ge_PZEObjectivePanelState_OnTimer)) {
            return true;
        }

        if ((TimerGetRemaining(lp_timerPanelTimer) <= 0.0)) {
            break;
        }

    }
    Wait(0.5, c_timeGame);
    return true;
}

void libPEB1_gf_SetObjectivePanelTimerText1 (text lp_timer) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelTimerLabel1, lp_timer, PlayerGroupAll());
}

void libPEB1_gf_SetObjectivePanelTimerText2 (text lp_timer) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelTimerLabel2, lp_timer, PlayerGroupAll());
}

void libPEB1_gf_SetObjectivePanelComplete (text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPEB1_gv_pZEObjectivePanel.lv_objectivePanel == c_invalidDialogControlId)) {
        return ;
    }

    if ((libPEB1_gv_pZEObjectivePanel.lv_state != libPEB1_ge_PZEObjectivePanelState_Complete)) {
        libPEB1_gv_pZEObjectivePanel.lv_state = libPEB1_ge_PZEObjectivePanelState_Complete;
        DialogControlSendAnimationEvent(libPEB1_gv_pZEObjectivePanel.lv_objectivePanel, PlayerGroupAll(), "BossDefeated");
        Wait(3.0, c_timeGame);
        DialogControlSendAnimationEvent(libPEB1_gv_pZEObjectivePanel.lv_objectivePanel, PlayerGroupAll(), "Hide");
    }

}

trigger auto_libPEB1_gf_ShowMissionCompletePanel_Trigger = null;
text auto_libPEB1_gf_ShowMissionCompletePanel_lp_text;

void libPEB1_gf_ShowMissionCompletePanel (text lp_text) {
    auto_libPEB1_gf_ShowMissionCompletePanel_lp_text = lp_text;

    if (auto_libPEB1_gf_ShowMissionCompletePanel_Trigger == null) {
        auto_libPEB1_gf_ShowMissionCompletePanel_Trigger = TriggerCreate("auto_libPEB1_gf_ShowMissionCompletePanel_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_ShowMissionCompletePanel_Trigger, false, false);
}

bool auto_libPEB1_gf_ShowMissionCompletePanel_TriggerFunc (bool testConds, bool runActions) {
    text lp_text = auto_libPEB1_gf_ShowMissionCompletePanel_lp_text;

    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelInfoLabel1, PlayerGroupAll(), false);
    DialogControlSetVisible(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelInfoLabel2, PlayerGroupAll(), false);
    DialogControlSetVisible(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelTimerLabel1, PlayerGroupAll(), false);
    DialogControlSetVisible(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelTimerLabel2, PlayerGroupAll(), false);
    DialogControlSetVisible(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelMissionSuccessfulFrame, PlayerGroupAll(), true);
    DialogControlSetVisible(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelMissionSuccessfulLabel, PlayerGroupAll(), true);
    Wait(5.0, c_timeGame);
    DialogControlSendAnimationEvent(libPEB1_gv_pZEObjectivePanel.lv_objectivePanel, PlayerGroupAll(), "Hide");
    return true;
}

void libPEB1_gf_ShowHideObjectivePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPEB1_gv_pZEObjectivePanel.lv_objectivePanel == c_invalidDialogControlId)) {
        return ;
    }

    DialogControlSetVisible(libPEB1_gv_pZEObjectivePanel.lv_objectivePanel, PlayerGroupAll(), lp_showHide);
}

trigger auto_libPEB1_gf_DisplayHoldoutPanel_Trigger = null;
text auto_libPEB1_gf_DisplayHoldoutPanel_lp_text;
timer auto_libPEB1_gf_DisplayHoldoutPanel_lp_timerPanelTimer;

void libPEB1_gf_DisplayHoldoutPanel (text lp_text, timer lp_timerPanelTimer) {
    auto_libPEB1_gf_DisplayHoldoutPanel_lp_text = lp_text;
    auto_libPEB1_gf_DisplayHoldoutPanel_lp_timerPanelTimer = lp_timerPanelTimer;

    if (auto_libPEB1_gf_DisplayHoldoutPanel_Trigger == null) {
        auto_libPEB1_gf_DisplayHoldoutPanel_Trigger = TriggerCreate("auto_libPEB1_gf_DisplayHoldoutPanel_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_DisplayHoldoutPanel_Trigger, false, false);
}

bool auto_libPEB1_gf_DisplayHoldoutPanel_TriggerFunc (bool testConds, bool runActions) {
    text lp_text = auto_libPEB1_gf_DisplayHoldoutPanel_lp_text;
    timer lp_timerPanelTimer = auto_libPEB1_gf_DisplayHoldoutPanel_lp_timerPanelTimer;

    // Automatic Variable Declarations
    // Implementation
    if ((libPEB1_gv_pZEMapPanel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/PVEBrawlHoldoutPanel");
        libPEB1_gv_pZEMapPanel = DialogControlLastCreated();
    }

    if ((libPEB1_gv_pZEHoldoutPanel.lv_timerPanel == c_invalidDialogControlId)) {
        DialogControlHookup(libPEB1_gv_pZEMapPanel, c_triggerControlTypePanel, "HoldoutTimerPanel");
        libPEB1_gv_pZEHoldoutPanel.lv_timerPanel = DialogControlLastCreated();
        DialogControlHookup(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, c_triggerControlTypeImage, "TimerImageDoorTimer");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, c_triggerControlTypeImage, "TimerImageDoorOpen");
        libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconArchangelDefeated = DialogControlLastCreated();
        DialogControlHookup(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, c_triggerControlTypeImage, "TimerImageShelter");
        libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconDefense = DialogControlLastCreated();
        DialogControlHookup(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, c_triggerControlTypeImage, "TimerImageKillZerg");
        libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconZerg = DialogControlLastCreated();
        DialogControlHookup(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, c_triggerControlTypeImage, "TimerImageCheckpoint");
        libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconArchangel = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\storm_ui_ingame_abilitybutton_nuclearstrike.dds", PlayerGroupAll());
        DialogControlHookup(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, c_triggerControlTypeLabel, "InfoLabel");
        libPEB1_gv_pZEHoldoutPanel.lv_timerPanelInfoLabel = DialogControlLastCreated();
        DialogControlHookup(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, c_triggerControlTypeLabel, "TimerLabel");
        libPEB1_gv_pZEHoldoutPanel.lv_timerPanelTimerLabel = DialogControlLastCreated();
    }
    else {
        DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, PlayerGroupAll(), false);
    }
    DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconArchangel, PlayerGroupAll(), false);
    DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconArchangelDefeated, PlayerGroupAll(), false);
    DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconDefense, PlayerGroupAll(), false);
    DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconZerg, PlayerGroupAll(), false);
    libPEB1_gv_pZEHoldoutPanel.lv_state = libPEB1_ge_PZEHoldoutPanelState_OnTimer;
    libNtve_gf_SetDialogItemText(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelInfoLabel, lp_text, PlayerGroupAll());
    DialogControlSetVisible(libPEB1_gv_pZEMapPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, PlayerGroupAll(), true);
    if ((lp_timerPanelTimer != null)) {
        DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelTimerLabel, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelTimerLabel, PlayerGroupAll(), false);
        return true;
    }
    while (true) {
        libNtve_gf_SetDialogItemText(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timerPanelTimer))), PlayerGroupAll());
        Wait(0.5, c_timeGame);
        if ((libPEB1_gv_pZEHoldoutPanel.lv_state != libPEB1_ge_PZEHoldoutPanelState_OnTimer)) {
            return true;
        }

        if ((TimerGetRemaining(lp_timerPanelTimer) <= 0.0)) {
            break;
        }

    }
    Wait(0.5, c_timeGame);
    return true;
}

void libPEB1_gf_SetHoldoutPanelTimerText (text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelTimerLabel, lp_text, PlayerGroupAll());
    DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelTimerLabel, PlayerGroupAll(), true);
}

void libPEB1_gf_SetHoldoutPanelComplete () {
    // Automatic Variable Declarations
    // Implementation
    if ((libPEB1_gv_pZEHoldoutPanel.lv_timerPanel == c_invalidDialogControlId)) {
        return ;
    }

    if ((libPEB1_gv_pZEHoldoutPanel.lv_state != libPEB1_ge_PZEHoldoutPanelState_Complete)) {
        libPEB1_gv_pZEHoldoutPanel.lv_state = libPEB1_ge_PZEHoldoutPanelState_Complete;
        DialogControlSendAnimationEvent(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, PlayerGroupAll(), "ZergDefeated");
        Wait(2.0, c_timeGame);
        DialogControlSendAnimationEvent(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, PlayerGroupAll(), "Hide");
        Wait(1.125, c_timeGame);
        DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, PlayerGroupAll(), false);
    }

}

void libPEB1_gf_ShowHideHoldoutPanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPEB1_gv_pZEHoldoutPanel.lv_timerPanel == c_invalidDialogControlId)) {
        return ;
    }

    DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, PlayerGroupAll(), lp_showHide);
}

void libPEB1_gf_BaseHealthBarInit () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlCreateInPanelFromTemplate(libPVEU_gv_pvEUITopBar.lv_mainPanel, c_triggerControlTypePanel, "DeadmansHoldout/BaseHealthFrameTemplate");
    libPEB1_gv_baseHealthBar.lv_baseHealthPanel = DialogControlLastCreated();
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, libPVEU_gv_pvEUITopBar.lv_topBarBackingImage, c_anchorTopRight, -41, -1);
    DialogControlHookup(libPEB1_gv_baseHealthBar.lv_baseHealthPanel, c_triggerControlTypeLabel, "HPLabelCore");
    libPEB1_gv_baseHealthBar.lv_baseCoreLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEB1_E4F81270"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_CoopBrawlTopBar_StructureLabel", PlayerGroupAll());
    DialogControlHookup(libPEB1_gv_baseHealthBar.lv_baseHealthPanel, c_triggerControlTypeImage, "HPBarCore");
    libPEB1_gv_baseHealthBar.lv_baseCoreBar = DialogControlLastCreated();
    DialogControlHookup(libPEB1_gv_baseHealthBar.lv_baseHealthPanel, c_triggerControlTypeImage, "HPBarCoreBg");
    libPEB1_gv_baseHealthBar.lv_baseCoreBarBg = DialogControlLastCreated();
    DialogControlHookup(libPEB1_gv_baseHealthBar.lv_baseHealthPanel, c_triggerControlTypeLabel, "HPLabelKeep");
    libPEB1_gv_baseHealthBar.lv_baseKeepLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEB1_0B4CAB6A"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_CoopBrawlTopBar_StructureLabel", PlayerGroupAll());
    DialogControlHookup(libPEB1_gv_baseHealthBar.lv_baseHealthPanel, c_triggerControlTypeImage, "HPBarKeep");
    libPEB1_gv_baseHealthBar.lv_baseKeepBar = DialogControlLastCreated();
    DialogControlHookup(libPEB1_gv_baseHealthBar.lv_baseHealthPanel, c_triggerControlTypeImage, "HPBarKeepBg");
    libPEB1_gv_baseHealthBar.lv_baseKeepBarBg = DialogControlLastCreated();
    DialogControlHookup(libPEB1_gv_baseHealthBar.lv_baseHealthPanel, c_triggerControlTypeLabel, "HPLabelBunker");
    libPEB1_gv_baseHealthBar.lv_baseBunkersLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEB1_DBE93584"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_CoopBrawlTopBar_StructureLabel", PlayerGroupAll());
    DialogControlHookup(libPEB1_gv_baseHealthBar.lv_baseHealthPanel, c_triggerControlTypeImage, "HPBarBunker");
    libPEB1_gv_baseHealthBar.lv_baseBunkersBar = DialogControlLastCreated();
    DialogControlHookup(libPEB1_gv_baseHealthBar.lv_baseHealthPanel, c_triggerControlTypeImage, "HPBarBunkerBg");
    libPEB1_gv_baseHealthBar.lv_baseBunkersBarBg = DialogControlLastCreated();
    libUIUI_gf_UIPartyFrameShowHideLevelInfoPanelforPlayerGroup(1, false, PlayerGroupAll());
    DialogControlSetVisible(libPVEU_gv_pvEUITopBar.lv_teamLevelLabelPanel, PlayerGroupAll(), false);
    DialogControlCreateInPanel(libPVEU_gv_pvEUITopBar.lv_mainPanel, c_triggerControlTypeLabel);
    libPEB1_gv_baseHealthBar.lv_baseHealthLabel = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 50);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEB1_CC68FD25"), PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, libPVEU_gv_pvEUITopBar.lv_mainPanel, c_anchorTop, 0, 5);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_CoopBrawlTopBar_BaseTitle", PlayerGroupAll());
    DialogControlCreateInPanel(libPVEU_gv_pvEUITopBar.lv_mainPanel, c_triggerControlTypeLabel);
    libPEB1_gv_baseHealthBar.lv_basePercentLabel = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 50);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEB1_BEB7BAEB"), PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, libPEB1_gv_baseHealthBar.lv_baseHealthLabel, c_anchorBottom, 0, -35);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_CoopBrawlTopBar_BasePercent", PlayerGroupAll());
    DialogControlSetSize(libPEB1_gv_baseHealthBar.lv_baseCoreBarBg, PlayerGroupAll(), 174, 14);
    DialogControlSetSize(libPEB1_gv_baseHealthBar.lv_baseKeepBarBg, PlayerGroupAll(), 174, 14);
    DialogControlSetSize(libPEB1_gv_baseHealthBar.lv_baseBunkersBarBg, PlayerGroupAll(), 174, 14);
}

trigger auto_libPEB1_gf_BaseHealthBarShrinkDelay_Trigger = null;
int auto_libPEB1_gf_BaseHealthBarShrinkDelay_lp_bar;
int auto_libPEB1_gf_BaseHealthBarShrinkDelay_lp_newWidth;
int auto_libPEB1_gf_BaseHealthBarShrinkDelay_lp_height;

void libPEB1_gf_BaseHealthBarShrinkDelay (int lp_bar, int lp_newWidth, int lp_height) {
    auto_libPEB1_gf_BaseHealthBarShrinkDelay_lp_bar = lp_bar;
    auto_libPEB1_gf_BaseHealthBarShrinkDelay_lp_newWidth = lp_newWidth;
    auto_libPEB1_gf_BaseHealthBarShrinkDelay_lp_height = lp_height;

    if (auto_libPEB1_gf_BaseHealthBarShrinkDelay_Trigger == null) {
        auto_libPEB1_gf_BaseHealthBarShrinkDelay_Trigger = TriggerCreate("auto_libPEB1_gf_BaseHealthBarShrinkDelay_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_BaseHealthBarShrinkDelay_Trigger, false, false);
}

bool auto_libPEB1_gf_BaseHealthBarShrinkDelay_TriggerFunc (bool testConds, bool runActions) {
    int lp_bar = auto_libPEB1_gf_BaseHealthBarShrinkDelay_lp_bar;
    int lp_newWidth = auto_libPEB1_gf_BaseHealthBarShrinkDelay_lp_newWidth;
    int lp_height = auto_libPEB1_gf_BaseHealthBarShrinkDelay_lp_height;

    // Variable Declarations
    int lv_oldWidth;
    int lv_nextWidth;
    int lv_itIndex;
    fixed lv_itDelta;
    int lv_localMarker;
    int lv_barIndex;

    // Automatic Variable Declarations
    int auto3601B41A_val;
    const int autoEB16E357_ae = 23;
    const int autoEB16E357_ai = 1;

    // Variable Initialization

    // Implementation
    Wait(2.0, c_timeGame);
    auto3601B41A_val = lp_bar;
    if (auto3601B41A_val == libPEB1_gv_baseHealthBar.lv_baseCoreBarBg) {
        lv_barIndex = 1;
    }
    else if (auto3601B41A_val == libPEB1_gv_baseHealthBar.lv_baseKeepBarBg) {
        lv_barIndex = 2;
    }
    else if (auto3601B41A_val == libPEB1_gv_baseHealthBar.lv_baseBunkersBarBg) {
        lv_barIndex = 3;
    }
    else {
    }
    libPEB1_gv_baseHealthShrinkCurrentMarker[lv_barIndex] += 1;
    lv_localMarker = libPEB1_gv_baseHealthShrinkCurrentMarker[lv_barIndex];
    lv_oldWidth = DialogControlGetWidth(lp_bar, 1);
    lv_itDelta = ((lp_newWidth - lv_oldWidth) / 24.0);
    lv_itIndex = 1;
    for ( ; ( (autoEB16E357_ai >= 0 && lv_itIndex <= autoEB16E357_ae) || (autoEB16E357_ai < 0 && lv_itIndex >= autoEB16E357_ae) ) ; lv_itIndex += autoEB16E357_ai ) {
        lv_nextWidth = RoundI((lv_oldWidth + (lv_itDelta * lv_itIndex)));
        DialogControlSetSize(lp_bar, PlayerGroupAll(), lv_nextWidth, lp_height);
        Wait(0.0625, c_timeGame);
        if ((lv_localMarker != libPEB1_gv_baseHealthShrinkCurrentMarker[lv_barIndex])) {
            return true;
        }

    }
    DialogControlSetSize(lp_bar, PlayerGroupAll(), lp_newWidth, lp_height);
    if ((lp_newWidth <= 0)) {
        DialogControlSetVisible(lp_bar, PlayerGroupAll(), false);
    }

    return true;
}

trigger auto_libPEB1_gf_BaseHealthBarFlashLabel_Trigger = null;
int auto_libPEB1_gf_BaseHealthBarFlashLabel_lp_label;

void libPEB1_gf_BaseHealthBarFlashLabel (int lp_label) {
    auto_libPEB1_gf_BaseHealthBarFlashLabel_lp_label = lp_label;

    if (auto_libPEB1_gf_BaseHealthBarFlashLabel_Trigger == null) {
        auto_libPEB1_gf_BaseHealthBarFlashLabel_Trigger = TriggerCreate("auto_libPEB1_gf_BaseHealthBarFlashLabel_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_BaseHealthBarFlashLabel_Trigger, false, false);
}

bool auto_libPEB1_gf_BaseHealthBarFlashLabel_TriggerFunc (bool testConds, bool runActions) {
    int lp_label = auto_libPEB1_gf_BaseHealthBarFlashLabel_lp_label;

    // Automatic Variable Declarations
    int auto640BB44B_val;
    int auto08C44C65_val;
    int auto8A0D882E_val;

    // Implementation
    auto640BB44B_val = lp_label;
    if (auto640BB44B_val == libPEB1_gv_baseHealthBar.lv_baseCoreLabel) {
        if ((libPEB1_gv_baseHealthBar.lv_baseCoreFlashing == true)) {
            return true;
        }

        libPEB1_gv_baseHealthBar.lv_baseCoreFlashing = true;
    }
    else if (auto640BB44B_val == libPEB1_gv_baseHealthBar.lv_baseKeepLabel) {
        if ((libPEB1_gv_baseHealthBar.lv_baseKeepFlashing == true)) {
            return true;
        }

        libPEB1_gv_baseHealthBar.lv_baseKeepFlashing = true;
    }
    else if (auto640BB44B_val == libPEB1_gv_baseHealthBar.lv_baseBunkersLabel) {
        if ((libPEB1_gv_baseHealthBar.lv_baseBunkersFlashing == true)) {
            return true;
        }

        libPEB1_gv_baseHealthBar.lv_baseBunkersFlashing = true;
    }
    else {
    }
    libNtve_gf_SetDialogItemStyle(lp_label, "Storm_CoopBrawlTopBar_StructureLabel_Flash", PlayerGroupAll());
    Wait(0.4, c_timeGame);
    libNtve_gf_SetDialogItemStyle(lp_label, "Storm_CoopBrawlTopBar_StructureLabel", PlayerGroupAll());
    Wait(0.4, c_timeGame);
    libNtve_gf_SetDialogItemStyle(lp_label, "Storm_CoopBrawlTopBar_StructureLabel_Flash", PlayerGroupAll());
    Wait(0.4, c_timeGame);
    libNtve_gf_SetDialogItemStyle(lp_label, "Storm_CoopBrawlTopBar_StructureLabel", PlayerGroupAll());
    auto08C44C65_val = lp_label;
    if (auto08C44C65_val == libPEB1_gv_baseHealthBar.lv_baseCoreLabel) {
        if ((libNtve_gf_UnitGroupIsDead(libPEB1_gv_baseStructuresCore) == true)) {
            libNtve_gf_SetDialogItemStyle(lp_label, "Storm_CoopBrawlTopBar_StructureLabel_Disabled", PlayerGroupAll());
        }

    }
    else if (auto08C44C65_val == libPEB1_gv_baseHealthBar.lv_baseKeepLabel) {
        if ((libNtve_gf_UnitGroupIsDead(libPEB1_gv_baseStructuresKeep) == true)) {
            libNtve_gf_SetDialogItemStyle(lp_label, "Storm_CoopBrawlTopBar_StructureLabel_Disabled", PlayerGroupAll());
        }

    }
    else if (auto08C44C65_val == libPEB1_gv_baseHealthBar.lv_baseBunkersLabel) {
        if ((libNtve_gf_UnitGroupIsDead(libPEB1_gv_baseStructuresBunkers) == true)) {
            libNtve_gf_SetDialogItemStyle(lp_label, "Storm_CoopBrawlTopBar_StructureLabel_Disabled", PlayerGroupAll());
        }

    }
    else {
    }
    Wait(0.4, c_timeGame);
    auto8A0D882E_val = lp_label;
    if (auto8A0D882E_val == libPEB1_gv_baseHealthBar.lv_baseCoreLabel) {
        libPEB1_gv_baseHealthBar.lv_baseCoreFlashing = false;
    }
    else if (auto8A0D882E_val == libPEB1_gv_baseHealthBar.lv_baseKeepLabel) {
        libPEB1_gv_baseHealthBar.lv_baseKeepFlashing = false;
    }
    else if (auto8A0D882E_val == libPEB1_gv_baseHealthBar.lv_baseBunkersLabel) {
        libPEB1_gv_baseHealthBar.lv_baseBunkersFlashing = false;
    }
    else {
    }
    return true;
}

fixed libPEB1_gf_UnitGroupTotalHealth (unitgroup lp_unitGroup, bool lp_current) {
    // Variable Declarations
    unit lv_itUnit;
    fixed lv_health;

    // Automatic Variable Declarations
    unitgroup auto6E3E16A8_g;
    int auto6E3E16A8_u;

    // Variable Initialization

    // Implementation
    auto6E3E16A8_g = lp_unitGroup;
    auto6E3E16A8_u = UnitGroupCount(auto6E3E16A8_g, c_unitCountAll);
    for (;; auto6E3E16A8_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto6E3E16A8_g, auto6E3E16A8_u);
        if (lv_itUnit == null) { break; }
        if ((lp_current == true)) {
            lv_health += UnitGetPropertyFixed(lv_itUnit, c_unitPropLife, c_unitPropCurrent);
        }
        else {
            lv_health += UnitGetPropertyFixed(lv_itUnit, c_unitPropLifeMax, c_unitPropCurrent);
        }
    }
    return lv_health;
}

void libPEB1_gf_ChangeZergMinionAIToAutoSeekEnemy (unit lp_zergMinion) {
    // Automatic Variable Declarations
    // Implementation
    UnitCopyAIThinkTree(libPEB1_gv_aIHelper_ZergMinionSeekingEnemy, lp_zergMinion);
}

void libPEB1_gf_ReinitializeHero (int lp_player, int lp_team) {
    // Variable Declarations
    int lv_numberOfPlayersOnTeam;
    int lv_slot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libGame_gv_players[lp_player].lv_faction = lp_team;
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, lp_player);
    lv_numberOfPlayersOnTeam = PlayerGroupCount(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup);
    lv_slot = (lv_numberOfPlayersOnTeam - 1);
    libGame_gv_players[lp_player].lv_spawnPoint = PlayerStartLocation(lv_slot);
    libGame_gv_players[lp_player].lv_rosterSlot = lv_slot;
    libGame_gv_players[lp_player].lv_teamPlayerSlot = lv_numberOfPlayersOnTeam;
    libGame_gv_players[lp_player].lv_name = PlayerName(lp_player);
    PlayerSetState(lp_player, c_playerStateDisplayGameResult, false);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include MM Deadmans Holdout
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_IncludeMMDeadmansHoldout_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_IncludeMMDeadmansHoldout_Init () {
    libPEB1_gt_IncludeMMDeadmansHoldout = TriggerCreate("libPEB1_gt_IncludeMMDeadmansHoldout_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deadmans Holdout Init
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DeadmansHoldoutInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int autoB74ED20C_ae = libCore_gv_bALMaxPlayers;
    const int autoB74ED20C_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPVEM_gv_pvESetting.lv_hearthDisabled = true;
    libPVEM_gv_pvESetting.lv_mountDisabled = false;
    TriggerExecute(libPEB1_gt_InitPlayers, true, false);
    TriggerExecute(libPEB1_gt_InitDifficultyHooks, true, false);
    TriggerExecute(libPEB1_gt_InitZergHeroes, true, false);
    TriggerExecute(libPEB1_gt_InitZergAI, true, false);
    TriggerExecute(libPEB1_gt_PVEMinionWaveCompositionData, true, false);
    TriggerExecute(libPEB1_gt_InitPickups, true, false);
    TriggerExecute(libPEB1_gt_InitAdjustCaptureMacGuffin, true, false);
    TriggerExecute(libPEB1_gt_TabScreenInit, true, false);
    TriggerEnable(libGame_gt_TowerCoreHasTakenDamage, false);
    libPEB1_gf_HoldoutPanelInit();
    libPEB1_gf_BaseHealthBarInit();
    TriggerExecute(libPEB1_gt_ExplorationRegions, true, false);
    libAIAI_gf_TowerTurnTowerSystemOnOff(true);
    libGame_gv_heroDeath_RespawnMounted = true;
    lv_itPlayer = 1;
    for ( ; ( (autoB74ED20C_ai >= 0 && lv_itPlayer <= autoB74ED20C_ae) || (autoB74ED20C_ai < 0 && lv_itPlayer >= autoB74ED20C_ae) ) ; lv_itPlayer += autoB74ED20C_ai ) {
        libGame_gv_players[lv_itPlayer].lv_disableMount = false;
        libGame_gv_players[lv_itPlayer].lv_remountHeroAfterTeleport = true;
    }
    libPVEU_gv_pvEUIGameOverScreenCallback = libPEB1_gt_GameOverScreenCallback;
    CatalogFieldValueSet(c_gameCatalogBehavior, "MedicMedivacDropshipInitialDescent", "Duration", libCore_gv_cOMPUTER_TeamOrder, FixedToString(1.0, 0));
    CatalogFieldValueSet(c_gameCatalogBehavior, "MedicMedivacDropshipAcceptingPassengers", "Duration", libCore_gv_cOMPUTER_TeamOrder, FixedToString(30.0, 0));
    CatalogFieldValueSet(c_gameCatalogBehavior, "MedicMedivacDropshipDepartureDelay", "Duration", libCore_gv_cOMPUTER_TeamOrder, FixedToString(30.0, 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DeadmansHoldoutInit_Init () {
    libPEB1_gt_DeadmansHoldoutInit = TriggerCreate("libPEB1_gt_DeadmansHoldoutInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Difficulty Hooks
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_InitDifficultyHooks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_minionHP;
    fixed lv_minionDmg;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libPEB1_gv_killValueNeededToSpawnGlobe = libPVEM_gf_PvEDifficultyValueInt(20, 25);
    libPEB1_gv_nydusWormSpawnInterval = libPVEM_gf_PvEDifficultyValueReal(15.0, 10.0);
    libPEB1_gv_zergHeroRespawnTime = 30.0;
    libPEB1_gv_murkyRespawnDelay = libPVEM_gf_PvEDifficultyValueReal(15.0, 10.0);
    libPEB1_gv_creepCampRespawnTime = 180.0;
    libPEB1_gv_basicWaveEscalationCount = 8;
    libPEB1_gv_basicWaveDelay = 30.0;
    libPEB1_gv_hardMinionDamageBonus = 1.4;
    libPEB1_gv_hardHeroHPBonus = 1.4;
    if ((libPVEM_gf_PvEGameDifficulty() == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Heroic)) {
        libPEB1_gv_zergHeroBalanceBehavior[2] = "ZergHeroDamageModifierHard";
    }
    else {
        libPEB1_gv_zergHeroBalanceBehavior[1] = "ZergHeroDamageModifierNormal";
    }
    TriggerExecute(libPEB1_gt_ZergMinionCatalogChanges, true, false);
    TriggerExecute(libPEB1_gt_ArchangelBalanceInit, true, false);
    libPVEM_gv_pvEHeroCatalogChangeCallback = libPEB1_gt_ZergHeroCatalogChangesCallback;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_InitDifficultyHooks_Init () {
    libPEB1_gt_InitDifficultyHooks = TriggerCreate("libPEB1_gt_InitDifficultyHooks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deadmans Stand Curate Hero List Callback
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DeadmansStandCurateHeroListCallback_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_row;
    int lv_col;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_row = (libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Warrior);
    lv_col = 0;
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Artanis";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Arthas";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Firebat";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Garrosh";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Rexxar";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Barbarian";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Varian";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Zarya";
    lv_row = (libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Support);
    lv_col = 0;
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "FaerieDragon";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "LiLi";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Medic";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Lucio";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Rehgar";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Tassadar";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Uther";
    lv_row = (libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Specialist);
    lv_col = 0;
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Azmodan";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Tinker";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "SgtHammer";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "WitchDoctor";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Probius";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Necromancer";
    lv_row = (libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Assassin1);
    lv_col = 0;
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Falstad";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Greymane";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Guldan";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Illidan";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Jaina";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Junkrat";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Kaelthas";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "KelThuzad";
    lv_row = (libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Assassin2);
    lv_col = 0;
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Raynor";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Thrall";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "DemonHunter";
    lv_col += 1;
    libPVEU_gv_pvEUICurateHeroSelections[lv_row][lv_col] = "Zuljin";
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DeadmansStandCurateHeroListCallback_Init () {
    libPEB1_gt_DeadmansStandCurateHeroListCallback = TriggerCreate("libPEB1_gt_DeadmansStandCurateHeroListCallback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PVE Minion Wave Composition Data
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PVEMinionWaveCompositionData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_composition;
    int lv_group;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_dataMinionData[1].lv_unitType = "FootmanMinion";
    libCore_gv_dataMinionData[2].lv_unitType = "WizardMinion";
    libCore_gv_dataMinionData[3].lv_unitType = "RangedMinion";
    libPEB1_gv_pVEMinionWaveMaxUnitTypePerLane_C[libCore_ge_MinionTypes_Footmen] = 5;
    libPEB1_gv_pVEMinionWaveMaxUnitTypePerLane_C[libCore_ge_MinionTypes_Wizard] = 3;
    libPEB1_gv_pVEMinionWaveMaxUnitTypePerLane_C[libCore_ge_MinionTypes_Ranged] = 5;
    lv_composition = 1;
    lv_group = 0;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_name = StringExternal("Param/Value/lib_PEB1_100DE7D4");
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_enabled = true;
    lv_group += 1;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionType[lv_group] = libCore_ge_MinionTypes_Footmen;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionCount[lv_group] = 3;
    lv_group += 1;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionType[lv_group] = libCore_ge_MinionTypes_Wizard;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionCount[lv_group] = 1;
    lv_group += 1;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionType[lv_group] = libCore_ge_MinionTypes_Ranged;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionCount[lv_group] = 3;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_numberOfGroups = lv_group;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PVEMinionWaveCompositionData_Init () {
    libPEB1_gt_PVEMinionWaveCompositionData = TriggerCreate("libPEB1_gt_PVEMinionWaveCompositionData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PVE Minion Wave Destroy Think Tree
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PVEMinionWaveDestroyThinkTree_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitDestroyAIThinkTree(EventUnit());
    libPEB1_gf_PVEMinionWaveIssueMinionRally();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PVEMinionWaveDestroyThinkTree_Init () {
    libPEB1_gt_PVEMinionWaveDestroyThinkTree = TriggerCreate("libPEB1_gt_PVEMinionWaveDestroyThinkTree_Func");
    TriggerAddEventUnitBehaviorChange(libPEB1_gt_PVEMinionWaveDestroyThinkTree, null, "PVEMinionMonitorInCombat", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PVE Minion Wave Create Think Tree
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PVEMinionWaveCreateThinkTree_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itLane;
    unit lv_caster;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true)) {
        lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
        UnitCreateAIThinkTree(lv_caster);
        UnitCreateEffectUnit(lv_caster, "PVEMinionMonitorApplyInCombatSet", lv_caster);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PVEMinionWaveCreateThinkTree_Init () {
    libPEB1_gt_PVEMinionWaveCreateThinkTree = TriggerCreate("libPEB1_gt_PVEMinionWaveCreateThinkTree_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_PVEMinionWaveCreateThinkTree, c_playerAny, "PVEMinionMonitorInCombatDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PVE Minion Wave Spawn Cycle
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PVEMinionWaveSpawnCycle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_offsetChangePerGroup = 1.875;
    point lv_basePoint;
    int lv_bruiserLevel;
    fixed lv_currentOffsetAmount;
    int lv_groupCount;
    int lv_minionType;
    point lv_offsetPoint;
    bool lv_paused;
    point lv_spawnPoint;
    int lv_waveComposition;
    timer lv_waveTimer;
    int lv_itGroup;
    int lv_lane;
    int lv_itMinion;

    // Automatic Variable Declarations
    int auto7A7BB072_ae;
    const int auto7A7BB072_ai = 1;
    int auto36244481_ae;
    const int auto36244481_ai = 1;
    int autoC6F720DF_val;
    int auto0894245F_ae;
    const int auto0894245F_ai = 1;
    int autoE8B1A6C5_ae;
    const int autoE8B1A6C5_ai = 1;
    int autoEDC53843_ae;
    const int autoEDC53843_ai = 1;

    // Variable Initialization
    lv_waveComposition = libCore_ge_MinionWaveCompositionsTypes_Custom1;
    lv_waveTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((libPEB1_gv_disableZergSpawning == true)) {
            return true;
        }

        TimerStart(lv_waveTimer, libCore_gv_bALMinionWaveInterval, false, c_timeGame);
        libGame_gv_minionWaveSpawnCounter += 1;
        auto7A7BB072_ae = libGame_gv_laneCount;
        lv_lane = 1;
        for ( ; ( (auto7A7BB072_ai >= 0 && lv_lane <= auto7A7BB072_ae) || (auto7A7BB072_ai < 0 && lv_lane >= auto7A7BB072_ae) ) ; lv_lane += auto7A7BB072_ai ) {
            if (true) {
                if ((libGame_gv_laneData[lv_lane].lv_minionSpawningEnabled == true) && (libGame_gv_minionSystemPausedAdvanced[libGame_gv_teamOrderIndex_C][lv_lane] == false)) {
                    lv_waveComposition = libGame_gf_MinionDetermineWaveComposition(lv_lane, libGame_gv_teamOrderIndex_C);
                    lv_groupCount = libCore_gv_dataMinionWaveCompositions[(lv_waveComposition)].lv_numberOfGroups;
                    lv_basePoint = libGame_gv_laneData[lv_lane].lv_waypoints[1];
                    lv_offsetPoint = libGame_gv_laneData[lv_lane].lv_waypoints[2];
                    lv_currentOffsetAmount = ((lv_groupCount - 1) * lv_offsetChangePerGroup);
                    if ((lv_basePoint == null)) {
                        return true;
                    }

                    Wait(libCore_gv_bALMinionTeamSpawnDelay[libGame_gv_teamOrderIndex_C], c_timeGame);
                    Wait(libGame_gv_laneData[lv_lane].lv_spawnDelay, c_timeGame);
                    lv_bruiserLevel = libGame_gv_laneData[lv_lane].lv_bruiserMinionLevel[libGame_gv_teamOrderIndex_C];
                    auto36244481_ae = lv_groupCount;
                    lv_itGroup = 1;
                    for ( ; ( (auto36244481_ai >= 0 && lv_itGroup <= auto36244481_ae) || (auto36244481_ai < 0 && lv_itGroup >= auto36244481_ae) ) ; lv_itGroup += auto36244481_ai ) {
                        if ((libGame_gv_laneData[lv_lane].lv_minionSpawningEnabled == true)) {
                            lv_minionType = libCore_gv_dataMinionWaveCompositions[(lv_waveComposition)].lv_groupMinionType[lv_itGroup];
                            lv_spawnPoint = libNtve_gf_PointOffsetTowardsPoint(lv_basePoint, lv_currentOffsetAmount, lv_offsetPoint);
                            autoC6F720DF_val = lv_minionType;
                            if (autoC6F720DF_val == libCore_ge_MinionTypes_Footmen) {
                                auto0894245F_ae = libCore_gv_dataMinionWaveCompositions[(lv_waveComposition)].lv_groupMinionCount[lv_itGroup];
                                lv_itMinion = 1;
                                for ( ; ( (auto0894245F_ai >= 0 && lv_itMinion <= auto0894245F_ae) || (auto0894245F_ai < 0 && lv_itMinion >= auto0894245F_ae) ) ; lv_itMinion += auto0894245F_ai ) {
                                    if ((UnitGroupCount(libPEB1_gv_pVEMinionWaveMinionsGroups[lv_lane][libCore_ge_MinionTypes_Footmen], c_unitCountAlive) < libPEB1_gv_pVEMinionWaveMaxUnitTypePerLane_C[libCore_ge_MinionTypes_Footmen])) {
                                        libPEB1_gf_PVESpawnMinion(lv_lane, libCore_gv_cOMPUTER_TeamOrder, lv_minionType, lv_spawnPoint);
                                        Wait(0.0625, c_timeGame);
                                    }

                                }
                            }
                            else if (autoC6F720DF_val == libCore_ge_MinionTypes_Wizard) {
                                autoE8B1A6C5_ae = libCore_gv_dataMinionWaveCompositions[(lv_waveComposition)].lv_groupMinionCount[lv_itGroup];
                                lv_itMinion = 1;
                                for ( ; ( (autoE8B1A6C5_ai >= 0 && lv_itMinion <= autoE8B1A6C5_ae) || (autoE8B1A6C5_ai < 0 && lv_itMinion >= autoE8B1A6C5_ae) ) ; lv_itMinion += autoE8B1A6C5_ai ) {
                                    if ((UnitGroupCount(libPEB1_gv_pVEMinionWaveMinionsGroups[lv_lane][libCore_ge_MinionTypes_Wizard], c_unitCountAlive) < libPEB1_gv_pVEMinionWaveMaxUnitTypePerLane_C[libCore_ge_MinionTypes_Wizard])) {
                                        libPEB1_gf_PVESpawnMinion(lv_lane, libCore_gv_cOMPUTER_TeamOrder, lv_minionType, lv_spawnPoint);
                                        Wait(0.0625, c_timeGame);
                                    }

                                }
                            }
                            else if (autoC6F720DF_val == libCore_ge_MinionTypes_Ranged) {
                                autoEDC53843_ae = libCore_gv_dataMinionWaveCompositions[(lv_waveComposition)].lv_groupMinionCount[lv_itGroup];
                                lv_itMinion = 1;
                                for ( ; ( (autoEDC53843_ai >= 0 && lv_itMinion <= autoEDC53843_ae) || (autoEDC53843_ai < 0 && lv_itMinion >= autoEDC53843_ae) ) ; lv_itMinion += autoEDC53843_ai ) {
                                    if ((UnitGroupCount(libPEB1_gv_pVEMinionWaveMinionsGroups[lv_lane][libCore_ge_MinionTypes_Ranged], c_unitCountAlive) < libPEB1_gv_pVEMinionWaveMaxUnitTypePerLane_C[libCore_ge_MinionTypes_Ranged])) {
                                        libPEB1_gf_PVESpawnMinion(lv_lane, libCore_gv_cOMPUTER_TeamOrder, lv_minionType, lv_spawnPoint);
                                        Wait(0.0625, c_timeGame);
                                    }

                                }
                            }
                            else {
                            }
                            lv_currentOffsetAmount -= lv_offsetChangePerGroup;
                        }

                    }

                }

                Wait(0.1875, c_timeGame);
            }

        }
        while ((TimerGetRemaining(lv_waveTimer) > 0.0)) {
            if ((libGame_gv_minionSpawningEnabled == false)) {
                if ((lv_paused == false)) {
                    TimerPause(lv_waveTimer, true);
                    lv_paused = true;
                }

            }
            else {
                if ((lv_paused == true)) {
                    TimerPause(lv_waveTimer, false);
                    lv_paused = false;
                }

            }
            Wait(0.5, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PVEMinionWaveSpawnCycle_Init () {
    libPEB1_gt_PVEMinionWaveSpawnCycle = TriggerCreate("libPEB1_gt_PVEMinionWaveSpawnCycle_Func");
    TriggerAddEventTimer(libPEB1_gt_PVEMinionWaveSpawnCycle, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deadmans Holdout Starting Sequence
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DeadmansHoldoutStartingSequence_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_orderUnit;
    unit lv_civilianRunner;

    // Automatic Variable Declarations
    unitgroup auto84CFE083_g;
    int auto84CFE083_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libPEB1_gv_cheatsReady = true;
    TriggerEnable(libPEB1_gt_TabScreenUpdate, true);
    TriggerExecute(libPEB1_gt_ZergStartup, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MX_BraxisHoldout_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    Wait(2.5, c_timeReal);
    libGame_gf_TurnOnOffInitialHeroSpawnFX(false);
    TriggerExecute(libPEB1_gt_IntroTransmissionQ, true, true);
    libPVEU_gf_PvEUICreateDirectiveMessage(StringExternal("Param/Value/lib_PEB1_E32B11CD"), StringExternal("Param/Value/lib_PEB1_FA8BA559"), libPVEU_ge_PvEUIDirectiveStyle_PvEUIDirectiveStyel_ObjectiveDiscovered);
    SoundPlayForPlayer(SoundLink("EscapeFromBraxis_Intro_SFX_Part01", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeReal);
    DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconDefense, PlayerGroupAll(), true);
    SoundPlayForPlayer(SoundLink("UI_ObjectiveUpdate", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 17.0, false);
    TriggerExecute(libPEB1_gt_ZergWavesBasic, true, false);
    TriggerExecute(libPEB1_gt_Holdout1, true, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 12.125, false);
    SoundPlayForPlayer(SoundLink("EscapeFromBraxis_Intro_SFX_Part02", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libPEB1_gv_civilianRunners = UnitGroup("CivilianRunner", libCore_gv_cOMPUTER_TeamOrder, RegionFromName("Order Base Region"), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto84CFE083_g = libPEB1_gv_civilianRunners;
    auto84CFE083_u = UnitGroupCount(auto84CFE083_g, c_unitCountAll);
    for (;; auto84CFE083_u -= 1) {
        lv_civilianRunner = UnitGroupUnitFromEnd(auto84CFE083_g, auto84CFE083_u);
        if (lv_civilianRunner == null) { break; }
        UnitIssueOrder(lv_civilianRunner, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(libPEB1_gv_civilianRunnerDestination_C)), c_orderQueueReplace);
    }
    TriggerExecute(libPEB1_gt_GateOpensin10Q, true, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 5.125, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown5, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown4, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown3, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown2, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown1, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(0.5, c_timeGame);
    libGame_gv_announcement_SystemEnabled = false;
    TriggerExecute(libPEB1_gt_Stage1Music, true, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 0.0, false);
    TriggerExecute(libPEB1_gt_BaseHealthBarUpdate, true, false);
    TriggerExecute(libPEB1_gt_BattleBeginsQ, true, true);
    Wait(2.0, c_timeGame);
    libGame_gv_announcement_SystemEnabled = true;
    TriggerExecute(libPEB1_gt_CreepCampsQ, true, false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DeadmansHoldoutStartingSequence_Init () {
    libPEB1_gt_DeadmansHoldoutStartingSequence = TriggerCreate("libPEB1_gt_DeadmansHoldoutStartingSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Startup
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ZergStartup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zergHeroIndex;

    // Automatic Variable Declarations
    const int autoE3717852_ae = 5;
    const int autoE3717852_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEB1_gt_CreateZergCamps, true, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 20.0, false);
    lv_zergHeroIndex = 1;
    for ( ; ( (autoE3717852_ai >= 0 && lv_zergHeroIndex <= autoE3717852_ae) || (autoE3717852_ai < 0 && lv_zergHeroIndex >= autoE3717852_ae) ) ; lv_zergHeroIndex += autoE3717852_ai ) {
        libPVEM_gf_PvEPrepareNPCHero(libPEB1_gv_zergHeroes[lv_zergHeroIndex].lv_hero, libPEB1_gf_PZEZergBossSkin(libPEB1_gv_zergHeroes[lv_zergHeroIndex].lv_hero));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ZergStartup_Init () {
    libPEB1_gt_ZergStartup = TriggerCreate("libPEB1_gt_ZergStartup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stage 1 Music
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Stage1Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(6.0, c_timeReal);
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Stage1MusicPart1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Stage1Music_Init () {
    libPEB1_gt_Stage1Music = TriggerCreate("libPEB1_gt_Stage1Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Civilian Runner
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_RemoveCivilianRunner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_runnerUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_runnerUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_runnerUnit) == "CivilianRunner"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(lv_runnerUnit, "SetOpacity 0.000000 1.000000");
    Wait(1.125, c_timeGame);
    UnitRemove(lv_runnerUnit);
    if ((UnitGroupCount(libPEB1_gv_civilianRunners, c_unitCountAlive) <= 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_RemoveCivilianRunner_Init () {
    libPEB1_gt_RemoveCivilianRunner = TriggerCreate("libPEB1_gt_RemoveCivilianRunner_Func");
    TriggerAddEventUnitRegion(libPEB1_gt_RemoveCivilianRunner, null, libPEB1_gv_civilianRunnerFade_C, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Players
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_InitPlayers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Automatic Variable Declarations
    playergroup autoD32D9D90_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libUIUI_gt_UIPartyFrameUnitClicked, false);
    autoD32D9D90_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_playerIndex = -1;
    while (true) {
        	lv_playerIndex = PlayerGroupNextPlayer(autoD32D9D90_g, lv_playerIndex);
        	if (lv_playerIndex<0) { break; }
        	TechTreeUpgradeAddLevel(lv_playerIndex, "DisplayLockedMapMechanicAbility", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_InitPlayers_Init () {
    libPEB1_gt_InitPlayers = TriggerCreate("libPEB1_gt_InitPlayers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bunker Destroyed
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_BunkerDestroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waypointIndex;

    // Automatic Variable Declarations
    int autoA8DF092C_ae;
    const int autoA8DF092C_ai = 1;
    int autoD0A52DAE_ae;
    const int autoD0A52DAE_ai = 1;
    int autoF4EA5579_ae;
    const int autoF4EA5579_ai = 1;
    int auto77BCFCA1_ae;
    const int auto77BCFCA1_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == libPEB1_gv_topBunkers[1])) {
        if ((UnitIsAlive(libPEB1_gv_topBunkers[2]) == false)) {
            libPEB1_gv_bunkersAlive[1] = false;
            libPEB1_gv_bunkerFortressPingPoint = PointFromName("Bunker Ping 1");
            TriggerExecute(libPEB1_gt_BunkersFallQ, true, false);
            autoA8DF092C_ae = libGame_gv_laneData[1].lv_waypointCount;
            lv_waypointIndex = 7;
            for ( ; ( (autoA8DF092C_ai >= 0 && lv_waypointIndex <= autoA8DF092C_ae) || (autoA8DF092C_ai < 0 && lv_waypointIndex >= autoA8DF092C_ae) ) ; lv_waypointIndex += autoA8DF092C_ai ) {
                libGame_gv_laneData[1].lv_waypoints[lv_waypointIndex] = null;
            }
            libGame_gv_laneData[1].lv_waypointCount = 6;
        }
        else {
            MinimapPing(PlayerGroupAll(), UnitGetPosition(libPEB1_gv_topBunkers[1]), 2.0, Color(100.00, 0.00, 0.00));
        }
    }
    else if ((EventUnit() == libPEB1_gv_topBunkers[2])) {
        if ((UnitIsAlive(libPEB1_gv_topBunkers[1]) == false)) {
            libPEB1_gv_bunkersAlive[1] = false;
            libPEB1_gv_bunkerFortressPingPoint = PointFromName("Bunker Ping 1");
            TriggerExecute(libPEB1_gt_BunkersFallQ, true, false);
            autoD0A52DAE_ae = libGame_gv_laneData[1].lv_waypointCount;
            lv_waypointIndex = 7;
            for ( ; ( (autoD0A52DAE_ai >= 0 && lv_waypointIndex <= autoD0A52DAE_ae) || (autoD0A52DAE_ai < 0 && lv_waypointIndex >= autoD0A52DAE_ae) ) ; lv_waypointIndex += autoD0A52DAE_ai ) {
                libGame_gv_laneData[1].lv_waypoints[lv_waypointIndex] = null;
            }
            libGame_gv_laneData[1].lv_waypointCount = 6;
        }
        else {
            MinimapPing(PlayerGroupAll(), UnitGetPosition(libPEB1_gv_topBunkers[2]), 2.0, Color(100.00, 0.00, 0.00));
        }
    }
    else if ((EventUnit() == libPEB1_gv_bottomBunkers[1])) {
        if ((UnitIsAlive(libPEB1_gv_bottomBunkers[2]) == false)) {
            libPEB1_gv_bunkersAlive[2] = false;
            libPEB1_gv_bunkerFortressPingPoint = PointFromName("Bunker Ping 2");
            TriggerExecute(libPEB1_gt_BunkersFallQ, true, false);
            libGame_gv_laneData[2].lv_waypointCount = 6;
            autoF4EA5579_ae = libGame_gv_laneData[2].lv_waypointCount;
            lv_waypointIndex = 7;
            for ( ; ( (autoF4EA5579_ai >= 0 && lv_waypointIndex <= autoF4EA5579_ae) || (autoF4EA5579_ai < 0 && lv_waypointIndex >= autoF4EA5579_ae) ) ; lv_waypointIndex += autoF4EA5579_ai ) {
                libGame_gv_laneData[2].lv_waypoints[lv_waypointIndex] = null;
            }
            libGame_gv_laneData[2].lv_waypointCount = 6;
        }
        else {
            MinimapPing(PlayerGroupAll(), UnitGetPosition(libPEB1_gv_bottomBunkers[1]), 2.0, Color(100.00, 0.00, 0.00));
        }
    }
    else if ((EventUnit() == libPEB1_gv_bottomBunkers[2])) {
        if ((UnitIsAlive(libPEB1_gv_bottomBunkers[1]) == false)) {
            libPEB1_gv_bunkersAlive[2] = false;
            libPEB1_gv_bunkerFortressPingPoint = PointFromName("Bunker Ping 2");
            TriggerExecute(libPEB1_gt_BunkersFallQ, true, false);
            libGame_gv_laneData[2].lv_waypointCount = 6;
            auto77BCFCA1_ae = libGame_gv_laneData[2].lv_waypointCount;
            lv_waypointIndex = 7;
            for ( ; ( (auto77BCFCA1_ai >= 0 && lv_waypointIndex <= auto77BCFCA1_ae) || (auto77BCFCA1_ai < 0 && lv_waypointIndex >= auto77BCFCA1_ae) ) ; lv_waypointIndex += auto77BCFCA1_ai ) {
                libGame_gv_laneData[2].lv_waypoints[lv_waypointIndex] = null;
            }
            libGame_gv_laneData[2].lv_waypointCount = 6;
        }
        else {
            MinimapPing(PlayerGroupAll(), UnitGetPosition(libPEB1_gv_bottomBunkers[2]), 2.0, Color(100.00, 0.00, 0.00));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_BunkerDestroyed_Init () {
    libPEB1_gt_BunkerDestroyed = TriggerCreate("libPEB1_gt_BunkerDestroyed_Func");
    TriggerAddEventUnitDied(libPEB1_gt_BunkerDestroyed, UnitRefFromVariable("libPEB1_gv_topBunkers[1]"));
    TriggerAddEventUnitDied(libPEB1_gt_BunkerDestroyed, UnitRefFromVariable("libPEB1_gv_topBunkers[2]"));
    TriggerAddEventUnitDied(libPEB1_gt_BunkerDestroyed, UnitRefFromVariable("libPEB1_gv_bottomBunkers[1]"));
    TriggerAddEventUnitDied(libPEB1_gt_BunkerDestroyed, UnitRefFromVariable("libPEB1_gv_bottomBunkers[2]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Planetary Fortress Destroyed
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PlanetaryFortressDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TownTownHallL3"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEB1_gv_bunkerFortressPingPoint = UnitGetPosition(EventUnit());
    TriggerExecute(libPEB1_gt_PlanetaryFortressDestroyedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PlanetaryFortressDestroyed_Init () {
    libPEB1_gt_PlanetaryFortressDestroyed = TriggerCreate("libPEB1_gt_PlanetaryFortressDestroyed_Func");
    TriggerAddEventUnitDied(libPEB1_gt_PlanetaryFortressDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Exploration Regions
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ExplorationRegions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region[32] lv_explorationRegions;
    point[32] lv_explorationPoints;
    bool[32] lv_regionExplored;
    int lv_regionIndex;
    int lv_maxRegions;
    bool lv_everythingExplored;
    int lv_playerIndex;

    // Automatic Variable Declarations
    const int auto037C9675_ae = 31;
    const int auto037C9675_ai = 1;
    int auto0DEEB145_ae;
    const int auto0DEEB145_ai = 1;
    int auto9155E5BF_ae;
    const int auto9155E5BF_ai = 1;
    playergroup auto3BFD6783_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_regionIndex = 1;
    for ( ; ( (auto037C9675_ai >= 0 && lv_regionIndex <= auto037C9675_ae) || (auto037C9675_ai < 0 && lv_regionIndex >= auto037C9675_ae) ) ; lv_regionIndex += auto037C9675_ai ) {
        if (((RegionFromName(("Exploration Region " + IntToString(lv_regionIndex))) == null) || (PointFromName(("Exploration Point " + IntToString(lv_regionIndex))) == null))) {
            break;
        }
        else {
            lv_explorationRegions[lv_regionIndex] = RegionFromName(("Exploration Region " + IntToString(lv_regionIndex)));
            lv_explorationPoints[lv_regionIndex] = PointFromName(("Exploration Point " + IntToString(lv_regionIndex)));
            lv_maxRegions = lv_regionIndex;
        }
    }
    while (true) {
        Wait(1.0, c_timeGame);
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        lv_everythingExplored = true;
        auto0DEEB145_ae = lv_maxRegions;
        lv_regionIndex = 1;
        for ( ; ( (auto0DEEB145_ai >= 0 && lv_regionIndex <= auto0DEEB145_ae) || (auto0DEEB145_ai < 0 && lv_regionIndex >= auto0DEEB145_ae) ) ; lv_regionIndex += auto0DEEB145_ai ) {
            if ((lv_regionExplored[lv_regionIndex] == false)) {
                lv_everythingExplored = false;
                break;
            }

        }
        if ((lv_everythingExplored == true)) {
            return true;
        }

        auto9155E5BF_ae = lv_maxRegions;
        lv_regionIndex = 1;
        for ( ; ( (auto9155E5BF_ai >= 0 && lv_regionIndex <= auto9155E5BF_ae) || (auto9155E5BF_ai < 0 && lv_regionIndex >= auto9155E5BF_ae) ) ; lv_regionIndex += auto9155E5BF_ai ) {
            if ((lv_regionExplored[lv_regionIndex] == false) && (VisIsVisibleForPlayer(libStEx_gv_pLAYER_11_ORDER, lv_explorationPoints[lv_regionIndex]) == true)) {
                lv_regionExplored[lv_regionIndex] = true;
                auto3BFD6783_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
                lv_playerIndex = -1;
                while (true) {
                    	lv_playerIndex = PlayerGroupNextPlayer(auto3BFD6783_g, lv_playerIndex);
                    	if (lv_playerIndex<0) { break; }
                    	VisExploreArea(lv_playerIndex, lv_explorationRegions[lv_regionIndex], true, false);
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ExplorationRegions_Init () {
    libPEB1_gt_ExplorationRegions = TriggerCreate("libPEB1_gt_ExplorationRegions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Minion Catalog Changes
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ZergMinionCatalogChanges_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_minionHP;
    fixed lv_minionDmg;
    fixed lv_weaponPeriod;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_minionHP = libPVEM_gf_PvEDifficultyValueReal(150.0, 200.0);
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergZergling", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergZergling", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergZerglingNotMinion", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString(150.0, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergZerglingNotMinion", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, FixedToString(150.0, c_fixedPrecisionAny));
    lv_minionDmg = 8.0;
    CatalogFieldValueSet(c_gameCatalogEffect, "ZergZerglingWeaponDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libPVEM_gf_PvEDifficultyValueReal(lv_minionDmg, (lv_minionDmg * libPEB1_gv_hardMinionDamageBonus)), c_fixedPrecisionAny));
    lv_minionHP = 900.0;
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergHydralisk", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergHydralisk", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    lv_minionDmg = 45.0;
    CatalogFieldValueSet(c_gameCatalogEffect, "ZergHydraliskMeleeDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libPVEM_gf_PvEDifficultyValueReal(lv_minionDmg, (lv_minionDmg * libPEB1_gv_hardMinionDamageBonus)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "ZergHydraliskRangedDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libPVEM_gf_PvEDifficultyValueReal(lv_minionDmg, (lv_minionDmg * libPEB1_gv_hardMinionDamageBonus)), c_fixedPrecisionAny));
    lv_weaponPeriod = 0.78;
    CatalogFieldValueSet(c_gameCatalogWeapon, "ZergHydraliskMelee", "Period", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_weaponPeriod, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogWeapon, "ZergHydraliskRanged", "Period", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_weaponPeriod, c_fixedPrecisionAny));
    lv_minionHP = 1500.0;
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergRoach", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergRoach", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    lv_minionDmg = 35.0;
    CatalogFieldValueSet(c_gameCatalogEffect, "ZergRoachWeaponDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libPVEM_gf_PvEDifficultyValueReal(lv_minionDmg, (lv_minionDmg * libPEB1_gv_hardMinionDamageBonus)), c_fixedPrecisionAny));
    lv_minionHP = 250.0;
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergBaneling", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergBaneling", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    lv_minionDmg = 220.0;
    CatalogFieldValueSet(c_gameCatalogEffect, "ZergBanelingDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libPVEM_gf_PvEDifficultyValueReal(lv_minionDmg, (lv_minionDmg * libPEB1_gv_hardMinionDamageBonus)), c_fixedPrecisionAny));
    lv_minionHP = libPVEM_gf_PvEDifficultyValueReal(5000.0, 6000.0);
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergUltralisk", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergUltralisk", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    lv_minionDmg = 160.0;
    CatalogFieldValueSet(c_gameCatalogEffect, "ZergUltraliskAttackWeaponDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libPVEM_gf_PvEDifficultyValueReal(lv_minionDmg, (lv_minionDmg * libPEB1_gv_hardMinionDamageBonus)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "ZergUltraliskAttackWeaponCleaveDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libPVEM_gf_PvEDifficultyValueReal(lv_minionDmg, (lv_minionDmg * libPEB1_gv_hardMinionDamageBonus)), c_fixedPrecisionAny));
    lv_minionHP = 1600.0;
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergMutalisk", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergMutalisk", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    lv_minionDmg = 40.0;
    CatalogFieldValueSet(c_gameCatalogEffect, "ZergMutaliskWeaponDamage1", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libPVEM_gf_PvEDifficultyValueReal(lv_minionDmg, (lv_minionDmg * libPEB1_gv_hardMinionDamageBonus)), c_fixedPrecisionAny));
    lv_minionDmg = 20.0;
    CatalogFieldValueSet(c_gameCatalogEffect, "ZergMutaliskWeaponDamage2", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libPVEM_gf_PvEDifficultyValueReal(lv_minionDmg, (lv_minionDmg * libPEB1_gv_hardMinionDamageBonus)), c_fixedPrecisionAny));
    lv_minionDmg = 10.0;
    CatalogFieldValueSet(c_gameCatalogEffect, "ZergMutaliskWeaponDamage3", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libPVEM_gf_PvEDifficultyValueReal(lv_minionDmg, (lv_minionDmg * libPEB1_gv_hardMinionDamageBonus)), c_fixedPrecisionAny));
    lv_minionHP = libPVEM_gf_PvEDifficultyValueReal(3000.0, 4000.0);
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergGuardian", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergGuardian", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    lv_minionDmg = 125.0;
    CatalogFieldValueSet(c_gameCatalogEffect, "ZergGuardianWeaponDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libPVEM_gf_PvEDifficultyValueReal(lv_minionDmg, (lv_minionDmg * libPEB1_gv_hardMinionDamageBonus)), c_fixedPrecisionAny));
    lv_minionHP = 2000.0;
    CatalogFieldValueSet(c_gameCatalogUnit, "SpineCrawler", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "SpineCrawler", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    lv_minionHP = 8000.0;
    CatalogFieldValueSet(c_gameCatalogUnit, "Hatchery", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "Hatchery", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ZergMinionCatalogChanges_Init () {
    libPEB1_gt_ZergMinionCatalogChanges = TriggerCreate("libPEB1_gt_ZergMinionCatalogChanges_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Abathur Init
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_AbathurInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_regionIndex;
    int lv_pointIndex;

    // Automatic Variable Declarations
    const int auto46E29499_ae = 31;
    const int auto46E29499_ai = 1;
    const int autoE5625245_ae = 3;
    const int autoE5625245_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_regionIndex = 1;
    for ( ; ( (auto46E29499_ai >= 0 && lv_regionIndex <= auto46E29499_ae) || (auto46E29499_ai < 0 && lv_regionIndex >= auto46E29499_ae) ) ; lv_regionIndex += auto46E29499_ai ) {
        if ((RegionFromName(("Toxic Nest Region " + IntToString(lv_regionIndex))) == null)) {
            break;
        }

        VisRevealArea(libStEx_gv_pLAYER_12_CHAOS, RegionFromName(("Toxic Nest Region " + IntToString(lv_regionIndex))), 0.0, false);
    }
    lv_pointIndex = 1;
    for ( ; ( (autoE5625245_ai >= 0 && lv_pointIndex <= autoE5625245_ae) || (autoE5625245_ai < 0 && lv_pointIndex >= autoE5625245_ae) ) ; lv_pointIndex += autoE5625245_ai ) {
        VisRevealArea(libStEx_gv_pLAYER_12_CHAOS, RegionCircle(libPEB1_gv_archangelAreas[5].lv_defenseHeroRandomSpawns[lv_pointIndex], 2.0), 0.0, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_AbathurInit_Init () {
    libPEB1_gt_AbathurInit = TriggerCreate("libPEB1_gt_AbathurInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Monstrosity Stacks
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_MonstrosityStacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7FC6FACA_g;
    int auto7FC6FACA_u;
    unit auto7FC6FACA_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    auto7FC6FACA_g = UnitGroup("AbathurEvolvedMonstrosity", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7FC6FACA_u = UnitGroupCount(auto7FC6FACA_g, c_unitCountAll);
    for (;; auto7FC6FACA_u -= 1) {
        auto7FC6FACA_var = UnitGroupUnitFromEnd(auto7FC6FACA_g, auto7FC6FACA_u);
        if (auto7FC6FACA_var == null) { break; }
        if ((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, UnitGetOwner(auto7FC6FACA_var)) == true)) {
            UnitBehaviorAdd(auto7FC6FACA_var, "AbathurEvolveMonstrosityDamageStack", auto7FC6FACA_var, 40);
            UnitBehaviorAdd(auto7FC6FACA_var, "AbathurEvolveMonstrosityHealthStack", auto7FC6FACA_var, 40);
            UnitSetPropertyFixed(auto7FC6FACA_var, c_unitPropLifePercent, 100.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_MonstrosityStacks_Init () {
    libPEB1_gt_MonstrosityStacks = TriggerCreate("libPEB1_gt_MonstrosityStacks_Func");
    TriggerAddEventUnitAbility(libPEB1_gt_MonstrosityStacks, null, AbilityCommand("AbathurEvolveMonstrosity", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toxic Nest Damage Behavior
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ToxicNestDamageBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "AbathurToxicNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libPVEM_gf_PvEGameDifficulty() == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Normal)) {
        UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "ZergHeroDamageModifierNormal", UnitGetOwner(EventUnitCreatedUnit()), 1);
    }
    else {
        UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "ZergHeroDamageModifierHard", UnitGetOwner(EventUnitCreatedUnit()), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ToxicNestDamageBehavior_Init () {
    libPEB1_gt_ToxicNestDamageBehavior = TriggerCreate("libPEB1_gt_ToxicNestDamageBehavior_Func");
    TriggerAddEventUnitCreated(libPEB1_gt_ToxicNestDamageBehavior, null, "AbathurToxicNest", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Murky Egg Timer Expires
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_MurkyEggTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(libPEB1_gv_murkyEggUnit) == true)) {
        libGame_gf_HeroDeathRespawnHeroforPlayer(false, UnitGetOwner(libPEB1_gv_murkyEggUnit), UnitGetPosition(libPEB1_gv_murkyEggUnit), 100);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_MurkyEggTimerExpires_Init () {
    libPEB1_gt_MurkyEggTimerExpires = TriggerCreate("libPEB1_gt_MurkyEggTimerExpires_Func");
    TriggerAddEventTimer(libPEB1_gt_MurkyEggTimerExpires, libPEB1_gv_murkyDeathTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Murky Egg Dies
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_MurkyEggDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itHero;
    int lv_murkyPlayer;
    text lv_killingPlayerName;
    text lv_killingPlayerUnitName;

    // Automatic Variable Declarations
    const int autoEACFB238_ae = 5;
    const int autoEACFB238_ai = 1;

    // Variable Initialization
    lv_murkyPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libGame_gf_TeamNumberOfPlayer(lv_murkyPlayer) == libGame_gv_teamChaosIndex_C))) {
            return false;
        }

        if (!((libGame_gf_TeamNumberOfPlayer(libNtve_gf_KillingPlayer()) == libGame_gv_teamOrderIndex_C))) {
            return false;
        }

        if (!(((libNtve_gf_KillingPlayer() >= 1) && (libNtve_gf_KillingPlayer() <= libCore_gv_cOMPUTER_TeamOrder)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_KillingPlayer() == 11)) {
        lv_killingPlayerName = StringToText("");
        lv_killingPlayerUnitName = StringExternal("Param/Value/lib_PEB1_4C71A7AF");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_PEB1_0E6D5415", "A", PlayerName(libNtve_gf_KillingPlayer()));
        lv_killingPlayerName = TextExpressionAssemble("Param/Expression/lib_PEB1_0E6D5415");
        TextExpressionSetToken("Param/Expression/lib_PEB1_6F44EC17", "A", UnitGetName(libGame_gv_players[libNtve_gf_KillingPlayer()].lv_heroUnit));
        lv_killingPlayerUnitName = TextExpressionAssemble("Param/Expression/lib_PEB1_6F44EC17");
    }
    lv_itHero = 1;
    for ( ; ( (autoEACFB238_ai >= 0 && lv_itHero <= autoEACFB238_ae) || (autoEACFB238_ai < 0 && lv_itHero >= autoEACFB238_ae) ) ; lv_itHero += autoEACFB238_ai ) {
        if ((libPEB1_gv_zergHeroes[lv_itHero].lv_hero == "Murky")) {
            if ((TimerGetRemaining(libPEB1_gv_murkyDeathTimer) > 0.0)) {
                libNtve_gf_StopTimer(libPEB1_gv_murkyDeathTimer);
                TimerStart(libPEB1_gv_zergHeroes[lv_itHero].lv_respawnTimer, libPEB1_gv_zergHeroRespawnTime, false, c_timeGame);
                TextExpressionSetToken("Param/Expression/lib_PEB1_7E30233A", "A", lv_killingPlayerName);
                TextExpressionSetToken("Param/Expression/lib_PEB1_7E30233A", "B", lv_killingPlayerUnitName);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_PEB1_7E30233A"));
                if ((libPEB1_gv_noMurkySecondChance == false)) {
                    libPVEM_gf_PvEPickupSpawnPickup("PVESecondChancePickup", UnitGetPosition(libPEB1_gv_murkyEggUnit), false);
                }

                libPEB1_gf_ZergHeroSlainQ("HeroMurky");
                libPEB1_gf_TurnOnOffZergHeroAI(libPVEM_gf_PvENPCHeroUnit(libPEB1_gv_zergHeroes[lv_itHero].lv_hero), false);
                libPEB1_gv_zergHeroes[lv_itHero].lv_state = libPEB1_ge_ZergHeroState_Dead;
                libPEB1_gf_PrepareTheNextHero(lv_itHero);
            }
            else {
                UnitBehaviorAdd(libGame_gv_players[lv_murkyPlayer].lv_heroUnit, "MurkyDeadEggReveal", libNtve_gf_KillingUnit(), 1);
                TextExpressionSetToken("Param/Expression/lib_PEB1_EE8E76E6", "A", lv_killingPlayerName);
                TextExpressionSetToken("Param/Expression/lib_PEB1_EE8E76E6", "B", lv_killingPlayerUnitName);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_PEB1_EE8E76E6"));
            }
            libPEB1_gv_murkyEggUnit = null;
            libGame_gv_heroDeathMurkyRespawnEggs[lv_murkyPlayer] = null;
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_MurkyEggDies_Init () {
    libPEB1_gt_MurkyEggDies = TriggerCreate("libPEB1_gt_MurkyEggDies_Func");
    TriggerAddEventUnitDied(libPEB1_gt_MurkyEggDies, UnitRefFromVariable("libPEB1_gv_murkyEggUnit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Murky AI
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_MurkyAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_murky;
    int lv_archangelIndex;
    unitgroup lv_validTargets;
    point lv_spawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_validTargets = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libPEB1_gv_holdout3_Started == true)) {
        TriggerExecute(libPEB1_gt_MurkyFinalHoldoutAI, true, false);
        return true;
    }

    lv_murky = libPVEM_gf_PvENPCHeroUnit("Murky");
    if ((UnitIsAlive(lv_murky) == false)) {
        return true;
    }
    else {
        lv_spawnPoint = UnitGetPosition(lv_murky);
    }
    if ((UnitHasAIThinkTree(lv_murky) == false)) {
        UnitCreateAIThinkTree(lv_murky);
    }

    if ((RegionContainsPoint(RegionFromName("Murky Area 1"), UnitGetPosition(lv_murky)) == true)) {
        lv_archangelIndex = 1;
    }
    else {
        if ((RegionContainsPoint(RegionFromName("Murky Area 4"), UnitGetPosition(lv_murky)) == true)) {
            lv_archangelIndex = 4;
        }
        else {
            lv_archangelIndex = 5;
        }
    }
    while (true) {
        if ((UnitGroupCount(UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_murky), 12.0), libPVEM_gv_pvEEventHeroicFilters, 1), c_unitCountAlive) == 0)) {
            lv_validTargets = UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionFromName(("Murky Area " + IntToString(lv_archangelIndex))), libPVEM_gv_pvEEventHeroicFilters, 0);
            if ((UnitGroupCount(lv_validTargets, c_unitCountAlive) > 0)) {
                UnitIssueOrder(lv_murky, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_validTargets, UnitGetPosition(lv_murky)))), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lv_murky, OrderTargetingPoint(AbilityCommand("attack", 0), lv_spawnPoint), c_orderQueueReplace);
            }
        }

        Wait(1.0, c_timeGame);
        if (((libGame_gv_gameOver == true) || (UnitIsAlive(lv_murky) == false))) {
            return true;
        }

        if ((libPEB1_gv_archangelAreas[lv_archangelIndex].lv_areaDefeated == true)) {
            libPEB1_gv_noMurkySecondChance = true;
            libGame_gv_players[UnitGetOwner(lv_murky)].lv_suppressKillLogwhenKilled = true;
            UnitCreateEffectUnit(lv_murky, "Kill", lv_murky);
            UnitCreateEffectUnit(lv_murky, "Kill", libPEB1_gv_murkyEggUnit);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_MurkyAI_Init () {
    libPEB1_gt_MurkyAI = TriggerCreate("libPEB1_gt_MurkyAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Murky Final Holdout AI
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_MurkyFinalHoldoutAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_murky;
    unitgroup lv_validTargets;
    point lv_spawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_validTargets = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_murky = libPVEM_gf_PvENPCHeroUnit("Murky");
    if ((UnitIsAlive(lv_murky) == false)) {
        return true;
    }
    else {
        lv_spawnPoint = UnitGetPosition(lv_murky);
    }
    if ((UnitHasAIThinkTree(lv_murky) == false)) {
        UnitCreateAIThinkTree(lv_murky);
    }

    while (true) {
        if ((UnitGroupCount(UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_murky), 12.0), libPVEM_gv_pvEEventHeroicFilters, 1), c_unitCountAlive) == 0)) {
            lv_validTargets = UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionFromName("Murky Final"), libPVEM_gv_pvEEventHeroicFilters, 0);
            if ((UnitGroupCount(lv_validTargets, c_unitCountAlive) > 0)) {
                UnitIssueOrder(lv_murky, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_validTargets, UnitGetPosition(lv_murky)))), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lv_murky, OrderTargetingPoint(AbilityCommand("attack", 0), lv_spawnPoint), c_orderQueueReplace);
            }
        }

        Wait(1.0, c_timeGame);
        if (((libGame_gv_gameOver == true) || (UnitIsAlive(lv_murky) == false))) {
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_MurkyFinalHoldoutAI_Init () {
    libPEB1_gt_MurkyFinalHoldoutAI = TriggerCreate("libPEB1_gt_MurkyFinalHoldoutAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Murky Revive
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_MurkyRevive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroMurky"))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, true), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEB1_gt_MurkyAI, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_MurkyRevive_Init () {
    libPEB1_gt_MurkyRevive = TriggerCreate("libPEB1_gt_MurkyRevive_Func");
    TriggerAddEventUnitRevive(libPEB1_gt_MurkyRevive, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara AI
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ZagaraAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_zagara;
    unitgroup lv_nearbyEnemies;
    timer lv_devouringMawCooldown;
    bool lv_abilityUsed;
    bool lv_devouringMawReady;
    int lv_archangelIndex;
    point lv_homePoint;

    // Automatic Variable Declarations
    unitgroup auto7650437C_g;
    int auto7650437C_u;
    unit auto7650437C_var;

    // Variable Initialization
    lv_nearbyEnemies = UnitGroupEmpty();
    lv_devouringMawCooldown = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_zagara = libPVEM_gf_PvENPCHeroUnit("Zagara");
    if ((UnitIsAlive(lv_zagara) == false)) {
        return true;
    }

    if ((RegionContainsPoint(RegionFromName("Zagara 1"), UnitGetPosition(lv_zagara)) == true)) {
        lv_archangelIndex = 1;
        lv_homePoint = PointFromName("Zagara 1");
    }
    else {
        if ((RegionContainsPoint(RegionFromName("Zagara 4"), UnitGetPosition(lv_zagara)) == true)) {
            lv_archangelIndex = 4;
            lv_homePoint = PointFromName("Zagara 4");
        }
        else {
            lv_archangelIndex = 5;
            if ((libPEB1_gv_archangelSpawnOrder[2] == 2)) {
                lv_homePoint = PointFromName("Zagara 5 Top");
            }
            else {
                lv_homePoint = PointFromName("Zagara 5 Right");
            }
        }
    }
    while (true) {
        Wait(1.0, c_timeGame);
        if (((libGame_gv_gameOver == true) || (UnitIsAlive(lv_zagara) == false))) {
            return true;
        }

        if ((libPEB1_gv_archangelAreas[lv_archangelIndex].lv_areaDefeated == true)) {
            libGame_gv_players[UnitGetOwner(lv_zagara)].lv_suppressKillLogwhenKilled = true;
            UnitCreateEffectUnit(lv_zagara, "Kill", lv_zagara);
            return true;
        }

        lv_nearbyEnemies = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceEnemy, RegionFromName(("Zagara " + IntToString(lv_archangelIndex))), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0)) {
            UnitIssueOrder(lv_zagara, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_nearbyEnemies, UnitGetPosition(lv_zagara)))), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lv_zagara, OrderTargetingPoint(AbilityCommand("attack", 0), lv_homePoint), c_orderQueueReplace);
        }
        lv_abilityUsed = false;
        if ((lv_devouringMawReady == true)) {
            if ((TimerGetRemaining(lv_devouringMawCooldown) < 0.1)) {
                lv_nearbyEnemies = UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_zagara), 8.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto7650437C_g = lv_nearbyEnemies;
                auto7650437C_u = UnitGroupCount(auto7650437C_g, c_unitCountAll);
                for (;; auto7650437C_u -= 1) {
                    auto7650437C_var = UnitGroupUnitFromEnd(auto7650437C_g, auto7650437C_u);
                    if (auto7650437C_var == null) { break; }
                    if ((UnitGroupCount(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto7650437C_var), 4.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 2)) {
                        UnitIssueOrder(lv_zagara, OrderTargetingPoint(AbilityCommand("ZagaraDevouringMaw", 0), UnitGetPosition(auto7650437C_var)), c_orderQueueReplace);
                        TimerStart(lv_devouringMawCooldown, 101.0, false, c_timeGame);
                        lv_abilityUsed = true;
                        break;
                    }

                }
            }

        }
        else {
            lv_nearbyEnemies = UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_zagara), 12.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
            if ((UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0)) {
                lv_devouringMawReady = true;
                TimerStart(lv_devouringMawCooldown, 2.0, false, c_timeGame);
            }

        }
        if ((lv_abilityUsed == false)) {
            lv_nearbyEnemies = UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_zagara), 7.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0)) {
                UnitIssueOrder(lv_zagara, OrderTargetingUnit(AbilityCommand("ZagaraSummonHydralisk", 0), UnitGroupClosestToPoint(lv_nearbyEnemies, UnitGetPosition(lv_zagara))), c_orderQueueReplace);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ZagaraAI_Init () {
    libPEB1_gt_ZagaraAI = TriggerCreate("libPEB1_gt_ZagaraAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara Hunter Killer Transfusion
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ZagaraHunterKillerTransfusion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zagaraPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_zagaraPlayer = UnitGetOwner(EventUnitTarget());

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, lv_zagaraPlayer) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), libCore_gv_filtersHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnitTarget(), "ZagaraHunterKillerHydraliskTransfusionCreateHealer", libGame_gv_players[lv_zagaraPlayer].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ZagaraHunterKillerTransfusion_Init () {
    libPEB1_gt_ZagaraHunterKillerTransfusion = TriggerCreate("libPEB1_gt_ZagaraHunterKillerTransfusion_Func");
    TriggerAddEventUnitAttacked2(libPEB1_gt_ZagaraHunterKillerTransfusion, null, "ZagaraHydraliskMelee");
    TriggerAddEventUnitAttacked2(libPEB1_gt_ZagaraHunterKillerTransfusion, null, "ZagaraHydraliskRanged");
    TriggerAddEventUnitAttacked2(libPEB1_gt_ZagaraHunterKillerTransfusion, null, "ZagaraMutaliskWeapon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Abathur Talents
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_AbathurTalents_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_abathurPlayer;
    int lv_regionIndex;
    int lv_pointIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_abathurPlayer = libPVEM_gf_PvENPCHeroPlayerFromUnitType(libPVEM_gf_PvENPCHeroUnitType("Abathur"));
    CatalogFieldValueSet(c_gameCatalogEffect, "AbathurSymbioteSpikeBurstDamageSearch", "AreaArray[" + IntToString(0) + "].Radius", lv_abathurPlayer, "5");
    CatalogFieldValueSet(c_gameCatalogAbil, "AbathurSymbioteSpikeBurst", "Cost.Cooldown.TimeUse", lv_abathurPlayer, "5");
    CatalogFieldValueSet(c_gameCatalogActor, "AbathurSymbioteSpikeBlastCast", "Scale", lv_abathurPlayer, "1.25");
    CatalogFieldValueSet(c_gameCatalogBehavior, "LocustTimedLife", "Duration", lv_abathurPlayer, "35");
    CatalogFieldValueSet(c_gameCatalogUnit, "AbathurLocustNormal", "LifeMax", lv_abathurPlayer, "432");
    CatalogFieldValueSet(c_gameCatalogUnit, "AbathurLocustNormal", "LifeStart", lv_abathurPlayer, "432");
    CatalogFieldValueSet(c_gameCatalogEffect, "RegenerativeMicrobesApplyBehavior", "Chance", lv_abathurPlayer, "1");
    CatalogFieldValueSet(c_gameCatalogEffect, "EnvenomedSpikesApplySlowBehavior", "Chance", lv_abathurPlayer, "1");
    CatalogFieldValueSet(c_gameCatalogAbil, "AbathurDeepTunnel", "Cost.Cooldown.TimeUse", lv_abathurPlayer, "4");
    if ((libPVEM_gf_PvEGameDifficulty() == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Heroic)) {
        CatalogFieldValueSet(c_gameCatalogEffect, "AbathurToxicNestApplyEnvenomedNestDamage", "Chance", lv_abathurPlayer, "1");
        CatalogFieldValueSet(c_gameCatalogAbil, "AbathurToxicNest", "Cost.Charge.TimeUse", lv_abathurPlayer, "8");
        CatalogFieldValueSet(c_gameCatalogEffect, "ToxicNestApplySlowBehavior", "Chance", lv_abathurPlayer, "1");
    }

    if ((libPVEM_gf_PvEGameDifficulty() == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Heroic)) {
        CatalogFieldValueSet(c_gameCatalogEffect, "ToxicNestApplySlowBehavior", "Chance", lv_abathurPlayer, "1");
    }

    CatalogFieldValueSet(c_gameCatalogEffect, "EnvenomedSpikesApplySlowBehavior", "Chance", lv_abathurPlayer, "1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_AbathurTalents_Init () {
    libPEB1_gt_AbathurTalents = TriggerCreate("libPEB1_gt_AbathurTalents_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara Talents
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ZagaraTalents_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zagaraPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_zagaraPlayer = libPVEM_gf_PvENPCHeroPlayerFromUnitType(libPVEM_gf_PvENPCHeroUnitType("Zagara"));
    UnitBehaviorAdd(libPVEM_gf_PvENPCHeroUnit("Zagara"), "ZagaraProtectiveCoatingCarry", libPVEM_gf_PvENPCHeroUnit("Zagara"), 1);
    CatalogFieldValueSet(c_gameCatalogEffect, "ZagaraHunterKillerCorrosiveSalivaDamage", "Chance", lv_zagaraPlayer, "1");
    CatalogFieldValueSet(c_gameCatalogAbil, "ZagaraSummonHydralisk", "Cost.Cooldown.TimeUse", lv_zagaraPlayer, "8");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ZagaraTalents_Init () {
    libPEB1_gt_ZagaraTalents = TriggerCreate("libPEB1_gt_ZagaraTalents_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Zerg Heroes
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_InitZergHeroes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string[11] lv_unusedHeroesList;
    int lv_numberOfUnusedTypes;
    int lv_availableIndex;
    int lv_unusedIndex;
    int lv_zergHeroIndex;
    int lv_randomHeroIndex;
    int lv_enemyPlayerIndex;
    const fixed lv_xOffset_C = 0.0;
    const fixed lv_yOffset_C = 60.0;

    // Automatic Variable Declarations
    playergroup auto352685C1_g;
    int auto611053F2_ae;
    const int auto611053F2_ai = 1;
    const int autoA3AEA8C5_ae = 5;
    const int autoA3AEA8C5_ai = 1;
    int auto35E26566_ae;
    const int auto35E26566_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libPEB1_gv_zergHeroLevelBonus = libPVEM_gf_PvEDifficultyValueInt(4, 8);
    libPEB1_gv_zergHeroLevel = (10 + libPEB1_gv_zergHeroLevelBonus);
    libPVEM_gf_PvEUpdateTeamLevel(libGame_gv_teamChaosIndex_C, libPEB1_gv_zergHeroLevel);
    libPEB1_gv_availableHeroTypes[1] = "Dehaka";
    libPEB1_gv_availableHeroTypes[2] = "Butcher";
    libPEB1_gv_availableHeroTypes[3] = "Stukov";
    libPEB1_gv_availableHeroTypes[4] = "Anubarak";
    libPEB1_gv_availableHeroTypes[5] = "Tychus";
    libPEB1_gv_availableHeroTypes[6] = "Diablo";
    libPEB1_gv_availableHeroTypes[7] = "Stitches";
    libPEB1_gv_availableHeroTypes[8] = "Kerrigan";
    libPEB1_gv_availableHeroTypesCount = 8;
    libPEB1_gv_availableHeroTypesDefense[1] = "Murky";
    libPEB1_gv_availableHeroTypesDefense[2] = "Zagara";
    libPEB1_gv_availableHeroTypesDefense[3] = "Abathur";
    libPEB1_gv_availableHeroTypesDefenseCount = 3;
    auto352685C1_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_enemyPlayerIndex = -1;
    while (true) {
        	lv_enemyPlayerIndex = PlayerGroupNextPlayer(auto352685C1_g, lv_enemyPlayerIndex);
        	if (lv_enemyPlayerIndex<0) { break; }
        	CatalogFieldValueSet(c_gameCatalogActor, "HeroAbathur", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "PvEUI/PVEEnemyHeroUnitStatusFrameTemplate_NoBottom");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroAbathur", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        CatalogFieldValueSet(c_gameCatalogActor, "HeroAnubarak", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "PvEUI/PVEEnemyHeroUnitStatusFrameTemplate_NoBottom");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroAnubarak", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        CatalogFieldValueSet(c_gameCatalogActor, "HeroButcher", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "PvEUI/PVEEnemyHeroUnitStatusFrameTemplate");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroButcher", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        CatalogFieldValueSet(c_gameCatalogActor, "HeroDehaka", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "PvEUI/PVEEnemyHeroUnitStatusFrameTemplate_NoBottom");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroDehaka", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        CatalogFieldValueSet(c_gameCatalogActor, "HeroDiablo", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "PvEUI/PVEEnemyHeroUnitStatusFrameTemplate_NoBottom");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroDiablo", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        CatalogFieldValueSet(c_gameCatalogActor, "HeroKerrigan", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "PvEUI/PVEEnemyHeroUnitStatusFrameTemplate");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroKerrigan", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        CatalogFieldValueSet(c_gameCatalogActor, "HeroMurky", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "PvEUI/PVEEnemyHeroUnitStatusFrameTemplate_NoBottom");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroMurky", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        CatalogFieldValueSet(c_gameCatalogActor, "HeroStitches", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "PvEUI/PVEEnemyHeroUnitStatusFrameTemplate");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroStitches", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        CatalogFieldValueSet(c_gameCatalogActor, "HeroStukov", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "PvEUI/PVEEnemyHeroUnitStatusFrameTemplate_NoBottom");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroStukov", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        CatalogFieldValueSet(c_gameCatalogActor, "HeroTychus", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "PvEUI/PVEEnemyHeroUnitStatusFrameTemplate");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroTychus", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        CatalogFieldValueSet(c_gameCatalogActor, "HeroZagara", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "PvEUI/PVEEnemyHeroUnitStatusFrameTemplate");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroZagara", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        libAIAI_gf_HeroAIEnableTalentPicking(lv_enemyPlayerIndex, false);
    }
    TriggerExecute(libPEB1_gt_AbathurInit, true, false);
    lv_unusedIndex = 0;
    auto611053F2_ae = libPEB1_gv_availableHeroTypesCount;
    lv_availableIndex = 1;
    for ( ; ( (auto611053F2_ai >= 0 && lv_availableIndex <= auto611053F2_ae) || (auto611053F2_ai < 0 && lv_availableIndex >= auto611053F2_ae) ) ; lv_availableIndex += auto611053F2_ai ) {
        lv_unusedIndex += 1;
        lv_unusedHeroesList[lv_unusedIndex] = libPEB1_gv_availableHeroTypes[lv_availableIndex];
    }
    lv_numberOfUnusedTypes = lv_unusedIndex;
    lv_zergHeroIndex = 1;
    for ( ; ( (autoA3AEA8C5_ai >= 0 && lv_zergHeroIndex <= autoA3AEA8C5_ae) || (autoA3AEA8C5_ai < 0 && lv_zergHeroIndex >= autoA3AEA8C5_ae) ) ; lv_zergHeroIndex += autoA3AEA8C5_ai ) {
        lv_randomHeroIndex = RandomInt(1, lv_numberOfUnusedTypes);
        libPEB1_gv_zergHeroes[lv_zergHeroIndex].lv_hero = lv_unusedHeroesList[lv_randomHeroIndex];
        auto35E26566_ae = (lv_numberOfUnusedTypes - 1);
        lv_unusedIndex = lv_randomHeroIndex;
        for ( ; ( (auto35E26566_ai >= 0 && lv_unusedIndex <= auto35E26566_ae) || (auto35E26566_ai < 0 && lv_unusedIndex >= auto35E26566_ae) ) ; lv_unusedIndex += auto35E26566_ai ) {
            lv_unusedHeroesList[lv_unusedIndex] = lv_unusedHeroesList[(lv_unusedIndex + 1)];
        }
        lv_numberOfUnusedTypes -= 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_InitZergHeroes_Init () {
    libPEB1_gt_InitZergHeroes = TriggerCreate("libPEB1_gt_InitZergHeroes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Hero Catalog Changes Callback
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ZergHeroCatalogChangesCallback_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_heroHP;
    int lv_player;

    // Automatic Variable Declarations
    string autoA9973246_val;

    // Variable Initialization
    lv_player = libPVEM_gv_pvENPCHeroes[libPVEM_gv_pvEHeroCatalogChangePlayerIndex].lv_player;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA9973246_val = libPVEM_gv_pvENPCHeroes[libPVEM_gv_pvEHeroCatalogChangePlayerIndex].lv_unitType;
    if (autoA9973246_val == "HeroAbathur") {
        libPVEM_gf_PvESetNPCHeroStats("HeroAbathur", lv_player, 1000.0);
    }
    else if (autoA9973246_val == "HeroAnubarak") {
        libPVEM_gf_PvESetNPCHeroStats("HeroAnubarak", lv_player, 2100.0);
        CatalogFieldValueSetFixed(c_gameCatalogAbil, "AnubarakBurrowCharge", "Cost.Cooldown.TimeUse", lv_player, 10.0);
        CatalogFieldValueSetFixed(c_gameCatalogAbil, "AnubarakImpale", "Cost.Cooldown.TimeUse", lv_player, 8.0);
    }
    else if (autoA9973246_val == "HeroButcher") {
        libPVEM_gf_PvESetNPCHeroStats("HeroButcher", lv_player, 2200.0);
        CatalogFieldValueSetFixed(c_gameCatalogAbil, "ButcherLambToTheSlaughter", "Cost.Cooldown.TimeUse", lv_player, 12.0);
    }
    else if (autoA9973246_val == "HeroDehaka") {
        libPVEM_gf_PvESetNPCHeroStats("HeroDehaka", lv_player, 2400.0);
    }
    else if (autoA9973246_val == "HeroDiablo") {
        libPVEM_gf_PvESetNPCHeroStats("HeroDiablo", lv_player, 2600.0);
        CatalogFieldValueSet(c_gameCatalogEffect, "DiabloLightningBreathDamage", "Amount", lv_player, FixedToString(libPVEM_gf_PvEDifficultyValueReal(38.0, 42.0), c_fixedPrecisionAny));
        CatalogFieldValueSetFixed(c_gameCatalogAbil, "DiabloLightningBreath", "Cost.Cooldown.TimeUse", lv_player, 12.0);
    }
    else if (autoA9973246_val == "HeroKerrigan") {
        libPVEM_gf_PvESetNPCHeroStats("HeroKerrigan", lv_player, 1700.0);
    }
    else if (autoA9973246_val == "HeroTychus") {
        libPVEM_gf_PvESetNPCHeroStats("HeroTychus", lv_player, 1750.0);
        CatalogFieldValueSet(c_gameCatalogBehavior, "TychusOdin", "Duration", lv_player, "0");
        CatalogFieldValueSet(c_gameCatalogEffect, "TychusOdinRagnarokMissilesDamage", "Amount", lv_player, FixedToString(libPVEM_gf_PvEDifficultyValueReal(100.0, 120.0), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogEffect, "TychusOdinWeaponDamage", "Amount", lv_player, FixedToString(libPVEM_gf_PvEDifficultyValueReal(120.0, 145.0), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogEffect, "OdinWeaponSplashDamage", "Amount", lv_player, FixedToString(libPVEM_gf_PvEDifficultyValueReal(34.0, 40.0), c_fixedPrecisionAny));
    }
    else if (autoA9973246_val == "HeroMurky") {
        libPVEM_gf_PvESetNPCHeroStats("HeroMurky", lv_player, 800.0);
        CatalogFieldValueSet(c_gameCatalogBehavior, "MurkySafetyBubble", "Duration", lv_player, "3");
        CatalogFieldValueSet(c_gameCatalogAbil, "MurkyOctoGrab", "Cost.Cooldown.TimeUse", lv_player, "12");
        CatalogFieldValueSet(c_gameCatalogAbil, "MurkySafetyBubble", "Cost.Cooldown.TimeUse", lv_player, "12");
    }
    else if (autoA9973246_val == "HeroStitches") {
        libPVEM_gf_PvESetNPCHeroStats("HeroStitches", lv_player, 2200.0);
        CatalogFieldValueSetFixed(c_gameCatalogAbil, "StitchesHook", "Cost.Cooldown.TimeUse", lv_player, 7.0);
        CatalogFieldValueSetFixed(c_gameCatalogAbil, "StitchesGorge", "Cost.Cooldown.TimeUse", lv_player, 12.0);
    }
    else if (autoA9973246_val == "HeroStukov") {
        libPVEM_gf_PvESetNPCHeroStats("HeroStukov", lv_player, 1800.0);
        CatalogFieldValueSet(c_gameCatalogAbil, "StukovFlailingSwipe", "Cost.Charge.TimeUse", lv_player, "15");
    }
    else if (autoA9973246_val == "HeroZagara") {
        libPVEM_gf_PvESetNPCHeroStats("HeroZagara", lv_player, 2000.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ZergHeroCatalogChangesCallback_Init () {
    libPEB1_gt_ZergHeroCatalogChangesCallback = TriggerCreate("libPEB1_gt_ZergHeroCatalogChangesCallback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Hero Spawned
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ZergHeroSpawned_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto1CD73CA3_val;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroNameLabel", libPVEM_gf_PvENPCHeroSpawnedUnit());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libPEB1_gf_PZEZergBossName(libPVEM_gf_PvENPCHeroFromUnitType(UnitGetType(libPVEM_gf_PvENPCHeroSpawnedUnit()))), PlayerGroupAll());
    auto1CD73CA3_val = UnitGetType(libPVEM_gf_PvENPCHeroSpawnedUnit());
    if (auto1CD73CA3_val == "HeroAbathur") {
        UnitBehaviorAddPlayer(libPVEM_gf_PvENPCHeroSpawnedUnit(), "Ultimate2Unlocked", libPVEM_gf_PvENPCHeroSpawnedPlayer(), 1);
        TriggerExecute(libPEB1_gt_AbathurTalents, true, false);
        libPEB1_gf_AbathurAI();
    }
    else if (auto1CD73CA3_val == "HeroButcher") {
        if ((libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamLevel >= 10)) {
            UnitBehaviorAddPlayer(libPVEM_gf_PvENPCHeroSpawnedUnit(), "Ultimate1Unlocked", libPVEM_gf_PvENPCHeroSpawnedPlayer(), 1);
        }

        libPEB1_gf_ApplyButcherTalents(libPVEM_gf_PvENPCHeroSpawnedPlayer());
    }
    else if (auto1CD73CA3_val == "HeroKerrigan") {
        if ((libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamLevel >= 10)) {
            UnitBehaviorAddPlayer(libPVEM_gf_PvENPCHeroSpawnedUnit(), "Ultimate2Unlocked", libPVEM_gf_PvENPCHeroSpawnedPlayer(), 1);
        }

        libPEB1_gf_ApplyKerriganTalents(libPVEM_gf_PvENPCHeroSpawnedPlayer());
    }
    else if (auto1CD73CA3_val == "HeroMurky") {
        libGDHL_gf_HeroMurkyCreateEggAtBaseforPlayer(libPVEM_gf_PvENPCHeroSpawnedPlayer());
        if ((libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamLevel >= 10)) {
            UnitBehaviorAddPlayer(libPVEM_gf_PvENPCHeroSpawnedUnit(), "Ultimate2Unlocked", libPVEM_gf_PvENPCHeroSpawnedPlayer(), 1);
        }

        libPEB1_gf_ApplyMurkyTalents(libPVEM_gf_PvENPCHeroSpawnedPlayer());
        TriggerExecute(libPEB1_gt_MurkyAI, true, false);
        while (!((UnitIsValid(libGame_gv_heroDeathMurkyRespawnEggs[libPVEM_gf_PvENPCHeroSpawnedPlayer()]) == true))) {
            Wait(1.0, c_timeGame);
        }
        libPEB1_gv_murkyEggUnit = libGame_gv_heroDeathMurkyRespawnEggs[libPVEM_gf_PvENPCHeroSpawnedPlayer()];
    }
    else if (auto1CD73CA3_val == "HeroDiablo") {
        if ((libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamLevel >= 10)) {
            UnitBehaviorAddPlayer(libPVEM_gf_PvENPCHeroSpawnedUnit(), "Ultimate2Unlocked", libPVEM_gf_PvENPCHeroSpawnedPlayer(), 1);
        }

        libPEB1_gf_ApplyDiabloTalents(libPVEM_gf_PvENPCHeroSpawnedPlayer());
    }
    else if (auto1CD73CA3_val == "HeroAnubarak") {
        if ((libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamLevel >= 10)) {
            UnitBehaviorAddPlayer(libPVEM_gf_PvENPCHeroSpawnedUnit(), "Ultimate2Unlocked", libPVEM_gf_PvENPCHeroSpawnedPlayer(), 1);
        }

        libPEB1_gf_ApplyAnubArakTalents(libPVEM_gf_PvENPCHeroSpawnedPlayer());
    }
    else if (auto1CD73CA3_val == "HeroTychus") {
        if ((libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamLevel >= 10)) {
            UnitBehaviorAddPlayer(libPVEM_gf_PvENPCHeroSpawnedUnit(), "Ultimate1Unlocked", libPVEM_gf_PvENPCHeroSpawnedPlayer(), 1);
        }

        libPEB1_gf_ApplyTychusTalents(libPVEM_gf_PvENPCHeroSpawnedPlayer());
    }
    else if (auto1CD73CA3_val == "HeroDehaka") {
        if ((libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamLevel >= 10)) {
            UnitBehaviorAddPlayer(libPVEM_gf_PvENPCHeroSpawnedUnit(), "Ultimate1Unlocked", libPVEM_gf_PvENPCHeroSpawnedPlayer(), 1);
            UnitBehaviorAddPlayer(libPVEM_gf_PvENPCHeroSpawnedUnit(), "Ultimate2Unlocked", libPVEM_gf_PvENPCHeroSpawnedPlayer(), 1);
        }

        libPEB1_gf_ApplyDehakaTalents(libPVEM_gf_PvENPCHeroSpawnedPlayer());
    }
    else if (auto1CD73CA3_val == "HeroZagara") {
        if ((libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamLevel >= 10)) {
            UnitBehaviorAddPlayer(libPVEM_gf_PvENPCHeroSpawnedUnit(), "Ultimate1Unlocked", libPVEM_gf_PvENPCHeroSpawnedPlayer(), 1);
        }

        TriggerExecute(libPEB1_gt_ZagaraTalents, true, false);
        TriggerExecute(libPEB1_gt_ZagaraAI, true, false);
    }
    else if (auto1CD73CA3_val == "HeroStitches") {
        if ((libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamLevel >= 10)) {
            UnitBehaviorAddPlayer(libPVEM_gf_PvENPCHeroSpawnedUnit(), "Ultimate2Unlocked", libPVEM_gf_PvENPCHeroSpawnedPlayer(), 1);
        }

        libPEB1_gf_ApplyStitchesTalents(libPVEM_gf_PvENPCHeroSpawnedPlayer());
    }
    else if (auto1CD73CA3_val == "HeroStukov") {
        if ((libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamLevel >= 10)) {
            UnitBehaviorAddPlayer(libPVEM_gf_PvENPCHeroSpawnedUnit(), "Ultimate1Unlocked", libPVEM_gf_PvENPCHeroSpawnedPlayer(), 1);
            UnitBehaviorAddPlayer(libPVEM_gf_PvENPCHeroSpawnedUnit(), "Ultimate2Unlocked", libPVEM_gf_PvENPCHeroSpawnedPlayer(), 1);
        }

        libPEB1_gf_ApplyStukovTalents(libPVEM_gf_PvENPCHeroSpawnedPlayer());
    }
    else {
    }
    if ((libPVEM_gf_PvEGameDifficulty() == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Normal)) {
        UnitBehaviorAddPlayer(libPVEM_gf_PvENPCHeroSpawnedUnit(), libPEB1_gv_zergHeroBalanceBehavior[1], libPVEM_gf_PvENPCHeroSpawnedPlayer(), 1);
    }
    else {
        UnitBehaviorAddPlayer(libPVEM_gf_PvENPCHeroSpawnedUnit(), libPEB1_gv_zergHeroBalanceBehavior[2], libPVEM_gf_PvENPCHeroSpawnedPlayer(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ZergHeroSpawned_Init () {
    libPEB1_gt_ZergHeroSpawned = TriggerCreate("libPEB1_gt_ZergHeroSpawned_Func");
    libPVEM_gf_PvENPCHeroSpawned(libPEB1_gt_ZergHeroSpawned);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Hero Dies
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ZergHeroDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_killedHero;
    int lv_itHero;
    text lv_killingPlayerName;
    text lv_killingPlayerUnitName;

    // Automatic Variable Declarations
    const int auto4B625413_ae = 5;
    const int auto4B625413_ai = 1;
    unitgroup autoF250EC3F_g;
    int autoF250EC3F_u;
    unit autoF250EC3F_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gf_TeamNumberOfPlayer(libGame_gf_HeroKilledPlayer()) == libGame_gv_teamChaosIndex_C))) {
            return false;
        }

        if (!((libGame_gf_TeamNumberOfPlayer(libGame_gf_HeroKilledKillingPlayer()) == libGame_gv_teamOrderIndex_C))) {
            return false;
        }

        if (!(((libGame_gf_HeroKilledKillingPlayer() >= 1) && (libGame_gf_HeroKilledKillingPlayer() <= libCore_gv_cOMPUTER_TeamOrder)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gf_HeroKilledKillingPlayer() == 11)) {
        lv_killingPlayerName = StringToText("");
        lv_killingPlayerUnitName = StringExternal("Param/Value/lib_PEB1_950F59A9");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_PEB1_A2837647", "A", PlayerName(libGame_gf_HeroKilledKillingPlayer()));
        lv_killingPlayerName = TextExpressionAssemble("Param/Expression/lib_PEB1_A2837647");
        TextExpressionSetToken("Param/Expression/lib_PEB1_F9D36802", "A", UnitGetName(libGame_gv_players[libGame_gf_HeroKilledKillingPlayer()].lv_heroUnit));
        lv_killingPlayerUnitName = TextExpressionAssemble("Param/Expression/lib_PEB1_F9D36802");
    }
    lv_killedHero = PlayerHero(libGame_gf_HeroKilledPlayer());
    libGame_gf_HeroRefreshCooldowns(libGame_gf_HeroKilledPlayer(), false);
    lv_itHero = 1;
    for ( ; ( (auto4B625413_ai >= 0 && lv_itHero <= auto4B625413_ae) || (auto4B625413_ai < 0 && lv_itHero >= auto4B625413_ae) ) ; lv_itHero += auto4B625413_ai ) {
        if ((libPEB1_gv_zergHeroes[lv_itHero].lv_hero == lv_killedHero)) {
            if ((libPEB1_gv_zergHeroes[lv_itHero].lv_hero == "Murky") && (UnitIsValid(libPEB1_gv_murkyEggUnit) == true)) {
                TextExpressionSetToken("Param/Expression/lib_PEB1_37F509BA", "A", lv_killingPlayerName);
                TextExpressionSetToken("Param/Expression/lib_PEB1_37F509BA", "B", lv_killingPlayerUnitName);
                TextExpressionSetToken("Param/Expression/lib_PEB1_37F509BA", "C", libPEB1_gf_PZEZergBossName(lv_killedHero));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_PEB1_37F509BA"));
                TimerStart(libPEB1_gv_murkyDeathTimer, libPEB1_gv_murkyRespawnDelay, false, c_timeGame);
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_PEB1_98EF9FE6", "A", lv_killingPlayerName);
                TextExpressionSetToken("Param/Expression/lib_PEB1_98EF9FE6", "B", lv_killingPlayerUnitName);
                TextExpressionSetToken("Param/Expression/lib_PEB1_98EF9FE6", "C", libPEB1_gf_PZEZergBossName(lv_killedHero));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_PEB1_98EF9FE6"));
                libPEB1_gf_ZergHeroSlainQ(UnitGetType(libGame_gf_HeroKilledUnit()));
                TimerStart(libPEB1_gv_zergHeroes[lv_itHero].lv_respawnTimer, libPEB1_gv_zergHeroRespawnTime, false, c_timeGame);
                libPEB1_gf_TurnOnOffZergHeroAI(libPVEM_gf_PvENPCHeroUnit(libPEB1_gv_zergHeroes[lv_itHero].lv_hero), false);
                libPEB1_gv_zergHeroes[lv_itHero].lv_state = libPEB1_ge_ZergHeroState_Dead;
                libPEB1_gf_PrepareTheNextHero(lv_itHero);
                if ((libPEB1_gv_zergHeroes[lv_itHero].lv_hero == "Murky")) {
                    if ((libPEB1_gv_noMurkySecondChance == false)) {
                        libPVEM_gf_PvEPickupSpawnPickup("PVESecondChancePickup", libGame_gf_HeroKilledLocation(), false);
                    }

                }
                else {
                    if ((libPEB1_gv_zergHeroes[lv_itHero].lv_hero == "Abathur")) {
                        if ((libPEB1_gv_noAbathurSecondChance == false)) {
                            libPVEM_gf_PvEPickupSpawnPickup("PVESecondChancePickup", libGame_gf_HeroKilledLocation(), false);
                        }

                    }
                    else {
                        if ((libPEB1_gv_zergHeroes[lv_itHero].lv_hero == "Zagara")) {
                            if ((libPEB1_gv_noAbathurSecondChance == false)) {
                                libPEB1_gf_SpawnRandomPickup(libGame_gf_HeroKilledLocation());
                            }

                        }
                        else {
                            libPEB1_gf_SpawnRandomPickup(libGame_gf_HeroKilledLocation());
                        }
                    }
                }
            }
            if ((libPEB1_gv_zergHeroes[lv_itHero].lv_hero == "Abathur")) {
                autoF250EC3F_g = UnitGroup("AbathurEvolvedMonstrosity", libGame_gf_HeroKilledPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoF250EC3F_u = UnitGroupCount(autoF250EC3F_g, c_unitCountAll);
                for (;; autoF250EC3F_u -= 1) {
                    autoF250EC3F_var = UnitGroupUnitFromEnd(autoF250EC3F_g, autoF250EC3F_u);
                    if (autoF250EC3F_var == null) { break; }
                    UnitCreateEffectUnit(autoF250EC3F_var, "Kill", autoF250EC3F_var);
                }
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ZergHeroDies_Init () {
    libPEB1_gt_ZergHeroDies = TriggerCreate("libPEB1_gt_ZergHeroDies_Func");
    libGame_gf_HeroKilled(libPEB1_gt_ZergHeroDies);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Waves - Basic
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ZergWavesBasic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[4] lv_laneArray;
    int lv_laneIndex;

    // Automatic Variable Declarations
    int autoA2528BCF_n;
    int autoA2528BCF_i;
    const int autoB62CAC41_ae = 2;
    const int autoB62CAC41_ai = 1;
    int auto47FBE5FB_val;
    int auto094B3AFE_n;
    int auto094B3AFE_i;
    const int auto5936D304_ae = 2;
    const int auto5936D304_ai = 1;
    int auto3D11F9C4_val;
    int auto4470F3B8_n;
    int auto4470F3B8_i;
    const int autoD45FF848_ae = 2;
    const int autoD45FF848_ai = 1;
    int auto930ADAB6_val;
    int autoF6C0A72F_n;
    int autoF6C0A72F_i;
    const int autoFE037485_ae = 2;
    const int autoFE037485_ai = 1;
    int auto2776965B_val;
    int auto43D95471_n;
    int auto43D95471_i;
    const int auto6CF14C1E_ae = 2;
    const int auto6CF14C1E_ai = 1;
    int auto486DAE9B_val;
    const int auto6F766FA4_ae = 2;
    const int auto6F766FA4_ai = 1;
    int auto4E35D08F_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libPEB1_gv_disableZergSpawning == true)) {
        return true;
    }

    lv_laneArray[1] = libPEB1_ge_Lane_Bottom;
    lv_laneArray[2] = libPEB1_ge_Lane_Top;
    autoA2528BCF_n = libPEB1_gv_basicWaveEscalationCount;
    for (autoA2528BCF_i = 1; autoA2528BCF_i <= autoA2528BCF_n; autoA2528BCF_i += 1) {
        while (!((UnitGroupCount(libPEB1_gv_globalAttackGroup, c_unitCountAlive) < 150))) {
            Wait(1.0, c_timeGame);
        }
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((libPEB1_gv_holdout3_Started == true)) {
            break;
        }

        lv_laneIndex = 1;
        for ( ; ( (autoB62CAC41_ai >= 0 && lv_laneIndex <= autoB62CAC41_ae) || (autoB62CAC41_ai < 0 && lv_laneIndex >= autoB62CAC41_ae) ) ; lv_laneIndex += autoB62CAC41_ai ) {
            auto47FBE5FB_val = RandomInt(1, 3);
            if (auto47FBE5FB_val == 1) {
                libPEB1_gf_CreateBasicAttackWave("ZergZergling", "ZergHydralisk", "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(6, 8), libPVEM_gf_PvEDifficultyValueInt(1, 2), libPVEM_gf_PvEDifficultyValueInt(0, 0), lv_laneArray[lv_laneIndex]);
            }
            else if (auto47FBE5FB_val == 2) {
                libPEB1_gf_CreateBasicAttackWave("ZergZergling", "ZergHydralisk", "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(6, 8), libPVEM_gf_PvEDifficultyValueInt(0, 0), libPVEM_gf_PvEDifficultyValueInt(1, 2), lv_laneArray[lv_laneIndex]);
            }
            else if (auto47FBE5FB_val == 3) {
                libPEB1_gf_CreateBasicAttackWave("ZergZergling", "ZergHydralisk", "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(2, 0), libPVEM_gf_PvEDifficultyValueInt(1, 2), libPVEM_gf_PvEDifficultyValueInt(1, 2), lv_laneArray[lv_laneIndex]);
            }
            else {
            }
            Wait(5.0, c_timeGame);
        }
        Wait((libPEB1_gv_basicWaveDelay - 10.0), c_timeGame);
    }
    auto094B3AFE_n = libPEB1_gv_basicWaveEscalationCount;
    for (auto094B3AFE_i = 1; auto094B3AFE_i <= auto094B3AFE_n; auto094B3AFE_i += 1) {
        while (!((UnitGroupCount(libPEB1_gv_globalAttackGroup, c_unitCountAlive) < 150))) {
            Wait(1.0, c_timeGame);
        }
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((libPEB1_gv_holdout3_Started == true)) {
            break;
        }

        lv_laneIndex = 1;
        for ( ; ( (auto5936D304_ai >= 0 && lv_laneIndex <= auto5936D304_ae) || (auto5936D304_ai < 0 && lv_laneIndex >= auto5936D304_ae) ) ; lv_laneIndex += auto5936D304_ai ) {
            auto3D11F9C4_val = RandomInt(1, 3);
            if (auto3D11F9C4_val == 1) {
                libPEB1_gf_CreateBasicAttackWave("ZergZergling", "ZergHydralisk", "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(8, 12), libPVEM_gf_PvEDifficultyValueInt(2, 3), libPVEM_gf_PvEDifficultyValueInt(0, 0), lv_laneArray[lv_laneIndex]);
            }
            else if (auto3D11F9C4_val == 2) {
                libPEB1_gf_CreateBasicAttackWave("ZergZergling", "ZergHydralisk", "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(8, 12), libPVEM_gf_PvEDifficultyValueInt(0, 0), libPVEM_gf_PvEDifficultyValueInt(2, 3), lv_laneArray[lv_laneIndex]);
            }
            else if (auto3D11F9C4_val == 3) {
                libPEB1_gf_CreateBasicAttackWave("ZergZergling", "ZergHydralisk", "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(0, 0), libPVEM_gf_PvEDifficultyValueInt(2, 3), libPVEM_gf_PvEDifficultyValueInt(1, 2), lv_laneArray[lv_laneIndex]);
            }
            else {
            }
            Wait(5.0, c_timeGame);
        }
        Wait((libPEB1_gv_basicWaveDelay - 10.0), c_timeGame);
    }
    auto4470F3B8_n = libPEB1_gv_basicWaveEscalationCount;
    for (auto4470F3B8_i = 1; auto4470F3B8_i <= auto4470F3B8_n; auto4470F3B8_i += 1) {
        while (!((UnitGroupCount(libPEB1_gv_globalAttackGroup, c_unitCountAlive) < 150))) {
            Wait(1.0, c_timeGame);
        }
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((libPEB1_gv_holdout3_Started == true)) {
            break;
        }

        lv_laneIndex = 1;
        for ( ; ( (autoD45FF848_ai >= 0 && lv_laneIndex <= autoD45FF848_ae) || (autoD45FF848_ai < 0 && lv_laneIndex >= autoD45FF848_ae) ) ; lv_laneIndex += autoD45FF848_ai ) {
            auto930ADAB6_val = RandomInt(1, 3);
            if (auto930ADAB6_val == 1) {
                libPEB1_gf_CreateBasicAttackWave("ZergZergling", "ZergBaneling", "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(12, 16), libPVEM_gf_PvEDifficultyValueInt(6, 8), libPVEM_gf_PvEDifficultyValueInt(0, 0), lv_laneArray[lv_laneIndex]);
            }
            else if (auto930ADAB6_val == 2) {
                libPEB1_gf_CreateBasicAttackWave("ZergZergling", "ZergHydralisk", "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(0, 0), libPVEM_gf_PvEDifficultyValueInt(2, 3), libPVEM_gf_PvEDifficultyValueInt(2, 3), lv_laneArray[lv_laneIndex]);
            }
            else if (auto930ADAB6_val == 3) {
                libPEB1_gf_CreateBasicAttackWave("ZergZergling", "ZergMutalisk", "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(16, 24), libPVEM_gf_PvEDifficultyValueInt(1, 2), libPVEM_gf_PvEDifficultyValueInt(0, 0), lv_laneArray[lv_laneIndex]);
            }
            else {
            }
            Wait(5.0, c_timeGame);
        }
        Wait((libPEB1_gv_basicWaveDelay - 10.0), c_timeGame);
    }
    autoF6C0A72F_n = libPEB1_gv_basicWaveEscalationCount;
    for (autoF6C0A72F_i = 1; autoF6C0A72F_i <= autoF6C0A72F_n; autoF6C0A72F_i += 1) {
        while (!((UnitGroupCount(libPEB1_gv_globalAttackGroup, c_unitCountAlive) < 150))) {
            Wait(1.0, c_timeGame);
        }
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((libPEB1_gv_holdout3_Started == true)) {
            break;
        }

        lv_laneIndex = 1;
        for ( ; ( (autoFE037485_ai >= 0 && lv_laneIndex <= autoFE037485_ae) || (autoFE037485_ai < 0 && lv_laneIndex >= autoFE037485_ae) ) ; lv_laneIndex += autoFE037485_ai ) {
            auto2776965B_val = RandomInt(1, 3);
            if (auto2776965B_val == 1) {
                libPEB1_gf_CreateBasicAttackWave("ZergZergling", "ZergUltralisk", "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(12, 24), libPVEM_gf_PvEDifficultyValueInt(1, 1), libPVEM_gf_PvEDifficultyValueInt(0, 0), lv_laneArray[lv_laneIndex]);
            }
            else if (auto2776965B_val == 2) {
                libPEB1_gf_CreateBasicAttackWave("ZergBaneling", "ZergMutalisk", "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(6, 8), libPVEM_gf_PvEDifficultyValueInt(2, 4), libPVEM_gf_PvEDifficultyValueInt(0, 0), lv_laneArray[lv_laneIndex]);
            }
            else if (auto2776965B_val == 3) {
                libPEB1_gf_CreateBasicAttackWave("ZergGuardian", "ZergHydralisk", "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(1, 1), libPVEM_gf_PvEDifficultyValueInt(3, 3), libPVEM_gf_PvEDifficultyValueInt(0, 2), lv_laneArray[lv_laneIndex]);
            }
            else {
            }
            Wait(5.0, c_timeGame);
        }
        Wait((libPEB1_gv_basicWaveDelay - 10.0), c_timeGame);
    }
    auto43D95471_n = libPEB1_gv_basicWaveEscalationCount;
    for (auto43D95471_i = 1; auto43D95471_i <= auto43D95471_n; auto43D95471_i += 1) {
        while (!((UnitGroupCount(libPEB1_gv_globalAttackGroup, c_unitCountAlive) < 150))) {
            Wait(1.0, c_timeGame);
        }
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((libPEB1_gv_holdout3_Started == true)) {
            break;
        }

        lv_laneIndex = 1;
        for ( ; ( (auto6CF14C1E_ai >= 0 && lv_laneIndex <= auto6CF14C1E_ae) || (auto6CF14C1E_ai < 0 && lv_laneIndex >= auto6CF14C1E_ae) ) ; lv_laneIndex += auto6CF14C1E_ai ) {
            auto486DAE9B_val = RandomInt(1, 3);
            if (auto486DAE9B_val == 1) {
                libPEB1_gf_CreateBasicAttackWave("ZergGuardian", "ZergUltralisk", "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(1, 2), libPVEM_gf_PvEDifficultyValueInt(1, 1), libPVEM_gf_PvEDifficultyValueInt(1, 1), lv_laneArray[lv_laneIndex]);
            }
            else if (auto486DAE9B_val == 2) {
                libPEB1_gf_CreateBasicAttackWave("ZergZergling", "ZergBaneling", "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(16, 24), libPVEM_gf_PvEDifficultyValueInt(6, 8), libPVEM_gf_PvEDifficultyValueInt(0, 0), lv_laneArray[lv_laneIndex]);
            }
            else if (auto486DAE9B_val == 3) {
                libPEB1_gf_CreateBasicAttackWave("ZergGuardian", "ZergHydralisk", "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(0, 0), libPVEM_gf_PvEDifficultyValueInt(3, 4), libPVEM_gf_PvEDifficultyValueInt(3, 4), lv_laneArray[lv_laneIndex]);
            }
            else {
            }
            Wait(5.0, c_timeGame);
        }
        Wait((libPEB1_gv_basicWaveDelay - 10.0), c_timeGame);
    }
    while (true) {
        while (!((UnitGroupCount(libPEB1_gv_globalAttackGroup, c_unitCountAlive) < 150))) {
            Wait(1.0, c_timeGame);
        }
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        lv_laneIndex = 1;
        for ( ; ( (auto6F766FA4_ai >= 0 && lv_laneIndex <= auto6F766FA4_ae) || (auto6F766FA4_ai < 0 && lv_laneIndex >= auto6F766FA4_ae) ) ; lv_laneIndex += auto6F766FA4_ai ) {
            auto4E35D08F_val = RandomInt(1, 3);
            if (auto4E35D08F_val == 1) {
                libPEB1_gf_CreateBasicAttackWave("ZergGuardian", "ZergUltralisk", "ZergMutalisk", libPVEM_gf_PvEDifficultyValueInt(2, 2), libPVEM_gf_PvEDifficultyValueInt(1, 2), libPVEM_gf_PvEDifficultyValueInt(3, 4), lv_laneArray[lv_laneIndex]);
            }
            else if (auto4E35D08F_val == 2) {
                libPEB1_gf_CreateBasicAttackWave("ZergZergling", "ZergBaneling", "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(16, 24), libPVEM_gf_PvEDifficultyValueInt(6, 8), libPVEM_gf_PvEDifficultyValueInt(3, 4), lv_laneArray[lv_laneIndex]);
            }
            else if (auto4E35D08F_val == 3) {
                libPEB1_gf_CreateBasicAttackWave("ZergUltralisk", "ZergHydralisk", "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(1, 1), libPVEM_gf_PvEDifficultyValueInt(4, 6), libPVEM_gf_PvEDifficultyValueInt(3, 5), lv_laneArray[lv_laneIndex]);
            }
            else {
            }
            Wait(5.0, c_timeGame);
        }
        Wait((libPEB1_gv_basicWaveDelay - 10.0), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ZergWavesBasic_Init () {
    libPEB1_gt_ZergWavesBasic = TriggerCreate("libPEB1_gt_ZergWavesBasic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Zerg Camps
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_CreateZergCamps_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libPEB1_gv_disableZergSpawning == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(8, 12), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(3, 4), RegionFromName("Zerg Camp 1"));
    Wait(1.25, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(12, 16), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(3, 4), RegionFromName("Zerg Camp 2"));
    Wait(1.0, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(8, 12), "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 3"));
    Wait(0.875, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(8, 12), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 4"));
    Wait(0.75, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergRoach", libPVEM_gf_PvEDifficultyValueInt(6, 8), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 5"));
    Wait(0.375, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(6, 8), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 6"));
    Wait(0.9375, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergBaneling", libPVEM_gf_PvEDifficultyValueInt(6, 8), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 7"));
    Wait(0.6875, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergRoach", libPVEM_gf_PvEDifficultyValueInt(2, 3), "ZergZergling", libPVEM_gf_PvEDifficultyValueInt(8, 12), RegionFromName("Zerg Camp 8"));
    Wait(0.375, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(4, 6), "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 9"));
    Wait(0.75, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergMutalisk", libPVEM_gf_PvEDifficultyValueInt(3, 4), "ZergGuardian", libPVEM_gf_PvEDifficultyValueInt(1, 2), RegionFromName("Zerg Camp 10"));
    Wait(0.5625, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(8, 12), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 11"));
    Wait(1.25, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergUltralisk", libPVEM_gf_PvEDifficultyValueInt(1, 1), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(4, 6), RegionFromName("Zerg Camp 12"));
    Wait(1.25, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(6, 8), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(0, 0), RegionFromName("Zerg Camp 13"));
    Wait(0.25, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(6, 8), "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(3, 4), RegionFromName("Zerg Camp 14"));
    Wait(0.9375, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(8, 12), "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(3, 4), RegionFromName("Zerg Camp 15"));
    Wait(0.75, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(3, 4), "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 16"));
    Wait(0.5, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergMutalisk", libPVEM_gf_PvEDifficultyValueInt(4, 6), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(0, 0), RegionFromName("Zerg Camp 17"));
    Wait(1.125, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(8, 12), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 18"));
    Wait(1.0, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(8, 12), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(3, 4), RegionFromName("Zerg Camp 19"));
    Wait(0.5, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergRoach", libPVEM_gf_PvEDifficultyValueInt(2, 3), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 20"));
    Wait(0.5, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(6, 8), "ZergBaneling", libPVEM_gf_PvEDifficultyValueInt(4, 6), RegionFromName("Zerg Camp 21"));
    Wait(0.75, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergRoach", libPVEM_gf_PvEDifficultyValueInt(2, 3), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(3, 4), RegionFromName("Zerg Camp 22"));
    Wait(0.375, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(6, 8), "ZergBaneling", libPVEM_gf_PvEDifficultyValueInt(4, 6), RegionFromName("Zerg Camp 23"));
    Wait(0.625, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergBaneling", libPVEM_gf_PvEDifficultyValueInt(6, 8), "ZergZergling", libPVEM_gf_PvEDifficultyValueInt(8, 12), RegionFromName("Zerg Camp 24"));
    Wait(1.5, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergMutalisk", libPVEM_gf_PvEDifficultyValueInt(3, 4), "ZergGuardian", libPVEM_gf_PvEDifficultyValueInt(1, 1), RegionFromName("Zerg Camp 25"));
    Wait(0.375, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergRoach", libPVEM_gf_PvEDifficultyValueInt(3, 4), "ZergZergling", libPVEM_gf_PvEDifficultyValueInt(6, 8), RegionFromName("Zerg Camp 26"));
    Wait(0.875, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergMutalisk", libPVEM_gf_PvEDifficultyValueInt(3, 4), "ZergBaneling", libPVEM_gf_PvEDifficultyValueInt(8, 12), RegionFromName("Zerg Camp 27"));
    Wait(0.5, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(12, 16), "ZergUltralisk", libPVEM_gf_PvEDifficultyValueInt(1, 1), RegionFromName("Zerg Camp 28"));
    Wait(1.5625, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergRoach", libPVEM_gf_PvEDifficultyValueInt(2, 3), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 29"));
    Wait(0.375, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergRoach", libPVEM_gf_PvEDifficultyValueInt(1, 2), "ZergBaneling", libPVEM_gf_PvEDifficultyValueInt(6, 8), RegionFromName("Zerg Camp 30"));
    Wait(0.625, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(12, 16), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 31"));
    Wait(1.1875, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergUltralisk", libPVEM_gf_PvEDifficultyValueInt(1, 1), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(3, 6), RegionFromName("Zerg Camp 32"));
    Wait(0.5, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergBaneling", libPVEM_gf_PvEDifficultyValueInt(6, 8), "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(1, 2), RegionFromName("Zerg Camp 33"));
    Wait(0.625, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergMutalisk", libPVEM_gf_PvEDifficultyValueInt(3, 4), "ZergGuardian", libPVEM_gf_PvEDifficultyValueInt(1, 2), RegionFromName("Zerg Camp 34"));
    Wait(0.375, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(3, 4), "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(3, 4), RegionFromName("Zerg Camp 35"));
    Wait(0.375, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergMutalisk", libPVEM_gf_PvEDifficultyValueInt(4, 6), "ZergBaneling", libPVEM_gf_PvEDifficultyValueInt(6, 8), RegionFromName("Zerg Camp 36"));
    Wait(0.5, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(6, 8), "ZergUltralisk", libPVEM_gf_PvEDifficultyValueInt(1, 1), RegionFromName("Zerg Camp 37"));
    Wait(0.5625, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(5, 7), "ZergUltralisk", libPVEM_gf_PvEDifficultyValueInt(1, 1), RegionFromName("Zerg Camp 38"));
    Wait(0.5, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(8, 12), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 39"));
    Wait(0.75, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(4, 6), "ZergUltralisk", libPVEM_gf_PvEDifficultyValueInt(0, 0), RegionFromName("Zerg Camp 40"));
    Wait(0.5, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergMutalisk", libPVEM_gf_PvEDifficultyValueInt(4, 6), "ZergGuardian", libPVEM_gf_PvEDifficultyValueInt(1, 2), RegionFromName("Zerg Camp 41"));
    Wait(0.625, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(6, 8), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 42"));
    Wait(0.6875, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(6, 8), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(1, 2), RegionFromName("Zerg Camp 43"));
    Wait(0.625, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(8, 12), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(0, 0), RegionFromName("Zerg Camp 44"));
    Wait(0.75, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergMutalisk", libPVEM_gf_PvEDifficultyValueInt(3, 4), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(0, 0), RegionFromName("Zerg Camp 45"));
    Wait(0.375, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(8, 12), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(3, 4), RegionFromName("Zerg Camp 46"));
    Wait(1.25, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(4, 6), "ZergBaneling", libPVEM_gf_PvEDifficultyValueInt(6, 8), RegionFromName("Zerg Camp 47"));
    Wait(0.375, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(2, 4), "ZergUltralisk", libPVEM_gf_PvEDifficultyValueInt(1, 1), RegionFromName("Zerg Camp 48"));
    Wait(0.3125, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(1, 2), "ZergZergling", libPVEM_gf_PvEDifficultyValueInt(8, 12), RegionFromName("Zerg Camp 49"));
    Wait(0.5, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergRoach", libPVEM_gf_PvEDifficultyValueInt(3, 4), "ZergZergling", libPVEM_gf_PvEDifficultyValueInt(6, 8), RegionFromName("Zerg Camp 50"));
    Wait(0.625, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergBaneling", libPVEM_gf_PvEDifficultyValueInt(4, 6), "ZergZergling", libPVEM_gf_PvEDifficultyValueInt(8, 12), RegionFromName("Zerg Camp 51"));
    Wait(0.5, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergRoach", libPVEM_gf_PvEDifficultyValueInt(2, 3), "ZergZergling", libPVEM_gf_PvEDifficultyValueInt(6, 8), RegionFromName("Zerg Camp 52"));
    Wait(0.625, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergRoach", libPVEM_gf_PvEDifficultyValueInt(2, 3), "ZergZergling", libPVEM_gf_PvEDifficultyValueInt(8, 12), RegionFromName("Zerg Camp 53"));
    Wait(0.6875, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergRoach", libPVEM_gf_PvEDifficultyValueInt(2, 3), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(3, 4), RegionFromName("Zerg Camp 54"));
    Wait(0.375, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(8, 12), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 55"));
    Wait(0.9375, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(16, 24), "ZergBaneling", libPVEM_gf_PvEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 56"));
    Wait(1.6875, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergZergling", libPVEM_gf_PvEDifficultyValueInt(8, 12), "ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(4, 6), RegionFromName("Zerg Camp 57"));
    Wait(1.125, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergRoach", libPVEM_gf_PvEDifficultyValueInt(4, 6), "ZergUltralisk", libPVEM_gf_PvEDifficultyValueInt(1, 1), RegionFromName("Zerg Camp 58"));
    Wait(0.4375, c_timeGame);
    libPEB1_gf_CreateZergCamp("ZergHydralisk", libPVEM_gf_PvEDifficultyValueInt(3, 4), "ZergRoach", libPVEM_gf_PvEDifficultyValueInt(3, 4), RegionFromName("Zerg Camp 59"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_CreateZergCamps_Init () {
    libPEB1_gt_CreateZergCamps = TriggerCreate("libPEB1_gt_CreateZergCamps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatchery Defense
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_HatcheryDefense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_hatcheryIndex;
    unitgroup lv_nearbyUnits;
    unitgroup lv_idleUnits;

    // Automatic Variable Declarations
    int auto4066ED68_ae;
    const int auto4066ED68_ai = 1;
    unitgroup autoCCC6C1D7_g;
    int autoCCC6C1D7_u;
    unit autoCCC6C1D7_var;
    unitgroup autoAADBBED7_g;
    int autoAADBBED7_u;
    unit autoAADBBED7_var;
    unitgroup auto129BC66A_g;
    int auto129BC66A_u;
    unit auto129BC66A_var;

    // Variable Initialization
    lv_nearbyUnits = UnitGroupEmpty();
    lv_idleUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_idleUnits = UnitGroupIdle(libCore_gv_cOMPUTER_TeamChaos, false);
    auto4066ED68_ae = libPEB1_gv_hatcheryCount;
    lv_hatcheryIndex = 1;
    for ( ; ( (auto4066ED68_ai >= 0 && lv_hatcheryIndex <= auto4066ED68_ae) || (auto4066ED68_ai < 0 && lv_hatcheryIndex >= auto4066ED68_ae) ) ; lv_hatcheryIndex += auto4066ED68_ai ) {
        if ((UnitIsAlive(libPEB1_gv_hatcheries[lv_hatcheryIndex].lv_structure) == true)) {
            lv_nearbyUnits = libPEB1_gf_HeroicOrderUnitsinRegion(libPEB1_gv_hatcheries[lv_hatcheryIndex].lv_defenseRegion);
            if ((libPEB1_gv_hatcheries[lv_hatcheryIndex].lv_aI_On == false)) {
                if ((UnitGroupCount(lv_nearbyUnits, c_unitCountAlive) > 0)) {
                    libPEB1_gv_hatcheries[lv_hatcheryIndex].lv_aI_On = true;
                    auto129BC66A_g = libPEB1_gv_hatcheries[lv_hatcheryIndex].lv_defenderGroup;
                    auto129BC66A_u = UnitGroupCount(auto129BC66A_g, c_unitCountAll);
                    for (;; auto129BC66A_u -= 1) {
                        auto129BC66A_var = UnitGroupUnitFromEnd(auto129BC66A_g, auto129BC66A_u);
                        if (auto129BC66A_var == null) { break; }
                        UnitIssueOrder(auto129BC66A_var, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_nearbyUnits, UnitGetPosition(auto129BC66A_var)))), c_orderQueueReplace);
                        libPEB1_gf_TurnOnOffZergMinionAI(auto129BC66A_var, true);
                    }
                    if ((UnitGroupCount(libPEB1_gv_hatcheries[lv_hatcheryIndex].lv_defenderGroup, c_unitCountAlive) < libPVEM_gf_PvEDifficultyValueInt(6, 8))) {
                        libPEB1_gf_SpawnZergDefendersforHatchery(lv_hatcheryIndex, lv_nearbyUnits);
                    }

                }
                else {
                    autoAADBBED7_g = libPEB1_gv_hatcheries[lv_hatcheryIndex].lv_defenderGroup;
                    autoAADBBED7_u = UnitGroupCount(autoAADBBED7_g, c_unitCountAll);
                    for (;; autoAADBBED7_u -= 1) {
                        autoAADBBED7_var = UnitGroupUnitFromEnd(autoAADBBED7_g, autoAADBBED7_u);
                        if (autoAADBBED7_var == null) { break; }
                        if ((libNtve_gf_UnitInRegion(autoAADBBED7_var, libPEB1_gv_hatcheries[lv_hatcheryIndex].lv_defenseRegion) == false)) {
                            if ((UnitGroupHasUnit(lv_idleUnits, autoAADBBED7_var) == true)) {
                                UnitIssueOrder(autoAADBBED7_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(libPEB1_gv_hatcheries[lv_hatcheryIndex].lv_homeRegion)), c_orderQueueReplace);
                            }

                        }
                        else {
                            if ((RandomInt(1, 8) == 1)) {
                                UnitIssueOrder(autoAADBBED7_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(libPEB1_gv_hatcheries[lv_hatcheryIndex].lv_homeRegion)), c_orderQueueReplace);
                            }

                        }
                    }
                }
            }
            else {
                if ((UnitGroupCount(lv_nearbyUnits, c_unitCountAlive) > 0)) {
                    if ((UnitGroupCount(libPEB1_gv_hatcheries[lv_hatcheryIndex].lv_defenderGroup, c_unitCountAlive) < libPVEM_gf_PvEDifficultyValueInt(6, 8))) {
                        libPEB1_gf_SpawnZergDefendersforHatchery(lv_hatcheryIndex, lv_nearbyUnits);
                    }

                }
                else {
                    libPEB1_gv_hatcheries[lv_hatcheryIndex].lv_aI_On = false;
                    autoCCC6C1D7_g = libPEB1_gv_hatcheries[lv_hatcheryIndex].lv_defenderGroup;
                    autoCCC6C1D7_u = UnitGroupCount(autoCCC6C1D7_g, c_unitCountAll);
                    for (;; autoCCC6C1D7_u -= 1) {
                        autoCCC6C1D7_var = UnitGroupUnitFromEnd(autoCCC6C1D7_g, autoCCC6C1D7_u);
                        if (autoCCC6C1D7_var == null) { break; }
                        libPEB1_gf_TurnOnOffZergMinionAI(autoCCC6C1D7_var, false);
                        UnitIssueOrder(autoCCC6C1D7_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(libPEB1_gv_hatcheries[lv_hatcheryIndex].lv_homeRegion)), c_orderQueueReplace);
                    }
                }
            }
        }

        Wait(0.0625, c_timeGame);
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_HatcheryDefense_Init () {
    libPEB1_gt_HatcheryDefense = TriggerCreate("libPEB1_gt_HatcheryDefense_Func");
    TriggerAddEventTimePeriodic(libPEB1_gt_HatcheryDefense, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scourge Missile Created
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ScourgeMissileCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_missile;
    int lv_pingBall;
    sound lv_ballLoopingSound;
    unit lv_scourgeMissileTargetUnit;
    point lv_scourgeMissileTargetPoint;
    unit lv_scourgeMissileCaster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pingBall = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "BattleshipBombardMissile"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_missile = EventUnitCreatedUnit();
    lv_scourgeMissileTargetUnit = libPEB1_gv_currentScourgeMissileTargetUnit;
    lv_scourgeMissileTargetPoint = libPEB1_gv_currentScourgeMissileTargetPoint;
    lv_scourgeMissileCaster = libPEB1_gv_currentScourgeMissileCaster;
    libNtve_gf_CreatePingFacingAngleWithType(PlayerGroupAll(), "ArchangelScourgeMissile", UnitGetPosition(lv_missile), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, UnitGetFacing(lv_missile), -1, -1);
    lv_pingBall = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.08);
    PingSetUnit(PingLastCreated(), lv_missile);
    Wait(0.125, c_timeGame);
    SoundPlayOnUnitForPlayer(SoundLink("Event_GhostShip_CannonBall_Loop", -1), c_maxPlayers, PlayerGroupAll(), lv_missile, 0.0, 100.0, 0.0);
    lv_ballLoopingSound = SoundLastPlayed();
    while (true) {
        Wait(0.0625, c_timeGame);
        if ((UnitIsAlive(lv_missile) == false)) {
            SoundStop(lv_ballLoopingSound, true);
            if ((UnitIsAlive(lv_scourgeMissileTargetUnit) == true)) {
                UnitCreateEffectUnit(lv_scourgeMissileCaster, "BattleshipBombardImpactSet", lv_scourgeMissileTargetUnit);
            }
            else {
                UnitCreateEffectPoint(lv_scourgeMissileCaster, "BattleshipBombardImpactSet", lv_scourgeMissileTargetPoint);
            }
            PingDestroy(lv_pingBall);
            libNtve_gf_CreatePingFacingAngleWithType(PlayerGroupAll(), "BattleshipBombardImpact", lv_scourgeMissileTargetPoint, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0625, 270.0, -1, -1);
            PingSetScale(PingLastCreated(), 0.1);
            SoundPlayForPlayer(SoundLink("Event_GhostShip_Cannon_Explo_Distant", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            libPEB1_gf_ScourgeMissileCameraShake(lv_scourgeMissileTargetPoint);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ScourgeMissileCreated_Init () {
    libPEB1_gt_ScourgeMissileCreated = TriggerCreate("libPEB1_gt_ScourgeMissileCreated_Func");
    TriggerEnable(libPEB1_gt_ScourgeMissileCreated, false);
    TriggerAddEventUnitCreated(libPEB1_gt_ScourgeMissileCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Spawn 1
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ArchangelSpawn1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("UI_PvEBrawl_DeadmansStand_ArchangelSpawn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libUIUI_gf_PingCreateNewPingTarget("TerranArchangelDefender", false, StringExternal("Param/Value/lib_PEB1_1B9ADDE1"), StringExternal("Param/Value/lib_PEB1_A6E7A660"), StringExternal("Param/Value/lib_PEB1_101DC516"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libPEB1_gf_PrepareArchangelArea(libPEB1_gv_archangelSpawnOrder[1]);
    libPEB1_gf_SpawnArchangelforArea(libPEB1_gv_archangelSpawnOrder[1], 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ArchangelSpawn1_Init () {
    libPEB1_gt_ArchangelSpawn1 = TriggerCreate("libPEB1_gt_ArchangelSpawn1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Spawn 2
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ArchangelSpawn2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("UI_PvEBrawl_DeadmansStand_ArchangelSpawn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libPEB1_gf_PrepareArchangelArea(libPEB1_gv_archangelSpawnOrder[2]);
    libPEB1_gf_SpawnArchangelforArea(libPEB1_gv_archangelSpawnOrder[2], 2);
    Wait(0.5, c_timeGame);
    libPEB1_gf_PrepareArchangelArea(libPEB1_gv_archangelSpawnOrder[3]);
    libPEB1_gf_SpawnArchangelforArea(libPEB1_gv_archangelSpawnOrder[3], 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ArchangelSpawn2_Init () {
    libPEB1_gt_ArchangelSpawn2 = TriggerCreate("libPEB1_gt_ArchangelSpawn2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Dies
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ArchangelDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentArea;
    point lv_deathpoint;

    // Automatic Variable Declarations
    const int auto136F9021_ae = 5;
    int auto136F9021_var;
    int autoE9A0DBF7_val;
    playergroup auto5DFF7835_g;
    int auto5DFF7835_var;
    const int auto565EB0CF_ae = 5;
    int auto565EB0CF_var;
    playergroup auto8A649E62_g;
    int auto8A649E62_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deathpoint = UnitGetPosition(EventUnit());
    auto136F9021_var = 1;
    for ( ; auto136F9021_var <= auto136F9021_ae; auto136F9021_var += 1 ) {
        if ((libPEB1_gv_archangelAreas[auto136F9021_var].lv_archangelUnit == EventUnit())) {
            lv_currentArea = auto136F9021_var;
            break;
        }

    }
    if ((lv_currentArea == 0)) {
        return true;
    }

    PingDestroy(libPEB1_gv_archangelAreas[lv_currentArea].lv_archangelPing);
    libPEB1_gv_archangelAreas[lv_currentArea].lv_archangelPing = c_invalidPingId;
    VisRevealArea(libStEx_gv_pLAYER_11_ORDER, libPEB1_gv_archangelAreas[lv_currentArea].lv_region, 5.0, false);
    VisRevealerEnable(libPEB1_gv_archangelAreas[lv_currentArea].lv_revealer, false);
    libPEB1_gv_archangelAreas[lv_currentArea].lv_areaDefeated = true;
    libPEB1_gv_archangelAreas[lv_currentArea].lv_aggroed = false;
    libPEB1_gv_archangelsKilled += 1;
    autoE9A0DBF7_val = libPEB1_gv_archangelsKilled;
    if (autoE9A0DBF7_val == 1) {
        libPVEM_gf_PvEUpdateTeamLevel(libGame_gv_teamOrderIndex_C, 13);
        libPEB1_gv_zergHeroLevel = (13 + libPEB1_gv_zergHeroLevelBonus);
        auto5DFF7835_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
        auto5DFF7835_var = -1;
        while (true) {
            	auto5DFF7835_var = PlayerGroupNextPlayer(auto5DFF7835_g, auto5DFF7835_var);
            	if (auto5DFF7835_var<0) { break; }
            	if ((libPVEM_gf_PvEPlayerIsValidHumanPlayer(auto5DFF7835_var) == true)) {
            }

        }
    }
    else if (autoE9A0DBF7_val == 2) {
        libPVEM_gf_PvEUpdateTeamLevel(libGame_gv_teamOrderIndex_C, 16);
        libPEB1_gv_zergHeroLevel = (16 + libPEB1_gv_zergHeroLevelBonus);
        auto565EB0CF_var = 1;
        for ( ; auto565EB0CF_var <= auto565EB0CF_ae; auto565EB0CF_var += 1 ) {
            if ((UnitIsAlive(libPEB1_gv_archangelAreas[auto565EB0CF_var].lv_archangelUnit) == true)) {
                UnitXPAddXP(libPEB1_gv_archangelAreas[auto565EB0CF_var].lv_archangelUnit, "TerranArchangelDefenderScaling", 1.0);
                break;
            }

        }
    }
    else if (autoE9A0DBF7_val == 3) {
        libPVEM_gf_PvEUpdateTeamLevel(libGame_gv_teamOrderIndex_C, 20);
        libPEB1_gv_zergHeroLevel = (20 + libPEB1_gv_zergHeroLevelBonus);
        auto8A649E62_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
        auto8A649E62_var = -1;
        while (true) {
            	auto8A649E62_var = PlayerGroupNextPlayer(auto8A649E62_g, auto8A649E62_var);
            	if (auto8A649E62_var<0) { break; }
            	if ((libPVEM_gf_PvEPlayerIsValidHumanPlayer(auto8A649E62_var) == true)) {
            }

        }
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RegenGlobe", 0, libCore_gv_cOMPUTER_NoVision_TeamOrder, PointWithOffset(lv_deathpoint, 4.0, 0.0), null);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RegenGlobe", 0, libCore_gv_cOMPUTER_NoVision_TeamOrder, PointWithOffset(lv_deathpoint, 0.0, 4.0), null);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RegenGlobe", 0, libCore_gv_cOMPUTER_NoVision_TeamOrder, PointWithOffset(lv_deathpoint, 0.0, -4.0), null);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RegenGlobe", 0, libCore_gv_cOMPUTER_NoVision_TeamOrder, PointWithOffset(lv_deathpoint, -4.0, 0.0), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ArchangelDies_Init () {
    libPEB1_gt_ArchangelDies = TriggerCreate("libPEB1_gt_ArchangelDies_Func");
    TriggerAddEventUnitDied(libPEB1_gt_ArchangelDies, UnitRefFromVariable("libPEB1_gv_archangelAreas[1].lv_archangelUnit"));
    TriggerAddEventUnitDied(libPEB1_gt_ArchangelDies, UnitRefFromVariable("libPEB1_gv_archangelAreas[2].lv_archangelUnit"));
    TriggerAddEventUnitDied(libPEB1_gt_ArchangelDies, UnitRefFromVariable("libPEB1_gv_archangelAreas[3].lv_archangelUnit"));
    TriggerAddEventUnitDied(libPEB1_gt_ArchangelDies, UnitRefFromVariable("libPEB1_gv_archangelAreas[4].lv_archangelUnit"));
    TriggerAddEventUnitDied(libPEB1_gt_ArchangelDies, UnitRefFromVariable("libPEB1_gv_archangelAreas[5].lv_archangelUnit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Manage Adds
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ArchangelManageAdds_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cocoon;
    unit lv_ultralisk;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "ArchangelDropUltraliskHealthDrain") == true)) {
        lv_cocoon = EventUnitBehaviorCasterUnit();
        lv_ultralisk = EventUnit();
        UnitSetPropertyFixed(lv_ultralisk, c_unitPropLifePercent, UnitGetPropertyFixed(lv_cocoon, c_unitPropLifePercent, c_unitPropCurrent));
        UnitGroupAdd(libPEB1_gv_archangelAdds, EventUnit());
        UnitCreateEffectUnit(lv_cocoon, "TimedLifeFate", lv_cocoon);
    }
    else {
        UnitGroupAdd(libPEB1_gv_archangelAdds, EventUnitCreatedUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ArchangelManageAdds_Init () {
    libPEB1_gt_ArchangelManageAdds = TriggerCreate("libPEB1_gt_ArchangelManageAdds_Func");
    TriggerAddEventUnitCreated(libPEB1_gt_ArchangelManageAdds, null, "ArchangelDropUltralisk", null);
    TriggerAddEventUnitCreated(libPEB1_gt_ArchangelManageAdds, null, "ArchangelChaserBanelings", null);
    TriggerAddEventUnitCreated(libPEB1_gt_ArchangelManageAdds, null, "ArchangelHellfireMissiles", null);
    TriggerAddEventUnitCreated(libPEB1_gt_ArchangelManageAdds, null, "ArchangelToxicSludgling", null);
    TriggerAddEventUnitCreated(libPEB1_gt_ArchangelManageAdds, null, "ArchangelVileTumor", null);
    TriggerAddEventUnitCreated(libPEB1_gt_ArchangelManageAdds, null, "ArchangelBileLauncher", null);
    TriggerAddEventUnitBehaviorChange(libPEB1_gt_ArchangelManageAdds, null, "ArchangelDropUltraliskHealthDrain", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Base Dropship Used
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ArchangelBaseDropshipUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_medivac;
    point lv_rallyPoint;
    string lv_unitType;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto8E7067A4_g;
    int auto8E7067A4_var;
    unitgroup autoE7012AC2_g;
    int autoE7012AC2_u;
    unit autoE7012AC2_var;
    playergroup autoAB0FE5C7_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnitImpact()) == "MedicMedivacDropship"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    if ((libPEB1_gv_archangelDropshipBeingUsed[lv_player] == true)) {
        return true;
    }

    libPEB1_gv_archangelDropshipBeingUsed[lv_player] = true;
    lv_rallyPoint = PointFromName("MedivacRallyPoint");
    auto8E7067A4_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    auto8E7067A4_var = -1;
    while (true) {
        	auto8E7067A4_var = PlayerGroupNextPlayer(auto8E7067A4_g, auto8E7067A4_var);
        	if (auto8E7067A4_var<0) { break; }
        	if ((libPVEM_gf_PvEPlayerIsValidHumanPlayer(auto8E7067A4_var) == false) && (UnitIsAlive(libGame_gv_players[auto8E7067A4_var].lv_heroUnit) == true) && (DistanceBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnitImpact()), UnitGetPosition(libGame_gv_players[auto8E7067A4_var].lv_heroUnit)) < 14.0)) {
            UnitDestroyAIThinkTree(libGame_gv_players[auto8E7067A4_var].lv_heroUnit);
            UnitIssueOrder(libGame_gv_players[auto8E7067A4_var].lv_heroUnit, OrderTargetingUnit(AbilityCommand("CaptureMacGuffin", 0), EventPlayerEffectUsedUnitImpact()), c_orderQueueReplace);
        }

    }
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ArchangelMedivacInTransit", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    libNtve_gf_UnitCreateFacingPoint(1, "MercMedivac", c_unitCreateIgnorePlacement, lv_player, UnitGetPosition(EventPlayerEffectUsedUnitLaunch()), lv_rallyPoint, null);
    lv_medivac = UnitLastCreated();
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, 4.0);
    libNtve_gf_StoreUnitSelection(lv_player, libNtve_ge_UnitSelectionStoreOption_DoNotClearUnitSelection);
    autoE7012AC2_g = libGame_gv_players[lv_player].lv_heroUnitGroup;
    autoE7012AC2_u = UnitGroupCount(autoE7012AC2_g, c_unitCountAll);
    for (;; autoE7012AC2_u -= 1) {
        autoE7012AC2_var = UnitGroupUnitFromEnd(autoE7012AC2_g, autoE7012AC2_u);
        if (autoE7012AC2_var == null) { break; }
        UnitIssueOrder(lv_medivac, OrderTargetingUnit(AbilityCommand("MercMedivacTransport", 0), autoE7012AC2_var), c_orderQueueAddToEnd);
    }
    libNtve_gf_MakeUnitUncommandable(lv_medivac, true);
    UnitSetPropertyFixed(libGame_gv_players[lv_player].lv_heroUnit, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(libGame_gv_players[lv_player].lv_heroUnit, c_unitPropEnergyPercent, 100.0);
    lv_unitType = libGame_gv_players[lv_player].lv_heroData.lv_unitType;
    UnitSelect(libGame_gv_players[lv_player].lv_heroUnit, lv_player, true);
    libNtve_gf_SendActorMessageToUnit(lv_medivac, (("MinimapIconBackground " + ("Assets\\Textures\\storm_ui_minimapicon_herobg.dds"))));
    libNtve_gf_SendActorMessageToUnit(lv_medivac, (("MinimapIconBackgroundScale " + "0.95")));
    libNtve_gf_SendActorMessageToUnit(lv_medivac, (("MinimapIcon " + CatalogFieldValueGet(c_gameCatalogActor, lv_unitType, "MinimapIcon", c_playerAny))));
    libNtve_gf_SendActorMessageToUnit(lv_medivac, (("MinimapIconScale " + CatalogFieldValueGet(c_gameCatalogActor, lv_unitType, "MinimapIconScale", c_playerAny))));
    libUIUI_gf_FullscreenOverlayAddItemForPlayer(lv_player, libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI_MedivacOverlay.StormCutscene", "ArchangelMedivacInTransit");
    Wait(0.75, c_timeGame);
    UnitIssueOrder(lv_medivac, OrderTargetingPoint(AbilityCommand("move", 0), lv_rallyPoint), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_medivac, Order(AbilityCommand("MercMedivacTransport", 1)), c_orderQueueAddToEnd);
    libGame_gv_players[lv_player].lv_cameraForcedLock = true;
    libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_medivac);
    libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    while (!((UnitOrderCount(lv_medivac) == 0))) {
        Wait(1.0, c_timeGame);
    }
    if ((libPVEM_gf_PvEPlayerIsValidHumanPlayer(lv_player) == false)) {
        UnitCreateAIThinkTree(libGame_gv_players[lv_player].lv_heroUnit);
    }

    Wait(0.125, c_timeGame);
    autoAB0FE5C7_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoAB0FE5C7_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	RemoveUnitOfInterest(libGame_gv_players[lv_itPlayer].lv_heroUnit, "PVEEscortPlayer", libNtve_ge_GoalTeam_Order);
    }
    TriggerExecute(libPEB1_gt_SetHeroRallyPoints, true, false);
    libNtve_gf_SendActorMessageToUnit(lv_medivac, "SetMinimapVisibility");
    libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(lv_player, "Cutscenes\\GameUI_MedivacOverlay.StormCutscene", "ArchangelMedivacInTransit");
    UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ArchangelMedivacInTransit", 1);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_medivac), c_animNameDefault, "Spell A", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayAtPointForPlayer(SoundLink("PVE_MercMedivac_FlyOut", -1), lv_player, PlayerGroupAll(), lv_rallyPoint, 0.0, 100.0, 0.0);
    libGame_gv_players[lv_player].lv_cameraForcedLock = false;
    libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lv_player].lv_heroUnitGroup;
    UnitSelect(lv_medivac, lv_player, false);
    UnitSelect(libGame_gv_players[lv_player].lv_heroUnit, lv_player, true);
    libNtve_gf_RestoreUnitSelection(lv_player);
    libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    Wait(2.25, c_timeGame);
    libPEB1_gv_archangelDropshipBeingUsed[lv_player] = false;
    Wait(2.0, c_timeGame);
    UnitRemove(lv_medivac);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ArchangelBaseDropshipUsed_Init () {
    libPEB1_gt_ArchangelBaseDropshipUsed = TriggerCreate("libPEB1_gt_ArchangelBaseDropshipUsed_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_ArchangelBaseDropshipUsed, c_playerAny, "CaptureMacGuffinCastComplete");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Balance Init
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ArchangelBalanceInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_health;
    fixed lv_damage;
    fixed lv_duration;
    int lv_count;
    const fixed lv_difficultyMultiplier = 1.4;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_health = libPVEM_gf_PvEDifficultyValueReal(37500.0, (37500.0 * lv_difficultyMultiplier));
    CatalogFieldValueSet(c_gameCatalogUnit, "TerranArchangelDefender", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_health, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TerranArchangelDefender", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_health, c_fixedPrecisionAny));
    lv_damage = libPVEM_gf_PvEDifficultyValueReal(13.0, (13.0 * lv_difficultyMultiplier));
    CatalogFieldValueSet(c_gameCatalogEffect, "TerranArchangelDefenderRangedDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_damage, c_fixedPrecisionAny));
    lv_health = libPVEM_gf_PvEDifficultyValueReal(10.0, 20.0);
    CatalogFieldValueSet(c_gameCatalogUnit, "ArchangelCableWrap", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_health, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "ArchangelCableWrap", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_health, c_fixedPrecisionAny));
    lv_damage = libPVEM_gf_PvEDifficultyValueReal(1500.0, (1500.0 * lv_difficultyMultiplier));
    CatalogFieldValueSet(c_gameCatalogEffect, "ArchangelEMPDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_damage, c_fixedPrecisionAny));
    lv_damage = libPVEM_gf_PvEDifficultyValueReal(150.0, (150.0 * lv_difficultyMultiplier));
    CatalogFieldValueSet(c_gameCatalogEffect, "ArchangelBarrageDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_damage, c_fixedPrecisionAny));
    lv_duration = libPVEM_gf_PvEDifficultyValueReal(80.0, 80.0);
    CatalogFieldValueSet(c_gameCatalogEffect, "ArchangelOilSlickImpactPersistent", "PeriodCount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_duration, c_fixedPrecisionAny));
    lv_damage = libPVEM_gf_PvEDifficultyValueReal(130.0, (130.0 * lv_difficultyMultiplier));
    CatalogFieldValueSet(c_gameCatalogEffect, "ArchangelAnnihilateDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_damage, c_fixedPrecisionAny));
    lv_health = libPVEM_gf_PvEDifficultyValueReal(400.0, (400.0 * lv_difficultyMultiplier));
    CatalogFieldValueSet(c_gameCatalogUnit, "ArchangelChaserBaneling", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_health, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "ArchangelChaserBaneling", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_health, c_fixedPrecisionAny));
    lv_damage = libPVEM_gf_PvEDifficultyValueReal(600.0, (600.0 * lv_difficultyMultiplier));
    CatalogFieldValueSet(c_gameCatalogEffect, "ArchangelSuperBanelingDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_damage, c_fixedPrecisionAny));
    lv_health = libPVEM_gf_PvEDifficultyValueReal(2800.0, (2800.0 * lv_difficultyMultiplier));
    CatalogFieldValueSet(c_gameCatalogUnit, "ArchangelDropUltraliskUltraliskCocoon", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_health, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "ArchangelDropUltraliskUltraliskCocoon", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_health, c_fixedPrecisionAny));
    lv_damage = libPVEM_gf_PvEDifficultyValueReal(215.0, (215.0 * lv_difficultyMultiplier));
    CatalogFieldValueSet(c_gameCatalogEffect, "ArchangelHellfireMissilesDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_damage, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "ArchangelToxicSludglingDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libPVEM_gf_PvEDifficultyValueReal(100.0, 125.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "ArchangelVileTumorDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libPVEM_gf_PvEDifficultyValueReal(100.0, 125.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "ArchangelBileLauncherDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libPVEM_gf_PvEDifficultyValueReal(800.0, (800.0 * lv_difficultyMultiplier)), c_fixedPrecisionAny));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ArchangelBalanceInit_Init () {
    libPEB1_gt_ArchangelBalanceInit = TriggerCreate("libPEB1_gt_ArchangelBalanceInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Aggroed
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ArchangelAggroed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_orderIndex;
    int lv_areaIndex;

    // Automatic Variable Declarations
    const int autoAD80EBF5_ae = 3;
    const int autoAD80EBF5_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_orderIndex = 1;
    for ( ; ( (autoAD80EBF5_ai >= 0 && lv_orderIndex <= autoAD80EBF5_ae) || (autoAD80EBF5_ai < 0 && lv_orderIndex >= autoAD80EBF5_ae) ) ; lv_orderIndex += autoAD80EBF5_ai ) {
        if ((libPEB1_gv_archangelDefenderIndex[libPEB1_gv_archangelSpawnOrder[lv_orderIndex]] > 0) && (libGame_gf_JungleDefenderAIDefendersBeginFightingIndex() == libPEB1_gv_archangelDefenderIndex[libPEB1_gv_archangelSpawnOrder[lv_orderIndex]])) {
            libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[lv_orderIndex]].lv_aggroed = true;
            if ((libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[lv_orderIndex]].lv_type == libPEB1_ge_ArchangelAreaType_Loadout4)) {
                libPEB1_gf_ArchangelFroggerRoutine(libPEB1_gv_archangelSpawnOrder[lv_orderIndex]);
            }
            else {
                UnitCreateAIThinkTree(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[lv_orderIndex]].lv_archangelUnit);
            }
            if ((lv_orderIndex == 1) && (libPEB1_gv_bossMusicTriggered[1] == false)) {
                libPEB1_gv_bossMusicTriggered[1] = true;
                SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ArchangelBossMusicPart1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
            }

            if (((lv_orderIndex == 2) || (lv_orderIndex == 3)) && (libPEB1_gv_bossMusicTriggered[2] == false)) {
                libPEB1_gv_bossMusicTriggered[2] = true;
                SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ArchangelBossMusicPart1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ArchangelAggroed_Init () {
    libPEB1_gt_ArchangelAggroed = TriggerCreate("libPEB1_gt_ArchangelAggroed_Func");
    libGame_gf_JungleDefenderAIDefendersBeginFighting(libPEB1_gt_ArchangelAggroed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Deaggroed
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ArchangelDeaggroed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_orderIndex;

    // Automatic Variable Declarations
    const int autoCD1647F8_ae = 3;
    const int autoCD1647F8_ai = 1;
    unitgroup auto4A4721CF_g;
    int auto4A4721CF_u;
    unit auto4A4721CF_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_orderIndex = 1;
    for ( ; ( (autoCD1647F8_ai >= 0 && lv_orderIndex <= autoCD1647F8_ae) || (autoCD1647F8_ai < 0 && lv_orderIndex >= autoCD1647F8_ae) ) ; lv_orderIndex += autoCD1647F8_ai ) {
        if ((libPEB1_gv_archangelDefenderIndex[libPEB1_gv_archangelSpawnOrder[lv_orderIndex]] > 0) && (libGame_gf_JungleDefenderAIDefendersEndFightingIndex() == libPEB1_gv_archangelDefenderIndex[libPEB1_gv_archangelSpawnOrder[lv_orderIndex]])) {
            UnitDestroyAIThinkTree(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[lv_orderIndex]].lv_archangelUnit);
            libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[lv_orderIndex]].lv_aggroed = false;
            UnitIssueOrder(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[lv_orderIndex]].lv_archangelUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[lv_orderIndex]].lv_region)), c_orderQueueReplace);
            auto4A4721CF_g = UnitGroupFilterRegion(libPEB1_gv_archangelAdds, libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[lv_orderIndex]].lv_region, 0);
            auto4A4721CF_u = UnitGroupCount(auto4A4721CF_g, c_unitCountAll);
            for (;; auto4A4721CF_u -= 1) {
                auto4A4721CF_var = UnitGroupUnitFromEnd(auto4A4721CF_g, auto4A4721CF_u);
                if (auto4A4721CF_var == null) { break; }
                UnitCreateEffectUnit(auto4A4721CF_var, "Kill", auto4A4721CF_var);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ArchangelDeaggroed_Init () {
    libPEB1_gt_ArchangelDeaggroed = TriggerCreate("libPEB1_gt_ArchangelDeaggroed_Func");
    libGame_gf_JungleDefenderAIDefendersEndFighting(libPEB1_gt_ArchangelDeaggroed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Annihilate Turning Controls
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ArchangelAnnihilateTurningControls_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_archangel;
    fixed lv_currentFacing;
    const fixed lv_rotationalImpulse_C = 0.1;
    fixed lv_additionalRotation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_additionalRotation = 12.083;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_archangel = EventUnit();
    while ((UnitHasBehavior2(lv_archangel, "ArchangelAnnihilateFlying") != true)) {
        Wait(0.0625, c_timeGame);
    }
    while ((lv_currentFacing < libPEB1_gv_archangelRotationAngle)) {
        if ((libPEB1_gv_archangelRotateClockwise == true)) {
            UnitSetFacing(lv_archangel, (UnitGetFacing(lv_archangel) - libPEB1_gv_archangelRotationSpeed), 0.0625);
        }
        else {
            UnitSetFacing(lv_archangel, (UnitGetFacing(lv_archangel) + libPEB1_gv_archangelRotationSpeed), 0.0625);
        }
        lv_currentFacing += libPEB1_gv_archangelRotationSpeed;
        Wait(0.0625, c_timeGame);
    }
    if ((libPEB1_gv_archangelRotationSpeed < 2.2)) {
        libPEB1_gv_archangelRotationSpeed += lv_rotationalImpulse_C;
        libPEB1_gv_archangelRotationAngle += lv_additionalRotation;
    }

    libPEB1_gv_archangelRotateClockwise = !(libPEB1_gv_archangelRotateClockwise);
    UnitBehaviorRemove(lv_archangel, "ArchangelAnnihilateFlying", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ArchangelAnnihilateTurningControls_Init () {
    libPEB1_gt_ArchangelAnnihilateTurningControls = TriggerCreate("libPEB1_gt_ArchangelAnnihilateTurningControls_Func");
    TriggerAddEventUnitAbility(libPEB1_gt_ArchangelAnnihilateTurningControls, null, AbilityCommand("ArchangelAnnihilate", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 1
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_disableZergSpawning == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPEB1_gv_holdout1_Started = true;
    TimerStart(libPEB1_gv_holdout1_Timer, libPEB1_gv_holdout1_Duration_C, false, c_timeGame);
    TriggerExecute(libPEB1_gt_Holdout1AttackWaves, true, false);
    while (!((libPEB1_gv_holdout1IntroTransmissionFinished == true))) {
        Wait(1.0, c_timeGame);
    }
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    libPEB1_gf_DisplayHoldoutPanel(StringExternal("Param/Value/lib_PEB1_F1FF18BE"), null);
    TextExpressionSetToken("Param/Expression/lib_PEB1_AACC0F52", "A", IntToText(libPEB1_gv_holdout1_WaveCurrent));
    TextExpressionSetToken("Param/Expression/lib_PEB1_AACC0F52", "B", IntToText(libPEB1_gv_holdout1_WaveTotal_C));
    libPEB1_gf_SetHoldoutPanelTimerText(TextExpressionAssemble("Param/Expression/lib_PEB1_AACC0F52"));
    DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconZerg, PlayerGroupAll(), true);
    while (!((TimerGetRemaining(libPEB1_gv_holdout1_Timer) <= 20.0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(libPEB1_gt_Holdout1AlmostDoneQ, true, false);
    while (!((TimerGetRemaining(libPEB1_gv_holdout1_Timer) == 0.0))) {
        Wait(TimerGetRemaining(libPEB1_gv_holdout1_Timer), c_timeGame);
    }
    libPEB1_gv_holdout1_Complete = true;
    TriggerExecute(libPEB1_gt_ArchangelEvent1Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout1_Init () {
    libPEB1_gt_Holdout1 = TriggerCreate("libPEB1_gt_Holdout1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 1 Attack Waves
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout1AttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libPEB1_gv_disableZergSpawning == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEB1_gv_holdout1_WaveCurrent += 1;
    libPEB1_gf_IncludeHeroIntheNextAttackWave(1, 1);
    TriggerExecute(libPEB1_gt_Holdout1Wave1, true, false);
    Wait(30.0, c_timeGame);
    libPEB1_gv_holdout1_WaveCurrent += 1;
    libPEB1_gf_IncludeHeroIntheNextAttackWave(0, 0);
    TriggerExecute(libPEB1_gt_Holdout1Wave2, true, false);
    Wait(25.0, c_timeGame);
    libPEB1_gv_holdout1_WaveCurrent += 1;
    libPEB1_gf_IncludeHeroIntheNextAttackWave(1, 1);
    TriggerExecute(libPEB1_gt_Holdout1Wave2, true, false);
    Wait(20.0, c_timeGame);
    libPEB1_gv_holdout1_WaveCurrent += 1;
    libPEB1_gf_IncludeHeroIntheNextAttackWave(0, 0);
    TriggerExecute(libPEB1_gt_Holdout1Wave1, true, false);
    Wait(20.0, c_timeGame);
    libPEB1_gv_holdout1_WaveCurrent += 1;
    libPEB1_gf_IncludeHeroIntheNextAttackWave(1, 1);
    TriggerExecute(libPEB1_gt_Holdout1Wave3, true, false);
    Wait(20.0, c_timeGame);
    libPEB1_gv_holdout1_WaveCurrent += 1;
    libPEB1_gf_IncludeHeroIntheNextAttackWave(0, 0);
    TriggerExecute(libPEB1_gt_Holdout1Wave3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout1AttackWaves_Init () {
    libPEB1_gt_Holdout1AttackWaves = TriggerCreate("libPEB1_gt_Holdout1AttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 1 Wave 1
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout1Wave1_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup[4] lv_attackGroups;
    int lv_laneIndex;
    int lv_waveIndex;
    int lv_heroIndex;

    // Automatic Variable Declarations
    const int autoCA1BDB75_ae = 1;
    const int autoCA1BDB75_ai = -1;
    int auto22B0A078_n;
    int auto22B0A078_i;
    int auto02134BB4_n;
    int auto02134BB4_i;
    int auto1688BE99_n;
    int auto1688BE99_i;
    const int auto621DF8CE_ae = 2;
    const int auto621DF8CE_ai = 1;
    unitgroup auto7A2C17B1_g;
    int auto7A2C17B1_u;
    unit auto7A2C17B1_var;
    const int autoB7CA86AB_ae = 2;
    const int autoB7CA86AB_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_attackGroups[init_i] = UnitGroupEmpty();
    }

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_laneIndex = 2;
    for ( ; ( (autoCA1BDB75_ai >= 0 && lv_laneIndex <= autoCA1BDB75_ae) || (autoCA1BDB75_ai < 0 && lv_laneIndex >= autoCA1BDB75_ae) ) ; lv_laneIndex += autoCA1BDB75_ai ) {
        auto22B0A078_n = libPVEM_gf_PvEDifficultyValueInt(12, 16);
        for (auto22B0A078_i = 1; auto22B0A078_i <= auto22B0A078_n; auto22B0A078_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergZergling", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        auto02134BB4_n = libPVEM_gf_PvEDifficultyValueInt(2, 3);
        for (auto02134BB4_i = 1; auto02134BB4_i <= auto02134BB4_n; auto02134BB4_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergHydralisk", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        auto1688BE99_n = libPEB1_gv_attackWaveHeroCount[lv_laneIndex];
        for (auto1688BE99_i = 1; auto1688BE99_i <= auto1688BE99_n; auto1688BE99_i += 1) {
            libPEB1_gf_SpawnZergHeroforWave(RegionGetCenter(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), lv_attackGroups[lv_laneIndex]);
        }
        if ((lv_laneIndex == 2)) {
            Wait(5.0, c_timeGame);
        }

    }
    lv_laneIndex = 1;
    for ( ; ( (auto621DF8CE_ai >= 0 && lv_laneIndex <= auto621DF8CE_ae) || (auto621DF8CE_ai < 0 && lv_laneIndex >= auto621DF8CE_ae) ) ; lv_laneIndex += auto621DF8CE_ai ) {
        if ((UnitGroupCount(lv_attackGroups[lv_laneIndex], c_unitCountAlive) > 0)) {
            libPVEM_gf_PvECreateAttackWave();
            lv_waveIndex = libPVEM_gf_PvELastCreatedAttackWave();
            auto7A2C17B1_g = lv_attackGroups[lv_laneIndex];
            auto7A2C17B1_u = UnitGroupCount(auto7A2C17B1_g, c_unitCountAll);
            for (;; auto7A2C17B1_u -= 1) {
                auto7A2C17B1_var = UnitGroupUnitFromEnd(auto7A2C17B1_g, auto7A2C17B1_u);
                if (auto7A2C17B1_var == null) { break; }
                libPVEM_gf_PvEAddUnitToAttackWave(lv_waveIndex, auto7A2C17B1_var);
            }
            libPEB1_gf_ConfigureAttackWaveWaypointsforLane(lv_waveIndex, lv_laneIndex);
            libPEB1_gf_SendEventWavewithDelay(lv_waveIndex, lv_attackGroups[lv_laneIndex], 10.0);
        }

    }
    if ((libPEB1_gv_holdout1IntroTransmissionFinished == false)) {
        while (!((libPEB1_gv_holdout1IntroTransmissionFinished == true))) {
            Wait(1.0, c_timeGame);
        }
    }
    else {
        Wait(5.0, c_timeGame);
    }
    lv_laneIndex = 1;
    for ( ; ( (autoB7CA86AB_ai >= 0 && lv_laneIndex <= autoB7CA86AB_ae) || (autoB7CA86AB_ai < 0 && lv_laneIndex >= autoB7CA86AB_ae) ) ; lv_laneIndex += autoB7CA86AB_ai ) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((UnitGroupCount(lv_attackGroups[lv_laneIndex], c_unitCountAlive) > 0)) {
            MinimapPing(PlayerGroupAll(), UnitGroupCenterOfGroup(lv_attackGroups[lv_laneIndex]), 2.0, libCore_gv_cOLOREnemyColor);
            libPEB1_gf_CreateEventWavePing(lv_attackGroups[lv_laneIndex], (libPEB1_gv_attackWaveHeroCount[lv_laneIndex] > 0));
            Wait(0.1, c_timeReal);
        }

    }
    TextExpressionSetToken("Param/Expression/lib_PEB1_D624F29C", "A", IntToText(libPEB1_gv_holdout1_WaveCurrent));
    TextExpressionSetToken("Param/Expression/lib_PEB1_D624F29C", "B", IntToText(libPEB1_gv_holdout1_WaveTotal_C));
    libPEB1_gf_SetHoldoutPanelTimerText(TextExpressionAssemble("Param/Expression/lib_PEB1_D624F29C"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout1Wave1_Init () {
    libPEB1_gt_Holdout1Wave1 = TriggerCreate("libPEB1_gt_Holdout1Wave1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 1 Wave 2
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout1Wave2_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup[4] lv_attackGroups;
    int lv_laneIndex;
    int lv_waveIndex;
    int lv_heroIndex;

    // Automatic Variable Declarations
    const int auto414934FD_ae = 1;
    const int auto414934FD_ai = -1;
    int auto909409B9_n;
    int auto909409B9_i;
    int auto08749EE5_n;
    int auto08749EE5_i;
    int auto861BAF5C_n;
    int auto861BAF5C_i;
    int autoB965F28D_n;
    int autoB965F28D_i;
    const int auto43C74B1B_ae = 2;
    const int auto43C74B1B_ai = 1;
    unitgroup autoF1A06965_g;
    int autoF1A06965_u;
    unit autoF1A06965_var;
    const int auto9AFB7C42_ae = 2;
    const int auto9AFB7C42_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_attackGroups[init_i] = UnitGroupEmpty();
    }

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_laneIndex = 2;
    for ( ; ( (auto414934FD_ai >= 0 && lv_laneIndex <= auto414934FD_ae) || (auto414934FD_ai < 0 && lv_laneIndex >= auto414934FD_ae) ) ; lv_laneIndex += auto414934FD_ai ) {
        auto909409B9_n = libPVEM_gf_PvEDifficultyValueInt(4, 6);
        for (auto909409B9_i = 1; auto909409B9_i <= auto909409B9_n; auto909409B9_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergBaneling", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        auto08749EE5_n = libPVEM_gf_PvEDifficultyValueInt(12, 16);
        for (auto08749EE5_i = 1; auto08749EE5_i <= auto08749EE5_n; auto08749EE5_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergZergling", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        auto861BAF5C_n = libPVEM_gf_PvEDifficultyValueInt(2, 3);
        for (auto861BAF5C_i = 1; auto861BAF5C_i <= auto861BAF5C_n; auto861BAF5C_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergMutalisk", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        autoB965F28D_n = libPEB1_gv_attackWaveHeroCount[lv_laneIndex];
        for (autoB965F28D_i = 1; autoB965F28D_i <= autoB965F28D_n; autoB965F28D_i += 1) {
            libPEB1_gf_SpawnZergHeroforWave(RegionGetCenter(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), lv_attackGroups[lv_laneIndex]);
        }
        if ((lv_laneIndex == 2)) {
            Wait(5.0, c_timeGame);
        }

    }
    lv_laneIndex = 1;
    for ( ; ( (auto43C74B1B_ai >= 0 && lv_laneIndex <= auto43C74B1B_ae) || (auto43C74B1B_ai < 0 && lv_laneIndex >= auto43C74B1B_ae) ) ; lv_laneIndex += auto43C74B1B_ai ) {
        if ((UnitGroupCount(lv_attackGroups[lv_laneIndex], c_unitCountAlive) > 0)) {
            libPVEM_gf_PvECreateAttackWave();
            lv_waveIndex = libPVEM_gf_PvELastCreatedAttackWave();
            autoF1A06965_g = lv_attackGroups[lv_laneIndex];
            autoF1A06965_u = UnitGroupCount(autoF1A06965_g, c_unitCountAll);
            for (;; autoF1A06965_u -= 1) {
                autoF1A06965_var = UnitGroupUnitFromEnd(autoF1A06965_g, autoF1A06965_u);
                if (autoF1A06965_var == null) { break; }
                libPVEM_gf_PvEAddUnitToAttackWave(lv_waveIndex, autoF1A06965_var);
            }
            libPEB1_gf_ConfigureAttackWaveWaypointsforLane(lv_waveIndex, lv_laneIndex);
            libPEB1_gf_SendEventWavewithDelay(lv_waveIndex, lv_attackGroups[lv_laneIndex], 10.0);
        }

    }
    Wait(5.0, c_timeGame);
    lv_laneIndex = 1;
    for ( ; ( (auto9AFB7C42_ai >= 0 && lv_laneIndex <= auto9AFB7C42_ae) || (auto9AFB7C42_ai < 0 && lv_laneIndex >= auto9AFB7C42_ae) ) ; lv_laneIndex += auto9AFB7C42_ai ) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((UnitGroupCount(lv_attackGroups[lv_laneIndex], c_unitCountAlive) > 0)) {
            MinimapPing(PlayerGroupAll(), UnitGroupCenterOfGroup(lv_attackGroups[lv_laneIndex]), 2.0, libCore_gv_cOLOREnemyColor);
            libPEB1_gf_CreateEventWavePing(lv_attackGroups[lv_laneIndex], (libPEB1_gv_attackWaveHeroCount[lv_laneIndex] > 0));
            Wait(0.1, c_timeReal);
        }

    }
    TextExpressionSetToken("Param/Expression/lib_PEB1_E1B379FD", "A", IntToText(libPEB1_gv_holdout1_WaveCurrent));
    TextExpressionSetToken("Param/Expression/lib_PEB1_E1B379FD", "B", IntToText(libPEB1_gv_holdout1_WaveTotal_C));
    libPEB1_gf_SetHoldoutPanelTimerText(TextExpressionAssemble("Param/Expression/lib_PEB1_E1B379FD"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout1Wave2_Init () {
    libPEB1_gt_Holdout1Wave2 = TriggerCreate("libPEB1_gt_Holdout1Wave2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 1 Wave 3
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout1Wave3_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup[4] lv_attackGroups;
    int lv_laneIndex;
    int lv_waveIndex;

    // Automatic Variable Declarations
    const int auto49B51856_ae = 1;
    const int auto49B51856_ai = -1;
    int auto8D978166_n;
    int auto8D978166_i;
    int autoF73040E5_n;
    int autoF73040E5_i;
    int autoEEA46F58_n;
    int autoEEA46F58_i;
    int auto14200B64_n;
    int auto14200B64_i;
    const int auto84DE10EA_ae = 2;
    const int auto84DE10EA_ai = 1;
    unitgroup auto700B44D3_g;
    int auto700B44D3_u;
    unit auto700B44D3_var;
    const int autoCB177104_ae = 2;
    const int autoCB177104_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_attackGroups[init_i] = UnitGroupEmpty();
    }

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_laneIndex = 2;
    for ( ; ( (auto49B51856_ai >= 0 && lv_laneIndex <= auto49B51856_ae) || (auto49B51856_ai < 0 && lv_laneIndex >= auto49B51856_ae) ) ; lv_laneIndex += auto49B51856_ai ) {
        auto8D978166_n = libPVEM_gf_PvEDifficultyValueInt(3, 4);
        for (auto8D978166_i = 1; auto8D978166_i <= auto8D978166_n; auto8D978166_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergRoach", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        autoF73040E5_n = libPVEM_gf_PvEDifficultyValueInt(2, 3);
        for (autoF73040E5_i = 1; autoF73040E5_i <= autoF73040E5_n; autoF73040E5_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergHydralisk", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        autoEEA46F58_n = libPVEM_gf_PvEDifficultyValueInt(4, 6);
        for (autoEEA46F58_i = 1; autoEEA46F58_i <= autoEEA46F58_n; autoEEA46F58_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergBaneling", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        auto14200B64_n = libPEB1_gv_attackWaveHeroCount[lv_laneIndex];
        for (auto14200B64_i = 1; auto14200B64_i <= auto14200B64_n; auto14200B64_i += 1) {
            libPEB1_gf_SpawnZergHeroforWave(RegionGetCenter(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), lv_attackGroups[lv_laneIndex]);
        }
        if ((lv_laneIndex == 2)) {
            Wait(5.0, c_timeGame);
        }

    }
    lv_laneIndex = 1;
    for ( ; ( (auto84DE10EA_ai >= 0 && lv_laneIndex <= auto84DE10EA_ae) || (auto84DE10EA_ai < 0 && lv_laneIndex >= auto84DE10EA_ae) ) ; lv_laneIndex += auto84DE10EA_ai ) {
        if ((UnitGroupCount(lv_attackGroups[lv_laneIndex], c_unitCountAlive) > 0)) {
            libPVEM_gf_PvECreateAttackWave();
            lv_waveIndex = libPVEM_gf_PvELastCreatedAttackWave();
            auto700B44D3_g = lv_attackGroups[lv_laneIndex];
            auto700B44D3_u = UnitGroupCount(auto700B44D3_g, c_unitCountAll);
            for (;; auto700B44D3_u -= 1) {
                auto700B44D3_var = UnitGroupUnitFromEnd(auto700B44D3_g, auto700B44D3_u);
                if (auto700B44D3_var == null) { break; }
                libPVEM_gf_PvEAddUnitToAttackWave(lv_waveIndex, auto700B44D3_var);
            }
            libPEB1_gf_ConfigureAttackWaveWaypointsforLane(lv_waveIndex, lv_laneIndex);
            libPEB1_gf_SendEventWavewithDelay(lv_waveIndex, lv_attackGroups[lv_laneIndex], 10.0);
        }

    }
    Wait(5.0, c_timeGame);
    lv_laneIndex = 1;
    for ( ; ( (autoCB177104_ai >= 0 && lv_laneIndex <= autoCB177104_ae) || (autoCB177104_ai < 0 && lv_laneIndex >= autoCB177104_ae) ) ; lv_laneIndex += autoCB177104_ai ) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((UnitGroupCount(lv_attackGroups[lv_laneIndex], c_unitCountAlive) > 0)) {
            MinimapPing(PlayerGroupAll(), UnitGroupCenterOfGroup(lv_attackGroups[lv_laneIndex]), 2.0, libCore_gv_cOLOREnemyColor);
            libPEB1_gf_CreateEventWavePing(lv_attackGroups[lv_laneIndex], (libPEB1_gv_attackWaveHeroCount[lv_laneIndex] > 0));
            Wait(0.1, c_timeReal);
        }

    }
    TextExpressionSetToken("Param/Expression/lib_PEB1_17934A33", "A", IntToText(libPEB1_gv_holdout1_WaveCurrent));
    TextExpressionSetToken("Param/Expression/lib_PEB1_17934A33", "B", IntToText(libPEB1_gv_holdout1_WaveTotal_C));
    libPEB1_gf_SetHoldoutPanelTimerText(TextExpressionAssemble("Param/Expression/lib_PEB1_17934A33"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout1Wave3_Init () {
    libPEB1_gt_Holdout1Wave3 = TriggerCreate("libPEB1_gt_Holdout1Wave3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 2
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPEB1_gv_holdout2_Started = true;
    TimerStart(libPEB1_gv_holdout2_Timer, libPEB1_gv_holdout2_Duration_C, false, c_timeGame);
    TriggerExecute(libPEB1_gt_Holdout2AttackWaves, true, false);
    TriggerExecute(libPEB1_gt_Holdout2Q, true, true);
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    libPVEU_gf_PvEUICreateDirectiveMessage(StringExternal("Param/Value/lib_PEB1_C98698D1"), StringExternal("Param/Value/lib_PEB1_B780DB78"), libPVEU_ge_PvEUIDirectiveStyle_PvEUIDirectiveStyel_ObjectiveDiscovered);
    libPEB1_gf_ShowHideObjectivePanel(false);
    Wait(3.0, c_timeReal);
    libPEB1_gv_holdout2IntroTransmissionFinished = true;
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    libPEB1_gf_DisplayHoldoutPanel(StringExternal("Param/Value/lib_PEB1_32C61699"), null);
    TextExpressionSetToken("Param/Expression/lib_PEB1_9419CCD3", "A", IntToText(libPEB1_gv_holdout2_WaveCurrent));
    TextExpressionSetToken("Param/Expression/lib_PEB1_9419CCD3", "B", IntToText(libPEB1_gv_holdout2_WaveTotal_C));
    libPEB1_gf_SetHoldoutPanelTimerText(TextExpressionAssemble("Param/Expression/lib_PEB1_9419CCD3"));
    DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconZerg, PlayerGroupAll(), true);
    while (!((TimerGetRemaining(libPEB1_gv_holdout2_Timer) <= 30.0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(libPEB1_gt_Holdout2AlmostDoneQ, true, false);
    while (!((TimerGetRemaining(libPEB1_gv_holdout2_Timer) == 0.0))) {
        Wait(1.0, c_timeGame);
    }
    libPEB1_gv_holdout2_Complete = true;
    TriggerExecute(libPEB1_gt_ArchangelEvent2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout2_Init () {
    libPEB1_gt_Holdout2 = TriggerCreate("libPEB1_gt_Holdout2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 2 Attack Waves
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout2AttackWaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_count1;
    int lv_count2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libPEB1_gv_holdout2_WaveCurrent += 1;
    if ((RandomInt(1, 2) == 1)) {
        lv_count1 = 2;
        lv_count2 = 0;
    }
    else {
        lv_count1 = 0;
        lv_count2 = 2;
    }
    libPEB1_gf_IncludeHeroIntheNextAttackWave(lv_count1, lv_count2);
    TriggerExecute(libPEB1_gt_Holdout2Wave1, true, false);
    Wait(30.0, c_timeGame);
    libPEB1_gv_holdout2_WaveCurrent += 1;
    libPEB1_gf_IncludeHeroIntheNextAttackWave(lv_count2, lv_count1);
    TriggerExecute(libPEB1_gt_Holdout2Wave2, true, false);
    Wait(20.0, c_timeGame);
    libPEB1_gv_holdout2_WaveCurrent += 1;
    libPEB1_gf_IncludeHeroIntheNextAttackWave(0, 0);
    TriggerExecute(libPEB1_gt_Holdout2Wave2, true, false);
    Wait(20.0, c_timeGame);
    libPEB1_gv_holdout2_WaveCurrent += 1;
    if ((RandomInt(1, 2) == 1)) {
        lv_count1 = 2;
        lv_count2 = 0;
    }
    else {
        lv_count1 = 0;
        lv_count2 = 2;
    }
    libPEB1_gf_IncludeHeroIntheNextAttackWave(lv_count1, lv_count2);
    TriggerExecute(libPEB1_gt_Holdout2Wave1, true, false);
    Wait(15.0, c_timeGame);
    libPEB1_gv_holdout2_WaveCurrent += 1;
    libPEB1_gf_IncludeHeroIntheNextAttackWave(lv_count2, lv_count1);
    TriggerExecute(libPEB1_gt_Holdout2Wave3, true, false);
    Wait(15.0, c_timeGame);
    libPEB1_gv_holdout2_WaveCurrent += 1;
    libPEB1_gf_IncludeHeroIntheNextAttackWave(0, 0);
    TriggerExecute(libPEB1_gt_Holdout2Wave3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout2AttackWaves_Init () {
    libPEB1_gt_Holdout2AttackWaves = TriggerCreate("libPEB1_gt_Holdout2AttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 2 Wave 1
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout2Wave1_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup[4] lv_attackGroups;
    int lv_laneIndex;
    int lv_waveIndex;

    // Automatic Variable Declarations
    const int autoEE843716_ae = 1;
    const int autoEE843716_ai = -1;
    int auto5F26A50C_n;
    int auto5F26A50C_i;
    int autoE02F9DF7_n;
    int autoE02F9DF7_i;
    int auto0F2CEE7F_n;
    int auto0F2CEE7F_i;
    int auto21F397B9_n;
    int auto21F397B9_i;
    const int auto69FB7B2D_ae = 2;
    const int auto69FB7B2D_ai = 1;
    unitgroup auto594038BC_g;
    int auto594038BC_u;
    unit auto594038BC_var;
    const int auto5401C14B_ae = 2;
    const int auto5401C14B_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_attackGroups[init_i] = UnitGroupEmpty();
    }

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_laneIndex = 2;
    for ( ; ( (autoEE843716_ai >= 0 && lv_laneIndex <= autoEE843716_ae) || (autoEE843716_ai < 0 && lv_laneIndex >= autoEE843716_ae) ) ; lv_laneIndex += autoEE843716_ai ) {
        auto5F26A50C_n = libPVEM_gf_PvEDifficultyValueInt(16, 24);
        for (auto5F26A50C_i = 1; auto5F26A50C_i <= auto5F26A50C_n; auto5F26A50C_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergZergling", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        autoE02F9DF7_n = libPVEM_gf_PvEDifficultyValueInt(1, 1);
        for (autoE02F9DF7_i = 1; autoE02F9DF7_i <= autoE02F9DF7_n; autoE02F9DF7_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergUltralisk", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        auto0F2CEE7F_n = libPVEM_gf_PvEDifficultyValueInt(4, 6);
        for (auto0F2CEE7F_i = 1; auto0F2CEE7F_i <= auto0F2CEE7F_n; auto0F2CEE7F_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergHydralisk", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        auto21F397B9_n = libPEB1_gv_attackWaveHeroCount[lv_laneIndex];
        for (auto21F397B9_i = 1; auto21F397B9_i <= auto21F397B9_n; auto21F397B9_i += 1) {
            libPEB1_gf_SpawnZergHeroforWave(RegionGetCenter(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), lv_attackGroups[lv_laneIndex]);
        }
        if ((lv_laneIndex == 2)) {
            Wait(5.0, c_timeGame);
        }

    }
    lv_laneIndex = 1;
    for ( ; ( (auto69FB7B2D_ai >= 0 && lv_laneIndex <= auto69FB7B2D_ae) || (auto69FB7B2D_ai < 0 && lv_laneIndex >= auto69FB7B2D_ae) ) ; lv_laneIndex += auto69FB7B2D_ai ) {
        if ((UnitGroupCount(lv_attackGroups[lv_laneIndex], c_unitCountAlive) > 0)) {
            libPVEM_gf_PvECreateAttackWave();
            lv_waveIndex = libPVEM_gf_PvELastCreatedAttackWave();
            auto594038BC_g = lv_attackGroups[lv_laneIndex];
            auto594038BC_u = UnitGroupCount(auto594038BC_g, c_unitCountAll);
            for (;; auto594038BC_u -= 1) {
                auto594038BC_var = UnitGroupUnitFromEnd(auto594038BC_g, auto594038BC_u);
                if (auto594038BC_var == null) { break; }
                libPVEM_gf_PvEAddUnitToAttackWave(lv_waveIndex, auto594038BC_var);
            }
            libPEB1_gf_ConfigureAttackWaveWaypointsforLane(lv_waveIndex, lv_laneIndex);
            libPEB1_gf_SendEventWavewithDelay(lv_waveIndex, lv_attackGroups[lv_laneIndex], 10.0);
        }

    }
    if ((libPEB1_gv_holdout2IntroTransmissionFinished == false)) {
        while (!((libPEB1_gv_holdout2IntroTransmissionFinished == true))) {
            Wait(1.0, c_timeGame);
        }
    }
    else {
        Wait(5.0, c_timeGame);
    }
    lv_laneIndex = 1;
    for ( ; ( (auto5401C14B_ai >= 0 && lv_laneIndex <= auto5401C14B_ae) || (auto5401C14B_ai < 0 && lv_laneIndex >= auto5401C14B_ae) ) ; lv_laneIndex += auto5401C14B_ai ) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((UnitGroupCount(lv_attackGroups[lv_laneIndex], c_unitCountAlive) > 0)) {
            MinimapPing(PlayerGroupAll(), UnitGroupCenterOfGroup(lv_attackGroups[lv_laneIndex]), 2.0, libCore_gv_cOLOREnemyColor);
            libPEB1_gf_CreateEventWavePing(lv_attackGroups[lv_laneIndex], (libPEB1_gv_attackWaveHeroCount[lv_laneIndex] > 0));
            Wait(0.1, c_timeReal);
        }

    }
    TextExpressionSetToken("Param/Expression/lib_PEB1_6ABEF67A", "A", IntToText(libPEB1_gv_holdout2_WaveCurrent));
    TextExpressionSetToken("Param/Expression/lib_PEB1_6ABEF67A", "B", IntToText(libPEB1_gv_holdout2_WaveTotal_C));
    libPEB1_gf_SetHoldoutPanelTimerText(TextExpressionAssemble("Param/Expression/lib_PEB1_6ABEF67A"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout2Wave1_Init () {
    libPEB1_gt_Holdout2Wave1 = TriggerCreate("libPEB1_gt_Holdout2Wave1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 2 Wave 2
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout2Wave2_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup[4] lv_attackGroups;
    int lv_laneIndex;
    int lv_waveIndex;

    // Automatic Variable Declarations
    const int autoF719EE40_ae = 1;
    const int autoF719EE40_ai = -1;
    int auto98488F43_n;
    int auto98488F43_i;
    int auto176470E9_n;
    int auto176470E9_i;
    int auto90C8AE45_n;
    int auto90C8AE45_i;
    int auto571F1274_n;
    int auto571F1274_i;
    int autoC5D97965_n;
    int autoC5D97965_i;
    const int auto818697CA_ae = 2;
    const int auto818697CA_ai = 1;
    unitgroup autoDA3E6E7D_g;
    int autoDA3E6E7D_u;
    unit autoDA3E6E7D_var;
    const int autoB82E1541_ae = 2;
    const int autoB82E1541_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_attackGroups[init_i] = UnitGroupEmpty();
    }

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_laneIndex = 2;
    for ( ; ( (autoF719EE40_ai >= 0 && lv_laneIndex <= autoF719EE40_ae) || (autoF719EE40_ai < 0 && lv_laneIndex >= autoF719EE40_ae) ) ; lv_laneIndex += autoF719EE40_ai ) {
        auto98488F43_n = libPVEM_gf_PvEDifficultyValueInt(6, 8);
        for (auto98488F43_i = 1; auto98488F43_i <= auto98488F43_n; auto98488F43_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergBaneling", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        auto176470E9_n = libPVEM_gf_PvEDifficultyValueInt(16, 24);
        for (auto176470E9_i = 1; auto176470E9_i <= auto176470E9_n; auto176470E9_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergZergling", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        auto90C8AE45_n = libPVEM_gf_PvEDifficultyValueInt(3, 4);
        for (auto90C8AE45_i = 1; auto90C8AE45_i <= auto90C8AE45_n; auto90C8AE45_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergMutalisk", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        auto571F1274_n = libPVEM_gf_PvEDifficultyValueInt(1, 2);
        for (auto571F1274_i = 1; auto571F1274_i <= auto571F1274_n; auto571F1274_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergGuardian", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        autoC5D97965_n = libPEB1_gv_attackWaveHeroCount[lv_laneIndex];
        for (autoC5D97965_i = 1; autoC5D97965_i <= autoC5D97965_n; autoC5D97965_i += 1) {
            libPEB1_gf_SpawnZergHeroforWave(RegionGetCenter(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), lv_attackGroups[lv_laneIndex]);
        }
        if ((lv_laneIndex == 2)) {
            Wait(5.0, c_timeGame);
        }

    }
    lv_laneIndex = 1;
    for ( ; ( (auto818697CA_ai >= 0 && lv_laneIndex <= auto818697CA_ae) || (auto818697CA_ai < 0 && lv_laneIndex >= auto818697CA_ae) ) ; lv_laneIndex += auto818697CA_ai ) {
        if ((UnitGroupCount(lv_attackGroups[lv_laneIndex], c_unitCountAlive) > 0)) {
            libPVEM_gf_PvECreateAttackWave();
            lv_waveIndex = libPVEM_gf_PvELastCreatedAttackWave();
            autoDA3E6E7D_g = lv_attackGroups[lv_laneIndex];
            autoDA3E6E7D_u = UnitGroupCount(autoDA3E6E7D_g, c_unitCountAll);
            for (;; autoDA3E6E7D_u -= 1) {
                autoDA3E6E7D_var = UnitGroupUnitFromEnd(autoDA3E6E7D_g, autoDA3E6E7D_u);
                if (autoDA3E6E7D_var == null) { break; }
                libPVEM_gf_PvEAddUnitToAttackWave(lv_waveIndex, autoDA3E6E7D_var);
            }
            libPEB1_gf_ConfigureAttackWaveWaypointsforLane(lv_waveIndex, lv_laneIndex);
            libPEB1_gf_SendEventWavewithDelay(lv_waveIndex, lv_attackGroups[lv_laneIndex], 10.0);
        }

    }
    Wait(5.0, c_timeGame);
    lv_laneIndex = 1;
    for ( ; ( (autoB82E1541_ai >= 0 && lv_laneIndex <= autoB82E1541_ae) || (autoB82E1541_ai < 0 && lv_laneIndex >= autoB82E1541_ae) ) ; lv_laneIndex += autoB82E1541_ai ) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((UnitGroupCount(lv_attackGroups[lv_laneIndex], c_unitCountAlive) > 0)) {
            MinimapPing(PlayerGroupAll(), UnitGroupCenterOfGroup(lv_attackGroups[lv_laneIndex]), 2.0, libCore_gv_cOLOREnemyColor);
            libPEB1_gf_CreateEventWavePing(lv_attackGroups[lv_laneIndex], (libPEB1_gv_attackWaveHeroCount[lv_laneIndex] > 0));
            Wait(0.1, c_timeReal);
        }

    }
    TextExpressionSetToken("Param/Expression/lib_PEB1_18933E9B", "A", IntToText(libPEB1_gv_holdout2_WaveCurrent));
    TextExpressionSetToken("Param/Expression/lib_PEB1_18933E9B", "B", IntToText(libPEB1_gv_holdout2_WaveTotal_C));
    libPEB1_gf_SetHoldoutPanelTimerText(TextExpressionAssemble("Param/Expression/lib_PEB1_18933E9B"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout2Wave2_Init () {
    libPEB1_gt_Holdout2Wave2 = TriggerCreate("libPEB1_gt_Holdout2Wave2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 2 Wave 3
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout2Wave3_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup[4] lv_attackGroups;
    int lv_laneIndex;
    int lv_waveIndex;

    // Automatic Variable Declarations
    const int auto2F39C3ED_ae = 1;
    const int auto2F39C3ED_ai = -1;
    int auto8C91AFF2_n;
    int auto8C91AFF2_i;
    int auto0293EF3F_n;
    int auto0293EF3F_i;
    int auto4CAD5232_n;
    int auto4CAD5232_i;
    int autoC037A594_n;
    int autoC037A594_i;
    int auto1296B63B_n;
    int auto1296B63B_i;
    const int auto19C06395_ae = 2;
    const int auto19C06395_ai = 1;
    unitgroup autoE7B75BB0_g;
    int autoE7B75BB0_u;
    unit autoE7B75BB0_var;
    const int auto1AB04B7C_ae = 2;
    const int auto1AB04B7C_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_attackGroups[init_i] = UnitGroupEmpty();
    }

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_laneIndex = 2;
    for ( ; ( (auto2F39C3ED_ai >= 0 && lv_laneIndex <= auto2F39C3ED_ae) || (auto2F39C3ED_ai < 0 && lv_laneIndex >= auto2F39C3ED_ae) ) ; lv_laneIndex += auto2F39C3ED_ai ) {
        auto8C91AFF2_n = libPVEM_gf_PvEDifficultyValueInt(3, 4);
        for (auto8C91AFF2_i = 1; auto8C91AFF2_i <= auto8C91AFF2_n; auto8C91AFF2_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergRoach", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        auto0293EF3F_n = libPVEM_gf_PvEDifficultyValueInt(3, 4);
        for (auto0293EF3F_i = 1; auto0293EF3F_i <= auto0293EF3F_n; auto0293EF3F_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergHydralisk", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        auto4CAD5232_n = libPVEM_gf_PvEDifficultyValueInt(4, 6);
        for (auto4CAD5232_i = 1; auto4CAD5232_i <= auto4CAD5232_n; auto4CAD5232_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergBaneling", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        autoC037A594_n = libPVEM_gf_PvEDifficultyValueInt(1, 1);
        for (autoC037A594_i = 1; autoC037A594_i <= autoC037A594_n; autoC037A594_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergUltralisk", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        auto1296B63B_n = libPEB1_gv_attackWaveHeroCount[lv_laneIndex];
        for (auto1296B63B_i = 1; auto1296B63B_i <= auto1296B63B_n; auto1296B63B_i += 1) {
            libPEB1_gf_SpawnZergHeroforWave(RegionGetCenter(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), lv_attackGroups[lv_laneIndex]);
        }
        if ((lv_laneIndex == 2)) {
            Wait(5.0, c_timeGame);
        }

    }
    lv_laneIndex = 1;
    for ( ; ( (auto19C06395_ai >= 0 && lv_laneIndex <= auto19C06395_ae) || (auto19C06395_ai < 0 && lv_laneIndex >= auto19C06395_ae) ) ; lv_laneIndex += auto19C06395_ai ) {
        if ((UnitGroupCount(lv_attackGroups[lv_laneIndex], c_unitCountAlive) > 0)) {
            libPVEM_gf_PvECreateAttackWave();
            lv_waveIndex = libPVEM_gf_PvELastCreatedAttackWave();
            autoE7B75BB0_g = lv_attackGroups[lv_laneIndex];
            autoE7B75BB0_u = UnitGroupCount(autoE7B75BB0_g, c_unitCountAll);
            for (;; autoE7B75BB0_u -= 1) {
                autoE7B75BB0_var = UnitGroupUnitFromEnd(autoE7B75BB0_g, autoE7B75BB0_u);
                if (autoE7B75BB0_var == null) { break; }
                libPVEM_gf_PvEAddUnitToAttackWave(lv_waveIndex, autoE7B75BB0_var);
            }
            libPEB1_gf_ConfigureAttackWaveWaypointsforLane(lv_waveIndex, lv_laneIndex);
            libPEB1_gf_SendEventWavewithDelay(lv_waveIndex, lv_attackGroups[lv_laneIndex], 10.0);
        }

    }
    Wait(5.0, c_timeGame);
    lv_laneIndex = 1;
    for ( ; ( (auto1AB04B7C_ai >= 0 && lv_laneIndex <= auto1AB04B7C_ae) || (auto1AB04B7C_ai < 0 && lv_laneIndex >= auto1AB04B7C_ae) ) ; lv_laneIndex += auto1AB04B7C_ai ) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((UnitGroupCount(lv_attackGroups[lv_laneIndex], c_unitCountAlive) > 0)) {
            MinimapPing(PlayerGroupAll(), UnitGroupCenterOfGroup(lv_attackGroups[lv_laneIndex]), 2.0, libCore_gv_cOLOREnemyColor);
            libPEB1_gf_CreateEventWavePing(lv_attackGroups[lv_laneIndex], (libPEB1_gv_attackWaveHeroCount[lv_laneIndex] > 0));
            Wait(0.1, c_timeReal);
        }

    }
    TextExpressionSetToken("Param/Expression/lib_PEB1_E201E5EA", "A", IntToText(libPEB1_gv_holdout2_WaveCurrent));
    TextExpressionSetToken("Param/Expression/lib_PEB1_E201E5EA", "B", IntToText(libPEB1_gv_holdout2_WaveTotal_C));
    libPEB1_gf_SetHoldoutPanelTimerText(TextExpressionAssemble("Param/Expression/lib_PEB1_E201E5EA"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout2Wave3_Init () {
    libPEB1_gt_Holdout2Wave3 = TriggerCreate("libPEB1_gt_Holdout2Wave3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 3
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_transmissionDuration;
    fixed lv_detonationRadius;
    int lv_i;

    // Automatic Variable Declarations
    const int autoCCA6A644_ae = 31;
    const int autoCCA6A644_ai = 1;
    unitgroup autoF4D1454B_g;
    int autoF4D1454B_u;
    unit autoF4D1454B_var;
    unitgroup auto9CC0F92B_g;
    int auto9CC0F92B_u;
    unit auto9CC0F92B_var;
    unitgroup auto98818431_g;
    int auto98818431_u;
    unit auto98818431_var;
    const int auto90CE0A6B_n = 24;
    int auto90CE0A6B_i;
    unitgroup autoA00E9408_g;
    int autoA00E9408_u;
    unit autoA00E9408_var;

    // Variable Initialization
    lv_detonationRadius = 3.0;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libPEB1_gt_HatcheryDefense, false);
    lv_i = 1;
    for ( ; ( (autoCCA6A644_ai >= 0 && lv_i <= autoCCA6A644_ae) || (autoCCA6A644_ai < 0 && lv_i >= autoCCA6A644_ae) ) ; lv_i += autoCCA6A644_ai ) {
        UnitKill(libPEB1_gv_hatcheries[lv_i].lv_structure);
    }
    autoF4D1454B_g = libPEB1_gv_activeZergMinions;
    autoF4D1454B_u = UnitGroupCount(autoF4D1454B_g, c_unitCountAll);
    for (;; autoF4D1454B_u -= 1) {
        autoF4D1454B_var = UnitGroupUnitFromEnd(autoF4D1454B_g, autoF4D1454B_u);
        if (autoF4D1454B_var == null) { break; }
        UnitKill(autoF4D1454B_var);
    }
    auto9CC0F92B_g = libPEB1_gv_activeZergHeroes;
    auto9CC0F92B_u = UnitGroupCount(auto9CC0F92B_g, c_unitCountAll);
    for (;; auto9CC0F92B_u -= 1) {
        auto9CC0F92B_var = UnitGroupUnitFromEnd(auto9CC0F92B_g, auto9CC0F92B_u);
        if (auto9CC0F92B_var == null) { break; }
        UnitKill(auto9CC0F92B_var);
    }
    auto98818431_g = UnitGroup("SpineCrawler", libCore_gv_cOMPUTER_TeamChaos, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto98818431_u = UnitGroupCount(auto98818431_g, c_unitCountAll);
    for (;; auto98818431_u -= 1) {
        auto98818431_var = UnitGroupUnitFromEnd(auto98818431_g, auto98818431_u);
        if (auto98818431_var == null) { break; }
        UnitKill(auto98818431_var);
    }
    lv_transmissionDuration = SoundLengthSync(SoundLinkNoIndex(ConversationDataGetSound("DeadmanPVEVO|Line00068", false)));
    TriggerExecute(libPEB1_gt_Holdout3AttackWaves, true, false);
    libPEB1_gv_holdout3_Started = true;
    TriggerExecute(libPEB1_gt_Holdout3Q, true, true);
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    libPVEU_gf_PvEUICreateDirectiveMessage(StringExternal("Param/Value/lib_PEB1_F88FB803"), StringExternal("Param/Value/lib_PEB1_2AC6184A"), libPVEU_ge_PvEUIDirectiveStyle_PvEUIDirectiveStyel_ObjectiveDiscovered);
    libPEB1_gf_ShowHideObjectivePanel(false);
    Wait(3.0, c_timeReal);
    libPEB1_gv_holdout3IntroTransmissionFinished = true;
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MX_BraxisHoldout_LVL_20", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TimerStart(libPEB1_gv_holdout3_Timer, libPEB1_gv_holdout3_Duration_C, false, c_timeGame);
    libPEB1_gf_ShowHideHoldoutPanel(false);
    libPEB1_gf_DisplayObjectivePanel(StringExternal("Param/Value/lib_PEB1_A64F5129"), StringToText(""), StringExternal("Param/Value/lib_PEB1_094A44B0"), libPEB1_gv_holdout3_Timer);
    libNtve_gf_SetDialogItemImage(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelIcon, "Assets\\Textures\\storm_ui_brawl_minimap_efb_alertzergremaining.dds", PlayerGroupAll());
    TriggerExecute(libPEB1_gt_Holdout3CreepTumors, true, false);
    libGame_gf_SpecialLightingEventStart(libPEB1_gv_nightLighting, PlayerGroupAll(), 20.0);
    while (!((TimerGetRemaining(libPEB1_gv_holdout3_Timer) <= (26.0 + lv_transmissionDuration)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(libPEB1_gt_Holdout3AlmostCompleteQ, true, false);
    while (!((TimerGetRemaining(libPEB1_gv_holdout3_Timer) <= 26.0))) {
        Wait(0.5, c_timeGame);
    }
    if (((libGame_gv_gameOver == true) || (UnitIsAlive(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core) == false))) {
        return true;
    }

    SoundPlayAtPointForPlayer(SoundLink("CoreCharge", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core), 1.0, 100.0, 0.0);
    SoundPlayAtPointForPlayer(SoundLink("CoreChargeLoop", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core), 1.0, 100.0, 0.0);
    libPEB1_gv_coreChargingLoop = SoundLastPlayed();
    libNtve_gf_CreateModelAtPoint("CoreChargeBuff", UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core));
    libPEB1_gv_coreChargingEffect = libNtve_gf_ActorLastCreated();
    while (!((TimerGetRemaining(libPEB1_gv_holdout3_Timer) <= 15.0))) {
        Wait(1.0, c_timeGame);
    }
    libGame_gv_announcement_SystemEnabled = false;
    TriggerEnable(libPEB1_gt_BunkersFallQ, false);
    TriggerEnable(libPEB1_gt_PlanetaryFortressDestroyedQ, false);
    while (!((TimerGetRemaining(libPEB1_gv_holdout3_Timer) <= 1.5))) {
        Wait(0.5, c_timeGame);
    }
    if (((libGame_gv_gameOver == true) || (UnitIsAlive(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core) == false))) {
        return true;
    }

    libNtve_gf_ChangeUnitDamage(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libPEB1_gv_holdout3_Complete = true;
    SoundStop(libPEB1_gv_coreChargingLoop, true);
    SoundPlayForPlayer(SoundLink("CoreDisruptionChargeReady", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libPEB1_gf_ShowMissionCompletePanel(StringExternal("Param/Value/lib_PEB1_497DC59F"));
    ActorSend(libPEB1_gv_coreChargingEffect, "SetScale 4.000000,4.000000,2.000000 2.000000");
    ActorSend(libPEB1_gv_coreChargingEffect, "SetOpacity 0.000000 2.000000");
    TriggerExecute(libPEB1_gt_VictoryFinalHoldoutComplete, true, false);
    Wait(1.5, c_timeGame);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "VictoryMusic", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundPlayForPlayer(SoundLink("CoreDisruptionExpand", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateModelAtPoint("CoreDisruption", UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core));
    libPEB1_gv_coreDisruptionEffect = libNtve_gf_ActorLastCreated();
    libNtve_gf_PlayAnimation(libPEB1_gv_coreDisruptionEffect, c_animNameDefault, "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.3125, c_timeGame);
    SoundPlayForPlayer(SoundLink("CoreDisruptionExplode", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    for (auto90CE0A6B_i = 1; auto90CE0A6B_i <= auto90CE0A6B_n; auto90CE0A6B_i += 1) {
        autoA00E9408_g = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceAlly, RegionCircle(UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core), lv_detonationRadius), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
        autoA00E9408_u = UnitGroupCount(autoA00E9408_g, c_unitCountAll);
        for (;; autoA00E9408_u -= 1) {
            autoA00E9408_var = UnitGroupUnitFromEnd(autoA00E9408_g, autoA00E9408_u);
            if (autoA00E9408_var == null) { break; }
            libNtve_gf_PauseUnit(autoA00E9408_var, false);
            UnitCreateEffectUnit(autoA00E9408_var, "Kill", autoA00E9408_var);
        }
        Wait(0.0625, c_timeGame);
        lv_detonationRadius += 2.4;
    }
    Wait(5.0, c_timeGame);
    ActorSend(libPEB1_gv_coreDisruptionEffect, "SetOpacity 0.000000 1.000000");
    Wait(1.0, c_timeGame);
    libNtve_gf_KillModel(libPEB1_gv_coreChargingEffect);
    libNtve_gf_KillModel(libPEB1_gv_coreDisruptionEffect);
    Wait(5.0, c_timeGame);
    libPEB1_gf_ShowHideObjectivePanel(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout3_Init () {
    libPEB1_gt_Holdout3 = TriggerCreate("libPEB1_gt_Holdout3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 3 Attack Waves
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout3AttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(15.0, c_timeGame);
    libPEB1_gv_spawnMurkyForFinalHoldout = true;
    libPEB1_gf_IncludeHeroIntheNextAttackWave(1, 1);
    TriggerExecute(libPEB1_gt_Holdout3Wave1, true, false);
    Wait(30.0, c_timeGame);
    libPEB1_gf_IncludeHeroIntheNextAttackWave(1, 1);
    TriggerExecute(libPEB1_gt_Holdout3Wave2, true, false);
    Wait(20.0, c_timeGame);
    libPEB1_gf_IncludeHeroIntheNextAttackWave(0, 0);
    TriggerExecute(libPEB1_gt_Holdout3Wave3, true, false);
    Wait(5.0, c_timeGame);
    TriggerExecute(libPEB1_gt_Holdout3SideWaves, true, false);
    Wait(15.0, c_timeGame);
    libPEB1_gf_IncludeHeroIntheNextAttackWave(1, 1);
    TriggerExecute(libPEB1_gt_Holdout3Wave1, true, false);
    Wait(20.0, c_timeGame);
    libPEB1_gf_CreateNydusWormatPoint(PointFromName("Nydus Worm 1"));
    Wait(0.1, c_timeGame);
    libPEB1_gf_CreateNydusWormatPoint(PointFromName("Nydus Worm 2"));
    Wait(0.1, c_timeGame);
    libPEB1_gf_CreateNydusWormatPoint(PointFromName("Nydus Worm 3"));
    Wait(0.1, c_timeGame);
    libPEB1_gf_CreateNydusWormatPoint(PointFromName("Nydus Worm 4"));
    Wait(0.1, c_timeGame);
    libPEB1_gf_CreateNydusWormatPoint(PointFromName("Nydus Worm 5"));
    libPEB1_gf_IncludeHeroIntheNextAttackWave(0, 0);
    TriggerExecute(libPEB1_gt_Holdout3Wave2, true, false);
    Wait(20.0, c_timeGame);
    libPEB1_gf_IncludeHeroIntheNextAttackWave(1, 1);
    TriggerExecute(libPEB1_gt_Holdout3Wave3, true, false);
    Wait(5.0, c_timeGame);
    TriggerExecute(libPEB1_gt_Holdout3SideWaves, true, false);
    Wait(15.0, c_timeGame);
    libPEB1_gf_IncludeHeroIntheNextAttackWave(1, 1);
    TriggerExecute(libPEB1_gt_Holdout3Wave1, true, false);
    Wait(20.0, c_timeGame);
    libPEB1_gf_IncludeHeroIntheNextAttackWave(0, 0);
    TriggerExecute(libPEB1_gt_Holdout3Wave2, true, false);
    Wait(20.0, c_timeGame);
    libPEB1_gf_IncludeHeroIntheNextAttackWave(0, 0);
    TriggerExecute(libPEB1_gt_Holdout3Wave3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout3AttackWaves_Init () {
    libPEB1_gt_Holdout3AttackWaves = TriggerCreate("libPEB1_gt_Holdout3AttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 3 Wave 1
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout3Wave1_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup[4] lv_attackGroups;
    int lv_laneIndex;
    int lv_waveIndex;

    // Automatic Variable Declarations
    const int auto98E0E296_ae = 2;
    const int auto98E0E296_ai = 1;
    int auto067F6AC8_n;
    int auto067F6AC8_i;
    int autoC9D98D1E_n;
    int autoC9D98D1E_i;
    int auto5BE13134_n;
    int auto5BE13134_i;
    int auto8F4EEBAB_n;
    int auto8F4EEBAB_i;
    const int auto792000FF_ae = 2;
    const int auto792000FF_ai = 1;
    unitgroup auto57AC28AC_g;
    int auto57AC28AC_u;
    unit auto57AC28AC_var;
    const int autoF2A3B769_ae = 2;
    const int autoF2A3B769_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_attackGroups[init_i] = UnitGroupEmpty();
    }

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_laneIndex = 1;
    for ( ; ( (auto98E0E296_ai >= 0 && lv_laneIndex <= auto98E0E296_ae) || (auto98E0E296_ai < 0 && lv_laneIndex >= auto98E0E296_ae) ) ; lv_laneIndex += auto98E0E296_ai ) {
        auto067F6AC8_n = libPVEM_gf_PvEDifficultyValueInt(16, 24);
        for (auto067F6AC8_i = 1; auto067F6AC8_i <= auto067F6AC8_n; auto067F6AC8_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergZergling", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        autoC9D98D1E_n = libPVEM_gf_PvEDifficultyValueInt(2, 2);
        for (autoC9D98D1E_i = 1; autoC9D98D1E_i <= autoC9D98D1E_n; autoC9D98D1E_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergUltralisk", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        auto5BE13134_n = libPVEM_gf_PvEDifficultyValueInt(6, 8);
        for (auto5BE13134_i = 1; auto5BE13134_i <= auto5BE13134_n; auto5BE13134_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergHydralisk", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        auto8F4EEBAB_n = libPEB1_gv_attackWaveHeroCount[lv_laneIndex];
        for (auto8F4EEBAB_i = 1; auto8F4EEBAB_i <= auto8F4EEBAB_n; auto8F4EEBAB_i += 1) {
            libPEB1_gf_SpawnZergHeroforWave(RegionGetCenter(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), lv_attackGroups[lv_laneIndex]);
        }
    }
    lv_laneIndex = 1;
    for ( ; ( (auto792000FF_ai >= 0 && lv_laneIndex <= auto792000FF_ae) || (auto792000FF_ai < 0 && lv_laneIndex >= auto792000FF_ae) ) ; lv_laneIndex += auto792000FF_ai ) {
        if ((UnitGroupCount(lv_attackGroups[lv_laneIndex], c_unitCountAlive) > 0)) {
            libPVEM_gf_PvECreateAttackWave();
            lv_waveIndex = libPVEM_gf_PvELastCreatedAttackWave();
            auto57AC28AC_g = lv_attackGroups[lv_laneIndex];
            auto57AC28AC_u = UnitGroupCount(auto57AC28AC_g, c_unitCountAll);
            for (;; auto57AC28AC_u -= 1) {
                auto57AC28AC_var = UnitGroupUnitFromEnd(auto57AC28AC_g, auto57AC28AC_u);
                if (auto57AC28AC_var == null) { break; }
                libPVEM_gf_PvEAddUnitToAttackWave(lv_waveIndex, auto57AC28AC_var);
            }
            libPEB1_gf_ConfigureAttackWaveWaypointsforLane(lv_waveIndex, lv_laneIndex);
            libPEB1_gf_SendEventWavewithDelay(lv_waveIndex, lv_attackGroups[lv_laneIndex], 10.0);
        }

    }
    if ((libPEB1_gv_holdout3IntroTransmissionFinished == false)) {
        while (!((libPEB1_gv_holdout3IntroTransmissionFinished == true))) {
            Wait(1.0, c_timeGame);
        }
    }
    else {
        Wait(5.0, c_timeGame);
    }
    lv_laneIndex = 1;
    for ( ; ( (autoF2A3B769_ai >= 0 && lv_laneIndex <= autoF2A3B769_ae) || (autoF2A3B769_ai < 0 && lv_laneIndex >= autoF2A3B769_ae) ) ; lv_laneIndex += autoF2A3B769_ai ) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((UnitGroupCount(lv_attackGroups[lv_laneIndex], c_unitCountAlive) > 0)) {
            MinimapPing(PlayerGroupAll(), UnitGroupCenterOfGroup(lv_attackGroups[lv_laneIndex]), 2.0, libCore_gv_cOLOREnemyColor);
            libPEB1_gf_CreateEventWavePing(lv_attackGroups[lv_laneIndex], (libPEB1_gv_attackWaveHeroCount[lv_laneIndex] > 0));
            Wait(0.1, c_timeReal);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout3Wave1_Init () {
    libPEB1_gt_Holdout3Wave1 = TriggerCreate("libPEB1_gt_Holdout3Wave1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 3 Wave 2
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout3Wave2_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup[4] lv_attackGroups;
    int lv_laneIndex;
    int lv_waveIndex;

    // Automatic Variable Declarations
    const int auto85BDDC0B_ae = 2;
    const int auto85BDDC0B_ai = 1;
    int auto4AE00383_n;
    int auto4AE00383_i;
    int autoB9831C70_n;
    int autoB9831C70_i;
    int autoCE7B3560_n;
    int autoCE7B3560_i;
    int auto8FA4F875_n;
    int auto8FA4F875_i;
    int auto68282C51_n;
    int auto68282C51_i;
    const int autoEEDE5713_ae = 2;
    const int autoEEDE5713_ai = 1;
    unitgroup autoCE6C1D4B_g;
    int autoCE6C1D4B_u;
    unit autoCE6C1D4B_var;
    const int auto2BA792D1_ae = 2;
    const int auto2BA792D1_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_attackGroups[init_i] = UnitGroupEmpty();
    }

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_laneIndex = 1;
    for ( ; ( (auto85BDDC0B_ai >= 0 && lv_laneIndex <= auto85BDDC0B_ae) || (auto85BDDC0B_ai < 0 && lv_laneIndex >= auto85BDDC0B_ae) ) ; lv_laneIndex += auto85BDDC0B_ai ) {
        auto4AE00383_n = libPVEM_gf_PvEDifficultyValueInt(8, 12);
        for (auto4AE00383_i = 1; auto4AE00383_i <= auto4AE00383_n; auto4AE00383_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergBaneling", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        autoB9831C70_n = libPVEM_gf_PvEDifficultyValueInt(16, 24);
        for (autoB9831C70_i = 1; autoB9831C70_i <= autoB9831C70_n; autoB9831C70_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergZergling", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        autoCE7B3560_n = libPVEM_gf_PvEDifficultyValueInt(2, 3);
        for (autoCE7B3560_i = 1; autoCE7B3560_i <= autoCE7B3560_n; autoCE7B3560_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergGuardian", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        auto8FA4F875_n = libPVEM_gf_PvEDifficultyValueInt(4, 6);
        for (auto8FA4F875_i = 1; auto8FA4F875_i <= auto8FA4F875_n; auto8FA4F875_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergMutalisk", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        auto68282C51_n = libPEB1_gv_attackWaveHeroCount[lv_laneIndex];
        for (auto68282C51_i = 1; auto68282C51_i <= auto68282C51_n; auto68282C51_i += 1) {
            libPEB1_gf_SpawnZergHeroforWave(RegionGetCenter(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), lv_attackGroups[lv_laneIndex]);
        }
    }
    lv_laneIndex = 1;
    for ( ; ( (autoEEDE5713_ai >= 0 && lv_laneIndex <= autoEEDE5713_ae) || (autoEEDE5713_ai < 0 && lv_laneIndex >= autoEEDE5713_ae) ) ; lv_laneIndex += autoEEDE5713_ai ) {
        if ((UnitGroupCount(lv_attackGroups[lv_laneIndex], c_unitCountAlive) > 0)) {
            libPVEM_gf_PvECreateAttackWave();
            lv_waveIndex = libPVEM_gf_PvELastCreatedAttackWave();
            autoCE6C1D4B_g = lv_attackGroups[lv_laneIndex];
            autoCE6C1D4B_u = UnitGroupCount(autoCE6C1D4B_g, c_unitCountAll);
            for (;; autoCE6C1D4B_u -= 1) {
                autoCE6C1D4B_var = UnitGroupUnitFromEnd(autoCE6C1D4B_g, autoCE6C1D4B_u);
                if (autoCE6C1D4B_var == null) { break; }
                libPVEM_gf_PvEAddUnitToAttackWave(lv_waveIndex, autoCE6C1D4B_var);
            }
            libPEB1_gf_ConfigureAttackWaveWaypointsforLane(lv_waveIndex, lv_laneIndex);
            libPEB1_gf_SendEventWavewithDelay(lv_waveIndex, lv_attackGroups[lv_laneIndex], 10.0);
        }

    }
    Wait(5.0, c_timeGame);
    lv_laneIndex = 1;
    for ( ; ( (auto2BA792D1_ai >= 0 && lv_laneIndex <= auto2BA792D1_ae) || (auto2BA792D1_ai < 0 && lv_laneIndex >= auto2BA792D1_ae) ) ; lv_laneIndex += auto2BA792D1_ai ) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((UnitGroupCount(lv_attackGroups[lv_laneIndex], c_unitCountAlive) > 0)) {
            MinimapPing(PlayerGroupAll(), UnitGroupCenterOfGroup(lv_attackGroups[lv_laneIndex]), 2.0, libCore_gv_cOLOREnemyColor);
            libPEB1_gf_CreateEventWavePing(lv_attackGroups[lv_laneIndex], (libPEB1_gv_attackWaveHeroCount[lv_laneIndex] > 0));
            Wait(0.1, c_timeReal);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout3Wave2_Init () {
    libPEB1_gt_Holdout3Wave2 = TriggerCreate("libPEB1_gt_Holdout3Wave2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 3 Wave 3
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout3Wave3_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup[4] lv_attackGroups;
    int lv_laneIndex;
    int lv_waveIndex;

    // Automatic Variable Declarations
    const int auto5C19CF50_ae = 2;
    const int auto5C19CF50_ai = 1;
    int autoFB28611F_n;
    int autoFB28611F_i;
    int auto333D707B_n;
    int auto333D707B_i;
    int auto49F21E8E_n;
    int auto49F21E8E_i;
    int autoFB790170_n;
    int autoFB790170_i;
    int auto66BF9CD5_n;
    int auto66BF9CD5_i;
    const int autoCB4FC7E2_ae = 2;
    const int autoCB4FC7E2_ai = 1;
    unitgroup auto5CE2422C_g;
    int auto5CE2422C_u;
    unit auto5CE2422C_var;
    const int auto705F20EC_ae = 2;
    const int auto705F20EC_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_attackGroups[init_i] = UnitGroupEmpty();
    }

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_laneIndex = 1;
    for ( ; ( (auto5C19CF50_ai >= 0 && lv_laneIndex <= auto5C19CF50_ae) || (auto5C19CF50_ai < 0 && lv_laneIndex >= auto5C19CF50_ae) ) ; lv_laneIndex += auto5C19CF50_ai ) {
        autoFB28611F_n = libPVEM_gf_PvEDifficultyValueInt(8, 12);
        for (autoFB28611F_i = 1; autoFB28611F_i <= autoFB28611F_n; autoFB28611F_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergZergling", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        auto333D707B_n = libPVEM_gf_PvEDifficultyValueInt(6, 8);
        for (auto333D707B_i = 1; auto333D707B_i <= auto333D707B_n; auto333D707B_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergRoach", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        auto49F21E8E_n = libPVEM_gf_PvEDifficultyValueInt(6, 8);
        for (auto49F21E8E_i = 1; auto49F21E8E_i <= auto49F21E8E_n; auto49F21E8E_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergHydralisk", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        autoFB790170_n = libPVEM_gf_PvEDifficultyValueInt(6, 8);
        for (autoFB790170_i = 1; autoFB790170_i <= autoFB790170_n; autoFB790170_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergBaneling", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromName(("Lane " + IntToString(lv_laneIndex) + " - 1"))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "MovementBuff25", UnitLastCreated(), 1);
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        auto66BF9CD5_n = libPEB1_gv_attackWaveHeroCount[lv_laneIndex];
        for (auto66BF9CD5_i = 1; auto66BF9CD5_i <= auto66BF9CD5_n; auto66BF9CD5_i += 1) {
            libPEB1_gf_SpawnZergHeroforWave(RegionGetCenter(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), lv_attackGroups[lv_laneIndex]);
        }
    }
    lv_laneIndex = 1;
    for ( ; ( (autoCB4FC7E2_ai >= 0 && lv_laneIndex <= autoCB4FC7E2_ae) || (autoCB4FC7E2_ai < 0 && lv_laneIndex >= autoCB4FC7E2_ae) ) ; lv_laneIndex += autoCB4FC7E2_ai ) {
        if ((UnitGroupCount(lv_attackGroups[lv_laneIndex], c_unitCountAlive) > 0)) {
            libPVEM_gf_PvECreateAttackWave();
            lv_waveIndex = libPVEM_gf_PvELastCreatedAttackWave();
            auto5CE2422C_g = lv_attackGroups[lv_laneIndex];
            auto5CE2422C_u = UnitGroupCount(auto5CE2422C_g, c_unitCountAll);
            for (;; auto5CE2422C_u -= 1) {
                auto5CE2422C_var = UnitGroupUnitFromEnd(auto5CE2422C_g, auto5CE2422C_u);
                if (auto5CE2422C_var == null) { break; }
                libPVEM_gf_PvEAddUnitToAttackWave(lv_waveIndex, auto5CE2422C_var);
            }
            libPEB1_gf_ConfigureAttackWaveWaypointsforLane(lv_waveIndex, lv_laneIndex);
            libPEB1_gf_SendEventWavewithDelay(lv_waveIndex, lv_attackGroups[lv_laneIndex], 10.0);
        }

    }
    Wait(5.0, c_timeGame);
    lv_laneIndex = 1;
    for ( ; ( (auto705F20EC_ai >= 0 && lv_laneIndex <= auto705F20EC_ae) || (auto705F20EC_ai < 0 && lv_laneIndex >= auto705F20EC_ae) ) ; lv_laneIndex += auto705F20EC_ai ) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((UnitGroupCount(lv_attackGroups[lv_laneIndex], c_unitCountAlive) > 0)) {
            MinimapPing(PlayerGroupAll(), UnitGroupCenterOfGroup(lv_attackGroups[lv_laneIndex]), 2.0, libCore_gv_cOLOREnemyColor);
            libPEB1_gf_CreateEventWavePing(lv_attackGroups[lv_laneIndex], (libPEB1_gv_attackWaveHeroCount[lv_laneIndex] > 0));
            Wait(0.1, c_timeReal);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout3Wave3_Init () {
    libPEB1_gt_Holdout3Wave3 = TriggerCreate("libPEB1_gt_Holdout3Wave3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 3 Side Waves
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout3SideWaves_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup[5] lv_attackGroups;
    int lv_laneIndex;
    int lv_waveIndex;

    // Automatic Variable Declarations
    const int autoAD8BC374_ae = 4;
    const int autoAD8BC374_ai = 1;
    int auto6E50AAC5_n;
    int auto6E50AAC5_i;
    int auto1013DF4B_n;
    int auto1013DF4B_i;
    int autoFAF17DC9_n;
    int autoFAF17DC9_i;
    const int autoB4616F53_ae = 4;
    const int autoB4616F53_ai = 1;
    unitgroup autoF65BBC62_g;
    int autoF65BBC62_u;
    unit autoF65BBC62_var;
    const int auto3160CDFD_ae = 4;
    const int auto3160CDFD_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_attackGroups[init_i] = UnitGroupEmpty();
    }

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_laneIndex = 3;
    for ( ; ( (autoAD8BC374_ai >= 0 && lv_laneIndex <= autoAD8BC374_ae) || (autoAD8BC374_ai < 0 && lv_laneIndex >= autoAD8BC374_ae) ) ; lv_laneIndex += autoAD8BC374_ai ) {
        auto6E50AAC5_n = libPVEM_gf_PvEDifficultyValueInt(8, 12);
        for (auto6E50AAC5_i = 1; auto6E50AAC5_i <= auto6E50AAC5_n; auto6E50AAC5_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergZergling", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        auto1013DF4B_n = libPVEM_gf_PvEDifficultyValueInt(2, 3);
        for (auto1013DF4B_i = 1; auto1013DF4B_i <= auto1013DF4B_n; auto1013DF4B_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergRoach", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
        autoFAF17DC9_n = libPVEM_gf_PvEDifficultyValueInt(2, 3);
        for (autoFAF17DC9_i = 1; autoFAF17DC9_i <= autoFAF17DC9_n; autoFAF17DC9_i += 1) {
            libPVEM_gf_PvESpawnNPCMinions("ZergHydralisk", libCore_gv_cOMPUTER_TeamChaos, RegionRandomPoint(libPEB1_gv_zergSpawnRegions[lv_laneIndex]), libNtve_gf_RandomAngle(), 0);
            UnitGroupAdd(libPEB1_gv_globalAttackGroup, UnitLastCreated());
            UnitGroupAdd(lv_attackGroups[lv_laneIndex], UnitLastCreated());
            Wait(0.0625, c_timeGame);
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

        }
    }
    lv_laneIndex = 3;
    for ( ; ( (autoB4616F53_ai >= 0 && lv_laneIndex <= autoB4616F53_ae) || (autoB4616F53_ai < 0 && lv_laneIndex >= autoB4616F53_ae) ) ; lv_laneIndex += autoB4616F53_ai ) {
        if ((UnitGroupCount(lv_attackGroups[lv_laneIndex], c_unitCountAlive) > 0)) {
            libPVEM_gf_PvECreateAttackWave();
            lv_waveIndex = libPVEM_gf_PvELastCreatedAttackWave();
            autoF65BBC62_g = lv_attackGroups[lv_laneIndex];
            autoF65BBC62_u = UnitGroupCount(autoF65BBC62_g, c_unitCountAll);
            for (;; autoF65BBC62_u -= 1) {
                autoF65BBC62_var = UnitGroupUnitFromEnd(autoF65BBC62_g, autoF65BBC62_u);
                if (autoF65BBC62_var == null) { break; }
                libPVEM_gf_PvEAddUnitToAttackWave(lv_waveIndex, autoF65BBC62_var);
            }
            libPEB1_gf_ConfigureAttackWaveWaypointsforLane(lv_waveIndex, lv_laneIndex);
            libPEB1_gf_SendEventWavewithDelay(lv_waveIndex, lv_attackGroups[lv_laneIndex], 10.0);
        }

    }
    Wait(5.0, c_timeGame);
    lv_laneIndex = 3;
    for ( ; ( (auto3160CDFD_ai >= 0 && lv_laneIndex <= auto3160CDFD_ae) || (auto3160CDFD_ai < 0 && lv_laneIndex >= auto3160CDFD_ae) ) ; lv_laneIndex += auto3160CDFD_ai ) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((UnitGroupCount(lv_attackGroups[lv_laneIndex], c_unitCountAlive) > 0)) {
            MinimapPing(PlayerGroupAll(), UnitGroupCenterOfGroup(lv_attackGroups[lv_laneIndex]), 2.0, libCore_gv_cOLOREnemyColor);
            libPEB1_gf_CreateEventWavePingSmallRadius(lv_attackGroups[lv_laneIndex]);
            Wait(0.1, c_timeReal);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout3SideWaves_Init () {
    libPEB1_gt_Holdout3SideWaves = TriggerCreate("libPEB1_gt_Holdout3SideWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 3 Creep Tumors
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout3CreepTumors_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto4773BF8E_n = 34;
    int auto4773BF8E_i;
    int autoC411E28B_n;
    int autoC411E28B_i;

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    for (auto4773BF8E_i = 1; auto4773BF8E_i <= auto4773BF8E_n; auto4773BF8E_i += 1) {
        autoC411E28B_n = libPVEM_gf_PvEDifficultyValueInt(2, 3);
        for (autoC411E28B_i = 1; autoC411E28B_i <= autoC411E28B_n; autoC411E28B_i += 1) {
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

            libPEB1_gf_CreateDropPod(RegionRandomPoint(RegionFromName("Final Holdout Drop Pods")), "ZergZergling", libPVEM_gf_PvEDifficultyValueInt(4, 6));
            Wait(1.0, c_timeGame);
        }
        Wait(libPVEM_gf_PvEDifficultyValueInt(3, 2), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout3CreepTumors_Init () {
    libPEB1_gt_Holdout3CreepTumors = TriggerCreate("libPEB1_gt_Holdout3CreepTumors_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory - Final Holdout Complete
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_VictoryFinalHoldoutComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto8E542D67_g;
    int auto8E542D67_var;
    playergroup auto07F3FC08_g;
    int auto07F3FC08_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libGame_gv_gameOver = true;
    libPEB1_gv_victoryTime = FixedToInt(libUIUI_gf_HeroesGameTime());
    libPVEM_gv_pvEGameOverResult = c_gameOverVictory;
    TimerPause(libGame_gv_gameTimer, true);
    TimerPause(libGame_gv_matchGameplayTimer, true);
    UnitPauseAll(true);
    auto8E542D67_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    auto8E542D67_var = -1;
    while (true) {
        	auto8E542D67_var = PlayerGroupNextPlayer(auto8E542D67_g, auto8E542D67_var);
        	if (auto8E542D67_var<0) { break; }
        	CameraLockInput(auto8E542D67_var, true);
        PlayerOptionOverride(auto8E542D67_var, "camerafollow", "0");
        CameraApplyInfo(auto8E542D67_var, CameraInfoDefault(), 2.0, -1, 10.0, false);
        CameraPan(auto8E542D67_var, PointFromName("Victory Pan"), 2.0, -1, 10.0, false);
        CameraSetValue(auto8E542D67_var, c_cameraValueDistance, 36.0, 2.0, -1, 10.0);
    }
    Wait(1.5, c_timeGame);
    auto07F3FC08_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    auto07F3FC08_var = -1;
    while (true) {
        	auto07F3FC08_var = PlayerGroupNextPlayer(auto07F3FC08_g, auto07F3FC08_var);
        	if (auto07F3FC08_var<0) { break; }
        	CameraSetValue(auto07F3FC08_var, c_cameraValueDistance, 42.0, 1.5, -1, 10.0);
    }
    TriggerExecute(libPEB1_gt_EndofGameMessages, true, false);
    Wait(5.0, c_timeReal);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 1.5);
    libPEB1_gf_ShowHideHoldoutPanel(false);
    Wait(1.5, c_timeGame);
    TriggerExecute(libPEB1_gt_VictorySequenceQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_VictoryFinalHoldoutComplete_Init () {
    libPEB1_gt_VictoryFinalHoldoutComplete = TriggerCreate("libPEB1_gt_VictoryFinalHoldoutComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Event 1 Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ArchangelEvent1Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bombardmentCounter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPEB1_gf_SpawnDefenseHeroforArchangelArea(libPEB1_gv_archangelSpawnOrder[1], libPEB1_gv_availableHeroTypesDefense[1]);
    TriggerQueueEnter();
    TriggerExecute(libPEB1_gt_Archangel11, true, true);
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerExecute(libPEB1_gt_ArchangelSpawn1, true, false);
    TimerStart(libPEB1_gv_archangel1_Timer, libPEB1_gv_archangel1_Duration_C, false, c_timeGame);
    libPEB1_gf_SetHoldoutPanelComplete();
    libPEB1_gf_DisplayObjectivePanel(StringExternal("Param/Value/lib_PEB1_E3986C40"), StringToText(""), StringExternal("Param/Value/lib_PEB1_7786DCCB"), libPEB1_gv_archangel1_Timer);
    Wait(2.0, c_timeReal);
    TriggerExecute(libPEB1_gt_Archangel12, true, true);
    TriggerQueueExit();
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    libPVEU_gf_PvEUICreateDirectiveMessage(StringExternal("Param/Value/lib_PEB1_F2173785"), StringExternal("Param/Value/lib_PEB1_87C4C3E2"), libPVEU_ge_PvEUIDirectiveStyle_PvEUIDirectiveStyel_ObjectiveDiscovered);
    TriggerEnable(libPEB1_gt_Archangel1Killed, true);
    Wait(1.0, c_timeReal);
    while (!(((UnitIsAlive(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[1]].lv_archangelUnit) == false) || (TimerGetRemaining(libPEB1_gv_archangel1_Timer) <= 30.0)))) {
        Wait(0.25, c_timeGame);
    }
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, "BattleshipBombardDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, "2000");
    if ((UnitIsAlive(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[1]].lv_archangelUnit) == true)) {
        libNtve_gf_SetDialogItemStyle(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelTimerLabel2, "Storm_CoopZerg_ObjectiveLabel_BottomLeft_Red", PlayerGroupAll());
        TriggerExecute(libPEB1_gt_Archangel1ClosetoLaunchQ, true, true);
        while (!(((UnitIsAlive(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[1]].lv_archangelUnit) == false) || (TimerGetRemaining(libPEB1_gv_archangel1_Timer) == 0.0)))) {
            Wait(0.25, c_timeGame);
        }
        libPEB1_gf_DisplayObjectivePanel(StringExternal("Param/Value/lib_PEB1_0408613D"), StringToText(""), StringExternal("Param/Value/lib_PEB1_AF449A6E"), null);
        DialogControlSetVisible(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelInfoLabel2, PlayerGroupAll(), false);
        DialogControlSetVisible(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelInfoLabel3, PlayerGroupAll(), true);
        libPEB1_gf_CreateScourgeNest();
        libPEB1_gv_currentScourgeMissileCaster = null;
        while (true) {
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

            if ((UnitIsAlive(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[1]].lv_archangelUnit) == false)) {
                break;
            }

            lv_bombardmentCounter += 1;
            if (((lv_bombardmentCounter == 1) || (lv_bombardmentCounter == 4) || (lv_bombardmentCounter == 7))) {
                libPEB1_gf_CreateScourgeMissile();
            }

            if ((lv_bombardmentCounter >= 28)) {
                lv_bombardmentCounter = 0;
                libPEB1_gv_currentScourgeMissileCaster = null;
            }

            Wait(0.25, c_timeGame);
        }
        libPEB1_gf_DestroyAllSourgeNests();
    }

    libPEB1_gf_SetObjectivePanelComplete(StringExternal("Param/Value/lib_PEB1_6F07061C"));
    SoundPlayForPlayer(SoundLink("UI_ObjectiveUpdate", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libPEB1_gf_SetHoldoutPanelComplete();
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Stage2MusicPart1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    Wait(3.5, c_timeReal);
    TriggerExecute(libPEB1_gt_Holdout2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ArchangelEvent1Q_Init () {
    libPEB1_gt_ArchangelEvent1Q = TriggerCreate("libPEB1_gt_ArchangelEvent1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel 1 Killed
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Archangel1Killed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_dropshipPos;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnit() == libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[1]].lv_archangelUnit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupClear(libPEB1_gv_archangelBanelingGroup);
    Wait(0.5, c_timeGame);
    libPVEU_gf_PvEUICreateDirectiveMessageSmall(StringExternal("Param/Value/lib_PEB1_D0C6509F"), StringExternal("Param/Value/lib_PEB1_BBD51C7E"), libPVEU_ge_PvEUIDirectiveStyle_PvEUIDirectiveStyel_ObjectiveDiscovered);
    Wait(1.0, c_timeGame);
    lv_dropshipPos = RegionGetCenter(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[1]].lv_region);
    libPEB1_gf_ArchangelSpawnBaseDropship(lv_dropshipPos);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Archangel1Killed_Init () {
    libPEB1_gt_Archangel1Killed = TriggerCreate("libPEB1_gt_Archangel1Killed_Func");
    TriggerEnable(libPEB1_gt_Archangel1Killed, false);
    TriggerAddEventUnitDied(libPEB1_gt_Archangel1Killed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Event 2
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ArchangelEvent2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bombardmentCounter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPEB1_gf_SpawnDefenseHeroforArchangelArea(libPEB1_gv_archangelSpawnOrder[2], libPEB1_gv_availableHeroTypesDefense[2]);
    libPEB1_gf_SpawnDefenseHeroforArchangelArea(libPEB1_gv_archangelSpawnOrder[3], libPEB1_gv_availableHeroTypesDefense[3]);
    TriggerExecute(libPEB1_gt_ArchangelSpawn2, true, false);
    TimerStart(libPEB1_gv_archangel2_Timer, libPEB1_gv_archangel2_Duration_C, false, c_timeGame);
    libPEB1_gf_SetHoldoutPanelComplete();
    libPEB1_gf_DisplayObjectivePanel(StringExternal("Param/Value/lib_PEB1_4A3EF783"), StringToText(""), StringExternal("Param/Value/lib_PEB1_DFE120DF"), libPEB1_gv_archangel2_Timer);
    Wait(2.0, c_timeReal);
    TriggerExecute(libPEB1_gt_Archangel2Q, true, true);
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    libPVEU_gf_PvEUICreateDirectiveMessage(StringExternal("Param/Value/lib_PEB1_FAA8C33A"), StringExternal("Param/Value/lib_PEB1_A2ACCB64"), libPVEU_ge_PvEUIDirectiveStyle_PvEUIDirectiveStyel_ObjectiveDiscovered);
    TriggerEnable(libPEB1_gt_Archangel2Killed, true);
    Wait(1.0, c_timeReal);
    while (!((((UnitIsAlive(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[2]].lv_archangelUnit) == false) && (UnitIsAlive(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[3]].lv_archangelUnit) == false)) || (TimerGetRemaining(libPEB1_gv_archangel2_Timer) <= 30.0)))) {
        Wait(0.25, c_timeGame);
    }
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, "BattleshipBombardDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, "2000");
    if (((UnitIsAlive(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[2]].lv_archangelUnit) == true) || (UnitIsAlive(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[3]].lv_archangelUnit) == true))) {
        libNtve_gf_SetDialogItemStyle(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelTimerLabel2, "Storm_CoopZerg_ObjectiveLabel_BottomLeft_Red", PlayerGroupAll());
        TriggerExecute(libPEB1_gt_Archangel2ClosetoLaunchQ, true, true);
        while (!((((UnitIsAlive(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[2]].lv_archangelUnit) == false) && (UnitIsAlive(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[3]].lv_archangelUnit) == false)) || (TimerGetRemaining(libPEB1_gv_archangel2_Timer) == 0.0)))) {
            Wait(0.25, c_timeGame);
        }
        libPEB1_gf_DisplayObjectivePanel(StringExternal("Param/Value/lib_PEB1_DEDB62AE"), StringToText(""), StringExternal("Param/Value/lib_PEB1_FC96CE6E"), null);
        DialogControlSetVisible(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelInfoLabel2, PlayerGroupAll(), false);
        DialogControlSetVisible(libPEB1_gv_pZEObjectivePanel.lv_objectivePanelInfoLabel3, PlayerGroupAll(), true);
        libPEB1_gf_CreateScourgeNest();
        libPEB1_gv_currentScourgeMissileCaster = null;
        while (true) {
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

            if ((UnitIsAlive(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[2]].lv_archangelUnit) == false) && (UnitIsAlive(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[3]].lv_archangelUnit) == false)) {
                break;
            }

            lv_bombardmentCounter += 1;
            if (((lv_bombardmentCounter == 1) || (lv_bombardmentCounter == 4) || (lv_bombardmentCounter == 7))) {
                libPEB1_gf_CreateScourgeMissile();
            }

            if ((lv_bombardmentCounter >= 28)) {
                lv_bombardmentCounter = 0;
                libPEB1_gv_currentScourgeMissileCaster = null;
            }

            Wait(0.25, c_timeGame);
        }
        libPEB1_gf_DestroyAllSourgeNests();
    }

    libPEB1_gf_SetObjectivePanelComplete(StringExternal("Param/Value/lib_PEB1_8EEC80C0"));
    SoundPlayForPlayer(SoundLink("UI_ObjectiveUpdate", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libPEB1_gf_SetHoldoutPanelComplete();
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PreBossMusic", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    Wait(3.5, c_timeReal);
    TriggerExecute(libPEB1_gt_Holdout3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ArchangelEvent2_Init () {
    libPEB1_gt_ArchangelEvent2 = TriggerCreate("libPEB1_gt_ArchangelEvent2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel 2 Killed
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Archangel2Killed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_dropshipPos;
    int lv_index;

    // Automatic Variable Declarations
    unit auto69D6AD87_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventUnit() == libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[2]].lv_archangelUnit) || (EventUnit() == libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[3]].lv_archangelUnit)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libPEB1_gv_archangelBanelingGroup);
    auto69D6AD87_val = EventUnit();
    if (auto69D6AD87_val == libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[2]].lv_archangelUnit) {
        lv_index = 2;
    }
    else if (auto69D6AD87_val == libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[3]].lv_archangelUnit) {
        lv_index = 3;
    }
    else {
    }
    Wait(0.5, c_timeGame);
    if (((UnitIsAlive(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[2]].lv_archangelUnit) == true) || (UnitIsAlive(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[3]].lv_archangelUnit) == true))) {
        libPVEU_gf_PvEUICreateDirectiveMessageSmall(StringExternal("Param/Value/lib_PEB1_407B0624"), StringExternal("Param/Value/lib_PEB1_2C2E823B"), libPVEU_ge_PvEUIDirectiveStyle_PvEUIDirectiveStyel_ObjectiveDiscovered);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
        libPVEU_gf_PvEUICreateDirectiveMessageSmall(StringExternal("Param/Value/lib_PEB1_1BB3724E"), StringExternal("Param/Value/lib_PEB1_65C2C012"), libPVEU_ge_PvEUIDirectiveStyle_PvEUIDirectiveStyel_ObjectiveDiscovered);
        Wait(1.0, c_timeGame);
        lv_dropshipPos = RegionGetCenter(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[lv_index]].lv_region);
        libPEB1_gf_ArchangelSpawnBaseDropship(lv_dropshipPos);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Archangel2Killed_Init () {
    libPEB1_gt_Archangel2Killed = TriggerCreate("libPEB1_gt_Archangel2Killed_Func");
    TriggerEnable(libPEB1_gt_Archangel2Killed, false);
    TriggerAddEventUnitDied(libPEB1_gt_Archangel2Killed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Initial Creep Camps
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_SpawnInitialCreepCamps_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campIndex;

    // Automatic Variable Declarations
    const int autoED4755DF_ae = 6;
    const int autoED4755DF_ai = 1;
    int auto406EDE48_val;
    int auto25C1F918_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_PingCreateNewPingTarget("TerranHellbatDefender", false, StringExternal("Param/Value/lib_PEB1_2E9D3DB1"), StringExternal("Param/Value/lib_PEB1_CE62A9B8"), StringExternal("Param/Value/lib_PEB1_C30B1A2A"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingCreateNewPingTarget("TerranGoliathDefender", false, StringExternal("Param/Value/lib_PEB1_D3299AFE"), StringExternal("Param/Value/lib_PEB1_525342E6"), StringExternal("Param/Value/lib_PEB1_6E614827"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingCreateNewPingTarget("TerranRavenDefender", false, StringExternal("Param/Value/lib_PEB1_FE003454"), StringExternal("Param/Value/lib_PEB1_8FD07A19"), StringExternal("Param/Value/lib_PEB1_DC50B2DF"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    lv_campIndex = 1;
    for ( ; ( (autoED4755DF_ai >= 0 && lv_campIndex <= autoED4755DF_ae) || (autoED4755DF_ai < 0 && lv_campIndex >= autoED4755DF_ae) ) ; lv_campIndex += autoED4755DF_ai ) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((libPEB1_gv_creepCamps[lv_campIndex].lv_status == true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "JungleCampIconUnit", 0, 0, libPEB1_gv_creepCamps[lv_campIndex].lv_pingPoint, null);
            libPEB1_gv_creepCamps[lv_campIndex].lv_iconUnit = UnitLastCreated();
            libNtve_gf_SendActorMessageToUnit(libPEB1_gv_creepCamps[lv_campIndex].lv_iconUnit, "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_elitemerccamp.dds");
            libNtve_gf_SendActorMessageToUnit(libPEB1_gv_creepCamps[lv_campIndex].lv_iconUnit, "MinimapIconScale 0.800000");
            auto406EDE48_val = libPEB1_gv_creepCamps[lv_campIndex].lv_lane;
            if (auto406EDE48_val == libPEB1_ge_Lane_Bottom) {
                ActorSendAsText(libNtve_gf_MainActorofUnit(libPEB1_gv_creepCamps[lv_campIndex].lv_iconUnit), StringExternal("Param/Value/lib_PEB1_F973FBB8"));
            }
            else if (auto406EDE48_val == libPEB1_ge_Lane_Top) {
                ActorSendAsText(libNtve_gf_MainActorofUnit(libPEB1_gv_creepCamps[lv_campIndex].lv_iconUnit), StringExternal("Param/Value/lib_PEB1_48C39864"));
            }
            else {
            }
            MinimapPing(PlayerGroupAll(), libPEB1_gv_creepCamps[lv_campIndex].lv_pingPoint, 5.0, Color(0.00, 100.00, 0.00));
            libGame_gf_DropLootBannerinSconce(libPEB1_gv_creepCamps[lv_campIndex].lv_sconceUnit, libGame_gv_players[libCore_gv_cOMPUTER_Hostile].lv_lootContent.lv_loot_Banner.lv_bannerID, libCore_gv_cOMPUTER_Hostile, false);
            auto25C1F918_val = libPEB1_gv_creepCamps[lv_campIndex].lv_lane;
            if (auto25C1F918_val == libPEB1_ge_Lane_Bottom) {
                TextTagSetText(libPEB1_gv_creepCamps[lv_campIndex].lv_helperTextTag, StringExternal("Param/Value/lib_PEB1_03AB6FF8"));
            }
            else if (auto25C1F918_val == libPEB1_ge_Lane_Top) {
                TextTagSetText(libPEB1_gv_creepCamps[lv_campIndex].lv_helperTextTag, StringExternal("Param/Value/lib_PEB1_730CDFAC"));
            }
            else {
            }
            TextTagShow(libPEB1_gv_creepCamps[lv_campIndex].lv_helperTextTag, PlayerGroupAll(), true);
            VisRevealArea(libCore_gv_cOMPUTER_TeamOrder, RegionCircle(libPEB1_gv_creepCamps[lv_campIndex].lv_pingPoint, 10.0), 10.0, false);
            libPEB1_gf_SpawnCreepCamp(lv_campIndex);
            Wait(0.1, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_SpawnInitialCreepCamps_Init () {
    libPEB1_gt_SpawnInitialCreepCamps = TriggerCreate("libPEB1_gt_SpawnInitialCreepCamps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Creep Camp Scaling
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_UpdateCreepCampScaling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campIndex;
    bool lv_unitLow;

    // Automatic Variable Declarations
    const int autoEF09067F_ae = 6;
    const int autoEF09067F_ai = 1;
    unitgroup auto3A2C24B1_g;
    int auto3A2C24B1_u;
    unit auto3A2C24B1_var;
    unitgroup autoAE025CDE_g;
    int autoAE025CDE_u;
    unit autoAE025CDE_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campIndex = 1;
    for ( ; ( (autoEF09067F_ai >= 0 && lv_campIndex <= autoEF09067F_ae) || (autoEF09067F_ai < 0 && lv_campIndex >= autoEF09067F_ae) ) ; lv_campIndex += autoEF09067F_ai ) {
        if ((libPEB1_gv_creepCamps[lv_campIndex].lv_status == true)) {
            if ((libNtve_gf_UnitGroupIsDead(libPEB1_gv_creepCamps[lv_campIndex].lv_defenderUnits) == true)) {
                continue;
            }

            lv_unitLow = false;
            auto3A2C24B1_g = libPEB1_gv_creepCamps[lv_campIndex].lv_defenderUnits;
            auto3A2C24B1_u = UnitGroupCount(auto3A2C24B1_g, c_unitCountAll);
            for (;; auto3A2C24B1_u -= 1) {
                auto3A2C24B1_var = UnitGroupUnitFromEnd(auto3A2C24B1_g, auto3A2C24B1_u);
                if (auto3A2C24B1_var == null) { break; }
                if ((UnitGetPropertyFixed(auto3A2C24B1_var, c_unitPropLifePercent, c_unitPropCurrent) < 100.0)) {
                    lv_unitLow = true;
                    break;
                }

            }
            if ((lv_unitLow == true)) {
                continue;
            }

            autoAE025CDE_g = libPEB1_gv_creepCamps[lv_campIndex].lv_defenderUnits;
            autoAE025CDE_u = UnitGroupCount(autoAE025CDE_g, c_unitCountAll);
            for (;; autoAE025CDE_u -= 1) {
                autoAE025CDE_var = UnitGroupUnitFromEnd(autoAE025CDE_g, autoAE025CDE_u);
                if (autoAE025CDE_var == null) { break; }
                libGame_gf_UpdateScalingForUnit(autoAE025CDE_var, libGame_gv_scalingTicks, libPEB1_gv_creepCamps[lv_campIndex].lv_currentScaling);
                UnitSetPropertyFixed(autoAE025CDE_var, c_unitPropLifePercent, 100.0);
            }
            libPEB1_gv_creepCamps[lv_campIndex].lv_currentScaling = libGame_gv_scalingTicks;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_UpdateCreepCampScaling_Init () {
    libPEB1_gt_UpdateCreepCampScaling = TriggerCreate("libPEB1_gt_UpdateCreepCampScaling_Func");
    TriggerAddEventTimer(libPEB1_gt_UpdateCreepCampScaling, libGame_gv_scalingTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Camp Activation
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_CreepCampActivation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campIndex;
    int lv_cableIndex;
    int lv_bannerPlayer;
    unitgroup lv_nearbyUnits;

    // Automatic Variable Declarations
    const int autoA72F77A0_ae = 6;
    const int autoA72F77A0_ai = 1;
    int autoD9ED3DC9_val;

    // Variable Initialization
    lv_nearbyUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campIndex = 1;
    for ( ; ( (autoA72F77A0_ai >= 0 && lv_campIndex <= autoA72F77A0_ae) || (autoA72F77A0_ai < 0 && lv_campIndex >= autoA72F77A0_ae) ) ; lv_campIndex += autoA72F77A0_ai ) {
        if ((libPEB1_gv_creepCamps[lv_campIndex].lv_defenderGroupAlive == true) && (libNtve_gf_UnitGroupIsDead(libPEB1_gv_creepCamps[lv_campIndex].lv_defenderUnits) == true)) {
            libPEB1_gv_creepCamps[lv_campIndex].lv_defenderGroupAlive = false;
            TimerStart(libPEB1_gv_creepCamps[lv_campIndex].lv_respawnTimer, libPEB1_gv_creepCampRespawnTime, false, c_timeGame);
            libPEB1_gf_ShowRespawnTextTagforCreepCamp(lv_campIndex);
            autoD9ED3DC9_val = libPEB1_gv_creepCamps[lv_campIndex].lv_lane;
            if (autoD9ED3DC9_val == libPEB1_ge_Lane_Bottom) {
                ActorSendAsText(libNtve_gf_MainActorofUnit(libPEB1_gv_creepCamps[lv_campIndex].lv_iconUnit), StringExternal("Param/Value/lib_PEB1_D7F27D4C"));
            }
            else if (autoD9ED3DC9_val == libPEB1_ge_Lane_Top) {
                ActorSendAsText(libNtve_gf_MainActorofUnit(libPEB1_gv_creepCamps[lv_campIndex].lv_iconUnit), StringExternal("Param/Value/lib_PEB1_65C4AEF7"));
            }
            else {
            }
            lv_nearbyUnits = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamOrder, c_unitAllianceAlly, RegionCircle(libPEB1_gv_creepCamps[lv_campIndex].lv_pingPoint, 16.0), libPVEM_gv_pvEEventHeroicFilters, 0);
            if ((UnitGroupCount(lv_nearbyUnits, c_unitCountAlive) > 0)) {
                lv_bannerPlayer = UnitGetOwner(UnitGroupClosestToPoint(lv_nearbyUnits, libPEB1_gv_creepCamps[lv_campIndex].lv_pingPoint));
            }
            else {
                lv_bannerPlayer = libCore_gv_cOMPUTER_TeamOrder;
            }
            libGame_gf_DropLootBannerinSconce(libPEB1_gv_creepCamps[lv_campIndex].lv_sconceUnit, libGame_gv_players[lv_bannerPlayer].lv_lootContent.lv_loot_Banner.lv_bannerID, lv_bannerPlayer, false);
            libPEB1_gf_ToggleCreepCampStatus(lv_campIndex, true);
            SoundPlayAtPointForPlayer(SoundLink("SignalBoosterActivate", -1), c_maxPlayers, PlayerGroupAll(), libPEB1_gv_creepCamps[lv_campIndex].lv_pingPoint, 0.0, 100.0, 0.0);
            libPVEM_gf_PvEPickupSpawnPickup("PVEMiniNukePickup", PointWithOffsetPolar(libPEB1_gv_creepCamps[lv_campIndex].lv_pingPoint, 2.0, 0.0), true);
            libPVEM_gf_PvEPickupSpawnPickup("PVEMiniNukePickup", PointWithOffsetPolar(libPEB1_gv_creepCamps[lv_campIndex].lv_pingPoint, 2.0, 180.0), true);
            TriggerExecute(libPEB1_gt_CreepCampActivatedQ, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_CreepCampActivation_Init () {
    libPEB1_gt_CreepCampActivation = TriggerCreate("libPEB1_gt_CreepCampActivation_Func");
    TriggerAddEventTimePeriodic(libPEB1_gt_CreepCampActivation, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Creep Camp
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_RespawnCreepCamp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campIndex;
    bool lv_indexFound;

    // Automatic Variable Declarations
    const int auto2308D3AE_ae = 6;
    const int auto2308D3AE_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campIndex = 1;
    for ( ; ( (auto2308D3AE_ai >= 0 && lv_campIndex <= auto2308D3AE_ae) || (auto2308D3AE_ai < 0 && lv_campIndex >= auto2308D3AE_ae) ) ; lv_campIndex += auto2308D3AE_ai ) {
        if ((libPEB1_gv_creepCamps[lv_campIndex].lv_respawnTimer == EventTimer())) {
            lv_indexFound = true;
            break;
        }

    }
    if ((lv_indexFound == false)) {
        return true;
    }

    libPEB1_gf_ToggleCreepCampStatus(lv_campIndex, false);
    SoundPlayAtPointForPlayer(SoundLink("SignalBoosterDeactivate", -1), c_maxPlayers, PlayerGroupAll(), libPEB1_gv_creepCamps[lv_campIndex].lv_pingPoint, 0.0, 100.0, 0.0);
    libPEB1_gf_SpawnCreepCamp(lv_campIndex);
    libGame_gf_DropLootBannerinSconce(libPEB1_gv_creepCamps[lv_campIndex].lv_sconceUnit, libGame_gv_players[libCore_gv_cOMPUTER_Hostile].lv_lootContent.lv_loot_Banner.lv_bannerID, libCore_gv_cOMPUTER_Hostile, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_RespawnCreepCamp_Init () {
    libPEB1_gt_RespawnCreepCamp = TriggerCreate("libPEB1_gt_RespawnCreepCamp_Func");
    TriggerAddEventTimer(libPEB1_gt_RespawnCreepCamp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Pickups
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_InitPickups_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libPVEM_gf_PvEPickupInitializePickup(libPVEM_ge_PvEPickupActivationType_PvEPickupActivationType_Instant, "PVERejuvenationPulsePickup", "HasMapMechanicInstantAbility2");
    libPVEM_gf_PvEPickupInitializePickup(libPVEM_ge_PvEPickupActivationType_PvEPickupActivationType_Instant, "PVETeamStimpackPickup", "HasMapMechanicInstantAbility1");
    libPVEM_gf_PvEPickupInitializePickup(libPVEM_ge_PvEPickupActivationType_PvEPickupActivationType_Target, "PVEPsiEmitterPickup", "HasMapMechanicTargetAbility2");
    libPVEM_gf_PvEPickupInitializePickup(libPVEM_ge_PvEPickupActivationType_PvEPickupActivationType_Instant, "PVESecondChancePickup", "HasMapMechanicInstantAbility4");
    libPVEM_gf_PvEPickupInitializePickup(libPVEM_ge_PvEPickupActivationType_PvEPickupActivationType_Target, "PVEMiniNukePickup", "HasMapMechanicTargetAbility");
    TriggerExecute(libPVEM_gt_PvEPickupPingOverrides, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_InitPickups_Init () {
    libPEB1_gt_InitPickups = TriggerCreate("libPEB1_gt_InitPickups_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Adjust Capture MacGuffin
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_InitAdjustCaptureMacGuffin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoB8DCC624_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB8DCC624_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoB8DCC624_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	CatalogFieldValueSet(c_gameCatalogEffect, "CaptureMacGuffin", "PeriodCount", lv_itPlayer, "2");
        CatalogFieldValueSet(c_gameCatalogEffect, "CaptureMacGuffin", "PeriodicValidator", lv_itPlayer, "CaptureMacguffinPeriodValidatorCombat");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_InitAdjustCaptureMacGuffin_Init () {
    libPEB1_gt_InitAdjustCaptureMacGuffin = TriggerCreate("libPEB1_gt_InitAdjustCaptureMacGuffin_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Regeneration Globe
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_SpawnRegenerationGlobe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_maxRandom;
    unit lv_killingUnit;

    // Automatic Variable Declarations
    string auto9F0CE43B_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == libStEx_gv_pLAYER_12_CHAOS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9F0CE43B_val = UnitGetType(EventUnit());
    if (auto9F0CE43B_val == "ZergZergling") {
        libPEB1_gv_regenerationGlobeCounter += 1;
    }
    else if (auto9F0CE43B_val == "ZergZerglingNotMinion") {
        if ((libPVEM_gf_PvEGameDifficulty() == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Normal)) {
            libPEB1_gv_regenerationGlobeCounter += 1;
        }

    }
    else if (auto9F0CE43B_val == "ZergHydralisk") {
        libPEB1_gv_regenerationGlobeCounter += 4;
    }
    else if (auto9F0CE43B_val == "ZergRoach") {
        libPEB1_gv_regenerationGlobeCounter += 4;
    }
    else if (auto9F0CE43B_val == "ZergBaneling") {
        libPEB1_gv_regenerationGlobeCounter += 2;
    }
    else if (auto9F0CE43B_val == "ZergUltralisk") {
        libPEB1_gv_regenerationGlobeCounter += 12;
    }
    else if (auto9F0CE43B_val == "SlivanBossPod") {
        lv_killingUnit = libNtve_gf_KillingUnit();
        if ((lv_killingUnit != null) && (PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, UnitGetOwner(lv_killingUnit)) == true)) {
            libPEB1_gv_regenerationGlobeCounter += 1;
        }

    }
    else {
        return true;
    }
    if ((libPEB1_gv_regenerationGlobeCounter >= libPEB1_gv_killValueNeededToSpawnGlobe)) {
        libPEB1_gv_regenerationGlobeCounter -= libPEB1_gv_killValueNeededToSpawnGlobe;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RegenGlobe", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_TeamOrder, UnitGetPosition(EventUnit()), null);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_SpawnRegenerationGlobe_Init () {
    libPEB1_gt_SpawnRegenerationGlobe = TriggerCreate("libPEB1_gt_SpawnRegenerationGlobe_Func");
    TriggerAddEventUnitDied(libPEB1_gt_SpawnRegenerationGlobe, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EFB Play VO Sound for Player
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_EFBPlayVOSoundforPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_vOSound;
    int lv_randomInt;

    // Automatic Variable Declarations
    int autoBEB292B2_val;

    // Variable Initialization
    lv_vOSound = SoundLink("EditorDefaultSound", -1);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_randomInt = RandomInt(1, 4);
    autoBEB292B2_val = lv_randomInt;
    if (autoBEB292B2_val == 1) {
        lv_vOSound = SoundLink("PvEVO_Adjutant_144", -1);
    }
    else if (autoBEB292B2_val == 2) {
        lv_vOSound = SoundLink("PvEVO_Adjutant_145", -1);
    }
    else if (autoBEB292B2_val == 3) {
        lv_vOSound = SoundLink("PvEVO_Adjutant_146", -1);
    }
    else if (autoBEB292B2_val == 4) {
        lv_vOSound = SoundLink("PvEVO_Adjutant_147", -1);
    }
    else {
    }
    SoundPlayForPlayer(lv_vOSound, c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_EFBPlayVOSoundforPlayer_Init () {
    libPEB1_gt_EFBPlayVOSoundforPlayer = TriggerCreate("libPEB1_gt_EFBPlayVOSoundforPlayer_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_EFBPlayVOSoundforPlayer, c_playerAny, "PvEMiniNukeCreatePersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reinforcements Used
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ReinforcementsUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minDistance;
    int lv_maxDistance;
    point lv_heroPosition;
    int lv_owningPlayer;
    fixed lv_lineAngle;
    point lv_proposedSpawnPosition;
    point[6] lv_proposedSpawnPoints;
    bool lv_validSpawnPoint;
    unitgroup lv_reinforcementUnitGroup;
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto945EE484_g;
    int auto945EE484_u;

    // Variable Initialization
    lv_minDistance = 3;
    lv_maxDistance = 7;
    lv_heroPosition = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_owningPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_reinforcementUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lineAngle = RandomInt(1, 360);
    lv_proposedSpawnPosition = PointWithOffsetPolar(lv_heroPosition, RandomInt(lv_minDistance, lv_maxDistance), lv_lineAngle);
    while ((lv_validSpawnPoint == false)) {
        lv_proposedSpawnPoints[1] = PointWithOffsetPolar(lv_proposedSpawnPosition, 1.5, (lv_lineAngle - 36.0));
        lv_proposedSpawnPoints[2] = PointWithOffsetPolar(lv_proposedSpawnPosition, 1.5, (lv_lineAngle + 36.0));
        lv_proposedSpawnPoints[3] = PointWithOffsetPolar(lv_proposedSpawnPosition, 1.5, (lv_lineAngle + 108.0));
        lv_proposedSpawnPoints[4] = PointWithOffsetPolar(lv_proposedSpawnPosition, 1.5, (lv_lineAngle + 180.0));
        lv_proposedSpawnPoints[5] = PointWithOffsetPolar(lv_proposedSpawnPosition, 1.5, (lv_lineAngle + 252.0));
        if ((PointPathingPassable(lv_proposedSpawnPoints[1]) == true) && (PointPathingPassable(lv_proposedSpawnPoints[2]) == true) && (PointPathingPassable(lv_proposedSpawnPoints[3]) == true) && (PointPathingPassable(lv_proposedSpawnPoints[4]) == true) && (PointPathingPassable(lv_proposedSpawnPoints[5]) == true)) {
            lv_validSpawnPoint = true;
        }
        else {
            lv_lineAngle = RandomInt(1, 360);
            lv_proposedSpawnPosition = PointWithOffsetPolar(lv_heroPosition, RandomInt(lv_minDistance, lv_maxDistance), lv_lineAngle);
            Wait(0.0625, c_timeGame);
        }
    }
    UnitCreate(1, "TerranHellbat", 0, lv_owningPlayer, lv_proposedSpawnPoints[1], lv_lineAngle, null);
    UnitGroupAdd(lv_reinforcementUnitGroup, UnitLastCreated());
    UnitCreate(1, "TerranHellbat", 0, lv_owningPlayer, lv_proposedSpawnPoints[2], lv_lineAngle, null);
    UnitGroupAdd(lv_reinforcementUnitGroup, UnitLastCreated());
    UnitCreate(1, "TerranGoliath", 0, lv_owningPlayer, lv_proposedSpawnPoints[3], lv_lineAngle, null);
    UnitGroupAdd(lv_reinforcementUnitGroup, UnitLastCreated());
    UnitCreate(1, "TerranGoliath", 0, lv_owningPlayer, lv_proposedSpawnPoints[4], lv_lineAngle, null);
    UnitGroupAdd(lv_reinforcementUnitGroup, UnitLastCreated());
    UnitCreate(1, "TerranGoliath", 0, lv_owningPlayer, lv_proposedSpawnPoints[5], lv_lineAngle, null);
    UnitGroupAdd(lv_reinforcementUnitGroup, UnitLastCreated());
    auto945EE484_g = lv_reinforcementUnitGroup;
    auto945EE484_u = UnitGroupCount(auto945EE484_g, c_unitCountAll);
    for (;; auto945EE484_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto945EE484_g, auto945EE484_u);
        if (lv_itUnit == null) { break; }
        UnitCreateAIThinkTree(lv_itUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ReinforcementsUsed_Init () {
    libPEB1_gt_ReinforcementsUsed = TriggerCreate("libPEB1_gt_ReinforcementsUsed_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_ReinforcementsUsed, c_playerAny, "PvEReinforcementsDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item Used
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ItemUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoE3D539F5_val;

    // Actions
    if (!runActions) {
        return true;
    }

    StatEventCreate("Pickup Used");
    autoE3D539F5_val = EventPlayerEffectUsed();
    if (autoE3D539F5_val == "PvEMiniNukeInitialSet") {
        StatEventAddDataString(StatEventLastCreated(), "Pickup Type", "Mini Nuke");
    }
    else if (autoE3D539F5_val == "PvEPsiEmitterInitialSet") {
        StatEventAddDataString(StatEventLastCreated(), "Pickup Type", "Psi Emitter");
    }
    else if (autoE3D539F5_val == "PvEReinforcementsInitialSet") {
        StatEventAddDataString(StatEventLastCreated(), "Pickup Type", "Reinforcements");
    }
    else if (autoE3D539F5_val == "PvERejuvenationPulseInitialSet") {
        StatEventAddDataString(StatEventLastCreated(), "Pickup Type", "Rejuvenation Pulse");
    }
    else if (autoE3D539F5_val == "PvETeamStimpackInitialSet") {
        StatEventAddDataString(StatEventLastCreated(), "Pickup Type", "Team Stimpack");
    }
    else if (autoE3D539F5_val == "PVESecondChanceInitialSet") {
        StatEventAddDataString(StatEventLastCreated(), "Pickup Type", "Second Chance");
    }
    else {
    }
    StatEventAddDataInt(StatEventLastCreated(), "PlayerID", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    StatEventSend(StatEventLastCreated());
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "DisplayLockedMapMechanicAbility", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ItemUsed_Init () {
    libPEB1_gt_ItemUsed = TriggerCreate("libPEB1_gt_ItemUsed_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_ItemUsed, c_playerAny, "PvEMiniNukeInitialSet");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_ItemUsed, c_playerAny, "PvEReinforcementsInitialSet");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_ItemUsed, c_playerAny, "PvERejuvenationPulseInitialSet");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_ItemUsed, c_playerAny, "PvEPsiEmitterInitialSet");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_ItemUsed, c_playerAny, "PvETeamStimpackInitialSet");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_ItemUsed, c_playerAny, "PVESecondChanceInitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Resurrect - Second Chance
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PvEResurrectSecondChance_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;
    unit lv_casterHero;
    int lv_targetPlayer;
    unit lv_targetHero;
    point lv_targetPosition;
    playergroup lv_vOGroup;
    int lv_tempVar;
    const int lv_respawnHealthPercentage = 50;
    int lv_itPlayer;
    int lv_numberOfDeadHeroes;

    // Automatic Variable Declarations
    playergroup auto8676146F_g;
    const int autoE3889525_ae = libCore_gv_bALMaxPlayers;
    const int autoE3889525_ai = 1;
    const int autoE9A3B8A2_ae = libCore_gv_bALMaxPlayers;
    const int autoE9A3B8A2_ai = 1;
    const int auto800ACC16_ae = libCore_gv_bALMaxPlayers;
    const int auto800ACC16_ai = 1;
    const int auto3B04ABC5_ae = libCore_gv_bALMaxPlayers;
    const int auto3B04ABC5_ai = 1;
    playergroup auto5708BCC6_g;
    int auto5708BCC6_var;

    // Variable Initialization
    lv_vOGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto8676146F_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto8676146F_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((libPVEM_gf_PvEPlayerHeroIsDead(lv_itPlayer) == true)) {
            lv_numberOfDeadHeroes += 1;
        }

    }
    if ((lv_numberOfDeadHeroes < 1)) {
        return true;
    }

    lv_casterPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_casterHero = libGame_gv_players[lv_casterPlayer].lv_heroUnit;
    UnitBehaviorRemove(lv_casterHero, "HasMapMechanicInstantAbility4", 1);
    lv_itPlayer = 1;
    for ( ; ( (autoE3889525_ai >= 0 && lv_itPlayer <= autoE3889525_ae) || (autoE3889525_ai < 0 && lv_itPlayer >= autoE3889525_ae) ) ; lv_itPlayer += autoE3889525_ai ) {
        if ((libPVEM_gv_pvEResurrectSpirit[lv_itPlayer] != null) && (libGame_gf_TeamNumberOfPlayer(lv_itPlayer) == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_CreateModelAtPoint("PVESecondChanceTarget", UnitGetPosition(libPVEM_gv_pvEResurrectSpirit[lv_itPlayer]));
        }

    }
    lv_itPlayer = 1;
    for ( ; ( (autoE9A3B8A2_ai >= 0 && lv_itPlayer <= autoE9A3B8A2_ae) || (autoE9A3B8A2_ai < 0 && lv_itPlayer >= autoE9A3B8A2_ae) ) ; lv_itPlayer += autoE9A3B8A2_ai ) {
        if ((libPVEM_gv_pvEResurrectSpirit[lv_itPlayer] == null) && (libGame_gf_TeamNumberOfPlayer(lv_itPlayer) == libGame_gv_teamOrderIndex_C) && (UnitGetType(libGame_gv_players[lv_itPlayer].lv_heroUnit) == "HeroUther") && ((UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "SpiritOfRedemptionSpiritFormBuff") == true) || (UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "UtherEternalVanguardRezDelay") == true))) {
            libNtve_gf_CreateModelAtPoint("PVESecondChanceTarget", UnitGetPosition(libGame_gv_players[lv_itPlayer].lv_heroUnit));
        }

    }
    Wait(1.35, c_timeGame);
    lv_itPlayer = 1;
    for ( ; ( (auto800ACC16_ai >= 0 && lv_itPlayer <= auto800ACC16_ae) || (auto800ACC16_ai < 0 && lv_itPlayer >= auto800ACC16_ae) ) ; lv_itPlayer += auto800ACC16_ai ) {
        if ((libPVEM_gv_pvEResurrectSpirit[lv_itPlayer] != null) && (libGame_gf_TeamNumberOfPlayer(lv_itPlayer) == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_CreateModelAtPoint("PVESecondChanceProc", UnitGetPosition(libPVEM_gv_pvEResurrectSpirit[lv_itPlayer]));
        }

    }
    lv_itPlayer = 1;
    for ( ; ( (auto3B04ABC5_ai >= 0 && lv_itPlayer <= auto3B04ABC5_ae) || (auto3B04ABC5_ai < 0 && lv_itPlayer >= auto3B04ABC5_ae) ) ; lv_itPlayer += auto3B04ABC5_ai ) {
        if ((libPVEM_gv_pvEResurrectSpirit[lv_itPlayer] == null) && (libGame_gf_TeamNumberOfPlayer(lv_itPlayer) == libGame_gv_teamOrderIndex_C) && (UnitGetType(libGame_gv_players[lv_itPlayer].lv_heroUnit) == "HeroUther") && ((UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "SpiritOfRedemptionSpiritFormBuff") == true) || (UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "UtherEternalVanguardRezDelay") == true))) {
            libNtve_gf_CreateModelAtPoint("PVESecondChanceProc", UnitGetPosition(libGame_gv_players[lv_itPlayer].lv_heroUnit));
        }

    }
    Wait(0.15, c_timeGame);
    auto5708BCC6_g = libPVEM_gf_PvEPlayersOnTeam(libPVEM_gv_pvETeamHuman_C, false);
    auto5708BCC6_var = -1;
    while (true) {
        	auto5708BCC6_var = PlayerGroupNextPlayer(auto5708BCC6_g, auto5708BCC6_var);
        	if (auto5708BCC6_var<0) { break; }
        	lv_targetPlayer = auto5708BCC6_var;
        lv_targetHero = libGame_gv_players[lv_targetPlayer].lv_heroUnit;
        lv_targetPosition = UnitGetPosition(libPVEM_gv_pvEResurrectSpirit[lv_targetPlayer]);
        if ((libGame_gv_players[auto5708BCC6_var].lv_isDead == true)) {
            UnitBehaviorRemove(libGame_gv_players[lv_targetPlayer].lv_heroUnit, "DeadHeroResurrectIconBehavior", 1);
            UnitGroupClear(libPVEM_gv_pvEResurrectResurrectionCastersUnitGroup[lv_targetPlayer]);
            libPVEM_gf_PvEResurrectAddRemoveDeadHeroArrow(false, lv_targetPlayer);
            if ((libGame_gv_players[lv_targetPlayer].lv_heroRequiresCustomRespawn == true)) {
                libGame_gf_SendEventRequestCustomRespawn(lv_targetPlayer, false, lv_targetPosition, lv_respawnHealthPercentage);
            }
            else {
                libGame_gf_HeroDeathRespawnHeroforPlayer(false, lv_targetPlayer, lv_targetPosition, lv_respawnHealthPercentage);
            }
            UnitRemove(libPVEM_gv_pvEResurrectSpirit[lv_targetPlayer]);
            libPVEM_gv_pvEResurrectSpirit[lv_targetPlayer] = null;
            libNtve_gf_StopTimer(libGame_gv_players[lv_targetPlayer].lv_respawnTimer);
            libNtve_gf_StopTimer(libGame_gv_players[lv_targetPlayer].lv_respawnSoundCueTimer);
            DialogDestroy(libPVEM_gv_pvEResurrectRevivingDialog[lv_targetPlayer].lv_panel);
            TextTagDestroy(libPVEM_gv_pvEResurrectSpiritTextTag[lv_targetPlayer]);
            TextTagDestroy(libPVEM_gv_pvEResurrectSpiritTextTagSelf[lv_targetPlayer]);
            UnitBehaviorRemove(lv_targetHero, "HallOfStormsHealBuff", 1);
            UnitBehaviorRemove(lv_targetHero, "HallOfStormsProtectionBuff", 1);
            ActorSend(ActorFromActor(libNtve_gf_MainActorofUnit(lv_targetHero), "HallOfStormsHealBuffFX"), "Destroy Immediate");
            libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(false, lv_targetPlayer);
            PlayerGroupAdd(lv_vOGroup, lv_targetPlayer);
            libSond_gf_HeroVOPlayResurrected(lv_targetPlayer, lv_vOGroup);
            TextExpressionSetToken("Param/Expression/lib_PEB1_F516D87C", "A", PlayerName(lv_casterPlayer));
            TextExpressionSetToken("Param/Expression/lib_PEB1_F516D87C", "B", UnitGetName(libGame_gv_players[lv_casterPlayer].lv_heroUnit));
            TextExpressionSetToken("Param/Expression/lib_PEB1_F516D87C", "C", PlayerName(lv_targetPlayer));
            TextExpressionSetToken("Param/Expression/lib_PEB1_F516D87C", "D", UnitGetName(libGame_gv_players[lv_targetPlayer].lv_heroUnit));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_PEB1_F516D87C"));
            libPVEM_gf_PvEResurrectCheckActiveSpirits(false);
        }
        else {
            if ((UnitGetType(lv_targetHero) == "HeroUther")) {
                UnitBehaviorRemove(libGame_gv_players[lv_targetPlayer].lv_heroUnit, "DeadHeroResurrectIconBehavior", 1);
                UnitGroupClear(libPVEM_gv_pvEResurrectResurrectionCastersUnitGroup[lv_targetPlayer]);
                libPVEM_gf_PvEResurrectAddRemoveDeadHeroArrow(false, lv_targetPlayer);
                UnitBehaviorRemove(libGame_gv_players[lv_targetPlayer].lv_heroUnit, "Dead", 1);
                UnitBehaviorRemove(libGame_gv_players[lv_targetPlayer].lv_heroUnit, "UtherEternalVanguardRezDelay", 1);
                UnitBehaviorRemove(libGame_gv_players[lv_targetPlayer].lv_heroUnit, "SpiritOfRedemptionSpiritFormBuff", 1);
                libNtve_gf_SendActorMessageToUnit(lv_targetHero, "TimerSet 0.062500 RedemptionBuffFX");
                libGame_gf_HeroDeathRespawnHeroforPlayer(false, lv_targetPlayer, lv_targetPosition, lv_respawnHealthPercentage);
                Wait(0.0625, c_timeGame);
                UnitSetPropertyFixed(libGame_gv_players[lv_targetPlayer].lv_heroUnit, c_unitPropLifePercent, lv_respawnHealthPercentage);
                DialogDestroy(libPVEM_gv_pvEResurrectRevivingDialog[lv_targetPlayer].lv_panel);
                TextTagDestroy(libPVEM_gv_pvEResurrectSpiritTextTag[lv_targetPlayer]);
                TextTagDestroy(libPVEM_gv_pvEResurrectSpiritTextTagSelf[lv_targetPlayer]);
                UnitBehaviorRemove(lv_targetHero, "HallOfStormsHealBuff", 1);
                UnitBehaviorRemove(lv_targetHero, "HallOfStormsProtectionBuff", 1);
                ActorSend(ActorFromActor(libNtve_gf_MainActorofUnit(lv_targetHero), "HallOfStormsHealBuffFX"), "Destroy Immediate");
                libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(false, lv_targetPlayer);
                PlayerGroupAdd(lv_vOGroup, lv_targetPlayer);
                libSond_gf_HeroVOPlayResurrected(lv_targetPlayer, lv_vOGroup);
                TextExpressionSetToken("Param/Expression/lib_PEB1_7750E430", "A", PlayerName(lv_casterPlayer));
                TextExpressionSetToken("Param/Expression/lib_PEB1_7750E430", "B", UnitGetName(libGame_gv_players[lv_casterPlayer].lv_heroUnit));
                TextExpressionSetToken("Param/Expression/lib_PEB1_7750E430", "C", PlayerName(lv_targetPlayer));
                TextExpressionSetToken("Param/Expression/lib_PEB1_7750E430", "D", UnitGetName(libGame_gv_players[lv_targetPlayer].lv_heroUnit));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_PEB1_7750E430"));
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PvEResurrectSecondChance_Init () {
    libPEB1_gt_PvEResurrectSecondChance = TriggerCreate("libPEB1_gt_PvEResurrectSecondChance_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_PvEResurrectSecondChance, c_playerAny, "PVESecondChanceInitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_VictorySequenceQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Automatic Variable Declarations
    playergroup auto359AC56F_g;
    int auto359AC56F_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libGame_gv_gameOver = true;
    TimerPause(libGame_gv_gameTimer, true);
    TimerPause(libGame_gv_matchGameplayTimer, true);
    TriggerQueueEnter();
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    libPEB1_gf_ShowHideHoldoutPanel(false);
    auto359AC56F_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    auto359AC56F_var = -1;
    while (true) {
        	auto359AC56F_var = PlayerGroupNextPlayer(auto359AC56F_g, auto359AC56F_var);
        	if (auto359AC56F_var<0) { break; }
        	PlayerScoreValueEnableAll(auto359AC56F_var, true);
    }
    TriggerExecute(libPEB1_gt_VictoryCinematic, true, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libPEB1_gf_Victory(null, null);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_VictorySequenceQ_Init () {
    libPEB1_gt_VictorySequenceQ = TriggerCreate("libPEB1_gt_VictorySequenceQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("DeadmanPVEVO|Line00069", true)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_VictoryCinematic_Init () {
    libPEB1_gt_VictoryCinematic = TriggerCreate("libPEB1_gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Core Dies
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DefeatCoreDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoA3B8A903_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA3B8A903_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoA3B8A903_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	CameraPan(lv_itPlayer, UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core), 1.5, -1, 10.0, false);
    }
    libPEB1_gv_defeatReason = libPEB1_ge_DefeatReason_BaseDead;
    libPEB1_gf_Defeat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DefeatCoreDies_Init () {
    libPEB1_gt_DefeatCoreDies = TriggerCreate("libPEB1_gt_DefeatCoreDies_Func");
    TriggerAddEventUnitDied(libPEB1_gt_DefeatCoreDies, UnitRefFromVariable("libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Heroes Killed
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DefeatHeroesKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto6BA669B3_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libGame_gf_TeamNumberOfPlayer(libGame_gf_HeroKilledPlayer()) == libGame_gv_teamOrderIndex_C))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.6, c_timeGame);
    auto6BA669B3_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto6BA669B3_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((libPVEM_gf_PvEPlayerIsValidHumanTeamPlayer(lv_itPlayer) == true) && (libPVEM_gf_PvEPlayerHeroIsDead(lv_itPlayer) == false)) {
            return true;
        }

    }
    libPEB1_gv_defeatReason = libPEB1_ge_DefeatReason_AllHeroesSlain;
    libPEB1_gf_Defeat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DefeatHeroesKilled_Init () {
    libPEB1_gt_DefeatHeroesKilled = TriggerCreate("libPEB1_gt_DefeatHeroesKilled_Func");
    libGame_gf_HeroKilled(libPEB1_gt_DefeatHeroesKilled);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Over Score Transmission
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_GameOverScoreTransmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto506D7129_g;
    int auto506D7129_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto506D7129_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
    auto506D7129_var = -1;
    while (true) {
        	auto506D7129_var = PlayerGroupNextPlayer(auto506D7129_g, auto506D7129_var);
        	if (auto506D7129_var<0) { break; }
        	libGame_gf_ScoreValuesReportIntegerValueAndLog(auto506D7129_var, "DeadmansStandDifficulty", libPVEM_gf_PvEDifficultyValueInt(1, 2));
        libGame_gf_ScoreValuesReportRealValueAndLog(auto506D7129_var, "DeadmansStandBaseIntegrity", libPEB1_gv_baseHealthPercent);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_GameOverScoreTransmission_Init () {
    libPEB1_gt_GameOverScoreTransmission = TriggerCreate("libPEB1_gt_GameOverScoreTransmission_Func");
    libGame_gf_GameOverEvent(libPEB1_gt_GameOverScoreTransmission);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Over Screen Callback
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_GameOverScreenCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libPVEM_gv_pvEGameOverResult == c_gameOverVictory)) {
        libNtve_gf_SetDialogItemText(libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_ResultNameLabel, StringExternal("Param/Value/lib_PEB1_5497D1DB"), PlayerGroupAll());
        if ((libPEB1_gv_baseHealthPercent == 100.0)) {
            libNtve_gf_SetDialogItemText(libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_ResultLabel, StringExternal("Param/Value/lib_PEB1_AC33BEB2"), PlayerGroupAll());
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_PEB1_DB0B1F4D", "A", FixedToText(libPEB1_gv_baseHealthPercent, 1));
            libNtve_gf_SetDialogItemText(libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_ResultLabel, TextExpressionAssemble("Param/Expression/lib_PEB1_DB0B1F4D"), PlayerGroupAll());
        }
    }
    else {
        if ((libPEB1_gv_defeatReason == libPEB1_ge_DefeatReason_BaseDead)) {
            libNtve_gf_SetDialogItemText(libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_DefeatReason, StringExternal("Param/Value/lib_PEB1_C68D61AD"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_DefeatReason, StringExternal("Param/Value/lib_PEB1_362DF7D1"), PlayerGroupAll());
        }
        DialogControlSetVisible(libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_DefeatReason, PlayerGroupAll(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_GameOverScreenCallback_Init () {
    libPEB1_gt_GameOverScreenCallback = TriggerCreate("libPEB1_gt_GameOverScreenCallback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Transmission Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_IntroTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00047", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00048", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_IntroTransmissionQ_Init () {
    libPEB1_gt_IntroTransmissionQ = TriggerCreate("libPEB1_gt_IntroTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gate Opens in 10 Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_GateOpensin10Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto60C3D263_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    auto60C3D263_val = RandomInt(1, 3);
    if (auto60C3D263_val == 1) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00049", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto60C3D263_val == 2) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00072", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto60C3D263_val == 3) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00073", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    TriggerQueueExit();
    libPEB1_gv_holdout1IntroTransmissionFinished = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_GateOpensin10Q_Init () {
    libPEB1_gt_GateOpensin10Q = TriggerCreate("libPEB1_gt_GateOpensin10Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battle Begins Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_BattleBeginsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto9DB8B37A_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    auto9DB8B37A_val = RandomInt(1, 3);
    if (auto9DB8B37A_val == 1) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00050", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto9DB8B37A_val == 2) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00074", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto9DB8B37A_val == 3) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00075", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_BattleBeginsQ_Init () {
    libPEB1_gt_BattleBeginsQ = TriggerCreate("libPEB1_gt_BattleBeginsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Camps Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_CreepCampsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        Wait(1.0, c_timeGame);
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((libPEB1_gv_holdout1_Complete == true) && (UnitGroupCount(UnitGroupAlliance(libStEx_gv_pLAYER_11_ORDER, c_unitAllianceAlly, RegionFromName("Creep Camps Discover"), libPVEM_gv_pvEEventHeroicFilters, 1), c_unitCountAlive) > 0)) {
            break;
        }

    }
    Wait(1.0, c_timeGame);
    TriggerQueueEnter();
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerExecute(libPEB1_gt_SpawnInitialCreepCamps, true, false);
    Wait(1.0, c_timeReal);
    libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00051", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00052", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeReal);
    libPEB1_gv_creepCampsRevealed = true;
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_CreepCampsQ_Init () {
    libPEB1_gt_CreepCampsQ = TriggerCreate("libPEB1_gt_CreepCampsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Camp Activated Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_CreepCampActivatedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_waitTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waitTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(lv_waitTimer, 1.0, false, c_timeReal);
    TriggerQueueEnter();
    while (!((TimerGetRemaining(lv_waitTimer) < 0.1))) {
        Wait(1.0, c_timeReal);
    }
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00053", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_CreepCampActivatedQ_Init () {
    libPEB1_gt_CreepCampActivatedQ = TriggerCreate("libPEB1_gt_CreepCampActivatedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bunkers Fall Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_BunkersFallQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_tooMuchTimePassedTimer;
    point lv_pingPoint;

    // Automatic Variable Declarations
    int autoC50CD39C_val;

    // Variable Initialization
    lv_tooMuchTimePassedTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_tooMuchTimePassedTimer, 10.0, false, c_timeReal);
    lv_pingPoint = libPEB1_gv_bunkerFortressPingPoint;
    TriggerQueueEnter();
    if (((libGame_gv_gameOver == true) || (TimerGetRemaining(lv_tooMuchTimePassedTimer) < 1) || (lv_pingPoint != libPEB1_gv_bunkerFortressPingPoint) || (TriggerIsEnabled(TriggerGetCurrent()) == false))) {
        return true;
    }

    MinimapPing(PlayerGroupAll(), lv_pingPoint, 5.0, libCore_gv_cOLOREnemyColor);
    Wait(1.0, c_timeReal);
    autoC50CD39C_val = RandomInt(1, 5);
    if (autoC50CD39C_val == 1) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00070", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoC50CD39C_val == 2) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00092", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoC50CD39C_val == 3) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00093", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoC50CD39C_val == 4) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00096", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoC50CD39C_val == 5) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00097", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_BunkersFallQ_Init () {
    libPEB1_gt_BunkersFallQ = TriggerCreate("libPEB1_gt_BunkersFallQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Planetary Fortress Destroyed Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PlanetaryFortressDestroyedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_tooMuchTimePassedTimer;
    point lv_pingPoint;

    // Automatic Variable Declarations
    int auto0CF2BEF7_val;

    // Variable Initialization
    lv_tooMuchTimePassedTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_tooMuchTimePassedTimer, 10.0, false, c_timeReal);
    lv_pingPoint = libPEB1_gv_bunkerFortressPingPoint;
    TriggerQueueEnter();
    if (((libGame_gv_gameOver == true) || (TimerGetRemaining(lv_tooMuchTimePassedTimer) < 1) || (lv_pingPoint != libPEB1_gv_bunkerFortressPingPoint) || (TriggerIsEnabled(TriggerGetCurrent()) == false))) {
        return true;
    }

    MinimapPing(PlayerGroupAll(), lv_pingPoint, 5.0, libCore_gv_cOLOREnemyColor);
    Wait(1.0, c_timeReal);
    auto0CF2BEF7_val = RandomInt(1, 3);
    if (auto0CF2BEF7_val == 1) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00071", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto0CF2BEF7_val == 2) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00094", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto0CF2BEF7_val == 3) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00095", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PlanetaryFortressDestroyedQ_Init () {
    libPEB1_gt_PlanetaryFortressDestroyedQ = TriggerCreate("libPEB1_gt_PlanetaryFortressDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 1 Almost Done Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout1AlmostDoneQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto7EFF04C3_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    auto7EFF04C3_val = RandomInt(1, 3);
    if (auto7EFF04C3_val == 1) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00054", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto7EFF04C3_val == 2) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00078", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto7EFF04C3_val == 3) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00079", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout1AlmostDoneQ_Init () {
    libPEB1_gt_Holdout1AlmostDoneQ = TriggerCreate("libPEB1_gt_Holdout1AlmostDoneQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel 1-1
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Archangel11_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00055", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Archangel11_Init () {
    libPEB1_gt_Archangel11 = TriggerCreate("libPEB1_gt_Archangel11_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel 1-2
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Archangel12_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto1DE7CE50_g;
    int auto1DE7CE50_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00056", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    auto1DE7CE50_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    auto1DE7CE50_var = -1;
    while (true) {
        	auto1DE7CE50_var = PlayerGroupNextPlayer(auto1DE7CE50_g, auto1DE7CE50_var);
        	if (auto1DE7CE50_var<0) { break; }
        	if ((libPVEM_gf_PvEPlayerIsValidHumanPlayer(auto1DE7CE50_var) == true)) {
            AddUnitOfInterest(libGame_gv_players[auto1DE7CE50_var].lv_heroUnit, 0.0, 0.0, "PVEEscortPlayer", libNtve_ge_GoalTeam_Order, 0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Archangel12_Init () {
    libPEB1_gt_Archangel12 = TriggerCreate("libPEB1_gt_Archangel12_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel 1 Close to Launch Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Archangel1ClosetoLaunchQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoBC7372E7_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    autoBC7372E7_val = RandomInt(1, 3);
    if (autoBC7372E7_val == 1) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00057", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoBC7372E7_val == 2) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00082", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoBC7372E7_val == 3) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00083", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Archangel1ClosetoLaunchQ_Init () {
    libPEB1_gt_Archangel1ClosetoLaunchQ = TriggerCreate("libPEB1_gt_Archangel1ClosetoLaunchQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 2 Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00059", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00060", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout2Q_Init () {
    libPEB1_gt_Holdout2Q = TriggerCreate("libPEB1_gt_Holdout2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 2 Almost Done Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout2AlmostDoneQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoF14BF03B_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    autoF14BF03B_val = RandomInt(1, 3);
    if (autoF14BF03B_val == 1) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00061", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoF14BF03B_val == 2) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00086", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoF14BF03B_val == 3) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00087", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout2AlmostDoneQ_Init () {
    libPEB1_gt_Holdout2AlmostDoneQ = TriggerCreate("libPEB1_gt_Holdout2AlmostDoneQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel 2 Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Archangel2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA3CFB64C_g;
    int autoA3CFB64C_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00062", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00063", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    autoA3CFB64C_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    autoA3CFB64C_var = -1;
    while (true) {
        	autoA3CFB64C_var = PlayerGroupNextPlayer(autoA3CFB64C_g, autoA3CFB64C_var);
        	if (autoA3CFB64C_var<0) { break; }
        	if ((libPVEM_gf_PvEPlayerIsValidHumanPlayer(autoA3CFB64C_var) == true)) {
            AddUnitOfInterest(libGame_gv_players[autoA3CFB64C_var].lv_heroUnit, 0.0, 0.0, "PVEEscortPlayer", libNtve_ge_GoalTeam_Order, 0);
        }

    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Archangel2Q_Init () {
    libPEB1_gt_Archangel2Q = TriggerCreate("libPEB1_gt_Archangel2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel 2 Close to Launch Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Archangel2ClosetoLaunchQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoC0C6ED5D_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    autoC0C6ED5D_val = RandomInt(1, 3);
    if (autoC0C6ED5D_val == 1) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00064", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoC0C6ED5D_val == 2) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00088", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoC0C6ED5D_val == 3) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00089", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Archangel2ClosetoLaunchQ_Init () {
    libPEB1_gt_Archangel2ClosetoLaunchQ = TriggerCreate("libPEB1_gt_Archangel2ClosetoLaunchQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 3 Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout3Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00065", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00066", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00067", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout3Q_Init () {
    libPEB1_gt_Holdout3Q = TriggerCreate("libPEB1_gt_Holdout3Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 3 Almost Complete Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout3AlmostCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoBBE19E0B_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    autoBBE19E0B_val = RandomInt(1, 3);
    if (autoBBE19E0B_val == 1) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00068", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoBBE19E0B_val == 2) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00090", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoBBE19E0B_val == 3) {
        libCore_gf_SendTransmissionCampaign(null, "DeadmanPVEVO|Line00091", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout3AlmostCompleteQ_Init () {
    libPEB1_gt_Holdout3AlmostCompleteQ = TriggerCreate("libPEB1_gt_Holdout3AlmostCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Revived Transmission
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PlayerRevivedTransmission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    int lv_targetPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_targetPlayer = UnitGetOwner(lv_target);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    if ((RandomInt(1, 2) == 1)) {
        TransmissionSendForPlayerSelect(PlayerGroupSingle(lv_targetPlayer), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("DeadmanPVEVO_MiraHan_123"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
        TransmissionSendForPlayerSelect(PlayerGroupSingle(lv_targetPlayer), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("DeadmanPVEVO_MiraHan_124"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PlayerRevivedTransmission_Init () {
    libPEB1_gt_PlayerRevivedTransmission = TriggerCreate("libPEB1_gt_PlayerRevivedTransmission_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_PlayerRevivedTransmission, c_playerAny, "CaptureMacGuffinTwoCastComplete");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Screen Display
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ScoreScreenDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_statsFrame;
    int lv_playerIndex;
    int lv_tempDialogItem;
    int lv_itButton;
    int lv_sortButton;

    // Automatic Variable Declarations
    playergroup auto4A974380_g;
    const int auto1989FCE4_ae = 6;
    const int auto1989FCE4_ai = 1;
    playergroup auto52279AA5_g;

    // Variable Initialization
    lv_statsFrame = c_invalidDialogControlId;
    lv_tempDialogItem = c_invalidDialogControlId;
    lv_sortButton = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    auto4A974380_g = PlayerGroupActive();
    lv_playerIndex = -1;
    while (true) {
        	lv_playerIndex = PlayerGroupNextPlayer(auto4A974380_g, lv_playerIndex);
        	if (lv_playerIndex<0) { break; }
        	libStEx_gf_CinematicFade(false, 0.0, Color(0.00, 0.00, 0.00), lv_playerIndex);
    }
    UISetWorldVisible(PlayerGroupAll(), false);
    libUIUI_gf_GameOverSplashShowHideForAllPlayers(false, libGame_gv_teamOrderIndex_C);
    DialogControlHookup(libPEB1_gv_pZETabScreenPanel.lv_mainPanel, c_triggerControlTypeButton, "CloseButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPEB1_gv_pZETabScreenPanel.lv_tabControl, c_triggerControlTypePanel, "ShowDeathRecapButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPEB1_gv_pZETabScreenPanel.lv_tabControl, c_triggerControlTypePanel, "ShowStatsButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPEB1_gv_pZETabScreenPanel.lv_tabControl, c_triggerControlTypePanel, "ShowTalentsButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPEB1_gv_pZETabScreenPanel.lv_tabControl, c_triggerControlTypePanel, "TalentsContainerFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlHookup(libPEB1_gv_pZETabScreenPanel.lv_tabControl, c_triggerControlTypePanel, "DeathRecapContainerFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlHookup(libPEB1_gv_pZETabScreenPanel.lv_tabControl, c_triggerControlTypePanel, "StatsContainerFrame");
    lv_statsFrame = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    if ((libPEB1_gv_pZEScoreScreenPanel.lv_mainPanel == c_invalidDialogControlId)) {
        DialogControlCreateInPanelFromTemplate(libPEB1_gv_pZETabScreenPanel.lv_tabControl, c_triggerControlTypePanel, "StarcraftPvEUI/PVEBrawlScoreSubPanel");
        libPEB1_gv_pZEScoreScreenPanel.lv_mainPanel = DialogControlLastCreated();
        DialogControlSetSize(libPEB1_gv_pZETabScreenPanel.lv_mainPanel, PlayerGroupAll(), 1380, 900);
        DialogControlHookup(libPEB1_gv_pZEScoreScreenPanel.lv_mainPanel, c_triggerControlTypeLabel, "CompletionTime");
        libPEB1_gv_pZEScoreScreenPanel.lv_timeLabel = DialogControlLastCreated();
    }

    lv_itButton = 0;
    for ( ; ( (auto1989FCE4_ai >= 0 && lv_itButton <= auto1989FCE4_ae) || (auto1989FCE4_ai < 0 && lv_itButton >= auto1989FCE4_ae) ) ; lv_itButton += auto1989FCE4_ai ) {
        DialogControlHookup(lv_statsFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("SortButton" + IntToString(lv_itButton))));
        lv_sortButton = DialogControlLastCreated();
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
        if ((lv_itButton == 3)) {
            DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_statsFrame, c_anchorTopLeft, 380, 290);
        }

        DialogControlHookup(lv_sortButton, c_triggerControlTypeImage, "FilterIcon");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_sortButton, c_triggerControlTypeImage, "ClearIcon");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    DialogControlSetVisible(libPEB1_gv_pZETabScreenPanel.lv_timeRunSubPanel, PlayerGroupAll(), false);
    DialogControlHookup(libPEB1_gv_pZEScoreScreenPanel.lv_mainPanel, c_triggerControlTypeButton, "CloseButton");
    libPEB1_gv_pZEScoreScreenPanel.lv_closeButton = DialogControlLastCreated();
    DialogControlSetVisible(libPEB1_gv_pZETabScreenPanel.lv_mainPanel, PlayerGroupAll(), true);
    DialogControlFadeTransparency(libPEB1_gv_pZETabScreenPanel.lv_mainPanel, PlayerGroupAll(), 0.0, 0.0);
    DialogControlSetVisible(libPEB1_gv_pZETabScreenPanel.lv_tabControl, PlayerGroupAll(), true);
    auto52279AA5_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_playerIndex = -1;
    while (true) {
        	lv_playerIndex = PlayerGroupNextPlayer(auto52279AA5_g, lv_playerIndex);
        	if (lv_playerIndex<0) { break; }
        	if ((PlayerStatus(lv_playerIndex) == c_playerStatusActive)) {
            DialogControlHookup(libPEB1_gv_pZETabScreenPanel.lv_tabControl, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("PlayerFrame" + IntToString((lv_playerIndex - 1)))));
            lv_tempDialogItem = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
            DialogControlHookup(lv_tempDialogItem, c_triggerControlTypePanel, "TalentsContainerFrame");
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            DialogControlHookup(lv_tempDialogItem, c_triggerControlTypePanel, "PlayerDeathIndicatorFrame");
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            DialogControlHookup(lv_tempDialogItem, c_triggerControlTypePanel, "StatsContainerFrame");
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
        }

    }
    libNtve_gf_SetDialogItemText(libPEB1_gv_pZEScoreScreenPanel.lv_timeLabel, TextTimeFormat(StringToText("<hour2/>:<min2/>:<sec2/>"), libPEB1_gv_victoryTime), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ScoreScreenDisplay_Init () {
    libPEB1_gt_ScoreScreenDisplay = TriggerCreate("libPEB1_gt_ScoreScreenDisplay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Screen Hide
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ScoreScreenHide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libPEB1_gv_pZETabScreenPanel.lv_mainPanel, PlayerGroupAll(), false);
    DialogControlFadeTransparency(libPEB1_gv_pZETabScreenPanel.lv_mainPanel, PlayerGroupAll(), 0.0, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ScoreScreenHide_Init () {
    libPEB1_gt_ScoreScreenHide = TriggerCreate("libPEB1_gt_ScoreScreenHide_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Screen Leave
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ScoreScreenLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libPEB1_gv_pZEScoreScreenPanel.lv_closeButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_players[EventPlayer()].lv_victoryDefeat = c_gameOverVictory;
    libPVEM_gf_PvEEndGameForPlayer(EventPlayer());
    KickFromGame(PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ScoreScreenLeave_Init () {
    libPEB1_gt_ScoreScreenLeave = TriggerCreate("libPEB1_gt_ScoreScreenLeave_Func");
    TriggerAddEventDialogControl(libPEB1_gt_ScoreScreenLeave, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tab Screen Init
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_TabScreenInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_tabControl;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tabControl = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer");
    libPEB1_gv_pZETabScreenPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(libPEB1_gv_pZETabScreenPanel.lv_mainPanel, c_triggerControlTypePanel, "TabControl");
    libPEB1_gv_pZETabScreenPanel.lv_tabControl = DialogControlLastCreated();
    DialogControlHookup(libPEB1_gv_pZETabScreenPanel.lv_tabControl, c_triggerControlTypePanel, "TimeRunSubPanel");
    libPEB1_gv_pZETabScreenPanel.lv_timeRunSubPanel = DialogControlLastCreated();
    DialogControlHookup(libPEB1_gv_pZETabScreenPanel.lv_timeRunSubPanel, c_triggerControlTypeLabel, "Time");
    libPEB1_gv_pZETabScreenPanel.lv_currentTimeLabel = DialogControlLastCreated();
    DialogControlHookup(libPEB1_gv_pZETabScreenPanel.lv_timeRunSubPanel, c_triggerControlTypeLabel, "BestTime");
    libPEB1_gv_pZETabScreenPanel.lv_previousBestTimeLabel = DialogControlLastCreated();
    DialogControlHookup(libPEB1_gv_pZETabScreenPanel.lv_timeRunSubPanel, c_triggerControlTypeLabel, "EpicRunTime");
    libPEB1_gv_pZETabScreenPanel.lv_epicRunTime = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_TabScreenInit_Init () {
    libPEB1_gt_TabScreenInit = TriggerCreate("libPEB1_gt_TabScreenInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tab Screen Update
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_TabScreenUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    fixed lv_time;

    // Automatic Variable Declarations
    playergroup auto252512BD_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto252512BD_g = libGame_gf_PlayersOnTeamHeroes(1, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto252512BD_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_itPlayer, "TotalDamage", (PlayerScoreValueGetAsInt(lv_itPlayer, "SiegeDamage") + PlayerScoreValueGetAsInt(lv_itPlayer, "HeroDamage")));
    }
    lv_time = MaxF(0.0, libUIUI_gf_HeroesGameTime());
    libNtve_gf_SetDialogItemText(libPEB1_gv_pZETabScreenPanel.lv_currentTimeLabel, TextTimeFormat(StringToText("<hour2/>:<min2/>:<sec2/>"), FixedToInt(lv_time)), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_TabScreenUpdate_Init () {
    libPEB1_gt_TabScreenUpdate = TriggerCreate("libPEB1_gt_TabScreenUpdate_Func");
    TriggerEnable(libPEB1_gt_TabScreenUpdate, false);
    TriggerAddEventTimePeriodic(libPEB1_gt_TabScreenUpdate, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BaseHealthBar Update
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_BaseHealthBarUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_lifeTotalCore;
    fixed lv_lifeTotalKeep;
    fixed lv_lifeTotalBunker;
    fixed lv_lifeCurrentCore;
    fixed lv_lifeCurrentKeep;
    fixed lv_lifeCurrentBunker;
    fixed lv_lifePercentCore;
    fixed lv_lifePercentKeep;
    fixed lv_lifePercentBunker;
    fixed lv_lifePercent;
    unit lv_itStructure;
    const int lv_barWidthDefaultCore_C = 174;
    const int lv_barWidthDefaultKeep_C = 174;
    const int lv_barWidthDefaultBunker_C = 174;
    const int lv_barHeightDefault_C = 14;
    int lv_baseHealthBarWidthCoreNew;
    int lv_baseHealthBarWidthKeepNew;
    int lv_baseHealthBarWidthBunkerNew;

    // Automatic Variable Declarations
    unitgroup autoA65BC7B2_g;
    int autoA65BC7B2_u;
    unitgroup autoEAE4DC3C_g;
    int autoEAE4DC3C_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPEB1_gv_baseHealthBarWidthCore = lv_barWidthDefaultCore_C;
    libPEB1_gv_baseHealthBarWidthKeep = lv_barWidthDefaultKeep_C;
    libPEB1_gv_baseHealthBarWidthBunker = lv_barWidthDefaultBunker_C;
    lv_lifeTotalCore = libPEB1_gf_UnitGroupTotalHealth(libPEB1_gv_baseStructuresCore, false);
    lv_lifeTotalKeep = libPEB1_gf_UnitGroupTotalHealth(libPEB1_gv_baseStructuresKeep, false);
    lv_lifeTotalBunker = libPEB1_gf_UnitGroupTotalHealth(libPEB1_gv_baseStructuresBunkers, false);
    DialogControlSetSize(libPEB1_gv_baseHealthBar.lv_baseCoreBarBg, PlayerGroupAll(), lv_barWidthDefaultCore_C, lv_barHeightDefault_C);
    DialogControlSetSize(libPEB1_gv_baseHealthBar.lv_baseKeepBarBg, PlayerGroupAll(), lv_barWidthDefaultKeep_C, lv_barHeightDefault_C);
    DialogControlSetSize(libPEB1_gv_baseHealthBar.lv_baseBunkersBarBg, PlayerGroupAll(), lv_barWidthDefaultBunker_C, lv_barHeightDefault_C);
    while (true) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(libPEB1_gv_baseStructuresCore) == false)) {
            lv_lifeCurrentCore = libPEB1_gf_UnitGroupTotalHealth(libPEB1_gv_baseStructuresCore, true);
            lv_lifePercentCore = (lv_lifeCurrentCore / lv_lifeTotalCore);
            lv_baseHealthBarWidthCoreNew = RoundI((lv_barWidthDefaultCore_C * lv_lifePercentCore));
        }
        else {
            lv_lifeCurrentCore = 0.0;
            lv_baseHealthBarWidthCoreNew = 0;
        }
        if ((lv_baseHealthBarWidthCoreNew < libPEB1_gv_baseHealthBarWidthCore)) {
            if ((lv_baseHealthBarWidthCoreNew > 0)) {
                DialogControlSetSize(libPEB1_gv_baseHealthBar.lv_baseCoreBar, PlayerGroupAll(), lv_baseHealthBarWidthCoreNew, lv_barHeightDefault_C);
                libPEB1_gf_BaseHealthBarFlashLabel(libPEB1_gv_baseHealthBar.lv_baseCoreLabel);
            }
            else {
                libNtve_gf_SetDialogItemStyle(libPEB1_gv_baseHealthBar.lv_baseCoreLabel, "Storm_CoopBrawlTopBar_StructureLabel_Disabled", PlayerGroupAll());
                DialogControlSetVisible(libPEB1_gv_baseHealthBar.lv_baseCoreBar, PlayerGroupAll(), false);
                libPEB1_gv_baseHealthBar.lv_baseCoreFlashing = true;
            }
            libPEB1_gf_BaseHealthBarShrinkDelay(libPEB1_gv_baseHealthBar.lv_baseCoreBarBg, lv_baseHealthBarWidthCoreNew, lv_barHeightDefault_C);
            libPEB1_gv_baseHealthBarWidthCore = lv_baseHealthBarWidthCoreNew;
        }

        autoA65BC7B2_g = libPEB1_gv_baseStructuresKeep;
        autoA65BC7B2_u = UnitGroupCount(autoA65BC7B2_g, c_unitCountAll);
        for (;; autoA65BC7B2_u -= 1) {
            lv_itStructure = UnitGroupUnitFromEnd(autoA65BC7B2_g, autoA65BC7B2_u);
            if (lv_itStructure == null) { break; }
            if ((UnitGetType(lv_itStructure) == "TownCannonTowerDead")) {
                UnitGroupRemove(libPEB1_gv_baseStructuresKeep, lv_itStructure);
            }

        }
        if ((libNtve_gf_UnitGroupIsDead(libPEB1_gv_baseStructuresKeep) == false)) {
            lv_lifeCurrentKeep = libPEB1_gf_UnitGroupTotalHealth(libPEB1_gv_baseStructuresKeep, true);
            lv_lifePercentKeep = (lv_lifeCurrentKeep / lv_lifeTotalKeep);
            lv_baseHealthBarWidthKeepNew = RoundI((lv_barWidthDefaultCore_C * lv_lifePercentKeep));
        }
        else {
            lv_lifeCurrentKeep = 0.0;
            lv_baseHealthBarWidthKeepNew = 0;
        }
        if ((lv_baseHealthBarWidthKeepNew < libPEB1_gv_baseHealthBarWidthKeep)) {
            if ((lv_baseHealthBarWidthKeepNew > 0)) {
                DialogControlSetSize(libPEB1_gv_baseHealthBar.lv_baseKeepBar, PlayerGroupAll(), lv_baseHealthBarWidthKeepNew, lv_barHeightDefault_C);
                libPEB1_gf_BaseHealthBarFlashLabel(libPEB1_gv_baseHealthBar.lv_baseKeepLabel);
            }
            else {
                libNtve_gf_SetDialogItemStyle(libPEB1_gv_baseHealthBar.lv_baseKeepLabel, "Storm_CoopBrawlTopBar_StructureLabel_Disabled", PlayerGroupAll());
                DialogControlSetVisible(libPEB1_gv_baseHealthBar.lv_baseKeepBar, PlayerGroupAll(), false);
                libPEB1_gv_baseHealthBar.lv_baseKeepFlashing = true;
            }
            libPEB1_gf_BaseHealthBarShrinkDelay(libPEB1_gv_baseHealthBar.lv_baseKeepBarBg, lv_baseHealthBarWidthKeepNew, lv_barHeightDefault_C);
            libPEB1_gv_baseHealthBarWidthKeep = lv_baseHealthBarWidthKeepNew;
        }

        autoEAE4DC3C_g = libPEB1_gv_baseStructuresBunkers;
        autoEAE4DC3C_u = UnitGroupCount(autoEAE4DC3C_g, c_unitCountAll);
        for (;; autoEAE4DC3C_u -= 1) {
            lv_itStructure = UnitGroupUnitFromEnd(autoEAE4DC3C_g, autoEAE4DC3C_u);
            if (lv_itStructure == null) { break; }
            if ((UnitIsAlive(lv_itStructure) == false)) {
                UnitGroupRemove(libPEB1_gv_baseStructuresBunkers, lv_itStructure);
            }

        }
        if ((libNtve_gf_UnitGroupIsDead(libPEB1_gv_baseStructuresBunkers) == false)) {
            lv_lifeCurrentBunker = libPEB1_gf_UnitGroupTotalHealth(libPEB1_gv_baseStructuresBunkers, true);
            lv_lifePercentBunker = (lv_lifeCurrentBunker / lv_lifeTotalBunker);
            lv_baseHealthBarWidthBunkerNew = RoundI((lv_barWidthDefaultCore_C * lv_lifePercentBunker));
        }
        else {
            lv_lifeCurrentBunker = 0.0;
            lv_baseHealthBarWidthBunkerNew = 0;
        }
        if ((lv_baseHealthBarWidthBunkerNew < libPEB1_gv_baseHealthBarWidthBunker)) {
            if ((lv_baseHealthBarWidthBunkerNew > 0)) {
                DialogControlSetSize(libPEB1_gv_baseHealthBar.lv_baseBunkersBar, PlayerGroupAll(), lv_baseHealthBarWidthBunkerNew, lv_barHeightDefault_C);
                libPEB1_gf_BaseHealthBarFlashLabel(libPEB1_gv_baseHealthBar.lv_baseBunkersLabel);
            }
            else {
                libNtve_gf_SetDialogItemStyle(libPEB1_gv_baseHealthBar.lv_baseBunkersLabel, "Storm_CoopBrawlTopBar_StructureLabel_Disabled", PlayerGroupAll());
                DialogControlSetVisible(libPEB1_gv_baseHealthBar.lv_baseBunkersBar, PlayerGroupAll(), false);
                libPEB1_gv_baseHealthBar.lv_baseBunkersFlashing = true;
            }
            libPEB1_gf_BaseHealthBarShrinkDelay(libPEB1_gv_baseHealthBar.lv_baseBunkersBarBg, lv_baseHealthBarWidthBunkerNew, lv_barHeightDefault_C);
            libPEB1_gv_baseHealthBarWidthBunker = lv_baseHealthBarWidthBunkerNew;
        }

        libPEB1_gv_baseHealthPercent = (((lv_lifeCurrentBunker+lv_lifeCurrentCore+lv_lifeCurrentKeep) / (lv_lifeTotalBunker+lv_lifeTotalCore+lv_lifeTotalKeep)) * 100.0);
        if ((libPEB1_gv_baseHealthPercent == 100.0)) {
            libNtve_gf_SetDialogItemText(libPEB1_gv_baseHealthBar.lv_basePercentLabel, StringExternal("Param/Value/lib_PEB1_4569280E"), PlayerGroupAll());
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_PEB1_595C5578", "A", FixedToText(libPEB1_gv_baseHealthPercent, 1));
            libNtve_gf_SetDialogItemText(libPEB1_gv_baseHealthBar.lv_basePercentLabel, TextExpressionAssemble("Param/Expression/lib_PEB1_595C5578"), PlayerGroupAll());
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_BaseHealthBarUpdate_Init () {
    libPEB1_gt_BaseHealthBarUpdate = TriggerCreate("libPEB1_gt_BaseHealthBarUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Zerg AI
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_InitZergAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AIHelperZergMinionSeekingEnemy", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, Point(1.0, 1.0), null);
    libPEB1_gv_aIHelper_ZergMinionSeekingEnemy = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AIHelperMarineForRescue", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, Point(1.0, 1.0), null);
    libPEB1_gv_aIHelper_MarineForRescue = UnitLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_InitZergAI_Init () {
    libPEB1_gt_InitZergAI = TriggerCreate("libPEB1_gt_InitZergAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Hero Rally Points
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_SetHeroRallyPoints_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB926145D_g;
    int autoB926145D_u;
    unit autoB926145D_var;
    unitgroup autoE2072EF8_g;
    int autoE2072EF8_u;
    unit autoE2072EF8_var;
    unitgroup auto9B3E288F_g;
    int auto9B3E288F_u;
    unit auto9B3E288F_var;
    unitgroup autoC5476842_g;
    int autoC5476842_u;
    unit autoC5476842_var;
    unitgroup auto972C38DA_g;
    int auto972C38DA_u;
    unit auto972C38DA_var;
    unitgroup auto3169D43A_g;
    int auto3169D43A_u;
    unit auto3169D43A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB926145D_g = UnitGroup("PVEBunker", c_playerAny, RegionCircle(PointFromName("Bunker Ping 1"), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB926145D_u = UnitGroupCount(autoB926145D_g, c_unitCountAll);
    for (;; autoB926145D_u -= 1) {
        autoB926145D_var = UnitGroupUnitFromEnd(autoB926145D_g, autoB926145D_u);
        if (autoB926145D_var == null) { break; }
        AddUnitOfInterest(autoB926145D_var, 0.0, 0.0, "PVEOuterEscort", libNtve_ge_GoalTeam_Order, 0);
    }
    autoE2072EF8_g = UnitGroup("PVEBunker", c_playerAny, RegionCircle(PointFromName("Bunker Ping 2"), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE2072EF8_u = UnitGroupCount(autoE2072EF8_g, c_unitCountAll);
    for (;; autoE2072EF8_u -= 1) {
        autoE2072EF8_var = UnitGroupUnitFromEnd(autoE2072EF8_g, autoE2072EF8_u);
        if (autoE2072EF8_var == null) { break; }
        AddUnitOfInterest(autoE2072EF8_var, 0.0, 0.0, "PVEOuterEscort", libNtve_ge_GoalTeam_Order, 0);
    }
    auto9B3E288F_g = UnitGroup("TownGateL3BRULBLVisionBlocked", c_playerAny, RegionCircle(PointFromName("Bot Lane - Waypoint 2"), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9B3E288F_u = UnitGroupCount(auto9B3E288F_g, c_unitCountAll);
    for (;; auto9B3E288F_u -= 1) {
        auto9B3E288F_var = UnitGroupUnitFromEnd(auto9B3E288F_g, auto9B3E288F_u);
        if (auto9B3E288F_var == null) { break; }
        AddUnitOfInterest(auto9B3E288F_var, 0.0, 0.0, "PVEInnerWallEscort", libNtve_ge_GoalTeam_Order, 0);
    }
    autoC5476842_g = UnitGroup("TownCannonTowerL3", c_playerAny, RegionCircle(PointFromName("Bot Lane - Waypoint 2"), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC5476842_u = UnitGroupCount(autoC5476842_g, c_unitCountAll);
    for (;; autoC5476842_u -= 1) {
        autoC5476842_var = UnitGroupUnitFromEnd(autoC5476842_g, autoC5476842_u);
        if (autoC5476842_var == null) { break; }
        AddUnitOfInterest(autoC5476842_var, 0.0, 0.0, "PVEInnerWallEscort", libNtve_ge_GoalTeam_Order, 0);
    }
    auto972C38DA_g = UnitGroup("TownTownHallL3", c_playerAny, RegionCircle(PointFromName("Bot Lane - Waypoint 2"), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto972C38DA_u = UnitGroupCount(auto972C38DA_g, c_unitCountAll);
    for (;; auto972C38DA_u -= 1) {
        auto972C38DA_var = UnitGroupUnitFromEnd(auto972C38DA_g, auto972C38DA_u);
        if (auto972C38DA_var == null) { break; }
        AddUnitOfInterest(auto972C38DA_var, 0.0, 0.0, "PVEInnerFortEscort", libNtve_ge_GoalTeam_Order, 0);
    }
    auto3169D43A_g = UnitGroup("KingsCore", c_playerAny, RegionCircle(PointFromName("Victory Pan"), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3169D43A_u = UnitGroupCount(auto3169D43A_g, c_unitCountAll);
    for (;; auto3169D43A_u -= 1) {
        auto3169D43A_var = UnitGroupUnitFromEnd(auto3169D43A_g, auto3169D43A_u);
        if (auto3169D43A_var == null) { break; }
        AddUnitOfInterest(auto3169D43A_var, 0.0, 0.0, "PVECoreEscort", libNtve_ge_GoalTeam_Order, 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_SetHeroRallyPoints_Init () {
    libPEB1_gt_SetHeroRallyPoints = TriggerCreate("libPEB1_gt_SetHeroRallyPoints_Func");
    TriggerAddEventTimer(libPEB1_gt_SetHeroRallyPoints, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Revived Add Escort Goal
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PlayerRevivedAddEscortGoal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    int lv_targetPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_targetPlayer = UnitGetOwner(lv_target);

    // Conditions
    if (testConds) {
        if (!((libPVEM_gf_PvEPlayerIsValidHumanPlayer(lv_targetPlayer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if (((TriggerIsEnabled(libPEB1_gt_Archangel1Killed) == true) || (TriggerIsEnabled(libPEB1_gt_Archangel2Killed) == true))) {
        AddUnitOfInterest(libGame_gv_players[lv_targetPlayer].lv_heroUnit, 0.0, 0.0, "PVEEscortPlayer", libNtve_ge_GoalTeam_Order, 0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PlayerRevivedAddEscortGoal_Init () {
    libPEB1_gt_PlayerRevivedAddEscortGoal = TriggerCreate("libPEB1_gt_PlayerRevivedAddEscortGoal_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_PlayerRevivedAddEscortGoal, c_playerAny, "CaptureMacGuffinTwoCastComplete");
}

//--------------------------------------------------------------------------------------------------
// Trigger: End of Game Messages
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_EndofGameMessages_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    StatEventCreate("Game Results");
    StatEventAddDataString(StatEventLastCreated(), "Map Name", "Deadman's Stand");
    if ((libPVEM_gf_PvEGameDifficulty() == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Normal)) {
        StatEventAddDataString(StatEventLastCreated(), "Difficulty", "Normal");
    }
    else {
        StatEventAddDataString(StatEventLastCreated(), "Difficulty", "Hard");
    }
    if ((libPVEM_gv_pvEGameOverResult == c_gameOverVictory)) {
        StatEventAddDataString(StatEventLastCreated(), "Map Complete", "True");
        StatEventAddDataInt(StatEventLastCreated(), "Victory Time", libPEB1_gv_victoryTime);
        StatEventAddDataFixed(StatEventLastCreated(), "Base Integrity", libPEB1_gv_baseHealthPercent);
    }
    else {
        StatEventAddDataString(StatEventLastCreated(), "Map Complete", "False");
        StatEventAddDataInt(StatEventLastCreated(), "Defeat Time", libPEB1_gv_defeatTime);
        StatEventAddDataInt(StatEventLastCreated(), "Archangel Killed", libPEB1_gv_archangelsKilled);
    }
    StatEventSend(StatEventLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_EndofGameMessages_Init () {
    libPEB1_gt_EndofGameMessages = TriggerCreate("libPEB1_gt_EndofGameMessages_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Camps
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGCamps_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEB1_gt_SpawnInitialCreepCamps, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGCamps_Init () {
    libPEB1_gt_DEBUGCamps = TriggerCreate("libPEB1_gt_DEBUGCamps_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGCamps, c_playerAny, "camps", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Archangel
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGArchangel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_type;
    int lv_type2;
    int lv_type3;

    // Automatic Variable Declarations
    int auto5796C558_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libPEB1_gt_ArchangelSpawn1);
    lv_type = StringToInt(StringWord(EventChatMessage(false), 2));
    auto5796C558_val = lv_type;
    if (auto5796C558_val == 1) {
        TriggerExecute(libPEB1_gt_ArchangelEvent1Q, true, false);
    }
    else if (auto5796C558_val == 2) {
        TriggerExecute(libPEB1_gt_ArchangelEvent2, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGArchangel_Init () {
    libPEB1_gt_DEBUGArchangel = TriggerCreate("libPEB1_gt_DEBUGArchangel_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGArchangel, c_playerAny, "arch", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Archangel Dropship
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGArchangelDropship_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEB1_gf_ArchangelSpawnBaseDropship(CameraGetTarget(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGArchangelDropship_Init () {
    libPEB1_gt_DEBUGArchangelDropship = TriggerCreate("libPEB1_gt_DEBUGArchangelDropship_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGArchangelDropship, c_playerAny, "archd", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Stop Timers
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGStopTimers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetDuration(libPEB1_gv_archangel1_Timer) > 0.0)) {
        if ((TimerIsPaused(libPEB1_gv_archangel1_Timer) == false)) {
            TimerPause(libPEB1_gv_archangel1_Timer, true);
        }
        else {
            TimerPause(libPEB1_gv_archangel1_Timer, false);
        }
    }

    if ((TimerGetDuration(libPEB1_gv_archangel2_Timer) > 0.0)) {
        if ((TimerIsPaused(libPEB1_gv_archangel2_Timer) == false)) {
            TimerPause(libPEB1_gv_archangel2_Timer, true);
        }
        else {
            TimerPause(libPEB1_gv_archangel2_Timer, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGStopTimers_Init () {
    libPEB1_gt_DEBUGStopTimers = TriggerCreate("libPEB1_gt_DEBUGStopTimers_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGStopTimers, c_playerAny, "hammertime", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Destroy AI Think Tree
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGDestroyAIThinkTree_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1795F675_g;
    int auto1795F675_u;
    unit auto1795F675_var;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1795F675_g = UnitGroupSelected(EventPlayer());
    auto1795F675_u = UnitGroupCount(auto1795F675_g, c_unitCountAll);
    for (;; auto1795F675_u -= 1) {
        auto1795F675_var = UnitGroupUnitFromEnd(auto1795F675_g, auto1795F675_u);
        if (auto1795F675_var == null) { break; }
        UnitDestroyAIThinkTree(auto1795F675_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGDestroyAIThinkTree_Init () {
    libPEB1_gt_DEBUGDestroyAIThinkTree = TriggerCreate("libPEB1_gt_DEBUGDestroyAIThinkTree_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGDestroyAIThinkTree, c_playerAny, "fivelights", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Stop Basic Zerg Waves
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGStopBasicZergWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEB1_gv_basicWavePaused = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGStopBasicZergWaves_Init () {
    libPEB1_gt_DEBUGStopBasicZergWaves = TriggerCreate("libPEB1_gt_DEBUGStopBasicZergWaves_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGStopBasicZergWaves, c_playerAny, "-nozerg", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Victory
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGVictory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEB1_gf_ShowHideHoldoutPanel(false);
    libPEB1_gf_Victory(null, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGVictory_Init () {
    libPEB1_gt_DEBUGVictory = TriggerCreate("libPEB1_gt_DEBUGVictory_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGVictory, c_playerAny, "-victory", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Defeat
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGDefeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPVEM_gv_pvEDefeatDisabled = false;
    if ((StringToInt(StringWord(EventChatMessage(false), 2)) == 0)) {
        libPEB1_gv_defeatReason = libPEB1_ge_DefeatReason_AllHeroesSlain;
    }
    else {
        libPEB1_gv_defeatReason = libPEB1_ge_DefeatReason_BaseDead;
    }
    libPEB1_gf_Defeat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGDefeat_Init () {
    libPEB1_gt_DEBUGDefeat = TriggerCreate("libPEB1_gt_DEBUGDefeat_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGDefeat, c_playerAny, "-defeat", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Skip Transmission
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGSkipTransmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoD03B27D6_n = 50;
    int autoD03B27D6_i;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoD03B27D6_i = 1; autoD03B27D6_i <= autoD03B27D6_n; autoD03B27D6_i += 1) {
        TransmissionClearAll();
        Wait(0.125, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGSkipTransmission_Init () {
    libPEB1_gt_DEBUGSkipTransmission = TriggerCreate("libPEB1_gt_DEBUGSkipTransmission_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGSkipTransmission, c_playerAny, "-stan", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Archangel Bombardment
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGArchangelBombardment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bombardmentCounter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEB1_gt_ArchangelEvent2, true, false);
    CatalogFieldValueSet(c_gameCatalogEffect, "BattleshipBombardDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, "2000");
    if (((UnitIsAlive(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[1]].lv_archangelUnit) == true) || (UnitIsAlive(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[2]].lv_archangelUnit) == true) || (UnitIsAlive(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[3]].lv_archangelUnit) == true))) {
        SoundPlayForPlayer(SoundLink("ArchangelSpawn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libPEB1_gf_DisplayObjectivePanel(StringExternal("Param/Value/lib_PEB1_197246C7"), StringToText(""), StringExternal("Param/Value/lib_PEB1_C9E9BE20"), null);
        libPEB1_gf_CreateScourgeNest();
        libPEB1_gv_currentScourgeMissileCaster = null;
        while (true) {
            if ((libGame_gv_gameOver == true)) {
                return true;
            }

            if ((!(((UnitIsAlive(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[1]].lv_archangelUnit) == true) || (UnitIsAlive(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[2]].lv_archangelUnit) == true) || (UnitIsAlive(libPEB1_gv_archangelAreas[libPEB1_gv_archangelSpawnOrder[3]].lv_archangelUnit) == true))))) {
                break;
            }

            lv_bombardmentCounter += 1;
            if (((lv_bombardmentCounter == 1) || (lv_bombardmentCounter == 4) || (lv_bombardmentCounter == 7))) {
                libPEB1_gf_CreateScourgeMissile();
            }

            if ((lv_bombardmentCounter >= 28)) {
                lv_bombardmentCounter = 0;
                libPEB1_gv_currentScourgeMissileCaster = null;
            }

            Wait(0.25, c_timeGame);
        }
        libPEB1_gf_DestroyAllSourgeNests();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGArchangelBombardment_Init () {
    libPEB1_gt_DEBUGArchangelBombardment = TriggerCreate("libPEB1_gt_DEBUGArchangelBombardment_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGArchangelBombardment, c_playerAny, "-bomb", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Temp
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGTemp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogAbil, "StukovFlailingSwipe", "Cost.Charge.TimeUse", 8, "15");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGTemp_Init () {
    libPEB1_gt_DEBUGTemp = TriggerCreate("libPEB1_gt_DEBUGTemp_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGTemp, c_playerAny, "-t", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - NoDefeat (Toggle)
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGNoDefeatToggle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libPVEM_gv_pvEDefeatDisabled == false)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_PEB1_C83E9C9B"), true);
        libPVEM_gv_pvEDefeatDisabled = true;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_PEB1_9B54084F"), true);
        libPVEM_gv_pvEDefeatDisabled = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGNoDefeatToggle_Init () {
    libPEB1_gt_DEBUGNoDefeatToggle = TriggerCreate("libPEB1_gt_DEBUGNoDefeatToggle_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGNoDefeatToggle, c_playerAny, "-NoDefeat", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Performance - Archangel
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGPerformanceArchangel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    int lv_alliedTeam;
    int lv_enemyTeam;
    int lv_color;
    int lv_itPlayerIndex;
    int lv_itAreaIndex;
    int lv_itPointIndex;

    // Automatic Variable Declarations
    playergroup auto8E1D000F_g;
    int auto8E1D000F_var;
    playergroup auto9BB993BD_g;
    playergroup auto0691A36C_g;
    const int auto3493455C_ae = 4;
    const int auto3493455C_ai = 1;
    const int autoA1520DC3_ae = 2;
    const int autoA1520DC3_ai = 1;
    unitgroup auto9DFAF272_g;
    int auto9DFAF272_u;
    unit auto9DFAF272_var;
    unitgroup autoE294B7D0_g;
    int autoE294B7D0_u;
    unit autoE294B7D0_var;

    // Variable Initialization
    lv_color = 1;

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_PEB1_788CB9F7"), true);
    libPEB1_gv_disableZergSpawning = true;

    TriggerExecute(libPVEU_gt_PvEUICurateHSUIForceSelection, true, false);
    while (!((TimerGetRemaining(libGame_gv_openTheGatesTimer) > 1.0))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_StopTimer(libGame_gv_openTheGatesTimer);
    libSprt_gf_DEBUGStartGame();
    Wait(0.5, c_timeGame);
    libPEB1_gf_ReinitializeHero(2, libGame_ge_Faction_Order);
    libPEB1_gf_ReinitializeHero(3, libGame_ge_Faction_Order);
    libPEB1_gf_ReinitializeHero(4, libGame_ge_Faction_Order);
    libPEB1_gf_ReinitializeHero(5, libGame_ge_Faction_Order);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 2);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 3);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 4);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 5);
    libNtve_gf_SetPlayerGroupAlliance(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    auto8E1D000F_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
    auto8E1D000F_var = -1;
    while (true) {
        	auto8E1D000F_var = PlayerGroupNextPlayer(auto8E1D000F_g, auto8E1D000F_var);
        	if (auto8E1D000F_var<0) { break; }
        	libNtve_gf_SetAlliance(auto8E1D000F_var, libCore_gv_cOMPUTER_NoVision_TeamOrder, libNtve_ge_AllianceSetting_Ally);
        PlayerSetAlliance(libCore_gv_cOMPUTER_NoVision_TeamOrder, c_allianceIdVision, auto8E1D000F_var, false);
        PlayerSetAlliance(libCore_gv_cOMPUTER_TeamChaos, c_allianceIdPower, auto8E1D000F_var, true);
        libNtve_gf_SetAlliance(libCore_gv_cOMPUTER_TeamOrder, auto8E1D000F_var, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        PlayerSetColorIndex(auto8E1D000F_var, libCore_gv_cOLOROrderPlayerColor, true);
        auto9BB993BD_g = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup;
        lv_itPlayerIndex = -1;
        while (true) {
            	lv_itPlayerIndex = PlayerGroupNextPlayer(auto9BB993BD_g, lv_itPlayerIndex);
            	if (lv_itPlayerIndex<0) { break; }
            	libNtve_gf_SetAlliance(auto8E1D000F_var, lv_itPlayerIndex, libNtve_ge_AllianceSetting_Enemy);
        }
        PlayerSetAlliance(auto8E1D000F_var, c_allianceIdVision, libCore_gv_oBSERVER_ObserverUIPlayer, true);
        if ((auto8E1D000F_var != libCore_gv_cOMPUTER_TeamOrder)) {
            libNtve_gf_SetAlliance(auto8E1D000F_var, libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Enemy);
            PlayerSetAlliance(libCore_gv_cOMPUTER_TeamOrder, c_allianceIdSeekHelp, auto8E1D000F_var, false);
            PlayerSetAlliance(libCore_gv_cOMPUTER_TeamOrder, c_allianceIdPower, auto8E1D000F_var, true);
        }

    }
    auto0691A36C_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
    lv_itPlayerIndex = -1;
    while (true) {
        	lv_itPlayerIndex = PlayerGroupNextPlayer(auto0691A36C_g, lv_itPlayerIndex);
        	if (lv_itPlayerIndex<0) { break; }
        	libGame_gv_players[lv_itPlayerIndex].lv_spawnPoint = PointFromName(("Start Location 00" + IntToString(lv_itPlayerIndex)));
    }
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Crusader"), 1, 0, libCore_gf_GetTotalXPForLevel(10), 1, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Azmodan"), 1, 0, libCore_gf_GetTotalXPForLevel(10), 2, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("WitchDoctor"), 1, 0, libCore_gf_GetTotalXPForLevel(10), 3, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Greymane"), 1, 0, libCore_gf_GetTotalXPForLevel(10), 4, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("KelThuzad"), 1, 0, libCore_gf_GetTotalXPForLevel(10), 5, 0);
    UnitSetPosition(libGame_gv_players[1].lv_heroUnit, PointFromName("Start Location 001"), false);
    UnitSetPosition(libGame_gv_players[2].lv_heroUnit, PointFromName("Start Location 002"), false);
    UnitSetPosition(libGame_gv_players[3].lv_heroUnit, PointFromName("Start Location 003"), false);
    UnitSetPosition(libGame_gv_players[4].lv_heroUnit, PointFromName("Start Location 004"), false);
    UnitSetPosition(libGame_gv_players[5].lv_heroUnit, PointFromName("Start Location 005"), false);

    lv_itAreaIndex = 1;
    for ( ; ( (auto3493455C_ai >= 0 && lv_itAreaIndex <= auto3493455C_ae) || (auto3493455C_ai < 0 && lv_itAreaIndex >= auto3493455C_ae) ) ; lv_itAreaIndex += auto3493455C_ai ) {
        lv_itPointIndex = 1;
        for ( ; ( (autoA1520DC3_ai >= 0 && lv_itPointIndex <= autoA1520DC3_ae) || (autoA1520DC3_ai < 0 && lv_itPointIndex >= autoA1520DC3_ae) ) ; lv_itPointIndex += autoA1520DC3_ai ) {
            if ((PointFromName(("Archangel Area " + IntToString(lv_itAreaIndex) + " - Creep " + IntToString(lv_itPointIndex))) != null)) {
                CreepModify(PointFromName(("Archangel Area " + IntToString(lv_itAreaIndex) + " - Creep " + IntToString(lv_itPointIndex))), 7.0, false, true);
            }

        }
        auto9DFAF272_g = UnitGroup("Hatchery", c_playerAny, RegionFromName(("Archangel Area " + IntToString(lv_itAreaIndex))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9DFAF272_u = UnitGroupCount(auto9DFAF272_g, c_unitCountAll);
        for (;; auto9DFAF272_u -= 1) {
            auto9DFAF272_var = UnitGroupUnitFromEnd(auto9DFAF272_g, auto9DFAF272_u);
            if (auto9DFAF272_var == null) { break; }
            CreepModify(UnitGetPosition(auto9DFAF272_var), 12.0, false, true);
            UnitRemove(auto9DFAF272_var);
        }
        autoE294B7D0_g = UnitGroup("SpineCrawler", c_playerAny, RegionFromName(("Archangel Area " + IntToString(lv_itAreaIndex))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE294B7D0_u = UnitGroupCount(autoE294B7D0_g, c_unitCountAll);
        for (;; autoE294B7D0_u -= 1) {
            autoE294B7D0_var = UnitGroupUnitFromEnd(autoE294B7D0_g, autoE294B7D0_u);
            if (autoE294B7D0_var == null) { break; }
            UnitRemove(autoE294B7D0_var);
        }
    }

    TriggerStop(libPEB1_gt_ArchangelSpawn1);
    libPEB1_gv_archangelAreas[1].lv_type = libPEB1_ge_ArchangelAreaType_Loadout1;
    libPEB1_gv_archangelAreas[2].lv_type = libPEB1_ge_ArchangelAreaType_Loadout2;
    libPEB1_gv_archangelAreas[3].lv_type = libPEB1_ge_ArchangelAreaType_Loadout3;
    libPEB1_gv_archangelAreas[4].lv_type = libPEB1_ge_ArchangelAreaType_Loadout4;
    libPEB1_gf_PrepareArchangelArea(1);
    libPEB1_gf_SpawnArchangelforArea(1, 1);
    libPEB1_gf_PrepareArchangelArea(2);
    libPEB1_gf_SpawnArchangelforArea(2, 1);
    libPEB1_gf_PrepareArchangelArea(3);
    libPEB1_gf_SpawnArchangelforArea(3, 1);
    libPEB1_gf_PrepareArchangelArea(4);
    libPEB1_gf_SpawnArchangelforArea(4, 1);

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGPerformanceArchangel_Init () {
    libPEB1_gt_DEBUGPerformanceArchangel = TriggerCreate("libPEB1_gt_DEBUGPerformanceArchangel_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGPerformanceArchangel, c_playerAny, "-perf aa", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Performance - Hold Out
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGPerformanceHoldOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    int lv_alliedTeam;
    int lv_enemyTeam;
    int lv_color;
    int lv_itPlayerIndex;

    // Automatic Variable Declarations
    playergroup auto17EA1260_g;
    int auto17EA1260_var;
    playergroup auto0B122422_g;
    playergroup auto5F7C8C50_g;

    // Variable Initialization
    lv_color = 1;

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPVEU_gt_PvEUICurateHSUIForceSelection, true, false);
    while (!((TimerGetRemaining(libGame_gv_openTheGatesTimer) > 1.0))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_StopTimer(libGame_gv_openTheGatesTimer);
    libSprt_gf_DEBUGStartGame();
    Wait(0.5, c_timeGame);
    libPEB1_gf_ReinitializeHero(2, libGame_ge_Faction_Order);
    libPEB1_gf_ReinitializeHero(3, libGame_ge_Faction_Order);
    libPEB1_gf_ReinitializeHero(4, libGame_ge_Faction_Order);
    libPEB1_gf_ReinitializeHero(5, libGame_ge_Faction_Order);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 2);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 3);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 4);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 5);
    libNtve_gf_SetPlayerGroupAlliance(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    auto17EA1260_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
    auto17EA1260_var = -1;
    while (true) {
        	auto17EA1260_var = PlayerGroupNextPlayer(auto17EA1260_g, auto17EA1260_var);
        	if (auto17EA1260_var<0) { break; }
        	libNtve_gf_SetAlliance(auto17EA1260_var, libCore_gv_cOMPUTER_NoVision_TeamOrder, libNtve_ge_AllianceSetting_Ally);
        PlayerSetAlliance(libCore_gv_cOMPUTER_NoVision_TeamOrder, c_allianceIdVision, auto17EA1260_var, false);
        PlayerSetAlliance(libCore_gv_cOMPUTER_TeamChaos, c_allianceIdPower, auto17EA1260_var, true);
        libNtve_gf_SetAlliance(libCore_gv_cOMPUTER_TeamOrder, auto17EA1260_var, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        PlayerSetColorIndex(auto17EA1260_var, libCore_gv_cOLOROrderPlayerColor, true);
        auto0B122422_g = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup;
        lv_itPlayerIndex = -1;
        while (true) {
            	lv_itPlayerIndex = PlayerGroupNextPlayer(auto0B122422_g, lv_itPlayerIndex);
            	if (lv_itPlayerIndex<0) { break; }
            	libNtve_gf_SetAlliance(auto17EA1260_var, lv_itPlayerIndex, libNtve_ge_AllianceSetting_Enemy);
        }
        PlayerSetAlliance(auto17EA1260_var, c_allianceIdVision, libCore_gv_oBSERVER_ObserverUIPlayer, true);
        if ((auto17EA1260_var != libCore_gv_cOMPUTER_TeamOrder)) {
            libNtve_gf_SetAlliance(auto17EA1260_var, libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Enemy);
            PlayerSetAlliance(libCore_gv_cOMPUTER_TeamOrder, c_allianceIdSeekHelp, auto17EA1260_var, false);
            PlayerSetAlliance(libCore_gv_cOMPUTER_TeamOrder, c_allianceIdPower, auto17EA1260_var, true);
        }

    }
    auto5F7C8C50_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
    lv_itPlayerIndex = -1;
    while (true) {
        	lv_itPlayerIndex = PlayerGroupNextPlayer(auto5F7C8C50_g, lv_itPlayerIndex);
        	if (lv_itPlayerIndex<0) { break; }
        	libGame_gv_players[lv_itPlayerIndex].lv_spawnPoint = PointFromName(("Start Location 00" + IntToString(lv_itPlayerIndex)));
    }
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Crusader"), 1, 0, libCore_gf_GetTotalXPForLevel(10), 1, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Azmodan"), 1, 0, libCore_gf_GetTotalXPForLevel(10), 2, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("WitchDoctor"), 1, 0, libCore_gf_GetTotalXPForLevel(10), 3, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Greymane"), 1, 0, libCore_gf_GetTotalXPForLevel(10), 4, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("KelThuzad"), 1, 0, libCore_gf_GetTotalXPForLevel(10), 5, 0);
    UnitSetPosition(libGame_gv_players[1].lv_heroUnit, PointFromName("Start Location 001"), false);
    UnitSetPosition(libGame_gv_players[2].lv_heroUnit, PointFromName("Start Location 002"), false);
    UnitSetPosition(libGame_gv_players[3].lv_heroUnit, PointFromName("Start Location 003"), false);
    UnitSetPosition(libGame_gv_players[4].lv_heroUnit, PointFromName("Start Location 004"), false);
    UnitSetPosition(libGame_gv_players[5].lv_heroUnit, PointFromName("Start Location 005"), false);

    TimerPause(libGame_gv_openTheGatesTimer, true);
    TriggerExecute(libPEB1_gt_Holdout3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGPerformanceHoldOut_Init () {
    libPEB1_gt_DEBUGPerformanceHoldOut = TriggerCreate("libPEB1_gt_DEBUGPerformanceHoldOut_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGPerformanceHoldOut, c_playerAny, "-perf ho", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - player names
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGplayernames_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto459D12F5_ae = 5;
    const int auto459D12F5_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_PEB1_63E790C9", "A", IntToText(EventPlayer()));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_PEB1_63E790C9"), true);
    lv_player = 1;
    for ( ; ( (auto459D12F5_ai >= 0 && lv_player <= auto459D12F5_ae) || (auto459D12F5_ai < 0 && lv_player >= auto459D12F5_ae) ) ; lv_player += auto459D12F5_ai ) {
        TextExpressionSetToken("Param/Expression/lib_PEB1_42D787D2", "A", IntToText(lv_player));
        TextExpressionSetToken("Param/Expression/lib_PEB1_42D787D2", "B", StringToText(PlayerHandle(lv_player)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_PEB1_42D787D2"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGplayernames_Init () {
    libPEB1_gt_DEBUGplayernames = TriggerCreate("libPEB1_gt_DEBUGplayernames_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGplayernames, c_playerAny, "playernames", false);
}

void libPEB1_InitTriggers () {
    libPEB1_gt_IncludeMMDeadmansHoldout_Init();
    libPEB1_gt_DeadmansHoldoutInit_Init();
    libPEB1_gt_InitDifficultyHooks_Init();
    libPEB1_gt_DeadmansStandCurateHeroListCallback_Init();
    libPEB1_gt_PVEMinionWaveCompositionData_Init();
    libPEB1_gt_PVEMinionWaveDestroyThinkTree_Init();
    libPEB1_gt_PVEMinionWaveCreateThinkTree_Init();
    libPEB1_gt_PVEMinionWaveSpawnCycle_Init();
    libPEB1_gt_DeadmansHoldoutStartingSequence_Init();
    libPEB1_gt_ZergStartup_Init();
    libPEB1_gt_Stage1Music_Init();
    libPEB1_gt_RemoveCivilianRunner_Init();
    libPEB1_gt_InitPlayers_Init();
    libPEB1_gt_BunkerDestroyed_Init();
    libPEB1_gt_PlanetaryFortressDestroyed_Init();
    libPEB1_gt_ExplorationRegions_Init();
    libPEB1_gt_ZergMinionCatalogChanges_Init();
    libPEB1_gt_AbathurInit_Init();
    libPEB1_gt_MonstrosityStacks_Init();
    libPEB1_gt_ToxicNestDamageBehavior_Init();
    libPEB1_gt_MurkyEggTimerExpires_Init();
    libPEB1_gt_MurkyEggDies_Init();
    libPEB1_gt_MurkyAI_Init();
    libPEB1_gt_MurkyFinalHoldoutAI_Init();
    libPEB1_gt_MurkyRevive_Init();
    libPEB1_gt_ZagaraAI_Init();
    libPEB1_gt_ZagaraHunterKillerTransfusion_Init();
    libPEB1_gt_AbathurTalents_Init();
    libPEB1_gt_ZagaraTalents_Init();
    libPEB1_gt_InitZergHeroes_Init();
    libPEB1_gt_ZergHeroCatalogChangesCallback_Init();
    libPEB1_gt_ZergHeroSpawned_Init();
    libPEB1_gt_ZergHeroDies_Init();
    libPEB1_gt_ZergWavesBasic_Init();
    libPEB1_gt_CreateZergCamps_Init();
    libPEB1_gt_HatcheryDefense_Init();
    libPEB1_gt_ScourgeMissileCreated_Init();
    libPEB1_gt_ArchangelSpawn1_Init();
    libPEB1_gt_ArchangelSpawn2_Init();
    libPEB1_gt_ArchangelDies_Init();
    libPEB1_gt_ArchangelManageAdds_Init();
    libPEB1_gt_ArchangelBaseDropshipUsed_Init();
    libPEB1_gt_ArchangelBalanceInit_Init();
    libPEB1_gt_ArchangelAggroed_Init();
    libPEB1_gt_ArchangelDeaggroed_Init();
    libPEB1_gt_ArchangelAnnihilateTurningControls_Init();
    libPEB1_gt_Holdout1_Init();
    libPEB1_gt_Holdout1AttackWaves_Init();
    libPEB1_gt_Holdout1Wave1_Init();
    libPEB1_gt_Holdout1Wave2_Init();
    libPEB1_gt_Holdout1Wave3_Init();
    libPEB1_gt_Holdout2_Init();
    libPEB1_gt_Holdout2AttackWaves_Init();
    libPEB1_gt_Holdout2Wave1_Init();
    libPEB1_gt_Holdout2Wave2_Init();
    libPEB1_gt_Holdout2Wave3_Init();
    libPEB1_gt_Holdout3_Init();
    libPEB1_gt_Holdout3AttackWaves_Init();
    libPEB1_gt_Holdout3Wave1_Init();
    libPEB1_gt_Holdout3Wave2_Init();
    libPEB1_gt_Holdout3Wave3_Init();
    libPEB1_gt_Holdout3SideWaves_Init();
    libPEB1_gt_Holdout3CreepTumors_Init();
    libPEB1_gt_VictoryFinalHoldoutComplete_Init();
    libPEB1_gt_ArchangelEvent1Q_Init();
    libPEB1_gt_Archangel1Killed_Init();
    libPEB1_gt_ArchangelEvent2_Init();
    libPEB1_gt_Archangel2Killed_Init();
    libPEB1_gt_SpawnInitialCreepCamps_Init();
    libPEB1_gt_UpdateCreepCampScaling_Init();
    libPEB1_gt_CreepCampActivation_Init();
    libPEB1_gt_RespawnCreepCamp_Init();
    libPEB1_gt_InitPickups_Init();
    libPEB1_gt_InitAdjustCaptureMacGuffin_Init();
    libPEB1_gt_SpawnRegenerationGlobe_Init();
    libPEB1_gt_EFBPlayVOSoundforPlayer_Init();
    libPEB1_gt_ReinforcementsUsed_Init();
    libPEB1_gt_ItemUsed_Init();
    libPEB1_gt_PvEResurrectSecondChance_Init();
    libPEB1_gt_VictorySequenceQ_Init();
    libPEB1_gt_VictoryCinematic_Init();
    libPEB1_gt_DefeatCoreDies_Init();
    libPEB1_gt_DefeatHeroesKilled_Init();
    libPEB1_gt_GameOverScoreTransmission_Init();
    libPEB1_gt_GameOverScreenCallback_Init();
    libPEB1_gt_IntroTransmissionQ_Init();
    libPEB1_gt_GateOpensin10Q_Init();
    libPEB1_gt_BattleBeginsQ_Init();
    libPEB1_gt_CreepCampsQ_Init();
    libPEB1_gt_CreepCampActivatedQ_Init();
    libPEB1_gt_BunkersFallQ_Init();
    libPEB1_gt_PlanetaryFortressDestroyedQ_Init();
    libPEB1_gt_Holdout1AlmostDoneQ_Init();
    libPEB1_gt_Archangel11_Init();
    libPEB1_gt_Archangel12_Init();
    libPEB1_gt_Archangel1ClosetoLaunchQ_Init();
    libPEB1_gt_Holdout2Q_Init();
    libPEB1_gt_Holdout2AlmostDoneQ_Init();
    libPEB1_gt_Archangel2Q_Init();
    libPEB1_gt_Archangel2ClosetoLaunchQ_Init();
    libPEB1_gt_Holdout3Q_Init();
    libPEB1_gt_Holdout3AlmostCompleteQ_Init();
    libPEB1_gt_PlayerRevivedTransmission_Init();
    libPEB1_gt_ScoreScreenDisplay_Init();
    libPEB1_gt_ScoreScreenHide_Init();
    libPEB1_gt_ScoreScreenLeave_Init();
    libPEB1_gt_TabScreenInit_Init();
    libPEB1_gt_TabScreenUpdate_Init();
    libPEB1_gt_BaseHealthBarUpdate_Init();
    libPEB1_gt_InitZergAI_Init();
    libPEB1_gt_SetHeroRallyPoints_Init();
    libPEB1_gt_PlayerRevivedAddEscortGoal_Init();
    libPEB1_gt_EndofGameMessages_Init();
    libPEB1_gt_DEBUGCamps_Init();
    libPEB1_gt_DEBUGArchangel_Init();
    libPEB1_gt_DEBUGArchangelDropship_Init();
    libPEB1_gt_DEBUGStopTimers_Init();
    libPEB1_gt_DEBUGDestroyAIThinkTree_Init();
    libPEB1_gt_DEBUGStopBasicZergWaves_Init();
    libPEB1_gt_DEBUGVictory_Init();
    libPEB1_gt_DEBUGDefeat_Init();
    libPEB1_gt_DEBUGSkipTransmission_Init();
    libPEB1_gt_DEBUGArchangelBombardment_Init();
    libPEB1_gt_DEBUGTemp_Init();
    libPEB1_gt_DEBUGNoDefeatToggle_Init();
    libPEB1_gt_DEBUGPerformanceArchangel_Init();
    libPEB1_gt_DEBUGPerformanceHoldOut_Init();
    libPEB1_gt_DEBUGplayernames_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libPEB1_InitLib_completed = false;

void libPEB1_InitLib () {
    if (libPEB1_InitLib_completed) {
        return;
    }

    libPEB1_InitLib_completed = true;

    libPEB1_InitLibraries();
    libPEB1_InitVariables();
    libPEB1_InitTriggers();
}

