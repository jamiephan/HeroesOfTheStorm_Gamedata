include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "LibPVEB"

include "LibPESC_h"

//--------------------------------------------------------------------------------------------------
// Library: PvE Brawl Mod (Starcraft)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libPESC_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libPVEB_InitVariables();
}

// Variable Initialization
bool libPESC_InitVariables_completed = false;

void libPESC_InitVariables () {
    if (libPESC_InitVariables_completed) {
        return;
    }

    libPESC_InitVariables_completed = true;

    libPESC_gv_hMCLCaptureTimer = TimerCreate();
    libPESC_gv_hMCLTextTag = c_textTagNone;
    libPESC_gv_hMCLHardModeAvailable = true;
    libPESC_gv_pVEBrawlTopBar.lv_mainPanel = c_invalidDialogControlId;
    libPESC_gv_pVEBrawlTopBar.lv_topBarBackingImage = c_invalidDialogControlId;
    libPESC_gv_pVEBrawlTopBar.lv_teamLevelInfoPanel = c_invalidDialogControlId;
    libPESC_gv_pVEBrawlTopBar.lv_gameTimerLabel = c_invalidDialogControlId;
    libPESC_gv_pVEBrawlTopBar.lv_missionProgressPanel = c_invalidDialogControlId;
    libPESC_gv_pVEBrawlTopBar.lv_timerLabelSilver = c_invalidDialogControlId;
    libPESC_gv_pVEBrawlTopBar.lv_timerBarSilver = c_invalidDialogControlId;
    libPESC_gv_pVEBrawlTopBar.lv_timerLabelGold = c_invalidDialogControlId;
    libPESC_gv_pVEBrawlTopBar.lv_timerBarGold = c_invalidDialogControlId;
}

// Functions
void libPESC_gf_SendEventHardModeActivated () {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(libPESC_gv_eventID_HardModeActivated_C);
}

void libPESC_gf_SendEventHardModeTimedOut () {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(libPESC_gv_eventID_HardModeTimedOut_C);
}

void libPESC_gf_HardModeActivated (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libPESC_gv_eventID_HardModeActivated_C);
}

void libPESC_gf_HardModeTimedOut (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libPESC_gv_eventID_HardModeTimedOut_C);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: PVE - Ultralisk - Award Hero Death
//--------------------------------------------------------------------------------------------------
bool libPESC_gt_PVEUltraliskAwardHeroDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadUnit;
    int lv_deadPlayer;
    int lv_killingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_deadUnit = EventUnit();
    lv_deadPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(lv_deadUnit) == "ZergUltralisk"))) {
            return false;
        }

        if (!((UnitGetOwner(lv_deadUnit) == libCore_gv_cOMPUTER_TeamChaos))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killingPlayer = libNtve_gf_KillingPlayer();
    libGame_gf_SendEventHeroParticipatedInTakedown(lv_killingPlayer, lv_killingPlayer, lv_deadPlayer, lv_deadUnit, UnitGetPosition(lv_deadUnit));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPESC_gt_PVEUltraliskAwardHeroDeath_Init () {
    libPESC_gt_PVEUltraliskAwardHeroDeath = TriggerCreate("libPESC_gt_PVEUltraliskAwardHeroDeath_Func");
    TriggerAddEventUnitDied(libPESC_gt_PVEUltraliskAwardHeroDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PVE Hard Mode Initialize
//--------------------------------------------------------------------------------------------------
bool libPESC_gt_PVEHardModeInitialize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_PESC_257315E7"), 32, UnitGetPosition(libPESC_gv_hMCLCaptureSlab), 7.0, true, false, PlayerGroupAll());
    libPESC_gv_hMCLTextTag = TextTagLastCreated();
    TextTagShowBackground(libPESC_gv_hMCLTextTag, true);
    TextTagSetColor(libPESC_gv_hMCLTextTag, c_textTagColorBackground, ColorWithAlpha(0.00, 25.10, 0.00, 24.71));
    TriggerEnable(libPESC_gt_PVEHardModeUpdate, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPESC_gt_PVEHardModeInitialize_Init () {
    libPESC_gt_PVEHardModeInitialize = TriggerCreate("libPESC_gt_PVEHardModeInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PVE Hard Mode Update
//--------------------------------------------------------------------------------------------------
bool libPESC_gt_PVEHardModeUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itLight;

    // Automatic Variable Declarations
    const int auto4C57D6C2_ae = libPESC_gv_hMCLPlayersNeededToCapture;
    const int auto4C57D6C2_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPESC_gv_hMCLHardModeActive == false))) {
            return false;
        }

        if (!((libPESC_gv_hMCLHardModeAvailable == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPESC_gv_hMCLPlayersCapturing = UnitCount(null, c_playerAny, RegionCircle(UnitGetPosition(libPESC_gv_hMCLCaptureSlab), libPESC_gv_hMCLCaptureRadius), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((libPESC_gv_hMCLDiscovered == true) && (libPESC_gv_hMCLCapturing == false)) {
        if ((libPESC_gv_hMCLPlayersCapturing > 0)) {
            TextExpressionSetToken("Param/Expression/lib_PESC_33B48CA2", "A", IntToText(libPESC_gv_hMCLPlayersCapturing));
            TextExpressionSetToken("Param/Expression/lib_PESC_33B48CA2", "B", IntToText(libPESC_gv_hMCLPlayersNeededToCapture));
            TextTagSetText(libPESC_gv_hMCLTextTag, TextExpressionAssemble("Param/Expression/lib_PESC_33B48CA2"));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_PESC_65819656", "A", IntToText(libPESC_gv_hMCLPlayersCapturing));
            TextExpressionSetToken("Param/Expression/lib_PESC_65819656", "B", IntToText(libPESC_gv_hMCLPlayersNeededToCapture));
            TextTagSetText(libPESC_gv_hMCLTextTag, TextExpressionAssemble("Param/Expression/lib_PESC_65819656"));
        }
    }

    if ((libPESC_gv_hMCLPlayersCapturing > 0)) {
        if ((libPESC_gv_hMCLDiscovered == false)) {
            libPESC_gv_hMCLDiscovered = true;
            SoundPlayForPlayer(SoundLink("PVE_HardMode_Activated", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }

        ActorSend(libNtve_gf_MainActorofUnit(libPESC_gv_hMCLCaptureSlab), "Signal HardModeInterestOn");
    }
    else {
        ActorSend(libNtve_gf_MainActorofUnit(libPESC_gv_hMCLCaptureSlab), "Signal HardModeInterestOff");
    }
    lv_itLight = 1;
    for ( ; ( (auto4C57D6C2_ai >= 0 && lv_itLight <= auto4C57D6C2_ae) || (auto4C57D6C2_ai < 0 && lv_itLight >= auto4C57D6C2_ae) ) ; lv_itLight += auto4C57D6C2_ai ) {
        if ((lv_itLight <= libPESC_gv_hMCLPlayersCapturing)) {
            ActorSend(ActorFromDoodad(libPESC_gv_hMCLProgressLights[lv_itLight]), "Signal On");
        }
        else {
            ActorSend(ActorFromDoodad(libPESC_gv_hMCLProgressLights[lv_itLight]), "Signal Off");
        }
    }
    if ((libPESC_gv_hMCLPlayersCapturing >= libPESC_gv_hMCLPlayersNeededToCapture)) {
        if ((libPESC_gv_hMCLCapturing == false)) {
            TimerStart(libPESC_gv_hMCLCaptureTimer, libPESC_gv_hMCLCaptureTime, false, c_timeGame);
            libPESC_gv_hMCLCapturing = true;
            libPESC_gv_hMCLProgressPercentage = 0.0;
        }
        else {
            libPESC_gv_hMCLProgressPercentage += (100.0 / (libPESC_gv_hMCLCaptureTime * 16.0));
            TextExpressionSetToken("Param/Expression/lib_PESC_3DDDB993", "A", FixedToText(libPESC_gv_hMCLProgressPercentage, 1));
            TextTagSetText(libPESC_gv_hMCLTextTag, TextExpressionAssemble("Param/Expression/lib_PESC_3DDDB993"));
        }
    }
    else {
        TimerPause(libPESC_gv_hMCLCaptureTimer, true);
        libPESC_gv_hMCLCapturing = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPESC_gt_PVEHardModeUpdate_Init () {
    libPESC_gt_PVEHardModeUpdate = TriggerCreate("libPESC_gt_PVEHardModeUpdate_Func");
    TriggerEnable(libPESC_gt_PVEHardModeUpdate, false);
    TriggerAddEventTimePeriodic(libPESC_gt_PVEHardModeUpdate, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PVE Hard Mode Activate
//--------------------------------------------------------------------------------------------------
bool libPESC_gt_PVEHardModeActivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itLight;

    // Automatic Variable Declarations
    const int autoCD3D2A0E_ae = libPESC_gv_hMCLPlayersNeededToCapture;
    const int autoCD3D2A0E_ai = 1;
    const int auto2F1482F3_ae = 50;
    const int auto2F1482F3_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libPESC_gt_PVEHardModeUpdate, false);
    libPVEB_gv_pB_GameDifficulty = libPVEB_ge_PVEGameDifficulty_Hard;
    libPESC_gv_hMCLHardModeActive = true;
    libPESC_gv_hMCLHardModeAvailable = false;
    libPESC_gf_SendEventHardModeActivated();
    ActorSend(libNtve_gf_MainActorofUnit(libPESC_gv_hMCLCaptureSlab), "Signal HardModeInterestOff");
    ActorSend(libNtve_gf_MainActorofUnit(libPESC_gv_hMCLCaptureSlab), "Signal HardModeActive");
    lv_itLight = 1;
    for ( ; ( (autoCD3D2A0E_ai >= 0 && lv_itLight <= autoCD3D2A0E_ae) || (autoCD3D2A0E_ai < 0 && lv_itLight >= autoCD3D2A0E_ae) ) ; lv_itLight += autoCD3D2A0E_ai ) {
        ActorSend(ActorFromDoodad(libPESC_gv_hMCLProgressLights[lv_itLight]), "Signal Off");
    }
    lv_itLight = 1;
    for ( ; ( (auto2F1482F3_ai >= 0 && lv_itLight <= auto2F1482F3_ae) || (auto2F1482F3_ai < 0 && lv_itLight >= auto2F1482F3_ae) ) ; lv_itLight += auto2F1482F3_ai ) {
        ActorSend(ActorFromDoodad(libPESC_gv_hMCLStageLights[lv_itLight]), "Signal Active");
    }
    TextTagSetText(libPESC_gv_hMCLTextTag, TextExpressionAssemble("Param/Expression/lib_PESC_D2BCE9B3"));
    TextTagSetColor(libPESC_gv_hMCLTextTag, c_textTagColorText, Color(0.00, 100.00, 0.00));
    Wait(5.0, c_timeGame);
    TextTagDestroy(libPESC_gv_hMCLTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPESC_gt_PVEHardModeActivate_Init () {
    libPESC_gt_PVEHardModeActivate = TriggerCreate("libPESC_gt_PVEHardModeActivate_Func");
    TriggerAddEventTimer(libPESC_gt_PVEHardModeActivate, libPESC_gv_hMCLCaptureTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PVE Hard Mode Timeout
//--------------------------------------------------------------------------------------------------
bool libPESC_gt_PVEHardModeTimeout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itLight;

    // Automatic Variable Declarations
    const int autoD8151D43_ae = libPESC_gv_hMCLPlayersNeededToCapture;
    const int autoD8151D43_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPESC_gv_hMCLHardModeActive == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libPESC_gt_PVEHardModeUpdate, false);
    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(libPESC_gv_hMCLCaptureTimer, true);
    libPESC_gv_hMCLHardModeAvailable = false;
    if ((libPESC_gv_hMCLTextTag != c_textTagNone)) {
        lv_itLight = 1;
        for ( ; ( (autoD8151D43_ai >= 0 && lv_itLight <= autoD8151D43_ae) || (autoD8151D43_ai < 0 && lv_itLight >= autoD8151D43_ae) ) ; lv_itLight += autoD8151D43_ai ) {
            ActorSend(ActorFromDoodad(libPESC_gv_hMCLProgressLights[lv_itLight]), "Signal Off");
        }
        ActorSend(libNtve_gf_MainActorofUnit(libPESC_gv_hMCLCaptureSlab), "Signal HardModeInterestOff");
        TextTagSetText(libPESC_gv_hMCLTextTag, TextExpressionAssemble("Param/Expression/lib_PESC_BD31B4CB"));
        Wait(5.0, c_timeGame);
        TextTagDestroy(libPESC_gv_hMCLTextTag);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPESC_gt_PVEHardModeTimeout_Init () {
    libPESC_gt_PVEHardModeTimeout = TriggerCreate("libPESC_gt_PVEHardModeTimeout_Func");
    libPESC_gf_HardModeTimedOut(libPESC_gt_PVEHardModeTimeout);
}

//--------------------------------------------------------------------------------------------------
// Trigger: #Include MM PvE Brawl Mod (Starcraft)
//--------------------------------------------------------------------------------------------------
bool libPESC_gt_IncludeMMPvEBrawlModStarcraft_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPVEB_gt_PVEDirectivePanelInitialize, true, false);
    TriggerExecute(libPVEB_gt_InitializeArrows, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPESC_gt_IncludeMMPvEBrawlModStarcraft_Init () {
    libPESC_gt_IncludeMMPvEBrawlModStarcraft = TriggerCreate("libPESC_gt_IncludeMMPvEBrawlModStarcraft_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Top Bar Init
//--------------------------------------------------------------------------------------------------
bool libPESC_gt_TopBarInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team1LevelInfo;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_team1LevelInfo = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/PartyFramePanel/PartyFrameTopPanel");
    libPESC_gv_pVEBrawlTopBar.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(libPESC_gv_pVEBrawlTopBar.lv_mainPanel, c_triggerControlTypeImage, "TopBarBacking");
    libPESC_gv_pVEBrawlTopBar.lv_topBarBackingImage = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\hud_topbar_backing_plain.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNineSlice, PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 86);
    DialogControlCreateInPanel(libPESC_gv_pVEBrawlTopBar.lv_mainPanel, c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 50);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_PESC_BEEA8861"), PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, libPESC_gv_pVEBrawlTopBar.lv_mainPanel, c_anchorTop, 0, 0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_CoopBrawlTopBarTeamLevel", PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/PartyFramePanel/Team1LevelInfo");
    libPESC_gv_pVEBrawlTopBar.lv_teamLevelInfoPanel = DialogControlLastCreated();
    DialogControlHookup(libPESC_gv_pVEBrawlTopBar.lv_teamLevelInfoPanel, c_triggerControlTypeLabel, "TeamLevelLabel");
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, libPESC_gv_pVEBrawlTopBar.lv_topBarBackingImage, c_anchorBottom, 0, -11);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    DialogControlHookup(libPESC_gv_pVEBrawlTopBar.lv_teamLevelInfoPanel, c_triggerControlTypePanel, "TeamTalentAdvantageFrame");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPESC_gv_pVEBrawlTopBar.lv_teamLevelInfoPanel, c_triggerControlTypePanel, "TeamXPUnitStatusFrameBgImage");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPESC_gv_pVEBrawlTopBar.lv_teamLevelInfoPanel, c_triggerControlTypePanel, "TeamLevelColorBacking");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPESC_gv_pVEBrawlTopBar.lv_teamLevelInfoPanel, c_triggerControlTypePanel, "TeamNextLevelTalentIcon");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPESC_gv_pVEBrawlTopBar.lv_teamLevelInfoPanel, c_triggerControlTypePanel, "TeamNextLevelNoTalentIcon");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPESC_gv_pVEBrawlTopBar.lv_teamLevelInfoPanel, c_triggerControlTypePanel, "TeamXPUnitStatusFrame");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPESC_gv_pVEBrawlTopBar.lv_teamLevelInfoPanel, c_triggerControlTypePanel, "LevelUpLabel");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/PartyFramePanel/Team2LevelInfo");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ConsoleUIContainer/PartyFramePanel/GameTimerLabel");
    libPESC_gv_pVEBrawlTopBar.lv_gameTimerLabel = DialogControlLastCreated();
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, libPESC_gv_pVEBrawlTopBar.lv_topBarBackingImage, c_anchorBottom, 0, -5);
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ConsoleUIContainer/PartyFramePanel/VSLabel");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    TriggerExecute(libPESC_gt_MissionProgressBarInit, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPESC_gt_TopBarInit_Init () {
    libPESC_gt_TopBarInit = TriggerCreate("libPESC_gt_TopBarInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MissionProgressBar Init
//--------------------------------------------------------------------------------------------------
bool libPESC_gt_MissionProgressBarInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlCreateInPanelFromTemplate(libPESC_gv_pVEBrawlTopBar.lv_mainPanel, c_triggerControlTypePanel, "StarcraftPvEUI/MissionProgressFrameTemplate");
    libPESC_gv_pVEBrawlTopBar.lv_missionProgressPanel = DialogControlLastCreated();
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, libPESC_gv_pVEBrawlTopBar.lv_topBarBackingImage, c_anchorTopRight, -41, -1);
    DialogControlHookup(libPESC_gv_pVEBrawlTopBar.lv_missionProgressPanel, c_triggerControlTypeImage, "TimerBarSilver");
    libPESC_gv_pVEBrawlTopBar.lv_timerBarSilver = DialogControlLastCreated();
    DialogControlHookup(libPESC_gv_pVEBrawlTopBar.lv_missionProgressPanel, c_triggerControlTypeLabel, "TimerBarSilverTimer");
    libPESC_gv_pVEBrawlTopBar.lv_timerLabelSilver = DialogControlLastCreated();
    DialogControlHookup(libPESC_gv_pVEBrawlTopBar.lv_missionProgressPanel, c_triggerControlTypeImage, "TimerBarGold");
    libPESC_gv_pVEBrawlTopBar.lv_timerBarGold = DialogControlLastCreated();
    DialogControlHookup(libPESC_gv_pVEBrawlTopBar.lv_missionProgressPanel, c_triggerControlTypeLabel, "TimerBarGoldTimer");
    libPESC_gv_pVEBrawlTopBar.lv_timerLabelGold = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPESC_gt_MissionProgressBarInit_Init () {
    libPESC_gt_MissionProgressBarInit = TriggerCreate("libPESC_gt_MissionProgressBarInit_Func");
}

void libPESC_InitTriggers () {
    libPESC_gt_PVEUltraliskAwardHeroDeath_Init();
    libPESC_gt_PVEHardModeInitialize_Init();
    libPESC_gt_PVEHardModeUpdate_Init();
    libPESC_gt_PVEHardModeActivate_Init();
    libPESC_gt_PVEHardModeTimeout_Init();
    libPESC_gt_IncludeMMPvEBrawlModStarcraft_Init();
    libPESC_gt_TopBarInit_Init();
    libPESC_gt_MissionProgressBarInit_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libPESC_InitLib_completed = false;

void libPESC_InitLib () {
    if (libPESC_InitLib_completed) {
        return;
    }

    libPESC_InitLib_completed = true;

    libPESC_InitLibraries();
    libPESC_InitVariables();
    libPESC_InitTriggers();
}

