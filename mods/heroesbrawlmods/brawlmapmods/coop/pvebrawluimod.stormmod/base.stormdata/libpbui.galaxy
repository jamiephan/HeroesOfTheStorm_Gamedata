include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/UILib"
include "TriggerLibs/SoundLib"

include "LibPBUI_h"

//--------------------------------------------------------------------------------------------------
// Library: PVE Brawl UI
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libPBUI_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libUIUI_InitVariables();
    libSond_InitVariables();
}

// Variable Initialization
bool libPBUI_InitVariables_completed = false;

void libPBUI_InitVariables () {
    int init_i1;
    int init_j1;

    if (libPBUI_InitVariables_completed) {
        return;
    }

    libPBUI_InitVariables_completed = true;

    libPBUI_gv_curateHeroSelectionUI.lv_dialog = c_invalidDialogId;
    libPBUI_gv_curateHeroSelectionUI.lv_mainPanel = c_invalidDialogControlId;
    libPBUI_gv_curateHeroSelectionUI.lv_countdownLabel = c_invalidDialogControlId;
    libPBUI_gv_curateHeroSelectionUI.lv_finalCountdownFrame = c_invalidDialogControlId;
    libPBUI_gv_curateHeroSelectionUI.lv_titleLabel = c_invalidDialogControlId;
    libPBUI_gv_curateHeroSelectionUI.lv_selectedHeroPanel = c_invalidDialogControlId;
    libPBUI_gv_curateHeroSelectionUI.lv_selectedHeroName = c_invalidDialogControlId;
    libPBUI_gv_curateHeroSelectionUI.lv_selectedHeroRole = c_invalidDialogControlId;
    libPBUI_gv_curateHeroSelectionUI.lv_pickHeroPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtons[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonImages[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBorders[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersEmpty[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByMe1[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByMe2[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByMe3[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByAlly1[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByAlly2[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersThinking[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByMe1[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByMe2[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByAlly1[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPBUI_gv_curateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByAlly2[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libPBUI_gv_curateHeroSelectionUI.lv_teamPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroRole[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroRoleBG[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroEmpty[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroBorder[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroLocked[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroLockedAnimation[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroSelectedAlly[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroThinking[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroPlayerName[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroHeroName[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPBUI_gv_curateHeroSelectionUI.lv_voiceChatFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libPBUI_gv_curateHeroSelectionUI.lv_heroContainerFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libPBUI_gv_curateHeroSelectionUI.lv_heroCutsceneFrame[init_i1] = c_invalidDialogControlId;
    }
    libPBUI_gv_curateHeroSelectionUI.lv_abilitiesInfoButton = c_invalidDialogControlId;
    libPBUI_gv_curateHeroSelectionUI.lv_talentsInfoButton = c_invalidDialogControlId;
    libPBUI_gv_curateHeroSelectionUI.lv_brawlInfoButton = c_invalidDialogControlId;
    libPBUI_gv_curateHeroSelectionUI.lv_lockButton = c_invalidDialogControlId;
    libPBUI_gv_curateHeroSelectionUI.lv_debugCrazyBtn = c_invalidDialogControlId;
    libPBUI_gv_curateHeroSelectionUI.lv_debugRerollBtn = c_invalidDialogControlId;
    libPBUI_gv_curateHeroSelectionSetting.lv_countdownTimer = TimerCreate();
}

// Presets
// Functions
void libPBUI_gf_CurateHSUIInitialize () {
    int init_i;

    // Variable Declarations
    int[11] lv_panels;
    int lv_currentPanelLayer;
    int lv_itPlayerSlot;
    int lv_itPlayer;
    int lv_itHero;
    int lv_itRound;
    int lv_itTeam;
    int lv_itHeroRow;
    int lv_itHeroCol;
    int lv_itViewer;
    playergroup lv_viewerGroup;
    int lv_playerCount;

    // Automatic Variable Declarations
    playergroup auto7B139AE8_g;
    playergroup autoE33C6573_g;
    const int auto191B1ACA_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto191B1ACA_ai = 1;
    playergroup autoD9551571_g;
    playergroup auto429381E4_g;
    const int autoE6CE5E06_ae = libPBUI_gv_curateHeroSelectionUIRoleHeroCountRow_C;
    const int autoE6CE5E06_ai = 1;
    const int autoD75C823C_ae = libPBUI_gv_curateHeroSelectionUIRoleHeroCountCol_C;
    const int autoD75C823C_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }
    lv_viewerGroup = PlayerGroupEmpty();

    // Implementation
    if ((libPBUI_gv_curateHeroSelectionUI.lv_dialog != c_invalidDialogId)) {
        return ;
    }

    if ((libPBUI_gv_curateHeroSelectionUIHeroListInitCallback != null)) {
        TriggerExecute(libPBUI_gv_curateHeroSelectionUIHeroListInitCallback, true, false);
    }

    lv_playerCount = 0;
    auto7B139AE8_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto7B139AE8_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
            lv_playerCount += 1;
        }

    }
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libPBUI_gv_curateHeroSelectionUI.lv_dialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "PVEBrawlCurateHeroSelection/CurateHeroSelectionPanelTemplate");
    libPBUI_gv_curateHeroSelectionUI.lv_mainPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "MapNameLabel");
    libPBUI_gv_curateHeroSelectionUI.lv_titleLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "SelectedHeroInfo");
    libPBUI_gv_curateHeroSelectionUI.lv_selectedHeroPanel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "SelectedHeroName");
    libPBUI_gv_curateHeroSelectionUI.lv_selectedHeroName = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_PBUI_02A18E56"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "SelectedHeroRole");
    libPBUI_gv_curateHeroSelectionUI.lv_selectedHeroRole = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CountdownLabel");
    libPBUI_gv_curateHeroSelectionUI.lv_countdownLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "RoundStartCountdownFrame");
    libPBUI_gv_curateHeroSelectionUI.lv_finalCountdownFrame = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "AbilitiesButton");
    libPBUI_gv_curateHeroSelectionUI.lv_abilitiesInfoButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "TalentsButton");
    libPBUI_gv_curateHeroSelectionUI.lv_talentsInfoButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "InfoButton");
    libPBUI_gv_curateHeroSelectionUI.lv_brawlInfoButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "ReadyButton");
    libPBUI_gv_curateHeroSelectionUI.lv_lockButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    autoE33C6573_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoE33C6573_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeHeroCutscene, libNtve_gf_ConvertStringToUILayoutFrameName(("HeroCutsceneFrame" + IntToString((lv_itPlayer - 1)))));
        libPBUI_gv_curateHeroSelectionUI.lv_heroCutsceneFrame[lv_itPlayer] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeHeroContainer, libNtve_gf_ConvertStringToUILayoutFrameName(("SelectedHero" + IntToString((lv_itPlayer - 1)))));
        libPBUI_gv_curateHeroSelectionUI.lv_heroContainerFrame[lv_itPlayer] = DialogControlLastCreated();
    }
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TeamPanel");
    libPBUI_gv_curateHeroSelectionUI.lv_pickHeroPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_PBUI_4C2C612D"), PlayerGroupAll());
    lv_itPlayerSlot = 1;
    for ( ; ( (auto191B1ACA_ai >= 0 && lv_itPlayerSlot <= auto191B1ACA_ae) || (auto191B1ACA_ai < 0 && lv_itPlayerSlot >= auto191B1ACA_ae) ) ; lv_itPlayerSlot += auto191B1ACA_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("TeamPlayerName" + IntToString(lv_itPlayerSlot))));
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroPlayerName[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("TeamHeroName" + IntToString(lv_itPlayerSlot))));
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroHeroName[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("TeamPlayerHero" + IntToString(lv_itPlayerSlot))));
        if ((lv_itPlayerSlot > lv_playerCount)) {
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            continue;
        }

        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroFrame[lv_itPlayerSlot] = DialogControlLastCreated();
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroHeroName[lv_itPlayerSlot], StringToText(""), PlayerGroupAll());
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "EmptyImage");
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroEmpty[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroImage");
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroImage[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "NormalImage");
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroBorder[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LockedImage");
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroLocked[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LockedImageAnimation");
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroLockedAnimation[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroRole");
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroRole[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroRoleBG");
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroRoleBG[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "SelectedImageAlly");
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroSelectedAlly[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ThinkingContainer");
        libPBUI_gv_curateHeroSelectionUI.lv_teamHeroThinking[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeBattleUserFrame, "PVEBrawlVoiceChatFrame");
        libPBUI_gv_curateHeroSelectionUI.lv_voiceChatFrame[lv_itPlayerSlot] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
    }
    lv_viewerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    PlayerGroupAdd(lv_viewerGroup, libCore_gv_oBSERVER_ObserverUIPlayer);
    autoD9551571_g = lv_viewerGroup;
    lv_itViewer = -1;
    while (true) {
        	lv_itViewer = PlayerGroupNextPlayer(autoD9551571_g, lv_itViewer);
        	if (lv_itViewer<0) { break; }
        	lv_itPlayerSlot = 0;
        if ((PlayerGroupHasPlayer(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), lv_itViewer) == true)) {
            lv_itPlayerSlot += 1;
            libPBUI_gv_curateHeroSelectionUI.lv_teamPanelRowPlayer[lv_itViewer][lv_itPlayerSlot] = lv_itViewer;
            libNtve_gf_SetDialogItemText(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroPlayerName[lv_itPlayerSlot], PlayerName(lv_itViewer), libCore_gv_playerGroupFromPlayer[lv_itViewer]);
            DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroBorder[lv_itPlayerSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
            DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroPlayerName[lv_itPlayerSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
            DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroHeroName[lv_itPlayerSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
        }

        auto429381E4_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
        lv_itPlayer = -1;
        while (true) {
            	lv_itPlayer = PlayerGroupNextPlayer(auto429381E4_g, lv_itPlayer);
            	if (lv_itPlayer<0) { break; }
            	if ((lv_itPlayer != lv_itViewer) && (PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
                lv_itPlayerSlot += 1;
                libPBUI_gv_curateHeroSelectionUI.lv_teamPanelRowPlayer[lv_itViewer][lv_itPlayerSlot] = lv_itPlayer;
                libNtve_gf_SetDialogItemText(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroPlayerName[lv_itPlayerSlot], PlayerName(lv_itPlayer), libCore_gv_playerGroupFromPlayer[lv_itViewer]);
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroBorder[lv_itPlayerSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroPlayerName[lv_itPlayerSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroHeroName[lv_itPlayerSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
            }

        }
    }
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PickHeroFrame");
    libPBUI_gv_curateHeroSelectionUI.lv_pickHeroPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Role1Label");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libPBUI_gf_CurateHSUIHeroRoleName(1), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Role2Label");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libPBUI_gf_CurateHSUIHeroRoleName(2), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Role3Label");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libPBUI_gf_CurateHSUIHeroRoleName(3), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Role4Label");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libPBUI_gf_CurateHSUIHeroRoleName(4), PlayerGroupAll());
    lv_itHeroRow = 1;
    for ( ; ( (autoE6CE5E06_ai >= 0 && lv_itHeroRow <= autoE6CE5E06_ae) || (autoE6CE5E06_ai < 0 && lv_itHeroRow >= autoE6CE5E06_ae) ) ; lv_itHeroRow += autoE6CE5E06_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("RoleHeroSelectionPanel" + IntToString(lv_itHeroRow))));
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        lv_itHeroCol = 1;
        for ( ; ( (autoD75C823C_ai >= 0 && lv_itHeroCol <= autoD75C823C_ae) || (autoD75C823C_ai < 0 && lv_itHeroCol >= autoD75C823C_ae) ) ; lv_itHeroCol += autoD75C823C_ai ) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("RoleHero" + IntToString(lv_itHeroCol))));
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtons[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroImage");
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonImages[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "NormalImage");
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBorders[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "EmptyImage");
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersEmpty[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "SelectedImage1");
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByMe1[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "SelectedImage2");
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByMe2[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "SelectedImage3");
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByMe3[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "SelectedImageAlly1");
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByAlly1[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "SelectedImageAlly2");
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByAlly2[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LockedImage1");
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByMe1[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LockedImage2");
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByMe2[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LockedImageAlly1");
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByAlly1[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LockedImageAlly2");
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByAlly2[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ThinkingContainer");
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersThinking[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            if ((libPBUI_gv_curateHeroSelections[lv_itHeroRow][lv_itHeroCol] != null)) {
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersEmpty[lv_itHeroRow][lv_itHeroCol], PlayerGroupAll(), false);
                libNtve_gf_SetDialogItemImage(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonImages[lv_itHeroRow][lv_itHeroCol], (CatalogFieldValueGet(c_gameCatalogHero, libPBUI_gv_curateHeroSelections[lv_itHeroRow][lv_itHeroCol], "SelectScreenButtonImage", c_playerAny)), PlayerGroupAll());
            }
            else {
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBorders[lv_itHeroRow][lv_itHeroCol], PlayerGroupAll(), false);
                DialogControlFadeTransparency(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBorders[lv_itHeroRow][lv_itHeroCol], PlayerGroupAll(), 0.0, 100.0);
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonImages[lv_itHeroRow][lv_itHeroCol], PlayerGroupAll(), false);
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersEmpty[lv_itHeroRow][lv_itHeroCol], PlayerGroupAll(), true);
                libPBUI_gf_CurateHSUIEnableDisableHeroButton(false, lv_itHeroRow, lv_itHeroCol, PlayerGroupAll(), false);
            }
            lv_currentPanelLayer -= 1;
        }
        lv_currentPanelLayer -= 1;
    }
    lv_currentPanelLayer -= 1;
}

trigger auto_libPBUI_gf_CurateHSUIUpdateTimerUI_Trigger = null;

void libPBUI_gf_CurateHSUIUpdateTimerUI () {
    if (auto_libPBUI_gf_CurateHSUIUpdateTimerUI_Trigger == null) {
        auto_libPBUI_gf_CurateHSUIUpdateTimerUI_Trigger = TriggerCreate("auto_libPBUI_gf_CurateHSUIUpdateTimerUI_TriggerFunc");
    }

    TriggerExecute(auto_libPBUI_gf_CurateHSUIUpdateTimerUI_Trigger, false, false);
}

bool auto_libPBUI_gf_CurateHSUIUpdateTimerUI_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_remaingTime;
    bool lv__10SecondReminderPlayed;
    bool lv__5SecondReminderPlayed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (true) {
        lv_remaingTime = TimerGetRemaining(libPBUI_gv_curateHeroSelectionSetting.lv_countdownTimer);
        libNtve_gf_SetDialogItemText(libPBUI_gv_curateHeroSelectionUI.lv_countdownLabel, TextTimeFormat(StringToText("<sectotal/>"), FixedToInt(TimerGetRemaining(libPBUI_gv_curateHeroSelectionSetting.lv_countdownTimer))), PlayerGroupAll());
        if ((lv_remaingTime < 11.0) && (TimerIsPaused(libPBUI_gv_curateHeroSelectionSetting.lv_countdownTimer) == false) && (lv__10SecondReminderPlayed == false)) {
            lv__10SecondReminderPlayed = true;
            SoundPlayForPlayer(SoundLink("UI_BNet_Draft_Countdown_10Sec", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }

        if ((lv_remaingTime < 6.0) && (TimerIsPaused(libPBUI_gv_curateHeroSelectionSetting.lv_countdownTimer) == false) && (lv__5SecondReminderPlayed == false)) {
            lv__5SecondReminderPlayed = true;
            libNtve_gf_SetDialogItemStyle(libPBUI_gv_curateHeroSelectionUI.lv_countdownLabel, "CurateHeroSelection_CountdownLabelWarning", PlayerGroupAll());
        }

        if ((lv_remaingTime <= 0.0)) {
            return true;
        }

        Wait(0.5, c_timeGame);
    }
    return true;
}

void libPBUI_gf_CurateHSUIUpdateVoiceChatUI () {
    // Variable Declarations
    playergroup lv_viewerGroup;
    int lv_itViewer;
    int lv_player;
    int lv_itSlot;

    // Automatic Variable Declarations
    playergroup auto5F8DC806_g;
    const int auto9C07BA13_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto9C07BA13_ai = 1;

    // Variable Initialization

    // Implementation
    lv_viewerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    auto5F8DC806_g = lv_viewerGroup;
    lv_itViewer = -1;
    while (true) {
        	lv_itViewer = PlayerGroupNextPlayer(auto5F8DC806_g, lv_itViewer);
        	if (lv_itViewer<0) { break; }
        	lv_itSlot = 1;
        for ( ; ( (auto9C07BA13_ai >= 0 && lv_itSlot <= auto9C07BA13_ae) || (auto9C07BA13_ai < 0 && lv_itSlot >= auto9C07BA13_ae) ) ; lv_itSlot += auto9C07BA13_ai ) {
            lv_player = libPBUI_gv_curateHeroSelectionUI.lv_teamPanelRowPlayer[lv_itViewer][lv_itSlot];
            if ((lv_player <= 0)) {
                continue;
            }

            libNtve_gf_SetDialogItemPlayerId(libPBUI_gv_curateHeroSelectionUI.lv_voiceChatFrame[lv_itSlot], libCore_gf_GetPlayerIDfromTeamSlot(lv_player, libGame_gf_TeamNumberOfPlayer(lv_player)), libCore_gv_playerGroupFromPlayer[lv_itViewer]);
        }
    }
}

void libPBUI_gf_DisplayCurateHSUI () {
    // Variable Declarations
    int lv_itPlayer2;
    bool lv_ready;
    int lv_itCount;
    sound lv_crowdSound;
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libGame_gv_heroPickDone = false;
    SetHeroLeaderPanelEnabled(false);
    DialogControlSetVisible(libUIUI_gv_uIObserverUI.lv_mainPanel, PlayerGroupAll(), false);
    DialogControlFadeTransparency(libUIUI_gv_uIObserverUI.lv_mainPanel, PlayerGroupAll(), 0.0, 100.0);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    UISetWorldVisible(PlayerGroupAll(), false);
    libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("MX_Brawl_LockIn", PlayerGroupAll());
    libPBUI_gf_CurateHSUIInitialize();
    libPBUI_gf_CurateHSUIUpdateVoiceChatUI();
    libPBUI_gf_CurateHSUIUpdateHeroButtons();
    DialogSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_dialog, PlayerGroupAll(), true);
    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_pickHeroPanel, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(libPBUI_gv_curateHeroSelectionUI.lv_titleLabel, GameMapName(), PlayerGroupAll());
    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_countdownLabel, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemStyle(libPBUI_gv_curateHeroSelectionUI.lv_countdownLabel, "CurateHeroSelection_CountdownLabel", PlayerGroupAll());
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Storm_Ambience_Tutorial_Nexus_Platform", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundPlayForPlayer(SoundLink("UI_BNet_Draft_Countdown_Start", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerEnable(libPBUI_gt_CurateHSUIButtonClicked, true);
    TriggerEnable(libPBUI_gt_CurateHSUICountdownTimerExpires, true);
    TriggerEnable(libPBUI_gt_CurateHSUIForceSelection, true);
    TimerStart(libPBUI_gv_curateHeroSelectionSetting.lv_countdownTimer, libPBUI_gv_curateHeroSelectionUIMaxDuration_C, false, c_timeGame);
    libPBUI_gf_CurateHSUIUpdateTimerUI();
}

void libPBUI_gf_CurateHSUIEnableDisableHeroButton (bool lp_enableDisable, int lp_row, int lp_column, playergroup lp_forPlayers, bool lp_desaturated) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetEnabled(libPBUI_gv_curateHeroSelectionUI.lv_heroButtons[lp_row][lp_column], lp_forPlayers, lp_enableDisable);
    if ((lp_enableDisable == true)) {
        libNtve_gf_SetDialogItemDesaturated(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonImages[lp_row][lp_column], false, lp_forPlayers);
    }
    else {
        if ((lp_desaturated == true)) {
            libNtve_gf_SetDialogItemDesaturated(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonImages[lp_row][lp_column], true, lp_forPlayers);
            libNtve_gf_SetDialogItemDesaturationColor(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonImages[lp_row][lp_column], Color(78.43, 78.43, 78.43), lp_forPlayers);
        }
        else {
            libNtve_gf_SetDialogItemDesaturated(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonImages[lp_row][lp_column], false, lp_forPlayers);
        }
    }
}

void libPBUI_gf_CurateHSUILockUnlockHeroChoice (int lp_player, bool lp_lockUnlock) {
    // Variable Declarations
    playergroup lv_teamMembers;
    int lv_itPlayer;
    int lv_itRow;
    int lv_itCol;
    int lv_pick;
    int lv_displayColumn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_teamMembers = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false);

    // Implementation
    if ((libPBUI_gv_curateHeroSelectionSetting.lv_finalCountDownStarted == true)) {
        return ;
    }

    if ((lp_lockUnlock == true) && (libPBUI_gf_CurateHSUIGoodToLockIn(lp_player) == false)) {
        return ;
    }

    libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lp_player] = lp_lockUnlock;
    if ((lp_lockUnlock == true)) {
        libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroRow[lp_player] = libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lp_player];
        libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroCol[lp_player] = libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lp_player];
    }

    libPBUI_gf_CurateHSUIUpdateHeroButtons();
    if ((lp_lockUnlock == true)) {
        libNtve_gf_SetDialogItemText(libPBUI_gv_curateHeroSelectionUI.lv_lockButton, StringExternal("Param/Value/lib_PBUI_CB24D52E"), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
        libNtve_gf_SetDialogItemText(libPBUI_gv_curateHeroSelectionUI.lv_lockButton, StringExternal("Param/Value/lib_PBUI_40D67FC4"), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    if ((lp_lockUnlock == true) && (libPBUI_gf_CurateHSUIAllPlayersLockedIn() == true)) {
        TriggerExecute(libPBUI_gt_CurateHSUICountdownTimerExpires, true, false);
        return ;
    }

}

void libPBUI_gf_CurateHSUILockUI () {
    // Variable Declarations
    int lv_itRow;
    int lv_itCol;

    // Automatic Variable Declarations
    const int auto6295DEA9_ae = libPBUI_gv_curateHeroSelectionUIRoleHeroCountRow_C;
    const int auto6295DEA9_ai = 1;
    const int auto21F5F149_ae = libPBUI_gv_curateHeroSelectionUIRoleHeroCountCol_C;
    const int auto21F5F149_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itRow = 1;
    for ( ; ( (auto6295DEA9_ai >= 0 && lv_itRow <= auto6295DEA9_ae) || (auto6295DEA9_ai < 0 && lv_itRow >= auto6295DEA9_ae) ) ; lv_itRow += auto6295DEA9_ai ) {
        lv_itCol = 1;
        for ( ; ( (auto21F5F149_ai >= 0 && lv_itCol <= auto21F5F149_ae) || (auto21F5F149_ai < 0 && lv_itCol >= auto21F5F149_ae) ) ; lv_itCol += auto21F5F149_ai ) {
            DialogControlSetEnabled(libPBUI_gv_curateHeroSelectionUI.lv_heroButtons[lv_itRow][lv_itCol], PlayerGroupAll(), false);
        }
    }
    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_lockButton, PlayerGroupAll(), false);
}

bool libPBUI_gf_CurateHSUIAllPlayersLockedIn () {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto9EECDD60_ae = libCore_gv_bALMaxPlayers;
    const int auto9EECDD60_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itPlayer = 1;
    for ( ; ( (auto9EECDD60_ai >= 0 && lv_itPlayer <= auto9EECDD60_ae) || (auto9EECDD60_ai < 0 && lv_itPlayer >= auto9EECDD60_ae) ) ; lv_itPlayer += auto9EECDD60_ai ) {
        if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused) && (PlayerType(lv_itPlayer) == c_playerTypeUser) && (libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == false)) {
            return false;
        }

    }
    return true;
}

text libPBUI_gf_CurateHSUIHeroRoleName (int lp_heroRow) {
    // Automatic Variable Declarations
    int auto89E9A1AD_val;

    // Implementation
    auto89E9A1AD_val = lp_heroRow;
    if (auto89E9A1AD_val == (libPBUI_ge_CurateHeroSelectionRole_Warrior)) {
        return StringExternal("Param/Value/lib_PBUI_8AC542C1");
    }
    else if (auto89E9A1AD_val == (libPBUI_ge_CurateHeroSelectionRole_Support)) {
        return StringExternal("Param/Value/lib_PBUI_29C285B1");
    }
    else if (auto89E9A1AD_val == (libPBUI_ge_CurateHeroSelectionRole_Specialist)) {
        return StringExternal("Param/Value/lib_PBUI_6F9FA996");
    }
    else if (auto89E9A1AD_val == (libPBUI_ge_CurateHeroSelectionRole_Assassin1)) {
        return StringExternal("Param/Value/lib_PBUI_36ED0C64");
    }
    else if (auto89E9A1AD_val == (libPBUI_ge_CurateHeroSelectionRole_Assassin2)) {
        return StringExternal("Param/Value/lib_PBUI_E99FE310");
    }
    else {
    }
    return StringExternal("Param/Value/lib_PBUI_ACE45DBB");
}

string libPBUI_gf_CurateHSUIHeroRoleIcon (int lp_heroRow) {
    // Automatic Variable Declarations
    int auto7C927627_val;

    // Implementation
    auto7C927627_val = lp_heroRow;
    if (auto7C927627_val == (libPBUI_ge_CurateHeroSelectionRole_Warrior)) {
        return "Assets\\Textures\\storm_ui_play_randomhero_button_icon_active_warrior.dds";
    }
    else if (auto7C927627_val == (libPBUI_ge_CurateHeroSelectionRole_Support)) {
        return "Assets\\Textures\\storm_ui_play_randomhero_button_icon_active_support.dds";
    }
    else if (auto7C927627_val == (libPBUI_ge_CurateHeroSelectionRole_Specialist)) {
        return "Assets\\Textures\\storm_ui_play_randomhero_button_icon_active_specialist.dds";
    }
    else if (auto7C927627_val == (libPBUI_ge_CurateHeroSelectionRole_Assassin1)) {
        return "Assets\\Textures\\storm_ui_play_randomhero_button_icon_active_assassin.dds";
    }
    else if (auto7C927627_val == (libPBUI_ge_CurateHeroSelectionRole_Assassin2)) {
        return "Assets\\Textures\\storm_ui_play_randomhero_button_icon_active_assassin.dds";
    }
    else {
    }
    return null;
}

void libPBUI_gf_CurateHSUISelectHeroforPlayer (int lp_player, int lp_heroRow, int lp_heroCol) {
    // Variable Declarations
    string lv_selectedHero;
    playergroup lv_teamMembers;
    int lv_itViewer;
    int lv_itPlayer;
    int lv_itRow;
    int lv_itCol;
    int lv_pick;
    int lv_displayColumn;

    // Automatic Variable Declarations
    playergroup autoBFDDEA2E_g;

    // Variable Initialization

    // Implementation
    if ((((lp_player >= 1) && (lp_player <= libCore_gv_bALMaxPlayers)) == false)) {
        return ;
    }

    if ((lp_heroCol == libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lp_player]) && (lp_heroRow == libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lp_player])) {
        return ;
    }

    lv_selectedHero = libPBUI_gv_curateHeroSelections[lp_heroRow][lp_heroCol];
    if ((lv_selectedHero == null)) {
        return ;
    }

    autoBFDDEA2E_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoBFDDEA2E_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((lv_itPlayer != lp_player) && (libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer] == lp_heroRow) && (libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer] == lp_heroCol)) {
            return ;
        }

    }
    if ((libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lp_player] == true)) {
        return ;
    }

    SoundPlayForPlayer(SoundLink("UI_BNet_HeroChoose", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
    libGame_gv_players[lp_player].lv_heroIndex = libCore_gf_GetIndexFromHero(lv_selectedHero);
    libCore_gf_DataClearHeroDataAtIndex(lp_player);
    libCore_gf_DataLoadHeroDataIntoIndex(lv_selectedHero, lp_player);
    lv_teamMembers = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false);
    PlayerGroupAdd(lv_teamMembers, libCore_gv_oBSERVER_ObserverUIPlayer);
    libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lp_player] = lp_heroRow;
    libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lp_player] = lp_heroCol;
    libPBUI_gf_CurateHSUIUpdateHeroButtons();
    libNtve_gf_SetDialogItemText(libPBUI_gv_curateHeroSelectionUI.lv_selectedHeroName, StringExternal(CatalogFieldValueGet(c_gameCatalogHero, lv_selectedHero, "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libPBUI_gv_curateHeroSelectionUI.lv_selectedHeroRole, libPBUI_gf_CurateHSUIHeroRoleName(lp_heroRow), libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_selectedHeroPanel, libCore_gv_playerGroupFromPlayer[lp_player], true);
    if ((lp_heroRow > 0) && (lp_heroCol > 0)) {
        libNtve_gf_SetDialogItemHeroLink(libPBUI_gv_curateHeroSelectionUI.lv_heroContainerFrame[1], lv_selectedHero, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlSetEnabled(libPBUI_gv_curateHeroSelectionUI.lv_abilitiesInfoButton, libCore_gv_playerGroupFromPlayer[lp_player], true);
        DialogControlSetEnabled(libPBUI_gv_curateHeroSelectionUI.lv_talentsInfoButton, libCore_gv_playerGroupFromPlayer[lp_player], true);
    }

    if ((libPBUI_gf_CurateHSUIGoodToLockIn(lp_player) == true)) {
        DialogControlSetEnabled(libPBUI_gv_curateHeroSelectionUI.lv_lockButton, libCore_gv_playerGroupFromPlayer[lp_player], true);
    }
    else {
        DialogControlSetEnabled(libPBUI_gv_curateHeroSelectionUI.lv_lockButton, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
}

void libPBUI_gf_CurateHSUIUpdateHeroButtons () {
    // Variable Declarations
    playergroup lv_teamMembers;
    int lv_itViewer;
    int lv_itPlayer;
    int lv_itRow;
    int lv_itCol;
    int lv_cellState;

    // Automatic Variable Declarations
    playergroup autoD069F294_g;
    const int autoA3134274_ae = libPBUI_gv_curateHeroSelectionUIRoleHeroCountRow_C;
    const int autoA3134274_ai = 1;
    const int autoD4B4443C_ae = libPBUI_gv_curateHeroSelectionUIRoleHeroCountCol_C;
    const int autoD4B4443C_ai = 1;
    playergroup autoE1E9EEDF_g;
    playergroup autoB0290E6A_g;
    const int autoDAB5DD84_ae = libPBUI_gv_curateHeroSelectionUIRoleHeroCountRow_C;
    const int autoDAB5DD84_ai = 1;
    const int autoD32E085D_ae = libPBUI_gv_curateHeroSelectionUIRoleHeroCountCol_C;
    const int autoD32E085D_ai = 1;
    int autoA7CF61D5_val;

    // Variable Initialization

    // Implementation
    lv_teamMembers = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    PlayerGroupAdd(lv_teamMembers, libCore_gv_oBSERVER_ObserverUIPlayer);
    autoD069F294_g = lv_teamMembers;
    lv_itViewer = -1;
    while (true) {
        	lv_itViewer = PlayerGroupNextPlayer(autoD069F294_g, lv_itViewer);
        	if (lv_itViewer<0) { break; }
        	lv_itRow = 1;
        for ( ; ( (autoA3134274_ai >= 0 && lv_itRow <= autoA3134274_ae) || (autoA3134274_ai < 0 && lv_itRow >= autoA3134274_ae) ) ; lv_itRow += autoA3134274_ai ) {
            lv_itCol = 1;
            for ( ; ( (autoD4B4443C_ai >= 0 && lv_itCol <= autoD4B4443C_ae) || (autoD4B4443C_ai < 0 && lv_itCol >= autoD4B4443C_ae) ) ; lv_itCol += autoD4B4443C_ai ) {
                if ((libPBUI_gv_curateHeroSelections[lv_itRow][lv_itCol] == null)) {
                    continue;
                }

                if ((libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByAllyVisible[lv_itViewer][lv_itRow][lv_itCol] == true)) {
                    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByAlly1[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByAlly2[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByAllyVisible[lv_itViewer][lv_itRow][lv_itCol] = false;
                }

                if ((libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByMeVisible[lv_itViewer][lv_itRow][lv_itCol] == true)) {
                    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByMe1[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByMe2[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByMeVisible[lv_itViewer][lv_itRow][lv_itCol] = false;
                }

                if ((libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByAllyVisible[lv_itViewer][lv_itRow][lv_itCol] == true)) {
                    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByAlly1[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByAlly2[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByAllyVisible[lv_itViewer][lv_itRow][lv_itCol] = false;
                }

                if ((libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByMeVisible[lv_itViewer][lv_itRow][lv_itCol] == true)) {
                    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByMe1[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByMe2[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByMe3[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByMeVisible[lv_itViewer][lv_itRow][lv_itCol] = false;
                }

                if ((libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersThinkingVisible[lv_itViewer][lv_itRow][lv_itCol] == true)) {
                    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersThinking[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersThinkingVisible[lv_itViewer][lv_itRow][lv_itCol] = false;
                }

            }
        }
        autoE1E9EEDF_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
        lv_itPlayer = -1;
        while (true) {
            	lv_itPlayer = PlayerGroupNextPlayer(autoE1E9EEDF_g, lv_itPlayer);
            	if (lv_itPlayer<0) { break; }
            	if (((lv_itPlayer == lv_itViewer))) {
                continue;
            }

            if ((libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer] > 0) && (libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer] > 0)) {
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByAlly1[libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByAlly2[libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByAllyVisible[lv_itViewer][libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]] = true;
                if ((libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == false)) {
                    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersThinking[libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                    libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersThinkingVisible[lv_itViewer][libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]] = true;
                }

            }

        }
        autoB0290E6A_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
        lv_itPlayer = -1;
        while (true) {
            	lv_itPlayer = PlayerGroupNextPlayer(autoB0290E6A_g, lv_itPlayer);
            	if (lv_itPlayer<0) { break; }
            	if (((lv_itPlayer == lv_itViewer) || (libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == false))) {
                continue;
            }

            if ((libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] > 0) && (libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroCol[lv_itPlayer] > 0)) {
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByAlly1[libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroRow[lv_itPlayer]][libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroCol[lv_itPlayer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByAlly2[libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroRow[lv_itPlayer]][libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroCol[lv_itPlayer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByAllyVisible[lv_itViewer][libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroRow[lv_itPlayer]][libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroCol[lv_itPlayer]] = true;
            }

        }
        if ((PlayerGroupHasPlayer(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), lv_itViewer) == true) && (libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lv_itViewer] > 0) && (libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lv_itViewer] > 0)) {
            DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByMe1[libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lv_itViewer]][libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lv_itViewer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
            DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByMe2[libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lv_itViewer]][libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lv_itViewer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
            DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByMe3[libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lv_itViewer]][libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lv_itViewer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersSelectedByMeVisible[lv_itViewer][libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lv_itViewer]][libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lv_itViewer]] = true;
        }

        if ((PlayerGroupHasPlayer(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), lv_itViewer) == true) && (libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itViewer] == true) && (libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroRow[lv_itViewer] > 0) && (libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroCol[lv_itViewer] > 0)) {
            DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByMe1[libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroRow[lv_itViewer]][libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroCol[lv_itViewer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
            DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByMe2[libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroRow[lv_itViewer]][libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroCol[lv_itViewer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
            libPBUI_gv_curateHeroSelectionUI.lv_heroButtonBordersLockedByMeVisible[lv_itViewer][libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroRow[lv_itViewer]][libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroCol[lv_itViewer]] = true;
        }

        lv_itRow = 1;
        for ( ; ( (autoDAB5DD84_ai >= 0 && lv_itRow <= autoDAB5DD84_ae) || (autoDAB5DD84_ai < 0 && lv_itRow >= autoDAB5DD84_ae) ) ; lv_itRow += autoDAB5DD84_ai ) {
            lv_itCol = 1;
            for ( ; ( (autoD32E085D_ai >= 0 && lv_itCol <= autoD32E085D_ae) || (autoD32E085D_ai < 0 && lv_itCol >= autoD32E085D_ae) ) ; lv_itCol += autoD32E085D_ai ) {
                if ((libPBUI_gv_curateHeroSelections[lv_itRow][lv_itCol] == null)) {
                    continue;
                }

                lv_cellState = libPBUI_gf_CurateHSUIGetCellState(lv_itViewer, lv_itRow, lv_itCol);
                autoA7CF61D5_val = lv_cellState;
                if (autoA7CF61D5_val == libPBUI_ge_CurateHeroSelectionCellState_LockedByMe) {
                    libPBUI_gf_CurateHSUIEnableDisableHeroButton(true, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                }
                else if (autoA7CF61D5_val == libPBUI_ge_CurateHeroSelectionCellState_LockedByOther) {
                    libPBUI_gf_CurateHSUIEnableDisableHeroButton(false, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                }
                else if (autoA7CF61D5_val == libPBUI_ge_CurateHeroSelectionCellState_SelectedByMe) {
                    libPBUI_gf_CurateHSUIEnableDisableHeroButton(true, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                }
                else if (autoA7CF61D5_val == libPBUI_ge_CurateHeroSelectionCellState_SelectedByOther) {
                    libPBUI_gf_CurateHSUIEnableDisableHeroButton(false, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                }
                else if (autoA7CF61D5_val == libPBUI_ge_CurateHeroSelectionCellState_Normal) {
                    if ((PlayerGroupHasPlayer(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), lv_itViewer) == true) && (libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itViewer] == true)) {
                        libPBUI_gf_CurateHSUIEnableDisableHeroButton(false, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                    }
                    else {
                        libPBUI_gf_CurateHSUIEnableDisableHeroButton(true, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    }
                }
                else {
                }
            }
        }
    }
    libPBUI_gf_CurateHSUIUpdateTeamPanel();
}

void libPBUI_gf_CurateHSUIUpdateTeamPanel () {
    // Variable Declarations
    playergroup lv_viewerGroup;
    int lv_itViewer;
    int lv_itPlayer;
    int lv_itSlot;
    int lv_itCol;

    // Automatic Variable Declarations
    playergroup auto8E23905E_g;
    const int auto1FA594C6_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto1FA594C6_ai = 1;

    // Variable Initialization

    // Implementation
    lv_viewerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    PlayerGroupAdd(lv_viewerGroup, libCore_gv_oBSERVER_ObserverUIPlayer);
    auto8E23905E_g = lv_viewerGroup;
    lv_itViewer = -1;
    while (true) {
        	lv_itViewer = PlayerGroupNextPlayer(auto8E23905E_g, lv_itViewer);
        	if (lv_itViewer<0) { break; }
        	lv_itSlot = 1;
        for ( ; ( (auto1FA594C6_ai >= 0 && lv_itSlot <= auto1FA594C6_ae) || (auto1FA594C6_ai < 0 && lv_itSlot >= auto1FA594C6_ae) ) ; lv_itSlot += auto1FA594C6_ai ) {
            lv_itPlayer = libPBUI_gv_curateHeroSelectionUI.lv_teamPanelRowPlayer[lv_itViewer][lv_itSlot];
            if ((lv_itPlayer <= 0)) {
                continue;
            }

            if ((libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer] > 0) && (libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer] > 0)) {
                libNtve_gf_SetDialogItemImage(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroImage[lv_itSlot], (CatalogFieldValueGet(c_gameCatalogHero, libPBUI_gv_curateHeroSelections[libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], "SelectScreenButtonImage", c_playerAny)), libCore_gv_playerGroupFromPlayer[lv_itViewer]);
                libNtve_gf_SetDialogItemText(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroHeroName[lv_itSlot], StringExternal(CatalogFieldValueGet(c_gameCatalogHero, libPBUI_gv_curateHeroSelections[libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lv_itViewer]);
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroHeroName[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroEmpty[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroImage[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroBorder[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                if ((libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == false)) {
                    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroThinking[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                }
                else {
                    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroThinking[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                }
                if ((libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == false) && (lv_itViewer != lv_itPlayer)) {
                    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroSelectedAlly[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                }
                else {
                    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroSelectedAlly[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                }
                libNtve_gf_SetDialogItemImage(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroRole[lv_itSlot], libPBUI_gf_CurateHSUIHeroRoleIcon(libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]), libCore_gv_playerGroupFromPlayer[lv_itViewer]);
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroRole[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroRoleBG[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
            }

            if ((libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == true)) {
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroLocked[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroLockedAnimation[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
            }
            else {
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroLocked[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_teamHeroLockedAnimation[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
            }
        }
    }
}

bool libPBUI_gf_CurateHSUIGoodToLockIn (int lp_player) {
    // Variable Declarations
    int lv_itOtherPlayer;

    // Automatic Variable Declarations
    playergroup autoC9470531_g;

    // Variable Initialization

    // Implementation
    if ((PlayerGroupHasPlayer(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), lp_player) == false)) {
        return false;
    }

    if ((libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lp_player] == true)) {
        return false;
    }

    if (((libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lp_player] <= 0) || (libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lp_player] <= 0))) {
        return false;
    }

    autoC9470531_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itOtherPlayer = -1;
    while (true) {
        	lv_itOtherPlayer = PlayerGroupNextPlayer(autoC9470531_g, lv_itOtherPlayer);
        	if (lv_itOtherPlayer<0) { break; }
        	if (((lv_itOtherPlayer == lp_player) || (libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itOtherPlayer] == false))) {
            continue;
        }

        if ((libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lp_player] == libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroRow[lv_itOtherPlayer]) && (libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lp_player] == libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroCol[lv_itOtherPlayer])) {
            return false;
        }

    }
    return true;
}

int libPBUI_gf_CurateHSUIGetCellState (int lp_viewer, int lp_row, int lp_col) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto2A4510CC_g;

    // Variable Initialization

    // Implementation
    if ((libPBUI_gv_curateHeroSelections[lp_row][lp_col] == null)) {
        return libPBUI_ge_CurateHeroSelectionCellState_Empty;
    }

    auto2A4510CC_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto2A4510CC_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((lv_itPlayer == lp_viewer)) {
            if ((libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == true) && (libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] == lp_row) && (libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroCol[lv_itPlayer] == lp_col)) {
                return libPBUI_ge_CurateHeroSelectionCellState_LockedByMe;
            }

            if ((libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == false) && (libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer] == lp_row) && (libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer] == lp_col)) {
                return libPBUI_ge_CurateHeroSelectionCellState_SelectedByMe;
            }

        }
        else {
            if ((libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == true) && (libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] == lp_row) && (libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroCol[lv_itPlayer] == lp_col)) {
                return libPBUI_ge_CurateHeroSelectionCellState_LockedByOther;
            }

            if ((libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == false) && (libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer] == lp_row) && (libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer] == lp_col)) {
                return libPBUI_ge_CurateHeroSelectionCellState_SelectedByOther;
            }

        }
    }
    return libPBUI_ge_CurateHeroSelectionCellState_Normal;
}

void libPBUI_gf_CurateHSUIAutoPickHeroForPlayer (int lp_player) {
    // Variable Declarations
    bool lv_haveWarrior;
    bool lv_haveSupport;
    bool lv_haveSpecialist;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoD90D53CB_g;
    playergroup auto435AF429_g;
    playergroup auto50DE9B41_g;

    // Variable Initialization

    // Implementation
    lv_haveWarrior = false;
    autoD90D53CB_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoD90D53CB_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == true) && (libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] == (libPBUI_ge_CurateHeroSelectionRole_Warrior))) {
            lv_haveWarrior = true;
            break;
        }

    }
    if ((lv_haveWarrior == false)) {
        libPBUI_gf_CurateHSUIAutoPickHeroOfRoleForPlayer(lp_player, libPBUI_ge_CurateHeroSelectionRole_Warrior);
        return ;
    }

    lv_haveSupport = false;
    auto435AF429_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto435AF429_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == true) && (libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] == (libPBUI_ge_CurateHeroSelectionRole_Support))) {
            lv_haveSupport = true;
            break;
        }

    }
    if ((lv_haveSupport == false)) {
        libPBUI_gf_CurateHSUIAutoPickHeroOfRoleForPlayer(lp_player, libPBUI_ge_CurateHeroSelectionRole_Support);
        return ;
    }

    lv_haveSpecialist = false;
    auto50DE9B41_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto50DE9B41_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == true) && (libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] == (libPBUI_ge_CurateHeroSelectionRole_Specialist))) {
            lv_haveSpecialist = true;
            break;
        }

    }
    if ((lv_haveSpecialist == false)) {
        libPBUI_gf_CurateHSUIAutoPickHeroOfRoleForPlayer(lp_player, libPBUI_ge_CurateHeroSelectionRole_Specialist);
        return ;
    }

    libPBUI_gf_CurateHSUIAutoPickHeroOfRoleForPlayer(lp_player, libPBUI_ge_CurateHeroSelectionRole_Assassin1);
}

void libPBUI_gf_CurateHSUIAutoPickHeroOfRoleForPlayer (int lp_player, int lp_role) {
    // Variable Declarations
    int[31] lv_roleHeroRow;
    int[31] lv_roleHeroCol;
    int lv_roleHeroCount;
    int lv_itPlayer;
    int lv_rowStart;
    int lv_rowEnd;
    int lv_itRow;
    int lv_itCol;
    bool lv_used;
    int lv_roleHeroRandomIndex;

    // Automatic Variable Declarations
    int auto854D400C_ae;
    const int auto854D400C_ai = 1;
    const int auto68D32456_ae = libPBUI_gv_curateHeroSelectionUIRoleHeroCountCol_C;
    const int auto68D32456_ai = 1;

    // Variable Initialization

    // Implementation
    lv_rowStart = (lp_role);
    if ((lp_role == libPBUI_ge_CurateHeroSelectionRole_Assassin1)) {
        lv_rowEnd = (libPBUI_ge_CurateHeroSelectionRole_Assassin2);
    }
    else {
        lv_rowEnd = lv_rowStart;
    }
    lv_roleHeroCount = 0;
    auto854D400C_ae = lv_rowEnd;
    lv_itRow = lv_rowStart;
    for ( ; ( (auto854D400C_ai >= 0 && lv_itRow <= auto854D400C_ae) || (auto854D400C_ai < 0 && lv_itRow >= auto854D400C_ae) ) ; lv_itRow += auto854D400C_ai ) {
        lv_itCol = 1;
        for ( ; ( (auto68D32456_ai >= 0 && lv_itCol <= auto68D32456_ae) || (auto68D32456_ai < 0 && lv_itCol >= auto68D32456_ae) ) ; lv_itCol += auto68D32456_ai ) {
            if ((libPBUI_gv_curateHeroSelections[lv_itRow][lv_itCol] == null)) {
                continue;
            }

            if ((libPBUI_gf_CurateHSUIHeroLocked(lv_itRow, lv_itCol) == true)) {
                continue;
            }

            lv_roleHeroCount += 1;
            lv_roleHeroRow[lv_roleHeroCount] = lv_itRow;
            lv_roleHeroCol[lv_roleHeroCount] = lv_itCol;
        }
    }
    if ((lv_roleHeroCount == 0)) {
        libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroRow[lp_player] = 0;
        libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroCol[lp_player] = 0;
        return ;
    }

    lv_roleHeroRandomIndex = RandomInt(1, lv_roleHeroCount);
    libPBUI_gf_CurateHSUISelectHeroforPlayer(lp_player, lv_roleHeroRow[lv_roleHeroRandomIndex], lv_roleHeroCol[lv_roleHeroRandomIndex]);
    libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroRow[lp_player] = lv_roleHeroRow[lv_roleHeroRandomIndex];
    libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroCol[lp_player] = lv_roleHeroCol[lv_roleHeroRandomIndex];
    libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lp_player] = true;
}

bool libPBUI_gf_CurateHSUIHeroLocked (int lp_row, int lp_column) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto0E401EA8_g;

    // Variable Initialization

    // Implementation
    if ((lp_row <= 0) && (lp_column <= 0)) {
        return false;
    }

    auto0E401EA8_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto0E401EA8_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == true) && (libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] == lp_row) && (libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroCol[lv_itPlayer] == lp_column)) {
            return true;
        }

    }
    return false;
}

void libPBUI_gf_CurateHSUIShowFinalCountDownHeroCutscene () {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoEDEF42E9_g;

    // Variable Initialization

    // Implementation
    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_pickHeroPanel, PlayerGroupAll(), false);
    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_selectedHeroPanel, PlayerGroupAll(), false);
    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_abilitiesInfoButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_talentsInfoButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_brawlInfoButton, PlayerGroupAll(), false);
    autoEDEF42E9_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoEDEF42E9_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	libPBUI_gf_CurateHSUIShowHidePlayersHeroCutscene(lv_itPlayer, true);
    }
}

trigger auto_libPBUI_gf_CurateHSUIShowHidePlayersHeroCutscene_Trigger = null;
int auto_libPBUI_gf_CurateHSUIShowHidePlayersHeroCutscene_lp_player;
bool auto_libPBUI_gf_CurateHSUIShowHidePlayersHeroCutscene_lp_showHide;

void libPBUI_gf_CurateHSUIShowHidePlayersHeroCutscene (int lp_player, bool lp_showHide) {
    auto_libPBUI_gf_CurateHSUIShowHidePlayersHeroCutscene_lp_player = lp_player;
    auto_libPBUI_gf_CurateHSUIShowHidePlayersHeroCutscene_lp_showHide = lp_showHide;

    if (auto_libPBUI_gf_CurateHSUIShowHidePlayersHeroCutscene_Trigger == null) {
        auto_libPBUI_gf_CurateHSUIShowHidePlayersHeroCutscene_Trigger = TriggerCreate("auto_libPBUI_gf_CurateHSUIShowHidePlayersHeroCutscene_TriggerFunc");
    }

    TriggerExecute(auto_libPBUI_gf_CurateHSUIShowHidePlayersHeroCutscene_Trigger, false, false);
}

bool auto_libPBUI_gf_CurateHSUIShowHidePlayersHeroCutscene_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libPBUI_gf_CurateHSUIShowHidePlayersHeroCutscene_lp_player;
    bool lp_showHide = auto_libPBUI_gf_CurateHSUIShowHidePlayersHeroCutscene_lp_showHide;

    // Variable Declarations
    playergroup lv_teamMembers;
    int lv_itViewer;
    int lv_displayColumn;

    // Automatic Variable Declarations
    playergroup auto73650EAB_g;

    // Variable Initialization

    // Implementation
    lv_teamMembers = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    if ((PlayerStatus(libCore_gv_oBSERVER_ObserverUIPlayer) != c_playerStatusUnused)) {
        PlayerGroupAdd(lv_teamMembers, libCore_gv_oBSERVER_ObserverUIPlayer);
    }

    auto73650EAB_g = lv_teamMembers;
    lv_itViewer = -1;
    while (true) {
        	lv_itViewer = PlayerGroupNextPlayer(auto73650EAB_g, lv_itViewer);
        	if (lv_itViewer<0) { break; }
        	lv_displayColumn = libPBUI_gf_CurateHSUIHeroPickDisplayColumn(lv_itViewer, lp_player);
        if ((lp_showHide == true)) {
            if ((libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lp_player] == true) && (libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroRow[lp_player] > 0) && (libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroCol[lp_player] > 0)) {
                libNtve_gf_SetDialogItemHeroLink(libPBUI_gv_curateHeroSelectionUI.lv_heroContainerFrame[lv_displayColumn], libPBUI_gv_curateHeroSelections[libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroRow[lp_player]][libPBUI_gv_curateHeroSelectionSetting.lv_lockedHeroCol[lp_player]], libCore_gv_playerGroupFromPlayer[lv_itViewer]);
                libNtve_gf_SetDialogItemSkinLink(libPBUI_gv_curateHeroSelectionUI.lv_heroContainerFrame[lv_displayColumn], PlayerSkin(lp_player), libCore_gv_playerGroupFromPlayer[lv_itViewer]);
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroCutsceneFrame[lv_displayColumn], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
            }
            else {
                DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroCutsceneFrame[lv_displayColumn], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
            }
        }
        else {
            DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_heroCutsceneFrame[lv_displayColumn], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
        }
    }
    return true;
}

int libPBUI_gf_CurateHSUIHeroPickDisplayColumn (int lp_viewerPlayer, int lp_subjectPlayer) {
    // Variable Declarations
    int lv_viewerSlot;
    int lv_subjectSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_viewerSlot = (ModI((libGame_gv_players[lp_viewerPlayer].lv_rosterSlot - 1), 5) + 1);
    lv_subjectSlot = (ModI((libGame_gv_players[lp_subjectPlayer].lv_rosterSlot - 1), 5) + 1);

    // Implementation
    if (((lp_viewerPlayer == libCore_gv_oBSERVER_ObserverUIPlayer) || (lv_viewerSlot < lv_subjectSlot))) {
        return lv_subjectSlot;
    }

    if ((lv_viewerSlot > lv_subjectSlot)) {
        return (lv_subjectSlot + 1);
    }

    return 1;
}

void libPBUI_gf_CurateHSUISetHeroSkinAndMountForPlayer (int lp_player, bool lp_randomSkin) {
    // Variable Declarations
    string lv_skinLink;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCore_gf_DataClearHeroDataAtIndex(lp_player);
    libCore_gf_DataLoadHeroDataIntoIndex(libCore_gf_GetHeroFromIndex(libGame_gv_players[lp_player].lv_heroIndex), lp_player);
    if ((lp_randomSkin == true)) {
        libGame_gf_HeroSelectionRandomlyPickSkin(lp_player);
        libGame_gf_HeroSelectionRandomlyPickMount(lp_player);
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include MM PvE Brawl Mod (UI)
//--------------------------------------------------------------------------------------------------
bool libPBUI_gt_IncludeMMPvEBrawlModUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPBUI_gt_IncludeMMPvEBrawlModUI_Init () {
    libPBUI_gt_IncludeMMPvEBrawlModUI = TriggerCreate("libPBUI_gt_IncludeMMPvEBrawlModUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Curate HS UI Button Clicked
//--------------------------------------------------------------------------------------------------
bool libPBUI_gt_CurateHSUIButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_buttonClicked;
    int lv_itPick;
    int lv_itHeroRow;
    int lv_itHeroCol;

    // Automatic Variable Declarations
    int auto637F4114_val;
    const int autoFD241FB3_ae = libPBUI_gv_curateHeroSelectionUIRoleHeroCountRow_C;
    const int autoFD241FB3_ai = 1;
    const int auto24FF6750_ae = libPBUI_gv_curateHeroSelectionUIRoleHeroCountCol_C;
    const int auto24FF6750_ai = 1;

    // Variable Initialization
    lv_itPlayer = EventPlayer();
    lv_buttonClicked = EventDialogControl();

    // Conditions
    if (testConds) {
        if (!(((EventPlayer() >= 1) && (EventPlayer() <= libCore_gv_bALMaxPlayers)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto637F4114_val = lv_buttonClicked;
    if (auto637F4114_val == libPBUI_gv_curateHeroSelectionUI.lv_abilitiesInfoButton) {
        libNtve_gf_SetDialogItemToggled(libPBUI_gv_curateHeroSelectionUI.lv_talentsInfoButton, false, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
        libNtve_gf_SetDialogItemToggled(libPBUI_gv_curateHeroSelectionUI.lv_brawlInfoButton, false, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
        return true;
    }
    else if (auto637F4114_val == libPBUI_gv_curateHeroSelectionUI.lv_talentsInfoButton) {
        libNtve_gf_SetDialogItemToggled(libPBUI_gv_curateHeroSelectionUI.lv_abilitiesInfoButton, false, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
        libNtve_gf_SetDialogItemToggled(libPBUI_gv_curateHeroSelectionUI.lv_brawlInfoButton, false, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
        return true;
    }
    else if (auto637F4114_val == libPBUI_gv_curateHeroSelectionUI.lv_brawlInfoButton) {
        libNtve_gf_SetDialogItemToggled(libPBUI_gv_curateHeroSelectionUI.lv_abilitiesInfoButton, false, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
        libNtve_gf_SetDialogItemToggled(libPBUI_gv_curateHeroSelectionUI.lv_talentsInfoButton, false, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
        return true;
    }
    else {
    }
    if ((lv_buttonClicked == libPBUI_gv_curateHeroSelectionUI.lv_lockButton)) {
        if ((libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == false)) {
            libPBUI_gf_CurateHSUILockUnlockHeroChoice(lv_itPlayer, true);
            SoundPlayForPlayer(SoundLink("UI_BNet_Draft_HeroConfirm", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lv_itPlayer], 100.0, 0.0);
        }
        else {
            libPBUI_gf_CurateHSUILockUnlockHeroChoice(lv_itPlayer, false);
            SoundPlayForPlayer(SoundLink("UI_BNet_Customize", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lv_itPlayer], 100.0, 0.0);
        }
        return true;
    }

    lv_itHeroRow = 1;
    for ( ; ( (autoFD241FB3_ai >= 0 && lv_itHeroRow <= autoFD241FB3_ae) || (autoFD241FB3_ai < 0 && lv_itHeroRow >= autoFD241FB3_ae) ) ; lv_itHeroRow += autoFD241FB3_ai ) {
        lv_itHeroCol = 1;
        for ( ; ( (auto24FF6750_ai >= 0 && lv_itHeroCol <= auto24FF6750_ae) || (auto24FF6750_ai < 0 && lv_itHeroCol >= auto24FF6750_ae) ) ; lv_itHeroCol += auto24FF6750_ai ) {
            if ((lv_buttonClicked == libPBUI_gv_curateHeroSelectionUI.lv_heroButtons[lv_itHeroRow][lv_itHeroCol]) && (libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == false)) {
                libPBUI_gf_CurateHSUISelectHeroforPlayer(lv_itPlayer, lv_itHeroRow, lv_itHeroCol);
                return true;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPBUI_gt_CurateHSUIButtonClicked_Init () {
    libPBUI_gt_CurateHSUIButtonClicked = TriggerCreate("libPBUI_gt_CurateHSUIButtonClicked_Func");
    TriggerEnable(libPBUI_gt_CurateHSUIButtonClicked, false);
    TriggerAddEventDialogControl(libPBUI_gt_CurateHSUIButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Curate HS UI Countdown Timer Expires
//--------------------------------------------------------------------------------------------------
bool libPBUI_gt_CurateHSUICountdownTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer2;
    sound lv_crowdSound;

    // Automatic Variable Declarations
    playergroup autoD70C5296_g;
    playergroup auto2A9A4B3A_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_StopTimer(libPBUI_gv_curateHeroSelectionSetting.lv_countdownTimer);
    DialogControlSetEnabled(libPBUI_gv_curateHeroSelectionUI.lv_abilitiesInfoButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libPBUI_gv_curateHeroSelectionUI.lv_talentsInfoButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libPBUI_gv_curateHeroSelectionUI.lv_brawlInfoButton, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemToggled(libPBUI_gv_curateHeroSelectionUI.lv_abilitiesInfoButton, false, PlayerGroupAll());
    libNtve_gf_SetDialogItemToggled(libPBUI_gv_curateHeroSelectionUI.lv_talentsInfoButton, false, PlayerGroupAll());
    libNtve_gf_SetDialogItemToggled(libPBUI_gv_curateHeroSelectionUI.lv_brawlInfoButton, false, PlayerGroupAll());
    autoD70C5296_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer2 = -1;
    while (true) {
        	lv_itPlayer2 = PlayerGroupNextPlayer(autoD70C5296_g, lv_itPlayer2);
        	if (lv_itPlayer2<0) { break; }
        	if ((PlayerStatus(lv_itPlayer2) != c_playerStatusUnused) && (libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer2] == false)) {
            if ((libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer2] > 0) && (libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer2] > 0)) {
                libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer2] = true;
            }

        }

    }
    auto2A9A4B3A_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer2 = -1;
    while (true) {
        	lv_itPlayer2 = PlayerGroupNextPlayer(auto2A9A4B3A_g, lv_itPlayer2);
        	if (lv_itPlayer2<0) { break; }
        	if ((PlayerStatus(lv_itPlayer2) != c_playerStatusUnused)) {
            if ((libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer2] == false)) {
                libPBUI_gf_CurateHSUIAutoPickHeroForPlayer(lv_itPlayer2);
            }

            libPBUI_gf_CurateHSUISetHeroSkinAndMountForPlayer(lv_itPlayer2, true);
        }

    }
    libPBUI_gf_CurateHSUIUpdateHeroButtons();
    SoundPlayForPlayer(SoundLink("UI_BNet_Draft_Countdown_Start", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libPBUI_gf_CurateHSUILockUI();
    Wait(1.0, c_timeGame);
    DialogControlFadeTransparency(libPBUI_gv_curateHeroSelectionUI.lv_pickHeroPanel, PlayerGroupAll(), 0.5, 100.0);
    Wait(0.5, c_timeGame);
    libPBUI_gf_CurateHSUIShowFinalCountDownHeroCutscene();
    libPBUI_gv_curateHeroSelectionSetting.lv_finalCountDownStarted = true;
    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_countdownLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_finalCountdownFrame, PlayerGroupAll(), true);
    SoundPlayForPlayer(SoundLink("UI_BNet_Draft_Countdown", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(6.0, c_timeGame);
    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_finalCountdownFrame, PlayerGroupAll(), false);
    DialogSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_dialog, PlayerGroupAll(), false);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, libCore_gv_mAPMapAmbience, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    UISetWorldVisible(PlayerGroupAll(), true);
    DialogControlSetVisible(libUIUI_gv_uIObserverUI.lv_mainPanel, PlayerGroupSingle(libCore_gv_oBSERVER_ObserverUIPlayer), true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libSond_gf_SoundtrackPlayMapSoundtrackAsDefaultSoundtrackForAllPlayers();
    libGame_gv_heroPickDone = true;
    libGame_gv_heroSpawnReady = true;
    SetHeroLeaderPanelEnabled(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPBUI_gt_CurateHSUICountdownTimerExpires_Init () {
    libPBUI_gt_CurateHSUICountdownTimerExpires = TriggerCreate("libPBUI_gt_CurateHSUICountdownTimerExpires_Func");
    TriggerEnable(libPBUI_gt_CurateHSUICountdownTimerExpires, false);
    TriggerAddEventTimer(libPBUI_gt_CurateHSUICountdownTimerExpires, libPBUI_gv_curateHeroSelectionSetting.lv_countdownTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Curate HS UI Force Selection
//--------------------------------------------------------------------------------------------------
bool libPBUI_gt_CurateHSUIForceSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer2;
    sound lv_crowdSound;

    // Automatic Variable Declarations
    playergroup autoB512AB23_g;
    playergroup autoFFF27C12_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_StopTimer(libPBUI_gv_curateHeroSelectionSetting.lv_countdownTimer);
    DialogControlSetEnabled(libPBUI_gv_curateHeroSelectionUI.lv_abilitiesInfoButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libPBUI_gv_curateHeroSelectionUI.lv_talentsInfoButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libPBUI_gv_curateHeroSelectionUI.lv_brawlInfoButton, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemToggled(libPBUI_gv_curateHeroSelectionUI.lv_abilitiesInfoButton, false, PlayerGroupAll());
    libNtve_gf_SetDialogItemToggled(libPBUI_gv_curateHeroSelectionUI.lv_talentsInfoButton, false, PlayerGroupAll());
    libNtve_gf_SetDialogItemToggled(libPBUI_gv_curateHeroSelectionUI.lv_brawlInfoButton, false, PlayerGroupAll());
    autoB512AB23_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer2 = -1;
    while (true) {
        	lv_itPlayer2 = PlayerGroupNextPlayer(autoB512AB23_g, lv_itPlayer2);
        	if (lv_itPlayer2<0) { break; }
        	if ((PlayerStatus(lv_itPlayer2) != c_playerStatusUnused) && (libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer2] == false)) {
            if ((libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer2] > 0) && (libPBUI_gv_curateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer2] > 0)) {
                libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer2] = true;
            }

        }

    }
    autoFFF27C12_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer2 = -1;
    while (true) {
        	lv_itPlayer2 = PlayerGroupNextPlayer(autoFFF27C12_g, lv_itPlayer2);
        	if (lv_itPlayer2<0) { break; }
        	if ((PlayerStatus(lv_itPlayer2) != c_playerStatusUnused)) {
            if ((libPBUI_gv_curateHeroSelectionSetting.lv_lockedIn[lv_itPlayer2] == false)) {
                libPBUI_gf_CurateHSUIAutoPickHeroForPlayer(lv_itPlayer2);
            }
            else {
                libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libGame_gv_players[lv_itPlayer2].lv_heroIndex, libCore_gf_DataSkinsGetSkinIndexFromSkinLink((DataTableGetString(true, ("HeroIndex_" + IntToString(libGame_gv_players[lv_itPlayer2].lv_heroIndex) + "_SkinIndex_" + IntToString(DialogControlGetSelectedItem(libUIUI_gv_uIDebugPanel.lv_skinDropdown, lv_itPlayer2)))))), 0, libCore_gf_GetTotalXPForLevel(10), lv_itPlayer2, lv_itPlayer2);
            }
        }

    }
    libPBUI_gf_CurateHSUIUpdateHeroButtons();
    libPBUI_gf_CurateHSUILockUI();
    libPBUI_gv_curateHeroSelectionSetting.lv_finalCountDownStarted = true;
    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_countdownLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_finalCountdownFrame, PlayerGroupAll(), false);
    DialogSetVisible(libPBUI_gv_curateHeroSelectionUI.lv_dialog, PlayerGroupAll(), false);
    UISetWorldVisible(PlayerGroupAll(), true);
    DialogControlSetVisible(libUIUI_gv_uIObserverUI.lv_mainPanel, PlayerGroupSingle(libCore_gv_oBSERVER_ObserverUIPlayer), true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libSond_gf_SoundtrackPlayMapSoundtrackAsDefaultSoundtrackForAllPlayers();
    libGame_gv_heroPickDone = true;
    libGame_gv_heroSpawnReady = true;
    SetHeroLeaderPanelEnabled(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPBUI_gt_CurateHSUIForceSelection_Init () {
    libPBUI_gt_CurateHSUIForceSelection = TriggerCreate("libPBUI_gt_CurateHSUIForceSelection_Func");
    TriggerEnable(libPBUI_gt_CurateHSUIForceSelection, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Hero Selection UI
//--------------------------------------------------------------------------------------------------
bool libPBUI_gt_DebugHeroSelectionUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPBUI_gf_DisplayCurateHSUI();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPBUI_gt_DebugHeroSelectionUI_Init () {
    libPBUI_gt_DebugHeroSelectionUI = TriggerCreate("libPBUI_gt_DebugHeroSelectionUI_Func");
    TriggerAddEventChatMessage(libPBUI_gt_DebugHeroSelectionUI, c_playerAny, "-HSU", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Hero Selection UI Ally Select
//--------------------------------------------------------------------------------------------------
bool libPBUI_gt_DebugHeroSelectionUIAllySelect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPBUI_gf_CurateHSUISelectHeroforPlayer(2, StringToInt(StringWord(EventChatMessage(false), 2)), StringToInt(StringWord(EventChatMessage(false), 3)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPBUI_gt_DebugHeroSelectionUIAllySelect_Init () {
    libPBUI_gt_DebugHeroSelectionUIAllySelect = TriggerCreate("libPBUI_gt_DebugHeroSelectionUIAllySelect_Func");
    TriggerAddEventChatMessage(libPBUI_gt_DebugHeroSelectionUIAllySelect, c_playerAny, "-HSAS", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Hero Selection UI Ally Lock
//--------------------------------------------------------------------------------------------------
bool libPBUI_gt_DebugHeroSelectionUIAllyLock_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "1")) {
        libPBUI_gf_CurateHSUILockUnlockHeroChoice(2, true);
    }
    else {
        libPBUI_gf_CurateHSUILockUnlockHeroChoice(2, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPBUI_gt_DebugHeroSelectionUIAllyLock_Init () {
    libPBUI_gt_DebugHeroSelectionUIAllyLock = TriggerCreate("libPBUI_gt_DebugHeroSelectionUIAllyLock_Func");
    TriggerAddEventChatMessage(libPBUI_gt_DebugHeroSelectionUIAllyLock, c_playerAny, "-HSAL", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Hero Selection UI Wait Time
//--------------------------------------------------------------------------------------------------
bool libPBUI_gt_DebugHeroSelectionUIWaitTime_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libPBUI_gv_curateHeroSelectionSetting.lv_countdownTimer, c_timerDurationInfinite, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPBUI_gt_DebugHeroSelectionUIWaitTime_Init () {
    libPBUI_gt_DebugHeroSelectionUIWaitTime = TriggerCreate("libPBUI_gt_DebugHeroSelectionUIWaitTime_Func");
    TriggerAddEventChatMessage(libPBUI_gt_DebugHeroSelectionUIWaitTime, c_playerAny, "-HSW", true);
}

void libPBUI_InitTriggers () {
    libPBUI_gt_IncludeMMPvEBrawlModUI_Init();
    libPBUI_gt_CurateHSUIButtonClicked_Init();
    libPBUI_gt_CurateHSUICountdownTimerExpires_Init();
    libPBUI_gt_CurateHSUIForceSelection_Init();
    libPBUI_gt_DebugHeroSelectionUI_Init();
    libPBUI_gt_DebugHeroSelectionUIAllySelect_Init();
    libPBUI_gt_DebugHeroSelectionUIAllyLock_Init();
    libPBUI_gt_DebugHeroSelectionUIWaitTime_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libPBUI_InitLib_completed = false;

void libPBUI_InitLib () {
    if (libPBUI_InitLib_completed) {
        return;
    }

    libPBUI_InitLib_completed = true;

    libPBUI_InitLibraries();
    libPBUI_InitVariables();
    libPBUI_InitTriggers();
}

