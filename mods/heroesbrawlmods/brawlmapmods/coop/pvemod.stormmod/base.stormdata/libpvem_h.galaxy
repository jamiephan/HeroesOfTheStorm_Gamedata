include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"

//--------------------------------------------------------------------------------------------------
// Library: PvE Mod
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Normal = 0;
const int libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Heroic = 1;
const int libPVEM_ge_PvEPickupActivationType_PvEPickupActivationType_Instant = 0;
const int libPVEM_ge_PvEPickupActivationType_PvEPickupActivationType_Target = 1;

// Constants
const int libPVEM_gv_pvEAttackWaveWaypointCount_Max_C = 50;
const int libPVEM_gv_pvEAttackWaveCount_Max_C = 50;
const fixed libPVEM_gv_pvEAttackWaveLeashDistance_On_C = 10.0;
const fixed libPVEM_gv_pvEAttackWaveLeashDistance_Off_C = 3.5;
const fixed libPVEM_gv_pvEAttackWaveWaypointDistance_C = 9.0;
const int libPVEM_gv_pvEResurrectDurationEasy_C = 0;
const int libPVEM_gv_pvEPickupsMaxPickupTypes_C = 10;
const int libPVEM_gv_pvEPickupsMaxActivePickups_C = 10;
const fixed libPVEM_gv_pvENPCHeroResizeRatio = 1.25;
const int libPVEM_gv_pvENPCHeroMaxCount_C = 5;
const string libPVEM_gv_pvEEventIDNPCHeroSpawn_C = "NPCHeroSpawn";
const string libPVEM_gv_pvEEventParamNPCHeroSpawnPlayer_C = "Player";
const string libPVEM_gv_pvEEventParamNPCHeroSpawnHeroUnit_C = "HeroUnit";
const int libPVEM_gv_pvETeamHuman_C = libGame_gv_teamOrderIndex_C;
const int libPVEM_gv_pvETeamComputer_C = libGame_gv_teamChaosIndex_C;

// Structures
struct libPVEM_gs_PvEAttackWave {
    bool lv_used;
    bool lv_sent;
    unitgroup lv_units;
    unitgroup lv_unitsWaitingAtWaypoint;
    unitgroup lv_unitsLeashing;
    point[libPVEM_gv_pvEAttackWaveWaypointCount_Max_C + 1] lv_waypoints;
    int lv_wayPointCount;
    int lv_wayPointPre;
    int lv_wayPointNext;
};

struct libPVEM_gs_PvEResurrectRevivingDialog {
    int lv_panel;
    int lv_label;
};

struct libPVEM_gs_PvENPCHero {
    string lv_hero;
    string lv_unitType;
    int lv_player;
    string lv_skin;
    unit lv_heroUnit;
    string lv_radiusScaledHero;
};

struct libPVEM_gs_PvESetting {
    bool lv_mountDisabled;
    bool lv_hearthDisabled;
};

// Variable Declarations
int libPVEM_gv_pvEAttackWaveCount;
bool libPVEM_gv_pvEAttackWavePaused;
libPVEM_gs_PvEAttackWave[libPVEM_gv_pvEAttackWaveCount_Max_C + 1] libPVEM_gv_pvEAttackWaves;
int libPVEM_gv_pvEGameDifficulty;
int libPVEM_gv_pvEResurrectActiveSpirits;
int[libCore_gv_bALMaxPlayersOnATeam + 1] libPVEM_gv_pvEResurrectTimes;
unit[libCore_gv_bALMaxPlayers + 1] libPVEM_gv_pvEResurrectSpirit;
int[libCore_gv_bALMaxPlayers + 1] libPVEM_gv_pvEResurrectSpiritTextTag;
int[libCore_gv_bALMaxPlayers + 1] libPVEM_gv_pvEResurrectSpiritTextTagSelf;
timer[libCore_gv_bALMaxPlayers + 1] libPVEM_gv_pvEResurrectNotifyTargetPlayerReviveInterruptedTimer;
unitgroup[libCore_gv_bALMaxPlayers + 1] libPVEM_gv_pvEResurrectResurrectionCastersUnitGroup;
libPVEM_gs_PvEResurrectRevivingDialog[libCore_gv_bALMaxPlayers + 1] libPVEM_gv_pvEResurrectRevivingDialog;
string[libPVEM_gv_pvEPickupsMaxPickupTypes_C + 1] libPVEM_gv_pvEPickupsTotal;
int libPVEM_gv_pvEPickupsTotalPickupsInitialized;
string[libPVEM_gv_pvEPickupsMaxPickupTypes_C + 1] libPVEM_gv_pvEPickupsInstant;
int libPVEM_gv_pvEPickupsInstantPickupsInitialized;
string[libPVEM_gv_pvEPickupsMaxPickupTypes_C + 1] libPVEM_gv_pvEPickupsTarget;
int libPVEM_gv_pvEPickupsTargetPickupsInitialized;
string[libPVEM_gv_pvEPickupsMaxPickupTypes_C + 1] libPVEM_gv_pvEPickupsCarryBehavior;
bool libPVEM_gv_pvEPickupPlacingPreplacedPickups;
unitgroup libPVEM_gv_pvEPickupPreplacedPickups;
unitgroup libPVEM_gv_pvEPickupsItemsOnGround;
string libPVEM_gv_pvEPickupsLastPickupSpawned;
int libPVEM_gv_pvEPickupsCurrentRotationStep;
int libPVEM_gv_pvEPickupsRolloverRotationStep;
string[libCore_gv_bALMaxPlayers + 1] libPVEM_gv_pvEPickupsHeldPickups;
unitgroup libPVEM_gv_pvENPCMinions;
int libPVEM_gv_pvENPCMinionZerglingIndex;
trigger libPVEM_gv_pvEHeroCatalogChangeCallback;
int libPVEM_gv_pvEHeroCatalogChangePlayerIndex;
int libPVEM_gv_pvENPCHeroesCount;
libPVEM_gs_PvENPCHero[libPVEM_gv_pvENPCHeroMaxCount_C + 1] libPVEM_gv_pvENPCHeroes;
unitgroup libPVEM_gv_pvENPCHeroUnits;
unitgroup libPVEM_gv_pvEStartingAnimationUnits;
region libPVEM_gv_pvEStartingVisibleRegion;
revealer libPVEM_gv_pvEStartingVisibility;
libPVEM_gs_PvESetting libPVEM_gv_pvESetting;
int libPVEM_gv_pvENPCHeroLevel;
unitfilter libPVEM_gv_pvEEventHeroicFilters;
int libPVEM_gv_pvEGameOverResult;
trigger libPVEM_gv_pvEVictoryCinematicCallback;
trigger libPVEM_gv_pvEEndGameMessageCallback;
int libPVEM_gv_pvEVictoryTime;
int libPVEM_gv_pvEVictoryTimeLoop;
int libPVEM_gv_pvEDefeatTime;
bool libPVEM_gv_pvEVictorySequenceRan;
bool libPVEM_gv_pvEDefeatDisabled;

// Function Declarations
void libPVEM_gf_PvEAttackWaveRoutineSingleWave (int lp_waveIndex);
bool libPVEM_gf_PvEIsValidAttackWaveIndex (int lp_index);
void libPVEM_gf_PvEAddUnitToAttackWave (int lp_waveIndex, unit lp_unit);
void libPVEM_gf_PvEAddUnitGroupToAttackWave (int lp_waveIndex, unitgroup lp_units);
void libPVEM_gf_PvEAddAttackWaveWaypoint (int lp_waveIndex, point lp_waypoint);
void libPVEM_gf_PvECreateAttackWave ();
int libPVEM_gf_PvELastCreatedAttackWave ();
void libPVEM_gf_PvESendAttackWave (int lp_waveIndex);
bool libPVEM_gf_MinionAITestPastNextWaypoint (point lp_minionIndex, point lp_minionIndex2, point lp_minionIndex3);
void libPVEM_gf_PvECreateDefenderAI (unitgroup lp_defenders, region lp_defendRegion, region lp_leashRegion, bool lp_healOnLeash);
int libPVEM_gf_PvEGameDifficulty ();
text libPVEM_gf_PvEGameDifficultyName (int lp_difficulty);
int libPVEM_gf_PvEDifficultyValueInt (int lp_normal, int lp_heroic);
fixed libPVEM_gf_PvEDifficultyValueReal (fixed lp_normal, fixed lp_heroic);
void libPVEM_gf_PvESetGameDifficulty (int lp_difficulty);
void libPVEM_gf_PvEResurrectCheckActiveSpirits (bool lp_targetHeroDead);
void libPVEM_gf_PvEResurrectAddRemoveDeadHeroArrow (bool lp_addOrRemove, int lp_player);
void libPVEM_gf_PvEResurrectRevivePlayerInstantly (int lp_playerIndex, point lp_location);
void libPVEM_gf_PvEResurrectRevivePlayerCleanup (int lp_player);
void libPVEM_gf_PvEPickupInitializePickup (int lp_activation, string lp_pickup, string lp_carryBehavior);
void libPVEM_gf_PvEPickupSpawnPickup (string lp_type, point lp_position, bool lp_droppedItem);
void libPVEM_gf_PvEPickupSpawnRandom (point lp_position);
void libPVEM_gf_PvEPickupSpawnRandomInRotation (string lp_specialSpawn, point lp_position);
void libPVEM_gf_PvEPickupSwapPickup (unit lp_caster, point lp_targetLocation, string lp_abilityBehavior);
void libPVEM_gf_PvEPickupStoreHeldPickups ();
void libPVEM_gf_PvEPickupRestoreHeldPickups ();
void libPVEM_gf_PvESpawnNPCMinions (string lp_type, int lp_player, point lp_pos, fixed lp_angle, int lp_flags);
void libPVEM_gf_PvESetNPCHeroStats (string lp_hero, int lp_player, fixed lp_health);
void libPVEM_gf_PvESpawnNPCHero (string lp_hero, point lp_spawnLocation, int lp_level);
void libPVEM_gf_PvESpawnNPCHeroWithXP (string lp_hero, point lp_spawnLocation, fixed lp_xP);
void libPVEM_gf_PvEPrepareNPCHero (string lp_hero, string lp_skin);
void libPVEM_gf_PvEResetNPCHero (string lp_hero);
int libPVEM_gf_PvENPCHeroPlayerFromUnitType (string lp_unitType);
unit libPVEM_gf_PvENPCHeroUnit (string lp_hero);
string libPVEM_gf_PvENPCHeroFromUnitType (string lp_heroUnitType);
string libPVEM_gf_PvENPCHeroUnitType (string lp_hero);
int libPVEM_gf_PvENPCHeroIndexFromPlayer (int lp_player);
int libPVEM_gf_PvENPCHeroIndexFromUnitType (string lp_heroUnitType);
int libPVEM_gf_PvENPCHeroIndex (string lp_hero);
void libPVEM_gf_PvENPCHeroSpawned (trigger t);
void libPVEM_gf_PvESendEventNPCHeroSpawned (int lp_player, unit lp_heroUnit);
int libPVEM_gf_PvENPCHeroSpawnedPlayer ();
unit libPVEM_gf_PvENPCHeroSpawnedUnit ();
playergroup libPVEM_gf_PvEPlayersOnTeam (int lp_team, bool lp_includeNPCPlayer);
playergroup libPVEM_gf_PvEPlayersOnHumanTeam (bool lp_includeNPCPlayer);
playergroup libPVEM_gf_PvEPlayersOnComputerTeam (bool lp_includeNPCPlayer);
bool libPVEM_gf_PvEPlayerIsValidHumanTeamPlayer (int lp_player);
bool libPVEM_gf_PvEPlayerIsValidHumanPlayer (int lp_player);
int libPVEM_gf_ComputerPlayerInTeam (int lp_team);
bool libPVEM_gf_PvEPlayerHeroIsDead (int lp_player);
void libPVEM_gf_PvEUpdateTeamLevel (int lp_teamIndex, int lp_newLevel);
bool libPVEM_gf_PvEPlayerHeroesAreNearby (point lp_location);
void libPVEM_gf_AwardXPForNPCKill (unit lp_killedUnit, int lp_killedUnitPlayer, int lp_killedUnitClassification, int lp_killingPlayer, fixed lp_killedUnitXPAward);
void libPVEM_gf_PvEVictoryDefeatEffect (bool lp_victory);
void libPVEM_gf_PvEVictoryDefeat (bool lp_victory, region lp_victoryArea, point lp_victoryLocation);
void libPVEM_gf_PvEEndGameForPlayer (int lp_player);
void libPVEM_gf_PvEVictory (region lp_cameraRevealRegion, point lp_cameraTarget);
void libPVEM_gf_PvERemoveDeathModelsInRegion (region lp_region);
void libPVEM_gf_PvEDebugSelectPlayerHero (int lp_player, int lp_playerToSelect, bool lp_exclude);

// Trigger Declarations
trigger libPVEM_gt_IncludePvEMod;
trigger libPVEM_gt_PvEAttackWaveRoutine;
trigger libPVEM_gt_PvEPlayerHeroAIInit;
trigger libPVEM_gt_PvEPlayerHeroAIPlayerJoins;
trigger libPVEM_gt_PvEPlayerHeroAIPlayerLeaves;
trigger libPVEM_gt_PvEResurrectCreateSpirit;
trigger libPVEM_gt_PvEResurrectRevivePlayer;
trigger libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveStart;
trigger libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterrupted;
trigger libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterruptedTimerExpired;
trigger libPVEM_gt_PvEResurrectPlayerRespawnsNormally;
trigger libPVEM_gt_PvEInit;
trigger libPVEM_gt_PvEInitializeVOPack;
trigger libPVEM_gt_PvEPickupPingOverrides;
trigger libPVEM_gt_PvEPickupPreplacedPickupVisibilityCheck;
trigger libPVEM_gt_PvEPickupItemPickedUp;
trigger libPVEM_gt_PvENPCMinionDies;
trigger libPVEM_gt_PvEInitializePossibleAIPlayers;
trigger libPVEM_gt_PvEHeroSpawned;
trigger libPVEM_gt_PvEStartingAnimationsCallback;
trigger libPVEM_gt_PvEStartingVisibilityCallback;
trigger libPVEM_gt_PvEVictorySequence;
trigger libPVEM_gt_PvEDefeat;
trigger libPVEM_gt_PvEGameOverScore;
trigger libPVEM_gt_PvEDebugVictory;
trigger libPVEM_gt_PvEDebugDefeat;
trigger libPVEM_gt_PvEDebugDifficulty;
trigger libPVEM_gt_PvEDebugInitializeArrows;
trigger libPVEM_gt_PvEDebugShowArrows;
trigger libPVEM_gt_PvEDebugHideArrows;
trigger libPVEM_gt_PvEDebugTurnOnPlayerSelction;
trigger libPVEM_gt_PvEDebugPlayerSelection;
trigger libPVEM_gt_PvEDebugSpawnPickupAll;
trigger libPVEM_gt_PvEDebugSpawnPickupRandom;
trigger libPVEM_gt_PvEDebugSpawnPickupRotation;

// Library Initialization
void libPVEM_InitVariables ();

