include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/UILib"
include "TriggerLibs/SoundLib"
include "LibPVEM_h"

include "LibPVEU_h"

//--------------------------------------------------------------------------------------------------
// Library: PvE UI
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libPVEU_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libUIUI_InitVariables();
    libSond_InitVariables();
    libPVEM_InitVariables();
}

// Variable Initialization
bool libPVEU_InitVariables_completed = false;

void libPVEU_InitVariables () {
    int init_i1;
    int init_j1;

    if (libPVEU_InitVariables_completed) {
        return;
    }

    libPVEU_InitVariables_completed = true;

    libPVEU_gv_pvEMapPanel = c_invalidDialogControlId;
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_dialog = c_invalidDialogId;
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_mainPanel = c_invalidDialogControlId;
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_countdownLabel = c_invalidDialogControlId;
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_finalCountdownFrame = c_invalidDialogControlId;
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_titleLabel = c_invalidDialogControlId;
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_selectedHeroPanel = c_invalidDialogControlId;
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_selectedHeroName = c_invalidDialogControlId;
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_selectedHeroRole = c_invalidDialogControlId;
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_pickHeroPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtons[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonImages[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBorders[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersEmpty[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByMe1[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByMe2[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByMe3[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByAlly1[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByAlly2[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersThinking[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByMe1[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByMe2[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByAlly1[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountRow_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountCol_C; init_j1 += 1) {
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByAlly2[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroRole[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroRoleBG[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroEmpty[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroBorder[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroLocked[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroLockedAnimation[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroSelectedAlly[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroThinking[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroPlayerName[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroHeroName[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroContainerFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroCutsceneFrame[init_i1] = c_invalidDialogControlId;
    }
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_abilitiesInfoButton = c_invalidDialogControlId;
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_talentsInfoButton = c_invalidDialogControlId;
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_brawlInfoButton = c_invalidDialogControlId;
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_lockButton = c_invalidDialogControlId;
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_debugCrazyBtn = c_invalidDialogControlId;
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_debugRerollBtn = c_invalidDialogControlId;
    libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_countdownTimer = TimerCreate();
    libPVEU_gv_pvEUIBossPanel.lv_pvEUIBossPanel_MainPanel = c_invalidDialogControlId;
    libPVEU_gv_pvEUIBossPanel.lv_pvEUIBossPanel_Label = c_invalidDialogControlId;
    libPVEU_gv_pvEUIBossPanel.lv_pvEUIBossPanel_UnitBar = c_invalidDialogControlId;
    libPVEU_gv_pvEUIDirectivePanel.lv_mainPanel = c_invalidDialogControlId;
    libPVEU_gv_pvEUIDirectivePanel.lv_directiveTextFrame = c_invalidDialogControlId;
    libPVEU_gv_pvEUIDirectivePanel.lv_directiveTitleLabel = c_invalidDialogControlId;
    libPVEU_gv_pvEUIDirectivePanel.lv_directiveDescriptionLabel = c_invalidDialogControlId;
    libPVEU_gv_pvEUIDirectivePanel.lv_mainPanelSmall = c_invalidDialogControlId;
    libPVEU_gv_pvEUIDirectivePanel.lv_directiveTextFrameSmall = c_invalidDialogControlId;
    libPVEU_gv_pvEUIDirectivePanel.lv_directiveTitleLabelSmall = c_invalidDialogControlId;
    libPVEU_gv_pvEUIDirectivePanel.lv_directiveDescriptionLabelSmall = c_invalidDialogControlId;
    libPVEU_gv_pvEUITopBar.lv_mainPanel = c_invalidDialogControlId;
    libPVEU_gv_pvEUITopBar.lv_topBarBackingImage = c_invalidDialogControlId;
    libPVEU_gv_pvEUITopBar.lv_teamLevelInfoPanel = c_invalidDialogControlId;
    libPVEU_gv_pvEUITopBar.lv_gameTimerLabel = c_invalidDialogControlId;
    libPVEU_gv_pvEUITopBar.lv_teamLevelLabelPanel = c_invalidDialogControlId;
    libPVEU_gv_pvEUITabScreenPanel.lv_pvEUITabScreen_MainPanel = c_invalidDialogControlId;
    libPVEU_gv_pvEUITabScreenPanel.lv_pvEUITabScreen_TabControl = c_invalidDialogControlId;
    libPVEU_gv_pvEUITabScreenPanel.lv_pvEUITabScreen_TimeRunSubPanel = c_invalidDialogControlId;
    libPVEU_gv_pvEUITabScreenPanel.lv_pvEUITabScreen_CurrentTimeLabel = c_invalidDialogControlId;
    libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_VictoryLabel = c_invalidDialogControlId;
    libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_VictoryLabelGlow = c_invalidDialogControlId;
    libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_ResultNameLabel = c_invalidDialogControlId;
    libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_ResultLabel = c_invalidDialogControlId;
    libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_DefeatLabel = c_invalidDialogControlId;
    libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_DefeatLabelGlow = c_invalidDialogControlId;
    libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_DefeatReason = c_invalidDialogControlId;
}

// Presets
// Functions
void libPVEU_gf_PvEUICurateHSUIInitialize () {
    int init_i;

    // Variable Declarations
    int[11] lv_panels;
    int lv_currentPanelLayer;
    int lv_itPlayerSlot;
    int lv_itPlayer;
    int lv_itHero;
    int lv_itRound;
    int lv_itTeam;
    int lv_itHeroRow;
    int lv_itHeroCol;
    int lv_itViewer;
    playergroup lv_viewerGroup;
    int lv_playerCount;

    // Automatic Variable Declarations
    playergroup autoB913094D_g;
    playergroup auto3BE11115_g;
    const int auto5F3DE46F_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto5F3DE46F_ai = 1;
    playergroup auto441DA8A2_g;
    playergroup auto186361F4_g;
    const int auto327C7A23_ae = libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountRow_C;
    const int auto327C7A23_ai = 1;
    const int autoEC035DB0_ae = libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountCol_C;
    const int autoEC035DB0_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }
    lv_viewerGroup = PlayerGroupEmpty();

    // Implementation
    if ((libPVEU_gv_pvEUICurateHeroSelectionUI.lv_dialog != c_invalidDialogId)) {
        return ;
    }

    if ((libPVEU_gv_pvEUICurateHeroSelectionUIHeroListInitCallback != null)) {
        TriggerExecute(libPVEU_gv_pvEUICurateHeroSelectionUIHeroListInitCallback, true, false);
    }

    lv_playerCount = 0;
    autoB913094D_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoB913094D_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
            lv_playerCount += 1;
        }

    }
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_dialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "PVECurateHeroSelection/CurateHeroSelectionPanelTemplate");
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_mainPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "MapNameLabel");
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_titleLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "SelectedHeroInfo");
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_selectedHeroPanel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "SelectedHeroName");
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_selectedHeroName = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_PVEU_7ECB10C8"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "SelectedHeroRole");
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_selectedHeroRole = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CountdownLabel");
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_countdownLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "RoundStartCountdownFrame");
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_finalCountdownFrame = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "AbilitiesButton");
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_abilitiesInfoButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "TalentsButton");
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_talentsInfoButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "InfoButton");
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_brawlInfoButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "ReadyButton");
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_lockButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    auto3BE11115_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto3BE11115_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeHeroCutscene, libNtve_gf_ConvertStringToUILayoutFrameName(("HeroCutsceneFrame" + IntToString((lv_itPlayer - 1)))));
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroCutsceneFrame[lv_itPlayer] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeHeroContainer, libNtve_gf_ConvertStringToUILayoutFrameName(("SelectedHero" + IntToString((lv_itPlayer - 1)))));
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroContainerFrame[lv_itPlayer] = DialogControlLastCreated();
    }
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TeamPanel");
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_pickHeroPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    lv_itPlayerSlot = 1;
    for ( ; ( (auto5F3DE46F_ai >= 0 && lv_itPlayerSlot <= auto5F3DE46F_ae) || (auto5F3DE46F_ai < 0 && lv_itPlayerSlot >= auto5F3DE46F_ae) ) ; lv_itPlayerSlot += auto5F3DE46F_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("TeamPlayerName" + IntToString(lv_itPlayerSlot))));
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroPlayerName[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("TeamHeroName" + IntToString(lv_itPlayerSlot))));
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroHeroName[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("TeamPlayerHero" + IntToString(lv_itPlayerSlot))));
        if ((lv_itPlayerSlot > lv_playerCount)) {
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            continue;
        }

        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroFrame[lv_itPlayerSlot] = DialogControlLastCreated();
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroHeroName[lv_itPlayerSlot], StringToText(""), PlayerGroupAll());
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "EmptyImage");
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroEmpty[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroImage");
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroImage[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "NormalImage");
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroBorder[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LockedImage");
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroLocked[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LockedImageAnimation");
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroLockedAnimation[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroRole");
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroRole[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroRoleBG");
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroRoleBG[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "SelectedImageAlly");
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroSelectedAlly[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ThinkingContainer");
        libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroThinking[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lv_currentPanelLayer -= 1;
    }
    lv_viewerGroup = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    PlayerGroupAdd(lv_viewerGroup, libCore_gv_oBSERVER_ObserverUIPlayer);
    auto441DA8A2_g = lv_viewerGroup;
    lv_itViewer = -1;
    while (true) {
        	lv_itViewer = PlayerGroupNextPlayer(auto441DA8A2_g, lv_itViewer);
        	if (lv_itViewer<0) { break; }
        	lv_itPlayerSlot = 0;
        if ((PlayerGroupHasPlayer(libPVEM_gf_PvEPlayersOnHumanTeam(false), lv_itViewer) == true)) {
            lv_itPlayerSlot += 1;
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamPanelRowPlayer[lv_itViewer][lv_itPlayerSlot] = lv_itViewer;
            libNtve_gf_SetDialogItemText(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroPlayerName[lv_itPlayerSlot], PlayerName(lv_itViewer), libCore_gv_playerGroupFromPlayer[lv_itViewer]);
            DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroBorder[lv_itPlayerSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
            DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroPlayerName[lv_itPlayerSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
            DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroHeroName[lv_itPlayerSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
        }

        auto186361F4_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
        lv_itPlayer = -1;
        while (true) {
            	lv_itPlayer = PlayerGroupNextPlayer(auto186361F4_g, lv_itPlayer);
            	if (lv_itPlayer<0) { break; }
            	if ((lv_itPlayer != lv_itViewer) && (PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
                lv_itPlayerSlot += 1;
                libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamPanelRowPlayer[lv_itViewer][lv_itPlayerSlot] = lv_itPlayer;
                libNtve_gf_SetDialogItemText(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroPlayerName[lv_itPlayerSlot], PlayerName(lv_itPlayer), libCore_gv_playerGroupFromPlayer[lv_itViewer]);
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroBorder[lv_itPlayerSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroPlayerName[lv_itPlayerSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroHeroName[lv_itPlayerSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
            }

        }
    }
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PickHeroFrame");
    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_pickHeroPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Role1Label");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libPVEU_gf_PvEUICurateHSUIHeroRoleName(1), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Role2Label");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libPVEU_gf_PvEUICurateHSUIHeroRoleName(2), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Role3Label");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libPVEU_gf_PvEUICurateHSUIHeroRoleName(3), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Role4Label");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libPVEU_gf_PvEUICurateHSUIHeroRoleName(4), PlayerGroupAll());
    lv_itHeroRow = 1;
    for ( ; ( (auto327C7A23_ai >= 0 && lv_itHeroRow <= auto327C7A23_ae) || (auto327C7A23_ai < 0 && lv_itHeroRow >= auto327C7A23_ae) ) ; lv_itHeroRow += auto327C7A23_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("RoleHeroSelectionPanel" + IntToString(lv_itHeroRow))));
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        lv_itHeroCol = 1;
        for ( ; ( (autoEC035DB0_ai >= 0 && lv_itHeroCol <= autoEC035DB0_ae) || (autoEC035DB0_ai < 0 && lv_itHeroCol >= autoEC035DB0_ae) ) ; lv_itHeroCol += autoEC035DB0_ai ) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("RoleHero" + IntToString(lv_itHeroCol))));
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtons[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroImage");
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonImages[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "NormalImage");
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBorders[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "EmptyImage");
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersEmpty[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "SelectedImage1");
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByMe1[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "SelectedImage2");
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByMe2[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "SelectedImage3");
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByMe3[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "SelectedImageAlly1");
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByAlly1[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "SelectedImageAlly2");
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByAlly2[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LockedImage1");
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByMe1[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LockedImage2");
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByMe2[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LockedImageAlly1");
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByAlly1[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LockedImageAlly2");
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByAlly2[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ThinkingContainer");
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersThinking[lv_itHeroRow][lv_itHeroCol] = DialogControlLastCreated();
            if ((libPVEU_gv_pvEUICurateHeroSelections[lv_itHeroRow][lv_itHeroCol] != null)) {
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersEmpty[lv_itHeroRow][lv_itHeroCol], PlayerGroupAll(), false);
                libNtve_gf_SetDialogItemImage(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonImages[lv_itHeroRow][lv_itHeroCol], (CatalogFieldValueGet(c_gameCatalogHero, libPVEU_gv_pvEUICurateHeroSelections[lv_itHeroRow][lv_itHeroCol], "SelectScreenButtonImage", c_playerAny)), PlayerGroupAll());
            }
            else {
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBorders[lv_itHeroRow][lv_itHeroCol], PlayerGroupAll(), false);
                DialogControlFadeTransparency(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBorders[lv_itHeroRow][lv_itHeroCol], PlayerGroupAll(), 0.0, 100.0);
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonImages[lv_itHeroRow][lv_itHeroCol], PlayerGroupAll(), false);
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersEmpty[lv_itHeroRow][lv_itHeroCol], PlayerGroupAll(), true);
                libPVEU_gf_PvEUICurateHSUIEnableDisableHeroButton(false, lv_itHeroRow, lv_itHeroCol, PlayerGroupAll(), false);
            }
            lv_currentPanelLayer -= 1;
        }
        lv_currentPanelLayer -= 1;
    }
    lv_currentPanelLayer -= 1;
}

trigger auto_libPVEU_gf_PvEUICurateHSUIUpdateTimerUI_Trigger = null;

void libPVEU_gf_PvEUICurateHSUIUpdateTimerUI () {
    if (auto_libPVEU_gf_PvEUICurateHSUIUpdateTimerUI_Trigger == null) {
        auto_libPVEU_gf_PvEUICurateHSUIUpdateTimerUI_Trigger = TriggerCreate("auto_libPVEU_gf_PvEUICurateHSUIUpdateTimerUI_TriggerFunc");
    }

    TriggerExecute(auto_libPVEU_gf_PvEUICurateHSUIUpdateTimerUI_Trigger, false, false);
}

bool auto_libPVEU_gf_PvEUICurateHSUIUpdateTimerUI_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_remaingTime;
    bool lv__10SecondReminderPlayed;
    bool lv__5SecondReminderPlayed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (true) {
        lv_remaingTime = TimerGetRemaining(libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_countdownTimer);
        libNtve_gf_SetDialogItemText(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_countdownLabel, TextTimeFormat(StringToText("<sectotal/>"), FixedToInt(TimerGetRemaining(libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_countdownTimer))), PlayerGroupAll());
        if ((lv_remaingTime < 11.0) && (TimerIsPaused(libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_countdownTimer) == false) && (lv__10SecondReminderPlayed == false)) {
            lv__10SecondReminderPlayed = true;
            SoundPlayForPlayer(SoundLink("UI_BNet_Draft_Countdown_10Sec", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }

        if ((lv_remaingTime < 6.0) && (TimerIsPaused(libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_countdownTimer) == false) && (lv__5SecondReminderPlayed == false)) {
            lv__5SecondReminderPlayed = true;
            libNtve_gf_SetDialogItemStyle(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_countdownLabel, "CurateHeroSelection_CountdownLabelWarning", PlayerGroupAll());
        }

        if ((lv_remaingTime <= 0.0)) {
            return true;
        }

        Wait(0.5, c_timeGame);
    }
    return true;
}

void libPVEU_gf_PvEUIDisplayCurateHSUI () {
    // Variable Declarations
    int lv_itPlayer2;
    bool lv_ready;
    int lv_itCount;
    sound lv_crowdSound;
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libGame_gv_heroPickDone = false;
    SetHeroLeaderPanelEnabled(false);
    DialogControlSetVisible(libUIUI_gv_uIObserverUI.lv_mainPanel, PlayerGroupAll(), false);
    DialogControlFadeTransparency(libUIUI_gv_uIObserverUI.lv_mainPanel, PlayerGroupAll(), 0.0, 100.0);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    UISetWorldVisible(PlayerGroupAll(), false);
    libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("MX_Brawl_LockIn", PlayerGroupAll());
    libPVEU_gf_PvEUICurateHSUIInitialize();
    libPVEU_gf_PvEUICurateHSUIUpdateHeroButtons();
    DialogSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_dialog, PlayerGroupAll(), true);
    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_pickHeroPanel, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_titleLabel, GameMapName(), PlayerGroupAll());
    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_countdownLabel, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemStyle(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_countdownLabel, "CurateHeroSelection_CountdownLabel", PlayerGroupAll());
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Storm_Ambience_Tutorial_Nexus_Platform", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundPlayForPlayer(SoundLink("UI_BNet_Draft_Countdown_Start", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerEnable(libPVEU_gt_PvEUICurateHSUIButtonClicked, true);
    TriggerEnable(libPVEU_gt_PvEUICurateHSUICountdownTimerExpires, true);
    TimerStart(libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_countdownTimer, libPVEU_gv_pvEUICurateHeroSelectionUIMaxDuration_C, false, c_timeGame);
    libPVEU_gf_PvEUICurateHSUIUpdateTimerUI();
}

void libPVEU_gf_PvEUICurateHSUIEnableDisableHeroButton (bool lp_enableDisable, int lp_row, int lp_column, playergroup lp_forPlayers, bool lp_desaturated) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetEnabled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtons[lp_row][lp_column], lp_forPlayers, lp_enableDisable);
    if ((lp_enableDisable == true)) {
        libNtve_gf_SetDialogItemDesaturated(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonImages[lp_row][lp_column], false, lp_forPlayers);
    }
    else {
        if ((lp_desaturated == true)) {
            libNtve_gf_SetDialogItemDesaturated(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonImages[lp_row][lp_column], true, lp_forPlayers);
            libNtve_gf_SetDialogItemDesaturationColor(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonImages[lp_row][lp_column], Color(78.43, 78.43, 78.43), lp_forPlayers);
        }
        else {
            libNtve_gf_SetDialogItemDesaturated(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonImages[lp_row][lp_column], false, lp_forPlayers);
        }
    }
}

void libPVEU_gf_PvEUICurateHSUILockUnlockHeroChoice (int lp_player, bool lp_lockUnlock) {
    // Variable Declarations
    playergroup lv_teamMembers;
    int lv_itPlayer;
    int lv_itRow;
    int lv_itCol;
    int lv_pick;
    int lv_displayColumn;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_teamMembers = libPVEM_gf_PvEPlayersOnTeam(libGame_gf_TeamNumberOfPlayer(lp_player), false);
    if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_finalCountDownStarted == true)) {
        return ;
    }

    if ((lp_lockUnlock == true) && (libPVEU_gf_PvEUICurateHSUIGoodToLockIn(lp_player) == false)) {
        return ;
    }

    libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lp_player] = lp_lockUnlock;
    if ((lp_lockUnlock == true)) {
        libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroRow[lp_player] = libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lp_player];
        libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroCol[lp_player] = libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lp_player];
    }

    libPVEU_gf_PvEUICurateHSUIUpdateHeroButtons();
    if ((lp_lockUnlock == true)) {
        libNtve_gf_SetDialogItemText(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_lockButton, StringExternal("Param/Value/lib_PVEU_141A0695"), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
        libNtve_gf_SetDialogItemText(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_lockButton, StringExternal("Param/Value/lib_PVEU_EF50A62E"), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    if ((lp_lockUnlock == true) && (libPVEU_gf_PvEUICurateHSUIAllPlayersLockedIn() == true)) {
        TriggerExecute(libPVEU_gt_PvEUICurateHSUICountdownTimerExpires, true, false);
        return ;
    }

}

void libPVEU_gf_PvEUICurateHSUILockUI () {
    // Variable Declarations
    int lv_itRow;
    int lv_itCol;

    // Automatic Variable Declarations
    const int autoAD0BA051_ae = libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountRow_C;
    const int autoAD0BA051_ai = 1;
    const int autoB230B47F_ae = libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountCol_C;
    const int autoB230B47F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itRow = 1;
    for ( ; ( (autoAD0BA051_ai >= 0 && lv_itRow <= autoAD0BA051_ae) || (autoAD0BA051_ai < 0 && lv_itRow >= autoAD0BA051_ae) ) ; lv_itRow += autoAD0BA051_ai ) {
        lv_itCol = 1;
        for ( ; ( (autoB230B47F_ai >= 0 && lv_itCol <= autoB230B47F_ae) || (autoB230B47F_ai < 0 && lv_itCol >= autoB230B47F_ae) ) ; lv_itCol += autoB230B47F_ai ) {
            DialogControlSetEnabled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtons[lv_itRow][lv_itCol], PlayerGroupAll(), false);
        }
    }
    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_lockButton, PlayerGroupAll(), false);
}

bool libPVEU_gf_PvEUICurateHSUIAllPlayersLockedIn () {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int autoA4A04CDB_ae = libCore_gv_bALMaxPlayers;
    const int autoA4A04CDB_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itPlayer = 1;
    for ( ; ( (autoA4A04CDB_ai >= 0 && lv_itPlayer <= autoA4A04CDB_ae) || (autoA4A04CDB_ai < 0 && lv_itPlayer >= autoA4A04CDB_ae) ) ; lv_itPlayer += autoA4A04CDB_ai ) {
        if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused) && (PlayerType(lv_itPlayer) == c_playerTypeUser) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == false)) {
            return false;
        }

    }
    return true;
}

text libPVEU_gf_PvEUICurateHSUIHeroRoleName (int lp_heroRow) {
    // Automatic Variable Declarations
    int auto352DA0AD_val;

    // Implementation
    auto352DA0AD_val = lp_heroRow;
    if (auto352DA0AD_val == (libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Warrior)) {
        return StringExternal("Param/Value/lib_PVEU_378B2EE2");
    }
    else if (auto352DA0AD_val == (libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Support)) {
        return StringExternal("Param/Value/lib_PVEU_70744104");
    }
    else if (auto352DA0AD_val == (libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Specialist)) {
        return StringExternal("Param/Value/lib_PVEU_6F9C3187");
    }
    else if (auto352DA0AD_val == (libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Assassin1)) {
        return StringExternal("Param/Value/lib_PVEU_CF0466F2");
    }
    else if (auto352DA0AD_val == (libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Assassin2)) {
        return StringExternal("Param/Value/lib_PVEU_5C2BAA42");
    }
    else {
    }
    return StringExternal("Param/Value/lib_PVEU_715469CD");
}

string libPVEU_gf_PvEUICurateHSUIHeroRoleIcon (int lp_heroRow) {
    // Automatic Variable Declarations
    int autoF55B7A22_val;

    // Implementation
    autoF55B7A22_val = lp_heroRow;
    if (autoF55B7A22_val == (libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Warrior)) {
        return "Assets\\Textures\\storm_ui_play_randomhero_button_icon_active_warrior.dds";
    }
    else if (autoF55B7A22_val == (libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Support)) {
        return "Assets\\Textures\\storm_ui_play_randomhero_button_icon_active_support.dds";
    }
    else if (autoF55B7A22_val == (libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Specialist)) {
        return "Assets\\Textures\\storm_ui_play_randomhero_button_icon_active_specialist.dds";
    }
    else if (autoF55B7A22_val == (libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Assassin1)) {
        return "Assets\\Textures\\storm_ui_play_randomhero_button_icon_active_assassin.dds";
    }
    else if (autoF55B7A22_val == (libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Assassin2)) {
        return "Assets\\Textures\\storm_ui_play_randomhero_button_icon_active_assassin.dds";
    }
    else {
    }
    return null;
}

void libPVEU_gf_PvEUICurateHSUISelectHeroforPlayer (int lp_player, int lp_heroRow, int lp_heroCol) {
    // Variable Declarations
    string lv_selectedHero;
    playergroup lv_teamMembers;
    int lv_itViewer;
    int lv_itPlayer;
    int lv_itRow;
    int lv_itCol;
    int lv_pick;
    int lv_displayColumn;

    // Automatic Variable Declarations
    playergroup auto73CB205E_g;

    // Variable Initialization

    // Implementation
    if ((((lp_player >= 1) && (lp_player <= libCore_gv_bALMaxPlayers)) == false)) {
        return ;
    }

    if ((lp_heroCol == libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lp_player]) && (lp_heroRow == libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lp_player])) {
        return ;
    }

    lv_selectedHero = libPVEU_gv_pvEUICurateHeroSelections[lp_heroRow][lp_heroCol];
    if ((lv_selectedHero == null)) {
        return ;
    }

    auto73CB205E_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto73CB205E_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((lv_itPlayer != lp_player) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer] == lp_heroRow) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer] == lp_heroCol)) {
            return ;
        }

    }
    if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lp_player] == true)) {
        return ;
    }

    SoundPlayForPlayer(SoundLink("UI_BNet_HeroChoose", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
    libGame_gv_players[lp_player].lv_heroIndex = libCore_gf_GetIndexFromHero(lv_selectedHero);
    libCore_gf_DataClearHeroDataAtIndex(lp_player);
    libCore_gf_DataLoadHeroDataIntoIndex(lv_selectedHero, lp_player);
    lv_teamMembers = libPVEM_gf_PvEPlayersOnTeam(libGame_gf_TeamNumberOfPlayer(lp_player), false);
    PlayerGroupAdd(lv_teamMembers, libCore_gv_oBSERVER_ObserverUIPlayer);
    libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lp_player] = lp_heroRow;
    libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lp_player] = lp_heroCol;
    libPVEU_gf_PvEUICurateHSUIUpdateHeroButtons();
    libNtve_gf_SetDialogItemText(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_selectedHeroName, StringExternal(CatalogFieldValueGet(c_gameCatalogHero, lv_selectedHero, "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_selectedHeroRole, libPVEU_gf_PvEUICurateHSUIHeroRoleName(lp_heroRow), libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_selectedHeroPanel, libCore_gv_playerGroupFromPlayer[lp_player], true);
    if ((lp_heroRow > 0) && (lp_heroCol > 0)) {
        libNtve_gf_SetDialogItemHeroLink(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroContainerFrame[1], lv_selectedHero, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlSetEnabled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_abilitiesInfoButton, libCore_gv_playerGroupFromPlayer[lp_player], true);
        DialogControlSetEnabled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_talentsInfoButton, libCore_gv_playerGroupFromPlayer[lp_player], true);
    }

    if ((libPVEU_gf_PvEUICurateHSUIGoodToLockIn(lp_player) == true)) {
        DialogControlSetEnabled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_lockButton, libCore_gv_playerGroupFromPlayer[lp_player], true);
    }
    else {
        DialogControlSetEnabled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_lockButton, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
}

void libPVEU_gf_PvEUICurateHSUIUpdateHeroButtons () {
    // Variable Declarations
    playergroup lv_teamMembers;
    int lv_itViewer;
    int lv_itPlayer;
    int lv_itRow;
    int lv_itCol;
    int lv_cellState;

    // Automatic Variable Declarations
    playergroup auto3F017018_g;
    const int auto58A5D085_ae = libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountRow_C;
    const int auto58A5D085_ai = 1;
    const int auto56792D0E_ae = libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountCol_C;
    const int auto56792D0E_ai = 1;
    playergroup autoBD0B0C1E_g;
    playergroup autoE6F41344_g;
    const int auto09B4B766_ae = libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountRow_C;
    const int auto09B4B766_ai = 1;
    const int auto6FE35D01_ae = libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountCol_C;
    const int auto6FE35D01_ai = 1;
    int autoE0B18181_val;

    // Variable Initialization

    // Implementation
    lv_teamMembers = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    PlayerGroupAdd(lv_teamMembers, libCore_gv_oBSERVER_ObserverUIPlayer);
    auto3F017018_g = lv_teamMembers;
    lv_itViewer = -1;
    while (true) {
        	lv_itViewer = PlayerGroupNextPlayer(auto3F017018_g, lv_itViewer);
        	if (lv_itViewer<0) { break; }
        	lv_itRow = 1;
        for ( ; ( (auto58A5D085_ai >= 0 && lv_itRow <= auto58A5D085_ae) || (auto58A5D085_ai < 0 && lv_itRow >= auto58A5D085_ae) ) ; lv_itRow += auto58A5D085_ai ) {
            lv_itCol = 1;
            for ( ; ( (auto56792D0E_ai >= 0 && lv_itCol <= auto56792D0E_ae) || (auto56792D0E_ai < 0 && lv_itCol >= auto56792D0E_ae) ) ; lv_itCol += auto56792D0E_ai ) {
                if ((libPVEU_gv_pvEUICurateHeroSelections[lv_itRow][lv_itCol] == null)) {
                    continue;
                }

                if ((libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByAllyVisible[lv_itViewer][lv_itRow][lv_itCol] == true)) {
                    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByAlly1[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByAlly2[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByAllyVisible[lv_itViewer][lv_itRow][lv_itCol] = false;
                }

                if ((libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByMeVisible[lv_itViewer][lv_itRow][lv_itCol] == true)) {
                    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByMe1[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByMe2[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByMeVisible[lv_itViewer][lv_itRow][lv_itCol] = false;
                }

                if ((libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByAllyVisible[lv_itViewer][lv_itRow][lv_itCol] == true)) {
                    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByAlly1[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByAlly2[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByAllyVisible[lv_itViewer][lv_itRow][lv_itCol] = false;
                }

                if ((libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByMeVisible[lv_itViewer][lv_itRow][lv_itCol] == true)) {
                    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByMe1[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByMe2[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByMe3[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByMeVisible[lv_itViewer][lv_itRow][lv_itCol] = false;
                }

                if ((libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersThinkingVisible[lv_itViewer][lv_itRow][lv_itCol] == true)) {
                    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersThinking[lv_itRow][lv_itCol], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersThinkingVisible[lv_itViewer][lv_itRow][lv_itCol] = false;
                }

            }
        }
        autoBD0B0C1E_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
        lv_itPlayer = -1;
        while (true) {
            	lv_itPlayer = PlayerGroupNextPlayer(autoBD0B0C1E_g, lv_itPlayer);
            	if (lv_itPlayer<0) { break; }
            	if (((lv_itPlayer == lv_itViewer))) {
                continue;
            }

            if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer] > 0) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer] > 0)) {
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByAlly1[libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByAlly2[libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByAllyVisible[lv_itViewer][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]] = true;
                if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == false)) {
                    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersThinking[libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                    libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersThinkingVisible[lv_itViewer][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]] = true;
                }

            }

        }
        autoE6F41344_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
        lv_itPlayer = -1;
        while (true) {
            	lv_itPlayer = PlayerGroupNextPlayer(autoE6F41344_g, lv_itPlayer);
            	if (lv_itPlayer<0) { break; }
            	if (((lv_itPlayer == lv_itViewer) || (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == false))) {
                continue;
            }

            if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] > 0) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroCol[lv_itPlayer] > 0)) {
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByAlly1[libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroRow[lv_itPlayer]][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroCol[lv_itPlayer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByAlly2[libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroRow[lv_itPlayer]][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroCol[lv_itPlayer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByAllyVisible[lv_itViewer][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroRow[lv_itPlayer]][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroCol[lv_itPlayer]] = true;
            }

        }
        if ((PlayerGroupHasPlayer(libPVEM_gf_PvEPlayersOnHumanTeam(false), lv_itViewer) == true) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lv_itViewer] > 0) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lv_itViewer] > 0)) {
            DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByMe1[libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lv_itViewer]][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lv_itViewer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
            DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByMe2[libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lv_itViewer]][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lv_itViewer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
            DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByMe3[libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lv_itViewer]][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lv_itViewer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersSelectedByMeVisible[lv_itViewer][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lv_itViewer]][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lv_itViewer]] = true;
        }

        if ((PlayerGroupHasPlayer(libPVEM_gf_PvEPlayersOnHumanTeam(false), lv_itViewer) == true) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itViewer] == true) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroRow[lv_itViewer] > 0) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroCol[lv_itViewer] > 0)) {
            DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByMe1[libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroRow[lv_itViewer]][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroCol[lv_itViewer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
            DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByMe2[libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroRow[lv_itViewer]][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroCol[lv_itViewer]], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
            libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtonBordersLockedByMeVisible[lv_itViewer][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroRow[lv_itViewer]][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroCol[lv_itViewer]] = true;
        }

        lv_itRow = 1;
        for ( ; ( (auto09B4B766_ai >= 0 && lv_itRow <= auto09B4B766_ae) || (auto09B4B766_ai < 0 && lv_itRow >= auto09B4B766_ae) ) ; lv_itRow += auto09B4B766_ai ) {
            lv_itCol = 1;
            for ( ; ( (auto6FE35D01_ai >= 0 && lv_itCol <= auto6FE35D01_ae) || (auto6FE35D01_ai < 0 && lv_itCol >= auto6FE35D01_ae) ) ; lv_itCol += auto6FE35D01_ai ) {
                if ((libPVEU_gv_pvEUICurateHeroSelections[lv_itRow][lv_itCol] == null)) {
                    continue;
                }

                lv_cellState = libPVEU_gf_PvEUICurateHSUIGetCellState(lv_itViewer, lv_itRow, lv_itCol);
                autoE0B18181_val = lv_cellState;
                if (autoE0B18181_val == libPVEU_ge_PvEUICurateHeroSelectionCellState_PvEUICurateHeroSelectionCellState_LockedByMe) {
                    libPVEU_gf_PvEUICurateHSUIEnableDisableHeroButton(true, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                }
                else if (autoE0B18181_val == libPVEU_ge_PvEUICurateHeroSelectionCellState_PvEUICurateHeroSelectionCellState_LockedByOther) {
                    libPVEU_gf_PvEUICurateHSUIEnableDisableHeroButton(false, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                }
                else if (autoE0B18181_val == libPVEU_ge_PvEUICurateHeroSelectionCellState_PvEUICurateHeroSelectionCellState_SelectedByMe) {
                    libPVEU_gf_PvEUICurateHSUIEnableDisableHeroButton(true, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                }
                else if (autoE0B18181_val == libPVEU_ge_PvEUICurateHeroSelectionCellState_PvEUICurateHeroSelectionCellState_SelectedByOther) {
                    libPVEU_gf_PvEUICurateHSUIEnableDisableHeroButton(false, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                }
                else if (autoE0B18181_val == libPVEU_ge_PvEUICurateHeroSelectionCellState_PvEUICurateHeroSelectionCellState_Normal) {
                    if ((PlayerGroupHasPlayer(libPVEM_gf_PvEPlayersOnHumanTeam(false), lv_itViewer) == true) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itViewer] == true)) {
                        libPVEU_gf_PvEUICurateHSUIEnableDisableHeroButton(false, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                    }
                    else {
                        libPVEU_gf_PvEUICurateHSUIEnableDisableHeroButton(true, lv_itRow, lv_itCol, libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                    }
                }
                else {
                }
            }
        }
    }
    libPVEU_gf_PvEUICurateHSUIUpdateTeamPanel();
}

void libPVEU_gf_PvEUICurateHSUIUpdateTeamPanel () {
    // Variable Declarations
    playergroup lv_viewerGroup;
    int lv_itViewer;
    int lv_itPlayer;
    int lv_itSlot;
    int lv_itCol;

    // Automatic Variable Declarations
    playergroup autoF73A6F29_g;
    const int auto29B13E6F_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto29B13E6F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_viewerGroup = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    PlayerGroupAdd(lv_viewerGroup, libCore_gv_oBSERVER_ObserverUIPlayer);
    autoF73A6F29_g = lv_viewerGroup;
    lv_itViewer = -1;
    while (true) {
        	lv_itViewer = PlayerGroupNextPlayer(autoF73A6F29_g, lv_itViewer);
        	if (lv_itViewer<0) { break; }
        	lv_itSlot = 1;
        for ( ; ( (auto29B13E6F_ai >= 0 && lv_itSlot <= auto29B13E6F_ae) || (auto29B13E6F_ai < 0 && lv_itSlot >= auto29B13E6F_ae) ) ; lv_itSlot += auto29B13E6F_ai ) {
            lv_itPlayer = libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamPanelRowPlayer[lv_itViewer][lv_itSlot];
            if ((lv_itPlayer <= 0)) {
                continue;
            }

            if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer] > 0) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer] > 0)) {
                libNtve_gf_SetDialogItemImage(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroImage[lv_itSlot], (CatalogFieldValueGet(c_gameCatalogHero, libPVEU_gv_pvEUICurateHeroSelections[libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], "SelectScreenButtonImage", c_playerAny)), libCore_gv_playerGroupFromPlayer[lv_itViewer]);
                libNtve_gf_SetDialogItemText(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroHeroName[lv_itSlot], StringExternal(CatalogFieldValueGet(c_gameCatalogHero, libPVEU_gv_pvEUICurateHeroSelections[libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer]], "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lv_itViewer]);
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroHeroName[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroEmpty[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroImage[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroBorder[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == false)) {
                    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroThinking[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                }
                else {
                    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroThinking[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                }
                if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == false) && (lv_itViewer != lv_itPlayer)) {
                    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroSelectedAlly[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                }
                else {
                    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroSelectedAlly[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                }
                libNtve_gf_SetDialogItemImage(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroRole[lv_itSlot], libPVEU_gf_PvEUICurateHSUIHeroRoleIcon(libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer]), libCore_gv_playerGroupFromPlayer[lv_itViewer]);
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroRole[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroRoleBG[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
            }

            if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == true)) {
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroLocked[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroLockedAnimation[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
            }
            else {
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroLocked[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_teamHeroLockedAnimation[lv_itSlot], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
            }
        }
    }
}

bool libPVEU_gf_PvEUICurateHSUIGoodToLockIn (int lp_player) {
    // Variable Declarations
    int lv_itOtherPlayer;

    // Automatic Variable Declarations
    playergroup auto563EFF43_g;

    // Variable Initialization

    // Implementation
    if ((PlayerGroupHasPlayer(libPVEM_gf_PvEPlayersOnHumanTeam(false), lp_player) == false)) {
        return false;
    }

    if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lp_player] == true)) {
        return false;
    }

    if (((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lp_player] <= 0) || (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lp_player] <= 0))) {
        return false;
    }

    auto563EFF43_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_itOtherPlayer = -1;
    while (true) {
        	lv_itOtherPlayer = PlayerGroupNextPlayer(auto563EFF43_g, lv_itOtherPlayer);
        	if (lv_itOtherPlayer<0) { break; }
        	if (((lv_itOtherPlayer == lp_player) || (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itOtherPlayer] == false))) {
            continue;
        }

        if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lp_player] == libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroRow[lv_itOtherPlayer]) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lp_player] == libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroCol[lv_itOtherPlayer])) {
            return false;
        }

    }
    return true;
}

int libPVEU_gf_PvEUICurateHSUIGetCellState (int lp_viewer, int lp_row, int lp_col) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoE7DF2BA0_g;

    // Variable Initialization

    // Implementation
    if ((libPVEU_gv_pvEUICurateHeroSelections[lp_row][lp_col] == null)) {
        return libPVEU_ge_PvEUICurateHeroSelectionCellState_PvEUICurateHeroSelectionCellState_Empty;
    }

    autoE7DF2BA0_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoE7DF2BA0_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((lv_itPlayer == lp_viewer)) {
            if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == true) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] == lp_row) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroCol[lv_itPlayer] == lp_col)) {
                return libPVEU_ge_PvEUICurateHeroSelectionCellState_PvEUICurateHeroSelectionCellState_LockedByMe;
            }

            if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == false) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer] == lp_row) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer] == lp_col)) {
                return libPVEU_ge_PvEUICurateHeroSelectionCellState_PvEUICurateHeroSelectionCellState_SelectedByMe;
            }

        }
        else {
            if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == true) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] == lp_row) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroCol[lv_itPlayer] == lp_col)) {
                return libPVEU_ge_PvEUICurateHeroSelectionCellState_PvEUICurateHeroSelectionCellState_LockedByOther;
            }

            if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == false) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer] == lp_row) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer] == lp_col)) {
                return libPVEU_ge_PvEUICurateHeroSelectionCellState_PvEUICurateHeroSelectionCellState_SelectedByOther;
            }

        }
    }
    return libPVEU_ge_PvEUICurateHeroSelectionCellState_PvEUICurateHeroSelectionCellState_Normal;
}

void libPVEU_gf_PvEUICurateHSUIAutoPickHeroForPlayer (int lp_player) {
    // Variable Declarations
    bool lv_haveWarrior;
    bool lv_haveSupport;
    bool lv_haveSpecialist;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoE56338B9_g;
    playergroup auto41DA3AA0_g;
    playergroup auto8B289BEE_g;

    // Variable Initialization

    // Implementation
    lv_haveWarrior = false;
    autoE56338B9_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoE56338B9_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == true) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] == (libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Warrior))) {
            lv_haveWarrior = true;
            break;
        }

    }
    if ((lv_haveWarrior == false)) {
        libPVEU_gf_PvEUICurateHSUIAutoPickHeroOfRoleForPlayer(lp_player, libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Warrior);
        return ;
    }

    lv_haveSupport = false;
    auto41DA3AA0_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto41DA3AA0_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == true) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] == (libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Support))) {
            lv_haveSupport = true;
            break;
        }

    }
    if ((lv_haveSupport == false)) {
        libPVEU_gf_PvEUICurateHSUIAutoPickHeroOfRoleForPlayer(lp_player, libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Support);
        return ;
    }

    lv_haveSpecialist = false;
    auto8B289BEE_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto8B289BEE_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == true) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] == (libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Specialist))) {
            lv_haveSpecialist = true;
            break;
        }

    }
    if ((lv_haveSpecialist == false)) {
        libPVEU_gf_PvEUICurateHSUIAutoPickHeroOfRoleForPlayer(lp_player, libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Specialist);
        return ;
    }

    libPVEU_gf_PvEUICurateHSUIAutoPickHeroOfRoleForPlayer(lp_player, libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Assassin1);
}

void libPVEU_gf_PvEUICurateHSUIAutoPickHeroOfRoleForPlayer (int lp_player, int lp_role) {
    // Variable Declarations
    int[31] lv_roleHeroRow;
    int[31] lv_roleHeroCol;
    int lv_roleHeroCount;
    int lv_itPlayer;
    int lv_rowStart;
    int lv_rowEnd;
    int lv_itRow;
    int lv_itCol;
    bool lv_used;
    int lv_roleHeroRandomIndex;

    // Automatic Variable Declarations
    int autoCF06AF9D_ae;
    const int autoCF06AF9D_ai = 1;
    const int auto7BAB30AC_ae = libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountCol_C;
    const int auto7BAB30AC_ai = 1;

    // Variable Initialization

    // Implementation
    lv_rowStart = (lp_role);
    if ((lp_role == libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Assassin1)) {
        lv_rowEnd = (libPVEU_ge_PvEUICurateHeroSelectionRole_PvEUICurateHeroSelectionRole_Assassin2);
    }
    else {
        lv_rowEnd = lv_rowStart;
    }
    lv_roleHeroCount = 0;
    autoCF06AF9D_ae = lv_rowEnd;
    lv_itRow = lv_rowStart;
    for ( ; ( (autoCF06AF9D_ai >= 0 && lv_itRow <= autoCF06AF9D_ae) || (autoCF06AF9D_ai < 0 && lv_itRow >= autoCF06AF9D_ae) ) ; lv_itRow += autoCF06AF9D_ai ) {
        lv_itCol = 1;
        for ( ; ( (auto7BAB30AC_ai >= 0 && lv_itCol <= auto7BAB30AC_ae) || (auto7BAB30AC_ai < 0 && lv_itCol >= auto7BAB30AC_ae) ) ; lv_itCol += auto7BAB30AC_ai ) {
            if ((libPVEU_gv_pvEUICurateHeroSelections[lv_itRow][lv_itCol] == null)) {
                continue;
            }

            if (((libPVEU_gf_PvEUICurateHSUIHeroSelected(lv_itRow, lv_itCol) == true) || (libPVEU_gf_PvEUICurateHSUIHeroLocked(lv_itRow, lv_itCol) == true))) {
                continue;
            }

            lv_roleHeroCount += 1;
            lv_roleHeroRow[lv_roleHeroCount] = lv_itRow;
            lv_roleHeroCol[lv_roleHeroCount] = lv_itCol;
        }
    }
    if ((lv_roleHeroCount == 0)) {
        libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroRow[lp_player] = 0;
        libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroCol[lp_player] = 0;
        return ;
    }

    lv_roleHeroRandomIndex = RandomInt(1, lv_roleHeroCount);
    libPVEU_gf_PvEUICurateHSUISelectHeroforPlayer(lp_player, lv_roleHeroRow[lv_roleHeroRandomIndex], lv_roleHeroCol[lv_roleHeroRandomIndex]);
    libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroRow[lp_player] = lv_roleHeroRow[lv_roleHeroRandomIndex];
    libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroCol[lp_player] = lv_roleHeroCol[lv_roleHeroRandomIndex];
    libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lp_player] = true;
}

bool libPVEU_gf_PvEUICurateHSUIHeroLocked (int lp_row, int lp_column) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto42CC689B_g;

    // Variable Initialization

    // Implementation
    if ((lp_row <= 0) && (lp_column <= 0)) {
        return false;
    }

    auto42CC689B_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto42CC689B_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == true) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroRow[lv_itPlayer] == lp_row) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroCol[lv_itPlayer] == lp_column)) {
            return true;
        }

    }
    return false;
}

bool libPVEU_gf_PvEUICurateHSUIHeroSelected (int lp_row, int lp_column) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto73D15FB9_g;

    // Variable Initialization

    // Implementation
    if ((lp_row <= 0) && (lp_column <= 0)) {
        return false;
    }

    auto73D15FB9_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto73D15FB9_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer] == lp_row) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer] == lp_column)) {
            return true;
        }

    }
    return false;
}

void libPVEU_gf_PvEUICurateHSUIShowFinalCountDownHeroCutscene () {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoC9506B2F_g;

    // Variable Initialization

    // Implementation
    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_pickHeroPanel, PlayerGroupAll(), false);
    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_selectedHeroPanel, PlayerGroupAll(), false);
    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_abilitiesInfoButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_talentsInfoButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_brawlInfoButton, PlayerGroupAll(), false);
    autoC9506B2F_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoC9506B2F_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	libPVEU_gf_PvEUICurateHSUIShowHidePlayersHeroCutscene(lv_itPlayer, true);
    }
}

trigger auto_libPVEU_gf_PvEUICurateHSUIShowHidePlayersHeroCutscene_Trigger = null;
int auto_libPVEU_gf_PvEUICurateHSUIShowHidePlayersHeroCutscene_lp_player;
bool auto_libPVEU_gf_PvEUICurateHSUIShowHidePlayersHeroCutscene_lp_showHide;

void libPVEU_gf_PvEUICurateHSUIShowHidePlayersHeroCutscene (int lp_player, bool lp_showHide) {
    auto_libPVEU_gf_PvEUICurateHSUIShowHidePlayersHeroCutscene_lp_player = lp_player;
    auto_libPVEU_gf_PvEUICurateHSUIShowHidePlayersHeroCutscene_lp_showHide = lp_showHide;

    if (auto_libPVEU_gf_PvEUICurateHSUIShowHidePlayersHeroCutscene_Trigger == null) {
        auto_libPVEU_gf_PvEUICurateHSUIShowHidePlayersHeroCutscene_Trigger = TriggerCreate("auto_libPVEU_gf_PvEUICurateHSUIShowHidePlayersHeroCutscene_TriggerFunc");
    }

    TriggerExecute(auto_libPVEU_gf_PvEUICurateHSUIShowHidePlayersHeroCutscene_Trigger, false, false);
}

bool auto_libPVEU_gf_PvEUICurateHSUIShowHidePlayersHeroCutscene_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libPVEU_gf_PvEUICurateHSUIShowHidePlayersHeroCutscene_lp_player;
    bool lp_showHide = auto_libPVEU_gf_PvEUICurateHSUIShowHidePlayersHeroCutscene_lp_showHide;

    // Variable Declarations
    playergroup lv_teamMembers;
    int lv_itViewer;
    int lv_displayColumn;

    // Automatic Variable Declarations
    playergroup autoD7ADD9AE_g;

    // Variable Initialization

    // Implementation
    lv_teamMembers = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    if ((PlayerStatus(libCore_gv_oBSERVER_ObserverUIPlayer) != c_playerStatusUnused)) {
        PlayerGroupAdd(lv_teamMembers, libCore_gv_oBSERVER_ObserverUIPlayer);
    }

    autoD7ADD9AE_g = lv_teamMembers;
    lv_itViewer = -1;
    while (true) {
        	lv_itViewer = PlayerGroupNextPlayer(autoD7ADD9AE_g, lv_itViewer);
        	if (lv_itViewer<0) { break; }
        	lv_displayColumn = libPVEU_gf_PvEUICurateHSUIHeroPickDisplayColumn(lv_itViewer, lp_player);
        if ((lp_showHide == true)) {
            if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lp_player] == true) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroRow[lp_player] > 0) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroCol[lp_player] > 0)) {
                libNtve_gf_SetDialogItemHeroLink(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroContainerFrame[lv_displayColumn], libPVEU_gv_pvEUICurateHeroSelections[libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroRow[lp_player]][libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroCol[lp_player]], libCore_gv_playerGroupFromPlayer[lv_itViewer]);
                libNtve_gf_SetDialogItemSkinLink(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroContainerFrame[lv_displayColumn], PlayerSkin(lp_player), libCore_gv_playerGroupFromPlayer[lv_itViewer]);
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroCutsceneFrame[lv_displayColumn], libCore_gv_playerGroupFromPlayer[lv_itViewer], true);
            }
            else {
                DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroCutsceneFrame[lv_displayColumn], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
            }
        }
        else {
            DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroCutsceneFrame[lv_displayColumn], libCore_gv_playerGroupFromPlayer[lv_itViewer], false);
        }
    }
    return true;
}

int libPVEU_gf_PvEUICurateHSUIHeroPickDisplayColumn (int lp_viewerPlayer, int lp_subjectPlayer) {
    // Variable Declarations
    int lv_viewerSlot;
    int lv_subjectSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_viewerSlot = (ModI((libGame_gv_players[lp_viewerPlayer].lv_rosterSlot - 1), 5) + 1);
    lv_subjectSlot = (ModI((libGame_gv_players[lp_subjectPlayer].lv_rosterSlot - 1), 5) + 1);

    // Implementation
    if (((lp_viewerPlayer == libCore_gv_oBSERVER_ObserverUIPlayer) || (lv_viewerSlot < lv_subjectSlot))) {
        return lv_subjectSlot;
    }

    if ((lv_viewerSlot > lv_subjectSlot)) {
        return (lv_subjectSlot + 1);
    }

    return 1;
}

void libPVEU_gf_PvEUICurateHSUISetHeroSkinAndMountForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_DataClearHeroDataAtIndex(lp_player);
    libCore_gf_DataLoadHeroDataIntoIndex(libCore_gf_GetHeroFromIndex(libGame_gv_players[lp_player].lv_heroIndex), lp_player);
    libGame_gf_HeroSelectionRandomlyPickSkin(lp_player);
    libGame_gf_HeroSelectionRandomlyPickMount(lp_player);
}

void libPVEU_gf_PvEUICurateHSUIDebugMessage (text lp_message) {
    // Automatic Variable Declarations
    // Implementation
    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) {
        TriggerDebugOutput(1, lp_message, true);
    }

}

trigger auto_libPVEU_gf_DisplayBossPanel_Trigger = null;
unit auto_libPVEU_gf_DisplayBossPanel_lp_boss;

void libPVEU_gf_DisplayBossPanel (unit lp_boss) {
    auto_libPVEU_gf_DisplayBossPanel_lp_boss = lp_boss;

    if (auto_libPVEU_gf_DisplayBossPanel_Trigger == null) {
        auto_libPVEU_gf_DisplayBossPanel_Trigger = TriggerCreate("auto_libPVEU_gf_DisplayBossPanel_TriggerFunc");
    }

    TriggerExecute(auto_libPVEU_gf_DisplayBossPanel_Trigger, false, false);
}

bool auto_libPVEU_gf_DisplayBossPanel_TriggerFunc (bool testConds, bool runActions) {
    unit lp_boss = auto_libPVEU_gf_DisplayBossPanel_lp_boss;

    // Automatic Variable Declarations
    // Implementation
    if ((libPVEU_gv_pvEUIBossPanel.lv_pvEUIBossPanel_MainPanel == c_invalidDialogControlId)) {
        DialogControlHookup(libPVEU_gv_pvEMapPanel, c_triggerControlTypePanel, "BossFrame");
        libPVEU_gv_pvEUIBossPanel.lv_pvEUIBossPanel_MainPanel = DialogControlLastCreated();
        DialogControlHookup(libPVEU_gv_pvEUIBossPanel.lv_pvEUIBossPanel_MainPanel, c_triggerControlTypeLabel, "BossInfoLabel");
        libPVEU_gv_pvEUIBossPanel.lv_pvEUIBossPanel_Label = DialogControlLastCreated();
        DialogControlHookup(libPVEU_gv_pvEUIBossPanel.lv_pvEUIBossPanel_MainPanel, c_triggerControlTypeUnitStatus, "BossHealthBar");
        libPVEU_gv_pvEUIBossPanel.lv_pvEUIBossPanel_UnitBar = DialogControlLastCreated();
    }
    else {
        DialogControlSetVisible(libPVEU_gv_pvEUIBossPanel.lv_pvEUIBossPanel_MainPanel, PlayerGroupAll(), false);
    }
    TextExpressionSetToken("Param/Expression/lib_PVEU_97E073B1", "A", UnitGetName(lp_boss));
    libNtve_gf_SetDialogItemText(libPVEU_gv_pvEUIBossPanel.lv_pvEUIBossPanel_Label, TextExpressionAssemble("Param/Expression/lib_PVEU_97E073B1"), PlayerGroupAll());
    libNtve_gf_SetDialogItemUnit(libPVEU_gv_pvEUIBossPanel.lv_pvEUIBossPanel_UnitBar, lp_boss, PlayerGroupAll());
    DialogControlSetVisible(libPVEU_gv_pvEMapPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(libPVEU_gv_pvEUIBossPanel.lv_pvEUIBossPanel_MainPanel, PlayerGroupAll(), true);
    return true;
}

void libPVEU_gf_ShowHideBossPanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPVEU_gv_pvEUIBossPanel.lv_pvEUIBossPanel_MainPanel == c_invalidDialogControlId)) {
        return ;
    }

    DialogControlSetVisible(libPVEU_gv_pvEUIBossPanel.lv_pvEUIBossPanel_MainPanel, PlayerGroupAll(), lp_showHide);
}

trigger auto_libPVEU_gf_PvEUICreateDirectiveMessage_Trigger = null;
text auto_libPVEU_gf_PvEUICreateDirectiveMessage_lp_title;
text auto_libPVEU_gf_PvEUICreateDirectiveMessage_lp_description;
int auto_libPVEU_gf_PvEUICreateDirectiveMessage_lp_style;

void libPVEU_gf_PvEUICreateDirectiveMessage (text lp_title, text lp_description, int lp_style) {
    auto_libPVEU_gf_PvEUICreateDirectiveMessage_lp_title = lp_title;
    auto_libPVEU_gf_PvEUICreateDirectiveMessage_lp_description = lp_description;
    auto_libPVEU_gf_PvEUICreateDirectiveMessage_lp_style = lp_style;

    if (auto_libPVEU_gf_PvEUICreateDirectiveMessage_Trigger == null) {
        auto_libPVEU_gf_PvEUICreateDirectiveMessage_Trigger = TriggerCreate("auto_libPVEU_gf_PvEUICreateDirectiveMessage_TriggerFunc");
    }

    TriggerExecute(auto_libPVEU_gf_PvEUICreateDirectiveMessage_Trigger, false, false);
}

bool auto_libPVEU_gf_PvEUICreateDirectiveMessage_TriggerFunc (bool testConds, bool runActions) {
    text lp_title = auto_libPVEU_gf_PvEUICreateDirectiveMessage_lp_title;
    text lp_description = auto_libPVEU_gf_PvEUICreateDirectiveMessage_lp_description;
    int lp_style = auto_libPVEU_gf_PvEUICreateDirectiveMessage_lp_style;

    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    int auto6780A15E_val;

    // Variable Initialization

    // Implementation
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    libPVEU_gf_PvEUIDestroyCurrentDirectiveMessage();
    auto6780A15E_val = lp_style;
    if (auto6780A15E_val == libPVEU_ge_PvEUIDirectiveStyle_PvEUIDirectiveStyel_ObjectiveDiscovered) {
        SoundPlayForPlayer(SoundLink("UI_PvE_ObjectiveDiscovered", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (auto6780A15E_val == libPVEU_ge_PvEUIDirectiveStyle_PvEUIDirectiveStyel_ObjectiveCompleted) {
        SoundPlayForPlayer(SoundLink("UI_PvE_ObjectiveComplete", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (auto6780A15E_val == libPVEU_ge_PvEUIDirectiveStyle_PvEUIDirectiveStyel_ObjectiveFailed) {
        SoundPlayForPlayer(SoundLink("MX_TutorialVet_Failed", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (auto6780A15E_val == libPVEU_ge_PvEUIDirectiveStyle_PvEUIDirectiveStyel_ObjectiveUpdated) {
        SoundPlayForPlayer(SoundLink("UI_PvE_ObjectiveUpdated", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (auto6780A15E_val == libPVEU_ge_PvEUIDirectiveStyle_PvEUIDirectiveStyel_ObjectiveBegins) {
        SoundPlayForPlayer(SoundLink("UI_PvE_ObjectiveDiscovered", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
    libNtve_gf_SetDialogItemText(libPVEU_gv_pvEUIDirectivePanel.lv_directiveTitleLabel, lp_title, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libPVEU_gv_pvEUIDirectivePanel.lv_directiveDescriptionLabel, lp_description, PlayerGroupAll());
    TriggerExecute(libPVEU_gt_PvEUIDisplayDirectivePanelMessage, true, false);
    return true;
}

void libPVEU_gf_PvEUIDestroyCurrentDirectiveMessage () {
    // Automatic Variable Declarations
    // Implementation
    TriggerStop(libPVEU_gt_PvEUIDisplayDirectivePanelMessage);
    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_directiveTextFrame, PlayerGroupAll(), false);
    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_directiveTitleLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_directiveDescriptionLabel, PlayerGroupAll(), false);
}

trigger auto_libPVEU_gf_PvEUICreateDirectiveMessageSmall_Trigger = null;
text auto_libPVEU_gf_PvEUICreateDirectiveMessageSmall_lp_title;
text auto_libPVEU_gf_PvEUICreateDirectiveMessageSmall_lp_description;
int auto_libPVEU_gf_PvEUICreateDirectiveMessageSmall_lp_style;

void libPVEU_gf_PvEUICreateDirectiveMessageSmall (text lp_title, text lp_description, int lp_style) {
    auto_libPVEU_gf_PvEUICreateDirectiveMessageSmall_lp_title = lp_title;
    auto_libPVEU_gf_PvEUICreateDirectiveMessageSmall_lp_description = lp_description;
    auto_libPVEU_gf_PvEUICreateDirectiveMessageSmall_lp_style = lp_style;

    if (auto_libPVEU_gf_PvEUICreateDirectiveMessageSmall_Trigger == null) {
        auto_libPVEU_gf_PvEUICreateDirectiveMessageSmall_Trigger = TriggerCreate("auto_libPVEU_gf_PvEUICreateDirectiveMessageSmall_TriggerFunc");
    }

    TriggerExecute(auto_libPVEU_gf_PvEUICreateDirectiveMessageSmall_Trigger, false, false);
}

bool auto_libPVEU_gf_PvEUICreateDirectiveMessageSmall_TriggerFunc (bool testConds, bool runActions) {
    text lp_title = auto_libPVEU_gf_PvEUICreateDirectiveMessageSmall_lp_title;
    text lp_description = auto_libPVEU_gf_PvEUICreateDirectiveMessageSmall_lp_description;
    int lp_style = auto_libPVEU_gf_PvEUICreateDirectiveMessageSmall_lp_style;

    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    int autoD82405CE_val;

    // Variable Initialization

    // Implementation
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    libPVEU_gf_PvEUIDestroyCurrentDirectiveMessageSmall();
    autoD82405CE_val = lp_style;
    if (autoD82405CE_val == libPVEU_ge_PvEUIDirectiveStyle_PvEUIDirectiveStyel_ObjectiveDiscovered) {
        SoundPlayForPlayer(SoundLink("UI_PvE_ObjectiveDiscovered", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoD82405CE_val == libPVEU_ge_PvEUIDirectiveStyle_PvEUIDirectiveStyel_ObjectiveCompleted) {
        SoundPlayForPlayer(SoundLink("UI_PvE_ObjectiveComplete", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoD82405CE_val == libPVEU_ge_PvEUIDirectiveStyle_PvEUIDirectiveStyel_ObjectiveFailed) {
        SoundPlayForPlayer(SoundLink("MX_TutorialVet_Failed", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoD82405CE_val == libPVEU_ge_PvEUIDirectiveStyle_PvEUIDirectiveStyel_ObjectiveUpdated) {
        SoundPlayForPlayer(SoundLink("UI_PvE_ObjectiveUpdated", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoD82405CE_val == libPVEU_ge_PvEUIDirectiveStyle_PvEUIDirectiveStyel_ObjectiveBegins) {
        SoundPlayForPlayer(SoundLink("UI_PvE_ObjectiveDiscovered", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
    libNtve_gf_SetDialogItemText(libPVEU_gv_pvEUIDirectivePanel.lv_directiveTitleLabelSmall, lp_title, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libPVEU_gv_pvEUIDirectivePanel.lv_directiveDescriptionLabelSmall, lp_description, PlayerGroupAll());
    TriggerExecute(libPVEU_gt_PvEUIDisplayDirectivePanelMessageSmall, true, false);
    return true;
}

void libPVEU_gf_PvEUIDestroyCurrentDirectiveMessageSmall () {
    // Automatic Variable Declarations
    // Implementation
    TriggerStop(libPVEU_gt_PvEUIDisplayDirectivePanelMessageSmall);
    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_directiveTextFrameSmall, PlayerGroupAll(), false);
    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_directiveTitleLabelSmall, PlayerGroupAll(), false);
    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_directiveDescriptionLabelSmall, PlayerGroupAll(), false);
}

void libPVEU_gf_PvEUIDisplayGameOverScreen (bool lp_victory) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_ResultNameLabel == c_invalidDialogControlId)) {
        DialogControlHookup(libUIUI_gv_gameOverSplash.lv_victoryFrame, c_triggerControlTypeLabel, "VictoryLabel");
        libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_VictoryLabel = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("DOCSTR_MissionComplete"), PlayerGroupAll());
        DialogControlHookup(libUIUI_gv_gameOverSplash.lv_victoryFrame, c_triggerControlTypeLabel, "VictoryLabelGlow");
        libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_VictoryLabelGlow = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("DOCSTR_MissionComplete"), PlayerGroupAll());
        DialogControlHookup(libUIUI_gv_gameOverSplash.lv_victoryFrame, c_triggerControlTypeLabel, "TimeLabel");
        libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_ResultNameLabel = DialogControlLastCreated();
        DialogControlHookup(libUIUI_gv_gameOverSplash.lv_victoryFrame, c_triggerControlTypeLabel, "FinalTime");
        libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_ResultNameLabel = DialogControlLastCreated();
        DialogControlHookup(libUIUI_gv_gameOverSplash.lv_victoryFrame, c_triggerControlTypeLabel, "TimeLabel");
        libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_ResultLabel = DialogControlLastCreated();
        DialogControlHookup(libUIUI_gv_gameOverSplash.lv_defeatFrame, c_triggerControlTypeLabel, "DefeatLabel");
        libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_DefeatLabel = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("DOCSTR_MissionFailed"), PlayerGroupAll());
        DialogControlHookup(libUIUI_gv_gameOverSplash.lv_defeatFrame, c_triggerControlTypeLabel, "DefeatLabelGlow");
        libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_DefeatLabelGlow = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("DOCSTR_MissionFailed"), PlayerGroupAll());
        DialogControlHookup(libUIUI_gv_gameOverSplash.lv_defeatFrame, c_triggerControlTypeLabel, "DefeatMessage");
        libPVEU_gv_pvEUIGameOverScreen.lv_pvEUIGameOverScreen_DefeatReason = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }

    if ((libPVEU_gv_pvEUIGameOverScreenCallback != null)) {
        TriggerExecute(libPVEU_gv_pvEUIGameOverScreenCallback, true, false);
    }

    if ((lp_victory == true)) {
        libUIUI_gf_GameOverSplashDisplayForAllPlayers(libGame_gv_teamOrderIndex_C);
    }
    else {
        libUIUI_gf_GameOverSplashDisplayForAllPlayers(libGame_gv_teamChaosIndex_C);
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include PvE UI Mod
//--------------------------------------------------------------------------------------------------
bool libPVEU_gt_IncludePvEUIMod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEU_gt_IncludePvEUIMod_Init () {
    libPVEU_gt_IncludePvEUIMod = TriggerCreate("libPVEU_gt_IncludePvEUIMod_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE UI Init
//--------------------------------------------------------------------------------------------------
bool libPVEU_gt_PvEUIInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libPVEU_gv_pvEMapPanel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/PVEBrawlHoldoutPanel");
        libPVEU_gv_pvEMapPanel = DialogControlLastCreated();
    }

    TriggerExecute(libPVEU_gt_PvEUIDirectivePanelInitialize, true, false);
    TriggerExecute(libPVEU_gt_PvEUITopBarInit, true, false);
    TriggerExecute(libPVEU_gt_PvEUITabScreenInit, true, false);
    TriggerExecute(libPVEU_gt_PvEUIInitializeArrows, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEU_gt_PvEUIInit_Init () {
    libPVEU_gt_PvEUIInit = TriggerCreate("libPVEU_gt_PvEUIInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvEUI Curate HS UI Button Clicked
//--------------------------------------------------------------------------------------------------
bool libPVEU_gt_PvEUICurateHSUIButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_buttonClicked;
    int lv_itPick;
    int lv_itHeroRow;
    int lv_itHeroCol;

    // Automatic Variable Declarations
    int autoDC6556C9_val;
    const int autoC174F411_ae = libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountRow_C;
    const int autoC174F411_ai = 1;
    const int autoDB2CD0E1_ae = libPVEU_gv_pvEUICurateHeroSelectionUIRoleHeroCountCol_C;
    const int autoDB2CD0E1_ai = 1;

    // Variable Initialization
    lv_itPlayer = EventPlayer();
    lv_buttonClicked = EventDialogControl();

    // Conditions
    if (testConds) {
        if (!(((EventPlayer() >= 1) && (EventPlayer() <= libCore_gv_bALMaxPlayers)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDC6556C9_val = lv_buttonClicked;
    if (autoDC6556C9_val == libPVEU_gv_pvEUICurateHeroSelectionUI.lv_abilitiesInfoButton) {
        libNtve_gf_SetDialogItemToggled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_talentsInfoButton, false, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
        libNtve_gf_SetDialogItemToggled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_brawlInfoButton, false, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
        return true;
    }
    else if (autoDC6556C9_val == libPVEU_gv_pvEUICurateHeroSelectionUI.lv_talentsInfoButton) {
        libNtve_gf_SetDialogItemToggled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_abilitiesInfoButton, false, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
        libNtve_gf_SetDialogItemToggled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_brawlInfoButton, false, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
        return true;
    }
    else if (autoDC6556C9_val == libPVEU_gv_pvEUICurateHeroSelectionUI.lv_brawlInfoButton) {
        libNtve_gf_SetDialogItemToggled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_abilitiesInfoButton, false, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
        libNtve_gf_SetDialogItemToggled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_talentsInfoButton, false, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
        return true;
    }
    else {
    }
    if ((lv_buttonClicked == libPVEU_gv_pvEUICurateHeroSelectionUI.lv_lockButton)) {
        if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == false)) {
            libPVEU_gf_PvEUICurateHSUILockUnlockHeroChoice(lv_itPlayer, true);
            SoundPlayForPlayer(SoundLink("UI_BNet_Draft_HeroConfirm", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lv_itPlayer], 100.0, 0.0);
        }
        else {
            libPVEU_gf_PvEUICurateHSUILockUnlockHeroChoice(lv_itPlayer, false);
            SoundPlayForPlayer(SoundLink("UI_BNet_Customize", -1), c_maxPlayers, libCore_gv_playerGroupFromPlayer[lv_itPlayer], 100.0, 0.0);
        }
        return true;
    }

    lv_itHeroRow = 1;
    for ( ; ( (autoC174F411_ai >= 0 && lv_itHeroRow <= autoC174F411_ae) || (autoC174F411_ai < 0 && lv_itHeroRow >= autoC174F411_ae) ) ; lv_itHeroRow += autoC174F411_ai ) {
        lv_itHeroCol = 1;
        for ( ; ( (autoDB2CD0E1_ai >= 0 && lv_itHeroCol <= autoDB2CD0E1_ae) || (autoDB2CD0E1_ai < 0 && lv_itHeroCol >= autoDB2CD0E1_ae) ) ; lv_itHeroCol += autoDB2CD0E1_ai ) {
            if ((lv_buttonClicked == libPVEU_gv_pvEUICurateHeroSelectionUI.lv_heroButtons[lv_itHeroRow][lv_itHeroCol]) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == false)) {
                libPVEU_gf_PvEUICurateHSUISelectHeroforPlayer(lv_itPlayer, lv_itHeroRow, lv_itHeroCol);
                return true;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEU_gt_PvEUICurateHSUIButtonClicked_Init () {
    libPVEU_gt_PvEUICurateHSUIButtonClicked = TriggerCreate("libPVEU_gt_PvEUICurateHSUIButtonClicked_Func");
    TriggerEnable(libPVEU_gt_PvEUICurateHSUIButtonClicked, false);
    TriggerAddEventDialogControl(libPVEU_gt_PvEUICurateHSUIButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvEUI Curate HS UI Countdown Timer Expires
//--------------------------------------------------------------------------------------------------
bool libPVEU_gt_PvEUICurateHSUICountdownTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    sound lv_crowdSound;

    // Automatic Variable Declarations
    playergroup autoDD982436_g;
    playergroup autoF49E6C39_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_StopTimer(libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_countdownTimer);
    DialogControlSetEnabled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_abilitiesInfoButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_talentsInfoButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_brawlInfoButton, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemToggled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_abilitiesInfoButton, false, PlayerGroupAll());
    libNtve_gf_SetDialogItemToggled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_talentsInfoButton, false, PlayerGroupAll());
    libNtve_gf_SetDialogItemToggled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_brawlInfoButton, false, PlayerGroupAll());
    autoDD982436_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_player = -1;
    while (true) {
        	lv_player = PlayerGroupNextPlayer(autoDD982436_g, lv_player);
        	if (lv_player<0) { break; }
        	if ((PlayerStatus(lv_player) == c_playerStatusUnused)) {
            TextExpressionSetToken("Param/Expression/lib_PVEU_6E3CE6F2", "A", IntToText(lv_player));
            libPVEU_gf_PvEUICurateHSUIDebugMessage(TextExpressionAssemble("Param/Expression/lib_PVEU_6E3CE6F2"));
            continue;
        }

        if ((libGame_gv_players[lv_player].lv_heroData.lv_heroCatalogLink == null)) {
            libPVEU_gf_PvEUICurateHSUIAutoPickHeroForPlayer(lv_player);
            TextExpressionSetToken("Param/Expression/lib_PVEU_D20F72B4", "A", IntToText(lv_player));
            TextExpressionSetToken("Param/Expression/lib_PVEU_D20F72B4", "B", StringToText((libGame_gv_players[lv_player].lv_heroData.lv_heroCatalogLink)));
            libPVEU_gf_PvEUICurateHSUIDebugMessage(TextExpressionAssemble("Param/Expression/lib_PVEU_D20F72B4"));
        }

        if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_player] == false)) {
            libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_player] = true;
            libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroRow[lv_player] = libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lv_player];
            libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedHeroCol[lv_player] = libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lv_player];
            TextExpressionSetToken("Param/Expression/lib_PVEU_F7A9D663", "A", IntToText(lv_player));
            TextExpressionSetToken("Param/Expression/lib_PVEU_F7A9D663", "B", StringToText((libGame_gv_players[lv_player].lv_heroData.lv_heroCatalogLink)));
            libPVEU_gf_PvEUICurateHSUIDebugMessage(TextExpressionAssemble("Param/Expression/lib_PVEU_F7A9D663"));
        }

        libPVEU_gf_PvEUICurateHSUISetHeroSkinAndMountForPlayer(lv_player);
    }
    libPVEU_gf_PvEUICurateHSUIUpdateHeroButtons();
    SoundPlayForPlayer(SoundLink("UI_BNet_Draft_Countdown_Start", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libPVEU_gf_PvEUICurateHSUILockUI();
    Wait(1.0, c_timeGame);
    DialogControlFadeTransparency(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_pickHeroPanel, PlayerGroupAll(), 0.5, 100.0);
    Wait(0.5, c_timeGame);
    libPVEU_gf_PvEUICurateHSUIShowFinalCountDownHeroCutscene();
    autoF49E6C39_g = libGame_gf_PlayersOnTeamHeroes(libPVEM_gv_pvETeamHuman_C, false);
    lv_player = -1;
    while (true) {
        	lv_player = PlayerGroupNextPlayer(autoF49E6C39_g, lv_player);
        	if (lv_player<0) { break; }
        	libGame_gf_HeroSelectionRandomlyPickVoiceLine(lv_player);
    }
    libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_finalCountDownStarted = true;
    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_countdownLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_finalCountdownFrame, PlayerGroupAll(), true);
    SoundPlayForPlayer(SoundLink("UI_BNet_Draft_Countdown", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(6.0, c_timeGame);
    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_finalCountdownFrame, PlayerGroupAll(), false);
    DialogSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_dialog, PlayerGroupAll(), false);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, libCore_gv_mAPMapAmbience, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    UISetWorldVisible(PlayerGroupAll(), true);
    DialogControlSetVisible(libUIUI_gv_uIObserverUI.lv_mainPanel, PlayerGroupSingle(libCore_gv_oBSERVER_ObserverUIPlayer), true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libSond_gf_SoundtrackPlayMapSoundtrackAsDefaultSoundtrackForAllPlayers();
    libGame_gv_heroPickDone = true;
    libGame_gv_heroSpawnReady = true;
    SetHeroLeaderPanelEnabled(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEU_gt_PvEUICurateHSUICountdownTimerExpires_Init () {
    libPVEU_gt_PvEUICurateHSUICountdownTimerExpires = TriggerCreate("libPVEU_gt_PvEUICurateHSUICountdownTimerExpires_Func");
    TriggerEnable(libPVEU_gt_PvEUICurateHSUICountdownTimerExpires, false);
    TriggerAddEventTimer(libPVEU_gt_PvEUICurateHSUICountdownTimerExpires, libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_countdownTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvEUI Curate HS UI Force Selection
//--------------------------------------------------------------------------------------------------
bool libPVEU_gt_PvEUICurateHSUIForceSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    sound lv_crowdSound;

    // Automatic Variable Declarations
    playergroup auto48837893_g;
    playergroup autoE702779A_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_StopTimer(libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_countdownTimer);
    DialogControlSetEnabled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_abilitiesInfoButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_talentsInfoButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_brawlInfoButton, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemToggled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_abilitiesInfoButton, false, PlayerGroupAll());
    libNtve_gf_SetDialogItemToggled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_talentsInfoButton, false, PlayerGroupAll());
    libNtve_gf_SetDialogItemToggled(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_brawlInfoButton, false, PlayerGroupAll());
    auto48837893_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto48837893_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == false)) {
            if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroRow[lv_itPlayer] > 0) && (libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_selectedHeroCol[lv_itPlayer] > 0)) {
                libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] = true;
            }

        }

    }
    autoE702779A_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoE702779A_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
            if ((libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_lockedIn[lv_itPlayer] == false)) {
                libPVEU_gf_PvEUICurateHSUIAutoPickHeroForPlayer(lv_itPlayer);
            }

        }

    }
    libPVEU_gf_PvEUICurateHSUIUpdateHeroButtons();
    libPVEU_gf_PvEUICurateHSUILockUI();
    libPVEU_gv_pvEUICurateHeroSelectionSetting.lv_finalCountDownStarted = true;
    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_countdownLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_finalCountdownFrame, PlayerGroupAll(), false);
    DialogSetVisible(libPVEU_gv_pvEUICurateHeroSelectionUI.lv_dialog, PlayerGroupAll(), false);
    UISetWorldVisible(PlayerGroupAll(), true);
    DialogControlSetVisible(libUIUI_gv_uIObserverUI.lv_mainPanel, PlayerGroupSingle(libCore_gv_oBSERVER_ObserverUIPlayer), true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libSond_gf_SoundtrackPlayMapSoundtrackAsDefaultSoundtrackForAllPlayers();
    libGame_gv_heroPickDone = true;
    libGame_gv_heroSpawnReady = true;
    SetHeroLeaderPanelEnabled(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEU_gt_PvEUICurateHSUIForceSelection_Init () {
    libPVEU_gt_PvEUICurateHSUIForceSelection = TriggerCreate("libPVEU_gt_PvEUICurateHSUIForceSelection_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Curated Hero Pick Messages
//--------------------------------------------------------------------------------------------------
bool libPVEU_gt_EnableCuratedHeroPickMessages_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_PVEU_784C5E40"), true);
    libPVEU_gv_dEBUG_ShowCuratedHeroPickMessages = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEU_gt_EnableCuratedHeroPickMessages_Init () {
    libPVEU_gt_EnableCuratedHeroPickMessages = TriggerCreate("libPVEU_gt_EnableCuratedHeroPickMessages_Func");
    TriggerAddEventChatMessage(libPVEU_gt_EnableCuratedHeroPickMessages, c_playerAny, "showmessages", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvEUI Directive Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libPVEU_gt_PvEUIDirectivePanelInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_parent;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_parent = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer");
    lv_parent = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_parent, c_triggerControlTypePanel, "PvEUI/PVENotificationUITemplate");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libPVEU_gv_pvEUIDirectivePanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(libPVEU_gv_pvEUIDirectivePanel.lv_mainPanel, c_triggerControlTypePanel, "TitleFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libPVEU_gv_pvEUIDirectivePanel.lv_directiveTextFrame = DialogControlLastCreated();
    DialogControlHookup(libPVEU_gv_pvEUIDirectivePanel.lv_directiveTextFrame, c_triggerControlTypeLabel, "TitleLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libPVEU_gv_pvEUIDirectivePanel.lv_directiveTitleLabel = DialogControlLastCreated();
    DialogControlHookup(libPVEU_gv_pvEUIDirectivePanel.lv_directiveTextFrame, c_triggerControlTypeLabel, "DescriptionLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libPVEU_gv_pvEUIDirectivePanel.lv_directiveDescriptionLabel = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_parent, c_triggerControlTypePanel, "PvEUI/PVENotificationUISmallTemplate");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libPVEU_gv_pvEUIDirectivePanel.lv_mainPanelSmall = DialogControlLastCreated();
    DialogControlHookup(libPVEU_gv_pvEUIDirectivePanel.lv_mainPanelSmall, c_triggerControlTypePanel, "TitleFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libPVEU_gv_pvEUIDirectivePanel.lv_directiveTextFrameSmall = DialogControlLastCreated();
    DialogControlHookup(libPVEU_gv_pvEUIDirectivePanel.lv_directiveTextFrameSmall, c_triggerControlTypeLabel, "TitleLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libPVEU_gv_pvEUIDirectivePanel.lv_directiveTitleLabelSmall = DialogControlLastCreated();
    DialogControlHookup(libPVEU_gv_pvEUIDirectivePanel.lv_directiveTextFrameSmall, c_triggerControlTypeLabel, "DescriptionLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libPVEU_gv_pvEUIDirectivePanel.lv_directiveDescriptionLabelSmall = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEU_gt_PvEUIDirectivePanelInitialize_Init () {
    libPVEU_gt_PvEUIDirectivePanelInitialize = TriggerCreate("libPVEU_gt_PvEUIDirectivePanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvEUI Display Directive Panel Message
//--------------------------------------------------------------------------------------------------
bool libPVEU_gt_PvEUIDisplayDirectivePanelMessage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_mainPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_directiveTextFrame, PlayerGroupAll(), true);
    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_directiveTitleLabel, PlayerGroupAll(), true);
    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_directiveDescriptionLabel, PlayerGroupAll(), true);
    Wait(3.0, c_timeReal);
    DialogControlFadeTransparency(libPVEU_gv_pvEUIDirectivePanel.lv_mainPanel, PlayerGroupAll(), 0.5, 100.0);
    Wait(0.5, c_timeGame);
    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_directiveTextFrame, PlayerGroupAll(), false);
    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_directiveTitleLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_directiveDescriptionLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_mainPanel, PlayerGroupAll(), false);
    DialogControlFadeTransparency(libPVEU_gv_pvEUIDirectivePanel.lv_mainPanel, PlayerGroupAll(), 1.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEU_gt_PvEUIDisplayDirectivePanelMessage_Init () {
    libPVEU_gt_PvEUIDisplayDirectivePanelMessage = TriggerCreate("libPVEU_gt_PvEUIDisplayDirectivePanelMessage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvEUI Display Directive Panel Message Small
//--------------------------------------------------------------------------------------------------
bool libPVEU_gt_PvEUIDisplayDirectivePanelMessageSmall_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_mainPanelSmall, PlayerGroupAll(), true);
    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_directiveTextFrameSmall, PlayerGroupAll(), true);
    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_directiveTitleLabelSmall, PlayerGroupAll(), true);
    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_directiveDescriptionLabelSmall, PlayerGroupAll(), true);
    Wait(3.0, c_timeReal);
    DialogControlFadeTransparency(libPVEU_gv_pvEUIDirectivePanel.lv_mainPanelSmall, PlayerGroupAll(), 0.5, 100.0);
    Wait(0.5, c_timeGame);
    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_directiveTextFrameSmall, PlayerGroupAll(), false);
    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_directiveTitleLabelSmall, PlayerGroupAll(), false);
    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_directiveDescriptionLabelSmall, PlayerGroupAll(), false);
    DialogControlSetVisible(libPVEU_gv_pvEUIDirectivePanel.lv_mainPanelSmall, PlayerGroupAll(), false);
    DialogControlFadeTransparency(libPVEU_gv_pvEUIDirectivePanel.lv_mainPanelSmall, PlayerGroupAll(), 1.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEU_gt_PvEUIDisplayDirectivePanelMessageSmall_Init () {
    libPVEU_gt_PvEUIDisplayDirectivePanelMessageSmall = TriggerCreate("libPVEU_gt_PvEUIDisplayDirectivePanelMessageSmall_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvEUI Top Bar Init
//--------------------------------------------------------------------------------------------------
bool libPVEU_gt_PvEUITopBarInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team1LevelInfo;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_team1LevelInfo = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libUIUI_gf_UIPartyFrameShowHideCoreHealth(false);
    libUIUI_gf_UIPartyFrameShowHideTeamPanelforPlayerGroup(libGame_gv_teamChaosIndex_C, false, PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/PartyFramePanel/PartyFrameTopPanel");
    libPVEU_gv_pvEUITopBar.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(libPVEU_gv_pvEUITopBar.lv_mainPanel, c_triggerControlTypeImage, "TopBarBacking");
    libPVEU_gv_pvEUITopBar.lv_topBarBackingImage = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\hud_topbar_backing_plain.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNineSlice, PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 86);
    DialogControlCreateInPanel(libPVEU_gv_pvEUITopBar.lv_mainPanel, c_triggerControlTypeLabel);
    libPVEU_gv_pvEUITopBar.lv_teamLevelLabelPanel = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 50);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_PVEU_E82BF205"), PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, libPVEU_gv_pvEUITopBar.lv_mainPanel, c_anchorTop, 0, 0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_CoopBrawlTopBarTeamLevel", PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/PartyFramePanel/Team1LevelInfo");
    libPVEU_gv_pvEUITopBar.lv_teamLevelInfoPanel = DialogControlLastCreated();
    DialogControlHookup(libPVEU_gv_pvEUITopBar.lv_teamLevelInfoPanel, c_triggerControlTypeLabel, "TeamLevelLabel");
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, libPVEU_gv_pvEUITopBar.lv_topBarBackingImage, c_anchorBottom, 0, -11);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    DialogControlHookup(libPVEU_gv_pvEUITopBar.lv_teamLevelInfoPanel, c_triggerControlTypePanel, "TeamTalentAdvantageFrame");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPVEU_gv_pvEUITopBar.lv_teamLevelInfoPanel, c_triggerControlTypePanel, "TeamXPUnitStatusFrameBgImage");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPVEU_gv_pvEUITopBar.lv_teamLevelInfoPanel, c_triggerControlTypePanel, "TeamLevelColorBacking");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPVEU_gv_pvEUITopBar.lv_teamLevelInfoPanel, c_triggerControlTypePanel, "TeamNextLevelTalentIcon");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPVEU_gv_pvEUITopBar.lv_teamLevelInfoPanel, c_triggerControlTypePanel, "TeamNextLevelNoTalentIcon");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPVEU_gv_pvEUITopBar.lv_teamLevelInfoPanel, c_triggerControlTypePanel, "TeamXPUnitStatusFrame");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPVEU_gv_pvEUITopBar.lv_teamLevelInfoPanel, c_triggerControlTypePanel, "LevelUpLabel");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/PartyFramePanel/Team2LevelInfo");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ConsoleUIContainer/PartyFramePanel/GameTimerLabel");
    libPVEU_gv_pvEUITopBar.lv_gameTimerLabel = DialogControlLastCreated();
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, libPVEU_gv_pvEUITopBar.lv_topBarBackingImage, c_anchorBottom, 0, -5);
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ConsoleUIContainer/PartyFramePanel/VSLabel");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEU_gt_PvEUITopBarInit_Init () {
    libPVEU_gt_PvEUITopBarInit = TriggerCreate("libPVEU_gt_PvEUITopBarInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvEUI Tab Screen Init
//--------------------------------------------------------------------------------------------------
bool libPVEU_gt_PvEUITabScreenInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_time;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer");
    libPVEU_gv_pvEUITabScreenPanel.lv_pvEUITabScreen_MainPanel = DialogControlLastCreated();
    DialogControlHookup(libPVEU_gv_pvEUITabScreenPanel.lv_pvEUITabScreen_MainPanel, c_triggerControlTypePanel, "TabControl");
    libPVEU_gv_pvEUITabScreenPanel.lv_pvEUITabScreen_TabControl = DialogControlLastCreated();
    DialogControlHookup(libPVEU_gv_pvEUITabScreenPanel.lv_pvEUITabScreen_TabControl, c_triggerControlTypePanel, "TimeRunSubPanel");
    libPVEU_gv_pvEUITabScreenPanel.lv_pvEUITabScreen_TimeRunSubPanel = DialogControlLastCreated();
    DialogControlHookup(libPVEU_gv_pvEUITabScreenPanel.lv_pvEUITabScreen_TimeRunSubPanel, c_triggerControlTypeLabel, "NameLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), GameMapName(), PlayerGroupAll());
    DialogControlHookup(libPVEU_gv_pvEUITabScreenPanel.lv_pvEUITabScreen_TimeRunSubPanel, c_triggerControlTypeLabel, "Time");
    libPVEU_gv_pvEUITabScreenPanel.lv_pvEUITabScreen_CurrentTimeLabel = DialogControlLastCreated();
    while (true) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        lv_time = libUIUI_gf_HeroesGameTime();
        if ((lv_time <= 0.0)) {
            lv_time = 0.0;
        }

        libNtve_gf_SetDialogItemText(libPVEU_gv_pvEUITabScreenPanel.lv_pvEUITabScreen_CurrentTimeLabel, TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(lv_time)), PlayerGroupAll());
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEU_gt_PvEUITabScreenInit_Init () {
    libPVEU_gt_PvEUITabScreenInit = TriggerCreate("libPVEU_gt_PvEUITabScreenInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvEUI Initialize Arrows
//--------------------------------------------------------------------------------------------------
bool libPVEU_gt_PvEUIInitializeArrows_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto38EB7F09_ae = libCore_gv_bALMaxPlayers;
    const int auto38EB7F09_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (auto38EB7F09_ai >= 0 && lv_itPlayer <= auto38EB7F09_ae) || (auto38EB7F09_ai < 0 && lv_itPlayer >= auto38EB7F09_ae) ) ; lv_itPlayer += auto38EB7F09_ai ) {
        if ((libGame_gv_players[lv_itPlayer].lv_heroUnit != null)) {
            libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer(true, lv_itPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEU_gt_PvEUIInitializeArrows_Init () {
    libPVEU_gt_PvEUIInitializeArrows = TriggerCreate("libPVEU_gt_PvEUIInitializeArrows_Func");
}

void libPVEU_InitTriggers () {
    libPVEU_gt_IncludePvEUIMod_Init();
    libPVEU_gt_PvEUIInit_Init();
    libPVEU_gt_PvEUICurateHSUIButtonClicked_Init();
    libPVEU_gt_PvEUICurateHSUICountdownTimerExpires_Init();
    libPVEU_gt_PvEUICurateHSUIForceSelection_Init();
    libPVEU_gt_EnableCuratedHeroPickMessages_Init();
    libPVEU_gt_PvEUIDirectivePanelInitialize_Init();
    libPVEU_gt_PvEUIDisplayDirectivePanelMessage_Init();
    libPVEU_gt_PvEUIDisplayDirectivePanelMessageSmall_Init();
    libPVEU_gt_PvEUITopBarInit_Init();
    libPVEU_gt_PvEUITabScreenInit_Init();
    libPVEU_gt_PvEUIInitializeArrows_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libPVEU_InitLib_completed = false;

void libPVEU_InitLib () {
    if (libPVEU_InitLib_completed) {
        return;
    }

    libPVEU_InitLib_completed = true;

    libPVEU_InitLibraries();
    libPVEU_InitVariables();
    libPVEU_InitTriggers();
}

include "LibPVEM"

