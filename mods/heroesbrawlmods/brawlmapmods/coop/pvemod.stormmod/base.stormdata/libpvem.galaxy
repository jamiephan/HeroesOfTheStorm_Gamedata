include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"
include "TriggerLibs/StartingExperienceLib"
include "TriggerLibs/SoundLib"
include "TriggerLibs/GameDataHelperLib"
include "TriggerLibs/SupportLib"
include "LibPVEU_h"

include "LibPVEM_h"

//--------------------------------------------------------------------------------------------------
// Library: PvE Mod
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libPVEM_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libAIAI_InitVariables();
    libUIUI_InitVariables();
    libStEx_InitVariables();
    libSond_InitVariables();
    libGDHL_InitVariables();
    libSprt_InitVariables();
    libPVEU_InitVariables();
}

// Variable Initialization
bool libPVEM_InitVariables_completed = false;

void libPVEM_InitVariables () {
    int init_i;

    if (libPVEM_InitVariables_completed) {
        return;
    }

    libPVEM_InitVariables_completed = true;

    for (init_i = 0; init_i <= libPVEM_gv_pvEAttackWaveCount_Max_C; init_i += 1) {
        libPVEM_gv_pvEAttackWaves[init_i].lv_units = UnitGroupEmpty();
        libPVEM_gv_pvEAttackWaves[init_i].lv_unitsWaitingAtWaypoint = UnitGroupEmpty();
        libPVEM_gv_pvEAttackWaves[init_i].lv_unitsLeashing = UnitGroupEmpty();
        libPVEM_gv_pvEAttackWaves[init_i].lv_wayPointPre = 1;
        libPVEM_gv_pvEAttackWaves[init_i].lv_wayPointNext = 1;
    }
    libPVEM_gv_pvEGameDifficulty = libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Normal;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libPVEM_gv_pvEResurrectSpiritTextTag[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libPVEM_gv_pvEResurrectSpiritTextTagSelf[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libPVEM_gv_pvEResurrectNotifyTargetPlayerReviveInterruptedTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libPVEM_gv_pvEResurrectResurrectionCastersUnitGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libPVEM_gv_pvEResurrectRevivingDialog[init_i].lv_panel = c_invalidDialogId;
        libPVEM_gv_pvEResurrectRevivingDialog[init_i].lv_label = c_invalidDialogId;
    }
    libPVEM_gv_pvEPickupPreplacedPickups = UnitGroupEmpty();
    libPVEM_gv_pvEPickupsItemsOnGround = UnitGroupEmpty();
    libPVEM_gv_pvEPickupsCurrentRotationStep = 1;
    libPVEM_gv_pvEPickupsRolloverRotationStep = 5;
    libPVEM_gv_pvENPCMinions = UnitGroupEmpty();
    libPVEM_gv_pvENPCHeroUnits = UnitGroupEmpty();
    libPVEM_gv_pvEStartingAnimationUnits = UnitGroupEmpty();
    libPVEM_gv_pvENPCHeroLevel = 1;
    libPVEM_gv_pvEEventHeroicFilters = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)));
    libPVEM_gv_pvEGameOverResult = c_gameOverTie;
}

// Presets
// Functions
void libPVEM_gf_PvEAttackWaveRoutineSingleWave (int lp_waveIndex) {
    // Variable Declarations
    unit lv_itUnit;
    point lv_ptPre;
    point lv_ptNext;
    point lv_ptUnit;
    point lv_ptAnchor;
    fixed lv_angelLane;
    fixed lv_angelUnit;
    fixed lv_distanceUnitPre;
    fixed lv_distanceUnitNext;
    fixed lv_offset;
    bool lv_arrived;

    // Automatic Variable Declarations
    unitgroup auto2BA96A95_g;
    int auto2BA96A95_u;
    unitgroup autoD33EDCDC_g;
    int autoD33EDCDC_u;

    // Variable Initialization

    // Implementation
    if ((libPVEM_gf_PvEIsValidAttackWaveIndex(lp_waveIndex) == false)) {
        TextExpressionSetToken("Param/Expression/lib_PVEM_6F9B5A22", "A", IntToText(lp_waveIndex));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_PVEM_6F9B5A22"), true);
        return ;
    }

    if (((libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_used == false) || (libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_sent == false))) {
        return ;
    }

    if ((libNtve_gf_UnitGroupIsDead(libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_units) == true)) {
        libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_used = false;
        libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_sent = false;
        return ;
    }

    lv_ptPre = libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_waypoints[libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_wayPointPre];
    lv_ptNext = libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_waypoints[libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_wayPointNext];
    lv_angelLane = AngleBetweenPoints(lv_ptPre, lv_ptNext);
    if ((UnitGroupCount(libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_units, c_unitCountAlive) == UnitGroupCount(libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_unitsWaitingAtWaypoint, c_unitCountAlive))) {
        if ((libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_wayPointNext < libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_wayPointCount)) {
            libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_wayPointPre = libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_wayPointNext;
            libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_wayPointNext += 1;
        }

        auto2BA96A95_g = libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_units;
        auto2BA96A95_u = UnitGroupCount(auto2BA96A95_g, c_unitCountAll);
        for (;; auto2BA96A95_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(auto2BA96A95_g, auto2BA96A95_u);
            if (lv_itUnit == null) { break; }
            UnitIssueOrder(lv_itUnit, OrderTargetingPoint(AbilityCommand("attack", 0), libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_waypoints[libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_wayPointNext]), c_orderQueueReplace);
        }
        UnitGroupClear(libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_unitsWaitingAtWaypoint);
        UnitGroupClear(libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_unitsLeashing);
        return ;
    }

    autoD33EDCDC_g = libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_units;
    autoD33EDCDC_u = UnitGroupCount(autoD33EDCDC_g, c_unitCountAll);
    for (;; autoD33EDCDC_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoD33EDCDC_g, autoD33EDCDC_u);
        if (lv_itUnit == null) { break; }
        lv_ptUnit = UnitGetPosition(lv_itUnit);
        lv_distanceUnitPre = AbsF(DistanceBetweenPoints(lv_ptPre, lv_ptUnit));
        lv_distanceUnitNext = AbsF(DistanceBetweenPoints(lv_ptNext, lv_ptUnit));
        if ((UnitGroupHasUnit(libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_unitsWaitingAtWaypoint, lv_itUnit) == true)) {
            if ((lv_distanceUnitNext > libPVEM_gv_pvEAttackWaveLeashDistance_On_C)) {
                UnitIssueOrder(lv_itUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_ptNext), c_orderQueueReplace);
            }
            else if ((lv_distanceUnitNext <= libPVEM_gv_pvEAttackWaveLeashDistance_Off_C) && (lv_distanceUnitNext > libPVEM_gv_pvEAttackWaveWaypointDistance_C)) {
                UnitIssueOrder(lv_itUnit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_ptNext), c_orderQueueReplace);
            }
            else if (true) {
                if ((UnitHasAIThinkTree(lv_itUnit) == false)) {
                    UnitCreateAIThinkTree(lv_itUnit);
                }

            }
            continue;
        }
        else {
            if ((lv_distanceUnitNext < libPVEM_gv_pvEAttackWaveWaypointDistance_C)) {
                UnitGroupAdd(libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_unitsWaitingAtWaypoint, lv_itUnit);
                UnitGroupRemove(libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_unitsLeashing, lv_itUnit);
                if ((UnitHasAIThinkTree(lv_itUnit) == false)) {
                    UnitCreateAIThinkTree(lv_itUnit);
                }

                continue;
            }

        }
        lv_angelUnit = AngleBetweenPoints(lv_ptPre, lv_ptUnit);
        lv_offset = AbsF((lv_distanceUnitPre * Sin((lv_angelUnit - lv_angelLane))));
        if ((lv_offset >= libPVEM_gv_pvEAttackWaveLeashDistance_On_C)) {
            lv_ptAnchor = PointWithOffsetPolar(lv_ptPre, AbsF((lv_distanceUnitPre * Cos((lv_angelUnit - lv_angelLane)))), lv_angelLane);
            UnitIssueOrder(lv_itUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_ptAnchor), c_orderQueueReplace);
            UnitGroupAdd(libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_unitsLeashing, lv_itUnit);
            libCore_gf_StorePointForUnit(lv_itUnit, 1, lv_ptAnchor);
            if ((UnitHasAIThinkTree(lv_itUnit) == true)) {
                UnitDestroyAIThinkTree(lv_itUnit);
            }

            continue;
        }

        if ((lv_offset < libPVEM_gv_pvEAttackWaveLeashDistance_Off_C) && (UnitGroupHasUnit(libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_unitsLeashing, lv_itUnit) == true)) {
            UnitIssueOrder(lv_itUnit, OrderTargetingPoint(AbilityCommand("attack", 0), libCore_gf_PointStoredForUnit(lv_itUnit, 1)), c_orderQueueReplace);
            UnitGroupRemove(libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_unitsLeashing, lv_itUnit);
            if ((UnitHasAIThinkTree(lv_itUnit) == false)) {
                UnitCreateAIThinkTree(lv_itUnit);
            }

            continue;
        }

        if ((UnitOrder(lv_itUnit, 0) == null)) {
            UnitIssueOrder(lv_itUnit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_ptNext), c_orderQueueReplace);
        }

    }
}

bool libPVEM_gf_PvEIsValidAttackWaveIndex (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_index > 0) && (lp_index <= libPVEM_gv_pvEAttackWaveCount)) {
        return true;
    }

    return false;
}

void libPVEM_gf_PvEAddUnitToAttackWave (int lp_waveIndex, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPVEM_gf_PvEIsValidAttackWaveIndex(lp_waveIndex) == false)) {
        TextExpressionSetToken("Param/Expression/lib_PVEM_05B9281B", "A", IntToText(lp_waveIndex));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_PVEM_05B9281B"), true);
        return ;
    }

    UnitGroupAdd(libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_units, lp_unit);
    if ((UnitHasAIThinkTree(lp_unit) == false)) {
        UnitCreateAIThinkTree(lp_unit);
    }

}

void libPVEM_gf_PvEAddUnitGroupToAttackWave (int lp_waveIndex, unitgroup lp_units) {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto41172428_g;
    int auto41172428_u;

    // Variable Initialization

    // Implementation
    if ((libPVEM_gf_PvEIsValidAttackWaveIndex(lp_waveIndex) == false)) {
        TextExpressionSetToken("Param/Expression/lib_PVEM_F173A950", "A", IntToText(lp_waveIndex));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_PVEM_F173A950"), true);
        return ;
    }

    UnitGroupAddUnitGroup(libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_units, lp_units);
    auto41172428_g = lp_units;
    auto41172428_u = UnitGroupCount(auto41172428_g, c_unitCountAll);
    for (;; auto41172428_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto41172428_g, auto41172428_u);
        if (lv_itUnit == null) { break; }
        if ((UnitHasAIThinkTree(lv_itUnit) == false)) {
            UnitCreateAIThinkTree(lv_itUnit);
        }

    }
}

void libPVEM_gf_PvEAddAttackWaveWaypoint (int lp_waveIndex, point lp_waypoint) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPVEM_gf_PvEIsValidAttackWaveIndex(lp_waveIndex) == false)) {
        TextExpressionSetToken("Param/Expression/lib_PVEM_E5494798", "A", IntToText(lp_waveIndex));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_PVEM_E5494798"), true);
        return ;
    }

    if ((libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_wayPointCount >= libPVEM_gv_pvEAttackWaveWaypointCount_Max_C)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_PVEM_29A116A7"), true);
        return ;
    }

    libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_wayPointCount += 1;
    libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_waypoints[libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_wayPointCount] = lp_waypoint;
}

void libPVEM_gf_PvECreateAttackWave () {
    // Variable Declarations
    int lv_waveIndex;
    int lv_itWaveIndex;

    // Automatic Variable Declarations
    int auto3E10FE25_ae;
    const int auto3E10FE25_ai = 1;

    // Variable Initialization
    lv_waveIndex = -1;

    // Implementation
    lv_waveIndex = -1;
    auto3E10FE25_ae = libPVEM_gv_pvEAttackWaveCount;
    lv_itWaveIndex = 1;
    for ( ; ( (auto3E10FE25_ai >= 0 && lv_itWaveIndex <= auto3E10FE25_ae) || (auto3E10FE25_ai < 0 && lv_itWaveIndex >= auto3E10FE25_ae) ) ; lv_itWaveIndex += auto3E10FE25_ai ) {
        if ((libPVEM_gv_pvEAttackWaves[lv_itWaveIndex].lv_used == false)) {
            lv_waveIndex = lv_itWaveIndex;
            break;
        }

    }
    if ((lv_waveIndex <= 0)) {
        if ((libPVEM_gv_pvEAttackWaveCount >= libPVEM_gv_pvEAttackWaveCount_Max_C)) {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_PVEM_A44181BD"), true);
            return ;
        }

        libPVEM_gv_pvEAttackWaveCount += 1;
        lv_waveIndex = libPVEM_gv_pvEAttackWaveCount;
    }

    libPVEM_gv_pvEAttackWaves[lv_waveIndex].lv_used = true;
    libPVEM_gv_pvEAttackWaves[lv_waveIndex].lv_wayPointCount = 0;
    libPVEM_gv_pvEAttackWaves[lv_waveIndex].lv_wayPointPre = 1;
    libPVEM_gv_pvEAttackWaves[lv_waveIndex].lv_wayPointNext = 1;
    libPVEM_gv_pvEAttackWaves[lv_waveIndex].lv_units = UnitGroupEmpty();
    libPVEM_gv_pvEAttackWaves[lv_waveIndex].lv_unitsWaitingAtWaypoint = UnitGroupEmpty();
    libPVEM_gv_pvEAttackWaves[lv_waveIndex].lv_unitsLeashing = UnitGroupEmpty();
    libPVEM_gv_pvEAttackWaves[lv_waveIndex].lv_sent = false;
    DataTableSetInt(false, "LastCreatedPvEAttackWaveIndex", lv_waveIndex);
}

int libPVEM_gf_PvELastCreatedAttackWave () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, "LastCreatedPvEAttackWaveIndex");
}

void libPVEM_gf_PvESendAttackWave (int lp_waveIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPVEM_gf_PvEIsValidAttackWaveIndex(lp_waveIndex) == false)) {
        TextExpressionSetToken("Param/Expression/lib_PVEM_224FA292", "A", IntToText(lp_waveIndex));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_PVEM_224FA292"), true);
        return ;
    }

    libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_wayPointNext = (libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_wayPointPre + 1);
    libPVEM_gv_pvEAttackWaves[lp_waveIndex].lv_sent = true;
    TriggerExecute(libPVEM_gt_PvEAttackWaveRoutine, true, false);
}

bool libPVEM_gf_MinionAITestPastNextWaypoint (point lp_minionIndex, point lp_minionIndex2, point lp_minionIndex3) {
    // Automatic Variable Declarations
    // Implementation
    return (DistanceSquaredBetweenPoints(lp_minionIndex, lp_minionIndex2) >= (DistanceSquaredBetweenPoints(lp_minionIndex, lp_minionIndex3) + DistanceSquaredBetweenPoints(lp_minionIndex2, lp_minionIndex3)));
}

void libPVEM_gf_PvECreateDefenderAI (unitgroup lp_defenders, region lp_defendRegion, region lp_leashRegion, bool lp_healOnLeash) {
    // Automatic Variable Declarations
    // Implementation
    libAIAI_gf_StartDefenderAI(false, lp_defenders, lp_leashRegion, lp_defendRegion, lp_healOnLeash);
}

int libPVEM_gf_PvEGameDifficulty () {
    // Automatic Variable Declarations
    // Implementation
    return libPVEM_gv_pvEGameDifficulty;
}

text libPVEM_gf_PvEGameDifficultyName (int lp_difficulty) {
    // Automatic Variable Declarations
    int auto6AB13180_val;

    // Implementation
    auto6AB13180_val = lp_difficulty;
    if (auto6AB13180_val == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Normal) {
        return StringExternal("Param/Value/lib_PVEM_DF4C30F8");
    }
    else if (auto6AB13180_val == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Heroic) {
        return StringExternal("Param/Value/lib_PVEM_D1858A62");
    }
    else {
    }
    return null;
}

int libPVEM_gf_PvEDifficultyValueInt (int lp_normal, int lp_heroic) {
    // Automatic Variable Declarations
    int auto6E10BDC8_val;

    // Implementation
    auto6E10BDC8_val = libPVEM_gf_PvEGameDifficulty();
    if (auto6E10BDC8_val == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Normal) {
        return lp_normal;
    }
    else if (auto6E10BDC8_val == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Heroic) {
        return lp_heroic;
    }
    else {
    }
    return 0;
}

fixed libPVEM_gf_PvEDifficultyValueReal (fixed lp_normal, fixed lp_heroic) {
    // Automatic Variable Declarations
    int auto5DB7D1D2_val;

    // Implementation
    auto5DB7D1D2_val = libPVEM_gf_PvEGameDifficulty();
    if (auto5DB7D1D2_val == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Normal) {
        return lp_normal;
    }
    else if (auto5DB7D1D2_val == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Heroic) {
        return lp_heroic;
    }
    else {
    }
    return 0.0;
}

void libPVEM_gf_PvESetGameDifficulty (int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    libPVEM_gv_pvEGameDifficulty = lp_difficulty;
}

void libPVEM_gf_PvEResurrectCheckActiveSpirits (bool lp_targetHeroDead) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_targetHeroDead == true)) {
        libPVEM_gv_pvEResurrectActiveSpirits += 1;
    }
    else {
        libPVEM_gv_pvEResurrectActiveSpirits -= 1;
    }
    if ((libPVEM_gv_pvEResurrectActiveSpirits < 0)) {
        libPVEM_gv_pvEResurrectActiveSpirits = 0;
    }

    if ((libPVEM_gv_pvEResurrectActiveSpirits == 0)) {
        TriggerEnable(libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveStart, false);
        TriggerEnable(libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterrupted, false);
        TriggerEnable(libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, false);
        TriggerEnable(libPVEM_gt_PvEResurrectRevivePlayer, false);
    }
    else {
        TriggerEnable(libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveStart, true);
        TriggerEnable(libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, true);
        TriggerEnable(libPVEM_gt_PvEResurrectRevivePlayer, true);
    }
}

void libPVEM_gf_PvEResurrectAddRemoveDeadHeroArrow (bool lp_addOrRemove, int lp_player) {
    // Variable Declarations
    playergroup lv_playerGroup;
    int lv_arrowIndex;
    unit lv_deadUnitHero;
    unit lv_deadUnitSpirit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Implementation
}

void libPVEM_gf_PvEResurrectRevivePlayerInstantly (int lp_playerIndex, point lp_location) {
    // Variable Declarations
    playergroup lv_vOGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vOGroup = PlayerGroupEmpty();

    // Implementation
    if ((UnitIsAlive(libGame_gv_players[lp_playerIndex].lv_heroUnit) == true)) {
        return ;
    }

    UnitBehaviorRemove(libGame_gv_players[lp_playerIndex].lv_heroUnit, "DeadHeroResurrectIconBehavior", 1);
    UnitGroupClear(libPVEM_gv_pvEResurrectResurrectionCastersUnitGroup[lp_playerIndex]);
    libPVEM_gf_PvEResurrectAddRemoveDeadHeroArrow(false, lp_playerIndex);
    if ((libGame_gv_players[lp_playerIndex].lv_heroRequiresCustomRespawn == true)) {
        libGame_gf_SendEventRequestCustomRespawn(lp_playerIndex, false, lp_location, 100);
    }
    else {
        libGame_gf_HeroDeathRespawnHeroforPlayer(false, lp_playerIndex, lp_location, 100);
    }
    libPVEM_gf_PvEResurrectRevivePlayerCleanup(lp_playerIndex);
    libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(false, lp_playerIndex);
    PlayerGroupAdd(lv_vOGroup, lp_playerIndex);
    libSond_gf_HeroVOPlayResurrected(lp_playerIndex, lv_vOGroup);
    if ((libNtve_gf_PlayerInCinematicMode(lp_playerIndex) == false)) {
        TextExpressionSetToken("Param/Expression/lib_PVEM_D3C8FC72", "A", PlayerName(lp_playerIndex));
        TextExpressionSetToken("Param/Expression/lib_PVEM_D3C8FC72", "B", UnitGetName(libGame_gv_players[lp_playerIndex].lv_heroUnit));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_PVEM_D3C8FC72"));
    }

    libPVEM_gf_PvEResurrectCheckActiveSpirits(false);
}

void libPVEM_gf_PvEResurrectRevivePlayerCleanup (int lp_player) {
    // Variable Declarations
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    UnitRemove(libPVEM_gv_pvEResurrectSpirit[lp_player]);
    libPVEM_gv_pvEResurrectSpirit[lp_player] = null;
    libNtve_gf_StopTimer(libGame_gv_players[lp_player].lv_respawnTimer);
    libNtve_gf_StopTimer(libGame_gv_players[lp_player].lv_respawnSoundCueTimer);
    UnitCreateEffectUnit(lv_heroUnit, "AbilityUseResponseSetDismountDecloak", lv_heroUnit);
    DialogDestroy(libPVEM_gv_pvEResurrectRevivingDialog[lp_player].lv_panel);
    TextTagDestroy(libPVEM_gv_pvEResurrectSpiritTextTag[lp_player]);
    TextTagDestroy(libPVEM_gv_pvEResurrectSpiritTextTagSelf[lp_player]);
    UnitBehaviorRemove(lv_heroUnit, "HallOfStormsHealBuff", 1);
    UnitBehaviorRemove(lv_heroUnit, "HallOfStormsProtectionBuff", 1);
    ActorSend(ActorFromActor(libNtve_gf_MainActorofUnit(lv_heroUnit), "HallOfStormsHealBuffFX"), "Destroy Immediate");
}

void libPVEM_gf_PvEPickupInitializePickup (int lp_activation, string lp_pickup, string lp_carryBehavior) {
    // Automatic Variable Declarations
    int autoE3FB0576_val;

    // Implementation
    libPVEM_gv_pvEPickupsTotalPickupsInitialized += 1;
    libPVEM_gv_pvEPickupsTotal[libPVEM_gv_pvEPickupsTotalPickupsInitialized] = lp_pickup;
    libPVEM_gv_pvEPickupsCarryBehavior[libPVEM_gv_pvEPickupsTotalPickupsInitialized] = lp_carryBehavior;
    autoE3FB0576_val = lp_activation;
    if (autoE3FB0576_val == libPVEM_ge_PvEPickupActivationType_PvEPickupActivationType_Instant) {
        libPVEM_gv_pvEPickupsInstantPickupsInitialized += 1;
        libPVEM_gv_pvEPickupsInstant[libPVEM_gv_pvEPickupsInstantPickupsInitialized] = lp_pickup;
    }
    else if (autoE3FB0576_val == libPVEM_ge_PvEPickupActivationType_PvEPickupActivationType_Target) {
        libPVEM_gv_pvEPickupsTargetPickupsInitialized += 1;
        libPVEM_gv_pvEPickupsTarget[libPVEM_gv_pvEPickupsTargetPickupsInitialized] = lp_pickup;
    }
    else {
    }
}

void libPVEM_gf_PvEPickupSpawnPickup (string lp_type, point lp_position, bool lp_droppedItem) {
    // Variable Declarations
    int lv_itRandomPick;
    int lv_itIterator;

    // Automatic Variable Declarations
    int auto2D02F364_ae;
    const int auto2D02F364_ai = 1;

    // Variable Initialization

    // Implementation
    if ((UnitGroupCount(libPVEM_gv_pvEPickupsItemsOnGround, c_unitCountAll) >= libPVEM_gv_pvEPickupsMaxActivePickups_C)) {
        return ;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_type, c_unitCreateIgnorePlacement, 0, lp_position, null);
    libNtve_gf_CreateModelAtPoint("PVESpecialAbilityPickupSpawnFX", lp_position);
    if ((lp_droppedItem == false)) {
        auto2D02F364_ae = libPVEM_gv_pvEPickupsTotalPickupsInitialized;
        lv_itIterator = 1;
        for ( ; ( (auto2D02F364_ai >= 0 && lv_itIterator <= auto2D02F364_ae) || (auto2D02F364_ai < 0 && lv_itIterator >= auto2D02F364_ae) ) ; lv_itIterator += auto2D02F364_ai ) {
            if ((libPVEM_gv_pvEPickupsTotal[lv_itIterator] == UnitGetType(UnitLastCreated()))) {
                libPVEM_gv_pvEPickupsLastPickupSpawned = libPVEM_gv_pvEPickupsTotal[lv_itIterator];
            }

        }
    }

    if ((libPVEM_gv_pvEPickupPlacingPreplacedPickups == false)) {
        UnitBehaviorAddPlayer(UnitLastCreated(), "PickupRevealer", libStEx_gv_pLAYER_11_ORDER, 1);
    }

    UnitGroupAdd(libPVEM_gv_pvEPickupsItemsOnGround, UnitLastCreated());

    StatEventCreate("Pickup Spawned");
    StatEventAddDataString(StatEventLastCreated(), "Pickup Type", (UnitGetType(UnitLastCreated())));
    StatEventSend(StatEventLastCreated());

}

void libPVEM_gf_PvEPickupSpawnRandom (point lp_position) {
    // Variable Declarations
    int lv_itRandom;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_itRandom = RandomInt(1, libPVEM_gv_pvEPickupsTotalPickupsInitialized);
    while ((libPVEM_gv_pvEPickupsTotal[lv_itRandom] == libPVEM_gv_pvEPickupsLastPickupSpawned)) {
        lv_itRandom = RandomInt(1, libPVEM_gv_pvEPickupsTotalPickupsInitialized);
    }
    libPVEM_gf_PvEPickupSpawnPickup(libPVEM_gv_pvEPickupsTotal[lv_itRandom], lp_position, false);
}

void libPVEM_gf_PvEPickupSpawnRandomInRotation (string lp_specialSpawn, point lp_position) {
    // Variable Declarations
    int lv_itRandom;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libPVEM_gv_pvEPickupsCurrentRotationStep != libPVEM_gv_pvEPickupsRolloverRotationStep)) {
        lv_itRandom = RandomInt(1, libPVEM_gv_pvEPickupsTotalPickupsInitialized);
        while (((libPVEM_gv_pvEPickupsTotal[lv_itRandom] == lp_specialSpawn) || (libPVEM_gv_pvEPickupsTotal[lv_itRandom] == libPVEM_gv_pvEPickupsLastPickupSpawned))) {
            lv_itRandom = RandomInt(1, libPVEM_gv_pvEPickupsTotalPickupsInitialized);
        }
        libPVEM_gf_PvEPickupSpawnPickup(libPVEM_gv_pvEPickupsTotal[lv_itRandom], lp_position, false);
        libPVEM_gv_pvEPickupsCurrentRotationStep += 1;
    }
    else {
        libPVEM_gf_PvEPickupSpawnPickup(lp_specialSpawn, lp_position, false);
        libPVEM_gv_pvEPickupsCurrentRotationStep = 1;
    }
}

void libPVEM_gf_PvEPickupSwapPickup (unit lp_caster, point lp_targetLocation, string lp_abilityBehavior) {
    // Variable Declarations
    int lv_itIterator;

    // Automatic Variable Declarations
    int autoDA0BE90B_ae;
    const int autoDA0BE90B_ai = 1;

    // Variable Initialization

    // Implementation
    autoDA0BE90B_ae = libPVEM_gv_pvEPickupsTotalPickupsInitialized;
    lv_itIterator = 1;
    for ( ; ( (autoDA0BE90B_ai >= 0 && lv_itIterator <= autoDA0BE90B_ae) || (autoDA0BE90B_ai < 0 && lv_itIterator >= autoDA0BE90B_ae) ) ; lv_itIterator += autoDA0BE90B_ai ) {
        if ((lp_abilityBehavior == libPVEM_gv_pvEPickupsCarryBehavior[lv_itIterator])) {
            libPVEM_gf_PvEPickupSpawnPickup(libPVEM_gv_pvEPickupsTotal[lv_itIterator], lp_targetLocation, true);
            UnitBehaviorRemove(lp_caster, lp_abilityBehavior, 1);
            break;
        }

    }
}

void libPVEM_gf_PvEPickupStoreHeldPickups () {
    // Variable Declarations
    int lv_itPlayerIterator;
    int lv_itBehaviorIterator;

    // Automatic Variable Declarations
    const int auto8F7120F0_ae = libCore_gv_bALMaxPlayers;
    const int auto8F7120F0_ai = 1;
    int autoAC7BA3F2_ae;
    const int autoAC7BA3F2_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itPlayerIterator = 1;
    for ( ; ( (auto8F7120F0_ai >= 0 && lv_itPlayerIterator <= auto8F7120F0_ae) || (auto8F7120F0_ai < 0 && lv_itPlayerIterator >= auto8F7120F0_ae) ) ; lv_itPlayerIterator += auto8F7120F0_ai ) {
        if ((libGame_gf_TeamNumberOfPlayer(lv_itPlayerIterator) == libGame_gv_teamOrderIndex_C)) {
            autoAC7BA3F2_ae = libPVEM_gv_pvEPickupsTotalPickupsInitialized;
            lv_itBehaviorIterator = 1;
            for ( ; ( (autoAC7BA3F2_ai >= 0 && lv_itBehaviorIterator <= autoAC7BA3F2_ae) || (autoAC7BA3F2_ai < 0 && lv_itBehaviorIterator >= autoAC7BA3F2_ae) ) ; lv_itBehaviorIterator += autoAC7BA3F2_ai ) {
                if ((UnitBehaviorCount(libGame_gv_players[lv_itPlayerIterator].lv_heroUnit, libPVEM_gv_pvEPickupsCarryBehavior[lv_itBehaviorIterator]) == 1)) {
                    libPVEM_gv_pvEPickupsHeldPickups[lv_itPlayerIterator] = libPVEM_gv_pvEPickupsCarryBehavior[lv_itBehaviorIterator];
                    break;
                }

            }
        }

    }
}

void libPVEM_gf_PvEPickupRestoreHeldPickups () {
    // Variable Declarations
    int lv_itPlayerIterator;

    // Automatic Variable Declarations
    const int auto2AE43986_ae = libCore_gv_bALMaxPlayers;
    const int auto2AE43986_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itPlayerIterator = 1;
    for ( ; ( (auto2AE43986_ai >= 0 && lv_itPlayerIterator <= auto2AE43986_ae) || (auto2AE43986_ai < 0 && lv_itPlayerIterator >= auto2AE43986_ae) ) ; lv_itPlayerIterator += auto2AE43986_ai ) {
        if ((libPVEM_gv_pvEPickupsHeldPickups[lv_itPlayerIterator] != null)) {
            UnitBehaviorAdd(libGame_gv_players[lv_itPlayerIterator].lv_heroUnit, libPVEM_gv_pvEPickupsHeldPickups[lv_itPlayerIterator], libGame_gv_players[lv_itPlayerIterator].lv_heroUnit, 1);
        }

    }
}

void libPVEM_gf_PvESpawnNPCMinions (string lp_type, int lp_player, point lp_pos, fixed lp_angle, int lp_flags) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_unitType = lp_type;
    if ((lv_unitType == "ZergZergling")) {
        libPVEM_gv_pvENPCMinionZerglingIndex += 1;
        if ((libPVEM_gv_pvENPCMinionZerglingIndex == 4)) {
            libPVEM_gv_pvENPCMinionZerglingIndex = 0;
        }
        else {
            lv_unitType = "ZergZerglingNotMinion";
        }
    }

    UnitCreate(1, lv_unitType, lp_flags, lp_player, lp_pos, lp_angle, null);
    UnitGroupAdd(libPVEM_gv_pvENPCMinions, UnitLastCreated());
    UnitDestroyAIThinkTree(UnitLastCreated());
    UnitBehaviorRemove(UnitLastCreated(), "50PercentCCReduction", 1);
}

void libPVEM_gf_PvESetNPCHeroStats (string lp_hero, int lp_player, fixed lp_health) {
    // Variable Declarations
    string lv_unitActor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_health != 0.0)) {
        CatalogFieldValueSetFixed(c_gameCatalogUnit, lp_hero, "LifeMax", lp_player, lp_health);
        CatalogFieldValueSetFixed(c_gameCatalogUnit, lp_hero, "LifeStart", lp_player, lp_health);
    }

}

void libPVEM_gf_PvESpawnNPCHero (string lp_hero, point lp_spawnLocation, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    libPVEM_gf_PvESpawnNPCHeroWithXP(lp_hero, lp_spawnLocation, libCore_gf_GetTotalXPForLevel(lp_level));
}

void libPVEM_gf_PvESpawnNPCHeroWithXP (string lp_hero, point lp_spawnLocation, fixed lp_xP) {
    // Variable Declarations
    int lv_player;
    int lv_heroIndex;
    bool lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCore_gv_sYSHeroStartLevel != 1)) {
        libCore_gv_sYSHeroStartLevel = 1;
    }

    lv_heroIndex = libPVEM_gf_PvENPCHeroIndex(lp_hero);
    if ((lv_heroIndex <= 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_PVEM_3C33352B"), true);
        return ;
    }

    lv_player = libPVEM_gv_pvENPCHeroes[lv_heroIndex].lv_player;
    libGame_gv_players[lv_player].lv_suppressKillLogwhenKilled = false;
    if ((libPVEM_gv_pvENPCHeroes[lv_heroIndex].lv_skin != null)) {
        PlayerSetSkin(lv_player, libPVEM_gv_pvENPCHeroes[lv_heroIndex].lv_skin);
    }

    libGame_gv_players[lv_player].lv_spawnPoint = lp_spawnLocation;
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero(lp_hero), libCore_gf_DataSkinsGetSkinIndexFromSkinLink(libPVEM_gv_pvENPCHeroes[lv_heroIndex].lv_skin), 0, lp_xP, lv_player, 0);
    libPVEM_gv_pvENPCHeroes[lv_heroIndex].lv_heroUnit = libGame_gv_players[lv_player].lv_heroUnit;
    UnitBehaviorAdd(libPVEM_gv_pvENPCHeroes[lv_heroIndex].lv_heroUnit, "HackedMountSuppressor", libPVEM_gv_pvENPCHeroes[lv_heroIndex].lv_heroUnit, 1);
    UnitBehaviorAdd(libPVEM_gv_pvENPCHeroes[lv_heroIndex].lv_heroUnit, "CoreDetection", libPVEM_gv_pvENPCHeroes[lv_heroIndex].lv_heroUnit, 1);
    libNtve_gf_SendActorMessageToUnit(libPVEM_gv_pvENPCHeroes[lv_heroIndex].lv_heroUnit, libNtve_gf_SetScale(libPVEM_gv_pvENPCHeroResizeRatio, libPVEM_gv_pvENPCHeroResizeRatio, libPVEM_gv_pvENPCHeroResizeRatio, 0.0));
    libPVEM_gf_PvESendEventNPCHeroSpawned(lv_player, libPVEM_gv_pvENPCHeroes[lv_heroIndex].lv_heroUnit);
}

void libPVEM_gf_PvEPrepareNPCHero (string lp_hero, string lp_skin) {
    // Variable Declarations
    int lv_index;
    int lv_itIndex;
    string lv_unitTypeString;
    string lv_heroUnitType;

    // Automatic Variable Declarations
    int auto939F6B83_ae;
    const int auto939F6B83_ai = 1;

    // Variable Initialization
    lv_unitTypeString = "";

    // Implementation
    lv_index = libPVEM_gf_PvENPCHeroIndex(lp_hero);
    if ((lv_index <= 0)) {
        auto939F6B83_ae = libPVEM_gv_pvENPCHeroesCount;
        lv_itIndex = 1;
        for ( ; ( (auto939F6B83_ai >= 0 && lv_itIndex <= auto939F6B83_ae) || (auto939F6B83_ai < 0 && lv_itIndex >= auto939F6B83_ae) ) ; lv_itIndex += auto939F6B83_ai ) {
            if ((libPVEM_gv_pvENPCHeroes[lv_itIndex].lv_hero == null)) {
                lv_index = lv_itIndex;
                break;
            }

        }
        if ((lv_index <= 0)) {
            if ((libPVEM_gv_pvENPCHeroesCount >= libPVEM_gv_pvENPCHeroMaxCount_C)) {
                TriggerDebugOutput(1, StringExternal("Param/Value/lib_PVEM_9D4502DB"), true);
                return ;
            }

            libPVEM_gv_pvENPCHeroesCount += 1;
            lv_index = libPVEM_gv_pvENPCHeroesCount;
        }

        libPVEM_gv_pvENPCHeroes[lv_index].lv_hero = lp_hero;
    }

    PreloadObject(c_gameCatalogHero, (libPVEM_gv_pvENPCHeroes[lv_index].lv_hero), false);
    lv_unitTypeString = CatalogFieldValueGet(c_gameCatalogHero, lp_hero, "Unit", c_playerAny);
    libPVEM_gv_pvENPCHeroes[lv_index].lv_unitType = (lv_unitTypeString);
    libPVEM_gv_pvENPCHeroes[lv_index].lv_skin = lp_skin;
    libPVEM_gv_pvENPCHeroes[lv_index].lv_player = PlayerGroupPlayer(libPVEM_gf_PvEPlayersOnComputerTeam(false), lv_index);
    libUIUI_gf_UIDebugPanelCleanUpHeroForPlayer(libPVEM_gv_pvENPCHeroes[lv_index].lv_player);
    libPVEM_gv_pvEHeroCatalogChangePlayerIndex = lv_index;
    TriggerExecute(libPVEM_gv_pvEHeroCatalogChangeCallback, true, false);
    libCore_gf_DataLoadHeroDataIntoIndex(lp_hero, libPVEM_gv_pvENPCHeroes[lv_index].lv_player);
    libCore_gf_DataLoadSkinDataIntoIndex(lp_skin, libPVEM_gv_pvENPCHeroes[lv_index].lv_player);
    PreloadObject(c_gameCatalogSkin, (libPVEM_gv_pvENPCHeroes[lv_index].lv_skin), false);
    libGame_gv_players[libPVEM_gv_pvENPCHeroes[lv_index].lv_player].lv_disableMount = true;
    if ((libPVEM_gv_pvENPCHeroes[lv_index].lv_radiusScaledHero != lp_hero)) {
        libPVEM_gv_pvENPCHeroes[lv_index].lv_radiusScaledHero = lp_hero;
        CatalogFieldValueSet(c_gameCatalogUnit, libPVEM_gv_pvENPCHeroes[lv_index].lv_unitType, "Radius", libPVEM_gv_pvENPCHeroes[lv_index].lv_player, FixedToString((StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, libPVEM_gv_pvENPCHeroes[lv_index].lv_unitType, "Radius", libCore_gv_cOMPUTER_Neutral)) * libPVEM_gv_pvENPCHeroResizeRatio), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, libPVEM_gv_pvENPCHeroes[lv_index].lv_unitType, "InnerRadius", libPVEM_gv_pvENPCHeroes[lv_index].lv_player, FixedToString((StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, libPVEM_gv_pvENPCHeroes[lv_index].lv_unitType, "InnerRadius", libCore_gv_cOMPUTER_Neutral)) * libPVEM_gv_pvENPCHeroResizeRatio), c_fixedPrecisionAny));
    }

}

void libPVEM_gf_PvEResetNPCHero (string lp_hero) {
    // Variable Declarations
    int lv_index;
    string lv_unitTypeString;
    string lv_heroUnitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitTypeString = "";

    // Implementation
    lv_index = libPVEM_gf_PvENPCHeroIndex(lp_hero);
    if ((lv_index <= 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_PVEM_0B85984B"), true);
        return ;
    }

    libPVEM_gv_pvENPCHeroes[lv_index].lv_hero = null;
    libPVEM_gv_pvENPCHeroes[lv_index].lv_unitType = null;
    libUIUI_gf_UIDebugPanelCleanUpHeroForPlayer(libPVEM_gv_pvENPCHeroes[lv_index].lv_player);
}

int libPVEM_gf_PvENPCHeroPlayerFromUnitType (string lp_unitType) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index = libPVEM_gf_PvENPCHeroIndexFromUnitType(lp_unitType);
    if ((lv_index <= 0)) {
        return -1;
    }

    return libPVEM_gv_pvENPCHeroes[lv_index].lv_player;
}

unit libPVEM_gf_PvENPCHeroUnit (string lp_hero) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index = libPVEM_gf_PvENPCHeroIndex(lp_hero);
    if ((lv_index <= 0)) {
        return null;
    }

    return libPVEM_gv_pvENPCHeroes[lv_index].lv_heroUnit;
}

string libPVEM_gf_PvENPCHeroFromUnitType (string lp_heroUnitType) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index = libPVEM_gf_PvENPCHeroIndexFromUnitType(lp_heroUnitType);
    if ((lv_index <= 0)) {
        return null;
    }

    return libPVEM_gv_pvENPCHeroes[lv_index].lv_hero;
}

string libPVEM_gf_PvENPCHeroUnitType (string lp_hero) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index = libPVEM_gf_PvENPCHeroIndex(lp_hero);
    if ((lv_index <= 0)) {
        return null;
    }

    return libPVEM_gv_pvENPCHeroes[lv_index].lv_unitType;
}

int libPVEM_gf_PvENPCHeroIndexFromPlayer (int lp_player) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto74AB6D3C_ae;
    const int auto74AB6D3C_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_player < 1) && (lp_player > libCore_gv_bALMaxEnginePlayerCount)) {
        return -1;
    }

    auto74AB6D3C_ae = libPVEM_gv_pvENPCHeroesCount;
    lv_itIndex = 1;
    for ( ; ( (auto74AB6D3C_ai >= 0 && lv_itIndex <= auto74AB6D3C_ae) || (auto74AB6D3C_ai < 0 && lv_itIndex >= auto74AB6D3C_ae) ) ; lv_itIndex += auto74AB6D3C_ai ) {
        if ((libPVEM_gv_pvENPCHeroes[lv_itIndex].lv_player == lp_player)) {
            return lv_itIndex;
        }

    }
    return -1;
}

int libPVEM_gf_PvENPCHeroIndexFromUnitType (string lp_heroUnitType) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int autoC117795D_ae;
    const int autoC117795D_ai = 1;

    // Variable Initialization

    // Implementation
    autoC117795D_ae = libPVEM_gv_pvENPCHeroesCount;
    lv_itIndex = 1;
    for ( ; ( (autoC117795D_ai >= 0 && lv_itIndex <= autoC117795D_ae) || (autoC117795D_ai < 0 && lv_itIndex >= autoC117795D_ae) ) ; lv_itIndex += autoC117795D_ai ) {
        if ((libPVEM_gv_pvENPCHeroes[lv_itIndex].lv_unitType == lp_heroUnitType)) {
            return lv_itIndex;
        }

    }
    return -1;
}

int libPVEM_gf_PvENPCHeroIndex (string lp_hero) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto6F6A199E_ae;
    const int auto6F6A199E_ai = 1;

    // Variable Initialization

    // Implementation
    auto6F6A199E_ae = libPVEM_gv_pvENPCHeroesCount;
    lv_itIndex = 1;
    for ( ; ( (auto6F6A199E_ai >= 0 && lv_itIndex <= auto6F6A199E_ae) || (auto6F6A199E_ai < 0 && lv_itIndex >= auto6F6A199E_ae) ) ; lv_itIndex += auto6F6A199E_ai ) {
        if ((libPVEM_gv_pvENPCHeroes[lv_itIndex].lv_hero == lp_hero)) {
            return lv_itIndex;
        }

    }
    return 0;
}

void libPVEM_gf_PvENPCHeroSpawned (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libPVEM_gv_pvEEventIDNPCHeroSpawn_C);
}

void libPVEM_gf_PvESendEventNPCHeroSpawned (int lp_player, unit lp_heroUnit) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libPVEM_gv_pvEEventIDNPCHeroSpawn_C, libPVEM_gv_pvEEventParamNPCHeroSpawnPlayer_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libPVEM_gv_pvEEventIDNPCHeroSpawn_C, libPVEM_gv_pvEEventParamNPCHeroSpawnHeroUnit_C), lp_heroUnit);
    TriggerSendEvent(libPVEM_gv_pvEEventIDNPCHeroSpawn_C);
}

int libPVEM_gf_PvENPCHeroSpawnedPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libPVEM_gv_pvEEventIDNPCHeroSpawn_C, libPVEM_gv_pvEEventParamNPCHeroSpawnPlayer_C));
}

unit libPVEM_gf_PvENPCHeroSpawnedUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libPVEM_gv_pvEEventIDNPCHeroSpawn_C, libPVEM_gv_pvEEventParamNPCHeroSpawnHeroUnit_C));
}

playergroup libPVEM_gf_PvEPlayersOnTeam (int lp_team, bool lp_includeNPCPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return libGame_gf_PlayersOnTeamHeroes(lp_team, lp_includeNPCPlayer);
}

playergroup libPVEM_gf_PvEPlayersOnHumanTeam (bool lp_includeNPCPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return libPVEM_gf_PvEPlayersOnTeam(libPVEM_gv_pvETeamHuman_C, lp_includeNPCPlayer);
}

playergroup libPVEM_gf_PvEPlayersOnComputerTeam (bool lp_includeNPCPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return libPVEM_gf_PvEPlayersOnTeam(libPVEM_gv_pvETeamComputer_C, lp_includeNPCPlayer);
}

bool libPVEM_gf_PvEPlayerIsValidHumanTeamPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(libPVEM_gf_PvEPlayersOnHumanTeam(false), lp_player) == true) && (PlayerStatus(lp_player) != c_playerStatusUnused) && (PlayerType(lp_player) != c_playerTypeHostile)) {
        return true;
    }

    return false;
}

bool libPVEM_gf_PvEPlayerIsValidHumanPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPVEM_gf_PvEPlayerIsValidHumanTeamPlayer(lp_player) == true) && (PlayerType(lp_player) == c_playerTypeUser)) {
        return true;
    }

    return false;
}

int libPVEM_gf_ComputerPlayerInTeam (int lp_team) {
    // Automatic Variable Declarations
    int auto11881786_val;

    // Implementation
    auto11881786_val = lp_team;
    if (auto11881786_val == libPVEM_gv_pvETeamHuman_C) {
        return libCore_gv_cOMPUTER_TeamOrder;
    }
    else if (auto11881786_val == libPVEM_gv_pvETeamComputer_C) {
        return libCore_gv_cOMPUTER_TeamChaos;
    }
    else {
    }
    return 0;
}

bool libPVEM_gf_PvEPlayerHeroIsDead (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitIsAlive(libGame_gv_players[lp_player].lv_heroUnit) == true) && (UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "Dead") == false)) {
        return false;
    }

    return true;
}

void libPVEM_gf_PvEUpdateTeamLevel (int lp_teamIndex, int lp_newLevel) {
    // Variable Declarations
    int lv_itPlayer;
    fixed lv_xPValue;

    // Automatic Variable Declarations
    playergroup auto9EDFC47E_g;

    // Variable Initialization

    // Implementation
    libPVEM_gv_pvENPCHeroLevel = lp_newLevel;
    auto9EDFC47E_g = libPVEM_gf_PvEPlayersOnTeam(lp_teamIndex, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto9EDFC47E_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	lv_xPValue = (libCore_gf_GetTotalXPForLevel(lp_newLevel) - UnitGetPropertyFixed(libGame_gv_players[lv_itPlayer].lv_heroUnit, c_unitPropXP, c_unitPropCurrent));
        if ((lv_xPValue >= 1)) {
            libGame_gf_GrantXPToPlayer(lv_xPValue, lv_itPlayer, libGame_ge_XPSources_Debug);
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_PVEM_8E480156", "A", IntToText(lp_teamIndex));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_PVEM_8E480156"), true);
            return ;
        }
    }
}

bool libPVEM_gf_PvEPlayerHeroesAreNearby (point lp_location) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;

    // Automatic Variable Declarations
    playergroup auto9CA35189_g;
    unitgroup autoB7588DE3_g;
    int autoB7588DE3_u;

    // Variable Initialization

    // Implementation
    auto9CA35189_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto9CA35189_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	autoB7588DE3_g = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
        autoB7588DE3_u = UnitGroupCount(autoB7588DE3_g, c_unitCountAll);
        for (;; autoB7588DE3_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(autoB7588DE3_g, autoB7588DE3_u);
            if (lv_itUnit == null) { break; }
            if ((UnitIsAlive(lv_itUnit) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_itUnit), lp_location) < 12.0)) {
                return true;
            }

        }
    }
    return false;
}

void libPVEM_gf_AwardXPForNPCKill (unit lp_killedUnit, int lp_killedUnitPlayer, int lp_killedUnitClassification, int lp_killingPlayer, fixed lp_killedUnitXPAward) {
    // Variable Declarations
    playergroup lv_killCreditGroup;
    unit lv_itUnit;
    int lv_itPlayer;
    unitgroup lv_nearbyUnits;
    int lv_creditPlayer;
    playergroup lv_xPAwardGroup;

    // Automatic Variable Declarations
    unitgroup autoED2F3891_g;
    int autoED2F3891_u;
    playergroup autoF6897E69_g;
    playergroup auto7FC0AD7C_g;
    playergroup autoC236D394_g;
    playergroup autoE7203753_g;

    // Variable Initialization
    lv_killCreditGroup = PlayerGroupEmpty();
    lv_nearbyUnits = UnitGroupEmpty();
    lv_xPAwardGroup = PlayerGroupEmpty();

    // Implementation
    if (((libCore_gv_sYSXPOn == false) || (lp_killedUnitXPAward <= 0.0) || (UnitHasBehavior2(lp_killedUnit, "UnitGivesNoXP") == true))) {
        return ;
    }

    if ((PlayerGroupHasPlayer(libPVEM_gf_PvEPlayersOnHumanTeam(false), lp_killingPlayer) == true)) {
        PlayerGroupAdd(lv_killCreditGroup, lp_killingPlayer);
        PlayerGroupAdd(lv_xPAwardGroup, lp_killingPlayer);
    }

    lv_nearbyUnits = UnitGroupSearch(null, lp_killedUnitPlayer, UnitGetPosition(lp_killedUnit), libCore_gv_bALXPRadius, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoED2F3891_g = lv_nearbyUnits;
    autoED2F3891_u = UnitGroupCount(autoED2F3891_g, c_unitCountAll);
    for (;; autoED2F3891_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoED2F3891_g, autoED2F3891_u);
        if (lv_itUnit == null) { break; }
        if (((UnitHasBehavior2(lv_itUnit, "EarnsXP") == true) || ((UnitTypeTestAttribute(UnitGetType(lv_itUnit), c_unitAttributeHeroic) == true) && (UnitHasBehavior2(lv_itUnit, "AbathurUltimateEvolutionVehicleCasterBehavior") == false) && (UnitTestState(lv_itUnit, c_unitStateHallucination) == false)))) {
            lv_creditPlayer = UnitGetOwner(lv_itUnit);
            if ((PlayerGroupHasPlayer(libPVEM_gf_PvEPlayersOnHumanTeam(false), lv_creditPlayer) == true)) {
                PlayerGroupAdd(lv_xPAwardGroup, lv_creditPlayer);
            }

            if ((lv_creditPlayer == libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_creditPlayer)].lv_choPlayer)) {
                PlayerGroupAdd(lv_xPAwardGroup, libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_creditPlayer)].lv_gallPlayer);
            }
            else {
                if ((lv_creditPlayer == libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_creditPlayer)].lv_gallPlayer)) {
                    PlayerGroupAdd(lv_xPAwardGroup, libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_creditPlayer)].lv_choPlayer);
                }

            }
        }

    }
    autoF6897E69_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoF6897E69_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((DistanceBetweenPoints(CameraGetTarget(lv_itPlayer), UnitGetPosition(lp_killedUnit)) <= libCore_gv_bALXPRadius)) {
            PlayerGroupAdd(lv_killCreditGroup, lv_itPlayer);
        }

    }
    if ((libSprt_gv_dEBUGXPTextEnabled == true)) {
        TextExpressionSetToken("Param/Expression/lib_PVEM_6A36C84F", "A", UnitTypeGetName(UnitGetType(lp_killedUnit)));
        TextExpressionSetToken("Param/Expression/lib_PVEM_6A36C84F", "B", FixedToText(lp_killedUnitXPAward, c_fixedPrecisionAny));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_PVEM_6A36C84F"), true);
    }

    auto7FC0AD7C_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto7FC0AD7C_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	libGame_gf_GrantXPToPlayer(lp_killedUnitXPAward, lv_itPlayer, lp_killedUnitClassification);
    }
    autoC236D394_g = lv_xPAwardGroup;
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoC236D394_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	libGame_gf_ScoreValuesRecordXPContributionForPlayer(lv_itPlayer, lp_killedUnitXPAward, true);
    }
    autoE7203753_g = lv_killCreditGroup;
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoE7203753_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((lv_itPlayer == lp_killingPlayer)) {
            SoundPlayOnUnitForPlayer(SoundLink("XP_Gain_Direct", -1), c_maxPlayers, PlayerGroupSingle(lv_itPlayer), lp_killedUnit, 0.0, 100.0, 0.0);
        }
        else {
            SoundPlayOnUnitForPlayer(SoundLink("XP_Gain_Indirect", -1), c_maxPlayers, PlayerGroupSingle(lv_itPlayer), lp_killedUnit, 0.0, 100.0, 0.0);
        }
        if ((lp_killedUnitClassification != libGame_ge_XPSources_Structure)) {
            libUIUI_gf_UIFloatingCombatTextH16MidXP(lv_itPlayer, lp_killedUnit, libCore_ge_FloatingTextType_XPSmall, FixedToInt(lp_killedUnitXPAward));
        }
        else {
            libUIUI_gf_UIFloatingCombatTextH16MidXP(lv_itPlayer, lp_killedUnit, libCore_ge_FloatingTextType_XPLarge, FixedToInt(lp_killedUnitXPAward));
        }
    }
}

void libPVEM_gf_PvEVictoryDefeatEffect (bool lp_victory) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_winningTeam;
    int lv_losingTeam;
    const fixed lv_endGameTimeDelay = 7.0;

    // Automatic Variable Declarations
    playergroup autoB2DFF775_g;
    playergroup autoA8114404_g;
    playergroup auto1783CDDA_g;
    const int auto86F1E917_ae = libCore_gv_bALMaxPlayers;
    const int auto86F1E917_ai = 1;

    // Variable Initialization

    // Implementation
    libGame_gf_SendEventGameOverEvent();
    if ((lp_victory == true)) {
        lv_winningTeam = libGame_gv_teamOrderIndex_C;
        lv_losingTeam = libGame_gv_teamChaosIndex_C;
    }
    else {
        lv_winningTeam = libGame_gv_teamChaosIndex_C;
        lv_losingTeam = libGame_gv_teamOrderIndex_C;
    }
    autoB2DFF775_g = libPVEM_gf_PvEPlayersOnTeam(lv_winningTeam, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoB2DFF775_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
            CameraLockInput(lv_itPlayer, true);
            libGame_gv_players[lv_itPlayer].lv_victoryDefeat = c_gameOverVictory;
        }

    }
    autoA8114404_g = libPVEM_gf_PvEPlayersOnTeam(lv_losingTeam, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoA8114404_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
            CameraLockInput(lv_itPlayer, true);
            libGame_gv_players[lv_itPlayer].lv_victoryDefeat = c_gameOverDefeat;
        }

    }
    TriggerEnable(libGame_gt_XPTrickle, false);
    auto1783CDDA_g = libCore_gv_activeHumanPlayers;
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto1783CDDA_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	libUIUI_gf_UIHeroConsoleShowHideForPlayer(false, lv_itPlayer);
        UISetMode(libCore_gv_playerGroupFromPlayer[lv_itPlayer], c_uiModeFullscreen, c_transitionDurationImmediate);
        DialogControlSetVisible(libUIUI_gv_uIGameUIHandles.lv_talentsButton, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
        UISetFrameVisible(libCore_gv_playerGroupFromPlayer[lv_itPlayer], c_syncFrameTypeMinimapPanel, false);
        libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer(false, lv_itPlayer);
        libUIUI_gf_UIGameUIShowHideConsolePanelForPlayer(false, lv_itPlayer);
    }
    DialogControlSetVisible(libUIUI_gv_uIObserverUI.lv_mainPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    if ((libGame_gv_gameOverCallback != null)) {
        TriggerExecute(libGame_gv_gameOverCallback, true, true);
    }

    libPVEU_gf_PvEUIDisplayGameOverScreen(lp_victory);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeStatusUI, false);
    if ((libGame_gv_endofMatchAwardsDisabled == true)) {
        Wait(lv_endGameTimeDelay, c_timeGame);
    }

    lv_itPlayer = 1;
    for ( ; ( (auto86F1E917_ai >= 0 && lv_itPlayer <= auto86F1E917_ae) || (auto86F1E917_ai < 0 && lv_itPlayer >= auto86F1E917_ae) ) ; lv_itPlayer += auto86F1E917_ai ) {
        if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
            libPVEM_gf_PvEEndGameForPlayer(lv_itPlayer);
        }

    }
    GameSetReplayKeyframesEnabled(false);
    Wait(10.0, c_timeGame);
}

void libPVEM_gf_PvEVictoryDefeat (bool lp_victory, region lp_victoryArea, point lp_victoryLocation) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_itHeroUnit;
    int lv_winningTeam;

    // Automatic Variable Declarations
    const int autoAC679FCA_ae = libCore_gv_bALMaxPlayers;
    const int autoAC679FCA_ai = 1;
    unitgroup autoD7CD1F3F_g;
    int autoD7CD1F3F_u;
    playergroup auto743879D6_g;
    playergroup auto967A0373_g;
    unitgroup autoB6DE536C_g;
    int autoB6DE536C_u;
    unitgroup autoCC13B469_g;
    int autoCC13B469_u;
    unitgroup auto81F36931_g;
    int auto81F36931_u;
    playergroup autoDB6239D5_g;

    // Variable Initialization
    lv_winningTeam = -1;

    // Implementation
    libGame_gv_gameOver = true;
    if ((lp_victory == true)) {
        libPVEM_gv_pvEGameOverResult = c_gameOverVictory;
    }
    else {
        libPVEM_gv_pvEGameOverResult = c_gameOverDefeat;
    }
    TimerPause(libGame_gv_gameTimer, true);
    TimerPause(libGame_gv_matchGameplayTimer, true);
    UnitPauseAll(true);
    lv_itPlayer = 1;
    for ( ; ( (autoAC679FCA_ai >= 0 && lv_itPlayer <= autoAC679FCA_ae) || (autoAC679FCA_ai < 0 && lv_itPlayer >= autoAC679FCA_ae) ) ; lv_itPlayer += autoAC679FCA_ai ) {
        autoD7CD1F3F_g = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
        autoD7CD1F3F_u = UnitGroupCount(autoD7CD1F3F_g, c_unitCountAll);
        for (;; autoD7CD1F3F_u -= 1) {
            lv_itHeroUnit = UnitGroupUnitFromEnd(autoD7CD1F3F_g, autoD7CD1F3F_u);
            if (lv_itHeroUnit == null) { break; }
            libNtve_gf_ChangeUnitDamage(lv_itHeroUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
            libNtve_gf_ChangeUnitDamage(lv_itHeroUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        }
    }
    if ((lp_victoryArea != null)) {
        VisRevealerCreate(libCore_gv_cOMPUTER_TeamOrder, lp_victoryArea);
    }

    auto743879D6_g = libCore_gv_activeHumanPlayers;
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto743879D6_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	CameraLockInput(lv_itPlayer, true);
        PlayerOptionOverride(lv_itPlayer, "camerafollow", "0");
        libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(false, lv_itPlayer);
    }
    Wait(0.0625, c_timeGame);
    auto967A0373_g = libCore_gv_activeHumanPlayers;
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto967A0373_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	CameraFollowUnitGroup(lv_itPlayer, CameraFollowUnitGroupGet(lv_itPlayer), false, false);
        if ((lp_victoryLocation != null)) {
            libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_itPlayer, lp_victoryLocation, libGame_gv_gameOver_CameraPanTime_C, -1, 10, false);
        }

    }
    if ((lp_victoryLocation != null)) {
        libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(libCore_gv_oBSERVER_ObserverUIPlayer, lp_victoryLocation, libGame_gv_gameOver_CameraPanTime_C, -1, 10, false);
    }

    SetTalentsEnabled(false);
    libGame_gv_gameOver_DetermineWinningTeamHasRun = true;
    if ((lp_victory == true)) {
        lv_winningTeam = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_winningTeam = libGame_gv_teamChaosIndex_C;
    }
    TriggerQueueClear(c_triggerQueueRemove);
    TransmissionClearAll();
    libSond_gf_MuteMostSoundChannelsForGameOverState(true);
    libSond_gf_SoundtrackSetUniqueSoundtrackState(false);
    if ((lp_victory == true)) {
        libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_Stinger_Victory", libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup);
    }
    else {
        libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_Stinger_Defeat", libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup);
    }
    autoB6DE536C_g = libGame_gv_heroes;
    autoB6DE536C_u = UnitGroupCount(autoB6DE536C_g, c_unitCountAll);
    for (;; autoB6DE536C_u -= 1) {
        lv_itHeroUnit = UnitGroupUnitFromEnd(autoB6DE536C_g, autoB6DE536C_u);
        if (lv_itHeroUnit == null) { break; }
        if ((UnitGetType(lv_itHeroUnit) == "HeroTassadar")) {
            UnitBehaviorAdd(lv_itHeroUnit, "TassadarDistortionBeamSuppression", lv_itHeroUnit, 1);
        }

        if ((UnitGetType(lv_itHeroUnit) == "HeroDiablo")) {
            UnitBehaviorRemove(lv_itHeroUnit, "DiabloLightningBreathActive", 1);
        }

    }
    if ((lp_victoryArea != null)) {
        autoCC13B469_g = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamOrder, c_unitAllianceAlly, lp_victoryArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoCC13B469_u = UnitGroupCount(autoCC13B469_g, c_unitCountAll);
        for (;; autoCC13B469_u -= 1) {
            lv_itHeroUnit = UnitGroupUnitFromEnd(autoCC13B469_g, autoCC13B469_u);
            if (lv_itHeroUnit == null) { break; }
            UnitBehaviorRemove(lv_itHeroUnit, "Mounted", 1);
            libNtve_gf_SendActorMessageToUnit(lv_itHeroUnit, "Signal GameWon");
        }
        auto81F36931_g = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamOrder, c_unitAllianceEnemy, lp_victoryArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto81F36931_u = UnitGroupCount(auto81F36931_g, c_unitCountAll);
        for (;; auto81F36931_u -= 1) {
            lv_itHeroUnit = UnitGroupUnitFromEnd(auto81F36931_g, auto81F36931_u);
            if (lv_itHeroUnit == null) { break; }
            UnitBehaviorRemove(lv_itHeroUnit, "Mounted", 1);
            libNtve_gf_SendActorMessageToUnit(lv_itHeroUnit, "Signal GameLost");
        }
    }

    if ((lp_victoryLocation != null)) {
        Wait(libGame_gv_gameOver_CameraPanTime_C, c_timeGame);
    }

    autoDB6239D5_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoDB6239D5_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	libGame_gf_AnnouncementClearQueueForPlayer(lv_itPlayer);
    }
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeObjectivePanel, false);
    libGame_gv_announcement_SystemEnabled = false;
    libGame_gf_PlayVictoryDefeatVO(lv_winningTeam);
    libPVEM_gf_PvEVictoryDefeatEffect(lp_victory);
}

void libPVEM_gf_PvEEndGameForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libGame_gf_ScoreValuesReportForPlayer(lp_player);
    libGame_gv_players[lp_player].lv_gameEndedForPlayer = true;
    GameOver(lp_player, libGame_gv_players[lp_player].lv_victoryDefeat, false, false);
}

void libPVEM_gf_PvEVictory (region lp_cameraRevealRegion, point lp_cameraTarget) {
    // Automatic Variable Declarations
    // Implementation
    libPVEM_gf_PvEVictoryDefeat(true, lp_cameraRevealRegion, lp_cameraTarget);
    KickFromGame(PlayerGroupAll());
}

void libPVEM_gf_PvERemoveDeathModelsInRegion (region lp_region) {
    // Variable Declarations
    actor lv_actorRegion;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_region);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, "Destroy", "Model", "ScopeContains _Clearable");
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, "Destroy", "Unit", "ScopeContains _Clearable");
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

void libPVEM_gf_PvEDebugSelectPlayerHero (int lp_player, int lp_playerToSelect, bool lp_exclude) {
    // Automatic Variable Declarations
    // Implementation
    ConsoleCommand(("AllianceControl " + IntToString(lp_playerToSelect) + " " + IntToString(lp_player) + " 1"), true, true);
    if ((lp_exclude == true)) {
        UnitClearSelection(lp_player);
    }

    UnitSelect(libGame_gv_players[lp_playerToSelect].lv_heroUnit, lp_player, true);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include PvE Mod
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_IncludePvEMod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_IncludePvEMod_Init () {
    libPVEM_gt_IncludePvEMod = TriggerCreate("libPVEM_gt_IncludePvEMod_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Attack Wave Routine
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEAttackWaveRoutine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itWaveIndex;

    // Automatic Variable Declarations
    int autoA9B23E01_ae;
    const int autoA9B23E01_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        while (!((libPVEM_gv_pvEAttackWavePaused == false))) {
            Wait(0.5, c_timeGame);
        }
        autoA9B23E01_ae = libPVEM_gv_pvEAttackWaveCount;
        lv_itWaveIndex = 1;
        for ( ; ( (autoA9B23E01_ai >= 0 && lv_itWaveIndex <= autoA9B23E01_ae) || (autoA9B23E01_ai < 0 && lv_itWaveIndex >= autoA9B23E01_ae) ) ; lv_itWaveIndex += autoA9B23E01_ai ) {
            libPVEM_gf_PvEAttackWaveRoutineSingleWave(lv_itWaveIndex);
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEAttackWaveRoutine_Init () {
    libPVEM_gt_PvEAttackWaveRoutine = TriggerCreate("libPVEM_gt_PvEAttackWaveRoutine_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Player Hero AI Init 
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEPlayerHeroAIInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoFDCEB3E0_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoFDCEB3E0_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoFDCEB3E0_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((libPVEM_gf_PvEPlayerIsValidHumanPlayer(lv_itPlayer) == true)) {
        }
        else {
            AddUnitOfInterest(libGame_gv_players[lv_itPlayer].lv_heroUnit, 500.0, 0.0, "EscortAllyHero", libNtve_ge_GoalTeam_Both, 0);
        }
    }
    TriggerEnable(libPVEM_gt_PvEPlayerHeroAIPlayerJoins, true);
    TriggerEnable(libPVEM_gt_PvEPlayerHeroAIPlayerLeaves, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEPlayerHeroAIInit_Init () {
    libPVEM_gt_PvEPlayerHeroAIInit = TriggerCreate("libPVEM_gt_PvEPlayerHeroAIInit_Func");
    TriggerAddEventTimer(libPVEM_gt_PvEPlayerHeroAIInit, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Player Hero AI Player Joins
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEPlayerHeroAIPlayerJoins_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPVEM_gf_PvEPlayerIsValidHumanPlayer(EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AddUnitOfInterest(libGame_gv_players[EventPlayer()].lv_heroUnit, 500.0, 0.0, "EscortAllyHero", libNtve_ge_GoalTeam_Both, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEPlayerHeroAIPlayerJoins_Init () {
    libPVEM_gt_PvEPlayerHeroAIPlayerJoins = TriggerCreate("libPVEM_gt_PvEPlayerHeroAIPlayerJoins_Func");
    TriggerEnable(libPVEM_gt_PvEPlayerHeroAIPlayerJoins, false);
    TriggerAddEventPlayerJoin(libPVEM_gt_PvEPlayerHeroAIPlayerJoins, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Player Hero AI Player Leaves
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEPlayerHeroAIPlayerLeaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPVEM_gf_PvEPlayerIsValidHumanPlayer(EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    RemoveUnitOfInterest(libGame_gv_players[EventPlayer()].lv_heroUnit, "EscortAllyHero", libNtve_ge_GoalTeam_Both);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEPlayerHeroAIPlayerLeaves_Init () {
    libPVEM_gt_PvEPlayerHeroAIPlayerLeaves = TriggerCreate("libPVEM_gt_PvEPlayerHeroAIPlayerLeaves_Func");
    TriggerEnable(libPVEM_gt_PvEPlayerHeroAIPlayerLeaves, false);
    TriggerAddEventPlayerLeft(libPVEM_gt_PvEPlayerHeroAIPlayerLeaves, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Resurrect Create Spirit
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEResurrectCreateSpirit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadHero;
    int lv_deadPlayer;
    point lv_lastKnownPosition;
    int lv_resurrectTimerDuration;

    // Automatic Variable Declarations
    string autoCFCA973F_val;

    // Variable Initialization
    lv_deadHero = EventUnit();
    lv_deadPlayer = UnitGetOwner(lv_deadHero);
    lv_lastKnownPosition = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libGame_gf_TeamNumberOfPlayer(lv_deadPlayer) == libGame_gv_teamOrderIndex_C))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resurrectTimerDuration = libPVEM_gv_pvEResurrectDurationEasy_C;
    autoCFCA973F_val = UnitGetType(lv_deadHero);
    if (autoCFCA973F_val == "HeroFaerieDragon") {
        CatalogFieldValueSet(c_gameCatalogUnit, "DeadHeroResurrectSpirit", "Name", lv_deadPlayer, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(libGame_gv_players[lv_deadPlayer].lv_heroUnit), "Name", lv_deadPlayer));
        UnitCreate(1, "DeadHeroResurrectSpirit", 0, UnitGetOwner(lv_deadHero), lv_lastKnownPosition, 270.0, lv_deadHero);
        libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer] = UnitLastCreated();
        UnitSetHeight(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], 1.0, 0.0);
        UnitBehaviorAdd(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], "DeadHeroResurrectRezzable", libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], 1);
        UnitBehaviorSetDuration(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], "DeadHeroResurrectRezzable", lv_resurrectTimerDuration);
    }
    else if (autoCFCA973F_val == "HeroDiablo") {
        CatalogFieldValueSet(c_gameCatalogUnit, "DeadHeroResurrectSpirit", "Name", lv_deadPlayer, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(libGame_gv_players[lv_deadPlayer].lv_heroUnit), "Name", lv_deadPlayer));
        Wait(0.125, c_timeGame);
        if ((UnitHasBehavior2(lv_deadHero, "DeadMechanics") == true)) {
            UnitCreate(1, "DeadHeroResurrectSpirit", 0, UnitGetOwner(lv_deadHero), lv_lastKnownPosition, 270.0, lv_deadHero);
            libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer] = UnitLastCreated();
            UnitSetPosition(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], lv_lastKnownPosition, false);
            UnitBehaviorAdd(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], "DeadHeroResurrectRezzable", libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], 1);
            UnitBehaviorSetDuration(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], "DeadHeroResurrectRezzable", lv_resurrectTimerDuration);
        }

    }
    else if (autoCFCA973F_val == "HeroL90ETC") {
        if ((UnitHasBehavior2(lv_deadHero, "L90ETCDeathMetalCarryBehavior") == false)) {
            CatalogFieldValueSet(c_gameCatalogUnit, "DeadHeroResurrectSpirit", "Name", lv_deadPlayer, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(libGame_gv_players[lv_deadPlayer].lv_heroUnit), "Name", lv_deadPlayer));
            UnitCreate(1, "DeadHeroResurrectSpirit", 0, UnitGetOwner(lv_deadHero), lv_lastKnownPosition, 270.0, lv_deadHero);
            libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer] = UnitLastCreated();
            UnitSetPosition(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], lv_lastKnownPosition, false);
            UnitBehaviorAdd(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], "DeadHeroResurrectRezzable", libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], 1);
            UnitBehaviorSetDuration(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], "DeadHeroResurrectRezzable", lv_resurrectTimerDuration);
        }
        else {
            Wait(StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "L90ETCDeathMetalTimedLife", "Duration", UnitGetOwner(lv_deadHero))), c_timeGame);
            CatalogFieldValueSet(c_gameCatalogUnit, "DeadHeroResurrectSpirit", "Name", lv_deadPlayer, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(libGame_gv_players[lv_deadPlayer].lv_heroUnit), "Name", lv_deadPlayer));
            UnitCreate(1, "DeadHeroResurrectSpirit", 0, UnitGetOwner(lv_deadHero), lv_lastKnownPosition, 270.0, lv_deadHero);
            libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer] = UnitLastCreated();
            UnitSetPosition(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], lv_lastKnownPosition, false);
            UnitBehaviorAdd(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], "DeadHeroResurrectRezzable", libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], 1);
            UnitBehaviorSetDuration(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], "DeadHeroResurrectRezzable", lv_resurrectTimerDuration);
        }
    }
    else if (autoCFCA973F_val == "HeroFalstad") {
        CatalogFieldValueSet(c_gameCatalogUnit, "DeadHeroResurrectSpirit", "Name", lv_deadPlayer, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(libGame_gv_players[lv_deadPlayer].lv_heroUnit), "Name", lv_deadPlayer));
        UnitCreate(1, "DeadHeroResurrectSpirit", 0, UnitGetOwner(lv_deadHero), lv_lastKnownPosition, 270.0, lv_deadHero);
        libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer] = UnitLastCreated();
        UnitSetHeight(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], 2.0, 0.0);
        UnitBehaviorAdd(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], "DeadHeroResurrectRezzable", libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], 1);
        UnitBehaviorSetDuration(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], "DeadHeroResurrectRezzable", lv_resurrectTimerDuration);
    }
    else if (autoCFCA973F_val == "HeroTyrael") {
        while ((UnitHasBehavior2(lv_deadHero, "TyraelArchangelsWrathDeathActiveBuff") == true)) {
            lv_lastKnownPosition = UnitGetPosition(lv_deadHero);
            Wait(0.0625, c_timeGame);
        }
        CatalogFieldValueSet(c_gameCatalogUnit, "DeadHeroResurrectSpirit", "Name", lv_deadPlayer, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(libGame_gv_players[lv_deadPlayer].lv_heroUnit), "Name", lv_deadPlayer));
        UnitCreate(1, "DeadHeroResurrectSpirit", 0, UnitGetOwner(lv_deadHero), lv_lastKnownPosition, 270.0, lv_deadHero);
        libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer] = UnitLastCreated();
        UnitSetPosition(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], lv_lastKnownPosition, false);
        UnitBehaviorAdd(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], "DeadHeroResurrectRezzable", libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], 1);
        UnitBehaviorSetDuration(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], "DeadHeroResurrectRezzable", lv_resurrectTimerDuration);
    }
    else if (autoCFCA973F_val == "HeroUther") {
        if (((PlayerHasTalent(lv_deadPlayer, "UtherMasteryRedemption") == true) && (UnitHasBehavior2(lv_deadHero, "RedemptionCooldown") == false))) {
        }
        else {
            while (((UnitHasBehavior2(lv_deadHero, "SpiritOfRedemptionSpiritFormBuff") == true) || (UnitHasBehavior2(lv_deadHero, "UtherEternalDevotionRezDelay") == true))) {
                Wait(0.0625, c_timeGame);
                lv_lastKnownPosition = UnitGetPosition(lv_deadHero);
            }
            CatalogFieldValueSet(c_gameCatalogUnit, "DeadHeroResurrectSpirit", "Name", lv_deadPlayer, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(libGame_gv_players[lv_deadPlayer].lv_heroUnit), "Name", lv_deadPlayer));
            UnitCreate(1, "DeadHeroResurrectSpirit", 0, UnitGetOwner(lv_deadHero), lv_lastKnownPosition, 270.0, lv_deadHero);
            libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer] = UnitLastCreated();
            UnitSetPosition(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], lv_lastKnownPosition, false);
            UnitBehaviorAdd(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], "DeadHeroResurrectRezzable", libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], 1);
            UnitBehaviorSetDuration(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], "DeadHeroResurrectRezzable", lv_resurrectTimerDuration);
        }
    }
    else if (autoCFCA973F_val == "HeroVarian") {
        CatalogFieldValueSet(c_gameCatalogUnit, "DeadHeroResurrectSpirit", "Name", lv_deadPlayer, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(libGame_gv_players[lv_deadPlayer].lv_heroUnit), "Name", lv_deadPlayer));
        UnitCreate(1, "DeadHeroResurrectSpirit", 0, UnitGetOwner(lv_deadHero), lv_lastKnownPosition, 270.0, lv_deadHero);
        libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer] = UnitLastCreated();
        UnitBehaviorAdd(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], "DeadHeroResurrectRezzable", libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], 1);
        UnitBehaviorSetDuration(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], "DeadHeroResurrectRezzable", lv_resurrectTimerDuration);
        if ((UnitHasBehavior2(lv_deadHero, "Ultimate1Unlocked") == true)) {
            ActorSendAsText(libNtve_gf_MainActorofUnit(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer]), StringExternal("Param/Value/lib_PVEM_76CB6071"));
            ActorSendAsText(libNtve_gf_MainActorofUnit(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer]), StringExternal("Param/Value/lib_PVEM_E2228DC2"));
        }

        if ((UnitHasBehavior2(lv_deadHero, "Ultimate2Unlocked") == true)) {
            ActorSendAsText(libNtve_gf_MainActorofUnit(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer]), StringExternal("Param/Value/lib_PVEM_A498886E"));
            ActorSendAsText(libNtve_gf_MainActorofUnit(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer]), StringExternal("Param/Value/lib_PVEM_123F11AF"));
            ActorSendAsText(libNtve_gf_MainActorofUnit(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer]), StringExternal("Param/Value/lib_PVEM_6F9B2C30"));
        }

        if ((UnitHasBehavior2(lv_deadHero, "Ultimate3Unlocked") == true)) {
            ActorSendAsText(libNtve_gf_MainActorofUnit(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer]), StringExternal("Param/Value/lib_PVEM_46843B9C"));
            ActorSendAsText(libNtve_gf_MainActorofUnit(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer]), StringExternal("Param/Value/lib_PVEM_353620B6"));
        }

        if ((UnitHasBehavior2(lv_deadHero, "Ultimate1Unlocked") == false) && (UnitHasBehavior2(lv_deadHero, "Ultimate2Unlocked") == false) && (UnitHasBehavior2(lv_deadHero, "Ultimate3Unlocked") == false)) {
            ActorSendAsText(libNtve_gf_MainActorofUnit(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer]), StringExternal("Param/Value/lib_PVEM_D27824FF"));
            ActorSendAsText(libNtve_gf_MainActorofUnit(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer]), StringExternal("Param/Value/lib_PVEM_A555EADE"));
        }

    }
    else {
        CatalogFieldValueSet(c_gameCatalogUnit, "DeadHeroResurrectSpirit", "Name", lv_deadPlayer, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(libGame_gv_players[lv_deadPlayer].lv_heroUnit), "Name", lv_deadPlayer));
        UnitCreate(1, "DeadHeroResurrectSpirit", 0, UnitGetOwner(lv_deadHero), lv_lastKnownPosition, 270.0, lv_deadHero);
        libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer] = UnitLastCreated();
        UnitBehaviorAdd(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], "DeadHeroResurrectRezzable", libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], 1);
        UnitBehaviorSetDuration(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], "DeadHeroResurrectRezzable", lv_resurrectTimerDuration);
    }
    ActorSend(libNtve_gf_MainActorofUnit(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer]), libNtve_gf_ModelSwap(libCore_gf_GetModelLinkForUnitType(UnitGetType(lv_deadHero)), 0));
    ActorSend(libNtve_gf_MainActorofUnit(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer]), libNtve_gf_Signal("Stunned"));
    libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer] = UnitLastCreated();
    UnitBehaviorAddPlayer(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], "IsMacguffinTwo", lv_deadPlayer, 1);
    UnitBehaviorAddPlayer(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer], "MacguffinActivated", lv_deadPlayer, 1);
    libPVEM_gf_PvEResurrectAddRemoveDeadHeroArrow(true, lv_deadPlayer);
    TextTagCreate(StringExternal("Param/Value/lib_PVEM_C7976D22"), 22, UnitGetPosition(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer]), 3.2, true, false, PlayerGroupAll());
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\storm_ui_ingame_bossbar_border.dds", true);
    TextTagShow(TextTagLastCreated(), PlayerGroupSingle(lv_deadPlayer), false);
    libPVEM_gv_pvEResurrectSpiritTextTag[lv_deadPlayer] = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/lib_PVEM_9CD9FA69"), 22, UnitGetPosition(libPVEM_gv_pvEResurrectSpirit[lv_deadPlayer]), 3.2, true, false, PlayerGroupSingle(lv_deadPlayer));
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\storm_ui_ingame_bossbar_border.dds", true);
    libPVEM_gv_pvEResurrectSpiritTextTagSelf[lv_deadPlayer] = TextTagLastCreated();
    libPVEM_gf_PvEResurrectCheckActiveSpirits(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEResurrectCreateSpirit_Init () {
    libPVEM_gt_PvEResurrectCreateSpirit = TriggerCreate("libPVEM_gt_PvEResurrectCreateSpirit_Func");
    TriggerAddEventUnitBehaviorChange(libPVEM_gt_PvEResurrectCreateSpirit, null, "DeadMechanics", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Resurrect Revive Player
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEResurrectRevivePlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    int lv_casterPlayer;
    int lv_targetPlayer;
    unit lv_targetHero;
    point lv_targetPosition;
    playergroup lv_vOGroup;
    int lv_tempVar;
    const int lv_respawnHealthPercentage_C = 50;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_casterPlayer = UnitGetOwner(lv_caster);
    lv_targetPlayer = UnitGetOwner(lv_target);
    lv_targetPosition = UnitGetPosition(lv_target);
    lv_vOGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetHero = libGame_gv_players[lv_targetPlayer].lv_heroUnit;
    UnitBehaviorRemove(libGame_gv_players[lv_targetPlayer].lv_heroUnit, "DeadHeroResurrectIconBehavior", 1);
    UnitGroupClear(libPVEM_gv_pvEResurrectResurrectionCastersUnitGroup[lv_targetPlayer]);
    libPVEM_gf_PvEResurrectAddRemoveDeadHeroArrow(false, lv_targetPlayer);
    if ((libGame_gv_players[lv_targetPlayer].lv_heroRequiresCustomRespawn == true)) {
        libGame_gf_SendEventRequestCustomRespawn(lv_targetPlayer, false, lv_targetPosition, lv_respawnHealthPercentage_C);
    }
    else {
        libGame_gf_HeroDeathRespawnHeroforPlayer(false, lv_targetPlayer, lv_targetPosition, lv_respawnHealthPercentage_C);
    }
    libPVEM_gf_PvEResurrectRevivePlayerCleanup(lv_targetPlayer);
    libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(false, lv_targetPlayer);
    PlayerGroupAdd(lv_vOGroup, lv_casterPlayer);
    PlayerGroupAdd(lv_vOGroup, lv_targetPlayer);
    libSond_gf_HeroVOPlayResurrected(lv_targetPlayer, lv_vOGroup);
    if ((libNtve_gf_PlayerInCinematicMode(lv_targetPlayer) == false)) {
        TextExpressionSetToken("Param/Expression/lib_PVEM_82544EEF", "A", PlayerName(lv_targetPlayer));
        TextExpressionSetToken("Param/Expression/lib_PVEM_82544EEF", "B", UnitGetName(lv_targetHero));
        TextExpressionSetToken("Param/Expression/lib_PVEM_82544EEF", "C", PlayerName(lv_casterPlayer));
        TextExpressionSetToken("Param/Expression/lib_PVEM_82544EEF", "D", UnitGetName(lv_caster));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_PVEM_82544EEF"));
    }

    libPVEM_gf_PvEResurrectCheckActiveSpirits(false);
    libPVEM_gv_pvEResurrectTimes[lv_casterPlayer] += 1;
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_casterPlayer, "Resurrect", libPVEM_gv_pvEResurrectTimes[lv_casterPlayer]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEResurrectRevivePlayer_Init () {
    libPVEM_gt_PvEResurrectRevivePlayer = TriggerCreate("libPVEM_gt_PvEResurrectRevivePlayer_Func");
    TriggerEnable(libPVEM_gt_PvEResurrectRevivePlayer, false);
    TriggerAddEventPlayerEffectUsed(libPVEM_gt_PvEResurrectRevivePlayer, c_playerAny, "CaptureMacGuffinTwoCastComplete");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Resurrect Notify Target Player Revive Start
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_resurrecter;
    int lv_resurrectPlayer;
    unit lv_target;
    int lv_targetPlayer;
    point lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resurrecter = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_resurrectPlayer = UnitGetOwner(lv_resurrecter);
    lv_targetPlayer = UnitGetOwner(lv_target);
    lv_targetPoint = UnitGetPosition(lv_target);
    UnitGroupAdd(libPVEM_gv_pvEResurrectResurrectionCastersUnitGroup[lv_targetPlayer], lv_resurrecter);
    if ((UnitGroupCount(libPVEM_gv_pvEResurrectResurrectionCastersUnitGroup[lv_targetPlayer], c_unitCountAlive) > 1)) {
        return true;
    }

    TriggerEnable(libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterrupted, true);
    CameraPan(lv_targetPlayer, lv_targetPoint, 1.0, -1, 10.0, false);
    DialogDestroy(libPVEM_gv_pvEResurrectRevivingDialog[lv_targetPlayer].lv_panel);
    DialogCreate(1920, 150, c_anchorCenter, 0, 325, true);
    libPVEM_gv_pvEResurrectRevivingDialog[lv_targetPlayer].lv_panel = DialogLastCreated();
    DialogSetImageVisible(libPVEM_gv_pvEResurrectRevivingDialog[lv_targetPlayer].lv_panel, false);
    DialogSetVisible(libPVEM_gv_pvEResurrectRevivingDialog[lv_targetPlayer].lv_panel, PlayerGroupSingle(lv_targetPlayer), true);
    DialogControlCreateFromTemplate(libPVEM_gv_pvEResurrectRevivingDialog[lv_targetPlayer].lv_panel, c_triggerControlTypeLabel, "Auriel/AurielResurrectionNotificationTemplate");
    libPVEM_gv_pvEResurrectRevivingDialog[lv_targetPlayer].lv_label = DialogLastCreated();
    TextExpressionSetToken("Param/Expression/lib_PVEM_1DA07CDF", "A", PlayerName(lv_resurrectPlayer));
    TextExpressionSetToken("Param/Expression/lib_PVEM_1DA07CDF", "B", UnitGetName(lv_resurrecter));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_PVEM_1DA07CDF"), PlayerGroupSingle(lv_targetPlayer));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ReviveNotificationBlue", PlayerGroupSingle(lv_targetPlayer));
    UnitBehaviorAddPlayer(libPVEM_gv_pvEResurrectSpirit[lv_targetPlayer], "DeadHeroResurrectMarkerBehavior", lv_targetPlayer, 1);
    UnitBehaviorAddPlayer(libGame_gv_players[lv_targetPlayer].lv_heroUnit, "DeadHeroResurrectIconBehavior", lv_targetPlayer, 1);
    ActorSend(libNtve_gf_MainActorofUnit(libPVEM_gv_pvEResurrectSpirit[lv_targetPlayer]), libNtve_gf_Signal("Cheer"));
    TimerPause(libPVEM_gv_pvEResurrectNotifyTargetPlayerReviveInterruptedTimer[lv_targetPlayer], true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveStart_Init () {
    libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveStart = TriggerCreate("libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveStart_Func");
    TriggerEnable(libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveStart, false);
    TriggerAddEventPlayerEffectUsed(libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveStart, c_playerAny, "CaptureMacGuffinTwoInitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Resurrect Notify Target Player Revive Interrupted
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterrupted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    int lv_targetPlayer;
    point lv_targetPoint;
    fixed lv_newBehaviorTime;
    unit lv_itUnit;
    text lv_newPlayerName;
    text lv_newHeroName;

    // Automatic Variable Declarations
    unitgroup auto1B96E967_g;
    int auto1B96E967_u;

    // Variable Initialization
    lv_caster = EventUnit();
    lv_target = EventUnitTargetUnit();
    lv_targetPlayer = UnitGetOwner(lv_target);
    lv_targetPoint = UnitGetPosition(lv_target);
    lv_newBehaviorTime = 50.0;

    // Conditions
    if (testConds) {
        if (!((lv_target != null))) {
            return false;
        }

        if (!(((lv_targetPlayer >= 1) && (lv_targetPlayer <= libCore_gv_bALMaxPlayers)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(libPVEM_gv_pvEResurrectResurrectionCastersUnitGroup[lv_targetPlayer], lv_caster);
    if ((UnitGroupCount(libPVEM_gv_pvEResurrectResurrectionCastersUnitGroup[lv_targetPlayer], c_unitCountAlive) > 0)) {
        auto1B96E967_g = libPVEM_gv_pvEResurrectResurrectionCastersUnitGroup[lv_targetPlayer];
        auto1B96E967_u = UnitGroupCount(auto1B96E967_g, c_unitCountAll);
        for (;; auto1B96E967_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(auto1B96E967_g, auto1B96E967_u);
            if (lv_itUnit == null) { break; }
            lv_newBehaviorTime = MinF(lv_newBehaviorTime, UnitBehaviorDuration(lv_itUnit, "DeadHeroResurrectCastTrackingBehavior"));
            lv_newPlayerName = PlayerName(UnitGetOwner(lv_itUnit));
            lv_newHeroName = UnitGetName(lv_itUnit);
        }
        TextExpressionSetToken("Param/Expression/lib_PVEM_96731AFB", "A", lv_newPlayerName);
        TextExpressionSetToken("Param/Expression/lib_PVEM_96731AFB", "B", lv_newHeroName);
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_PVEM_96731AFB"), PlayerGroupSingle(lv_targetPlayer));
        UnitBehaviorSetDurationRemaining(libGame_gv_players[lv_targetPlayer].lv_heroUnit, "DeadHeroResurrectIconBehavior", lv_newBehaviorTime);
        return true;
    }

    CameraPan(lv_targetPlayer, lv_targetPoint, 1.0, -1, 10.0, false);
    DialogDestroy(libPVEM_gv_pvEResurrectRevivingDialog[lv_targetPlayer].lv_panel);
    DialogCreate(1920, 150, c_anchorCenter, 0, 325, true);
    libPVEM_gv_pvEResurrectRevivingDialog[lv_targetPlayer].lv_panel = DialogLastCreated();
    DialogSetImageVisible(libPVEM_gv_pvEResurrectRevivingDialog[lv_targetPlayer].lv_panel, false);
    DialogSetVisible(libPVEM_gv_pvEResurrectRevivingDialog[lv_targetPlayer].lv_panel, PlayerGroupSingle(lv_targetPlayer), true);
    DialogControlCreateFromTemplate(libPVEM_gv_pvEResurrectRevivingDialog[lv_targetPlayer].lv_panel, c_triggerControlTypeLabel, "Auriel/AurielResurrectionNotificationTemplate");
    libPVEM_gv_pvEResurrectRevivingDialog[lv_targetPlayer].lv_label = DialogLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_PVEM_F249E5B9"), PlayerGroupSingle(lv_targetPlayer));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ReviveNotificationRed", PlayerGroupSingle(lv_targetPlayer));
    TimerStart(libPVEM_gv_pvEResurrectNotifyTargetPlayerReviveInterruptedTimer[lv_targetPlayer], 2.0, false, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(libPVEM_gv_pvEResurrectSpirit[lv_targetPlayer]), libNtve_gf_Signal("StopCheer"));
    UnitBehaviorRemove(libPVEM_gv_pvEResurrectSpirit[lv_targetPlayer], "DeadHeroResurrectMarkerBehavior", 1);
    UnitBehaviorRemove(libGame_gv_players[lv_targetPlayer].lv_heroUnit, "DeadHeroResurrectIconBehavior", 1);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterrupted_Init () {
    libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterrupted = TriggerCreate("libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterrupted_Func");
    TriggerEnable(libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterrupted, false);
    TriggerAddEventUnitAbility(libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterrupted, null, AbilityCommand("CaptureMacGuffinTwo", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Resurrect Notify Target Player Revive Interrupted Timer Expired
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterruptedTimerExpired_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto4C823705_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto4C823705_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto4C823705_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((libPVEM_gv_pvEResurrectNotifyTargetPlayerReviveInterruptedTimer[lv_itPlayer] == EventTimer())) {
            DialogDestroy(libPVEM_gv_pvEResurrectRevivingDialog[lv_itPlayer].lv_panel);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterruptedTimerExpired_Init () {
    libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterruptedTimerExpired = TriggerCreate("libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterruptedTimerExpired_Func");
    TriggerEnable(libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, false);
    TriggerAddEventTimer(libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libPVEM_gv_pvEResurrectNotifyTargetPlayerReviveInterruptedTimer[1]);
    TriggerAddEventTimer(libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libPVEM_gv_pvEResurrectNotifyTargetPlayerReviveInterruptedTimer[2]);
    TriggerAddEventTimer(libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libPVEM_gv_pvEResurrectNotifyTargetPlayerReviveInterruptedTimer[3]);
    TriggerAddEventTimer(libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libPVEM_gv_pvEResurrectNotifyTargetPlayerReviveInterruptedTimer[4]);
    TriggerAddEventTimer(libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libPVEM_gv_pvEResurrectNotifyTargetPlayerReviveInterruptedTimer[5]);
    TriggerAddEventTimer(libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libPVEM_gv_pvEResurrectNotifyTargetPlayerReviveInterruptedTimer[6]);
    TriggerAddEventTimer(libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libPVEM_gv_pvEResurrectNotifyTargetPlayerReviveInterruptedTimer[7]);
    TriggerAddEventTimer(libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libPVEM_gv_pvEResurrectNotifyTargetPlayerReviveInterruptedTimer[8]);
    TriggerAddEventTimer(libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libPVEM_gv_pvEResurrectNotifyTargetPlayerReviveInterruptedTimer[9]);
    TriggerAddEventTimer(libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterruptedTimerExpired, libPVEM_gv_pvEResurrectNotifyTargetPlayerReviveInterruptedTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Resurrect Player Respawns Normally
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEResurrectPlayerRespawnsNormally_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int autoCD9024F9_ae = 5;
    const int autoCD9024F9_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 1;
    for ( ; ( (autoCD9024F9_ai >= 0 && lv_itPlayer <= autoCD9024F9_ae) || (autoCD9024F9_ai < 0 && lv_itPlayer >= autoCD9024F9_ae) ) ; lv_itPlayer += autoCD9024F9_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_itPlayer].lv_respawnTimer)) {
            if ((libPVEM_gv_pvEResurrectSpirit[lv_itPlayer] != null)) {
                UnitRemove(libPVEM_gv_pvEResurrectSpirit[lv_itPlayer]);
                TextTagDestroy(libPVEM_gv_pvEResurrectSpiritTextTag[lv_itPlayer]);
                TextTagDestroy(libPVEM_gv_pvEResurrectSpiritTextTagSelf[lv_itPlayer]);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEResurrectPlayerRespawnsNormally_Init () {
    libPVEM_gt_PvEResurrectPlayerRespawnsNormally = TriggerCreate("libPVEM_gt_PvEResurrectPlayerRespawnsNormally_Func");
    TriggerAddEventTimer(libPVEM_gt_PvEResurrectPlayerRespawnsNormally, libGame_gv_players[1].lv_respawnTimer);
    TriggerAddEventTimer(libPVEM_gt_PvEResurrectPlayerRespawnsNormally, libGame_gv_players[2].lv_respawnTimer);
    TriggerAddEventTimer(libPVEM_gt_PvEResurrectPlayerRespawnsNormally, libGame_gv_players[3].lv_respawnTimer);
    TriggerAddEventTimer(libPVEM_gt_PvEResurrectPlayerRespawnsNormally, libGame_gv_players[4].lv_respawnTimer);
    TriggerAddEventTimer(libPVEM_gt_PvEResurrectPlayerRespawnsNormally, libGame_gv_players[5].lv_respawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Init
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libUIUI_gf_UIPartyFrameShowHideCoreHealth(false);
    libUIUI_gf_UIPartyFrameShowHideTeamPanelforPlayerGroup(libGame_gv_teamChaosIndex_C, false, PlayerGroupAll());
    libCore_gv_sYSGameMode = libCore_ge_GameModes_ModeC;
    libGame_gv_xPTrickleEnabled = false;
    TriggerExecute(libPVEM_gt_PvEPlayerHeroAIInit, true, false);
    TriggerExecute(libPVEU_gt_PvEUIInit, true, false);
    TriggerExecute(libPVEM_gt_PvEInitializeVOPack, true, false);
    TriggerEnable(libUIUI_gt_UIPartyFrameUnitClicked, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEInit_Init () {
    libPVEM_gt_PvEInit = TriggerCreate("libPVEM_gt_PvEInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Initialize VO Pack
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEInitializeVOPack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoCABA8C06_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Comeback, "");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_AllyFirstBlood, "", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_EnemyFirstBlood, "", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_EnemyKilledNonparticipants, "", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_EnemyKilledParticipants, "", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_LetTheBattleBegin, "", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_KillingSpreeStart, "", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_KillingSpreeEndYou, "", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade1Mayhem, "", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade2Untouchable, "", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade3HeroOfTheStorm, "", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade4AllStarDEP, "", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_TeamKill, "", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_DoubleKill, "", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_TripleKill, "", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_QuadraKill, "", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_MegaKill, "", false);
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_SixKill, "", false);
    autoCABA8C06_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoCABA8C06_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	libGame_gv_players[lv_itPlayer].lv_lootContent.lv_loot_AnnouncerPack.lv_announcerVOLines[(libCore_ge_AnnouncerVOEvents_AllyFirstBlood)].lv_soundLink = null;
        libGame_gv_players[lv_itPlayer].lv_lootContent.lv_loot_AnnouncerPack.lv_announcerVOLines[(libCore_ge_AnnouncerVOEvents_EnemyFirstBlood)].lv_soundLink = null;
        libGame_gv_players[lv_itPlayer].lv_lootContent.lv_loot_AnnouncerPack.lv_announcerVOLines[(libCore_ge_AnnouncerVOEvents_EnemyKilledNonparticipants)].lv_soundLink = null;
        libGame_gv_players[lv_itPlayer].lv_lootContent.lv_loot_AnnouncerPack.lv_announcerVOLines[(libCore_ge_AnnouncerVOEvents_EnemyKilledParticipants)].lv_soundLink = null;
        libGame_gv_players[lv_itPlayer].lv_lootContent.lv_loot_AnnouncerPack.lv_announcerVOLines[(libCore_ge_AnnouncerVOEvents_LetTheBattleBegin)].lv_soundLink = null;
        libGame_gv_players[lv_itPlayer].lv_lootContent.lv_loot_AnnouncerPack.lv_announcerVOLines[(libCore_ge_AnnouncerVOEvents_KillingSpreeStart)].lv_soundLink = null;
        libGame_gv_players[lv_itPlayer].lv_lootContent.lv_loot_AnnouncerPack.lv_announcerVOLines[(libCore_ge_AnnouncerVOEvents_KillingSpreeEndYou)].lv_soundLink = null;
        libGame_gv_players[lv_itPlayer].lv_lootContent.lv_loot_AnnouncerPack.lv_announcerVOLines[(libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade1Mayhem)].lv_soundLink = null;
        libGame_gv_players[lv_itPlayer].lv_lootContent.lv_loot_AnnouncerPack.lv_announcerVOLines[(libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade2Untouchable)].lv_soundLink = null;
        libGame_gv_players[lv_itPlayer].lv_lootContent.lv_loot_AnnouncerPack.lv_announcerVOLines[(libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade3HeroOfTheStorm)].lv_soundLink = null;
        libGame_gv_players[lv_itPlayer].lv_lootContent.lv_loot_AnnouncerPack.lv_announcerVOLines[(libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade4AllStarDEP)].lv_soundLink = null;
        libGame_gv_players[lv_itPlayer].lv_lootContent.lv_loot_AnnouncerPack.lv_announcerVOLines[(libCore_ge_AnnouncerVOEvents_TeamKill)].lv_soundLink = null;
        libGame_gv_players[lv_itPlayer].lv_lootContent.lv_loot_AnnouncerPack.lv_announcerVOLines[(libCore_ge_AnnouncerVOEvents_DoubleKill)].lv_soundLink = null;
        libGame_gv_players[lv_itPlayer].lv_lootContent.lv_loot_AnnouncerPack.lv_announcerVOLines[(libCore_ge_AnnouncerVOEvents_TripleKill)].lv_soundLink = null;
        libGame_gv_players[lv_itPlayer].lv_lootContent.lv_loot_AnnouncerPack.lv_announcerVOLines[(libCore_ge_AnnouncerVOEvents_QuadraKill)].lv_soundLink = null;
        libGame_gv_players[lv_itPlayer].lv_lootContent.lv_loot_AnnouncerPack.lv_announcerVOLines[(libCore_ge_AnnouncerVOEvents_MegaKill)].lv_soundLink = null;
        libGame_gv_players[lv_itPlayer].lv_lootContent.lv_loot_AnnouncerPack.lv_announcerVOLines[(libCore_ge_AnnouncerVOEvents_SixKill)].lv_soundLink = null;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEInitializeVOPack_Init () {
    libPVEM_gt_PvEInitializeVOPack = TriggerCreate("libPVEM_gt_PvEInitializeVOPack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Pickup Ping Overrides
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEPickupPingOverrides_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itIterator;

    // Automatic Variable Declarations
    int auto95B89F5E_ae;
    const int auto95B89F5E_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto95B89F5E_ae = libPVEM_gv_pvEPickupsTotalPickupsInitialized;
    lv_itIterator = 1;
    for ( ; ( (auto95B89F5E_ai >= 0 && lv_itIterator <= auto95B89F5E_ae) || (auto95B89F5E_ai < 0 && lv_itIterator >= auto95B89F5E_ae) ) ; lv_itIterator += auto95B89F5E_ai ) {
        libUIUI_gf_PingCreateNewPingTarget(libPVEM_gv_pvEPickupsTotal[lv_itIterator], false, null, StringExternal("Param/Value/lib_PVEM_EA1C674D"), StringExternal("Param/Value/lib_PVEM_8003ADD8"), SoundLink("UI_Game_Ping_General", -1), SoundLink("UI_Game_Ping_General", -1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEPickupPingOverrides_Init () {
    libPVEM_gt_PvEPickupPingOverrides = TriggerCreate("libPVEM_gt_PvEPickupPingOverrides_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Pickup Preplaced Pickup Visibility Check
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEPickupPreplacedPickupVisibilityCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_preplacedPickupGroup;
    int lv_itPickupIndex;
    unit lv_itPickupUnit;

    // Automatic Variable Declarations
    unitgroup auto7E962351_g;
    int auto7E962351_u;

    // Variable Initialization
    lv_preplacedPickupGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((UnitGroupCount(libPVEM_gv_pvEPickupPreplacedPickups, c_unitCountAll) == 0)) {
            return true;
        }
        else {
            auto7E962351_g = libPVEM_gv_pvEPickupPreplacedPickups;
            auto7E962351_u = UnitGroupCount(auto7E962351_g, c_unitCountAll);
            for (;; auto7E962351_u -= 1) {
                lv_itPickupUnit = UnitGroupUnitFromEnd(auto7E962351_g, auto7E962351_u);
                if (lv_itPickupUnit == null) { break; }
                if ((libNtve_gf_UnitIsVisibleToPlayer(lv_itPickupUnit, libCore_gv_cOMPUTER_TeamOrder) == true)) {
                    UnitBehaviorAddPlayer(lv_itPickupUnit, "PickupRevealer", libStEx_gv_pLAYER_11_ORDER, 1);
                    UnitGroupRemove(libPVEM_gv_pvEPickupPreplacedPickups, lv_itPickupUnit);
                }

            }
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEPickupPreplacedPickupVisibilityCheck_Init () {
    libPVEM_gt_PvEPickupPreplacedPickupVisibilityCheck = TriggerCreate("libPVEM_gt_PvEPickupPreplacedPickupVisibilityCheck_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Pickup Item Picked Up
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEPickupItemPickedUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_casterPlayer;
    unit lv_pickupUnit;
    point lv_positionOfItem;
    int lv_itIterator;

    // Automatic Variable Declarations
    int autoDF351D57_ae;
    const int autoDF351D57_ai = 1;
    int auto4F924006_ae;
    const int auto4F924006_ai = 1;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_casterPlayer = UnitGetOwner(lv_caster);
    lv_pickupUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_positionOfItem = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget));

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnitImpact(), "PickupRevealer") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDF351D57_ae = libPVEM_gv_pvEPickupsTotalPickupsInitialized;
    lv_itIterator = 1;
    for ( ; ( (autoDF351D57_ai >= 0 && lv_itIterator <= autoDF351D57_ae) || (autoDF351D57_ai < 0 && lv_itIterator >= autoDF351D57_ae) ) ; lv_itIterator += autoDF351D57_ai ) {
        if ((UnitHasBehavior2(lv_caster, libPVEM_gv_pvEPickupsCarryBehavior[lv_itIterator]) == true)) {
            libPVEM_gf_PvEPickupSwapPickup(lv_caster, lv_positionOfItem, libPVEM_gv_pvEPickupsCarryBehavior[lv_itIterator]);
            break;
        }

    }
    auto4F924006_ae = libPVEM_gv_pvEPickupsTotalPickupsInitialized;
    lv_itIterator = 1;
    for ( ; ( (auto4F924006_ai >= 0 && lv_itIterator <= auto4F924006_ae) || (auto4F924006_ai < 0 && lv_itIterator >= auto4F924006_ae) ) ; lv_itIterator += auto4F924006_ai ) {
        if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == libPVEM_gv_pvEPickupsTotal[lv_itIterator])) {
            UnitBehaviorAddPlayer(lv_caster, libPVEM_gv_pvEPickupsCarryBehavior[lv_itIterator], lv_casterPlayer, 1);
            break;
        }

    }
    libNtve_gf_CreateModelAtPoint("PVESpecialAbilityPickupGrabbedFX", lv_positionOfItem);
    UnitGroupRemove(libPVEM_gv_pvEPickupsItemsOnGround, lv_pickupUnit);
    UnitKill(lv_pickupUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEPickupItemPickedUp_Init () {
    libPVEM_gt_PvEPickupItemPickedUp = TriggerCreate("libPVEM_gt_PvEPickupItemPickedUp_Func");
    TriggerAddEventPlayerEffectUsed(libPVEM_gt_PvEPickupItemPickedUp, c_playerAny, "CaptureMacGuffinCastComplete");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE NPC Minion Dies
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvENPCMinionDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSXPOn == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libPVEM_gv_pvENPCMinions, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPVEM_gf_AwardXPForNPCKill(EventUnit(), UnitGetOwner(EventUnit()), libGame_ge_XPSources_Minion, libNtve_gf_KillingPlayer(), EventUnitDamageKillXP());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvENPCMinionDies_Init () {
    libPVEM_gt_PvENPCMinionDies = TriggerCreate("libPVEM_gt_PvENPCMinionDies_Func");
    TriggerAddEventUnitDied(libPVEM_gt_PvENPCMinionDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Initialize Possible AI Players
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEInitializePossibleAIPlayers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3E1E5E89_g;
    int auto3E1E5E89_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.5, c_timeGame);
    auto3E1E5E89_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    auto3E1E5E89_var = -1;
    while (true) {
        	auto3E1E5E89_var = PlayerGroupNextPlayer(auto3E1E5E89_g, auto3E1E5E89_var);
        	if (auto3E1E5E89_var<0) { break; }
        	if ((libAIAI_gf_HeroAIIsPlayerActive(auto3E1E5E89_var, 2) == true)) {
            libAIAI_gf_HeroAIEnableAIForPlayer(auto3E1E5E89_var);
            Wait(RandomFixed(0.1, 0.25), c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEInitializePossibleAIPlayers_Init () {
    libPVEM_gt_PvEInitializePossibleAIPlayers = TriggerCreate("libPVEM_gt_PvEInitializePossibleAIPlayers_Func");
    libGame_gf_GameOpenTimerStarted(libPVEM_gt_PvEInitializePossibleAIPlayers);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Hero Spawned
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEHeroSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    int lv_heroIndex;
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto02C619CA_g;
    int auto02C619CA_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owner = libGame_gf_HeroSpawnPlayer();
    lv_heroIndex = libPVEM_gf_PvENPCHeroIndexFromPlayer(lv_owner);
    auto02C619CA_g = libGame_gv_players[lv_owner].lv_heroUnitGroup;
    auto02C619CA_u = UnitGroupCount(auto02C619CA_g, c_unitCountAll);
    for (;; auto02C619CA_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto02C619CA_g, auto02C619CA_u);
        if (lv_itUnit == null) { break; }
        if ((libPVEM_gv_pvESetting.lv_hearthDisabled == true)) {
            UnitAbilityShow(lv_itUnit, "Hearthstone", false);
            UnitBehaviorAdd(lv_itUnit, "HearthstonePermanentDisableAbilityBuff", lv_itUnit, 1);
        }

        if ((libPVEM_gv_pvESetting.lv_mountDisabled == true)) {
            if ((UnitGetType(lv_itUnit) == "HeroFalstad")) {
                UnitAbilityShow(lv_itUnit, "FalstadFlight", false);
            }
            else if ((UnitGetType(lv_itUnit) == "HeroAbathur")) {
            }
            else if (((UnitGetType(lv_itUnit) == "HeroMedivh") || (UnitGetType(lv_itUnit) == "HeroMedivhRaven"))) {
                UnitAbilityShow(lv_itUnit, "MedivhTransformRaven", false);
                UnitAbilityEnable(lv_itUnit, "MedivhTransformRaven", false);
                UnitAbilityShow(lv_itUnit, "MedivhTransformRavenLand", false);
                UnitAbilityShow(lv_itUnit, "MedivhTransformRavenBirdsEyeView", false);
                UnitAbilityShow(lv_itUnit, "MedivhTransformRavenFountain", false);
                UnitAbilityShow(lv_itUnit, "MedivhTransformRavenGuardianMorph", false);
                UnitAbilityShow(lv_itUnit, "MedivhTransformRavenMorph", false);
            }
            else if ((UnitGetType(lv_itUnit) == "HeroDehaka")) {
                UnitAbilityShow(lv_itUnit, "DehakaBrushstalker", false);
                UnitAbilityEnable(lv_itUnit, "DehakaBrushstalker", false);
            }
            else if (true) {
                UnitAbilityShow(lv_itUnit, "Mount", false);
                UnitAbilityEnable(lv_itUnit, "Mount", false);
                UnitAbilityShow(lv_itUnit, "Dismount", false);
                UnitAbilityEnable(lv_itUnit, "Dismount", false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEHeroSpawned_Init () {
    libPVEM_gt_PvEHeroSpawned = TriggerCreate("libPVEM_gt_PvEHeroSpawned_Func");
    libGame_gf_HeroSpawn(libPVEM_gt_PvEHeroSpawned);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Starting Animations Callback
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEStartingAnimationsCallback_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;
    int lv_town;
    int lv_structure;

    // Automatic Variable Declarations
    unitgroup auto38E6D038_g;
    int auto38E6D038_u;
    unitgroup autoB5FE5584_g;
    int autoB5FE5584_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 13.0, false);
    auto38E6D038_g = libPVEM_gv_pvEStartingAnimationUnits;
    auto38E6D038_u = UnitGroupCount(auto38E6D038_g, c_unitCountAll);
    for (;; auto38E6D038_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto38E6D038_g, auto38E6D038_u);
        if (lv_itUnit == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(lv_itUnit), "Signal PrePlayBuild");
    }
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 6.0, false);
    autoB5FE5584_g = libPVEM_gv_pvEStartingAnimationUnits;
    autoB5FE5584_u = UnitGroupCount(autoB5FE5584_g, c_unitCountAll);
    for (;; autoB5FE5584_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoB5FE5584_g, autoB5FE5584_u);
        if (lv_itUnit == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(lv_itUnit), "Signal PlayBuild");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEStartingAnimationsCallback_Init () {
    libPVEM_gt_PvEStartingAnimationsCallback = TriggerCreate("libPVEM_gt_PvEStartingAnimationsCallback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Starting Visibility Callback
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEStartingVisibilityCallback_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoC745D915_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoC745D915_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoC745D915_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	VisExploreArea(lv_itPlayer, libPVEM_gv_pvEStartingVisibleRegion, true, false);
    }
    VisRevealerCreate(libStEx_gv_pLAYER_11_ORDER, libPVEM_gv_pvEStartingVisibleRegion);
    libPVEM_gv_pvEStartingVisibility = VisRevealerLastCreated();
    VisRevealerEnable(VisRevealerLastCreated(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEStartingVisibilityCallback_Init () {
    libPVEM_gt_PvEStartingVisibilityCallback = TriggerCreate("libPVEM_gt_PvEStartingVisibilityCallback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Victory Sequence
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEVictorySequence_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayerIndex;
    unit lv_itUnit;

    // Automatic Variable Declarations
    playergroup auto28C278E0_g;
    unitgroup auto6F94CC4D_g;
    int auto6F94CC4D_u;
    playergroup auto8312A561_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPVEM_gv_pvEVictorySequenceRan = true;
    libGame_gv_gameOver = true;
    libPVEM_gv_pvEVictoryTime = FixedToInt(libUIUI_gf_HeroesGameTime());
    libPVEM_gv_pvEVictoryTimeLoop = FixedToInt((libUIUI_gf_HeroesGameTime() * 16.0));
    TimerPause(libGame_gv_gameTimer, true);
    TimerPause(libGame_gv_matchGameplayTimer, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundPlayForPlayer(SoundLink("SlivanVictoryStinger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    if ((libPVEM_gv_pvEEndGameMessageCallback != null)) {
        TriggerExecute(libPVEM_gv_pvEEndGameMessageCallback, true, false);
    }

    auto28C278E0_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_itPlayerIndex = -1;
    while (true) {
        	lv_itPlayerIndex = PlayerGroupNextPlayer(auto28C278E0_g, lv_itPlayerIndex);
        	if (lv_itPlayerIndex<0) { break; }
        	libNtve_gf_MakeUnitInvulnerable(libGame_gv_players[lv_itPlayerIndex].lv_heroUnit, true);
        auto6F94CC4D_g = libGame_gv_players[lv_itPlayerIndex].lv_heroUnitGroup;
        auto6F94CC4D_u = UnitGroupCount(auto6F94CC4D_g, c_unitCountAll);
        for (;; auto6F94CC4D_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(auto6F94CC4D_g, auto6F94CC4D_u);
            if (lv_itUnit == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(lv_itUnit, true);
        }
        libUIUI_gf_FullscreenOverlayStopandClearCutsceneQueueForPlayer(lv_itPlayerIndex);
    }
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 2.0);
    auto8312A561_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    lv_itPlayerIndex = -1;
    while (true) {
        	lv_itPlayerIndex = PlayerGroupNextPlayer(auto8312A561_g, lv_itPlayerIndex);
        	if (lv_itPlayerIndex<0) { break; }
        	VisRevealArea(lv_itPlayerIndex, RegionPlayableMap(), 0.0, false);
    }
    Wait(7.0, c_timeGame);
    if ((libPVEM_gv_pvEVictoryCinematicCallback != null)) {
        TriggerExecute(libPVEM_gv_pvEVictoryCinematicCallback, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEVictorySequence_Init () {
    libPVEM_gt_PvEVictorySequence = TriggerCreate("libPVEM_gt_PvEVictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Defeat
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEDefeat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto0A699260_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPVEM_gf_PvEPlayerIsValidHumanTeamPlayer(libGame_gf_HeroKilledPlayer()) == true))) {
            return false;
        }

        if (!((libPVEM_gv_pvEDefeatDisabled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0A699260_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto0A699260_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((libPVEM_gf_PvEPlayerIsValidHumanTeamPlayer(lv_itPlayer) == true) && (libPVEM_gf_PvEPlayerHeroIsDead(lv_itPlayer) == false)) {
            return true;
        }

    }
    TimerPause(libGame_gv_gameTimer, true);
    TimerPause(libGame_gv_matchGameplayTimer, true);
    Wait(2.0, c_timeGame);
    UnitPauseAll(true);
    libPVEM_gv_pvEDefeatTime = FixedToInt(libUIUI_gf_HeroesGameTime());
    if ((libPVEM_gv_pvEEndGameMessageCallback != null)) {
        TriggerExecute(libPVEM_gv_pvEEndGameMessageCallback, true, false);
    }

    Wait(2.0, c_timeGame);
    libPVEM_gf_PvEVictoryDefeat(false, null, null);
    KickFromGame(PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEDefeat_Init () {
    libPVEM_gt_PvEDefeat = TriggerCreate("libPVEM_gt_PvEDefeat_Func");
    libGame_gf_HeroKilled(libPVEM_gt_PvEDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Game Over Score
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEGameOverScore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto00371454_g;
    int auto00371454_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto00371454_g = libPVEM_gf_PvEPlayersOnHumanTeam(false);
    auto00371454_var = -1;
    while (true) {
        	auto00371454_var = PlayerGroupNextPlayer(auto00371454_g, auto00371454_var);
        	if (auto00371454_var<0) { break; }
        	}
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEGameOverScore_Init () {
    libPVEM_gt_PvEGameOverScore = TriggerCreate("libPVEM_gt_PvEGameOverScore_Func");
    libGame_gf_GameOverEvent(libPVEM_gt_PvEGameOverScore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Debug Victory
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEDebugVictory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPVEM_gf_PvEVictoryDefeat(true, RegionEntireMap(), RegionGetCenter(RegionPlayableMap()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEDebugVictory_Init () {
    libPVEM_gt_PvEDebugVictory = TriggerCreate("libPVEM_gt_PvEDebugVictory_Func");
    TriggerAddEventChatMessage(libPVEM_gt_PvEDebugVictory, c_playerAny, "DebugWin", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Debug Defeat
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEDebugDefeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPVEM_gf_PvEVictoryDefeat(false, RegionEntireMap(), RegionGetCenter(RegionPlayableMap()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEDebugDefeat_Init () {
    libPVEM_gt_PvEDebugDefeat = TriggerCreate("libPVEM_gt_PvEDebugDefeat_Func");
    TriggerAddEventChatMessage(libPVEM_gt_PvEDebugDefeat, c_playerAny, "DebugFail", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Debug Difficulty
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEDebugDifficulty_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoC30C753F_val;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC30C753F_val = libPVEM_gf_PvEGameDifficulty();
    if (autoC30C753F_val == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Heroic) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_PVEM_F9675F31"), true);
    }
    else if (autoC30C753F_val == libPVEM_ge_PvEGameDifficulty_PvEGameDifficulty_Normal) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_PVEM_CB928CB0"), true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEDebugDifficulty_Init () {
    libPVEM_gt_PvEDebugDifficulty = TriggerCreate("libPVEM_gt_PvEDebugDifficulty_Func");
    TriggerAddEventChatMessage(libPVEM_gt_PvEDebugDifficulty, c_playerAny, "-difficulty", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Debug Initialize Arrows
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEDebugInitializeArrows_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int autoD21AAABB_ae = libCore_gv_bALMaxPlayers;
    const int autoD21AAABB_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_PVEM_D8221CD2"), true);
    lv_itPlayer = 1;
    for ( ; ( (autoD21AAABB_ai >= 0 && lv_itPlayer <= autoD21AAABB_ae) || (autoD21AAABB_ai < 0 && lv_itPlayer >= autoD21AAABB_ae) ) ; lv_itPlayer += autoD21AAABB_ai ) {
        if ((libGame_gv_players[lv_itPlayer].lv_heroUnit != null)) {
            libUIUI_gv_uIHeroTrackerArrows.lv_unitCount += 1;
            libUIUI_gv_uIHeroTrackerArrows.lv_unit[libUIUI_gv_uIHeroTrackerArrows.lv_unitCount] = libGame_gv_players[lv_itPlayer].lv_heroUnit;
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroTrackerArrows.lv_arrow[libUIUI_gv_uIHeroTrackerArrows.lv_unitCount], libGame_gv_players[lv_itPlayer].lv_heroUnit, PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[libUIUI_gv_uIHeroTrackerArrows.lv_unitCount], (CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(libGame_gv_players[lv_itPlayer].lv_heroUnit), "HeroIcon", lv_itPlayer)), PlayerGroupAll());
            libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer(true, lv_itPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEDebugInitializeArrows_Init () {
    libPVEM_gt_PvEDebugInitializeArrows = TriggerCreate("libPVEM_gt_PvEDebugInitializeArrows_Func");
    TriggerAddEventChatMessage(libPVEM_gt_PvEDebugInitializeArrows, c_playerAny, "InitArrows", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Debug Show Arrows
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEDebugShowArrows_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int autoA741388F_ae;
    const int autoA741388F_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_PVEM_654A6C71"), true);
    autoA741388F_ae = libUIUI_gv_uIHeroTrackerArrows.lv_unitCount;
    lv_itIndex = 1;
    for ( ; ( (autoA741388F_ai >= 0 && lv_itIndex <= autoA741388F_ae) || (autoA741388F_ai < 0 && lv_itIndex >= autoA741388F_ae) ) ; lv_itIndex += autoA741388F_ai ) {
        DialogControlSetVisible(libUIUI_gv_uIHeroTrackerArrows.lv_arrow[lv_itIndex], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[lv_itIndex], PlayerGroupAll(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEDebugShowArrows_Init () {
    libPVEM_gt_PvEDebugShowArrows = TriggerCreate("libPVEM_gt_PvEDebugShowArrows_Func");
    TriggerAddEventChatMessage(libPVEM_gt_PvEDebugShowArrows, c_playerAny, "ShowArrows", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Debug Hide Arrows
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEDebugHideArrows_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto1121A070_ae;
    const int auto1121A070_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_PVEM_455AF0BA"), true);
    auto1121A070_ae = libUIUI_gv_uIHeroTrackerArrows.lv_unitCount;
    lv_itIndex = 1;
    for ( ; ( (auto1121A070_ai >= 0 && lv_itIndex <= auto1121A070_ae) || (auto1121A070_ai < 0 && lv_itIndex >= auto1121A070_ae) ) ; lv_itIndex += auto1121A070_ai ) {
        DialogControlSetVisible(libUIUI_gv_uIHeroTrackerArrows.lv_arrow[lv_itIndex], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[lv_itIndex], PlayerGroupAll(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEDebugHideArrows_Init () {
    libPVEM_gt_PvEDebugHideArrows = TriggerCreate("libPVEM_gt_PvEDebugHideArrows_Func");
    TriggerAddEventChatMessage(libPVEM_gt_PvEDebugHideArrows, c_playerAny, "HideArrows", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Debug Turn On Player Selction
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEDebugTurnOnPlayerSelction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSprt_gv_dEBUGSelectionEnabled == false)) {
        libSprt_gf_DEBUGToggleSelection();
    }

    TriggerEnable(libPVEM_gt_PvEDebugPlayerSelection, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEDebugTurnOnPlayerSelction_Init () {
    libPVEM_gt_PvEDebugTurnOnPlayerSelction = TriggerCreate("libPVEM_gt_PvEDebugTurnOnPlayerSelction_Func");
    TriggerAddEventChatMessage(libPVEM_gt_PvEDebugTurnOnPlayerSelction, c_playerAny, "-ps", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Debug Player Selection
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEDebugPlayerSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_key;
    int lv_playerToSelect;
    int lv_itPlayer;

    // Automatic Variable Declarations
    int auto9D6A95EF_val;
    const int auto695CC8BF_ae = 5;
    const int auto695CC8BF_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!(((EventKeyPressed() == 40) || (EventKeyPressed() == c_key1) || (EventKeyPressed() == c_key2) || (EventKeyPressed() == c_key3) || (EventKeyPressed() == c_key4) || (EventKeyPressed() == c_key5)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_key = EventKeyPressed();
    auto9D6A95EF_val = lv_key;
    if (auto9D6A95EF_val == c_key1) {
        lv_playerToSelect = 1;
    }
    else if (auto9D6A95EF_val == c_key2) {
        lv_playerToSelect = 2;
    }
    else if (auto9D6A95EF_val == c_key3) {
        lv_playerToSelect = 3;
    }
    else if (auto9D6A95EF_val == c_key4) {
        lv_playerToSelect = 4;
    }
    else if (auto9D6A95EF_val == c_key5) {
        lv_playerToSelect = 5;
    }
    else if (auto9D6A95EF_val == 40) {
        lv_playerToSelect = 0;
    }
    else {
        return true;
    }
    if ((lv_playerToSelect == 0)) {
        lv_itPlayer = 1;
        for ( ; ( (auto695CC8BF_ai >= 0 && lv_itPlayer <= auto695CC8BF_ae) || (auto695CC8BF_ai < 0 && lv_itPlayer >= auto695CC8BF_ae) ) ; lv_itPlayer += auto695CC8BF_ai ) {
            libPVEM_gf_PvEDebugSelectPlayerHero(EventPlayer(), lv_itPlayer, false);
        }
    }
    else {
        libPVEM_gf_PvEDebugSelectPlayerHero(EventPlayer(), lv_playerToSelect, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEDebugPlayerSelection_Init () {
    libPVEM_gt_PvEDebugPlayerSelection = TriggerCreate("libPVEM_gt_PvEDebugPlayerSelection_Func");
    TriggerEnable(libPVEM_gt_PvEDebugPlayerSelection, false);
    TriggerAddEventKeyPressed(libPVEM_gt_PvEDebugPlayerSelection, c_playerAny, c_keyNone, false, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Debug Spawn Pickup All
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEDebugSpawnPickupAll_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;
    unit lv_casterHero;
    const fixed lv_offset = 5.0;
    fixed lv_polarOffset;
    int lv_itIterator;

    // Automatic Variable Declarations
    int autoDE776F5F_ae;
    const int autoDE776F5F_ai = 1;

    // Variable Initialization
    lv_casterPlayer = EventPlayer();
    lv_casterHero = libGame_gv_players[lv_casterPlayer].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_polarOffset = (360.0 / libPVEM_gv_pvEPickupsTotalPickupsInitialized);
    autoDE776F5F_ae = libPVEM_gv_pvEPickupsTotalPickupsInitialized;
    lv_itIterator = 1;
    for ( ; ( (autoDE776F5F_ai >= 0 && lv_itIterator <= autoDE776F5F_ae) || (autoDE776F5F_ai < 0 && lv_itIterator >= autoDE776F5F_ae) ) ; lv_itIterator += autoDE776F5F_ai ) {
        libPVEM_gf_PvEPickupSpawnPickup(libPVEM_gv_pvEPickupsTotal[lv_itIterator], PointWithOffsetPolar(UnitGetPosition(lv_casterHero), lv_offset, (lv_itIterator * lv_polarOffset)), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEDebugSpawnPickupAll_Init () {
    libPVEM_gt_PvEDebugSpawnPickupAll = TriggerCreate("libPVEM_gt_PvEDebugSpawnPickupAll_Func");
    TriggerAddEventChatMessage(libPVEM_gt_PvEDebugSpawnPickupAll, c_playerAny, "-spawnpickupall", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Debug Spawn Pickup Random
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEDebugSpawnPickupRandom_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;
    unit lv_casterHero;
    const fixed lv_offset = 5.0;
    fixed lv_polarOffset;
    int lv_itIterator;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_casterPlayer = EventPlayer();
    lv_casterHero = libGame_gv_players[lv_casterPlayer].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPVEM_gf_PvEPickupSpawnRandom(UnitGetPosition(lv_casterHero));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEDebugSpawnPickupRandom_Init () {
    libPVEM_gt_PvEDebugSpawnPickupRandom = TriggerCreate("libPVEM_gt_PvEDebugSpawnPickupRandom_Func");
    TriggerAddEventChatMessage(libPVEM_gt_PvEDebugSpawnPickupRandom, c_playerAny, "-spawnpickuprandom", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Debug Spawn Pickup Rotation
//--------------------------------------------------------------------------------------------------
bool libPVEM_gt_PvEDebugSpawnPickupRotation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;
    unit lv_casterHero;
    const fixed lv_offset = 7.0;
    fixed lv_polarOffset;
    int lv_itIterator;
    int lv_currentIteration;
    int lv_rollover;
    string lv_specialItem;
    int lv_tempRollover;
    int lv_currentRollover;
    int lv_itemsToSpawn;

    // Automatic Variable Declarations
    int autoA010545B_ae;
    const int autoA010545B_ai = 1;

    // Variable Initialization
    lv_casterPlayer = EventPlayer();
    lv_casterHero = libGame_gv_players[lv_casterPlayer].lv_heroUnit;
    lv_polarOffset = 14.4;
    lv_currentIteration = 1;
    lv_rollover = 5;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_specialItem = (StringWord(EventChatMessage(false), 2));
    lv_itemsToSpawn = StringToInt(StringWord(EventChatMessage(false), 3));
    lv_tempRollover = StringToInt(StringWord(EventChatMessage(false), 4));
    lv_polarOffset = (360.0 / (lv_itemsToSpawn + 1.0));
    lv_currentRollover = libPVEM_gv_pvEPickupsRolloverRotationStep;
    libPVEM_gv_pvEPickupsRolloverRotationStep = lv_tempRollover;
    libPVEM_gv_pvEPickupsCurrentRotationStep = 1;
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_PVEM_2C5BEF29") + IntToText(lv_itemsToSpawn) + StringExternal("Param/Value/lib_PVEM_ADEFB573") + IntToText(libPVEM_gv_pvEPickupsRolloverRotationStep) + StringExternal("Param/Value/lib_PVEM_646E201F") + StringExternal((lv_specialItem))), true);
    autoA010545B_ae = lv_itemsToSpawn;
    lv_itIterator = 1;
    for ( ; ( (autoA010545B_ai >= 0 && lv_itIterator <= autoA010545B_ae) || (autoA010545B_ai < 0 && lv_itIterator >= autoA010545B_ae) ) ; lv_itIterator += autoA010545B_ai ) {
        libPVEM_gf_PvEPickupSpawnRandomInRotation(lv_specialItem, PointWithOffsetPolar(UnitGetPosition(lv_casterHero), lv_offset, (lv_itIterator * lv_polarOffset)));
    }
    libPVEM_gv_pvEPickupsRolloverRotationStep = lv_currentRollover;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPVEM_gt_PvEDebugSpawnPickupRotation_Init () {
    libPVEM_gt_PvEDebugSpawnPickupRotation = TriggerCreate("libPVEM_gt_PvEDebugSpawnPickupRotation_Func");
    TriggerAddEventChatMessage(libPVEM_gt_PvEDebugSpawnPickupRotation, c_playerAny, "-spawnpickuprotation", false);
}

void libPVEM_InitTriggers () {
    libPVEM_gt_IncludePvEMod_Init();
    libPVEM_gt_PvEAttackWaveRoutine_Init();
    libPVEM_gt_PvEPlayerHeroAIInit_Init();
    libPVEM_gt_PvEPlayerHeroAIPlayerJoins_Init();
    libPVEM_gt_PvEPlayerHeroAIPlayerLeaves_Init();
    libPVEM_gt_PvEResurrectCreateSpirit_Init();
    libPVEM_gt_PvEResurrectRevivePlayer_Init();
    libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveStart_Init();
    libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterrupted_Init();
    libPVEM_gt_PvEResurrectNotifyTargetPlayerReviveInterruptedTimerExpired_Init();
    libPVEM_gt_PvEResurrectPlayerRespawnsNormally_Init();
    libPVEM_gt_PvEInit_Init();
    libPVEM_gt_PvEInitializeVOPack_Init();
    libPVEM_gt_PvEPickupPingOverrides_Init();
    libPVEM_gt_PvEPickupPreplacedPickupVisibilityCheck_Init();
    libPVEM_gt_PvEPickupItemPickedUp_Init();
    libPVEM_gt_PvENPCMinionDies_Init();
    libPVEM_gt_PvEInitializePossibleAIPlayers_Init();
    libPVEM_gt_PvEHeroSpawned_Init();
    libPVEM_gt_PvEStartingAnimationsCallback_Init();
    libPVEM_gt_PvEStartingVisibilityCallback_Init();
    libPVEM_gt_PvEVictorySequence_Init();
    libPVEM_gt_PvEDefeat_Init();
    libPVEM_gt_PvEGameOverScore_Init();
    libPVEM_gt_PvEDebugVictory_Init();
    libPVEM_gt_PvEDebugDefeat_Init();
    libPVEM_gt_PvEDebugDifficulty_Init();
    libPVEM_gt_PvEDebugInitializeArrows_Init();
    libPVEM_gt_PvEDebugShowArrows_Init();
    libPVEM_gt_PvEDebugHideArrows_Init();
    libPVEM_gt_PvEDebugTurnOnPlayerSelction_Init();
    libPVEM_gt_PvEDebugPlayerSelection_Init();
    libPVEM_gt_PvEDebugSpawnPickupAll_Init();
    libPVEM_gt_PvEDebugSpawnPickupRandom_Init();
    libPVEM_gt_PvEDebugSpawnPickupRotation_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libPVEM_InitLib_completed = false;

void libPVEM_InitLib () {
    if (libPVEM_InitLib_completed) {
        return;
    }

    libPVEM_InitLib_completed = true;

    libPVEM_InitLibraries();
    libPVEM_InitVariables();
    libPVEM_InitTriggers();
}

include "LibPVEU"

