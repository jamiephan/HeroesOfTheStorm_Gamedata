include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"
include "TriggerLibs/StartingExperienceLib"
include "TriggerLibs/GameDataHelperLib"
include "TriggerLibs/SupportLib"
include "LibPVEB"
include "LibPESC"
include "LibPBUI"

include "LibPEB1_h"

//--------------------------------------------------------------------------------------------------
// Library: Escape From Braxis (Mod)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libPEB1_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libAIAI_InitVariables();
    libUIUI_InitVariables();
    libStEx_InitVariables();
    libGDHL_InitVariables();
    libSprt_InitVariables();
    libPVEB_InitVariables();
    libPESC_InitVariables();
    libPBUI_InitVariables();
}

// Variable Initialization
bool libPEB1_InitVariables_completed = false;

void libPEB1_InitVariables () {
    int init_i;
    int init_j;

    if (libPEB1_InitVariables_completed) {
        return;
    }

    libPEB1_InitVariables_completed = true;

    libPEB1_gv_activeZergMinions = UnitGroupEmpty();
    libPEB1_gv_pvEMurkyDeathTimer = TimerCreate();
    libPEB1_gv_pvEMurkyRespawnDelay = 8.0;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            libPEB1_gv_zergHeroes[init_i][init_j].lv_respawnTimer = TimerCreate();
        }
    }
    libPEB1_gv_zergHeroEventWaitTimer = TimerCreate();
    libPEB1_gv_zergHeroRespawnTimer = 45.0;
    libPEB1_gv_activeZergHeroes = UnitGroupEmpty();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 31; init_j += 1) {
            libPEB1_gv_spawnPoints[init_i][init_j].lv_recentlyUsedTimer = TimerCreate();
        }
    }
    libPEB1_gv_marineEvent2Marines = UnitGroupEmpty();
    libPEB1_gv_marineEvent2Hydralisks = UnitGroupEmpty();
    libPEB1_gv_pEB1BossFirstWormWave = true;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        libPEB1_gv_pEB1SlivanWormSpawnCount[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        libPEB1_gv_pEB1SlivanZergBossTextTags[init_i] = c_textTagNone;
    }
    libPEB1_gv_pEB1SlivanSummonedUnits = UnitGroupEmpty();
    libPEB1_gv_pEB1SlivanBossKillTimer = TimerCreate();
    libPEB1_gv_pEB1SpawnPodsTargetCount = 12;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libPEB1_gv_checkpoints[init_i].lv_ping = c_invalidPingId;
        libPEB1_gv_checkpoints[init_i].lv_entryWalls = UnitGroupEmpty();
        libPEB1_gv_checkpoints[init_i].lv_exitWalls = UnitGroupEmpty();
        libPEB1_gv_checkpoints[init_i].lv_blockers1 = UnitGroupEmpty();
        libPEB1_gv_checkpoints[init_i].lv_blockers2 = UnitGroupEmpty();
    }
    libPEB1_gv_shelter.lv_ping = c_invalidPingId;
    libPEB1_gv_shelter.lv_blockers = UnitGroupEmpty();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libPEB1_gv_extraBlockers[init_i] = UnitGroupEmpty();
    }
    libPEB1_gv_currentStage = 1;
    libPEB1_gv_holdoutTimer = TimerCreate();
    libPEB1_gv_itemDropCounter = 1;
    libPEB1_gv_retryChances = 1;
    libPEB1_gv_pZEMinimapPanel = c_invalidDialogControlId;
    libPEB1_gv_pZEMinimap = c_invalidDialogControlId;
    libPEB1_gv_pZEMapPanel = c_invalidDialogControlId;
    libPEB1_gv_pZEHoldoutPanel.lv_timerPanel = c_invalidDialogControlId;
    libPEB1_gv_pZEHoldoutPanel.lv_bGImage = c_invalidDialogControlId;
    libPEB1_gv_pZEHoldoutPanel.lv_timerPanelTimerLabel = c_invalidDialogControlId;
    libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconCheckpoint = c_invalidDialogControlId;
    libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconDoorTimer = c_invalidDialogControlId;
    libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconKillZerg = c_invalidDialogControlId;
    libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconDoorOpen = c_invalidDialogControlId;
    libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconShelter = c_invalidDialogControlId;
    libPEB1_gv_pZEHoldoutPanel.lv_timerPanelInfoLabel = c_invalidDialogControlId;
    libPEB1_gv_pZEHoldoutPanel.lv_timerPanelTimer = TimerCreate();
    libPEB1_gv_pZEHoldoutPanel.lv_state = libPEB1_ge_PZEHoldoutPanelState_OnTimer;
    libPEB1_gv_pZEBossPanel.lv_bossPanel = c_invalidDialogControlId;
    libPEB1_gv_pZEBossPanel.lv_bossPanelLabel = c_invalidDialogControlId;
    libPEB1_gv_pZEBossPanel.lv_bossPanelUnitBar = c_invalidDialogControlId;
    libPEB1_gv_pZEBossPanel.lv_bossPanelAttempts = c_invalidDialogControlId;
    libPEB1_gv_pZEScoreScreenPanel.lv_mainPanel = c_invalidDialogControlId;
    libPEB1_gv_pZEScoreScreenPanel.lv_timeLabel = c_invalidDialogControlId;
    libPEB1_gv_pZEScoreScreenPanel.lv_closeButton = c_invalidDialogControlId;
    libPEB1_gv_pZETabScreenPanel.lv_mainPanel = c_invalidDialogControlId;
    libPEB1_gv_pZETabScreenPanel.lv_tabControl = c_invalidDialogControlId;
    libPEB1_gv_pZETabScreenPanel.lv_timeRunSubPanel = c_invalidDialogControlId;
    libPEB1_gv_pZETabScreenPanel.lv_currentTimeLabel = c_invalidDialogControlId;
    libPEB1_gv_pZECurrentStageCurrent = libPEB1_ge_PZEStages_Stage1PreHoldout;
}

// Presets
// Functions
void libPEB1_gf_Reinitializehero (int lp_player, int lp_team) {
    // Variable Declarations
    int lv_numberOfPlayersOnTeam;
    int lv_slot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libGame_gv_players[lp_player].lv_faction = lp_team;
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, lp_player);
    lv_numberOfPlayersOnTeam = PlayerGroupCount(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup);
    lv_slot = (lv_numberOfPlayersOnTeam - 1);
    libGame_gv_players[lp_player].lv_spawnPoint = PlayerStartLocation(lv_slot);
    libGame_gv_players[lp_player].lv_rosterSlot = lv_slot;
    libGame_gv_players[lp_player].lv_teamPlayerSlot = lv_numberOfPlayersOnTeam;
    libGame_gv_players[lp_player].lv_name = PlayerName(lp_player);
    PlayerSetState(lp_player, c_playerStateDisplayGameResult, false);
}

void libPEB1_gf_PZETurnOnOffZergMinionAI (unit lp_minion, bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true)) {
        if ((UnitGetType(lp_minion) != "SlivanBossPod")) {
            UnitGroupAdd(libPEB1_gv_activeZergMinions, lp_minion);
        }

        if ((UnitGetType(lp_minion) == "ZergUltralisk")) {
            UnitBehaviorAdd(lp_minion, "UltraliskChargeAbilityScan", lp_minion, 1);
        }

        if ((UnitHasAIThinkTree(lp_minion) == false)) {
            UnitCreateAIThinkTree(lp_minion);
        }

    }
    else {
        UnitGroupRemove(libPEB1_gv_activeZergMinions, lp_minion);
        UnitBehaviorRemove(lp_minion, "UltraliskChargeAbilityScan", 1);
        if ((UnitHasAIThinkTree(lp_minion) == true)) {
            UnitDestroyAIThinkTree(lp_minion);
        }

    }
}

void libPEB1_gf_PZETurnOnOffZergMinionGroupAI (unitgroup lp_minions, bool lp_onOff) {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup autoF2A255F4_g;
    int autoF2A255F4_u;

    // Variable Initialization

    // Implementation
    autoF2A255F4_g = lp_minions;
    autoF2A255F4_u = UnitGroupCount(autoF2A255F4_g, c_unitCountAll);
    for (;; autoF2A255F4_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoF2A255F4_g, autoF2A255F4_u);
        if (lv_itUnit == null) { break; }
        libPEB1_gf_PZETurnOnOffZergMinionAI(lv_itUnit, lp_onOff);
    }
}

point libPEB1_gf_ToxicNestSpawnPoint (point lp_point) {
    // Variable Declarations
    int lv_currentBestIndex;
    int lv_regionIndex;

    // Automatic Variable Declarations
    const int autoF1DC05AF_ae = 31;
    const int autoF1DC05AF_ai = 1;
    const int auto335E0A9E_ae = 31;
    const int auto335E0A9E_ai = 1;

    // Variable Initialization

    // Implementation
    lv_regionIndex = 1;
    for ( ; ( (autoF1DC05AF_ai >= 0 && lv_regionIndex <= autoF1DC05AF_ae) || (autoF1DC05AF_ai < 0 && lv_regionIndex >= autoF1DC05AF_ae) ) ; lv_regionIndex += autoF1DC05AF_ai ) {
        if ((RegionFromName(("Toxic Nest Region " + IntToString(lv_regionIndex))) == null)) {
            break;
        }

        if ((UnitGroupCount(UnitGroup("AbathurToxicNest", c_playerAny, RegionFromName(("Toxic Nest Region " + IntToString(lv_regionIndex))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 4)) {
            if ((lv_currentBestIndex == 0)) {
                lv_currentBestIndex = lv_regionIndex;
            }
            else {
                if ((DistanceBetweenPoints(lp_point, RegionGetCenter(RegionFromName(("Toxic Nest Region " + IntToString(lv_regionIndex))))) < DistanceBetweenPoints(lp_point, RegionGetCenter(RegionFromName(("Toxic Nest Region " + IntToString(lv_currentBestIndex))))))) {
                    lv_currentBestIndex = lv_regionIndex;
                }

            }
        }

    }
    if ((lv_currentBestIndex == 0)) {
        lv_regionIndex = 1;
        for ( ; ( (auto335E0A9E_ai >= 0 && lv_regionIndex <= auto335E0A9E_ae) || (auto335E0A9E_ai < 0 && lv_regionIndex >= auto335E0A9E_ae) ) ; lv_regionIndex += auto335E0A9E_ai ) {
            if ((RegionFromName(("Toxic Nest Region " + IntToString(lv_regionIndex))) == null)) {
                break;
            }

            if ((lv_currentBestIndex == 0)) {
                lv_currentBestIndex = lv_regionIndex;
            }
            else {
                if ((DistanceBetweenPoints(lp_point, RegionGetCenter(RegionFromName(("Toxic Nest Region " + IntToString(lv_regionIndex))))) < DistanceBetweenPoints(lp_point, RegionGetCenter(RegionFromName(("Toxic Nest Region " + IntToString(lv_currentBestIndex))))))) {
                    lv_currentBestIndex = lv_regionIndex;
                }

            }
        }
    }

    if ((lv_currentBestIndex == 0)) {
        return RegionRandomPoint(RegionCircle(lp_point, 4.0));
    }
    else {
        return RegionRandomPoint(RegionFromName(("Toxic Nest Region " + IntToString(lv_currentBestIndex))));
    }
}

point libPEB1_gf_ClosestAbathurSpawnPoint (point lp_point) {
    // Variable Declarations
    int lv_currentBestIndex;
    int lv_pointIndex;

    // Automatic Variable Declarations
    const int auto55E4675B_ae = 9;
    const int auto55E4675B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_pointIndex = 1;
    for ( ; ( (auto55E4675B_ai >= 0 && lv_pointIndex <= auto55E4675B_ae) || (auto55E4675B_ai < 0 && lv_pointIndex >= auto55E4675B_ae) ) ; lv_pointIndex += auto55E4675B_ai ) {
        if ((UnitGroupCount(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceEnemy, RegionCircle(PointFromName(("Deep Tunnel Point " + IntToString(lv_pointIndex))), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
            if ((lv_currentBestIndex == 0)) {
                lv_currentBestIndex = lv_pointIndex;
            }
            else {
                if ((DistanceBetweenPoints(lp_point, PointFromName(("Deep Tunnel Point " + IntToString(lv_pointIndex)))) < DistanceBetweenPoints(lp_point, PointFromName(("Deep Tunnel Point " + IntToString(lv_currentBestIndex)))))) {
                    lv_currentBestIndex = lv_pointIndex;
                }

            }
        }

    }
    if ((lv_currentBestIndex == 0)) {
        return PointFromName("Deep Tunnel Point 1");
    }
    else {
        return PointFromName(("Deep Tunnel Point " + IntToString(lv_currentBestIndex)));
    }
}

point libPEB1_gf_DeepTunnelTeleportLocation (point lp_point) {
    // Variable Declarations
    int lv_pointIndex;
    int lv_nearbyDeepTunnelPoint;

    // Automatic Variable Declarations
    const int auto55C9E187_ae = 9;
    const int auto55C9E187_ai = 1;
    int auto551B6891_val;

    // Variable Initialization

    // Implementation
    lv_pointIndex = 1;
    for ( ; ( (auto55C9E187_ai >= 0 && lv_pointIndex <= auto55C9E187_ae) || (auto55C9E187_ai < 0 && lv_pointIndex >= auto55C9E187_ae) ) ; lv_pointIndex += auto55C9E187_ai ) {
        if ((RegionContainsPoint(RegionCircle(PointFromName(("Deep Tunnel Point " + IntToString(lv_pointIndex))), 10.0), lp_point) == true)) {
            lv_nearbyDeepTunnelPoint = lv_pointIndex;
            break;
        }

    }
    auto551B6891_val = lv_nearbyDeepTunnelPoint;
    if (auto551B6891_val == 1) {
        if ((RandomInt(1, 2) == 1)) {
            return PointFromName("Deep Tunnel Point 2");
        }
        else {
            return PointFromName("Deep Tunnel Point 3");
        }
    }
    else if (auto551B6891_val == 2) {
        if ((RandomInt(1, 2) == 1)) {
            return PointFromName("Deep Tunnel Point 1");
        }
        else {
            return PointFromName("Deep Tunnel Point 3");
        }
    }
    else if (auto551B6891_val == 3) {
        if ((RandomInt(1, 2) == 1)) {
            return PointFromName("Deep Tunnel Point 1");
        }
        else {
            return PointFromName("Deep Tunnel Point 2");
        }
    }
    else if (auto551B6891_val == 4) {
        if ((RandomInt(1, 2) == 1)) {
            return PointFromName("Deep Tunnel Point 5");
        }
        else {
            return PointFromName("Deep Tunnel Point 6");
        }
    }
    else if (auto551B6891_val == 5) {
        if ((RandomInt(1, 2) == 1)) {
            return PointFromName("Deep Tunnel Point 4");
        }
        else {
            return PointFromName("Deep Tunnel Point 6");
        }
    }
    else if (auto551B6891_val == 6) {
        if ((RandomInt(1, 2) == 1)) {
            return PointFromName("Deep Tunnel Point 4");
        }
        else {
            return PointFromName("Deep Tunnel Point 5");
        }
    }
    else if (auto551B6891_val == 7) {
        if ((RandomInt(1, 2) == 1)) {
            return PointFromName("Deep Tunnel Point 8");
        }
        else {
            return PointFromName("Deep Tunnel Point 9");
        }
    }
    else if (auto551B6891_val == 8) {
        if ((RandomInt(1, 2) == 1)) {
            return PointFromName("Deep Tunnel Point 7");
        }
        else {
            return PointFromName("Deep Tunnel Point 9");
        }
    }
    else if (auto551B6891_val == 9) {
        if ((RandomInt(1, 2) == 1)) {
            return PointFromName("Deep Tunnel Point 7");
        }
        else {
            return PointFromName("Deep Tunnel Point 8");
        }
    }
    else {
        return libPEB1_gf_ClosestAbathurSpawnPoint(lp_point);
    }
}

unit libPEB1_gf_GetBestSymbioteTarget () {
    // Variable Declarations
    int lv_heroIndex;
    unitgroup lv_validTargets;
    unit lv_bestTarget;

    // Automatic Variable Declarations
    const int auto00A57B79_ae = 5;
    const int auto00A57B79_ai = 1;
    unitgroup auto11272C75_g;
    int auto11272C75_u;
    unit auto11272C75_var;
    unitgroup auto8EAFCC53_g;
    int auto8EAFCC53_u;
    unit auto8EAFCC53_var;
    unitgroup auto3977A031_g;
    int auto3977A031_u;
    unit auto3977A031_var;

    // Variable Initialization
    lv_validTargets = UnitGroupEmpty();

    // Implementation
    lv_heroIndex = 1;
    for ( ; ( (auto00A57B79_ai >= 0 && lv_heroIndex <= auto00A57B79_ae) || (auto00A57B79_ai < 0 && lv_heroIndex >= auto00A57B79_ae) ) ; lv_heroIndex += auto00A57B79_ai ) {
        if ((UnitIsAlive(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_heroIndex].lv_hero)) == true) && (libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_heroIndex].lv_hero != "Abathur")) {
            if ((UnitGroupCount(UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_heroIndex].lv_hero)), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                UnitGroupAdd(lv_validTargets, libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_heroIndex].lv_hero));
            }

        }

    }
    auto11272C75_g = UnitGroupAlliance(libStEx_gv_pLAYER_11_ORDER, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto11272C75_u = UnitGroupCount(auto11272C75_g, c_unitCountAll);
    for (;; auto11272C75_u -= 1) {
        auto11272C75_var = UnitGroupUnitFromEnd(auto11272C75_g, auto11272C75_u);
        if (auto11272C75_var == null) { break; }
        if ((UnitGetType(auto11272C75_var) == "AbathurEvolvedMonstrosity") && (UnitGroupCount(UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto11272C75_var), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
            UnitGroupAdd(lv_validTargets, auto11272C75_var);
        }

    }
    if ((UnitGroupCount(lv_validTargets, c_unitCountAlive) == 0)) {
        auto8EAFCC53_g = UnitGroupAlliance(libStEx_gv_pLAYER_11_ORDER, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto8EAFCC53_u = UnitGroupCount(auto8EAFCC53_g, c_unitCountAll);
        for (;; auto8EAFCC53_u -= 1) {
            auto8EAFCC53_var = UnitGroupUnitFromEnd(auto8EAFCC53_g, auto8EAFCC53_u);
            if (auto8EAFCC53_var == null) { break; }
            if ((UnitGetType(auto8EAFCC53_var) == "AbathurLocustNormal") && (UnitGroupCount(UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto8EAFCC53_var), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                UnitGroupAdd(lv_validTargets, auto8EAFCC53_var);
            }

        }
    }

    auto3977A031_g = lv_validTargets;
    auto3977A031_u = UnitGroupCount(auto3977A031_g, c_unitCountAll);
    for (;; auto3977A031_u -= 1) {
        auto3977A031_var = UnitGroupUnitFromEnd(auto3977A031_g, auto3977A031_u);
        if (auto3977A031_var == null) { break; }
        if ((lv_bestTarget == null)) {
            lv_bestTarget = auto3977A031_var;
        }
        else {
            if ((UnitGroupCount(UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto3977A031_var), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > UnitGroupCount(UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_bestTarget), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))) {
                lv_bestTarget = auto3977A031_var;
            }

        }
    }
    return lv_bestTarget;
}

trigger auto_libPEB1_gf_AbathurAI_Trigger = null;

void libPEB1_gf_AbathurAI () {
    if (auto_libPEB1_gf_AbathurAI_Trigger == null) {
        auto_libPEB1_gf_AbathurAI_Trigger = TriggerCreate("auto_libPEB1_gf_AbathurAI_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_AbathurAI_Trigger, false, false);
}

bool auto_libPEB1_gf_AbathurAI_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_abathur;
    int lv_abathurPlayer;
    timer lv_deepTunnelCooldown;
    point lv_deepTunnelLocation;
    unitgroup lv_nearbyUnits;
    unit lv_symbioteTarget;

    // Automatic Variable Declarations
    unitgroup auto7C9A2E23_g;
    int auto7C9A2E23_u;
    unit auto7C9A2E23_var;
    unitgroup auto0A49F9F0_g;
    int auto0A49F9F0_u;
    unit auto0A49F9F0_var;
    unitgroup autoEAA346DB_g;
    int autoEAA346DB_u;
    unit autoEAA346DB_var;

    // Variable Initialization
    lv_deepTunnelCooldown = TimerCreate();
    lv_nearbyUnits = UnitGroupEmpty();

    // Implementation
    if ((UnitIsAlive(libPVEB_gf_PBNPCHeroUnit("Abathur")) == false)) {
        return true;
    }
    else {
        lv_abathur = libPVEB_gf_PBNPCHeroUnit("Abathur");
        lv_abathurPlayer = UnitGetOwner(lv_abathur);
    }
    while (true) {
        Wait(0.5, c_timeGame);
        if (((UnitIsAlive(lv_abathur) == false) || (libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 2))) {
            return true;
        }

        if ((libPEB1_gv_holdoutStage2Finished == true) && (UnitIsAlive(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[2][2].lv_hero)) == false) && (UnitIsAlive(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[2][3].lv_hero)) == false) && (UnitIsAlive(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[2][4].lv_hero)) == false) && (UnitIsAlive(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[2][5].lv_hero)) == false) && (UnitGroupCount(UnitGroup("AbathurSymbiote", lv_abathurPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
            lv_nearbyUnits = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            if ((UnitGroupCount(lv_nearbyUnits, c_unitCountAlive) > 0)) {
                UnitIssueOrder(lv_abathur, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_nearbyUnits, UnitGetPosition(lv_abathur)))), c_orderQueueReplace);
            }

            continue;
        }

        if ((TimerGetRemaining(lv_deepTunnelCooldown) < 0.1) && (libNtve_gf_UnitIsVisibleToPlayer(lv_abathur, libStEx_gv_pLAYER_11_ORDER) == true) && (UnitGroupCount(UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_abathur), 13.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 1), c_unitCountAlive) > 0)) {
            lv_deepTunnelLocation = libPEB1_gf_DeepTunnelTeleportLocation(UnitGetPosition(lv_abathur));
            if ((lv_deepTunnelLocation != null)) {
                TimerStart(lv_deepTunnelCooldown, 7.0, false, c_timeGame);
                auto7C9A2E23_g = UnitGroup("AbathurSymbiote", lv_abathurPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto7C9A2E23_u = UnitGroupCount(auto7C9A2E23_g, c_unitCountAll);
                for (;; auto7C9A2E23_u -= 1) {
                    auto7C9A2E23_var = UnitGroupUnitFromEnd(auto7C9A2E23_g, auto7C9A2E23_u);
                    if (auto7C9A2E23_var == null) { break; }
                    UnitIssueOrder(auto7C9A2E23_var, Order(AbilityCommand("AbathurAssumingDirectControlCancel", 0)), c_orderQueueReplace);
                }
                Wait(2.0, c_timeGame);
                UnitIssueOrder(lv_abathur, OrderTargetingPoint(AbilityCommand("AbathurDeepTunnel", 0), lv_deepTunnelLocation), c_orderQueueReplace);
                Wait(2.5, c_timeGame);
                continue;
            }

        }

        if ((TimerGetRemaining(lv_deepTunnelCooldown) < 0.1) && ((libNtve_gf_UnitInRegion(lv_abathur, RegionFromId(90)) == true) || (libNtve_gf_UnitInRegion(lv_abathur, RegionFromId(131)) == true)) && (UnitGroupCount(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceEnemy, RegionFromId(132), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 1), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroup("AbathurSymbiote", lv_abathurPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            TimerStart(lv_deepTunnelCooldown, 7.0, false, c_timeGame);
            UnitIssueOrder(lv_abathur, OrderTargetingPoint(AbilityCommand("AbathurDeepTunnel", 0), PointFromName(("Deep Tunnel Point " + IntToString(RandomInt(7, 9))))), c_orderQueueReplace);
            Wait(2.5, c_timeGame);
            continue;
        }

        if ((TimerGetRemaining(lv_deepTunnelCooldown) < 0.1) && (libNtve_gf_UnitInRegion(lv_abathur, RegionFromId(90)) == true) && (UnitGroupCount(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceEnemy, RegionFromId(89), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 1), c_unitCountAlive) > 0) && (UnitGroupCount(UnitGroup("AbathurSymbiote", lv_abathurPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            TimerStart(lv_deepTunnelCooldown, 7.0, false, c_timeGame);
            UnitIssueOrder(lv_abathur, OrderTargetingPoint(AbilityCommand("AbathurDeepTunnel", 0), PointFromName(("Deep Tunnel Point " + IntToString(RandomInt(4, 6))))), c_orderQueueReplace);
            Wait(2.5, c_timeGame);
            continue;
        }

        if ((libNtve_gf_UnitInRegion(lv_abathur, RegionFromName("Abathur Second Area")) == true) && (UnitGroupCount(UnitGroup("AbathurEvolvedMonstrosity", lv_abathurPlayer, libPEB1_gv_playableSpace[2], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            lv_nearbyUnits = UnitGroup("AbathurLocustNormal", lv_abathurPlayer, libPEB1_gv_playableSpace[2], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((UnitGroupCount(lv_nearbyUnits, c_unitCountAlive) > 0)) {
                UnitIssueOrder(lv_abathur, OrderTargetingUnit(AbilityCommand("AbathurEvolveMonstrosity", 0), UnitGroupClosestToPoint(lv_nearbyUnits, UnitGetPosition(lv_abathur))), c_orderQueueReplace);
            }

        }

        auto0A49F9F0_g = UnitGroup("AbathurEvolvedMonstrosity", c_playerAny, libPEB1_gv_playableSpace[2], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0A49F9F0_u = UnitGroupCount(auto0A49F9F0_g, c_unitCountAll);
        for (;; auto0A49F9F0_u -= 1) {
            auto0A49F9F0_var = UnitGroupUnitFromEnd(auto0A49F9F0_g, auto0A49F9F0_u);
            if (auto0A49F9F0_var == null) { break; }
            if ((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, UnitGetOwner(auto0A49F9F0_var)) == true)) {
                lv_nearbyUnits = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceEnemy, RegionFromName("Abathur Move Check 2"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
                if ((UnitGroupCount(lv_nearbyUnits, c_unitCountAlive) > 0)) {
                    UnitIssueOrder(auto0A49F9F0_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_nearbyUnits, UnitGetPosition(auto0A49F9F0_var)))), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(auto0A49F9F0_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromName("Abathur Move Check 2"))), c_orderQueueReplace);
                }
            }

        }
        UnitIssueOrder(lv_abathur, OrderTargetingPoint(AbilityCommand("AbathurToxicNest", 0), libPEB1_gf_ToxicNestSpawnPoint(UnitGetPosition(lv_abathur))), c_orderQueueReplace);
        if ((UnitGroupCount(UnitGroup("AbathurSymbiote", lv_abathurPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            autoEAA346DB_g = UnitGroup("AbathurSymbiote", lv_abathurPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoEAA346DB_u = UnitGroupCount(autoEAA346DB_g, c_unitCountAll);
            for (;; autoEAA346DB_u -= 1) {
                autoEAA346DB_var = UnitGroupUnitFromEnd(autoEAA346DB_g, autoEAA346DB_u);
                if (autoEAA346DB_var == null) { break; }
                lv_nearbyUnits = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoEAA346DB_var), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
                if ((UnitGroupCount(lv_nearbyUnits, c_unitCountAlive) > 0)) {
                    UnitIssueOrder(autoEAA346DB_var, Order(AbilityCommand("AbathurSymbioteSpikeBurst", 0)), c_orderQueueAddToFront);
                }

                lv_nearbyUnits = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoEAA346DB_var), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
                if ((UnitGroupCount(lv_nearbyUnits, c_unitCountAlive) > 0)) {
                    UnitIssueOrder(autoEAA346DB_var, OrderTargetingPoint(AbilityCommand("AbathurSymbioteStab", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_nearbyUnits, UnitGetPosition(autoEAA346DB_var)))), c_orderQueueAddToFront);
                    UnitIssueOrder(autoEAA346DB_var, Order(AbilityCommand("AbathurSymbioteCarapace", 0)), c_orderQueueAddToFront);
                }

                lv_nearbyUnits = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(autoEAA346DB_var), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
                if ((UnitGroupCount(lv_nearbyUnits, c_unitCountAlive) == 0)) {
                    UnitIssueOrder(autoEAA346DB_var, Order(AbilityCommand("AbathurAssumingDirectControlCancel", 0)), c_orderQueueReplace);
                    break;
                }

            }
        }
        else {
            lv_symbioteTarget = libPEB1_gf_GetBestSymbioteTarget();
            if ((lv_symbioteTarget != null)) {
                UnitIssueOrder(lv_abathur, OrderTargetingUnit(AbilityCommand("AbathurSymbiote", 0), lv_symbioteTarget), c_orderQueueReplace);
            }

        }
    }
    return true;
}

point libPEB1_gf_GetZagaraMovePoint () {
    // Variable Declarations
    unit lv_zagara;
    point[4] lv_randomPoints;
    int lv_pointIndex;
    int lv_numberOfRandomPoints;

    // Automatic Variable Declarations
    const int auto8420B2C4_ae = 3;
    const int auto8420B2C4_ai = 1;
    const int autoADF268FD_ae = 6;
    const int autoADF268FD_ai = 1;

    // Variable Initialization

    // Implementation
    lv_zagara = libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[2][5].lv_hero);
    if ((UnitIsAlive(lv_zagara) == false)) {
        return libPEB1_gv_zagaraPoints[1];
    }

    if (((UnitGroupCount(UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionFromName("Zagara Retreat Check"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGetPropertyFixed(lv_zagara, c_unitPropLifePercent, c_unitPropCurrent) < 50.0))) {
        libPEB1_gv_zagaraRegionTwo = true;
    }

    if ((libPEB1_gv_zagaraRegionTwo == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(lv_zagara), libPEB1_gv_zagaraPoints[4]) > 16.0)) {
            return libPEB1_gv_zagaraPoints[4];
        }
        else {
            lv_numberOfRandomPoints = 0;
            lv_pointIndex = 4;
            for ( ; ( (autoADF268FD_ai >= 0 && lv_pointIndex <= autoADF268FD_ae) || (autoADF268FD_ai < 0 && lv_pointIndex >= autoADF268FD_ae) ) ; lv_pointIndex += autoADF268FD_ai ) {
                if ((libNtve_gf_UnitInRegion(lv_zagara, RegionCircle(libPEB1_gv_zagaraPoints[lv_pointIndex], 5.0)) == false)) {
                    lv_numberOfRandomPoints += 1;
                    lv_randomPoints[lv_numberOfRandomPoints] = libPEB1_gv_zagaraPoints[lv_pointIndex];
                }

            }
            if ((lv_numberOfRandomPoints == 0)) {
                return libPEB1_gv_zagaraPoints[4];
            }

        }
    }
    else {
        lv_numberOfRandomPoints = 0;
        lv_pointIndex = 1;
        for ( ; ( (auto8420B2C4_ai >= 0 && lv_pointIndex <= auto8420B2C4_ae) || (auto8420B2C4_ai < 0 && lv_pointIndex >= auto8420B2C4_ae) ) ; lv_pointIndex += auto8420B2C4_ai ) {
            if ((libNtve_gf_UnitInRegion(lv_zagara, RegionCircle(libPEB1_gv_zagaraPoints[lv_pointIndex], 5.0)) == false)) {
                lv_numberOfRandomPoints += 1;
                lv_randomPoints[lv_numberOfRandomPoints] = libPEB1_gv_zagaraPoints[lv_pointIndex];
            }

        }
        if ((lv_numberOfRandomPoints == 0)) {
            return libPEB1_gv_zagaraPoints[1];
        }

    }
    return lv_randomPoints[RandomInt(1, lv_numberOfRandomPoints)];
}

void libPEB1_gf_ApplyAnubArakTalents (int lp_playerIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPVEB_gf_PVEDifficultyValueInt(0, 1) == 1)) {
        CatalogFieldValueModifyFixed(c_gameCatalogEffect, "AnubarakCocoonCryptweaverApplyBehavior", "Chance", lp_playerIndex, 1.0, c_upgradeOperationSet);
        CatalogFieldValueModifyFixed(c_gameCatalogEffect, "AnubarakCocoonCryptweaverRangeIndicatorApplyBehavior", "Chance", lp_playerIndex, 1.0, c_upgradeOperationSet);
    }

}

void libPEB1_gf_ApplyButcherTalents (int lp_playerIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPVEB_gf_PVEDifficultyValueInt(0, 1) == 1)) {
        CatalogFieldValueModifyInt(c_gameCatalogEffect, "ButcherLambToTheSlaughterPostSearch", "AreaArray[" + IntToString(0) + "].MaxCount", lp_playerIndex, 14, c_upgradeOperationAdd);
    }

}

void libPEB1_gf_ApplyDehakaTalents (int lp_playerIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPVEB_gf_PVEDifficultyValueInt(0, 1) == 1)) {
        CatalogFieldValueSet(c_gameCatalogEffect, "DehakaIsolationContagionTalentSearch", "Chance", lp_playerIndex, "1.0");
    }

}

void libPEB1_gf_ApplyDiabloTalents (int lp_playerIndex) {
    // Automatic Variable Declarations
    // Implementation
    PlayerAddTalent(lp_playerIndex, "DiabloTalentDominationOverpower");
    if ((libPVEB_gf_PVEDifficultyValueInt(0, 1) == 1)) {
        CatalogFieldValueModifyFixed(c_gameCatalogEffect, "DiabloLightningBreathOffsetPersistent", "PeriodicOffsetArray[" + IntToString(0) + "]", lp_playerIndex, 2.25, c_upgradeOperationSubtract);
        CatalogFieldValueModifyFixed(c_gameCatalogEffect, "DiabloLightningBreathSearchArea", "AreaArray[" + IntToString(0) + "].RectangleHeight", lp_playerIndex, 4.5, c_upgradeOperationAdd);
        CatalogFieldValueModifyFixed(c_gameCatalogBehavior, "DiabloLightningBreathController", "Duration", lp_playerIndex, 2.0, c_upgradeOperationAdd);
        CatalogFieldValueModifyFixed(c_gameCatalogBehavior, "DiabloLightningBreathUnstoppable", "Duration", lp_playerIndex, 2.0, c_upgradeOperationAdd);
        CatalogFieldValueModifyFixed(c_gameCatalogActor, "DiabloLightningBreathChargeBreatheInModel", "Scale", lp_playerIndex, 0.5, c_upgradeOperationAdd);
        CatalogFieldValueModifyFixed(c_gameCatalogActor, "DiabloLightningBreathChargeBreatheOutModel", "Scale", lp_playerIndex, 0.5, c_upgradeOperationAdd);
        CatalogFieldValueModifyFixed(c_gameCatalogActor, "DiabloLightningBreathGuide", "Height", lp_playerIndex, 4.5, c_upgradeOperationAdd);
        CatalogLinkReplace(lp_playerIndex, c_gameCatalogSound, "Diablo_LightningBreath_Launch", "Diablo_LightningEndless_Launch");
    }

}

void libPEB1_gf_ApplyKerriganTalents (int lp_playerIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPVEB_gf_PVEDifficultyValueInt(0, 1) == 1)) {
        CatalogFieldValueModifyFixed(c_gameCatalogEffect, "MaelstromSearch", "AreaArray[" + IntToString(0) + "].Radius", lp_playerIndex, 1.0, c_upgradeOperationAdd);
        CatalogFieldValueModifyFixed(c_gameCatalogActor, "KerriganMaelstromBuff", "Scale", lp_playerIndex, 0.4, c_upgradeOperationAdd);
        CatalogLinkReplace(lp_playerIndex, c_gameCatalogSound, "Kerrigan_Maelstrom_Cast", "Kerrigan_Omegastorm_Cast");
        CatalogLinkReplace(lp_playerIndex, c_gameCatalogSound, "Kerrigan_Maelstrom_Loop", "Kerrigan_Omegastorm_Loop");
        CatalogLinkReplace(lp_playerIndex, c_gameCatalogSound, "Kerrigan_Maelstrom_Impact", "Kerrigan_Omegastorm_Impact");
        CatalogLinkReplace(lp_playerIndex, c_gameCatalogSound, "Kerrigan_Maelstrom_End", "Kerrigan_Omegastorm_End");
        CatalogFieldValueModifyFixed(c_gameCatalogActor, "KerriganMaelstromRangeSplat", "Scale", lp_playerIndex, 1.0, c_upgradeOperationAdd);
        UnitBehaviorAdd(libGame_gv_players[lp_playerIndex].lv_heroUnit, "KerriganMaelstromMasteryCarryBehavior", libGame_gv_players[lp_playerIndex].lv_heroUnit, 1);
    }

}

void libPEB1_gf_ApplyMurkyTalents (int lp_playerIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPVEB_gf_PVEDifficultyValueInt(0, 1) == 1)) {
        UnitBehaviorAdd(libGame_gv_players[lp_playerIndex].lv_heroUnit, "OctoGrabMasteryCarryBehavior", libGame_gv_players[lp_playerIndex].lv_heroUnit, 1);
    }

}

void libPEB1_gf_ApplyStitchesTalents (int lp_playerIndex) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorAddPlayer(libGame_gv_players[lp_playerIndex].lv_heroUnit, "Ability2Relic", lp_playerIndex, 1);
    UnitBehaviorAddPlayer(libGame_gv_players[lp_playerIndex].lv_heroUnit, "StitchesSlamMasteryCarryBehavior", lp_playerIndex, 1);
    UnitBehaviorAddPlayer(libGame_gv_players[lp_playerIndex].lv_heroUnit, "StitchesTenderizer", lp_playerIndex, 1);
    CatalogFieldValueSet(c_gameCatalogEffect, "StitchesSlamSearch", "AreaArray[" + IntToString(0) + "].Radius", lp_playerIndex, "12");
    CatalogFieldValueSet(c_gameCatalogEffect, "StitchesSlamSearch", "AreaArray[" + IntToString(0) + "].Arc", lp_playerIndex, "87.5");
    CatalogLinkReplace(lp_playerIndex, c_gameCatalogModel, "StitchesSlamModel", "StitchesSlamSmashModel");
    CatalogFieldValueSet(c_gameCatalogAbil, "StitchesSlam", "Cost.Cooldown.TimeUse", lp_playerIndex, "6.0");
    CatalogLinkReplace(lp_playerIndex, c_gameCatalogSound, "Stitches_Slam_Cast", "Stitches_Slam_Pulverize_Cast");
    CatalogLinkReplace(lp_playerIndex, c_gameCatalogSound, "Stitches_Slam_WideSlam_Cast", "Stitches_Slam_Pulverize_Cast");
    CatalogLinkReplace(lp_playerIndex, c_gameCatalogSound, "Stitches_Slam_MegaSmash_Cast", "Stitches_Slam_Pulverize_Cast");
    if ((libPVEB_gf_PVEDifficultyValueInt(0, 1) == 1)) {
        CatalogFieldValueModifyFixed(c_gameCatalogEffect, "StitchesCannibalize", "Chance", lp_playerIndex, 1.0, c_upgradeOperationSet);
    }

    if ((libPVEB_gf_PVEDifficultyValueInt(0, 1) == 1)) {
        PlayerAddTalent(lp_playerIndex, "StitchesMasteryShishKabobHook");
    }

    if ((libPVEB_gf_PVEDifficultyValueInt(0, 1) == 1)) {
        CatalogFieldValueModifyFixed(c_gameCatalogEffect, "StitchesHookLaunchCreatePersistent", "PeriodicOffsetArray[" + IntToString(0) + "]", lp_playerIndex, 5.0, c_upgradeOperationSubtract);
        CatalogFieldValueModifyFixed(c_gameCatalogActor, "StitchesHookGuide", "Height", lp_playerIndex, 5.0, c_upgradeOperationAdd);
        CatalogLinkReplace(lp_playerIndex, c_gameCatalogSound, "Stitches_MeatHook_AttackLaunch", "Stitches_FishingHook_AttackLaunch");
        CatalogLinkReplace(lp_playerIndex, c_gameCatalogSound, "Stitches_Chain_Retract", "Stitches_FishingHook_Retract");
        CatalogFieldValueModifyFixed(c_gameCatalogActor, "StitchesHookHelpingHandGuide", "Height", lp_playerIndex, 5.0, c_upgradeOperationAdd);
        UnitBehaviorAddPlayer(libGame_gv_players[lp_playerIndex].lv_heroUnit, "StitchesHookMasteryCarryBehavior", lp_playerIndex, 1);
    }

}

void libPEB1_gf_ApplyStukovTalents (int lp_playerIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPVEB_gf_PVEDifficultyValueInt(0, 1) == 1)) {
        PlayerAddTalent(lp_playerIndex, "StukovPushComesToShove");
        CatalogFieldValueModifyFixed(c_gameCatalogBehavior, "StukovMassiveShovePeriodicForce", "Modification.MoveSpeedMinimum", lp_playerIndex, 5.5, c_upgradeOperationAdd);
        CatalogFieldValueModifyFixed(c_gameCatalogBehavior, "StukovMassiveShovePeriodicForce", "Modification.MoveSpeedMaximum", lp_playerIndex, 5.5, c_upgradeOperationAdd);
        CatalogFieldValueModifyFixed(c_gameCatalogBehavior, "StukovMassiveShoveSegmentSpawningBehavior", "Period", lp_playerIndex, 0.125, c_upgradeOperationSubtract);
    }

}

void libPEB1_gf_ApplyTychusTalents (int lp_playerIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPVEB_gf_PVEDifficultyValueInt(0, 1) == 1)) {
        CatalogFieldValueSet(c_gameCatalogEffect, "TychusOdinRagnarokMissilesNuclearBlastInitialSet", "Chance", lp_playerIndex, "1.0");
    }

}

string libPEB1_gf_PZEZergBossSkin (string lp_boss) {
    // Automatic Variable Declarations
    string auto6E607832_val;

    // Implementation
    auto6E607832_val = lp_boss;
    if (auto6E607832_val == "Stitches") {
        return "StitchesDecay";
    }
    else if (auto6E607832_val == "Butcher") {
        return "ButcherButcherlisk";
    }
    else if (auto6E607832_val == "Kerrigan") {
        return "KerriganUltimate";
    }
    else if (auto6E607832_val == "Zagara") {
        return "ZagaraUltimate";
    }
    else if (auto6E607832_val == "Abathur") {
        return "AbathurUltimate";
    }
    else if (auto6E607832_val == "Tychus") {
        return "TychusInfestedBase";
    }
    else if (auto6E607832_val == "Murky") {
        return "MurkyGruntyRed";
    }
    else if (auto6E607832_val == "Diablo") {
        return "DiabloKaijoeRed";
    }
    else if (auto6E607832_val == "Anubarak") {
        return "AnubarakZergVar2";
    }
    else if (auto6E607832_val == "Dehaka") {
        return "DehakaMasterVar2";
    }
    else if (auto6E607832_val == "Stukov") {
        return "StukovBaseVar1";
    }
    else {
        return "StitchesDecay";
    }
}

text libPEB1_gf_PZEZergBossName (string lp_boss) {
    // Automatic Variable Declarations
    string autoA1FF1361_val;

    // Implementation
    autoA1FF1361_val = lp_boss;
    if (autoA1FF1361_val == "Abathur") {
        return StringExternal("Param/Value/lib_PEB1_98187F6A");
    }
    else if (autoA1FF1361_val == "Anubarak") {
        return StringExternal("Param/Value/lib_PEB1_9D4D689C");
    }
    else if (autoA1FF1361_val == "Dehaka") {
        return StringExternal("Param/Value/lib_PEB1_CF87DEDC");
    }
    else if (autoA1FF1361_val == "Diablo") {
        return StringExternal("Param/Value/lib_PEB1_CAD2B549");
    }
    else if (autoA1FF1361_val == "Butcher") {
        return StringExternal("Param/Value/lib_PEB1_95B5E8CC");
    }
    else if (autoA1FF1361_val == "Kerrigan") {
        return StringExternal("Param/Value/lib_PEB1_47CC6248");
    }
    else if (autoA1FF1361_val == "Murky") {
        return StringExternal("Param/Value/lib_PEB1_6D141D2C");
    }
    else if (autoA1FF1361_val == "Stitches") {
        return StringExternal("Param/Value/lib_PEB1_6394080B");
    }
    else if (autoA1FF1361_val == "Tychus") {
        return StringExternal("Param/Value/lib_PEB1_3DFCC8FA");
    }
    else if (autoA1FF1361_val == "Zagara") {
        return StringExternal("Param/Value/lib_PEB1_9D043430");
    }
    else if (autoA1FF1361_val == "Stukov") {
        return StringExternal("Param/Value/lib_PEB1_B90FEA4D");
    }
    else {
    }
    return StringExternal("Param/Value/lib_PEB1_16661C2A");
}

void libPEB1_gf_PZETurnOnOffZergBossAI (unit lp_boss, bool lp_onOff) {
    // Variable Declarations
    bool lv_result;
    int lv_playerID;

    // Automatic Variable Declarations
    string autoB5E12456_val;

    // Variable Initialization
    lv_playerID = UnitGetOwner(lp_boss);

    // Implementation
    if ((lp_onOff == true)) {
        UnitGroupAdd(libPEB1_gv_activeZergHeroes, lp_boss);
        if ((lp_boss == libPVEB_gf_PBNPCHeroUnit("Abathur"))) {
            libPEB1_gf_AbathurAI();
            return ;
        }

        AIEnableForPlayer(UnitGetOwner(lp_boss), (libAIAI_ge_HeroAIDifficulty_HeroAIElite));
        autoB5E12456_val = UnitGetType(lp_boss);
        if (autoB5E12456_val == "HeroAbathur") {
            UnitBehaviorAddPlayer(lp_boss, "Ultimate2Unlocked", lv_playerID, 1);
        }
        else if (autoB5E12456_val == "HeroButcher") {
            UnitBehaviorAddPlayer(lp_boss, "Ultimate1Unlocked", lv_playerID, 1);
            libPEB1_gf_ApplyButcherTalents(lv_playerID);
            UnitCopyAIThinkTree(libPEB1_gv_pVEAIDummyButcher, lp_boss);
        }
        else if (autoB5E12456_val == "HeroKerrigan") {
            UnitBehaviorAddPlayer(lp_boss, "Ultimate2Unlocked", lv_playerID, 1);
            libPEB1_gf_ApplyKerriganTalents(lv_playerID);
            UnitCopyAIThinkTree(libPEB1_gv_pVEAIDummyKerrigan, lp_boss);
        }
        else if (autoB5E12456_val == "HeroMurky") {
            UnitBehaviorAddPlayer(lp_boss, "Ultimate2Unlocked", lv_playerID, 1);
            libPEB1_gf_ApplyMurkyTalents(lv_playerID);
            UnitCopyAIThinkTree(libPEB1_gv_pVEAIDummyMurky, lp_boss);
            while (!((UnitIsValid(libGame_gv_heroDeathMurkyRespawnEggs[lv_playerID]) == true))) {
                Wait(1.0, c_timeGame);
            }
            libPEB1_gv_pvEMurkyEggUnit = libGame_gv_heroDeathMurkyRespawnEggs[libPVEB_gf_NPCHeroSpawnedPlayer()];
        }
        else if (autoB5E12456_val == "HeroDiablo") {
            UnitBehaviorAddPlayer(lp_boss, "Ultimate2Unlocked", lv_playerID, 1);
            libPEB1_gf_ApplyDiabloTalents(lv_playerID);
            UnitCopyAIThinkTree(libPEB1_gv_pVEAIDummyDiablo, lp_boss);
        }
        else if (autoB5E12456_val == "HeroAnubarak") {
            UnitBehaviorAddPlayer(lp_boss, "Ultimate1Unlocked", lv_playerID, 1);
            UnitBehaviorAddPlayer(lp_boss, "Ultimate2Unlocked", lv_playerID, 1);
            libPEB1_gf_ApplyAnubArakTalents(lv_playerID);
            UnitCopyAIThinkTree(libPEB1_gv_pVEAIDummyAnubarak, lp_boss);
        }
        else if (autoB5E12456_val == "HeroTychus") {
            UnitBehaviorAddPlayer(lp_boss, "Ultimate1Unlocked", lv_playerID, 1);
            libPEB1_gf_ApplyTychusTalents(lv_playerID);
            UnitCopyAIThinkTree(libPEB1_gv_pVEAIDummyTychus, lp_boss);
        }
        else if (autoB5E12456_val == "HeroDehaka") {
            UnitBehaviorAddPlayer(lp_boss, "Ultimate1Unlocked", lv_playerID, 1);
            libPEB1_gf_ApplyDehakaTalents(lv_playerID);
            UnitCopyAIThinkTree(libPEB1_gv_pVEAIDummyDehaka, lp_boss);
        }
        else if (autoB5E12456_val == "HeroZagara") {
            UnitBehaviorAddPlayer(lp_boss, "Ultimate1Unlocked", lv_playerID, 1);
        }
        else if (autoB5E12456_val == "HeroStitches") {
            UnitBehaviorAddPlayer(lp_boss, "Ultimate2Unlocked", lv_playerID, 1);
            libPEB1_gf_ApplyStitchesTalents(lv_playerID);
            UnitCopyAIThinkTree(libPEB1_gv_pVEAIDummyStitches, lp_boss);
        }
        else if (autoB5E12456_val == "HeroStukov") {
            UnitBehaviorAddPlayer(lp_boss, "Ultimate2Unlocked", lv_playerID, 1);
            libPEB1_gf_ApplyStukovTalents(lv_playerID);
            UnitCopyAIThinkTree(libPEB1_gv_pVEAIDummyStukov, lp_boss);
        }
        else {
        }
    }
    else {
        UnitGroupRemove(libPEB1_gv_activeZergHeroes, lp_boss);
        AIDisableForPlayer(UnitGetOwner(lp_boss));
    }
}

trigger auto_libPEB1_gf_ReviveZergHeroes_Trigger = null;
int auto_libPEB1_gf_ReviveZergHeroes_lp_count;

void libPEB1_gf_ReviveZergHeroes (int lp_count) {
    auto_libPEB1_gf_ReviveZergHeroes_lp_count = lp_count;

    if (auto_libPEB1_gf_ReviveZergHeroes_Trigger == null) {
        auto_libPEB1_gf_ReviveZergHeroes_Trigger = TriggerCreate("auto_libPEB1_gf_ReviveZergHeroes_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_ReviveZergHeroes_Trigger, false, false);
}

bool auto_libPEB1_gf_ReviveZergHeroes_TriggerFunc (bool testConds, bool runActions) {
    int lp_count = auto_libPEB1_gf_ReviveZergHeroes_lp_count;

    // Variable Declarations
    int lv_reviveIndex;
    int[6] lv_orderArray;
    int lv_orderIndex;
    int lv_zergHeroesAlive;
    bool lv_zergHeroEventTimerStarted;
    bool lv_spawnHeroThisCycle;

    // Automatic Variable Declarations
    int auto5616354C_n;
    int auto5616354C_i;
    const int auto0B6F865E_ae = 5;
    const int auto0B6F865E_ai = 1;
    const int autoB38A66BE_ae = 5;
    const int autoB38A66BE_ai = 1;
    int autoB6CB7C33_ae;
    const int autoB6CB7C33_ai = 1;
    const int autoCC7198AF_ae = 5;
    const int autoCC7198AF_ai = 1;
    int auto5A108EFF_val;

    // Variable Initialization

    // Implementation
    if (((libPEB1_gv_zergSpawningDisabled == true) || (TimerGetRemaining(libPEB1_gv_zergHeroEventWaitTimer) > 0.1) || (libGame_gv_gameOver == true))) {
        return true;
    }

    auto5616354C_n = lp_count;
    for (auto5616354C_i = 1; auto5616354C_i <= auto5616354C_n; auto5616354C_i += 1) {
        lv_reviveIndex = 1;
        for ( ; ( (auto0B6F865E_ai >= 0 && lv_reviveIndex <= auto0B6F865E_ae) || (auto0B6F865E_ai < 0 && lv_reviveIndex >= auto0B6F865E_ae) ) ; lv_reviveIndex += auto0B6F865E_ai ) {
            if ((libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_reviveIndex].lv_hero == "Murky")) {
                if (((UnitIsAlive(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_reviveIndex].lv_hero)) == true) || (UnitIsValid(libPEB1_gv_pvEMurkyEggUnit) == true))) {
                    lv_zergHeroesAlive += 1;
                }

            }
            else {
                if ((UnitIsAlive(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_reviveIndex].lv_hero)) == true)) {
                    lv_zergHeroesAlive += 1;
                }

            }
        }
        if ((lv_zergHeroesAlive >= libPEB1_gv_maxActiveZergHeroes[libPEB1_gv_currentStage])) {
            return true;
        }

        lv_orderIndex = 0;
        lv_reviveIndex = libPEB1_gv_zergHeroReviveCounter;
        for ( ; ( (autoB38A66BE_ai >= 0 && lv_reviveIndex <= autoB38A66BE_ae) || (autoB38A66BE_ai < 0 && lv_reviveIndex >= autoB38A66BE_ae) ) ; lv_reviveIndex += autoB38A66BE_ai ) {
            lv_orderIndex += 1;
            lv_orderArray[lv_orderIndex] = lv_reviveIndex;
        }
        autoB6CB7C33_ae = (libPEB1_gv_zergHeroReviveCounter - 1);
        lv_reviveIndex = 1;
        for ( ; ( (autoB6CB7C33_ai >= 0 && lv_reviveIndex <= autoB6CB7C33_ae) || (autoB6CB7C33_ai < 0 && lv_reviveIndex >= autoB6CB7C33_ae) ) ; lv_reviveIndex += autoB6CB7C33_ai ) {
            lv_orderIndex += 1;
            lv_orderArray[lv_orderIndex] = lv_reviveIndex;
        }
        lv_orderIndex = 1;
        for ( ; ( (autoCC7198AF_ai >= 0 && lv_orderIndex <= autoCC7198AF_ae) || (autoCC7198AF_ai < 0 && lv_orderIndex >= autoCC7198AF_ae) ) ; lv_orderIndex += autoCC7198AF_ai ) {
            if (((libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_orderArray[lv_orderIndex]].lv_hero != "Murky") || (UnitIsValid(libPEB1_gv_pvEMurkyEggUnit) == false)) && (libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_orderArray[lv_orderIndex]].lv_active == true) && (UnitIsAlive(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_orderArray[lv_orderIndex]].lv_hero)) == false) && (TimerGetRemaining(libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_orderArray[lv_orderIndex]].lv_respawnTimer) < 0.1)) {
                if ((lv_zergHeroEventTimerStarted == false)) {
                    lv_zergHeroEventTimerStarted = true;
                    TimerStart(libPEB1_gv_zergHeroEventWaitTimer, libPEB1_gv_zergHeroEventPeriod, false, c_timeGame);
                }

                TimerStart(libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_orderArray[lv_orderIndex]].lv_respawnTimer, 10.0, false, c_timeGame);
                auto5A108EFF_val = libPEB1_gv_currentStage;
                if (auto5A108EFF_val == 1) {
                    libPVEB_gf_PBSpawnNPCHero(libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_orderArray[lv_orderIndex]].lv_hero, RegionGetCenter(libPEB1_gv_spawnPoints[libPEB1_gv_currentStage][libPEB1_gf_NearestSpawnPointtoPoint(libPEB1_gf_PositionofRightmostPlayerHero(), libPEB1_ge_Direction_Rightward)].lv_spawnRegion), libPEB1_gv_zergHeroLevel[1]);
                }
                else if (auto5A108EFF_val == 2) {
                    if ((libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_orderArray[lv_orderIndex]].lv_hero == "Abathur")) {
                        libPVEB_gf_PBSpawnNPCHero(libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_orderArray[lv_orderIndex]].lv_hero, libPEB1_gf_ClosestAbathurSpawnPoint(libPEB1_gf_PositionofLeftmostPlayerHero()), libPEB1_gv_zergHeroLevel[2]);
                    }
                    else {
                        libPVEB_gf_PBSpawnNPCHero(libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_orderArray[lv_orderIndex]].lv_hero, RegionGetCenter(libPEB1_gv_spawnPoints[libPEB1_gv_currentStage][libPEB1_gf_NearestSpawnPointtoPoint(libPEB1_gf_PositionofLeftmostPlayerHero(), libPEB1_ge_Direction_Leftward)].lv_spawnRegion), libPEB1_gv_zergHeroLevel[2]);
                    }
                }
                else if (auto5A108EFF_val == 3) {
                    if ((RandomInt(1, 2) == 1)) {
                        libPVEB_gf_PBSpawnNPCHero(libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_orderArray[lv_orderIndex]].lv_hero, RegionGetCenter(libPEB1_gv_spawnPoints[libPEB1_gv_currentStage][libPEB1_gf_NearestSpawnPointtoPoint(libPEB1_gf_PositionofRightmostPlayerHero(), libPEB1_ge_Direction_Normal)].lv_spawnRegion), libPEB1_gv_zergHeroLevel[2]);
                    }
                    else {
                        libPVEB_gf_PBSpawnNPCHero(libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_orderArray[lv_orderIndex]].lv_hero, RegionGetCenter(libPEB1_gv_spawnPoints[libPEB1_gv_currentStage][libPEB1_gf_NearestSpawnPointtoPoint(libPEB1_gf_PositionofLeftmostPlayerHero(), libPEB1_ge_Direction_Normal)].lv_spawnRegion), libPEB1_gv_zergHeroLevel[2]);
                    }
                }
                else {
                }
                libPEB1_gf_PZETurnOnOffZergBossAI(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_orderArray[lv_orderIndex]].lv_hero), true);
                if ((lv_orderArray[lv_orderIndex] == libPEB1_gv_zergHeroReviveCounter)) {
                    libPEB1_gv_zergHeroReviveCounter += 1;
                    if ((libPEB1_gv_zergHeroReviveCounter == 6)) {
                        libPEB1_gv_zergHeroReviveCounter = 1;
                    }

                }

                break;
            }

        }
        Wait(RandomFixed(4.0, 8.0), c_timeGame);
    }
    return true;
}

trigger auto_libPEB1_gf_PlayZergHeroSpawnSound_Trigger = null;
unit auto_libPEB1_gf_PlayZergHeroSpawnSound_lp_zergHeroUnit;

void libPEB1_gf_PlayZergHeroSpawnSound (unit lp_zergHeroUnit) {
    auto_libPEB1_gf_PlayZergHeroSpawnSound_lp_zergHeroUnit = lp_zergHeroUnit;

    if (auto_libPEB1_gf_PlayZergHeroSpawnSound_Trigger == null) {
        auto_libPEB1_gf_PlayZergHeroSpawnSound_Trigger = TriggerCreate("auto_libPEB1_gf_PlayZergHeroSpawnSound_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_PlayZergHeroSpawnSound_Trigger, false, false);
}

bool auto_libPEB1_gf_PlayZergHeroSpawnSound_TriggerFunc (bool testConds, bool runActions) {
    unit lp_zergHeroUnit = auto_libPEB1_gf_PlayZergHeroSpawnSound_lp_zergHeroUnit;

    // Variable Declarations
    string lv_sound;

    // Automatic Variable Declarations
    string autoFEF23A38_val;

    // Variable Initialization

    // Implementation
    if ((libPEB1_gv_zergHeroSpawnSoundsEnabled == false)) {
        return true;
    }

    autoFEF23A38_val = UnitGetType(lp_zergHeroUnit);
    if (autoFEF23A38_val == "HeroAnubarak") {
        lv_sound = "ZergHeroBGSoundAnubarak";
    }
    else if (autoFEF23A38_val == "HeroButcher") {
        lv_sound = "ZergHeroBGSoundButcher";
    }
    else if (autoFEF23A38_val == "HeroDehaka") {
        lv_sound = "ZergHeroBGSoundDehaka";
    }
    else if (autoFEF23A38_val == "HeroDiablo") {
        lv_sound = "ZergHeroBGSoundDiablo";
    }
    else if (autoFEF23A38_val == "HeroKerrigan") {
        lv_sound = "ZergHeroBGSoundKerrigan";
    }
    else if (autoFEF23A38_val == "HeroMurky") {
        lv_sound = "ZergHeroBGSoundMurky";
    }
    else if (autoFEF23A38_val == "HeroStitches") {
        lv_sound = "ZergHeroBGSoundStitches";
    }
    else if (autoFEF23A38_val == "HeroTychus") {
        lv_sound = "ZergHeroBGSoundTychus";
    }
    else if (autoFEF23A38_val == "HeroZagara") {
        lv_sound = "ZergHeroBGSoundZagara";
    }
    else if (autoFEF23A38_val == "HeroStukov") {
        lv_sound = "ZergHeroBGSoundStukov";
    }
    else {
        return true;
    }
    libNtve_gf_CreateActorAtPoint(lv_sound, UnitGetPosition(lp_zergHeroUnit));
    return true;
}

trigger auto_libPEB1_gf_PrepareTheNextHero_Trigger = null;
int auto_libPEB1_gf_PrepareTheNextHero_lp_stage;
int auto_libPEB1_gf_PrepareTheNextHero_lp_index;

void libPEB1_gf_PrepareTheNextHero (int lp_stage, int lp_index) {
    auto_libPEB1_gf_PrepareTheNextHero_lp_stage = lp_stage;
    auto_libPEB1_gf_PrepareTheNextHero_lp_index = lp_index;

    if (auto_libPEB1_gf_PrepareTheNextHero_Trigger == null) {
        auto_libPEB1_gf_PrepareTheNextHero_Trigger = TriggerCreate("auto_libPEB1_gf_PrepareTheNextHero_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_PrepareTheNextHero_Trigger, false, false);
}

bool auto_libPEB1_gf_PrepareTheNextHero_TriggerFunc (bool testConds, bool runActions) {
    int lp_stage = auto_libPEB1_gf_PrepareTheNextHero_lp_stage;
    int lp_index = auto_libPEB1_gf_PrepareTheNextHero_lp_index;

    // Variable Declarations
    int lv_itAvailableIndex;
    int lv_itHeroIndex;
    string[21] lv_unusedHeroes;
    int lv_unusedHeroesCount;
    bool lv_found;
    string lv_nextHero;

    // Automatic Variable Declarations
    int autoCD1DBF91_ae;
    const int autoCD1DBF91_ai = 1;
    const int auto2AC7F565_ae = libPVEB_gv_pBNPCHero_MaxCount_C;
    const int auto2AC7F565_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libPEB1_gv_currentStage == 3)) {
        return true;
    }

    libPEB1_gv_zergHeroes[lp_stage][lp_index].lv_active = false;
    Wait(8.0, c_timeGame);
    if ((lp_stage != libPEB1_gv_currentStage)) {
        return true;
    }

    if ((libPEB1_gv_zergHeroes[lp_stage][lp_index].lv_hero == "Abathur")) {
        lv_nextHero = "Abathur";
    }
    else {
        lv_unusedHeroesCount = 0;
        autoCD1DBF91_ae = libPEB1_gv_availableHeroTypesCount;
        lv_itAvailableIndex = 1;
        for ( ; ( (autoCD1DBF91_ai >= 0 && lv_itAvailableIndex <= autoCD1DBF91_ae) || (autoCD1DBF91_ai < 0 && lv_itAvailableIndex >= autoCD1DBF91_ae) ) ; lv_itAvailableIndex += autoCD1DBF91_ai ) {
            if (((libPEB1_gv_availableHeroTypes[lv_itAvailableIndex] == "Abathur") || (libPEB1_gv_availableHeroTypes[lv_itAvailableIndex] == "Zagara"))) {
                continue;
            }

            if (((libPEB1_gv_currentStage == 1) || (libPEB1_gv_holdoutStage2Started == true)) && (libPEB1_gv_availableHeroTypes[lv_itAvailableIndex] == "Murky")) {
                continue;
            }

            lv_found = false;
            lv_itHeroIndex = 1;
            for ( ; ( (auto2AC7F565_ai >= 0 && lv_itHeroIndex <= auto2AC7F565_ae) || (auto2AC7F565_ai < 0 && lv_itHeroIndex >= auto2AC7F565_ae) ) ; lv_itHeroIndex += auto2AC7F565_ai ) {
                if ((libPEB1_gv_zergHeroes[lp_stage][lv_itHeroIndex].lv_hero == libPEB1_gv_availableHeroTypes[lv_itAvailableIndex])) {
                    lv_found = true;
                    break;
                }

            }
            if ((lv_found == false)) {
                lv_unusedHeroesCount += 1;
                lv_unusedHeroes[lv_unusedHeroesCount] = libPEB1_gv_availableHeroTypes[lv_itAvailableIndex];
            }

        }
        if ((lv_unusedHeroesCount == 0)) {
            lv_nextHero = libPEB1_gv_zergHeroes[lp_stage][lp_index].lv_hero;
        }
        else {
            lv_nextHero = lv_unusedHeroes[RandomInt(1, lv_unusedHeroesCount)];
        }
    }
    libPVEB_gf_PBResetNPCHero(libPEB1_gv_zergHeroes[lp_stage][lp_index].lv_hero);
    libPVEB_gf_PBPrepareNPCHero(lv_nextHero, libPEB1_gf_PZEZergBossSkin(lv_nextHero));
    libPEB1_gv_zergHeroes[lp_stage][lp_index].lv_hero = lv_nextHero;
    Wait(10.0, c_timeGame);
    libPEB1_gv_zergHeroes[lp_stage][lp_index].lv_active = true;
    return true;
}

bool libPEB1_gf_SpawnPointisValid (int lp_spawnPoint) {
    // Variable Declarations
    int lv_playerIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((TimerGetRemaining(libPEB1_gv_spawnPoints[libPEB1_gv_currentStage][lp_spawnPoint].lv_recentlyUsedTimer) > 0.1) || (UnitGroupCount(UnitGroupAlliance(libStEx_gv_pLAYER_11_ORDER, c_unitAllianceAlly, libPEB1_gv_spawnPoints[libPEB1_gv_currentStage][lp_spawnPoint].lv_noSpawnRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
        return false;
    }
    else {
        return true;
    }
}

int libPEB1_gf_NearestSpawnPointtoPoint (point lp_point, int lp_direction) {
    // Variable Declarations
    int lv_pointIndex;
    int lv_currentBestPoint;

    // Automatic Variable Declarations
    int auto39201335_ae;
    const int auto39201335_ai = 1;
    int auto018D09B8_ae;
    const int auto018D09B8_ai = 1;
    int autoD40C6BB1_ae;
    const int autoD40C6BB1_ai = 1;

    // Variable Initialization

    // Implementation
    auto39201335_ae = libPEB1_gv_numberOfSpawnPoints[libPEB1_gv_currentStage];
    lv_pointIndex = 1;
    for ( ; ( (auto39201335_ai >= 0 && lv_pointIndex <= auto39201335_ae) || (auto39201335_ai < 0 && lv_pointIndex >= auto39201335_ae) ) ; lv_pointIndex += auto39201335_ai ) {
        if ((libPEB1_gf_SpawnPointisValid(lv_pointIndex) == true) && ((lp_direction == libPEB1_ge_Direction_Normal) || ((lp_direction == libPEB1_ge_Direction_Rightward) && (PointGetX(RegionGetCenter(libPEB1_gv_spawnPoints[libPEB1_gv_currentStage][lv_pointIndex].lv_spawnRegion)) > PointGetX(lp_point))) || ((lp_direction == libPEB1_ge_Direction_Leftward) && (PointGetX(RegionGetCenter(libPEB1_gv_spawnPoints[libPEB1_gv_currentStage][lv_pointIndex].lv_spawnRegion)) < PointGetX(lp_point))))) {
            if ((lv_currentBestPoint == 0)) {
                lv_currentBestPoint = lv_pointIndex;
            }
            else {
                if ((DistanceBetweenPoints(lp_point, RegionGetCenter(libPEB1_gv_spawnPoints[libPEB1_gv_currentStage][lv_pointIndex].lv_spawnRegion)) < DistanceBetweenPoints(lp_point, RegionGetCenter(libPEB1_gv_spawnPoints[libPEB1_gv_currentStage][lv_currentBestPoint].lv_spawnRegion)))) {
                    lv_currentBestPoint = lv_pointIndex;
                }

            }
        }

    }
    if ((lv_currentBestPoint > 0)) {
        return lv_currentBestPoint;
    }

    auto018D09B8_ae = libPEB1_gv_numberOfSpawnPoints[libPEB1_gv_currentStage];
    lv_pointIndex = 1;
    for ( ; ( (auto018D09B8_ai >= 0 && lv_pointIndex <= auto018D09B8_ae) || (auto018D09B8_ai < 0 && lv_pointIndex >= auto018D09B8_ae) ) ; lv_pointIndex += auto018D09B8_ai ) {
        if ((libPEB1_gf_SpawnPointisValid(lv_pointIndex) == true)) {
            if ((lv_currentBestPoint == 0)) {
                lv_currentBestPoint = lv_pointIndex;
            }
            else {
                if ((DistanceBetweenPoints(lp_point, RegionGetCenter(libPEB1_gv_spawnPoints[libPEB1_gv_currentStage][lv_pointIndex].lv_spawnRegion)) < DistanceBetweenPoints(lp_point, RegionGetCenter(libPEB1_gv_spawnPoints[libPEB1_gv_currentStage][lv_currentBestPoint].lv_spawnRegion)))) {
                    lv_currentBestPoint = lv_pointIndex;
                }

            }
        }

    }
    if ((lv_currentBestPoint > 0)) {
        return lv_currentBestPoint;
    }

    autoD40C6BB1_ae = libPEB1_gv_numberOfSpawnPoints[libPEB1_gv_currentStage];
    lv_pointIndex = 1;
    for ( ; ( (autoD40C6BB1_ai >= 0 && lv_pointIndex <= autoD40C6BB1_ae) || (autoD40C6BB1_ai < 0 && lv_pointIndex >= autoD40C6BB1_ae) ) ; lv_pointIndex += autoD40C6BB1_ai ) {
        if ((lv_currentBestPoint == 0)) {
            lv_currentBestPoint = lv_pointIndex;
        }
        else {
            if ((DistanceBetweenPoints(lp_point, RegionGetCenter(libPEB1_gv_spawnPoints[libPEB1_gv_currentStage][lv_pointIndex].lv_spawnRegion)) < DistanceBetweenPoints(lp_point, RegionGetCenter(libPEB1_gv_spawnPoints[libPEB1_gv_currentStage][lv_currentBestPoint].lv_spawnRegion)))) {
                lv_currentBestPoint = lv_pointIndex;
            }

        }
    }
    return lv_currentBestPoint;
}

point libPEB1_gf_PositionofRightmostPlayerHero () {
    // Variable Declarations
    int lv_playerIndex;
    int lv_currentBestIndex;

    // Automatic Variable Declarations
    playergroup auto3E27C3BE_g;

    // Variable Initialization

    // Implementation
    auto3E27C3BE_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_playerIndex = -1;
    while (true) {
        	lv_playerIndex = PlayerGroupNextPlayer(auto3E27C3BE_g, lv_playerIndex);
        	if (lv_playerIndex<0) { break; }
        	if ((UnitIsAlive(libGame_gv_players[lv_playerIndex].lv_heroUnit) == true)) {
            if ((lv_currentBestIndex == 0)) {
                lv_currentBestIndex = lv_playerIndex;
            }
            else {
                if ((PointGetX(UnitGetPosition(libGame_gv_players[lv_playerIndex].lv_heroUnit)) > PointGetX(UnitGetPosition(libGame_gv_players[lv_currentBestIndex].lv_heroUnit)))) {
                    lv_currentBestIndex = lv_playerIndex;
                }

            }
        }

    }
    if ((lv_currentBestIndex == 0)) {
        return PointFromName(("Start Location 12 - " + IntToString(libPEB1_gv_currentStage)));
    }
    else {
        return UnitGetPosition(libGame_gv_players[lv_currentBestIndex].lv_heroUnit);
    }
}

point libPEB1_gf_PositionofLeftmostPlayerHero () {
    // Variable Declarations
    int lv_playerIndex;
    int lv_currentBestIndex;

    // Automatic Variable Declarations
    playergroup auto1F859E0A_g;

    // Variable Initialization

    // Implementation
    auto1F859E0A_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_playerIndex = -1;
    while (true) {
        	lv_playerIndex = PlayerGroupNextPlayer(auto1F859E0A_g, lv_playerIndex);
        	if (lv_playerIndex<0) { break; }
        	if ((UnitIsAlive(libGame_gv_players[lv_playerIndex].lv_heroUnit) == true)) {
            if ((lv_currentBestIndex == 0)) {
                lv_currentBestIndex = lv_playerIndex;
            }
            else {
                if ((PointGetX(UnitGetPosition(libGame_gv_players[lv_playerIndex].lv_heroUnit)) < PointGetX(UnitGetPosition(libGame_gv_players[lv_currentBestIndex].lv_heroUnit)))) {
                    lv_currentBestIndex = lv_playerIndex;
                }

            }
        }

    }
    if ((lv_currentBestIndex == 0)) {
        return PointFromName(("Start Location 12 - " + IntToString(libPEB1_gv_currentStage)));
    }
    else {
        return UnitGetPosition(libGame_gv_players[lv_currentBestIndex].lv_heroUnit);
    }
}

trigger auto_libPEB1_gf_CreateZergCamp_Trigger = null;
int auto_libPEB1_gf_CreateZergCamp_lp_stage;
string auto_libPEB1_gf_CreateZergCamp_lp_type1;
int auto_libPEB1_gf_CreateZergCamp_lp_count1;
string auto_libPEB1_gf_CreateZergCamp_lp_type2;
int auto_libPEB1_gf_CreateZergCamp_lp_count2;
region auto_libPEB1_gf_CreateZergCamp_lp_region;

void libPEB1_gf_CreateZergCamp (int lp_stage, string lp_type1, int lp_count1, string lp_type2, int lp_count2, region lp_region) {
    auto_libPEB1_gf_CreateZergCamp_lp_stage = lp_stage;
    auto_libPEB1_gf_CreateZergCamp_lp_type1 = lp_type1;
    auto_libPEB1_gf_CreateZergCamp_lp_count1 = lp_count1;
    auto_libPEB1_gf_CreateZergCamp_lp_type2 = lp_type2;
    auto_libPEB1_gf_CreateZergCamp_lp_count2 = lp_count2;
    auto_libPEB1_gf_CreateZergCamp_lp_region = lp_region;

    if (auto_libPEB1_gf_CreateZergCamp_Trigger == null) {
        auto_libPEB1_gf_CreateZergCamp_Trigger = TriggerCreate("auto_libPEB1_gf_CreateZergCamp_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_CreateZergCamp_Trigger, false, false);
}

bool auto_libPEB1_gf_CreateZergCamp_TriggerFunc (bool testConds, bool runActions) {
    int lp_stage = auto_libPEB1_gf_CreateZergCamp_lp_stage;
    string lp_type1 = auto_libPEB1_gf_CreateZergCamp_lp_type1;
    int lp_count1 = auto_libPEB1_gf_CreateZergCamp_lp_count1;
    string lp_type2 = auto_libPEB1_gf_CreateZergCamp_lp_type2;
    int lp_count2 = auto_libPEB1_gf_CreateZergCamp_lp_count2;
    region lp_region = auto_libPEB1_gf_CreateZergCamp_lp_region;

    // Variable Declarations
    unitgroup lv_zergGroup;
    unit lv_nearestPlayerUnit;
    unit lv_nearestZergUnit;

    // Automatic Variable Declarations
    int auto95BA4BA5_n;
    int auto95BA4BA5_i;
    int auto9603F159_n;
    int auto9603F159_i;
    unitgroup autoA97E68CB_g;
    int autoA97E68CB_u;
    unit autoA97E68CB_var;
    unitgroup auto2F94705F_g;
    int auto2F94705F_u;
    unit auto2F94705F_var;

    // Variable Initialization
    lv_zergGroup = UnitGroupEmpty();

    // Implementation
    if (((libPEB1_gv_zergSpawningDisabled == true) || (libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != lp_stage))) {
        return true;
    }

    auto95BA4BA5_n = lp_count1;
    for (auto95BA4BA5_i = 1; auto95BA4BA5_i <= auto95BA4BA5_n; auto95BA4BA5_i += 1) {
        libPVEB_gf_PBSpawnNPCMinions(lp_type1, libStEx_gv_pLAYER_12_CHAOS, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle(), 0);
        UnitGroupAdd(lv_zergGroup, UnitLastCreated());
        if ((lp_type1 == "SlivanBossPod")) {
            UnitBehaviorRemovePlayer(UnitLastCreated(), "SlivanPodBirthDelay", UnitGetOwner(UnitLastCreated()), 1);
            UnitBehaviorRemovePlayer(UnitLastCreated(), "PodlingWander", UnitGetOwner(UnitLastCreated()), 1);
            UnitBehaviorAddPlayer(UnitLastCreated(), "SlivanPodShorterVision", UnitGetOwner(UnitLastCreated()), 1);
        }

    }
    auto9603F159_n = lp_count2;
    for (auto9603F159_i = 1; auto9603F159_i <= auto9603F159_n; auto9603F159_i += 1) {
        libPVEB_gf_PBSpawnNPCMinions(lp_type2, libStEx_gv_pLAYER_12_CHAOS, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle(), 0);
        UnitGroupAdd(lv_zergGroup, UnitLastCreated());
        if ((lp_type2 == "SlivanBossPod")) {
            UnitBehaviorRemovePlayer(UnitLastCreated(), "SlivanPodBirthDelay", UnitGetOwner(UnitLastCreated()), 1);
            UnitBehaviorRemovePlayer(UnitLastCreated(), "PodlingWander", UnitGetOwner(UnitLastCreated()), 1);
            UnitBehaviorAddPlayer(UnitLastCreated(), "SlivanPodShorterVision", UnitGetOwner(UnitLastCreated()), 1);
        }

    }
    while (true) {
        Wait(0.5, c_timeGame);
        if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != lp_stage))) {
            return true;
        }

        if ((UnitGroupCount(lv_zergGroup, c_unitCountAlive) < (lp_count1 + lp_count2))) {
            libPEB1_gf_PZETurnOnOffZergMinionGroupAI(lv_zergGroup, true);
            return true;
        }

        autoA97E68CB_g = lv_zergGroup;
        autoA97E68CB_u = UnitGroupCount(autoA97E68CB_g, c_unitCountAll);
        for (;; autoA97E68CB_u -= 1) {
            autoA97E68CB_var = UnitGroupUnitFromEnd(autoA97E68CB_g, autoA97E68CB_u);
            if (autoA97E68CB_var == null) { break; }
            if ((UnitGetPropertyFixed(autoA97E68CB_var, c_unitPropLife, c_unitPropCurrent) < UnitGetPropertyFixed(autoA97E68CB_var, c_unitPropLifeMax, c_unitPropCurrent))) {
                libPEB1_gf_PZETurnOnOffZergMinionGroupAI(lv_zergGroup, true);
                return true;
            }

        }
        lv_nearestPlayerUnit = UnitGroupClosestToPoint(UnitGroupAlliance(libStEx_gv_pLAYER_11_ORDER, c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), RegionGetCenter(lp_region));
        if ((lv_nearestPlayerUnit != null)) {
            lv_nearestZergUnit = UnitGroupClosestToPoint(lv_zergGroup, UnitGetPosition(lv_nearestPlayerUnit));
            if ((DistanceBetweenPoints(UnitGetPosition(lv_nearestZergUnit), UnitGetPosition(lv_nearestPlayerUnit)) <= libPEB1_gv_zergCampAggroRange)) {
                libPEB1_gf_PZETurnOnOffZergMinionGroupAI(lv_zergGroup, true);
                return true;
            }

        }

        auto2F94705F_g = lv_zergGroup;
        auto2F94705F_u = UnitGroupCount(auto2F94705F_g, c_unitCountAll);
        for (;; auto2F94705F_u -= 1) {
            auto2F94705F_var = UnitGroupUnitFromEnd(auto2F94705F_g, auto2F94705F_u);
            if (auto2F94705F_var == null) { break; }
            if ((RandomInt(1, 16) == 1) && (UnitOrderCount(auto2F94705F_var) == 0)) {
                UnitIssueOrder(auto2F94705F_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lp_region)), c_orderQueueReplace);
            }

        }
    }
    return true;
}

void libPEB1_gf_SpawnZergWave (string lp_unitType, int lp_count, int lp_spawnRegion, int lp_stage) {
    // Automatic Variable Declarations
    int auto8913E5DB_n;
    int auto8913E5DB_i;

    // Implementation
    auto8913E5DB_n = lp_count;
    for (auto8913E5DB_i = 1; auto8913E5DB_i <= auto8913E5DB_n; auto8913E5DB_i += 1) {
        if (((libPEB1_gv_zergSpawningDisabled == true) || (libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != lp_stage))) {
            return ;
        }

        libPVEB_gf_PBSpawnNPCMinions(lp_unitType, libStEx_gv_pLAYER_12_CHAOS, RegionRandomPoint(libPEB1_gv_spawnPoints[libPEB1_gv_currentStage][lp_spawnRegion].lv_spawnRegion), 270.0, 0);
        libPEB1_gf_PZETurnOnOffZergMinionAI(UnitLastCreated(), true);
        Wait(0.0625, c_timeGame);
    }
}

trigger auto_libPEB1_gf_MonitorTextTag_Trigger = null;
unit auto_libPEB1_gf_MonitorTextTag_lp_unit;
fixed auto_libPEB1_gf_MonitorTextTag_lp_duration;
int auto_libPEB1_gf_MonitorTextTag_lp_tag;

void libPEB1_gf_MonitorTextTag (unit lp_unit, fixed lp_duration, int lp_tag) {
    auto_libPEB1_gf_MonitorTextTag_lp_unit = lp_unit;
    auto_libPEB1_gf_MonitorTextTag_lp_duration = lp_duration;
    auto_libPEB1_gf_MonitorTextTag_lp_tag = lp_tag;

    if (auto_libPEB1_gf_MonitorTextTag_Trigger == null) {
        auto_libPEB1_gf_MonitorTextTag_Trigger = TriggerCreate("auto_libPEB1_gf_MonitorTextTag_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_MonitorTextTag_Trigger, false, false);
}

bool auto_libPEB1_gf_MonitorTextTag_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libPEB1_gf_MonitorTextTag_lp_unit;
    fixed lp_duration = auto_libPEB1_gf_MonitorTextTag_lp_duration;
    int lp_tag = auto_libPEB1_gf_MonitorTextTag_lp_tag;

    // Variable Declarations
    int lv_currentStage_LOCAL;

    // Automatic Variable Declarations
    int auto1AF70381_n;
    int auto1AF70381_i;

    // Variable Initialization

    // Implementation
    lv_currentStage_LOCAL = libPEB1_gv_currentStage;
    auto1AF70381_n = FixedToInt((lp_duration * 16.0));
    for (auto1AF70381_i = 1; auto1AF70381_i <= auto1AF70381_n; auto1AF70381_i += 1) {
        Wait(0.0625, c_timeGame);
        if (((libGame_gv_gameOver == true) || (UnitIsAlive(lp_unit) == false) || (libPEB1_gv_currentStage != lv_currentStage_LOCAL))) {
            TextTagDestroy(lp_tag);
            return true;
        }

    }
    TextTagDestroy(lp_tag);
    return true;
}

trigger auto_libPEB1_gf_UnburrowZerg_Trigger = null;
string auto_libPEB1_gf_UnburrowZerg_lp_unitType;
point auto_libPEB1_gf_UnburrowZerg_lp_position;

void libPEB1_gf_UnburrowZerg (string lp_unitType, point lp_position) {
    auto_libPEB1_gf_UnburrowZerg_lp_unitType = lp_unitType;
    auto_libPEB1_gf_UnburrowZerg_lp_position = lp_position;

    if (auto_libPEB1_gf_UnburrowZerg_Trigger == null) {
        auto_libPEB1_gf_UnburrowZerg_Trigger = TriggerCreate("auto_libPEB1_gf_UnburrowZerg_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_UnburrowZerg_Trigger, false, false);
}

bool auto_libPEB1_gf_UnburrowZerg_TriggerFunc (bool testConds, bool runActions) {
    string lp_unitType = auto_libPEB1_gf_UnburrowZerg_lp_unitType;
    point lp_position = auto_libPEB1_gf_UnburrowZerg_lp_position;

    // Automatic Variable Declarations
    string autoA643A193_val;

    // Implementation
    if ((libPEB1_gv_zergSpawningDisabled == true)) {
        return true;
    }

    libPVEB_gf_PBSpawnNPCMinions(lp_unitType, libCore_gv_cOMPUTER_TeamChaos, lp_position, libNtve_gf_RandomAngle(), 0);
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    autoA643A193_val = lp_unitType;
    if (autoA643A193_val == "ZergRoach") {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), "Unburrow", "Birth", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        if ((UnitIsAlive(UnitLastCreated()) == false)) {
            return true;
        }

        libNtve_gf_ShowHideUnit(UnitLastCreated(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, true);
    }
    else if (autoA643A193_val == "ZergBaneling") {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), "Unburrow", "Birth", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        if ((UnitIsAlive(UnitLastCreated()) == false)) {
            return true;
        }

        libNtve_gf_ShowHideUnit(UnitLastCreated(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, true);
    }
    else if (autoA643A193_val == "ZergUltralisk") {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), "Unburrow", "Stand Cover End", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        if ((UnitIsAlive(UnitLastCreated()) == false)) {
            return true;
        }

        libNtve_gf_ShowHideUnit(UnitLastCreated(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, true);
        Wait(0.6045, c_timeGame);
    }
    else {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), "Unburrow", "Unburrow", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        if ((UnitIsAlive(UnitLastCreated()) == false)) {
            return true;
        }

        libNtve_gf_CreateActorAtPoint("KerriganCrushingGripZerglingUnburrowSplat", UnitGetPosition(UnitLastCreated()));
        if ((UnitGetType(UnitLastCreated()) == "ZergHydralisk")) {
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.200000");
        }

        libNtve_gf_ShowHideUnit(UnitLastCreated(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, true);
        Wait(0.6045, c_timeGame);
    }
    libNtve_gf_PauseUnit(UnitLastCreated(), false);
    if ((UnitIsAlive(UnitLastCreated()) == false)) {
        return true;
    }

    libPEB1_gf_PZETurnOnOffZergMinionAI(UnitLastCreated(), true);
    return true;
}

unit libPEB1_gf_NydusWormSpawn (point lp_location) {
    // Automatic Variable Declarations
    int auto9467A08B_val;

    // Implementation
    if ((libPEB1_gv_zergSpawningDisabled == true)) {
        return null;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CoopNydusWorm", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_TeamChaos, lp_location, null);
    libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, libCore_gv_cOMPUTER_TeamOrder);
    auto9467A08B_val = RandomInt(1, 2);
    if (auto9467A08B_val == 1) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), "birth", "Birth 01", c_animFlagFullMatch | c_animFlagNonLooping, 0.0);
        Wait(4.2, c_timeGame);
    }
    else if (auto9467A08B_val == 2) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), "birth", "Birth 02", c_animFlagFullMatch | c_animFlagNonLooping, 0.0);
        Wait(3.3, c_timeGame);
    }
    else {
    }
    return UnitLastCreated();
}

trigger auto_libPEB1_gf_CreateDropPod_Trigger = null;
point auto_libPEB1_gf_CreateDropPod_lp_location;
string auto_libPEB1_gf_CreateDropPod_lp_unitType;
int auto_libPEB1_gf_CreateDropPod_lp_count;

void libPEB1_gf_CreateDropPod (point lp_location, string lp_unitType, int lp_count) {
    auto_libPEB1_gf_CreateDropPod_lp_location = lp_location;
    auto_libPEB1_gf_CreateDropPod_lp_unitType = lp_unitType;
    auto_libPEB1_gf_CreateDropPod_lp_count = lp_count;

    if (auto_libPEB1_gf_CreateDropPod_Trigger == null) {
        auto_libPEB1_gf_CreateDropPod_Trigger = TriggerCreate("auto_libPEB1_gf_CreateDropPod_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_CreateDropPod_Trigger, false, false);
}

bool auto_libPEB1_gf_CreateDropPod_TriggerFunc (bool testConds, bool runActions) {
    point lp_location = auto_libPEB1_gf_CreateDropPod_lp_location;
    string lp_unitType = auto_libPEB1_gf_CreateDropPod_lp_unitType;
    int lp_count = auto_libPEB1_gf_CreateDropPod_lp_count;

    // Variable Declarations
    int lv_stageWhenCalled;
    actor lv_dropPodModel;

    // Automatic Variable Declarations
    int auto3C642155_n;
    int auto3C642155_i;

    // Variable Initialization
    lv_stageWhenCalled = libPEB1_gv_currentStage;

    // Implementation
    if ((libPEB1_gv_zergSpawningDisabled == true)) {
        return true;
    }

    libNtve_gf_CreateModelAtPoint("ZagaraInfestedDropDropPod", lp_location);
    lv_dropPodModel = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetTeamColor 128,0,128 128,0,128");
    SoundPlayAtPointForPlayer(SoundLink("SlivanBoss_Roach_DropPod_Launch", -1), c_maxPlayers, PlayerGroupAll(), lp_location, 0.0, 100.0, 0.0);
    Wait(1.4, c_timeGame);
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != lv_stageWhenCalled))) {
        return true;
    }

    SoundPlayAtPointForPlayer(SoundLink("SlivanBoss_Roach_DropPod_Impact", -1), c_maxPlayers, PlayerGroupAll(), lp_location, 0.0, 100.0, 0.0);
    auto3C642155_n = lp_count;
    for (auto3C642155_i = 1; auto3C642155_i <= auto3C642155_n; auto3C642155_i += 1) {
        libPVEB_gf_PBSpawnNPCMinions(lp_unitType, libStEx_gv_pLAYER_12_CHAOS, lp_location, libNtve_gf_RandomAngle(), c_unitCreateIgnorePlacement);
        libPEB1_gf_PZETurnOnOffZergMinionAI(UnitLastCreated(), true);
    }
    Wait(1.7, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

void libPEB1_gf_CreateNydusWormUnits (unit lp_nydusWorm, string lp_unitType, int lp_count) {
    // Automatic Variable Declarations
    int auto19FE1A3C_n;
    int auto19FE1A3C_i;

    // Implementation
    auto19FE1A3C_n = lp_count;
    for (auto19FE1A3C_i = 1; auto19FE1A3C_i <= auto19FE1A3C_n; auto19FE1A3C_i += 1) {
        libPVEB_gf_PBSpawnNPCMinions(lp_unitType, libStEx_gv_pLAYER_12_CHAOS, PointWithOffsetPolar(UnitGetPosition(lp_nydusWorm), 2.0, UnitGetFacing(lp_nydusWorm)), libNtve_gf_RandomAngle(), c_unitCreateIgnorePlacement);
        libPEB1_gf_PZETurnOnOffZergMinionAI(UnitLastCreated(), true);
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_nydusWorm), "Spell", "Spell,B", c_animFlagNonLooping, c_animTimeDefault);
}

trigger auto_libPEB1_gf_CreateNydusWormatPoint_Trigger = null;
point auto_libPEB1_gf_CreateNydusWormatPoint_lp_point;
int auto_libPEB1_gf_CreateNydusWormatPoint_lp_stage;

void libPEB1_gf_CreateNydusWormatPoint (point lp_point, int lp_stage) {
    auto_libPEB1_gf_CreateNydusWormatPoint_lp_point = lp_point;
    auto_libPEB1_gf_CreateNydusWormatPoint_lp_stage = lp_stage;

    if (auto_libPEB1_gf_CreateNydusWormatPoint_Trigger == null) {
        auto_libPEB1_gf_CreateNydusWormatPoint_Trigger = TriggerCreate("auto_libPEB1_gf_CreateNydusWormatPoint_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_CreateNydusWormatPoint_Trigger, false, false);
}

bool auto_libPEB1_gf_CreateNydusWormatPoint_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_libPEB1_gf_CreateNydusWormatPoint_lp_point;
    int lp_stage = auto_libPEB1_gf_CreateNydusWormatPoint_lp_stage;

    // Variable Declarations
    unit lv_nydusWorm;

    // Automatic Variable Declarations
    int autoD0388E2A_val;

    // Variable Initialization

    // Implementation
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != lp_stage))) {
        return true;
    }

    MinimapPing(PlayerGroupAll(), lp_point, 5.0, Color(100.00, 0.00, 0.00));
    lv_nydusWorm = libPEB1_gf_NydusWormSpawn(lp_point);
    Wait(1.0, c_timeGame);
    while (true) {
        while (!(((UnitIsAlive(lv_nydusWorm) == false) || ((libPEB1_gv_pauseNydusSpawning == false) && (UnitGroupCount(libPEB1_gv_activeZergMinions, c_unitCountAlive) < libPEB1_gv_maxActiveZergMinions))))) {
            Wait(1.0, c_timeGame);
        }
        if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != lp_stage) || (UnitIsAlive(lv_nydusWorm) == false))) {
            return true;
        }

        autoD0388E2A_val = RandomInt(1, 4);
        if (autoD0388E2A_val == 1) {
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergZergling", libPVEB_gf_PVEDifficultyValueInt(4, 6));
        }
        else if (autoD0388E2A_val == 2) {
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergZergling", libPVEB_gf_PVEDifficultyValueInt(0, 2));
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(1, 1));
        }
        else if (autoD0388E2A_val == 3) {
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergZergling", libPVEB_gf_PVEDifficultyValueInt(0, 2));
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(1, 1));
        }
        else if (autoD0388E2A_val == 4) {
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergBaneling", libPVEB_gf_PVEDifficultyValueInt(2, 3));
        }
        else {
        }
        Wait(libPEB1_gv_nydusWormSpawnInterval, c_timeGame);
    }
    return true;
}

trigger auto_libPEB1_gf_ManageCocoons_Trigger = null;
int auto_libPEB1_gf_ManageCocoons_lp_stage;
region auto_libPEB1_gf_ManageCocoons_lp_region;

void libPEB1_gf_ManageCocoons (int lp_stage, region lp_region) {
    auto_libPEB1_gf_ManageCocoons_lp_stage = lp_stage;
    auto_libPEB1_gf_ManageCocoons_lp_region = lp_region;

    if (auto_libPEB1_gf_ManageCocoons_Trigger == null) {
        auto_libPEB1_gf_ManageCocoons_Trigger = TriggerCreate("auto_libPEB1_gf_ManageCocoons_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_ManageCocoons_Trigger, false, false);
}

bool auto_libPEB1_gf_ManageCocoons_TriggerFunc (bool testConds, bool runActions) {
    int lp_stage = auto_libPEB1_gf_ManageCocoons_lp_stage;
    region lp_region = auto_libPEB1_gf_ManageCocoons_lp_region;

    // Variable Declarations
    unitgroup lv_cocoonGroup;
    int lv_totalCocoons;
    unit lv_currentCocoon;
    point lv_referenceHeroPosition;

    // Automatic Variable Declarations
    unitgroup autoA30B6B37_g;
    int autoA30B6B37_u;
    unit autoA30B6B37_var;
    unitgroup autoCD4BD987_g;
    int autoCD4BD987_u;
    unit autoCD4BD987_var;

    // Variable Initialization
    lv_cocoonGroup = UnitGroupEmpty();

    // Implementation
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != lp_stage))) {
        return true;
    }

    lv_cocoonGroup = UnitGroup("ZergCocoon", libStEx_gv_pLAYER_12_CHAOS, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA30B6B37_g = lv_cocoonGroup;
    autoA30B6B37_u = UnitGroupCount(autoA30B6B37_g, c_unitCountAll);
    for (;; autoA30B6B37_u -= 1) {
        autoA30B6B37_var = UnitGroupUnitFromEnd(autoA30B6B37_g, autoA30B6B37_u);
        if (autoA30B6B37_var == null) { break; }
        if ((UnitGetCustomValue(autoA30B6B37_var, 0) < 1.0)) {
            UnitSetCustomValue(autoA30B6B37_var, 1, 2.0);
        }
        else {
            UnitGroupRemove(lv_cocoonGroup, autoA30B6B37_var);
        }
    }
    lv_totalCocoons = UnitGroupCount(lv_cocoonGroup, c_unitCountAlive);
    while (true) {
        Wait(0.5, c_timeGame);
        if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != lp_stage) || (libNtve_gf_UnitGroupIsDead(lv_cocoonGroup) == true))) {
            return true;
        }

        if ((UnitGroupCount(lv_cocoonGroup, c_unitCountAlive) < lv_totalCocoons)) {
            break;
        }

        autoCD4BD987_g = lv_cocoonGroup;
        autoCD4BD987_u = UnitGroupCount(autoCD4BD987_g, c_unitCountAll);
        for (;; autoCD4BD987_u -= 1) {
            autoCD4BD987_var = UnitGroupUnitFromEnd(autoCD4BD987_g, autoCD4BD987_u);
            if (autoCD4BD987_var == null) { break; }
            if ((UnitGetPropertyFixed(autoCD4BD987_var, c_unitPropLife, c_unitPropCurrent) < UnitGetPropertyFixed(autoCD4BD987_var, c_unitPropLifeMax, c_unitPropCurrent))) {
                break;
            }

        }
        if ((UnitGroupCount(UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
            break;
        }

    }
    lv_referenceHeroPosition = libPEB1_gf_PositionofLeftmostPlayerHero();
    if ((lv_referenceHeroPosition == null)) {
        lv_referenceHeroPosition = UnitGroupCenterOfGroup(lv_cocoonGroup);
    }

    while (true) {
        if (((libNtve_gf_UnitGroupIsDead(lv_cocoonGroup) == true) || (libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != lp_stage))) {
            return true;
        }

        lv_currentCocoon = UnitGroupClosestToPoint(lv_cocoonGroup, lv_referenceHeroPosition);
        UnitGroupRemove(lv_cocoonGroup, lv_currentCocoon);
        libPEB1_gf_HatchCocoon(lv_currentCocoon);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_libPEB1_gf_HatchCocoon_Trigger = null;
unit auto_libPEB1_gf_HatchCocoon_lp_cocoon;

void libPEB1_gf_HatchCocoon (unit lp_cocoon) {
    auto_libPEB1_gf_HatchCocoon_lp_cocoon = lp_cocoon;

    if (auto_libPEB1_gf_HatchCocoon_Trigger == null) {
        auto_libPEB1_gf_HatchCocoon_Trigger = TriggerCreate("auto_libPEB1_gf_HatchCocoon_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_HatchCocoon_Trigger, false, false);
}

bool auto_libPEB1_gf_HatchCocoon_TriggerFunc (bool testConds, bool runActions) {
    unit lp_cocoon = auto_libPEB1_gf_HatchCocoon_lp_cocoon;

    // Variable Declarations
    int lv_currentStage_LOCAL;
    point lv_spawnPosition;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(lp_cocoon) == false)) {
        return true;
    }

    lv_currentStage_LOCAL = libPEB1_gv_currentStage;
    UnitBehaviorAdd(lp_cocoon, "ZergCocoonHatchingTimedLife", lp_cocoon, 1);
    return true;
}

void libPEB1_gf_PEB1SpawnPodsLocationLogic (int lp_maxTargets, unit lp_castingUnit) {
    // Variable Declarations
    point[libPEB1_gv_pEB1SpawnPodsTargetMax_C + 1] lv_confirmedLocations;
    point lv_proposedPoint;
    int lv_numberofFoundTargets;
    unitgroup lv_enemyHeroes;
    fixed lv_minimumDistanceSpread;
    int lv_itLocation;
    unit lv_itUnit;
    int lv_iterationCounter;
    fixed[73] lv_safeAngles;
    fixed lv_itAngle;
    int lv_angleIndex;
    int lv_numberOfAngles;

    // Automatic Variable Declarations
    unitgroup auto803BA937_g;
    int auto803BA937_u;
    int autoCDFED465_ae;
    const int autoCDFED465_ai = 1;
    const fixed auto626F945E_ae = 360.0;
    const fixed auto626F945E_ai = 5.0;
    int auto15F98122_ae;
    const int auto15F98122_ai = 1;

    // Variable Initialization
    lv_enemyHeroes = UnitGroupEmpty();
    lv_minimumDistanceSpread = libPEB1_gv_pEB1SpawnPodsMinDistanceApart_C;

    // Implementation
    lv_enemyHeroes = UnitGroupAlliance(UnitGetOwner(lp_castingUnit), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterImmuneToAOE) | (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto803BA937_g = lv_enemyHeroes;
    auto803BA937_u = UnitGroupCount(auto803BA937_g, c_unitCountAll);
    for (;; auto803BA937_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto803BA937_g, auto803BA937_u);
        if (lv_itUnit == null) { break; }
        if ((lv_numberofFoundTargets >= lp_maxTargets)) {
            break;
        }

        lv_proposedPoint = PointWithOffsetPolar(UnitGetPosition(lv_itUnit), 2.0, libNtve_gf_RandomAngle());
        while ((DistanceBetweenPoints(UnitGetPosition(lp_castingUnit), lv_proposedPoint) <= libPEB1_gv_pEB1SpawnPodsMinRange_C)) {
            lv_proposedPoint = PointWithOffsetPolar(lv_proposedPoint, 0.1, AngleBetweenPoints(UnitGetPosition(lp_castingUnit), lv_proposedPoint));
        }
        while ((DistanceBetweenPoints(UnitGetPosition(lp_castingUnit), lv_proposedPoint) >= libPEB1_gv_pEB1SpawnPodsMaxRange_C)) {
            lv_proposedPoint = PointWithOffsetPolar(lv_proposedPoint, -0.1, AngleBetweenPoints(UnitGetPosition(lp_castingUnit), lv_proposedPoint));
        }
        autoCDFED465_ae = lp_maxTargets;
        lv_itLocation = 1;
        for ( ; ( (autoCDFED465_ai >= 0 && lv_itLocation <= autoCDFED465_ae) || (autoCDFED465_ai < 0 && lv_itLocation >= autoCDFED465_ae) ) ; lv_itLocation += autoCDFED465_ai ) {
            lv_iterationCounter += 1;
            if ((lv_confirmedLocations[lv_itLocation] == null)) {
                if ((PointPathingPassable(lv_proposedPoint) == true)) {
                    lv_confirmedLocations[lv_itLocation] = lv_proposedPoint;
                    lv_numberofFoundTargets += 1;
                }

                break;
            }

            if ((DistanceBetweenPoints(lv_proposedPoint, lv_confirmedLocations[lv_itLocation]) < lv_minimumDistanceSpread)) {
                break;
            }

        }
    }
    if ((lv_numberofFoundTargets < lp_maxTargets)) {
        lv_itAngle = 0.0;
        for ( ; ( (auto626F945E_ai >= 0 && lv_itAngle <= auto626F945E_ae) || (auto626F945E_ai < 0 && lv_itAngle >= auto626F945E_ae) ) ; lv_itAngle += auto626F945E_ai ) {
            lv_proposedPoint = PointWithOffsetPolar(UnitGetPosition(lp_castingUnit), libPEB1_gv_pEB1SpawnPodsMinRange_C, lv_itAngle);
            if ((PointPathingPassable(lv_proposedPoint) != true)) {
                lv_proposedPoint = PointWithOffsetPolar(UnitGetPosition(lp_castingUnit), ((libPEB1_gv_pEB1SpawnPodsMinRange_C+libPEB1_gv_pEB1SpawnPodsMaxRange_C)/2), lv_itAngle);
            }

            if ((PointPathingPassable(lv_proposedPoint) == true) && (lv_numberOfAngles < 72)) {
                lv_numberOfAngles += 1;
                lv_safeAngles[lv_numberOfAngles] = lv_itAngle;
            }

        }
    }

    while ((lv_numberofFoundTargets < lp_maxTargets)) {
        lv_angleIndex = RandomInt(1, lv_numberOfAngles);
        lv_itAngle = lv_safeAngles[lv_angleIndex];
        lv_proposedPoint = PointWithOffsetPolar(UnitGetPosition(lp_castingUnit), RandomFixed(libPEB1_gv_pEB1SpawnPodsMinRange_C, libPEB1_gv_pEB1SpawnPodsMaxRange_C), lv_itAngle);
        auto15F98122_ae = lp_maxTargets;
        lv_itLocation = 1;
        for ( ; ( (auto15F98122_ai >= 0 && lv_itLocation <= auto15F98122_ae) || (auto15F98122_ai < 0 && lv_itLocation >= auto15F98122_ae) ) ; lv_itLocation += auto15F98122_ai ) {
            lv_iterationCounter += 1;
            if ((lv_iterationCounter >= 500) && (ModI(lv_iterationCounter, 100) == 0) && (lv_minimumDistanceSpread > 0.0)) {
                lv_minimumDistanceSpread -= 0.5;
            }

            if ((lv_confirmedLocations[lv_itLocation] == null)) {
                if ((PointPathingPassable(lv_proposedPoint) == true)) {
                    lv_confirmedLocations[lv_itLocation] = lv_proposedPoint;
                    lv_numberofFoundTargets += 1;
                }

                break;
            }

            if ((DistanceBetweenPoints(lv_proposedPoint, lv_confirmedLocations[lv_itLocation]) < lv_minimumDistanceSpread)) {
                break;
            }

        }
    }
    if ((UnitIsAlive(lp_castingUnit) == true)) {
        lv_itLocation = 1;
        while (true) {
            if ((lv_itLocation <= lp_maxTargets) && (lv_confirmedLocations[lv_itLocation] != null)) {
                UnitCreateEffectPoint(lp_castingUnit, "SlivanBossSpawnPodsLaunch1CreatePersistent", lv_confirmedLocations[lv_itLocation]);
                lv_itLocation += 1;
            }
            else {
                break;
            }
            if ((lv_itLocation <= lp_maxTargets) && (lv_confirmedLocations[lv_itLocation] != null)) {
                UnitCreateEffectPoint(lp_castingUnit, "SlivanBossSpawnPodsLaunch2CreatePersistent", lv_confirmedLocations[lv_itLocation]);
                lv_itLocation += 1;
            }
            else {
                break;
            }
            if ((lv_itLocation <= lp_maxTargets) && (lv_confirmedLocations[lv_itLocation] != null)) {
                UnitCreateEffectPoint(lp_castingUnit, "SlivanBossSpawnPodsLaunch3CreatePersistent", lv_confirmedLocations[lv_itLocation]);
                lv_itLocation += 1;
            }
            else {
                break;
            }
            if ((lv_itLocation <= lp_maxTargets) && (lv_confirmedLocations[lv_itLocation] != null)) {
                UnitCreateEffectPoint(lp_castingUnit, "SlivanBossSpawnPodsLaunch4CreatePersistent", lv_confirmedLocations[lv_itLocation]);
                lv_itLocation += 1;
            }
            else {
                break;
            }
            if ((lv_itLocation <= lp_maxTargets) && (lv_confirmedLocations[lv_itLocation] != null)) {
                UnitCreateEffectPoint(lp_castingUnit, "SlivanBossSpawnPodsLaunch5CreatePersistent", lv_confirmedLocations[lv_itLocation]);
                lv_itLocation += 1;
            }
            else {
                break;
            }
            if ((lv_itLocation <= lp_maxTargets) && (lv_confirmedLocations[lv_itLocation] != null)) {
                UnitCreateEffectPoint(lp_castingUnit, "SlivanBossSpawnPodsLaunch6CreatePersistent", lv_confirmedLocations[lv_itLocation]);
                lv_itLocation += 1;
            }
            else {
                break;
            }
        }
    }

}

void libPEB1_gf_RemoveDeathModelsInRegion (region lp_region) {
    // Variable Declarations
    actor lv_actorRegion;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_region);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, "Destroy", "Model", "ScopeContains _Clearable");
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, "Destroy", "Unit", "ScopeContains _Clearable");
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

void libPEB1_gf_StoreStage3ExitWallData (unitgroup lp_unitGroup) {
    // Variable Declarations
    int lv_itIndex;
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup autoCADCB4B8_g;
    int autoCADCB4B8_u;

    // Variable Initialization
    lv_itIndex = 1;

    // Implementation
    autoCADCB4B8_g = lp_unitGroup;
    autoCADCB4B8_u = UnitGroupCount(autoCADCB4B8_g, c_unitCountAll);
    for (;; autoCADCB4B8_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoCADCB4B8_g, autoCADCB4B8_u);
        if (lv_itUnit == null) { break; }
        libPEB1_gv_stage3ResetUnits[lv_itIndex].lv_unitPosition = UnitGetPosition(lv_itUnit);
        libPEB1_gv_stage3ResetUnits[lv_itIndex].lv_unitType = UnitGetType(lv_itUnit);
        lv_itIndex += 1;
    }
}

void libPEB1_gf_Victory (region lp_cameraRevealRegion, point lp_cameraTarget) {
    // Automatic Variable Declarations
    // Implementation
    libPVEB_gf_PBVictoryDefeat(true, lp_cameraRevealRegion, lp_cameraTarget);
    KickFromGame(PlayerGroupAll());
}

trigger auto_libPEB1_gf_ZergHeroSlainQ_Trigger = null;
string auto_libPEB1_gf_ZergHeroSlainQ_lp_killedUnitType;

void libPEB1_gf_ZergHeroSlainQ (string lp_killedUnitType) {
    auto_libPEB1_gf_ZergHeroSlainQ_lp_killedUnitType = lp_killedUnitType;

    if (auto_libPEB1_gf_ZergHeroSlainQ_Trigger == null) {
        auto_libPEB1_gf_ZergHeroSlainQ_Trigger = TriggerCreate("auto_libPEB1_gf_ZergHeroSlainQ_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_ZergHeroSlainQ_Trigger, false, false);
}

bool auto_libPEB1_gf_ZergHeroSlainQ_TriggerFunc (bool testConds, bool runActions) {
    string lp_killedUnitType = auto_libPEB1_gf_ZergHeroSlainQ_lp_killedUnitType;

    // Automatic Variable Declarations
    string auto2BBC6A38_val;

    // Implementation
    TriggerQueueEnter();
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    auto2BBC6A38_val = lp_killedUnitType;
    if (auto2BBC6A38_val == "HeroButcher") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("AdjutantPVEVO_Adjutant_084"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto2BBC6A38_val == "HeroKerrigan") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("AdjutantPVEVO_Adjutant_085"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto2BBC6A38_val == "HeroDiablo") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("AdjutantPVEVO_Adjutant_086"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto2BBC6A38_val == "HeroZagara") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("AdjutantPVEVO_Adjutant_087"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto2BBC6A38_val == "HeroDehaka") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("AdjutantPVEVO_Adjutant_088"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto2BBC6A38_val == "HeroTychus") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("AdjutantPVEVO_Adjutant_089"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto2BBC6A38_val == "HeroMurky") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("AdjutantPVEVO_Adjutant_091"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto2BBC6A38_val == "HeroAnubarak") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("AdjutantPVEVO_Adjutant_092"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto2BBC6A38_val == "HeroAbathur") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("AdjutantPVEVO_Adjutant_093"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto2BBC6A38_val == "HeroStitches") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("AdjutantPVEVO_Adjutant_105"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto2BBC6A38_val == "HeroStukov") {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("AdjutantPVEVO_Adjutant_100"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

trigger auto_libPEB1_gf_DisplayHoldoutPanel_Trigger = null;
int auto_libPEB1_gf_DisplayHoldoutPanel_lp_state;
timer auto_libPEB1_gf_DisplayHoldoutPanel_lp_timerPanelTimer;

void libPEB1_gf_DisplayHoldoutPanel (int lp_state, timer lp_timerPanelTimer) {
    auto_libPEB1_gf_DisplayHoldoutPanel_lp_state = lp_state;
    auto_libPEB1_gf_DisplayHoldoutPanel_lp_timerPanelTimer = lp_timerPanelTimer;

    if (auto_libPEB1_gf_DisplayHoldoutPanel_Trigger == null) {
        auto_libPEB1_gf_DisplayHoldoutPanel_Trigger = TriggerCreate("auto_libPEB1_gf_DisplayHoldoutPanel_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_DisplayHoldoutPanel_Trigger, false, false);
}

bool auto_libPEB1_gf_DisplayHoldoutPanel_TriggerFunc (bool testConds, bool runActions) {
    int lp_state = auto_libPEB1_gf_DisplayHoldoutPanel_lp_state;
    timer lp_timerPanelTimer = auto_libPEB1_gf_DisplayHoldoutPanel_lp_timerPanelTimer;

    // Automatic Variable Declarations
    int auto0E29A970_val;

    // Implementation
    if ((libPEB1_gv_pZEMapPanel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/PVEBrawlHoldoutPanel");
        libPEB1_gv_pZEMapPanel = DialogControlLastCreated();
    }

    if ((libPEB1_gv_pZEHoldoutPanel.lv_timerPanel == c_invalidDialogControlId)) {
        DialogControlHookup(libPEB1_gv_pZEMapPanel, c_triggerControlTypePanel, "HoldoutTimerPanel");
        libPEB1_gv_pZEHoldoutPanel.lv_timerPanel = DialogControlLastCreated();
        DialogControlHookup(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, c_triggerControlTypeImage, "BackgroundImage");
        libPEB1_gv_pZEHoldoutPanel.lv_bGImage = DialogControlLastCreated();
        DialogControlHookup(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, c_triggerControlTypeImage, "TimerImageCheckpoint");
        libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconCheckpoint = DialogControlLastCreated();
        DialogControlHookup(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, c_triggerControlTypeImage, "TimerImageDoorTimer");
        libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconDoorTimer = DialogControlLastCreated();
        DialogControlHookup(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, c_triggerControlTypeImage, "TimerImageKillZerg");
        libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconKillZerg = DialogControlLastCreated();
        DialogControlHookup(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, c_triggerControlTypeImage, "TimerImageDoorOpen");
        libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconDoorOpen = DialogControlLastCreated();
        DialogControlHookup(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, c_triggerControlTypeImage, "TimerImageShelter");
        libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconShelter = DialogControlLastCreated();
        DialogControlHookup(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, c_triggerControlTypeLabel, "InfoLabel");
        libPEB1_gv_pZEHoldoutPanel.lv_timerPanelInfoLabel = DialogControlLastCreated();
        DialogControlHookup(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, c_triggerControlTypeLabel, "TimerLabel");
        libPEB1_gv_pZEHoldoutPanel.lv_timerPanelTimerLabel = DialogControlLastCreated();
    }
    else {
        DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, PlayerGroupAll(), false);
    }
    libPEB1_gv_pZEHoldoutPanel.lv_state = lp_state;
    DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconCheckpoint, PlayerGroupAll(), false);
    DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconDoorOpen, PlayerGroupAll(), false);
    DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconDoorTimer, PlayerGroupAll(), false);
    DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconKillZerg, PlayerGroupAll(), false);
    DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconShelter, PlayerGroupAll(), false);
    auto0E29A970_val = lp_state;
    if (auto0E29A970_val == libPEB1_ge_PZEHoldoutPanelState_CheckpointFirst) {
        libNtve_gf_SetDialogItemText(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelInfoLabel, StringExternal("Param/Value/lib_PEB1_5B764666"), PlayerGroupAll());
        DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconCheckpoint, PlayerGroupAll(), true);
        DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelTimerLabel, PlayerGroupAll(), false);
    }
    else if (auto0E29A970_val == libPEB1_ge_PZEHoldoutPanelState_CheckpointSecond) {
        libNtve_gf_SetDialogItemText(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelInfoLabel, StringExternal("Param/Value/lib_PEB1_16BB90C8"), PlayerGroupAll());
        DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconCheckpoint, PlayerGroupAll(), true);
        DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelTimerLabel, PlayerGroupAll(), false);
    }
    else if (auto0E29A970_val == libPEB1_ge_PZEHoldoutPanelState_OnTimer) {
        libNtve_gf_SetDialogItemText(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelInfoLabel, StringExternal("Param/Value/lib_PEB1_E2EA686E"), PlayerGroupAll());
        DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconDoorTimer, PlayerGroupAll(), true);
        DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelTimerLabel, PlayerGroupAll(), true);
    }
    else if (auto0E29A970_val == libPEB1_ge_PZEHoldoutPanelState_KillZerg) {
        libNtve_gf_SetDialogItemText(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelInfoLabel, StringExternal("Param/Value/lib_PEB1_DCC7FE6D"), PlayerGroupAll());
        DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconKillZerg, PlayerGroupAll(), true);
        DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelTimerLabel, PlayerGroupAll(), true);
    }
    else if (auto0E29A970_val == libPEB1_ge_PZEHoldoutPanelState_GateOpened) {
        libNtve_gf_SetDialogItemText(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelInfoLabel, StringExternal("Param/Value/lib_PEB1_A5754FB7"), PlayerGroupAll());
        DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconDoorOpen, PlayerGroupAll(), true);
        DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelTimerLabel, PlayerGroupAll(), false);
    }
    else if (auto0E29A970_val == libPEB1_ge_PZEHoldoutPanelState_Shelter) {
        DialogControlSetPositionRelative(libPEB1_gv_pZEHoldoutPanel.lv_bGImage, PlayerGroupAll(), c_anchorBottomRight, libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, c_anchorBottomRight, 5, -326);
        libNtve_gf_SetDialogItemText(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelInfoLabel, StringExternal("Param/Value/lib_PEB1_6CCA3851"), PlayerGroupAll());
        DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelIconShelter, PlayerGroupAll(), true);
        DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelTimerLabel, PlayerGroupAll(), false);
    }
    else {
    }
    libNtve_gf_SetDialogItemText(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelTimerLabel, StringToText(""), PlayerGroupAll());
    DialogControlSetVisible(libPEB1_gv_pZEMapPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, PlayerGroupAll(), true);
    if ((lp_timerPanelTimer == null)) {
        return true;
    }
    else {
        DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelTimerLabel, PlayerGroupAll(), true);
    }
    while (true) {
        libNtve_gf_SetDialogItemText(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timerPanelTimer))), PlayerGroupAll());
        Wait(1.0, c_timeGame);
        if ((libPEB1_gv_pZEHoldoutPanel.lv_state != libPEB1_ge_PZEHoldoutPanelState_OnTimer)) {
            return true;
        }

        if ((TimerGetRemaining(lp_timerPanelTimer) <= 0.0)) {
            break;
        }

    }
    return true;
}

trigger auto_libPEB1_gf_SetHoldoutPanelZergRemaining_Trigger = null;
int auto_libPEB1_gf_SetHoldoutPanelZergRemaining_lp_count;

void libPEB1_gf_SetHoldoutPanelZergRemaining (int lp_count) {
    auto_libPEB1_gf_SetHoldoutPanelZergRemaining_lp_count = lp_count;

    if (auto_libPEB1_gf_SetHoldoutPanelZergRemaining_Trigger == null) {
        auto_libPEB1_gf_SetHoldoutPanelZergRemaining_Trigger = TriggerCreate("auto_libPEB1_gf_SetHoldoutPanelZergRemaining_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_SetHoldoutPanelZergRemaining_Trigger, false, false);
}

bool auto_libPEB1_gf_SetHoldoutPanelZergRemaining_TriggerFunc (bool testConds, bool runActions) {
    int lp_count = auto_libPEB1_gf_SetHoldoutPanelZergRemaining_lp_count;

    // Automatic Variable Declarations
    // Implementation
    if ((libPEB1_gv_pZEHoldoutPanel.lv_timerPanel == c_invalidDialogControlId)) {
        return true;
    }

    if ((libPEB1_gv_pZEHoldoutPanel.lv_state != libPEB1_ge_PZEHoldoutPanelState_KillZerg)) {
        libPEB1_gv_pZEHoldoutPanel.lv_state = libPEB1_ge_PZEHoldoutPanelState_KillZerg;
        libPEB1_gf_DisplayHoldoutPanel(libPEB1_ge_PZEHoldoutPanelState_KillZerg, null);
    }

    libNtve_gf_SetDialogItemText(libPEB1_gv_pZEHoldoutPanel.lv_timerPanelTimerLabel, IntToText(lp_count), PlayerGroupAll());
    return true;
}

void libPEB1_gf_SetHoldoutPanelDoorOpened () {
    // Automatic Variable Declarations
    // Implementation
    if ((libPEB1_gv_pZEHoldoutPanel.lv_timerPanel == c_invalidDialogControlId)) {
        return ;
    }

    if ((libPEB1_gv_pZEHoldoutPanel.lv_state != libPEB1_ge_PZEHoldoutPanelState_GateOpened)) {
        libPEB1_gv_pZEHoldoutPanel.lv_state = libPEB1_ge_PZEHoldoutPanelState_GateOpened;
        libPEB1_gf_DisplayHoldoutPanel(libPEB1_ge_PZEHoldoutPanelState_GateOpened, null);
    }

}

void libPEB1_gf_ShowHideHoldoutPanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPEB1_gv_pZEHoldoutPanel.lv_timerPanel == c_invalidDialogControlId)) {
        return ;
    }

    DialogControlSetVisible(libPEB1_gv_pZEHoldoutPanel.lv_timerPanel, PlayerGroupAll(), lp_showHide);
}

trigger auto_libPEB1_gf_DisplayBossPanel_Trigger = null;
unit auto_libPEB1_gf_DisplayBossPanel_lp_boss;

void libPEB1_gf_DisplayBossPanel (unit lp_boss) {
    auto_libPEB1_gf_DisplayBossPanel_lp_boss = lp_boss;

    if (auto_libPEB1_gf_DisplayBossPanel_Trigger == null) {
        auto_libPEB1_gf_DisplayBossPanel_Trigger = TriggerCreate("auto_libPEB1_gf_DisplayBossPanel_TriggerFunc");
    }

    TriggerExecute(auto_libPEB1_gf_DisplayBossPanel_Trigger, false, false);
}

bool auto_libPEB1_gf_DisplayBossPanel_TriggerFunc (bool testConds, bool runActions) {
    unit lp_boss = auto_libPEB1_gf_DisplayBossPanel_lp_boss;

    // Automatic Variable Declarations
    // Implementation
    if ((libPEB1_gv_pZEMapPanel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/PVEBrawlHoldoutPanel");
        libPEB1_gv_pZEMapPanel = DialogControlLastCreated();
    }

    libPEB1_gf_ShowHideHoldoutPanel(false);
    if ((libPEB1_gv_pZEBossPanel.lv_bossPanel == c_invalidDialogControlId)) {
        DialogControlHookup(libPEB1_gv_pZEMapPanel, c_triggerControlTypePanel, "BossFrame");
        libPEB1_gv_pZEBossPanel.lv_bossPanel = DialogControlLastCreated();
        DialogControlHookup(libPEB1_gv_pZEBossPanel.lv_bossPanel, c_triggerControlTypeLabel, "BossInfoLabel");
        libPEB1_gv_pZEBossPanel.lv_bossPanelLabel = DialogControlLastCreated();
        DialogControlHookup(libPEB1_gv_pZEBossPanel.lv_bossPanel, c_triggerControlTypeLabel, "BossAttemptsLabel");
        libPEB1_gv_pZEBossPanel.lv_bossPanelAttempts = DialogControlLastCreated();
        DialogControlHookup(libPEB1_gv_pZEBossPanel.lv_bossPanel, c_triggerControlTypeUnitStatus, "BossHealthBar");
        libPEB1_gv_pZEBossPanel.lv_bossPanelUnitBar = DialogControlLastCreated();
    }
    else {
        DialogControlSetVisible(libPEB1_gv_pZEBossPanel.lv_bossPanel, PlayerGroupAll(), false);
    }
    libNtve_gf_SetDialogItemText(libPEB1_gv_pZEBossPanel.lv_bossPanelLabel, StringExternal("Param/Value/lib_PEB1_3EABBBB5"), PlayerGroupAll());
    if ((libPVEB_gf_PBGameDifficulty() == libPVEB_ge_PVEGameDifficulty_Normal)) {
        libNtve_gf_SetDialogItemText(libPEB1_gv_pZEBossPanel.lv_bossPanelAttempts, (StringExternal("Param/Value/lib_PEB1_2FA28C76") + IntToText((2 - libPEB1_gv_retryChances)) + StringExternal("Param/Value/lib_PEB1_7A076321")), PlayerGroupAll());
    }
    else {
        DialogControlSetVisible(libPEB1_gv_pZEBossPanel.lv_bossPanelAttempts, PlayerGroupAll(), false);
    }
    libNtve_gf_SetDialogItemUnit(libPEB1_gv_pZEBossPanel.lv_bossPanelUnitBar, lp_boss, PlayerGroupAll());
    DialogControlSetVisible(libPEB1_gv_pZEMapPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(libPEB1_gv_pZEBossPanel.lv_bossPanel, PlayerGroupAll(), true);
    return true;
}

void libPEB1_gf_ShowHideBossPanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPEB1_gv_pZEBossPanel.lv_bossPanel == c_invalidDialogControlId)) {
        return ;
    }

    DialogControlSetVisible(libPEB1_gv_pZEBossPanel.lv_bossPanel, PlayerGroupAll(), lp_showHide);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include MM Zerg Escape
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_IncludeMMZergEscape_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_IncludeMMZergEscape_Init () {
    libPEB1_gt_IncludeMMZergEscape = TriggerCreate("libPEB1_gt_IncludeMMZergEscape_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PZE Init
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PZEInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int autoBC7EC20B_ae = libCore_gv_bALMaxPlayers;
    const int autoBC7EC20B_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPVEB_gv_pvEBrawlSetting.lv_hearthDisabled = true;
    libPVEB_gv_pvEBrawlSetting.lv_mountDisabled = true;
    TriggerExecute(libPEB1_gt_PZEInitDifficultyHooks, true, false);
    TriggerExecute(libPEB1_gt_InitPlayers, true, false);
    TriggerExecute(libPEB1_gt_InitZergHeroes, true, false);
    TriggerExecute(libPEB1_gt_InitAdjustCaptureMacGuffin, true, false);
    TriggerExecute(libPEB1_gt_TabScreenInit, true, false);
    TriggerExecute(libPEB1_gt_PZEInitUI, true, false);
    TriggerExecute(libPEB1_gt_InitSpawnPoints, true, false);
    TriggerExecute(libPEB1_gt_InitSlivanBalanceNumbers, true, false);
    TriggerExecute(libPEB1_gt_InitPickups, true, false);
    libGame_gv_heroDeath_RespawnMounted = false;
    AISetFollowPingDisabled(true);
    lv_itPlayer = 1;
    for ( ; ( (autoBC7EC20B_ai >= 0 && lv_itPlayer <= autoBC7EC20B_ae) || (autoBC7EC20B_ai < 0 && lv_itPlayer >= autoBC7EC20B_ae) ) ; lv_itPlayer += autoBC7EC20B_ai ) {
        libGame_gv_players[lv_itPlayer].lv_disableMount = true;
        libGame_gv_players[lv_itPlayer].lv_remountHeroAfterTeleport = false;
    }
    libPVEB_gv_pBHeroCatalogChangeCallback = libPEB1_gt_PZEHeroCatalogChangesCallback;
    TriggerEnable(libUIUI_gt_UIPartyFrameUnitClicked, false);
    TriggerExecute(libPEB1_gt_InitHeroTalents, true, false);
    libUIUI_gf_PingCreateNewPingTarget("TutorialBeacon", false, StringExternal("Param/Value/lib_PEB1_C696319B"), StringExternal("Param/Value/lib_PEB1_F2E8BDEB"), StringExternal("Param/Value/lib_PEB1_38E41017"), SoundLink("UI_Game_Ping_General", -1), SoundLink("UI_Game_Ping_General", -1));
    libUIUI_gf_PingCreateNewPingTarget("ZergedTownGateL3HorizontalTopVisionBlocked", false, StringExternal("Param/Value/lib_PEB1_425D8973"), StringExternal("Param/Value/lib_PEB1_C8000328"), StringExternal("Param/Value/lib_PEB1_B9148DB7"), SoundLink("UI_Game_Ping_General", -1), SoundLink("UI_Game_Ping_General", -1));
    libUIUI_gf_PingCreateNewPingTarget("CoopNydusWorm", false, StringExternal("Param/Value/lib_PEB1_D5D1AE06"), StringExternal("Param/Value/lib_PEB1_749E212E"), StringExternal("Param/Value/lib_PEB1_2E9E8D53"), SoundLink("UI_Game_Ping_General", -1), SoundLink("UI_Game_Ping_General", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PZEInit_Init () {
    libPEB1_gt_PZEInit = TriggerCreate("libPEB1_gt_PZEInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PZE Init Difficulty Hooks
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PZEInitDifficultyHooks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    fixed lv_minionHP;
    fixed lv_minionDmg;
    fixed lv_hardMinionDamageBonus;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libPEB1_gv_zergWaveDelay = 15.0;
    libPEB1_gv_wavesNeededToEscalate = 5;
    libPEB1_gv_maxActiveZergMinions = libPVEB_gf_PVEDifficultyValueInt(30, 40);
    libPEB1_gv_zergHeroLevel[1] = libPVEB_gf_PVEDifficultyValueInt(17, 18);
    libPEB1_gv_zergHeroLevel[2] = libPVEB_gf_PVEDifficultyValueInt(20, 24);
    libPEB1_gv_zergHeroLevel[3] = libPVEB_gf_PVEDifficultyValueInt(23, 28);
    libPEB1_gv_zergHeroEventPeriod = 44.0;
    libPEB1_gv_maxActiveZergHeroes[1] = 2;
    libPEB1_gv_maxActiveZergHeroes[2] = 3;
    libPEB1_gv_maxActiveZergHeroes[3] = 4;
    libPEB1_gv_killValueNeededToSpawnGlobe = libPVEB_gf_PVEDifficultyValueInt(20, 25);
    libPEB1_gv_zergHeroKillsNeededToSpawnItem = 2;
    libPEB1_gv_zergCampAggroRange = 8;
    libPEB1_gv_nydusWormSpawnInterval = libPVEB_gf_PVEDifficultyValueReal(15.0, 10.0);
    libPEB1_gv_zergHeroGracePeriod = libPVEB_gf_PVEDifficultyValueInt(6, 4);
    libPEB1_gv_zergHeroGracePeriodZergHeroDeath = libPVEB_gf_PVEDifficultyValueInt(2, 1);
    libPEB1_gv_zergHeroGracePeriodZergHeroDeathCap = libPVEB_gf_PVEDifficultyValueInt(4, 1);
    lv_hardMinionDamageBonus = 1.4;
    libPEB1_gv_hardHeroHPBonus = 1.4;
    libPEB1_gv_zergHeroBalanceBehavior[1] = "ZergHeroDamageModifierNormal";
    libPEB1_gv_zergHeroBalanceBehavior[2] = "ZergHeroDamageModifierHard";
    CatalogFieldValueSet(c_gameCatalogBehavior, "ZergCocoonHatchingTimedLife", "Duration", libCore_gv_cOMPUTER_TeamChaos, IntToString(libPVEB_gf_PVEDifficultyValueInt(6, 4)));
    lv_minionHP = libPVEB_gf_PVEDifficultyValueReal(150.0, 200.0);
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergZergling", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergZergling", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergZerglingNotMinion", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergZerglingNotMinion", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    lv_minionDmg = 8.0;
    CatalogFieldValueSet(c_gameCatalogEffect, "ZergZerglingWeaponDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libPVEB_gf_PVEDifficultyValueReal(lv_minionDmg, (lv_minionDmg * lv_hardMinionDamageBonus)), c_fixedPrecisionAny));
    lv_minionHP = 900.0;
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergHydralisk", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergHydralisk", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    lv_minionDmg = 70.0;
    CatalogFieldValueSet(c_gameCatalogEffect, "ZergHydraliskMeleeDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libPVEB_gf_PVEDifficultyValueReal(lv_minionDmg, (lv_minionDmg * lv_hardMinionDamageBonus)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "ZergHydraliskRangedDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libPVEB_gf_PVEDifficultyValueReal(lv_minionDmg, (lv_minionDmg * lv_hardMinionDamageBonus)), c_fixedPrecisionAny));
    lv_minionHP = 1500.0;
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergRoach", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergRoach", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    lv_minionDmg = 35.0;
    CatalogFieldValueSet(c_gameCatalogEffect, "ZergRoachWeaponDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libPVEB_gf_PVEDifficultyValueReal(lv_minionDmg, (lv_minionDmg * lv_hardMinionDamageBonus)), c_fixedPrecisionAny));
    lv_minionHP = 250.0;
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergBaneling", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergBaneling", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    lv_minionDmg = 220.0;
    CatalogFieldValueSet(c_gameCatalogEffect, "ZergBanelingDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libPVEB_gf_PVEDifficultyValueReal(lv_minionDmg, (lv_minionDmg * lv_hardMinionDamageBonus)), c_fixedPrecisionAny));
    lv_minionHP = libPVEB_gf_PVEDifficultyValueReal(4000.0, 5000.0);
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergUltralisk", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "ZergUltralisk", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, FixedToString(lv_minionHP, c_fixedPrecisionAny));
    lv_minionDmg = 160.0;
    CatalogFieldValueSet(c_gameCatalogEffect, "ZergUltraliskAttackWeaponDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libPVEB_gf_PVEDifficultyValueReal(lv_minionDmg, (lv_minionDmg * lv_hardMinionDamageBonus)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "ZergUltraliskAttackWeaponCleaveDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, FixedToString(libPVEB_gf_PVEDifficultyValueReal((lv_minionDmg / 2), ((lv_minionDmg * lv_hardMinionDamageBonus ) / 2)), c_fixedPrecisionAny));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PZEInitDifficultyHooks_Init () {
    libPEB1_gt_PZEInitDifficultyHooks = TriggerCreate("libPEB1_gt_PZEInitDifficultyHooks_Func");
    libPESC_gf_HardModeActivated(libPEB1_gt_PZEInitDifficultyHooks);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PZE Hero Catalog Changes Callback
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PZEHeroCatalogChangesCallback_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_heroHP;
    int lv_player;

    // Automatic Variable Declarations
    string autoA9973246_val;

    // Variable Initialization
    lv_player = libPVEB_gv_pBNPCHeroes[libPVEB_gv_pBHeroCatalogChangePlayerIndex].lv_player;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA9973246_val = libPVEB_gv_pBNPCHeroes[libPVEB_gv_pBHeroCatalogChangePlayerIndex].lv_unitType;
    if (autoA9973246_val == "HeroAbathur") {
        lv_heroHP = 1000.0;
        libPVEB_gf_PBSetNPCHeroStats("HeroAbathur", lv_player, libPVEB_gf_PVEDifficultyValueReal(lv_heroHP, (lv_heroHP * libPEB1_gv_hardHeroHPBonus)));
    }
    else if (autoA9973246_val == "HeroAnubarak") {
        lv_heroHP = 2100.0;
        libPVEB_gf_PBSetNPCHeroStats("HeroAnubarak", lv_player, libPVEB_gf_PVEDifficultyValueReal(lv_heroHP, (lv_heroHP * libPEB1_gv_hardHeroHPBonus)));
    }
    else if (autoA9973246_val == "HeroButcher") {
        lv_heroHP = 2200.0;
        libPVEB_gf_PBSetNPCHeroStats("HeroButcher", lv_player, libPVEB_gf_PVEDifficultyValueReal(lv_heroHP, (lv_heroHP * libPEB1_gv_hardHeroHPBonus)));
    }
    else if (autoA9973246_val == "HeroDehaka") {
        lv_heroHP = 2400.0;
        libPVEB_gf_PBSetNPCHeroStats("HeroDehaka", lv_player, libPVEB_gf_PVEDifficultyValueReal(lv_heroHP, (lv_heroHP * libPEB1_gv_hardHeroHPBonus)));
    }
    else if (autoA9973246_val == "HeroDiablo") {
        lv_heroHP = 2600.0;
        libPVEB_gf_PBSetNPCHeroStats("HeroDiablo", lv_player, libPVEB_gf_PVEDifficultyValueReal(lv_heroHP, (lv_heroHP * libPEB1_gv_hardHeroHPBonus)));
        CatalogFieldValueSet(c_gameCatalogEffect, "DiabloLightningBreathDamage", "Amount", lv_player, FixedToString(libPVEB_gf_PVEDifficultyValueReal(38.0, 42.0), c_fixedPrecisionAny));
    }
    else if (autoA9973246_val == "HeroKerrigan") {
        lv_heroHP = 1700.0;
        libPVEB_gf_PBSetNPCHeroStats("HeroKerrigan", lv_player, libPVEB_gf_PVEDifficultyValueReal(lv_heroHP, (lv_heroHP * libPEB1_gv_hardHeroHPBonus)));
    }
    else if (autoA9973246_val == "HeroTychus") {
        lv_heroHP = 1750.0;
        libPVEB_gf_PBSetNPCHeroStats("HeroTychus", lv_player, libPVEB_gf_PVEDifficultyValueReal(lv_heroHP, (lv_heroHP * libPEB1_gv_hardHeroHPBonus)));
        CatalogFieldValueSet(c_gameCatalogBehavior, "TychusOdin", "Duration", lv_player, "0");
        CatalogFieldValueSet(c_gameCatalogEffect, "TychusOdinRagnarokMissilesDamage", "Amount", lv_player, FixedToString(libPVEB_gf_PVEDifficultyValueReal(100.0, 120.0), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogEffect, "TychusOdinWeaponDamage", "Amount", lv_player, FixedToString(libPVEB_gf_PVEDifficultyValueReal(130.0, 160.0), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogEffect, "OdinWeaponSplashDamage", "Amount", lv_player, FixedToString(libPVEB_gf_PVEDifficultyValueReal(34.0, 40.0), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogWeapon, "TychusOdin", "Period", lv_player, "1.25");
        CatalogFieldValueSet(c_gameCatalogAbil, "TychusOdinAnnihilate", "Cost.Cooldown.TimeUse", lv_player, "5");
    }
    else if (autoA9973246_val == "HeroMurky") {
        lv_heroHP = 800.0;
        libPVEB_gf_PBSetNPCHeroStats("HeroMurky", lv_player, libPVEB_gf_PVEDifficultyValueReal(lv_heroHP, (lv_heroHP * libPEB1_gv_hardHeroHPBonus)));
        CatalogFieldValueSet(c_gameCatalogBehavior, "MurkySafetyBubble", "Duration", lv_player, "3");
        CatalogFieldValueSet(c_gameCatalogAbil, "MurkyOctoGrab", "Cost.Cooldown.TimeUse", lv_player, "12");
        CatalogFieldValueSet(c_gameCatalogAbil, "MurkySafetyBubble", "Cost.Cooldown.TimeUse", lv_player, "12");
    }
    else if (autoA9973246_val == "HeroStitches") {
        lv_heroHP = 2200.0;
        libPVEB_gf_PBSetNPCHeroStats("HeroStitches", lv_player, libPVEB_gf_PVEDifficultyValueReal(lv_heroHP, (lv_heroHP * libPEB1_gv_hardHeroHPBonus)));
    }
    else if (autoA9973246_val == "HeroZagara") {
        lv_heroHP = 2000.0;
        libPVEB_gf_PBSetNPCHeroStats("HeroZagara", lv_player, libPVEB_gf_PVEDifficultyValueReal(lv_heroHP, (lv_heroHP * libPEB1_gv_hardHeroHPBonus)));
    }
    else if (autoA9973246_val == "HeroStukov") {
        lv_heroHP = 1800.0;
        libPVEB_gf_PBSetNPCHeroStats("HeroStukov", lv_player, libPVEB_gf_PVEDifficultyValueReal(lv_heroHP, (lv_heroHP * libPEB1_gv_hardHeroHPBonus)));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PZEHeroCatalogChangesCallback_Init () {
    libPEB1_gt_PZEHeroCatalogChangesCallback = TriggerCreate("libPEB1_gt_PZEHeroCatalogChangesCallback_Func");
    libPESC_gf_HardModeActivated(libPEB1_gt_PZEHeroCatalogChangesCallback);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PZE Curate Hero List Callback
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PZECurateHeroListCallback_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_row;
    int lv_col;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_row = (libPBUI_ge_CurateHeroSelectionRole_Warrior);
    lv_col = 0;
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Artanis";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Arthas";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Firebat";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Crusader";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Muradin";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Barbarian";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Tyrael";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Varian";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Yrel";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Zarya";

    lv_row = (libPBUI_ge_CurateHeroSelectionRole_Support);
    lv_col = 0;
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Alexstrasza";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "FaerieDragon";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Deckard";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Monk";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "LiLi";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Medic";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Lucio";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Malfurion";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Rehgar";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Uther";

    lv_row = (libPBUI_ge_CurateHeroSelectionRole_Specialist);
    lv_col = 0;
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Azmodan";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Tinker";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "SgtHammer";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Medivh";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "WitchDoctor";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Probius";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Necromancer";

    lv_row = (libPBUI_ge_CurateHeroSelectionRole_Assassin1);
    lv_col = 0;
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Amazon";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Falstad";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Fenix";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Genji";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Greymane";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Guldan";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Hanzo";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Illidan";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Jaina";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Junkrat";

    lv_row = (libPBUI_ge_CurateHeroSelectionRole_Assassin2);
    lv_col = 0;
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Kaelthas";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "KelThuzad";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Maiev";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Mephisto";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Ragnaros";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Raynor";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Thrall";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "DemonHunter";
    lv_col += 1;
    libPBUI_gv_curateHeroSelections[lv_row][lv_col] = "Zuljin";

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PZECurateHeroListCallback_Init () {
    libPEB1_gt_PZECurateHeroListCallback = TriggerCreate("libPEB1_gt_PZECurateHeroListCallback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Hero Talents
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_InitHeroTalents_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SetTalentHidden("AlexstraszaCleansingFlame", true);
    SetTalentEnabled("AlexstraszaCleansingFlame", false);
    SetTalentHidden("AlexstraszaOnRubyWingsCleansingFlame", true);
    SetTalentEnabled("AlexstraszaOnRubyWingsCleansingFlame", false);
    SetTalentHidden("AzmodanHellishHirelings", true);
    SetTalentEnabled("AzmodanHellishHirelings", false);
    SetTalentHidden("AzmodanMasteryBoundMinion", true);
    SetTalentEnabled("AzmodanMasteryBoundMinion", false);
    SetTalentHidden("BrightwingPixieCharm", true);
    SetTalentEnabled("BrightwingPixieCharm", false);
    SetTalentHidden("KelThuzadPhylactery", true);
    SetTalentEnabled("KelThuzadPhylactery", false);
    SetTalentHidden("FalstadWingman", true);
    SetTalentEnabled("FalstadWingman", false);
    SetTalentHidden("FalstadMasteryFlightEpicMount", true);
    SetTalentEnabled("FalstadMasteryFlightEpicMount", false);
    SetTalentHidden("HanzoTargetPractice", true);
    SetTalentEnabled("HanzoTargetPractice", false);
    SetTalentHidden("HanzoMountedArchery", true);
    SetTalentEnabled("HanzoMountedArchery", false);
    SetTalentHidden("JunkratRocketRide", true);
    SetTalentEnabled("JunkratRocketRide", false);
    SetTalentHidden("MedicHeroicAbilityMedivacDropship", true);
    SetTalentEnabled("MedicHeroicAbilityMedivacDropship", false);
    SetTalentHidden("MedicSafeZone", true);
    SetTalentEnabled("MedicSafeZone", false);
    SetTalentHidden("MedicReinforcements", true);
    SetTalentEnabled("MedicReinforcements", false);
    SetTalentHidden("MedivhTransformRavenRavensIntellect", true);
    SetTalentEnabled("MedivhTransformRavenRavensIntellect", false);
    SetTalentHidden("MedivhTransformRavenWindsOfCelerity", true);
    SetTalentEnabled("MedivhTransformRavenWindsOfCelerity", false);
    SetTalentHidden("MephistoConsumeSouls", true);
    SetTalentEnabled("MephistoConsumeSouls", false);
    SetTalentHidden("MalthaelOnAPaleHorse", true);
    SetTalentEnabled("MalthaelOnAPaleHorse", false);
    SetTalentHidden("MalthaelNoOneCanStopDeath", true);
    SetTalentEnabled("MalthaelNoOneCanStopDeath", false);
    SetTalentHidden("RagnarosLavaWave", true);
    SetTalentEnabled("RagnarosLavaWave", false);
    SetTalentHidden("RagnarosLavaWaveLavaSurge", true);
    SetTalentEnabled("RagnarosLavaWaveLavaSurge", false);
    SetTalentHidden("RagnarosMoltenCoreHeroicDifficulty", true);
    SetTalentEnabled("RagnarosMoltenCoreHeroicDifficulty", false);
    SetTalentHidden("RehgarMasteryFarsight", true);
    SetTalentEnabled("RehgarMasteryFarsight", false);
    SetTalentHidden("UtherMasteryRedemption", true);
    SetTalentEnabled("UtherMasteryRedemption", false);
    SetTalentHidden("YrelDivineSteed", true);
    SetTalentEnabled("YrelDivineSteed", false);
    SetTalentHidden("ZuljinHeadhunter", true);
    SetTalentEnabled("ZuljinHeadhunter", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_InitHeroTalents_Init () {
    libPEB1_gt_InitHeroTalents = TriggerCreate("libPEB1_gt_InitHeroTalents_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Observer
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGObserver_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_mainPanel, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGObserver_Init () {
    libPEB1_gt_DEBUGObserver = TriggerCreate("libPEB1_gt_DEBUGObserver_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGObserver, c_playerAny, "-ob", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Temp
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGTemp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGTemp_Init () {
    libPEB1_gt_DEBUGTemp = TriggerCreate("libPEB1_gt_DEBUGTemp_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGTemp, c_playerAny, "-efbt", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Make a Fake Hero
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGMakeaFakeHero_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPVEB_gf_PBPrepareNPCHero("Zagara", "ZagaraUltimateIce");
    libPVEB_gf_PBSpawnNPCHero("Zagara", CameraGetTarget(EventPlayer()), libPVEB_gv_pBNPCHeroLevel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGMakeaFakeHero_Init () {
    libPEB1_gt_DEBUGMakeaFakeHero = TriggerCreate("libPEB1_gt_DEBUGMakeaFakeHero_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGMakeaFakeHero, c_playerAny, "fakehero", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Add Instant Item
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGAddInstantItem_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_PEB1_6B741452", "A", IntToText(EventPlayer()));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_PEB1_6B741452"), true);
    UnitBehaviorAddPlayer(libGame_gv_players[EventPlayer()].lv_heroUnit, "HasMapMechanicInstantAbility1", EventPlayer(), 1);
    UnitBehaviorAddPlayer(libGame_gv_players[EventPlayer()].lv_heroUnit, "HasMapMechanicInstantAbility", EventPlayer(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGAddInstantItem_Init () {
    libPEB1_gt_DEBUGAddInstantItem = TriggerCreate("libPEB1_gt_DEBUGAddInstantItem_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGAddInstantItem, c_playerAny, "instant", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Add Targeted Item 1
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGAddTargetedItem1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_PEB1_BC821EDC", "A", IntToText(EventPlayer()));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_PEB1_BC821EDC"), true);
    UnitBehaviorAddPlayer(libGame_gv_players[EventPlayer()].lv_heroUnit, "HasMapMechanicTargetAbility", EventPlayer(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGAddTargetedItem1_Init () {
    libPEB1_gt_DEBUGAddTargetedItem1 = TriggerCreate("libPEB1_gt_DEBUGAddTargetedItem1_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGAddTargetedItem1, c_playerAny, "targeted1", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Add Targeted Item 2
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGAddTargetedItem2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_PEB1_CC8DD1CB", "A", IntToText(EventPlayer()));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_PEB1_CC8DD1CB"), true);
    UnitBehaviorAddPlayer(libGame_gv_players[EventPlayer()].lv_heroUnit, "HasMapMechanicTargetAbility2", EventPlayer(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGAddTargetedItem2_Init () {
    libPEB1_gt_DEBUGAddTargetedItem2 = TriggerCreate("libPEB1_gt_DEBUGAddTargetedItem2_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGAddTargetedItem2, c_playerAny, "targeted2", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Stage 2
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libPEB1_gv_skipCheatReady == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPEB1_gv_skipCheatReady = false;
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerStop(libPEB1_gt_EscapefromBraxisStartingSequence);
    if ((libPEB1_gv_objectivesCreated1 == false)) {
        TriggerExecute(libPEB1_gt_ObjectiveFirstCheckpointDisplayNotification, true, false);
        libPEB1_gv_objectivesCreated1 = true;
    }

    libGame_gv_announcement_SystemEnabled = false;
    if ((libGame_gv_gameStarted == false)) {
        libNtve_gf_StopTimer(libGame_gv_openTheGatesTimer);
        TriggerExecute(libGame_gt_OpenTheGatesOpenTheGatesTimerExpires, true, false);
    }

    TriggerExecute(libPEB1_gt_TransitiontoStage2, true, false);
    libPEB1_gv_skipCheatReady = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGStage2_Init () {
    libPEB1_gt_DEBUGStage2 = TriggerCreate("libPEB1_gt_DEBUGStage2_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGStage2, c_playerAny, "s2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Stage 3
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGStage3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libPEB1_gv_skipCheatReady == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libPEB1_gt_DEBUGStage2, false);
    libPEB1_gv_skipCheatReady = false;
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerStop(libPEB1_gt_EscapefromBraxisStartingSequence);
    if ((libPEB1_gv_objectivesCreated1 == false)) {
        TriggerEnable(libPEB1_gt_ObjectiveFirstCheckpointDisplayNotification, false);
        TriggerEnable(libPEB1_gt_ObjectiveFirstCheckpointComplete, false);
        TriggerExecute(libPEB1_gt_ObjectiveSecondCheckpointDisplayNotification, true, false);
        TriggerExecute(libPEB1_gt_ObjectiveShelterDisplayNotification, true, false);
        libPEB1_gv_objectivesCreated1 = true;
        libPEB1_gv_objectivesCreated2 = true;
    }
    else {
        if ((libPEB1_gv_objectivesCreated2 == false)) {
            TriggerEnable(libPEB1_gt_ObjectiveFirstCheckpointComplete, false);
            TriggerExecute(libPEB1_gt_ObjectiveSecondCheckpointDisplayNotification, true, false);
            libPEB1_gv_objectivesCreated2 = true;
        }

    }
    libGame_gv_announcement_SystemEnabled = false;
    if ((libGame_gv_gameStarted == false)) {
        libNtve_gf_StopTimer(libGame_gv_openTheGatesTimer);
        TriggerExecute(libGame_gt_OpenTheGatesOpenTheGatesTimerExpires, true, false);
    }

    TriggerExecute(libPEB1_gt_TransitiontoStage3, true, false);
    libPEB1_gv_skipCheatReady = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGStage3_Init () {
    libPEB1_gt_DEBUGStage3 = TriggerCreate("libPEB1_gt_DEBUGStage3_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGStage3, c_playerAny, "s3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Mercs
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGMercs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_mercGroup;
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto080ACB54_g;
    int auto080ACB54_u;

    // Variable Initialization
    lv_mercGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_PEB1_2B57F1F9"), true);
    UnitGroupAddUnitGroup(lv_mercGroup, UnitGroup("TerranHellbat", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_mercGroup, UnitGroup("TerranGoliath", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto080ACB54_g = lv_mercGroup;
    auto080ACB54_u = UnitGroupCount(auto080ACB54_g, c_unitCountAll);
    for (;; auto080ACB54_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto080ACB54_g, auto080ACB54_u);
        if (lv_itUnit == null) { break; }
        UnitCreateAIThinkTree(lv_itUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGMercs_Init () {
    libPEB1_gt_DEBUGMercs = TriggerCreate("libPEB1_gt_DEBUGMercs_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGMercs, c_playerAny, "Mercs", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Holdout Timer UI
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGHoldoutTimerUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_timer, 90.0, false, c_timeGame);
    Wait(3.0, c_timeGame);
    libPEB1_gf_SetHoldoutPanelZergRemaining(30);
    Wait(3.0, c_timeGame);
    libPEB1_gf_SetHoldoutPanelDoorOpened();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGHoldoutTimerUI_Init () {
    libPEB1_gt_DEBUGHoldoutTimerUI = TriggerCreate("libPEB1_gt_DEBUGHoldoutTimerUI_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGHoldoutTimerUI, c_playerAny, "-htu", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Boss UI
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGBossUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SlivanBoss", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_TeamChaos, CameraGetTarget(EventPlayer()), null);
    libPEB1_gf_DisplayBossPanel(UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGBossUI_Init () {
    libPEB1_gt_DEBUGBossUI = TriggerCreate("libPEB1_gt_DEBUGBossUI_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGBossUI, c_playerAny, "-bu", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Slivan Pod
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGSlivanPod_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_enemyNearby;
    unit lv_attackTarget;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyNearby = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SlivanBossPod", 0, 12, CameraGetTarget(1), null);
    UnitBehaviorRemovePlayer(UnitLastCreated(), "SlivanPodBirthDelay", UnitGetOwner(UnitLastCreated()), 1);
    UnitBehaviorRemovePlayer(UnitLastCreated(), "SlivanPodTimedLife", UnitGetOwner(UnitLastCreated()), 1);
    UnitBehaviorAddPlayer(UnitLastCreated(), "SlivanPodShorterVision", UnitGetOwner(UnitLastCreated()), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGSlivanPod_Init () {
    libPEB1_gt_DEBUGSlivanPod = TriggerCreate("libPEB1_gt_DEBUGSlivanPod_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGSlivanPod, c_playerAny, "-sp", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Retry Screen
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGRetryScreen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/PvERetryTeamFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGRetryScreen_Init () {
    libPEB1_gt_DEBUGRetryScreen = TriggerCreate("libPEB1_gt_DEBUGRetryScreen_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGRetryScreen, c_playerAny, "Retry", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - BG Sound
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGBGSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateActorAtPoint("ZergHeroBGSoundAnubarak", UnitGetPosition(UnitGroupRandomUnit(UnitGroup("CrusaderIndestructible", c_playerAny, RegionCircle(UnitGetPosition(UnitGroupUnit(UnitGroupSelected(EventPlayer()), 1)), 60.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGBGSound_Init () {
    libPEB1_gt_DEBUGBGSound = TriggerCreate("libPEB1_gt_DEBUGBGSound_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGBGSound, c_playerAny, "-bg", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Victory
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGVictory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libPEB1_gv_skipCheatReady == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libPEB1_gt_DEBUGStage2, false);
    TriggerEnable(libPEB1_gt_DEBUGStage3, false);
    libPEB1_gv_skipCheatReady = false;
    if ((TriggerIsEnabled(libPEB1_gt_SlivanDies) == true)) {
        UnitCreateEffectUnit(libPEB1_gv_slivan, "Kill", libPEB1_gv_slivan);
    }
    else {
        CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        TriggerStop(libPEB1_gt_EscapefromBraxisStartingSequence);
        TriggerEnable(libPEB1_gt_ObjectiveFirstCheckpointDisplayNotification, false);
        TriggerEnable(libPEB1_gt_ObjectiveFirstCheckpointComplete, false);
        TriggerEnable(libPEB1_gt_ObjectiveSecondCheckpointComplete, false);
        TriggerEnable(libPEB1_gt_ObjectiveSecondCheckpointDisplayNotification, false);
        TriggerEnable(libPEB1_gt_ObjectiveShelterComplete, false);
        TriggerEnable(libPEB1_gt_ObjectiveShelterDisplayNotification, false);
        libGame_gv_announcement_SystemEnabled = false;
        TriggerExecute(libPEB1_gt_VictoryCinematicQ, false, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGVictory_Init () {
    libPEB1_gt_DEBUGVictory = TriggerCreate("libPEB1_gt_DEBUGVictory_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGVictory, c_playerAny, "-victory", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Timer
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerSetElapsed(libGame_gv_gameTimer, 470.0);
    libPEB1_gv_victoryTime = FixedToInt(libUIUI_gf_HeroesGameTime());
    libPEB1_gv_victoryTimeLoop = FixedToInt((libUIUI_gf_HeroesGameTime() * 16.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGTimer_Init () {
    libPEB1_gt_DEBUGTimer = TriggerCreate("libPEB1_gt_DEBUGTimer_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGTimer, c_playerAny, "-timec", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Disable Zerg Spawning
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGDisableZergSpawning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libPEB1_gv_zergSpawningDisabled == false)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_PEB1_DC386A18"), true);
        libPEB1_gv_zergSpawningDisabled = true;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_PEB1_9CCE42F2"), true);
        libPEB1_gv_zergSpawningDisabled = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGDisableZergSpawning_Init () {
    libPEB1_gt_DEBUGDisableZergSpawning = TriggerCreate("libPEB1_gt_DEBUGDisableZergSpawning_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGDisableZergSpawning, c_playerAny, "-disablezerg", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Holdout Performance Test
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGHoldoutPerformanceTest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayerIndex;
    int lv_zergHeroIndex;
    point lv_fightLocation;

    // Automatic Variable Declarations
    playergroup auto32C22853_g;
    int auto32C22853_var;
    playergroup autoCDF5C161_g;
    playergroup auto7D6E720B_g;
    playergroup autoEB366123_g;
    unitgroup auto1339957B_g;
    int auto1339957B_u;
    unit auto1339957B_var;
    unitgroup auto1E24903A_g;
    int auto1E24903A_u;
    unit auto1E24903A_var;
    unitgroup auto9A405D72_g;
    int auto9A405D72_u;
    unit auto9A405D72_var;
    unitgroup auto981FFEA4_g;
    int auto981FFEA4_u;
    unit auto981FFEA4_var;
    unitgroup auto1AA86DAA_g;
    int auto1AA86DAA_u;
    unit auto1AA86DAA_var;
    playergroup auto7923F99A_g;
    const int autoE35BD4A4_ae = 5;
    const int autoE35BD4A4_ai = 1;
    playergroup auto5B65C9A2_g;
    unitgroup auto90B2268F_g;
    int auto90B2268F_u;
    unit auto90B2268F_var;
    const int autoBADBC00C_ae = 5;
    const int autoBADBC00C_ai = 1;
    playergroup autoAAB50F35_g;
    unitgroup auto27FF6D41_g;
    int auto27FF6D41_u;
    unit auto27FF6D41_var;
    unitgroup auto37DA1B11_g;
    int auto37DA1B11_u;
    unit auto37DA1B11_var;
    int autoDED2316F_ae;
    int auto1E8FC1AE_ae;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_fightLocation = RegionGetCenter(RegionFromName("Checkpoint 2 Beacon Region"));
    TriggerExecute(libPBUI_gt_CurateHSUIForceSelection, true, false);
    while (!((TimerGetRemaining(libGame_gv_openTheGatesTimer) > 1.0))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_StopTimer(libGame_gv_openTheGatesTimer);
    libSprt_gf_DEBUGStartGame();
    Wait(0.5, c_timeGame);
    TriggerStop(libPEB1_gt_EscapefromBraxisStartingSequence);
    libPEB1_gf_Reinitializehero(2, libGame_ge_Faction_Order);
    libPEB1_gf_Reinitializehero(3, libGame_ge_Faction_Order);
    libPEB1_gf_Reinitializehero(4, libGame_ge_Faction_Order);
    libPEB1_gf_Reinitializehero(5, libGame_ge_Faction_Order);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 2);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 3);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 4);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 5);
    libNtve_gf_SetPlayerGroupAlliance(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    auto32C22853_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
    auto32C22853_var = -1;
    while (true) {
        	auto32C22853_var = PlayerGroupNextPlayer(auto32C22853_g, auto32C22853_var);
        	if (auto32C22853_var<0) { break; }
        	libNtve_gf_SetAlliance(auto32C22853_var, libCore_gv_cOMPUTER_NoVision_TeamOrder, libNtve_ge_AllianceSetting_Ally);
        PlayerSetAlliance(libCore_gv_cOMPUTER_NoVision_TeamOrder, c_allianceIdVision, auto32C22853_var, false);
        PlayerSetAlliance(libCore_gv_cOMPUTER_TeamChaos, c_allianceIdPower, auto32C22853_var, true);
        libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_TeamOrder, auto32C22853_var, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        PlayerSetColorIndex(auto32C22853_var, libCore_gv_cOLOROrderPlayerColor, true);
        autoCDF5C161_g = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup;
        lv_itPlayerIndex = -1;
        while (true) {
            	lv_itPlayerIndex = PlayerGroupNextPlayer(autoCDF5C161_g, lv_itPlayerIndex);
            	if (lv_itPlayerIndex<0) { break; }
            	libNtve_gf_SetAlliance(auto32C22853_var, lv_itPlayerIndex, libNtve_ge_AllianceSetting_Enemy);
        }
        PlayerSetAlliance(auto32C22853_var, c_allianceIdVision, libCore_gv_oBSERVER_ObserverUIPlayer, true);
        if ((auto32C22853_var != libCore_gv_cOMPUTER_TeamOrder)) {
            libNtve_gf_SetAlliance(auto32C22853_var, libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Enemy);
            PlayerSetAlliance(libCore_gv_cOMPUTER_TeamOrder, c_allianceIdSeekHelp, auto32C22853_var, false);
            PlayerSetAlliance(libCore_gv_cOMPUTER_TeamOrder, c_allianceIdPower, auto32C22853_var, true);
        }

    }
    auto7D6E720B_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
    lv_itPlayerIndex = -1;
    while (true) {
        	lv_itPlayerIndex = PlayerGroupNextPlayer(auto7D6E720B_g, lv_itPlayerIndex);
        	if (lv_itPlayerIndex<0) { break; }
        	libGame_gv_players[lv_itPlayerIndex].lv_spawnPoint = PointFromName(("Start Location 00" + IntToString(lv_itPlayerIndex)));
    }
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Crusader"), 1, 0, libCore_gf_GetTotalXPForLevel(13), 1, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Azmodan"), 1, 0, libCore_gf_GetTotalXPForLevel(13), 2, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("WitchDoctor"), 1, 0, libCore_gf_GetTotalXPForLevel(13), 3, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Greymane"), 1, 0, libCore_gf_GetTotalXPForLevel(13), 4, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("KelThuzad"), 1, 0, libCore_gf_GetTotalXPForLevel(13), 5, 0);
    libStEx_gf_MoveUnit(libGame_gv_players[1].lv_heroUnit, PointFromName("Start Location 001"), false);
    libStEx_gf_MoveUnit(libGame_gv_players[2].lv_heroUnit, PointFromName("Start Location 002"), false);
    libStEx_gf_MoveUnit(libGame_gv_players[3].lv_heroUnit, PointFromName("Start Location 003"), false);
    libStEx_gf_MoveUnit(libGame_gv_players[4].lv_heroUnit, PointFromName("Start Location 004"), false);
    libStEx_gf_MoveUnit(libGame_gv_players[5].lv_heroUnit, PointFromName("Start Location 005"), false);
    Wait(2.0, c_timeGame);

    libPEB1_gf_ShowHideHoldoutPanel(false);
    libPEB1_gv_zergHeroGraceCounter = 0;
    libPEB1_gv_zergHeroes[1][1].lv_active = false;
    libPEB1_gv_zergHeroes[1][2].lv_active = false;
    libPEB1_gv_zergHeroes[1][3].lv_active = false;
    libPEB1_gv_zergHeroes[1][4].lv_active = false;
    libPEB1_gv_zergHeroes[1][5].lv_active = false;
    autoEB366123_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayerIndex = -1;
    while (true) {
        	lv_itPlayerIndex = PlayerGroupNextPlayer(autoEB366123_g, lv_itPlayerIndex);
        	if (lv_itPlayerIndex<0) { break; }
        	VisExploreArea(lv_itPlayerIndex, RegionEntireMap(), false, false);
    }
    PingDestroy(libPEB1_gv_checkpoints[1].lv_ping);
    TransmissionClearAll();
    UnitKill(libPEB1_gv_checkpoints[1].lv_beacon);
    auto1339957B_g = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceAlly, libPEB1_gv_playableSpace[1], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto1339957B_u = UnitGroupCount(auto1339957B_g, c_unitCountAll);
    for (;; auto1339957B_u -= 1) {
        auto1339957B_var = UnitGroupUnitFromEnd(auto1339957B_g, auto1339957B_u);
        if (auto1339957B_var == null) { break; }
        UnitRemove(auto1339957B_var);
    }
    auto1E24903A_g = UnitGroup("RangedMinion", c_playerAny, libPEB1_gv_playableSpace[1], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1E24903A_u = UnitGroupCount(auto1E24903A_g, c_unitCountAll);
    for (;; auto1E24903A_u -= 1) {
        auto1E24903A_var = UnitGroupUnitFromEnd(auto1E24903A_g, auto1E24903A_u);
        if (auto1E24903A_var == null) { break; }
        UnitRemove(auto1E24903A_var);
    }
    libPVEB_gf_PvEPickupDespawnPickupsInRegion(RegionEntireMap());
    auto9A405D72_g = libPEB1_gv_checkpoints[1].lv_blockers1;
    auto9A405D72_u = UnitGroupCount(auto9A405D72_g, c_unitCountAll);
    for (;; auto9A405D72_u -= 1) {
        auto9A405D72_var = UnitGroupUnitFromEnd(auto9A405D72_g, auto9A405D72_u);
        if (auto9A405D72_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto9A405D72_var, false);
    }
    auto981FFEA4_g = libPEB1_gv_checkpoints[1].lv_entryWalls;
    auto981FFEA4_u = UnitGroupCount(auto981FFEA4_g, c_unitCountAll);
    for (;; auto981FFEA4_u -= 1) {
        auto981FFEA4_var = UnitGroupUnitFromEnd(auto981FFEA4_g, auto981FFEA4_u);
        if (auto981FFEA4_var == null) { break; }
        UnitSetOwner(auto981FFEA4_var, libStEx_gv_pLAYER_11_ORDER, true);
    }
    auto1AA86DAA_g = libPEB1_gv_checkpoints[1].lv_exitWalls;
    auto1AA86DAA_u = UnitGroupCount(auto1AA86DAA_g, c_unitCountAll);
    for (;; auto1AA86DAA_u -= 1) {
        auto1AA86DAA_var = UnitGroupUnitFromEnd(auto1AA86DAA_g, auto1AA86DAA_u);
        if (auto1AA86DAA_var == null) { break; }
        UnitSetOwner(auto1AA86DAA_var, libStEx_gv_pLAYER_11_ORDER, true);
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libPEB1_gv_checkpoints[1].lv_entryGate), c_animNameDefault, "Stand Morph B", c_animFlagPlayForever, c_animTimeDefault);
    TriggerStop(libPVEB_gt_PvEPickupPreplacedPickupVisibilityCheck);
    auto7923F99A_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_itPlayerIndex = -1;
    while (true) {
        	lv_itPlayerIndex = PlayerGroupNextPlayer(auto7923F99A_g, lv_itPlayerIndex);
        	if (lv_itPlayerIndex<0) { break; }
        	AIDisableForPlayer(lv_itPlayerIndex);
    }
    VisRevealArea(libCore_gv_cOMPUTER_TeamOrder, libPEB1_gv_checkpoints[1].lv_eventCompleteTriggerRegion, 0.0, false);
    VisRevealArea(libCore_gv_cOMPUTER_TeamOrder, libPEB1_gv_checkpoints[1].lv_frontRegion, 0.0, false);
    if ((libPEB1_gv_heroesPrepared[1] == true)) {
        libPEB1_gv_heroesPrepared[1] = false;
        lv_zergHeroIndex = 1;
        for ( ; ( (autoE35BD4A4_ai >= 0 && lv_zergHeroIndex <= autoE35BD4A4_ae) || (autoE35BD4A4_ai < 0 && lv_zergHeroIndex >= autoE35BD4A4_ae) ) ; lv_zergHeroIndex += autoE35BD4A4_ai ) {
            libPVEB_gf_PBResetNPCHero(libPEB1_gv_zergHeroes[1][lv_zergHeroIndex].lv_hero);
        }
    }

    libPEB1_gv_stage1CompleteTime = FixedToInt(libUIUI_gf_HeroesGameTime());
    libPEB1_gv_pZECurrentStageCurrent = libPEB1_ge_PZEStages_Stage2PreHoldout;
    libGame_gv_announcement_SystemEnabled = false;
    libPEB1_gv_currentStage = 2;
    TriggerExecute(libPEB1_gt_CleanupStage1, true, false);
    PointSet(PointFromName("Start Location 0012"), PointFromName("Start Location 12 - 2"));
    DialogControlSetAnimationState(libPEB1_gv_pZEMinimap, PlayerGroupAll(), "MaskState", "Part2");
    auto5B65C9A2_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayerIndex = -1;
    while (true) {
        	lv_itPlayerIndex = PlayerGroupNextPlayer(auto5B65C9A2_g, lv_itPlayerIndex);
        	if (lv_itPlayerIndex<0) { break; }
        	auto90B2268F_g = UnitGroup(null, lv_itPlayerIndex, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto90B2268F_u = UnitGroupCount(auto90B2268F_g, c_unitCountAll);
        for (;; auto90B2268F_u -= 1) {
            auto90B2268F_var = UnitGroupUnitFromEnd(auto90B2268F_g, auto90B2268F_u);
            if (auto90B2268F_var == null) { break; }
            if ((UnitTypeTestAttribute(UnitGetType(auto90B2268F_var), c_unitAttributeHeroic) == false)) {
                break;
            }

            UnitCreateEffectUnit(auto90B2268F_var, "PVEGenericAbortMissile", auto90B2268F_var);
            UnitSetPosition(auto90B2268F_var, libPEB1_gv_checkpoints[1].lv_playerSpawnPoints[libGame_gv_players[lv_itPlayerIndex].lv_rosterSlot], false);
            UnitIssueOrder(auto90B2268F_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            if ((UnitTypeTestFlag(UnitGetType(auto90B2268F_var), c_unitFlagTurnable) == true)) {
                UnitSetFacing(auto90B2268F_var, 90.0, 0.0);
            }

            UnitSetPropertyFixed(auto90B2268F_var, c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(auto90B2268F_var, c_unitPropEnergyPercent, 100.0);
            UnitBehaviorRemovePlayer(auto90B2268F_var, "RegenGlobePercentBuff", lv_itPlayerIndex, 1);
            if ((lv_itPlayerIndex > 0) && (lv_itPlayerIndex < libCore_gv_bALMaxPlayers) && (UnitIsAlive(libGame_gv_players[lv_itPlayerIndex].lv_heroUnit) == false)) {
                libPVEB_gf_PvEResurrectRevivePlayerInstantly(lv_itPlayerIndex, libPEB1_gv_checkpoints[1].lv_playerSpawnPoints[libGame_gv_players[lv_itPlayerIndex].lv_rosterSlot]);
            }

            CameraApplyInfo(lv_itPlayerIndex, CameraInfoDefault(), 0.0, -1, 10.0, false);
            CameraPan(lv_itPlayerIndex, libPEB1_gv_checkpoints[1].lv_playerSpawnPoints[libGame_gv_players[lv_itPlayerIndex].lv_rosterSlot], 0.0, -1, 10.0, false);
            libGame_gf_HeroRefreshCooldowns(lv_itPlayerIndex, false);
        }
    }
    RegionPlayableMapSet(libPEB1_gv_playableSpace[2]);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    TriggerExecute(libPEB1_gt_OpenCheckpointExitStage2, true, false);
    if ((RandomInt(1, 2) == 1)) {
        libPEB1_gv_abathurInitialSpawnRight = true;
    }
    else {
        libPEB1_gv_abathurInitialSpawnRight = false;
    }
    TriggerExecute(libPEB1_gt_InitialZergStage2, true, false);
    libPVEB_gv_pvEPickupPlacingPreplacedPickups = true;
    TriggerExecute(libPVEB_gv_pvEPickupPreplacedPickupCallback, true, true);
    libPVEB_gv_pvEPickupPlacingPreplacedPickups = false;
    TriggerExecute(libPVEB_gt_PvEPickupPreplacedPickupVisibilityCheck, true, false);
    libPVEB_gf_PBUpdateTeamLevel(1, 16);
    libPVEB_gf_PBUpdateTeamLevel(2, libPEB1_gv_zergHeroLevel[2]);
    libPEB1_gv_pauseNydusSpawning = false;
    libPEB1_gv_pauseHeroRevival = false;
    libPEB1_gv_zergHeroSpawnSoundsEnabled = false;
    libNtve_gf_StopTimer(libPEB1_gv_zergHeroEventWaitTimer);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 2))) {
        return true;
    }

    libPVEB_gf_PVECreateDirectiveMessage(StringExternal("Param/Value/lib_PEB1_03061349"), StringExternal("Param/Value/lib_PEB1_6CB9A1B9"), libPVEB_ge_PVEDirectiveStyle_ObjectiveDiscovered);
    TriggerExecute(libPEB1_gt_ObjectiveFirstCheckpointComplete, true, false);
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 2))) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngleWithType(PlayerGroupAll(), "PingObjective", libPEB1_gv_checkpoints[2].lv_pingPoint, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0, -1, -1);
    libPEB1_gv_checkpoints[2].lv_ping = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_PEB1_E962BD50"));
    SoundPlayForPlayer(SoundLink("UI_PvEBrawl_ObjectivePing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libGame_gv_announcement_SystemEnabled = true;
    TriggerExecute(libPEB1_gt_ObjectiveSecondCheckpointDisplayNotification, true, false);
    libPEB1_gv_objectivesCreated2 = true;
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Stage2MusicPart1", c_soundtrackCueAny, c_soundtrackIndexAny, true);

    libPVEB_gf_PBResetNPCHero(libPVEB_gv_pBNPCHeroes[2].lv_hero);
    libPVEB_gf_PBResetNPCHero(libPVEB_gv_pBNPCHeroes[3].lv_hero);
    libPVEB_gf_PBResetNPCHero(libPVEB_gv_pBNPCHeroes[4].lv_hero);
    libPEB1_gv_availableHeroTypes[3] = "Kerrigan";
    libPEB1_gv_availableHeroTypes[4] = "Anubarak";
    libPEB1_gv_availableHeroTypes[5] = "Tychus";
    libPEB1_gv_availableHeroTypes[6] = "Abathur";
    libPEB1_gv_availableHeroTypesCount = 10;
    libPEB1_gv_heroesPrepared[2] = false;
    libPEB1_gv_zergHeroes[2][1].lv_hero = libPEB1_gv_availableHeroTypes[6];
    libPEB1_gv_zergHeroes[2][2].lv_hero = libPEB1_gv_availableHeroTypes[3];
    libPEB1_gv_zergHeroes[2][3].lv_hero = libPEB1_gv_availableHeroTypes[4];
    libPEB1_gv_zergHeroes[2][4].lv_hero = libPEB1_gv_availableHeroTypes[5];
    lv_zergHeroIndex = 1;
    for ( ; ( (autoBADBC00C_ai >= 0 && lv_zergHeroIndex <= autoBADBC00C_ae) || (autoBADBC00C_ai < 0 && lv_zergHeroIndex >= autoBADBC00C_ae) ) ; lv_zergHeroIndex += autoBADBC00C_ai ) {
        libPVEB_gf_PBPrepareNPCHero(libPEB1_gv_zergHeroes[2][lv_zergHeroIndex].lv_hero, libPEB1_gf_PZEZergBossSkin(libPEB1_gv_zergHeroes[2][lv_zergHeroIndex].lv_hero));
    }
    libPEB1_gv_heroesPrepared[2] = true;
    libPEB1_gv_maxActiveZergHeroes[2] = 5;
    libPEB1_gv_zergHeroReviveCounter = 5;

    libPEB1_gv_zergHeroes[2][2].lv_active = true;
    libPEB1_gv_zergHeroes[2][3].lv_active = true;
    libPEB1_gv_zergHeroes[2][4].lv_active = true;
    libPVEB_gf_PBSpawnNPCHero(libPEB1_gv_zergHeroes[2][1].lv_hero, lv_fightLocation, libPEB1_gv_zergHeroLevel[2]);
    libPVEB_gf_PBSpawnNPCHero(libPEB1_gv_zergHeroes[2][2].lv_hero, lv_fightLocation, libPEB1_gv_zergHeroLevel[2]);
    libPVEB_gf_PBSpawnNPCHero(libPEB1_gv_zergHeroes[2][3].lv_hero, lv_fightLocation, libPEB1_gv_zergHeroLevel[2]);
    libPVEB_gf_PBSpawnNPCHero(libPEB1_gv_zergHeroes[2][4].lv_hero, lv_fightLocation, libPEB1_gv_zergHeroLevel[2]);
    libPVEB_gf_PBSpawnNPCHero(libPEB1_gv_zergHeroes[2][5].lv_hero, lv_fightLocation, libPEB1_gv_zergHeroLevel[2]);
    libPEB1_gf_PZETurnOnOffZergBossAI(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[2][1].lv_hero), true);
    libPEB1_gf_PZETurnOnOffZergBossAI(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[2][2].lv_hero), true);
    libPEB1_gf_PZETurnOnOffZergBossAI(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[2][3].lv_hero), true);
    libPEB1_gf_PZETurnOnOffZergBossAI(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[2][4].lv_hero), true);
    libPEB1_gf_PZETurnOnOffZergBossAI(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[2][5].lv_hero), true);
    TriggerEnable(libPEB1_gt_SpawnZagara, false);
    TriggerEnable(libPEB1_gt_SpawnAbathur, false);

    autoAAB50F35_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, true);
    lv_itPlayerIndex = -1;
    while (true) {
        	lv_itPlayerIndex = PlayerGroupNextPlayer(autoAAB50F35_g, lv_itPlayerIndex);
        	if (lv_itPlayerIndex<0) { break; }
        	auto27FF6D41_g = UnitGroup(null, lv_itPlayerIndex, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto27FF6D41_u = UnitGroupCount(auto27FF6D41_g, c_unitCountAll);
        for (;; auto27FF6D41_u -= 1) {
            auto27FF6D41_var = UnitGroupUnitFromEnd(auto27FF6D41_g, auto27FF6D41_u);
            if (auto27FF6D41_var == null) { break; }
            if ((UnitTypeTestAttribute(UnitGetType(auto27FF6D41_var), c_unitAttributeHeroic) == false)) {
                break;
            }

            UnitCreateEffectUnit(auto27FF6D41_var, "PVEGenericAbortMissile", auto27FF6D41_var);
            UnitSetPosition(auto27FF6D41_var, PointWithOffsetPolar(lv_fightLocation, 2.0, (UnitGetOwner(auto27FF6D41_var) * 72.0)), false);
            UnitIssueOrder(auto27FF6D41_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            if ((UnitTypeTestFlag(UnitGetType(auto27FF6D41_var), c_unitFlagTurnable) == true)) {
                UnitSetFacing(auto27FF6D41_var, 90.0, 0.0);
            }

            UnitSetPropertyFixed(auto27FF6D41_var, c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(auto27FF6D41_var, c_unitPropEnergyPercent, 100.0);
            UnitBehaviorRemovePlayer(auto27FF6D41_var, "RegenGlobePercentBuff", lv_itPlayerIndex, 1);
            CameraPan(lv_itPlayerIndex, lv_fightLocation, 0.0, -1, 10.0, false);
        }
    }
    auto37DA1B11_g = UnitGroup(null, libStEx_gv_pLAYER_12_CHAOS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto37DA1B11_u = UnitGroupCount(auto37DA1B11_g, c_unitCountAll);
    for (;; auto37DA1B11_u -= 1) {
        auto37DA1B11_var = UnitGroupUnitFromEnd(auto37DA1B11_g, auto37DA1B11_u);
        if (auto37DA1B11_var == null) { break; }
        UnitSetPosition(auto37DA1B11_var, lv_fightLocation, false);
        libPEB1_gf_PZETurnOnOffZergMinionAI(auto37DA1B11_var, true);
    }

    autoDED2316F_ae = libCore_gv_bALMaxPlayers;
    lv_itPlayerIndex = 1;
    for ( ; lv_itPlayerIndex <= autoDED2316F_ae ; lv_itPlayerIndex += 1 ) {
        PlayerModifyPropertyFixed(lv_itPlayerIndex, c_playerPropDamageDealtPercent, c_playerPropOperSetTo, 0.0);
        PlayerModifyPropertyFixed(lv_itPlayerIndex, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 0.0);
    }

    Wait(1.0, c_timeGame);
    auto1E8FC1AE_ae = libCore_gv_bALMaxPlayers;
    lv_itPlayerIndex = 1;
    for ( ; lv_itPlayerIndex <= auto1E8FC1AE_ae ; lv_itPlayerIndex += 1 ) {
        UnitDestroyAIThinkTree(libGame_gv_players[lv_itPlayerIndex].lv_heroUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGHoldoutPerformanceTest_Init () {
    libPEB1_gt_DEBUGHoldoutPerformanceTest = TriggerCreate("libPEB1_gt_DEBUGHoldoutPerformanceTest_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGHoldoutPerformanceTest, c_playerAny, "-perf holdout", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Boss Performance Test
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DEBUGBossPerformanceTest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayerIndex;

    // Automatic Variable Declarations
    playergroup auto2BE53B1A_g;
    int auto2BE53B1A_var;
    playergroup autoB06E74E3_g;
    playergroup auto56DB6D93_g;
    playergroup auto12FEA934_g;
    unitgroup auto7C258293_g;
    int auto7C258293_u;
    unit auto7C258293_var;
    playergroup autoEE476566_g;
    unitgroup autoB73480C9_g;
    int autoB73480C9_u;
    unit autoB73480C9_var;
    int auto71712F86_ae;
    int auto0C18424B_ae;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPBUI_gt_CurateHSUIForceSelection, true, false);
    while (!((TimerGetRemaining(libGame_gv_openTheGatesTimer) > 1.0))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_StopTimer(libGame_gv_openTheGatesTimer);
    libSprt_gf_DEBUGStartGame();
    Wait(0.5, c_timeGame);
    TriggerStop(libPEB1_gt_EscapefromBraxisStartingSequence);
    TriggerStop(libPEB1_gt_EscapefromBraxisStartingSequence);
    libPEB1_gf_Reinitializehero(2, libGame_ge_Faction_Order);
    libPEB1_gf_Reinitializehero(3, libGame_ge_Faction_Order);
    libPEB1_gf_Reinitializehero(4, libGame_ge_Faction_Order);
    libPEB1_gf_Reinitializehero(5, libGame_ge_Faction_Order);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 2);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 3);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 4);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 5);
    libNtve_gf_SetPlayerGroupAlliance(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    auto2BE53B1A_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
    auto2BE53B1A_var = -1;
    while (true) {
        	auto2BE53B1A_var = PlayerGroupNextPlayer(auto2BE53B1A_g, auto2BE53B1A_var);
        	if (auto2BE53B1A_var<0) { break; }
        	libNtve_gf_SetAlliance(auto2BE53B1A_var, libCore_gv_cOMPUTER_NoVision_TeamOrder, libNtve_ge_AllianceSetting_Ally);
        PlayerSetAlliance(libCore_gv_cOMPUTER_NoVision_TeamOrder, c_allianceIdVision, auto2BE53B1A_var, false);
        PlayerSetAlliance(libCore_gv_cOMPUTER_TeamChaos, c_allianceIdPower, auto2BE53B1A_var, true);
        libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_TeamOrder, auto2BE53B1A_var, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        PlayerSetColorIndex(auto2BE53B1A_var, libCore_gv_cOLOROrderPlayerColor, true);
        autoB06E74E3_g = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup;
        lv_itPlayerIndex = -1;
        while (true) {
            	lv_itPlayerIndex = PlayerGroupNextPlayer(autoB06E74E3_g, lv_itPlayerIndex);
            	if (lv_itPlayerIndex<0) { break; }
            	libNtve_gf_SetAlliance(auto2BE53B1A_var, lv_itPlayerIndex, libNtve_ge_AllianceSetting_Enemy);
        }
        PlayerSetAlliance(auto2BE53B1A_var, c_allianceIdVision, libCore_gv_oBSERVER_ObserverUIPlayer, true);
        if ((auto2BE53B1A_var != libCore_gv_cOMPUTER_TeamOrder)) {
            libNtve_gf_SetAlliance(auto2BE53B1A_var, libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Enemy);
            PlayerSetAlliance(libCore_gv_cOMPUTER_TeamOrder, c_allianceIdSeekHelp, auto2BE53B1A_var, false);
            PlayerSetAlliance(libCore_gv_cOMPUTER_TeamOrder, c_allianceIdPower, auto2BE53B1A_var, true);
        }

    }
    auto56DB6D93_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
    lv_itPlayerIndex = -1;
    while (true) {
        	lv_itPlayerIndex = PlayerGroupNextPlayer(auto56DB6D93_g, lv_itPlayerIndex);
        	if (lv_itPlayerIndex<0) { break; }
        	libGame_gv_players[lv_itPlayerIndex].lv_spawnPoint = PointFromName(("Start Location 00" + IntToString(lv_itPlayerIndex)));
    }
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Crusader"), 1, 0, libCore_gf_GetTotalXPForLevel(13), 1, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Azmodan"), 1, 0, libCore_gf_GetTotalXPForLevel(13), 2, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("WitchDoctor"), 1, 0, libCore_gf_GetTotalXPForLevel(13), 3, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Greymane"), 1, 0, libCore_gf_GetTotalXPForLevel(13), 4, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("KelThuzad"), 1, 0, libCore_gf_GetTotalXPForLevel(13), 5, 0);
    libStEx_gf_MoveUnit(libGame_gv_players[1].lv_heroUnit, PointFromName("Start Location 001"), false);
    libStEx_gf_MoveUnit(libGame_gv_players[2].lv_heroUnit, PointFromName("Start Location 002"), false);
    libStEx_gf_MoveUnit(libGame_gv_players[3].lv_heroUnit, PointFromName("Start Location 003"), false);
    libStEx_gf_MoveUnit(libGame_gv_players[4].lv_heroUnit, PointFromName("Start Location 004"), false);
    libStEx_gf_MoveUnit(libGame_gv_players[5].lv_heroUnit, PointFromName("Start Location 005"), false);

    TriggerEnable(libPEB1_gt_SpawnSlivan, false);
    libPEB1_gv_stage2CompleteTime = FixedToInt(libUIUI_gf_HeroesGameTime());
    libPEB1_gv_pZECurrentStageCurrent = libPEB1_ge_PZEStages_Stage3BossPhase1;
    libGame_gv_announcement_SystemEnabled = false;
    libPEB1_gv_currentStage = 3;
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 3))) {
        return true;
    }

    if ((libPEB1_gv_retrying == false)) {
        libPVEB_gf_PVECreateDirectiveMessage(StringExternal("Param/Value/lib_PEB1_10DE322D"), StringExternal("Param/Value/lib_PEB1_BEBFF8A5"), libPVEB_ge_PVEDirectiveStyle_ObjectiveDiscovered);
    }
    else {
        libPVEB_gf_PVECreateDirectiveMessage(StringExternal("Param/Value/lib_PEB1_FB8BF4D7"), StringExternal("Param/Value/lib_PEB1_BBEA0EF3"), libPVEB_ge_PVEDirectiveStyle_ObjectiveDiscovered);
    }
    TriggerExecute(libPEB1_gt_ObjectiveFirstCheckpointComplete, true, false);
    TriggerExecute(libPEB1_gt_ObjectiveSecondCheckpointComplete, true, false);
    libNtve_gf_CreatePingFacingAngleWithType(PlayerGroupAll(), "PingObjective", libPEB1_gv_shelter.lv_pingPoint, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0, -1, -1);
    libPEB1_gv_shelter.lv_ping = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_PEB1_EFFAEC64"));
    SoundPlayForPlayer(SoundLink("UI_PvEBrawl_ObjectivePing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libGame_gv_announcement_SystemEnabled = true;
    TriggerExecute(libPEB1_gt_ObjectiveShelterDisplayNotification, true, false);
    TriggerExecute(libPEB1_gt_CleanupStage1, true, false);
    TriggerExecute(libPEB1_gt_CleanupStage2, true, false);
    DialogControlSetPosition(libPEB1_gv_pZEMinimapPanel, PlayerGroupAll(), c_anchorBottomRight, 20, -20);
    DialogControlSetSize(libPEB1_gv_pZEMinimapPanel, PlayerGroupAll(), 334, 330);
    DialogControlSetSize(libPEB1_gv_pZEMinimap, PlayerGroupAll(), 330, 330);
    PointSet(PointFromName("Start Location 0012"), PointFromName("Start Location 12 - 3"));
    DialogControlSetAnimationState(libPEB1_gv_pZEMinimap, PlayerGroupAll(), "MaskState", "Part3");
    auto12FEA934_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayerIndex = -1;
    while (true) {
        	lv_itPlayerIndex = PlayerGroupNextPlayer(auto12FEA934_g, lv_itPlayerIndex);
        	if (lv_itPlayerIndex<0) { break; }
        	auto7C258293_g = UnitGroup(null, lv_itPlayerIndex, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7C258293_u = UnitGroupCount(auto7C258293_g, c_unitCountAll);
        for (;; auto7C258293_u -= 1) {
            auto7C258293_var = UnitGroupUnitFromEnd(auto7C258293_g, auto7C258293_u);
            if (auto7C258293_var == null) { break; }
            if ((UnitTypeTestAttribute(UnitGetType(auto7C258293_var), c_unitAttributeHeroic) == false)) {
                break;
            }

            UnitCreateEffectUnit(auto7C258293_var, "PVEGenericAbortMissile", auto7C258293_var);
            UnitSetPosition(auto7C258293_var, PointWithOffsetPolar(PointFromName("Slivan Spawn"), 5.0, (UnitGetOwner(auto7C258293_var) * 72.0)), false);
            UnitIssueOrder(auto7C258293_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            if ((UnitTypeTestFlag(UnitGetType(auto7C258293_var), c_unitFlagTurnable) == true)) {
                UnitSetFacing(auto7C258293_var, 90.0, 0.0);
            }

            UnitSetPropertyFixed(auto7C258293_var, c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(auto7C258293_var, c_unitPropEnergyPercent, 100.0);
            UnitBehaviorRemovePlayer(auto7C258293_var, "RegenGlobePercentBuff", lv_itPlayerIndex, 1);
        }
    }
    RegionPlayableMapSet(libPEB1_gv_playableSpace[3]);
    autoEE476566_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayerIndex = -1;
    while (true) {
        	lv_itPlayerIndex = PlayerGroupNextPlayer(autoEE476566_g, lv_itPlayerIndex);
        	if (lv_itPlayerIndex<0) { break; }
        	autoB73480C9_g = UnitGroup(null, lv_itPlayerIndex, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB73480C9_u = UnitGroupCount(autoB73480C9_g, c_unitCountAll);
        for (;; autoB73480C9_u -= 1) {
            autoB73480C9_var = UnitGroupUnitFromEnd(autoB73480C9_g, autoB73480C9_u);
            if (autoB73480C9_var == null) { break; }
            if ((lv_itPlayerIndex > 0) && (lv_itPlayerIndex < libCore_gv_bALMaxPlayers) && (UnitIsAlive(libGame_gv_players[lv_itPlayerIndex].lv_heroUnit) == false)) {
                libPVEB_gf_PvEResurrectRevivePlayerInstantly(lv_itPlayerIndex, libPEB1_gv_checkpoints[2].lv_playerSpawnPoints[libGame_gv_players[lv_itPlayerIndex].lv_rosterSlot]);
            }

            CameraApplyInfo(lv_itPlayerIndex, CameraInfoDefault(), 0.0, -1, 10.0, false);
            CameraPan(lv_itPlayerIndex, UnitGetPosition(libGame_gv_players[lv_itPlayerIndex].lv_heroUnit), 0.0, -1, 10.0, false);
            libGame_gf_HeroRefreshCooldowns(lv_itPlayerIndex, false);
        }
    }
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "BossMusicPart1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    libPVEB_gf_PBUpdateTeamLevel(1, 20);
    libPEB1_gv_pauseNydusSpawning = false;
    libPEB1_gv_pauseHeroRevival = false;
    libPEB1_gv_zergHeroSpawnSoundsEnabled = false;
    libPVEB_gf_PvEPickupStoreHeldPickups();
    libNtve_gf_StopTimer(libPEB1_gv_zergHeroEventWaitTimer);
    TriggerExecute(libPEB1_gt_PreSlivanFightDataUpdates, true, false);
    libNtve_gf_CreateUnitsAtPoint2(1, "SlivanBoss", 0, libStEx_gv_pLAYER_12_CHAOS, libPEB1_gv_slivanSpawnPoint, null);
    libPEB1_gv_slivan = UnitLastCreated();
    libPEB1_gf_DisplayBossPanel(libPEB1_gv_slivan);
    VisRevealerCreate(libCore_gv_cOMPUTER_TeamOrder, RegionFromName("Slivan Reveal"));
    libPEB1_gv_slivanRevealer = VisRevealerLastCreated();
    TriggerEnable(libPEB1_gt_SlivanDies, true);
    auto71712F86_ae = libCore_gv_bALMaxPlayers;
    lv_itPlayerIndex = 1;
    for ( ; lv_itPlayerIndex <= auto71712F86_ae ; lv_itPlayerIndex += 1 ) {
        PlayerModifyPropertyFixed(lv_itPlayerIndex, c_playerPropDamageDealtPercent, c_playerPropOperSetTo, 0.0);
        PlayerModifyPropertyFixed(lv_itPlayerIndex, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 0.0);
    }

    Wait(2.0, c_timeGame);
    auto0C18424B_ae = libCore_gv_bALMaxPlayers;
    lv_itPlayerIndex = 1;
    for ( ; lv_itPlayerIndex <= auto0C18424B_ae ; lv_itPlayerIndex += 1 ) {
        UnitDestroyAIThinkTree(libGame_gv_players[lv_itPlayerIndex].lv_heroUnit);
    }

    UnitDestroyAIThinkTree(libPEB1_gv_slivan);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DEBUGBossPerformanceTest_Init () {
    libPEB1_gt_DEBUGBossPerformanceTest = TriggerCreate("libPEB1_gt_DEBUGBossPerformanceTest_Func");
    TriggerAddEventChatMessage(libPEB1_gt_DEBUGBossPerformanceTest, c_playerAny, "-perf boss", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape from Braxis Starting Sequence
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_EscapefromBraxisStartingSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libPEB1_gv_skipCheatReady = true;
    TriggerExecute(libPEB1_gt_InitHeroesPostSpawn, true, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MX_BraxisHoldout_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    Wait(2.5, c_timeReal);
    libGame_gf_TurnOnOffInitialHeroSpawnFX(false);
    TriggerExecute(libPEB1_gt_IntroTransmissionQ, true, true);
    libPVEB_gf_PVECreateDirectiveMessage(StringExternal("Param/Value/lib_PEB1_550F8640"), StringExternal("Param/Value/lib_PEB1_A0940B5C"), libPVEB_ge_PVEDirectiveStyle_ObjectiveDiscovered);
    SoundPlayForPlayer(SoundLink("EscapeFromBraxis_Intro_SFX_Part01", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeReal);
    VisRevealerEnable(libPEB1_gv_initialRevealer, false);
    TriggerExecute(libPEB1_gt_ObjectiveFirstCheckpointDisplayNotification, true, false);
    libNtve_gf_CreatePingFacingAngleWithType(PlayerGroupAll(), "PingObjective", libPEB1_gv_checkpoints[1].lv_pingPoint, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0, -1, -1);
    libPEB1_gv_checkpoints[1].lv_ping = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_PEB1_ED1C3448"));
    SoundPlayForPlayer(SoundLink("UI_PvEBrawl_ObjectivePing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libPEB1_gv_objectivesCreated1 = true;
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 12.125, false);
    SoundPlayForPlayer(SoundLink("EscapeFromBraxis_Intro_SFX_Part02", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(libPEB1_gt_ZergArrivingCountdownQ, true, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 5.125, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown5, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown4, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown3, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown2, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown1, "", null, null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    TriggerExecute(libPEB1_gt_Stage1Music, true, false);
    TriggerExecute(libPEB1_gt_HeroAIStart, true, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 0.0, false);
    libPESC_gf_SendEventHardModeTimedOut();
    libGame_gv_announcement_SystemEnabled = false;
    TriggerExecute(libPEB1_gt_BattleBeginsQ, true, true);
    libGame_gv_announcement_SystemEnabled = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_EscapefromBraxisStartingSequence_Init () {
    libPEB1_gt_EscapefromBraxisStartingSequence = TriggerCreate("libPEB1_gt_EscapefromBraxisStartingSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stage 1 Music
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Stage1Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(6.0, c_timeGame);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Stage1MusicPart1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Stage1Music_Init () {
    libPEB1_gt_Stage1Music = TriggerCreate("libPEB1_gt_Stage1Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Players
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_InitPlayers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Automatic Variable Declarations
    playergroup autoD32D9D90_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoD32D9D90_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_playerIndex = -1;
    while (true) {
        	lv_playerIndex = PlayerGroupNextPlayer(autoD32D9D90_g, lv_playerIndex);
        	if (lv_playerIndex<0) { break; }
        	TechTreeUpgradeAddLevel(lv_playerIndex, "DisplayLockedMapMechanicAbility", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_InitPlayers_Init () {
    libPEB1_gt_InitPlayers = TriggerCreate("libPEB1_gt_InitPlayers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Heroes Post Spawn
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_InitHeroesPostSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9680C34E_g;
    int auto9680C34E_var;
    string auto066CF9B2_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto9680C34E_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    auto9680C34E_var = -1;
    while (true) {
        	auto9680C34E_var = PlayerGroupNextPlayer(auto9680C34E_g, auto9680C34E_var);
        	if (auto9680C34E_var<0) { break; }
        	auto066CF9B2_val = libGame_gv_players[auto9680C34E_var].lv_heroData.lv_unitType;
        if (auto066CF9B2_val == "HeroRagnaros") {
            UnitAbilityEnable(libGame_gv_players[auto9680C34E_var].lv_heroUnit, "RagnarosMoltenCore", false);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_InitHeroesPostSpawn_Init () {
    libPEB1_gt_InitHeroesPostSpawn = TriggerCreate("libPEB1_gt_InitHeroesPostSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Hero Dies
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PlayerHeroDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libGame_gf_TeamNumberOfPlayer(libGame_gf_HeroKilledPlayer()) == libGame_gv_teamOrderIndex_C))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libPEB1_gv_zergHeroGraceCounter < libPEB1_gv_zergHeroGracePeriod)) {
        libPEB1_gv_zergHeroGraceCounter += libPEB1_gv_zergHeroGracePeriod;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PlayerHeroDies_Init () {
    libPEB1_gt_PlayerHeroDies = TriggerCreate("libPEB1_gt_PlayerHeroDies_Func");
    libGame_gf_HeroKilled(libPEB1_gt_PlayerHeroDies);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Abathur
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_SpawnAbathur_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_regionIndex;
    int lv_pointIndex;

    // Automatic Variable Declarations
    const int auto46E29499_ae = 31;
    const int auto46E29499_ai = 1;
    const int autoE5625245_ae = 9;
    const int autoE5625245_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(libPEB1_gt_AbathurTalents, true, false);
    lv_regionIndex = 1;
    for ( ; ( (auto46E29499_ai >= 0 && lv_regionIndex <= auto46E29499_ae) || (auto46E29499_ai < 0 && lv_regionIndex >= auto46E29499_ae) ) ; lv_regionIndex += auto46E29499_ai ) {
        if ((RegionFromName(("Toxic Nest Region " + IntToString(lv_regionIndex))) == null)) {
            break;
        }

        VisRevealArea(libStEx_gv_pLAYER_12_CHAOS, RegionFromName(("Toxic Nest Region " + IntToString(lv_regionIndex))), 0.0, false);
    }
    lv_pointIndex = 1;
    for ( ; ( (autoE5625245_ai >= 0 && lv_pointIndex <= autoE5625245_ae) || (autoE5625245_ai < 0 && lv_pointIndex >= autoE5625245_ae) ) ; lv_pointIndex += autoE5625245_ai ) {
        if ((PointFromName(("Deep Tunnel Point " + IntToString(lv_pointIndex))) == null)) {
            break;
        }

        VisRevealArea(libStEx_gv_pLAYER_12_CHAOS, RegionCircle(PointFromName(("Deep Tunnel Point " + IntToString(lv_pointIndex))), 2.0), 0.0, false);
    }
    if ((libPEB1_gv_abathurInitialSpawnRight == true)) {
        libPVEB_gf_PBSpawnNPCHero(libPEB1_gv_zergHeroes[2][1].lv_hero, PointFromName("Deep Tunnel Point 1"), libPEB1_gv_zergHeroLevel[2]);
    }
    else {
        libPVEB_gf_PBSpawnNPCHero(libPEB1_gv_zergHeroes[2][1].lv_hero, PointFromName("Deep Tunnel Point 2"), libPEB1_gv_zergHeroLevel[2]);
    }
    libPEB1_gv_zergHeroes[2][1].lv_active = true;
    UnitBehaviorRemove(libPVEB_gf_PBNPCHeroUnit("Abathur"), "LocustSpawnTimer", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_SpawnAbathur_Init () {
    libPEB1_gt_SpawnAbathur = TriggerCreate("libPEB1_gt_SpawnAbathur_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Monstrosity Stacks
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_MonstrosityStacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7FC6FACA_g;
    int auto7FC6FACA_u;
    unit auto7FC6FACA_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    auto7FC6FACA_g = UnitGroup("AbathurEvolvedMonstrosity", c_playerAny, libPEB1_gv_playableSpace[2], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7FC6FACA_u = UnitGroupCount(auto7FC6FACA_g, c_unitCountAll);
    for (;; auto7FC6FACA_u -= 1) {
        auto7FC6FACA_var = UnitGroupUnitFromEnd(auto7FC6FACA_g, auto7FC6FACA_u);
        if (auto7FC6FACA_var == null) { break; }
        if ((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, UnitGetOwner(auto7FC6FACA_var)) == true)) {
            UnitBehaviorAdd(auto7FC6FACA_var, "AbathurEvolveMonstrosityDamageStack", auto7FC6FACA_var, 40);
            UnitBehaviorAdd(auto7FC6FACA_var, "AbathurEvolveMonstrosityHealthStack", auto7FC6FACA_var, 40);
            UnitSetPropertyFixed(auto7FC6FACA_var, c_unitPropLifePercent, 100.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_MonstrosityStacks_Init () {
    libPEB1_gt_MonstrosityStacks = TriggerCreate("libPEB1_gt_MonstrosityStacks_Func");
    TriggerAddEventUnitAbility(libPEB1_gt_MonstrosityStacks, null, AbilityCommand("AbathurEvolveMonstrosity", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toxic Nest Damage Behavior
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ToxicNestDamageBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoF9C2C14F_val;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "AbathurToxicNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF9C2C14F_val = libPVEB_gf_PBGameDifficulty();
    if (autoF9C2C14F_val == libPVEB_ge_PVEGameDifficulty_Hard) {
        UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "ZergHeroDamageModifierHard", UnitGetOwner(EventUnitCreatedUnit()), 1);
    }
    else if (autoF9C2C14F_val == libPVEB_ge_PVEGameDifficulty_Normal) {
        UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "ZergHeroDamageModifierNormal", UnitGetOwner(EventUnitCreatedUnit()), 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ToxicNestDamageBehavior_Init () {
    libPEB1_gt_ToxicNestDamageBehavior = TriggerCreate("libPEB1_gt_ToxicNestDamageBehavior_Func");
    TriggerAddEventUnitCreated(libPEB1_gt_ToxicNestDamageBehavior, null, "AbathurToxicNest", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Murky Egg Timer Expires
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PvEMurkyEggTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(libPEB1_gv_pvEMurkyEggUnit) == true)) {
        libGame_gf_HeroDeathRespawnHeroforPlayer(false, UnitGetOwner(libPEB1_gv_pvEMurkyEggUnit), UnitGetPosition(libPEB1_gv_pvEMurkyEggUnit), 100);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PvEMurkyEggTimerExpires_Init () {
    libPEB1_gt_PvEMurkyEggTimerExpires = TriggerCreate("libPEB1_gt_PvEMurkyEggTimerExpires_Func");
    TriggerAddEventTimer(libPEB1_gt_PvEMurkyEggTimerExpires, libPEB1_gv_pvEMurkyDeathTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Murky Egg Dies
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PvEMurkyEggDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itHero;
    int lv_murkyPlayer;

    // Automatic Variable Declarations
    const int autoEACFB238_ae = 5;
    const int autoEACFB238_ai = 1;

    // Variable Initialization
    lv_murkyPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itHero = 1;
    for ( ; ( (autoEACFB238_ai >= 0 && lv_itHero <= autoEACFB238_ae) || (autoEACFB238_ai < 0 && lv_itHero >= autoEACFB238_ae) ) ; lv_itHero += autoEACFB238_ai ) {
        if ((libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_itHero].lv_hero == "Murky")) {
            if ((TimerGetRemaining(libPEB1_gv_pvEMurkyDeathTimer) > 0.0)) {
                libNtve_gf_StopTimer(libPEB1_gv_pvEMurkyDeathTimer);
                libPEB1_gf_ZergHeroSlainQ("HeroMurky");
                libPVEB_gf_PvEPickupSpawnRandomInRotation("PVEMiniNukePickup", UnitGetPosition(EventUnit()));
                TimerStart(libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_itHero].lv_respawnTimer, libPEB1_gv_zergHeroRespawnTimer, false, c_timeGame);
                if ((UnitGetOwner(EventUnit()) != libNtve_gf_KillingPlayer())) {
                    TextExpressionSetToken("Param/Expression/lib_PEB1_7E30233A", "A", PlayerName(libNtve_gf_KillingPlayer()));
                    TextExpressionSetToken("Param/Expression/lib_PEB1_7E30233A", "B", UnitGetName(libNtve_gf_KillingUnit()));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_PEB1_7E30233A"));
                }
                else {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_PEB1_6378CE6E"));
                }
            }
            else {
                UnitBehaviorAdd(libGame_gv_players[lv_murkyPlayer].lv_heroUnit, "MurkyDeadEggReveal", libNtve_gf_KillingUnit(), 1);
                if ((UnitGetOwner(EventUnit()) != libNtve_gf_KillingPlayer())) {
                    TextExpressionSetToken("Param/Expression/lib_PEB1_A5263822", "A", PlayerName(libNtve_gf_KillingPlayer()));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_PEB1_A5263822"));
                }
                else {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_PEB1_AE82BA0C"));
                }
            }
            libPEB1_gv_pvEMurkyEggUnit = null;
            break;
        }

    }
    libGame_gv_heroDeathMurkyRespawnEggs[lv_murkyPlayer] = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PvEMurkyEggDies_Init () {
    libPEB1_gt_PvEMurkyEggDies = TriggerCreate("libPEB1_gt_PvEMurkyEggDies_Func");
    TriggerAddEventUnitDied(libPEB1_gt_PvEMurkyEggDies, UnitRefFromVariable("libPEB1_gv_pvEMurkyEggUnit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: PvE Murky Create Egg On Spawn
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PvEMurkyCreateEggOnSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSGameMode == libCore_ge_GameModes_ModeC))) {
            return false;
        }

        if (!((UnitGetType(libGame_gv_players[libGame_gf_HeroSpawnPlayer()].lv_heroUnit) == "HeroMurky"))) {
            return false;
        }

        if (!((libGame_gv_heroDeathMurkyRespawnEggs[libGame_gf_HeroSpawnPlayer()] == null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gf_HeroMurkyCreateEggAtBaseforPlayer(libGame_gf_HeroSpawnPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PvEMurkyCreateEggOnSpawn_Init () {
    libPEB1_gt_PvEMurkyCreateEggOnSpawn = TriggerCreate("libPEB1_gt_PvEMurkyCreateEggOnSpawn_Func");
    libGame_gf_HeroSpawn(libPEB1_gt_PvEMurkyCreateEggOnSpawn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Zagara
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_SpawnZagara_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pointIndex;

    // Automatic Variable Declarations
    const int auto7F613B85_ae = 6;
    const int auto7F613B85_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(libPEB1_gt_ZagaraTalents, true, false);
    lv_pointIndex = 1;
    for ( ; ( (auto7F613B85_ai >= 0 && lv_pointIndex <= auto7F613B85_ae) || (auto7F613B85_ai < 0 && lv_pointIndex >= auto7F613B85_ae) ) ; lv_pointIndex += auto7F613B85_ai ) {
        libPEB1_gv_zagaraPoints[lv_pointIndex] = PointFromName(("Zagara " + IntToString(lv_pointIndex)));
    }
    libPVEB_gf_PBSpawnNPCHero(libPEB1_gv_zergHeroes[2][5].lv_hero, libPEB1_gv_zagaraPoints[1], libPEB1_gv_zergHeroLevel[2]);
    libPEB1_gv_zergHeroes[2][5].lv_active = true;
    TriggerExecute(libPEB1_gt_ZagaraAI, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_SpawnZagara_Init () {
    libPEB1_gt_SpawnZagara = TriggerCreate("libPEB1_gt_SpawnZagara_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara AI
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ZagaraAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_movementCooldown;
    point lv_currentMovePoint;
    bool lv_destinationReached;
    unit lv_zagara;
    unitgroup lv_nearbyEnemies;
    timer lv_devouringMawCooldown;
    bool lv_abilityUsed;
    bool lv_devouringMawReady;
    bool lv_soundPlayed;

    // Automatic Variable Declarations
    int auto4083C7D8_n;
    int auto4083C7D8_i;
    unitgroup auto7650437C_g;
    int auto7650437C_u;
    unit auto7650437C_var;

    // Variable Initialization
    lv_movementCooldown = TimerCreate();
    lv_nearbyEnemies = UnitGroupEmpty();
    lv_devouringMawCooldown = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_zagara = libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[2][5].lv_hero);
    while (true) {
        Wait(1.0, c_timeGame);
        if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 2))) {
            return true;
        }

        if ((UnitIsAlive(lv_zagara) == false)) {
            return true;
        }

        if ((TimerGetRemaining(lv_movementCooldown) < 0.1)) {
            TimerStart(lv_movementCooldown, 8.0, false, c_timeGame);
            lv_currentMovePoint = libPEB1_gf_GetZagaraMovePoint();
            lv_destinationReached = false;
        }

        if ((lv_destinationReached == false)) {
            if ((libNtve_gf_UnitInRegion(lv_zagara, RegionCircle(lv_currentMovePoint, 3.0)) == true)) {
                lv_destinationReached = true;
                if ((UnitGroupCount(UnitGroup("ZergCocoon", libStEx_gv_pLAYER_12_CHAOS, RegionCircle(lv_currentMovePoint, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
                    auto4083C7D8_n = libPVEB_gf_PVEDifficultyValueInt(9, 12);
                    for (auto4083C7D8_i = 1; auto4083C7D8_i <= auto4083C7D8_n; auto4083C7D8_i += 1) {
                        UnitCreate(1, "ZergCocoon", 0, libStEx_gv_pLAYER_12_CHAOS, RegionRandomPoint(RegionCircle(lv_currentMovePoint, 3.0)), libNtve_gf_RandomAngle(), null);
                    }
                    libPEB1_gf_ManageCocoons(2, RegionCircle(lv_currentMovePoint, 4.0));
                }

            }
            else {
                UnitIssueOrder(lv_zagara, OrderTargetingPoint(AbilityCommand("move", 0), lv_currentMovePoint), c_orderQueueReplace);
            }
        }
        else {
            lv_nearbyEnemies = UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionCircle(lv_currentMovePoint, 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
            if ((UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0)) {
                UnitIssueOrder(lv_zagara, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_nearbyEnemies, lv_currentMovePoint))), c_orderQueueReplace);
                if ((lv_soundPlayed == false)) {
                    lv_soundPlayed = true;
                    libPEB1_gf_PlayZergHeroSpawnSound(lv_zagara);
                    UnitGroupAdd(libPEB1_gv_activeZergHeroes, lv_zagara);
                }

            }
            else {
                UnitIssueOrder(lv_zagara, OrderTargetingPoint(AbilityCommand("attack", 0), lv_currentMovePoint), c_orderQueueReplace);
            }
        }
        lv_abilityUsed = false;
        if ((lv_devouringMawReady == true)) {
            if ((TimerGetRemaining(lv_devouringMawCooldown) < 0.1)) {
                lv_nearbyEnemies = UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_zagara), 8.0), libPVEB_gv_filtersPvEEventHeroic, 0);
                auto7650437C_g = lv_nearbyEnemies;
                auto7650437C_u = UnitGroupCount(auto7650437C_g, c_unitCountAll);
                for (;; auto7650437C_u -= 1) {
                    auto7650437C_var = UnitGroupUnitFromEnd(auto7650437C_g, auto7650437C_u);
                    if (auto7650437C_var == null) { break; }
                    if ((UnitGroupCount(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto7650437C_var), 4.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 2)) {
                        UnitIssueOrder(lv_zagara, OrderTargetingPoint(AbilityCommand("ZagaraDevouringMaw", 0), UnitGetPosition(auto7650437C_var)), c_orderQueueReplace);
                        TimerStart(lv_devouringMawCooldown, 101.0, false, c_timeGame);
                        lv_abilityUsed = true;
                        break;
                    }

                }
            }

        }
        else {
            lv_nearbyEnemies = UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_zagara), 12.0), libPVEB_gv_filtersPvEEventHeroic, 1);
            if ((UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0)) {
                lv_devouringMawReady = true;
                TimerStart(lv_devouringMawCooldown, 2.0, false, c_timeGame);
            }

        }
        if ((lv_abilityUsed == false)) {
            lv_nearbyEnemies = UnitGroupAlliance(libStEx_gv_pLAYER_12_CHAOS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_zagara), 7.0), libPVEB_gv_filtersPvEEventHeroic, 0);
            if ((UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0)) {
                UnitIssueOrder(lv_zagara, OrderTargetingUnit(AbilityCommand("ZagaraSummonHydralisk", 0), UnitGroupClosestToPoint(lv_nearbyEnemies, UnitGetPosition(lv_zagara))), c_orderQueueReplace);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ZagaraAI_Init () {
    libPEB1_gt_ZagaraAI = TriggerCreate("libPEB1_gt_ZagaraAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara Hunter Killer Transfusion
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ZagaraHunterKillerTransfusion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zagaraPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_zagaraPlayer = UnitGetOwner(EventUnitTarget());

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, lv_zagaraPlayer) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), libCore_gv_filtersHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnitTarget(), "ZagaraHunterKillerHydraliskTransfusionCreateHealer", libGame_gv_players[lv_zagaraPlayer].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ZagaraHunterKillerTransfusion_Init () {
    libPEB1_gt_ZagaraHunterKillerTransfusion = TriggerCreate("libPEB1_gt_ZagaraHunterKillerTransfusion_Func");
    TriggerAddEventUnitAttacked2(libPEB1_gt_ZagaraHunterKillerTransfusion, null, "ZagaraHydraliskMelee");
    TriggerAddEventUnitAttacked2(libPEB1_gt_ZagaraHunterKillerTransfusion, null, "ZagaraHydraliskRanged");
    TriggerAddEventUnitAttacked2(libPEB1_gt_ZagaraHunterKillerTransfusion, null, "ZagaraMutaliskWeapon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Abathur Talents
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_AbathurTalents_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_abathurPlayer;
    int lv_regionIndex;
    int lv_pointIndex;

    // Automatic Variable Declarations
    const int autoE01A4D96_n = 4;
    int autoE01A4D96_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_abathurPlayer = libPVEB_gf_PBNPCHeroPlayerFromUnitType(libPVEB_gf_PBNPCHeroUnitType("Abathur"));
    CatalogFieldValueSet(c_gameCatalogEffect, "AbathurSymbioteSpikeBurstDamageSearch", "AreaArray[" + IntToString(0) + "].Radius", lv_abathurPlayer, "5");
    CatalogFieldValueSet(c_gameCatalogAbil, "AbathurSymbioteSpikeBurst", "Cost.Cooldown.TimeUse", lv_abathurPlayer, "5");
    CatalogFieldValueSet(c_gameCatalogActor, "AbathurSymbioteSpikeBlastCast", "Scale", lv_abathurPlayer, "1.25");
    CatalogFieldValueSet(c_gameCatalogBehavior, "LocustTimedLife", "Duration", lv_abathurPlayer, "35");
    CatalogFieldValueSet(c_gameCatalogUnit, "AbathurLocustNormal", "LifeMax", lv_abathurPlayer, "432");
    CatalogFieldValueSet(c_gameCatalogUnit, "AbathurLocustNormal", "LifeStart", lv_abathurPlayer, "432");
    CatalogFieldValueSet(c_gameCatalogEffect, "RegenerativeMicrobesApplyBehavior", "Chance", lv_abathurPlayer, "1");
    if ((libPVEB_gf_PVEDifficultyValueInt(0, 1) == 1)) {
        CatalogFieldValueSet(c_gameCatalogEffect, "AbathurToxicNestApplyEnvenomedNestDamage", "Chance", lv_abathurPlayer, "1");
    }

    if ((libPVEB_gf_PVEDifficultyValueInt(0, 1) == 1)) {
        CatalogFieldValueSet(c_gameCatalogAbil, "AbathurToxicNest", "Cost.Charge.TimeUse", lv_abathurPlayer, "8");
    }

    if ((libPVEB_gf_PVEDifficultyValueInt(0, 1) == 1)) {
        CatalogFieldValueSet(c_gameCatalogEffect, "ToxicNestApplySlowBehavior", "Chance", lv_abathurPlayer, "1");
    }

    CatalogFieldValueSet(c_gameCatalogEffect, "EnvenomedSpikesApplySlowBehavior", "Chance", lv_abathurPlayer, "1");
    CatalogFieldValueSet(c_gameCatalogAbil, "AbathurDeepTunnel", "Cost.Cooldown.TimeUse", lv_abathurPlayer, "4");
    for (autoE01A4D96_i = 1; autoE01A4D96_i <= autoE01A4D96_n; autoE01A4D96_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AbathurToxicNest", 0, lv_abathurPlayer, RegionRandomPoint(RegionFromName("Toxic Nest Region 3")), null);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AbathurToxicNest", 0, lv_abathurPlayer, RegionRandomPoint(RegionFromName("Toxic Nest Region 4")), null);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_AbathurTalents_Init () {
    libPEB1_gt_AbathurTalents = TriggerCreate("libPEB1_gt_AbathurTalents_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zagara Talents
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ZagaraTalents_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zagaraPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_zagaraPlayer = libPVEB_gf_PBNPCHeroPlayerFromUnitType(libPVEB_gf_PBNPCHeroUnitType("Zagara"));
    UnitBehaviorAdd(libPVEB_gf_PBNPCHeroUnit("Zagara"), "ZagaraMedusaBlades", libPVEB_gf_PBNPCHeroUnit("Zagara"), 1);
    UnitBehaviorAdd(libPVEB_gf_PBNPCHeroUnit("Zagara"), "ZagaraProtectiveCoatingCarry", libPVEB_gf_PBNPCHeroUnit("Zagara"), 1);
    CatalogFieldValueSet(c_gameCatalogEffect, "ZagaraHunterKillerCorrosiveSalivaDamage", "Chance", lv_zagaraPlayer, "1");
    CatalogFieldValueSet(c_gameCatalogAbil, "ZagaraSummonHydralisk", "Cost.Cooldown.TimeUse", lv_zagaraPlayer, "8");
    if ((libPVEB_gf_PVEDifficultyValueInt(0, 1) == 1)) {
        UnitBehaviorAdd(libPVEB_gf_PBNPCHeroUnit("Zagara"), "ZagaraInfest", libPVEB_gf_PBNPCHeroUnit("Zagara"), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ZagaraTalents_Init () {
    libPEB1_gt_ZagaraTalents = TriggerCreate("libPEB1_gt_ZagaraTalents_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Zerg Heroes
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_InitZergHeroes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string[11] lv_unusedHeroesList;
    int lv_numberOfUnusedTypes;
    int lv_availableIndex;
    int lv_unusedIndex;
    int lv_zergHeroIndex;
    int lv_randomHeroIndex;
    int lv_enemyPlayerIndex;
    const fixed lv_xOffset_C = 0.0;
    const fixed lv_yOffset_C = 60.0;

    // Automatic Variable Declarations
    playergroup auto352685C1_g;
    int auto611053F2_ae;
    const int auto611053F2_ai = 1;
    const int autoA3AEA8C5_ae = 5;
    const int autoA3AEA8C5_ai = 1;
    int auto35E26566_ae;
    const int auto35E26566_ai = 1;
    int autoA5994F4E_ae;
    const int autoA5994F4E_ai = 1;
    const int autoF1120A30_ae = 4;
    const int autoF1120A30_ai = 1;
    int auto52588043_ae;
    const int auto52588043_ai = 1;
    int auto8248C421_ae;
    const int auto8248C421_ai = 1;
    const int auto57909847_ae = 5;
    const int auto57909847_ai = 1;
    int autoA327CEE1_ae;
    const int autoA327CEE1_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libPVEB_gf_PBUpdateTeamLevel(2, libPEB1_gv_zergHeroLevel[1]);
    libPEB1_gv_availableHeroTypes[1] = "Dehaka";
    libPEB1_gv_availableHeroTypes[2] = "Butcher";
    libPEB1_gv_availableHeroTypes[3] = "Kerrigan";
    libPEB1_gv_availableHeroTypes[4] = "Anubarak";
    libPEB1_gv_availableHeroTypes[5] = "Tychus";
    libPEB1_gv_availableHeroTypes[6] = "Abathur";
    libPEB1_gv_availableHeroTypes[7] = "Murky";
    libPEB1_gv_availableHeroTypes[8] = "Diablo";
    libPEB1_gv_availableHeroTypes[9] = "Stitches";
    libPEB1_gv_availableHeroTypes[10] = "Stukov";
    libPEB1_gv_availableHeroTypesCount = 10;
    auto352685C1_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_enemyPlayerIndex = -1;
    while (true) {
        	lv_enemyPlayerIndex = PlayerGroupNextPlayer(auto352685C1_g, lv_enemyPlayerIndex);
        	if (lv_enemyPlayerIndex<0) { break; }
        	CatalogFieldValueSet(c_gameCatalogActor, "HeroAbathur", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "StarcraftPvEUI/PVEBrawlEnemyHeroUnitStatusFrameTemplate");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroAbathur", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        CatalogFieldValueSet(c_gameCatalogActor, "HeroAnubarak", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "StarcraftPvEUI/PVEBrawlEnemyHeroUnitStatusFrameTemplate");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroAnubarak", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        CatalogFieldValueSet(c_gameCatalogActor, "HeroButcher", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "StarcraftPvEUI/PVEBrawlEnemyHeroUnitStatusFrameTemplate");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroButcher", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        CatalogFieldValueSet(c_gameCatalogActor, "HeroDehaka", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "StarcraftPvEUI/PVEBrawlEnemyHeroUnitStatusFrameTemplate");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroDehaka", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        CatalogFieldValueSet(c_gameCatalogActor, "HeroDiablo", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "StarcraftPvEUI/PVEBrawlEnemyHeroUnitStatusFrameTemplate");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroDiablo", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        CatalogFieldValueSet(c_gameCatalogActor, "HeroKerrigan", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "StarcraftPvEUI/PVEBrawlEnemyHeroUnitStatusFrameTemplate");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroKerrigan", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        CatalogFieldValueSet(c_gameCatalogActor, "HeroMurky", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "StarcraftPvEUI/PVEBrawlEnemyHeroUnitStatusFrameTemplate");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroMurky", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        CatalogFieldValueSet(c_gameCatalogActor, "HeroStitches", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "StarcraftPvEUI/PVEBrawlEnemyHeroUnitStatusFrameTemplate");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroStitches", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        CatalogFieldValueSet(c_gameCatalogActor, "HeroTychus", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "StarcraftPvEUI/PVEBrawlEnemyHeroUnitStatusFrameTemplate");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroTychus", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        CatalogFieldValueSet(c_gameCatalogActor, "HeroZagara", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "StarcraftPvEUI/PVEBrawlEnemyHeroUnitStatusFrameTemplate");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroZagara", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        CatalogFieldValueSet(c_gameCatalogActor, "HeroStukov", "CustomUnitStatusFrame", lv_enemyPlayerIndex, "StarcraftPvEUI/PVEBrawlEnemyHeroUnitStatusFrameTemplate");
        CatalogFieldValueSet(c_gameCatalogActor, "HeroStukov", "CustomUnitStatusOffset", lv_enemyPlayerIndex, (FixedToString(lv_xOffset_C, 0) + "," + FixedToString(lv_yOffset_C, 0)));
        libAIAI_gf_HeroAIEnableTalentPicking(lv_enemyPlayerIndex, false);
    }
    libPEB1_gv_zergHeroes[1][1].lv_hero = "Butcher";
    lv_unusedIndex = 0;
    auto611053F2_ae = libPEB1_gv_availableHeroTypesCount;
    lv_availableIndex = 1;
    for ( ; ( (auto611053F2_ai >= 0 && lv_availableIndex <= auto611053F2_ae) || (auto611053F2_ai < 0 && lv_availableIndex >= auto611053F2_ae) ) ; lv_availableIndex += auto611053F2_ai ) {
        if ((libPEB1_gv_availableHeroTypes[lv_availableIndex] != libPEB1_gv_zergHeroes[1][1].lv_hero) && (libPEB1_gv_availableHeroTypes[lv_availableIndex] != "Abathur") && (libPEB1_gv_availableHeroTypes[lv_availableIndex] != "Murky")) {
            lv_unusedIndex += 1;
            lv_unusedHeroesList[lv_unusedIndex] = libPEB1_gv_availableHeroTypes[lv_availableIndex];
        }

    }
    lv_numberOfUnusedTypes = lv_unusedIndex;
    lv_zergHeroIndex = 2;
    for ( ; ( (autoA3AEA8C5_ai >= 0 && lv_zergHeroIndex <= autoA3AEA8C5_ae) || (autoA3AEA8C5_ai < 0 && lv_zergHeroIndex >= autoA3AEA8C5_ae) ) ; lv_zergHeroIndex += autoA3AEA8C5_ai ) {
        lv_randomHeroIndex = RandomInt(1, lv_numberOfUnusedTypes);
        libPEB1_gv_zergHeroes[1][lv_zergHeroIndex].lv_hero = lv_unusedHeroesList[lv_randomHeroIndex];
        auto35E26566_ae = (lv_numberOfUnusedTypes - 1);
        lv_unusedIndex = lv_randomHeroIndex;
        for ( ; ( (auto35E26566_ai >= 0 && lv_unusedIndex <= auto35E26566_ae) || (auto35E26566_ai < 0 && lv_unusedIndex >= auto35E26566_ae) ) ; lv_unusedIndex += auto35E26566_ai ) {
            lv_unusedHeroesList[lv_unusedIndex] = lv_unusedHeroesList[(lv_unusedIndex + 1)];
        }
        lv_numberOfUnusedTypes -= 1;
    }
    libPEB1_gv_zergHeroes[2][1].lv_hero = "Abathur";
    libPEB1_gv_zergHeroes[2][5].lv_hero = "Zagara";
    if ((libPEB1_gv_heroesPrepared[2] == false)) {
        lv_unusedIndex = 0;
        autoA5994F4E_ae = libPEB1_gv_availableHeroTypesCount;
        lv_availableIndex = 1;
        for ( ; ( (autoA5994F4E_ai >= 0 && lv_availableIndex <= autoA5994F4E_ae) || (autoA5994F4E_ai < 0 && lv_availableIndex >= autoA5994F4E_ae) ) ; lv_availableIndex += autoA5994F4E_ai ) {
            if ((libPEB1_gv_availableHeroTypes[lv_availableIndex] != libPEB1_gv_zergHeroes[2][1].lv_hero)) {
                lv_unusedIndex += 1;
                lv_unusedHeroesList[lv_unusedIndex] = libPEB1_gv_availableHeroTypes[lv_availableIndex];
            }

        }
        lv_numberOfUnusedTypes = lv_unusedIndex;
        lv_zergHeroIndex = 2;
        for ( ; ( (autoF1120A30_ai >= 0 && lv_zergHeroIndex <= autoF1120A30_ae) || (autoF1120A30_ai < 0 && lv_zergHeroIndex >= autoF1120A30_ae) ) ; lv_zergHeroIndex += autoF1120A30_ai ) {
            lv_randomHeroIndex = RandomInt(1, lv_numberOfUnusedTypes);
            libPEB1_gv_zergHeroes[2][lv_zergHeroIndex].lv_hero = lv_unusedHeroesList[lv_randomHeroIndex];
            auto52588043_ae = (lv_numberOfUnusedTypes - 1);
            lv_unusedIndex = lv_randomHeroIndex;
            for ( ; ( (auto52588043_ai >= 0 && lv_unusedIndex <= auto52588043_ae) || (auto52588043_ai < 0 && lv_unusedIndex >= auto52588043_ae) ) ; lv_unusedIndex += auto52588043_ai ) {
                lv_unusedHeroesList[lv_unusedIndex] = lv_unusedHeroesList[(lv_unusedIndex + 1)];
            }
            lv_numberOfUnusedTypes -= 1;
        }
    }

    lv_unusedIndex = 0;
    auto8248C421_ae = libPEB1_gv_availableHeroTypesCount;
    lv_availableIndex = 1;
    for ( ; ( (auto8248C421_ai >= 0 && lv_availableIndex <= auto8248C421_ae) || (auto8248C421_ai < 0 && lv_availableIndex >= auto8248C421_ae) ) ; lv_availableIndex += auto8248C421_ai ) {
        if ((libPEB1_gv_availableHeroTypes[lv_availableIndex] != "Abathur") && (libPEB1_gv_availableHeroTypes[lv_availableIndex] != "Murky")) {
            lv_unusedIndex += 1;
            lv_unusedHeroesList[lv_unusedIndex] = libPEB1_gv_availableHeroTypes[lv_availableIndex];
        }

    }
    lv_numberOfUnusedTypes = lv_unusedIndex;
    lv_zergHeroIndex = 1;
    for ( ; ( (auto57909847_ai >= 0 && lv_zergHeroIndex <= auto57909847_ae) || (auto57909847_ai < 0 && lv_zergHeroIndex >= auto57909847_ae) ) ; lv_zergHeroIndex += auto57909847_ai ) {
        lv_randomHeroIndex = RandomInt(1, lv_numberOfUnusedTypes);
        libPEB1_gv_zergHeroes[3][lv_zergHeroIndex].lv_hero = lv_unusedHeroesList[lv_randomHeroIndex];
        autoA327CEE1_ae = (lv_numberOfUnusedTypes - 1);
        lv_unusedIndex = lv_randomHeroIndex;
        for ( ; ( (autoA327CEE1_ai >= 0 && lv_unusedIndex <= autoA327CEE1_ae) || (autoA327CEE1_ai < 0 && lv_unusedIndex >= autoA327CEE1_ae) ) ; lv_unusedIndex += autoA327CEE1_ai ) {
            lv_unusedHeroesList[lv_unusedIndex] = lv_unusedHeroesList[(lv_unusedIndex + 1)];
        }
        lv_numberOfUnusedTypes -= 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_InitZergHeroes_Init () {
    libPEB1_gt_InitZergHeroes = TriggerCreate("libPEB1_gt_InitZergHeroes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PZE Zerg Boss Spawn
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PZEZergBossSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto1CD73CA3_val;
    int auto0E788710_val;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroNameLabel", libPVEB_gf_NPCHeroSpawnedUnit());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), libPEB1_gf_PZEZergBossName(libPVEB_gf_PBNPCHeroFromUnitType(UnitGetType(libPVEB_gf_NPCHeroSpawnedUnit()))), PlayerGroupAll());
    libPEB1_gf_PlayZergHeroSpawnSound(libPVEB_gf_NPCHeroSpawnedUnit());
    auto1CD73CA3_val = UnitGetType(libPVEB_gf_NPCHeroSpawnedUnit());
    if (auto1CD73CA3_val == "HeroAbathur") {
        UnitBehaviorAddPlayer(libPVEB_gf_NPCHeroSpawnedUnit(), "Ultimate2Unlocked", libPVEB_gf_NPCHeroSpawnedPlayer(), 1);
    }
    else if (auto1CD73CA3_val == "HeroButcher") {
        UnitBehaviorAddPlayer(libPVEB_gf_NPCHeroSpawnedUnit(), "Ultimate1Unlocked", libPVEB_gf_NPCHeroSpawnedPlayer(), 1);
        libPEB1_gf_ApplyButcherTalents(libPVEB_gf_NPCHeroSpawnedPlayer());
        UnitCopyAIThinkTree(libPEB1_gv_pVEAIDummyButcher, libPVEB_gf_NPCHeroSpawnedUnit());
    }
    else if (auto1CD73CA3_val == "HeroKerrigan") {
        UnitBehaviorAddPlayer(libPVEB_gf_NPCHeroSpawnedUnit(), "Ultimate2Unlocked", libPVEB_gf_NPCHeroSpawnedPlayer(), 1);
        libPEB1_gf_ApplyKerriganTalents(libPVEB_gf_NPCHeroSpawnedPlayer());
        UnitCopyAIThinkTree(libPEB1_gv_pVEAIDummyKerrigan, libPVEB_gf_NPCHeroSpawnedUnit());
    }
    else if (auto1CD73CA3_val == "HeroMurky") {
        UnitBehaviorAddPlayer(libPVEB_gf_NPCHeroSpawnedUnit(), "Ultimate2Unlocked", libPVEB_gf_NPCHeroSpawnedPlayer(), 1);
        libPEB1_gf_ApplyMurkyTalents(libPVEB_gf_NPCHeroSpawnedPlayer());
        UnitCopyAIThinkTree(libPEB1_gv_pVEAIDummyMurky, libPVEB_gf_NPCHeroSpawnedUnit());
        while (!((UnitIsValid(libGame_gv_heroDeathMurkyRespawnEggs[libPVEB_gf_NPCHeroSpawnedPlayer()]) == true))) {
            Wait(1.0, c_timeGame);
        }
        libPEB1_gv_pvEMurkyEggUnit = libGame_gv_heroDeathMurkyRespawnEggs[libPVEB_gf_NPCHeroSpawnedPlayer()];
    }
    else if (auto1CD73CA3_val == "HeroDiablo") {
        UnitBehaviorAddPlayer(libPVEB_gf_NPCHeroSpawnedUnit(), "Ultimate2Unlocked", libPVEB_gf_NPCHeroSpawnedPlayer(), 1);
        libPEB1_gf_ApplyDiabloTalents(libPVEB_gf_NPCHeroSpawnedPlayer());
        UnitCopyAIThinkTree(libPEB1_gv_pVEAIDummyDiablo, libPVEB_gf_NPCHeroSpawnedUnit());
    }
    else if (auto1CD73CA3_val == "HeroAnubarak") {
        UnitBehaviorAddPlayer(libPVEB_gf_NPCHeroSpawnedUnit(), "Ultimate1Unlocked", libPVEB_gf_NPCHeroSpawnedPlayer(), 1);
        UnitBehaviorAddPlayer(libPVEB_gf_NPCHeroSpawnedUnit(), "Ultimate2Unlocked", libPVEB_gf_NPCHeroSpawnedPlayer(), 1);
        libPEB1_gf_ApplyAnubArakTalents(libPVEB_gf_NPCHeroSpawnedPlayer());
        UnitCopyAIThinkTree(libPEB1_gv_pVEAIDummyAnubarak, libPVEB_gf_NPCHeroSpawnedUnit());
    }
    else if (auto1CD73CA3_val == "HeroTychus") {
        UnitBehaviorAddPlayer(libPVEB_gf_NPCHeroSpawnedUnit(), "Ultimate1Unlocked", libPVEB_gf_NPCHeroSpawnedPlayer(), 1);
        libPEB1_gf_ApplyTychusTalents(libPVEB_gf_NPCHeroSpawnedPlayer());
        UnitCopyAIThinkTree(libPEB1_gv_pVEAIDummyTychus, libPVEB_gf_NPCHeroSpawnedUnit());
    }
    else if (auto1CD73CA3_val == "HeroDehaka") {
        UnitBehaviorAddPlayer(libPVEB_gf_NPCHeroSpawnedUnit(), "Ultimate1Unlocked", libPVEB_gf_NPCHeroSpawnedPlayer(), 1);
        libPEB1_gf_ApplyDehakaTalents(libPVEB_gf_NPCHeroSpawnedPlayer());
        UnitCopyAIThinkTree(libPEB1_gv_pVEAIDummyDehaka, libPVEB_gf_NPCHeroSpawnedUnit());
    }
    else if (auto1CD73CA3_val == "HeroZagara") {
        UnitBehaviorAddPlayer(libPVEB_gf_NPCHeroSpawnedUnit(), "Ultimate1Unlocked", libPVEB_gf_NPCHeroSpawnedPlayer(), 1);
    }
    else if (auto1CD73CA3_val == "HeroStitches") {
        UnitBehaviorAddPlayer(libPVEB_gf_NPCHeroSpawnedUnit(), "Ultimate2Unlocked", libPVEB_gf_NPCHeroSpawnedPlayer(), 1);
        libPEB1_gf_ApplyStitchesTalents(libPVEB_gf_NPCHeroSpawnedPlayer());
        UnitCopyAIThinkTree(libPEB1_gv_pVEAIDummyStitches, libPVEB_gf_NPCHeroSpawnedUnit());
    }
    else if (auto1CD73CA3_val == "HeroStukov") {
        UnitBehaviorAddPlayer(libPVEB_gf_NPCHeroSpawnedUnit(), "Ultimate2Unlocked", libPVEB_gf_NPCHeroSpawnedPlayer(), 1);
        libPEB1_gf_ApplyStukovTalents(libPVEB_gf_NPCHeroSpawnedPlayer());
        UnitCopyAIThinkTree(libPEB1_gv_pVEAIDummyStukov, libPVEB_gf_NPCHeroSpawnedUnit());
    }
    else {
    }
    auto0E788710_val = libPVEB_gf_PBGameDifficulty();
    if (auto0E788710_val == libPVEB_ge_PVEGameDifficulty_Normal) {
        UnitBehaviorAddPlayer(libPVEB_gf_NPCHeroSpawnedUnit(), libPEB1_gv_zergHeroBalanceBehavior[1], libPVEB_gf_NPCHeroSpawnedPlayer(), 1);
    }
    else if (auto0E788710_val == libPVEB_ge_PVEGameDifficulty_Hard) {
        UnitBehaviorAddPlayer(libPVEB_gf_NPCHeroSpawnedUnit(), libPEB1_gv_zergHeroBalanceBehavior[2], libPVEB_gf_NPCHeroSpawnedPlayer(), 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PZEZergBossSpawn_Init () {
    libPEB1_gt_PZEZergBossSpawn = TriggerCreate("libPEB1_gt_PZEZergBossSpawn_Func");
    libPVEB_gf_PVENPCHeroSpawned(libPEB1_gt_PZEZergBossSpawn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Hero Dies
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ZergHeroDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_killedHero;
    int lv_itHero;

    // Automatic Variable Declarations
    const int auto4B625413_ae = 5;
    const int auto4B625413_ai = 1;
    unitgroup autoF250EC3F_g;
    int autoF250EC3F_u;
    unit autoF250EC3F_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gf_TeamNumberOfPlayer(libGame_gf_HeroKilledPlayer()) == libGame_gv_teamChaosIndex_C))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killedHero = PlayerHero(libGame_gf_HeroKilledPlayer());
    libGame_gf_HeroRefreshCooldowns(libGame_gf_HeroKilledPlayer(), false);
    lv_itHero = 1;
    for ( ; ( (auto4B625413_ai >= 0 && lv_itHero <= auto4B625413_ae) || (auto4B625413_ai < 0 && lv_itHero >= auto4B625413_ae) ) ; lv_itHero += auto4B625413_ai ) {
        if ((libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_itHero].lv_hero == lv_killedHero)) {
            if ((libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_itHero].lv_hero == "Murky") && (UnitIsValid(libPEB1_gv_pvEMurkyEggUnit) == true)) {
                TextExpressionSetToken("Param/Expression/lib_PEB1_37F509BA", "A", PlayerName(libGame_gf_HeroKilledKillingPlayer()));
                TextExpressionSetToken("Param/Expression/lib_PEB1_37F509BA", "B", UnitGetName(libGame_gv_players[libGame_gf_HeroKilledKillingPlayer()].lv_heroUnit));
                TextExpressionSetToken("Param/Expression/lib_PEB1_37F509BA", "C", libPEB1_gf_PZEZergBossName(lv_killedHero));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_PEB1_37F509BA"));
                TimerStart(libPEB1_gv_pvEMurkyDeathTimer, libPEB1_gv_pvEMurkyRespawnDelay, false, c_timeGame);
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_PEB1_98EF9FE6", "A", PlayerName(libGame_gf_HeroKilledKillingPlayer()));
                TextExpressionSetToken("Param/Expression/lib_PEB1_98EF9FE6", "B", UnitGetName(libGame_gv_players[libGame_gf_HeroKilledKillingPlayer()].lv_heroUnit));
                TextExpressionSetToken("Param/Expression/lib_PEB1_98EF9FE6", "C", libPEB1_gf_PZEZergBossName(lv_killedHero));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_PEB1_98EF9FE6"));
                libPEB1_gf_ZergHeroSlainQ(UnitGetType(libGame_gf_HeroKilledUnit()));
                TriggerExecute(libPEB1_gt_SpawnItem, true, false);
                TimerStart(libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_itHero].lv_respawnTimer, libPEB1_gv_zergHeroRespawnTimer, false, c_timeGame);
                if ((libPEB1_gv_zergHeroGraceCounter < libPEB1_gv_zergHeroGracePeriodZergHeroDeathCap)) {
                    libPEB1_gv_zergHeroGraceCounter += libPEB1_gv_zergHeroGracePeriodZergHeroDeath;
                }

                libPEB1_gf_PrepareTheNextHero(libPEB1_gv_currentStage, lv_itHero);
            }
            if ((libPEB1_gv_zergHeroes[libPEB1_gv_currentStage][lv_itHero].lv_hero == "Abathur")) {
                autoF250EC3F_g = UnitGroup("AbathurEvolvedMonstrosity", libGame_gf_HeroKilledPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoF250EC3F_u = UnitGroupCount(autoF250EC3F_g, c_unitCountAll);
                for (;; autoF250EC3F_u -= 1) {
                    autoF250EC3F_var = UnitGroupUnitFromEnd(autoF250EC3F_g, autoF250EC3F_u);
                    if (autoF250EC3F_var == null) { break; }
                    UnitCreateEffectUnit(autoF250EC3F_var, "Kill", autoF250EC3F_var);
                }
            }

            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ZergHeroDies_Init () {
    libPEB1_gt_ZergHeroDies = TriggerCreate("libPEB1_gt_ZergHeroDies_Func");
    libGame_gf_HeroKilled(libPEB1_gt_ZergHeroDies);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stage 1 - Butcherlisk Warning Sound Cue
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Stage1ButcherliskWarningSoundCue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= 5))) {
            return false;
        }

        if (!((libGame_gf_UnitIsHero(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[1][1].lv_hero)) == true)) {
        SoundPlayForPlayer(SoundLink("ZergHeroBGSoundButcher", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Stage1ButcherliskWarningSoundCue_Init () {
    libPEB1_gt_Stage1ButcherliskWarningSoundCue = TriggerCreate("libPEB1_gt_Stage1ButcherliskWarningSoundCue_Func");
    TriggerAddEventUnitRegion(libPEB1_gt_Stage1ButcherliskWarningSoundCue, null, RegionFromName("Butcherlisk Warning Sound Cue"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Zerg Hero - Stage 1
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_FirstZergHeroStage1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 1))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 0, libPVEB_gv_filtersPvEEventHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(libStEx_gv_pLAYER_12_CHAOS, RegionFromName("Butcherlisk Reveal"), 16.0, false);
    libPEB1_gf_PZETurnOnOffZergBossAI(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[1][1].lv_hero), true);
    libPEB1_gv_zergHeroes[1][2].lv_active = true;
    libPEB1_gv_zergHeroes[1][3].lv_active = true;
    libPEB1_gv_zergHeroes[1][4].lv_active = true;
    libPEB1_gv_zergHeroes[1][5].lv_active = true;
    libPEB1_gv_zergHeroSpawnSoundsEnabled = true;
    TimerStart(libPEB1_gv_zergHeroEventWaitTimer, 29.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_FirstZergHeroStage1_Init () {
    libPEB1_gt_FirstZergHeroStage1 = TriggerCreate("libPEB1_gt_FirstZergHeroStage1_Func");
    TriggerAddEventUnitRegion(libPEB1_gt_FirstZergHeroStage1, null, RegionFromName("Enemy Hero Detected"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Zerg Hero - Stage 2
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_FirstZergHeroStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 2))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 0, libPVEB_gv_filtersPvEEventHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libPEB1_gv_zergHeroesStage2Ready == true))) {
        Wait(1.0, c_timeGame);
    }
    libPEB1_gf_PZETurnOnOffZergBossAI(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[2][1].lv_hero), true);
    libPEB1_gf_PZETurnOnOffZergBossAI(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[2][2].lv_hero), true);
    libPEB1_gv_zergHeroes[2][3].lv_active = true;
    libPEB1_gv_zergHeroes[2][4].lv_active = true;
    libPEB1_gv_zergHeroSpawnSoundsEnabled = true;
    TimerStart(libPEB1_gv_zergHeroEventWaitTimer, 29.0, false, c_timeGame);
    UnitBehaviorAdd(libPVEB_gf_PBNPCHeroUnit("Abathur"), "LocustSpawnTimer", libPVEB_gf_PBNPCHeroUnit("Abathur"), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_FirstZergHeroStage2_Init () {
    libPEB1_gt_FirstZergHeroStage2 = TriggerCreate("libPEB1_gt_FirstZergHeroStage2_Func");
    TriggerAddEventUnitRegion(libPEB1_gt_FirstZergHeroStage2, null, RegionFromName("Enemy Heroes Nearby"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stage 2 - Zagara Warning Sound Cue
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Stage2ZagaraWarningSoundCue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_zagara;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= 5))) {
            return false;
        }

        if (!((libGame_gf_UnitIsHero(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_zagara = libPEB1_gv_zergHeroes[2][5].lv_hero;
    if ((UnitIsAlive(libPVEB_gf_PBNPCHeroUnit(lv_zagara)) == true)) {
        SoundPlayForPlayer(SoundLink("ZergHeroBGSoundZagara", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Stage2ZagaraWarningSoundCue_Init () {
    libPEB1_gt_Stage2ZagaraWarningSoundCue = TriggerCreate("libPEB1_gt_Stage2ZagaraWarningSoundCue_Func");
    TriggerAddEventUnitRegion(libPEB1_gt_Stage2ZagaraWarningSoundCue, null, RegionFromName("Stage 2 - Zagara Warning Sound Cue"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Spawn Points
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_InitSpawnPoints_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stageIndex;
    int lv_pointIndex;

    // Automatic Variable Declarations
    const int auto23F32D71_ae = 3;
    const int auto23F32D71_ai = 1;
    const int autoB51167A5_ae = 31;
    const int autoB51167A5_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_stageIndex = 1;
    for ( ; ( (auto23F32D71_ai >= 0 && lv_stageIndex <= auto23F32D71_ae) || (auto23F32D71_ai < 0 && lv_stageIndex >= auto23F32D71_ae) ) ; lv_stageIndex += auto23F32D71_ai ) {
        libPEB1_gv_spawnPoints[lv_stageIndex][0].lv_spawnRegion = RegionCircle(PointFromName(("Start Location 12 - " + IntToString(lv_stageIndex))), 3.0);
        libPEB1_gv_spawnPoints[lv_stageIndex][0].lv_noSpawnRegion = RegionCircle(PointFromName(("Start Location 12 - " + IntToString(lv_stageIndex))), 8.0);
        lv_pointIndex = 1;
        for ( ; ( (autoB51167A5_ai >= 0 && lv_pointIndex <= autoB51167A5_ae) || (autoB51167A5_ai < 0 && lv_pointIndex >= autoB51167A5_ae) ) ; lv_pointIndex += autoB51167A5_ai ) {
            libPEB1_gv_spawnPoints[lv_stageIndex][lv_pointIndex].lv_spawnRegion = RegionFromName(("Spawn Region " + IntToString(lv_stageIndex) + " - " + IntToString(lv_pointIndex)));
            libPEB1_gv_spawnPoints[lv_stageIndex][lv_pointIndex].lv_noSpawnRegion = RegionFromName(("No Spawn Region " + IntToString(lv_stageIndex) + " - " + IntToString(lv_pointIndex)));
            if (((libPEB1_gv_spawnPoints[lv_stageIndex][lv_pointIndex].lv_spawnRegion == null) || (libPEB1_gv_spawnPoints[lv_stageIndex][lv_pointIndex].lv_noSpawnRegion == null))) {
                lv_pointIndex -= 1;
                break;
            }

        }
        libPEB1_gv_numberOfSpawnPoints[lv_stageIndex] = lv_pointIndex;
    }
    TriggerExecute(libPEB1_gt_InitialZergStage1, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_InitSpawnPoints_Init () {
    libPEB1_gt_InitSpawnPoints = TriggerCreate("libPEB1_gt_InitSpawnPoints_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Zerg - Stage 1
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_InitialZergStage1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zergHeroIndex;

    // Automatic Variable Declarations
    unitgroup auto9F66FCF6_g;
    int auto9F66FCF6_u;
    unit auto9F66FCF6_var;
    const int autoE3717852_ae = 5;
    const int autoE3717852_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayOnUnitForPlayer(SoundLink("Doodad_EscapeFromBraxis_Gate_Zerged_Loop", -1), c_maxPlayers, PlayerGroupAll(), libPEB1_gv_checkpoints[1].lv_entryGate, 0.0, 100.0, 0.0);
    libPEB1_gv_checkpoints[1].lv_entryGateZergSound = SoundLastPlayed();
    SoundPlayOnUnitForPlayer(SoundLink("Doodad_EscapeFromBraxis_Gate_Zerged_Loop", -1), c_maxPlayers, PlayerGroupAll(), libPEB1_gv_checkpoints[1].lv_exitGate, 0.0, 100.0, 0.0);
    libPEB1_gv_checkpoints[1].lv_exitGateZergSound = SoundLastPlayed();
    if ((libPEB1_gv_zergSpawningDisabled == true)) {
        return true;
    }

    auto9F66FCF6_g = UnitGroup("ZergCocoon", libCore_gv_cOMPUTER_TeamChaos, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9F66FCF6_u = UnitGroupCount(auto9F66FCF6_g, c_unitCountAll);
    for (;; auto9F66FCF6_u -= 1) {
        auto9F66FCF6_var = UnitGroupUnitFromEnd(auto9F66FCF6_g, auto9F66FCF6_u);
        if (auto9F66FCF6_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto9F66FCF6_var, true);
    }
    libPEB1_gf_CreateZergCamp(1, "ZergZergling", libPVEB_gf_PVEDifficultyValueInt(8, 12), "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(1, 2), RegionFromName("Zerg Camp 1 - 1"));
    libPEB1_gf_CreateZergCamp(1, "ZergZergling", libPVEB_gf_PVEDifficultyValueInt(6, 8), "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(0, 0), RegionFromName("Zerg Camp 1 - 2"));
    libPEB1_gf_CreateZergCamp(1, "ZergZergling", libPVEB_gf_PVEDifficultyValueInt(4, 8), "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 1 - 3"));
    libPEB1_gf_CreateZergCamp(1, "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(3, 4), "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(1, 2), RegionFromName("Zerg Camp 1 - 4"));
    libPEB1_gf_CreateZergCamp(1, "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(2, 3), "ZergBaneling", libPVEB_gf_PVEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 1 - 5"));
    libPEB1_gf_CreateZergCamp(1, "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(3, 4), "ZergZergling", libPVEB_gf_PVEDifficultyValueInt(4, 6), RegionFromName("Zerg Camp 1 - 6"));
    libPEB1_gf_CreateZergCamp(1, "ZergBaneling", libPVEB_gf_PVEDifficultyValueInt(6, 8), "ZergZergling", libPVEB_gf_PVEDifficultyValueInt(8, 12), RegionFromName("Zerg Camp 1 - 7"));
    libPEB1_gf_CreateZergCamp(1, "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(3, 4), "ZergZergling", libPVEB_gf_PVEDifficultyValueInt(6, 8), RegionFromName("Zerg Camp 1 - 8"));
    libPEB1_gf_CreateZergCamp(1, "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(4, 6), "ZergUltralisk", 1, RegionFromName("Zerg Camp 1 - 9"));
    libPEB1_gf_CreateZergCamp(1, "ZergZergling", libPVEB_gf_PVEDifficultyValueInt(24, 32), "ZergUltralisk", libPVEB_gf_PVEDifficultyValueInt(1, 2), RegionFromName("Zerg Camp 1 - 10"));
    Wait(10.0, c_timeGame);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 10.0, false);
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 1))) {
        return true;
    }

    lv_zergHeroIndex = 1;
    for ( ; ( (autoE3717852_ai >= 0 && lv_zergHeroIndex <= autoE3717852_ae) || (autoE3717852_ai < 0 && lv_zergHeroIndex >= autoE3717852_ae) ) ; lv_zergHeroIndex += autoE3717852_ai ) {
        libPVEB_gf_PBPrepareNPCHero(libPEB1_gv_zergHeroes[1][lv_zergHeroIndex].lv_hero, libPEB1_gf_PZEZergBossSkin(libPEB1_gv_zergHeroes[1][lv_zergHeroIndex].lv_hero));
    }
    libPEB1_gv_heroesPrepared[1] = true;
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 2.0, false);
    TriggerExecute(libPEB1_gt_FirstWave, true, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 0.0, false);
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 1))) {
        return true;
    }

    libPVEB_gf_PBSpawnNPCHero(libPEB1_gv_zergHeroes[1][1].lv_hero, PointFromName("Butcherlisk Event Spawn"), libPEB1_gv_zergHeroLevel[1]);
    libPEB1_gv_zergHeroes[1][1].lv_active = true;
    libPEB1_gv_zergHeroReviveCounter = 2;
    TriggerExecute(libPEB1_gt_ZergWavesStage1, true, false);
    TriggerExecute(libPEB1_gt_ExplorationRegionsStage1, true, false);
    TriggerExecute(libPEB1_gt_MarineEvent2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_InitialZergStage1_Init () {
    libPEB1_gt_InitialZergStage1 = TriggerCreate("libPEB1_gt_InitialZergStage1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Zerg - Stage 2
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_InitialZergStage2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zergHeroIndex;

    // Automatic Variable Declarations
    unitgroup autoCAA770CE_g;
    int autoCAA770CE_u;
    unit autoCAA770CE_var;
    const int auto29AEE6D3_ae = 5;
    const int auto29AEE6D3_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayOnUnitForPlayer(SoundLink("Doodad_EscapeFromBraxis_Gate_Zerged_Loop", -1), c_maxPlayers, PlayerGroupAll(), libPEB1_gv_checkpoints[2].lv_entryGate, 0.0, 100.0, 0.0);
    libPEB1_gv_checkpoints[2].lv_entryGateZergSound = SoundLastPlayed();
    SoundPlayOnUnitForPlayer(SoundLink("Doodad_EscapeFromBraxis_Gate_Zerged_Loop", -1), c_maxPlayers, PlayerGroupAll(), libPEB1_gv_checkpoints[2].lv_exitGate, 0.0, 100.0, 0.0);
    libPEB1_gv_checkpoints[2].lv_exitGateZergSound = SoundLastPlayed();
    if ((libPEB1_gv_zergSpawningDisabled == true)) {
        return true;
    }

    autoCAA770CE_g = UnitGroup("ZergCocoon", libCore_gv_cOMPUTER_TeamChaos, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCAA770CE_u = UnitGroupCount(autoCAA770CE_g, c_unitCountAll);
    for (;; autoCAA770CE_u -= 1) {
        autoCAA770CE_var = UnitGroupUnitFromEnd(autoCAA770CE_g, autoCAA770CE_u);
        if (autoCAA770CE_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(autoCAA770CE_var, false);
    }
    lv_zergHeroIndex = 1;
    for ( ; ( (auto29AEE6D3_ai >= 0 && lv_zergHeroIndex <= auto29AEE6D3_ae) || (auto29AEE6D3_ai < 0 && lv_zergHeroIndex >= auto29AEE6D3_ae) ) ; lv_zergHeroIndex += auto29AEE6D3_ai ) {
        libPVEB_gf_PBPrepareNPCHero(libPEB1_gv_zergHeroes[2][lv_zergHeroIndex].lv_hero, libPEB1_gf_PZEZergBossSkin(libPEB1_gv_zergHeroes[2][lv_zergHeroIndex].lv_hero));
    }
    libPEB1_gv_heroesPrepared[2] = true;
    TriggerExecute(libPEB1_gt_ZergCampsStage2, true, false);
    Wait(10.0, c_timeGame);
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 2))) {
        return true;
    }

    TriggerExecute(libPEB1_gt_SpawnAbathur, true, false);
    if ((UnitIsAlive(libPVEB_gv_pBNPCHeroes[libPVEB_gf_PBNPCHeroIndex(libPEB1_gv_zergHeroes[2][2].lv_hero)].lv_heroUnit) == false)) {
        libPVEB_gf_PBSpawnNPCHero(libPEB1_gv_zergHeroes[2][2].lv_hero, PointFromName("Zerg Hero Start 2 - Stage 2"), libPEB1_gv_zergHeroLevel[2]);
    }

    libPEB1_gv_zergHeroes[2][2].lv_active = true;
    TriggerExecute(libPEB1_gt_SpawnZagara, true, false);
    libPEB1_gv_zergHeroReviveCounter = 3;
    libPEB1_gv_zergHeroesStage2Ready = true;
    TriggerExecute(libPEB1_gt_ZergWavesStage2, true, false);
    TriggerExecute(libPEB1_gt_ExplorationRegionsStage2, true, false);
    libPEB1_gf_ManageCocoons(2, RegionFromName("Cocoons Left"));
    libPEB1_gf_ManageCocoons(2, RegionFromName("Cocoons Middle"));
    libPEB1_gf_ManageCocoons(2, RegionFromName("Cocoons Right"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_InitialZergStage2_Init () {
    libPEB1_gt_InitialZergStage2 = TriggerCreate("libPEB1_gt_InitialZergStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Camps - Stage 2
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ZergCampsStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libPEB1_gv_zergSpawningDisabled == true)) {
        return true;
    }

    libPEB1_gf_CreateZergCamp(2, "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(4, 6), "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 2 - 1"));
    Wait(0.0625, c_timeGame);
    libPEB1_gf_CreateZergCamp(2, "ZergZergling", libPVEB_gf_PVEDifficultyValueInt(8, 12), "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(1, 2), RegionFromName("Zerg Camp 2 - 2"));
    Wait(0.0625, c_timeGame);
    libPEB1_gf_CreateZergCamp(2, "ZergZergling", libPVEB_gf_PVEDifficultyValueInt(8, 12), "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(1, 2), RegionFromName("Zerg Camp 2 - 3"));
    Wait(0.0625, c_timeGame);
    libPEB1_gf_CreateZergCamp(2, "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(2, 3), "ZergBaneling", libPVEB_gf_PVEDifficultyValueInt(4, 6), RegionFromName("Zerg Camp 2 - 4"));
    Wait(0.0625, c_timeGame);
    libPEB1_gf_CreateZergCamp(2, "ZergZergling", libPVEB_gf_PVEDifficultyValueInt(8, 12), "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 2 - 5"));
    Wait(0.0625, c_timeGame);
    libPEB1_gf_CreateZergCamp(2, "ZergBaneling", libPVEB_gf_PVEDifficultyValueInt(6, 8), "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 2 - 6"));
    Wait(0.0625, c_timeGame);
    libPEB1_gf_CreateZergCamp(2, "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(3, 4), "ZergUltralisk", libPVEB_gf_PVEDifficultyValueInt(1, 1), RegionFromName("Zerg Camp 2 - 7"));
    Wait(0.0625, c_timeGame);
    libPEB1_gf_CreateZergCamp(2, "ZergBaneling", libPVEB_gf_PVEDifficultyValueInt(6, 8), "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 2 - 8"));
    Wait(0.0625, c_timeGame);
    libPEB1_gf_CreateZergCamp(2, "ZergBaneling", libPVEB_gf_PVEDifficultyValueInt(8, 12), "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(3, 4), RegionFromName("Zerg Camp 2 - 9"));
    Wait(0.0625, c_timeGame);
    libPEB1_gf_CreateZergCamp(2, "ZergBaneling", libPVEB_gf_PVEDifficultyValueInt(12, 16), "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 2 - 10"));
    Wait(0.0625, c_timeGame);
    libPEB1_gf_CreateZergCamp(2, "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(3, 4), "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(2, 3), RegionFromName("Zerg Camp 2 - 11"));
    Wait(0.0625, c_timeGame);
    libPEB1_gf_CreateZergCamp(2, "ZergBaneling", libPVEB_gf_PVEDifficultyValueInt(6, 8), "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(3, 4), RegionFromName("Zerg Camp 2 - 12"));
    Wait(0.0625, c_timeGame);
    libPEB1_gf_CreateZergCamp(2, "ZergZergling", libPVEB_gf_PVEDifficultyValueInt(12, 16), "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(0, 0), RegionFromName("Zerg Camp 2 - 13"));
    Wait(0.0625, c_timeGame);
    libPEB1_gf_CreateZergCamp(2, "ZergBaneling", libPVEB_gf_PVEDifficultyValueInt(3, 4), "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(3, 4), RegionFromName("Zerg Camp 2 - 14"));
    Wait(0.0625, c_timeGame);
    libPEB1_gf_CreateZergCamp(2, "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(3, 4), "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(3, 4), RegionFromName("Zerg Camp 2 - 16"));
    Wait(0.0625, c_timeGame);
    libPEB1_gf_CreateZergCamp(2, "ZergUltralisk", 2, "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(6, 8), RegionFromName("Zerg Camp 2 - 17"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ZergCampsStage2_Init () {
    libPEB1_gt_ZergCampsStage2 = TriggerCreate("libPEB1_gt_ZergCampsStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Camps - Stage 3
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ZergCampsStage3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libPEB1_gv_zergSpawningDisabled == true)) {
        return true;
    }

    libPEB1_gf_CreateZergCamp(3, "SlivanBossPod", libPVEB_gf_PVEDifficultyValueInt(6, 8), "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(0, 0), RegionFromName("Zerg Camp 3 - 1"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ZergCampsStage3_Init () {
    libPEB1_gt_ZergCampsStage3 = TriggerCreate("libPEB1_gt_ZergCampsStage3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Waves - Stage 1
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ZergWavesStage1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_spawnRegion;
    int lv_totalWavesSpawned;
    int lv_lowCount;
    int lv_highCount;
    int lv_lowIncrement;
    int lv_highIncrement;
    bool lv_extraHighCount;

    // Automatic Variable Declarations
    int auto2471FCAA_n;
    int auto2471FCAA_i;
    int auto0215DC61_val;
    int autoDFB6212D_n;
    int autoDFB6212D_i;
    int autoDC8CF40C_val;
    int auto018A9D2B_n;
    int auto018A9D2B_i;
    int auto2589D501_val;
    int autoA9EFA64E_n;
    int autoA9EFA64E_i;
    int autoCDA06F85_val;
    int auto860CAC8D_n;
    int auto860CAC8D_i;
    int autoA1255D13_n;
    int autoA1255D13_i;
    int auto14BC4124_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    while (true) {
        if ((libPEB1_gv_zergSpawningDisabled == true)) {
            return true;
        }

        Wait(libPEB1_gv_zergWaveDelay, c_timeGame);
        while (!((UnitGroupCount(UnitGroupFilterPlayer(libPEB1_gv_activeZergMinions, libCore_gv_cOMPUTER_TeamChaos, 0), c_unitCountAlive) < libPEB1_gv_maxActiveZergMinions))) {
            Wait(1.0, c_timeGame);
        }
        while (true) {
            if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 1))) {
                return true;
            }

            if ((libPEB1_gv_zergHeroGraceCounter > 0)) {
                libPEB1_gv_zergHeroGraceCounter -= 1;
            }
            else {
                break;
            }
            Wait(1.0, c_timeGame);
        }
        while (!(((libPEB1_gv_holdoutStage1Started == true) || (UnitGroupCount(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceEnemy, RegionFromName("Holdout 1 Wave Freeze"), libPVEB_gv_filtersPvEEventHeroic, 1), c_unitCountAlive) > 0)))) {
            Wait(1.0, c_timeGame);
        }
        if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 1))) {
            return true;
        }

        if ((lv_highIncrement == lv_lowIncrement)) {
            if ((RandomInt(1, 2) == 1)) {
                lv_lowCount = 0;
                lv_highCount = 1;
                lv_lowIncrement += 1;
            }
            else {
                lv_lowCount = 2;
                lv_highCount = 2;
                lv_highIncrement += 1;
            }
        }
        else {
            if ((lv_highIncrement > lv_lowIncrement)) {
                lv_lowCount = 0;
                lv_highCount = 1;
                lv_lowIncrement += 1;
            }
            else {
                lv_lowCount = 2;
                lv_highCount = 2;
                lv_highIncrement += 1;
            }
        }
        if ((lv_highCount == 2)) {
            if ((lv_extraHighCount == false)) {
                lv_extraHighCount = true;
            }
            else {
                lv_extraHighCount = false;
                lv_highCount += 1;
            }
        }

        lv_totalWavesSpawned += 1;
        if ((lv_totalWavesSpawned <= (libPEB1_gv_wavesNeededToEscalate * 1))) {
            auto860CAC8D_n = lv_lowCount;
            for (auto860CAC8D_i = 1; auto860CAC8D_i <= auto860CAC8D_n; auto860CAC8D_i += 1) {
                lv_spawnRegion = libPEB1_gf_NearestSpawnPointtoPoint(libPEB1_gf_PositionofLeftmostPlayerHero(), libPEB1_ge_Direction_Normal);
                TimerStart(libPEB1_gv_spawnPoints[1][lv_spawnRegion].lv_recentlyUsedTimer, 4.0, false, c_timeGame);
                libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(3, 4), lv_spawnRegion, 1);
            }
            autoA1255D13_n = lv_highCount;
            for (autoA1255D13_i = 1; autoA1255D13_i <= autoA1255D13_n; autoA1255D13_i += 1) {
                lv_spawnRegion = libPEB1_gf_NearestSpawnPointtoPoint(libPEB1_gf_PositionofRightmostPlayerHero(), libPEB1_ge_Direction_Rightward);
                TimerStart(libPEB1_gv_spawnPoints[1][lv_spawnRegion].lv_recentlyUsedTimer, 4.0, false, c_timeGame);
                auto14BC4124_val = RandomInt(1, 3);
                if (auto14BC4124_val == 1) {
                    libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(0, 2), lv_spawnRegion, 1);
                    libPEB1_gf_SpawnZergWave("ZergHydralisk", 1, lv_spawnRegion, 1);
                }
                else if (auto14BC4124_val == 2) {
                    libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(4, 6), lv_spawnRegion, 1);
                }
                else if (auto14BC4124_val == 3) {
                    libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(0, 2), lv_spawnRegion, 1);
                    libPEB1_gf_SpawnZergWave("ZergRoach", 1, lv_spawnRegion, 1);
                }
                else {
                }
            }
        }
        else {
            if ((lv_totalWavesSpawned <= (libPEB1_gv_wavesNeededToEscalate * 2))) {
                auto018A9D2B_n = lv_lowCount;
                for (auto018A9D2B_i = 1; auto018A9D2B_i <= auto018A9D2B_n; auto018A9D2B_i += 1) {
                    lv_spawnRegion = libPEB1_gf_NearestSpawnPointtoPoint(libPEB1_gf_PositionofLeftmostPlayerHero(), libPEB1_ge_Direction_Normal);
                    TimerStart(libPEB1_gv_spawnPoints[1][lv_spawnRegion].lv_recentlyUsedTimer, 4.0, false, c_timeGame);
                    auto2589D501_val = RandomInt(1, 3);
                    if (auto2589D501_val == 1) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(0, 2), lv_spawnRegion, 1);
                        libPEB1_gf_SpawnZergWave("ZergHydralisk", 1, lv_spawnRegion, 1);
                    }
                    else if (auto2589D501_val == 2) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(4, 6), lv_spawnRegion, 1);
                    }
                    else if (auto2589D501_val == 3) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(0, 2), lv_spawnRegion, 1);
                        libPEB1_gf_SpawnZergWave("ZergRoach", libPVEB_gf_PVEDifficultyValueInt(1, 1), lv_spawnRegion, 1);
                    }
                    else {
                    }
                }
                autoA9EFA64E_n = lv_highCount;
                for (autoA9EFA64E_i = 1; autoA9EFA64E_i <= autoA9EFA64E_n; autoA9EFA64E_i += 1) {
                    lv_spawnRegion = libPEB1_gf_NearestSpawnPointtoPoint(libPEB1_gf_PositionofRightmostPlayerHero(), libPEB1_ge_Direction_Rightward);
                    TimerStart(libPEB1_gv_spawnPoints[1][lv_spawnRegion].lv_recentlyUsedTimer, 4.0, false, c_timeGame);
                    autoCDA06F85_val = RandomInt(1, 3);
                    if (autoCDA06F85_val == 1) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(6, 8), lv_spawnRegion, 1);
                    }
                    else if (autoCDA06F85_val == 2) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(2, 4), lv_spawnRegion, 1);
                        libPEB1_gf_SpawnZergWave("ZergBaneling", libPVEB_gf_PVEDifficultyValueInt(2, 2), lv_spawnRegion, 1);
                    }
                    else if (autoCDA06F85_val == 3) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(2, 4), lv_spawnRegion, 1);
                        libPEB1_gf_SpawnZergWave("ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(1, 1), lv_spawnRegion, 1);
                    }
                    else {
                    }
                }
            }
            else {
                auto2471FCAA_n = lv_lowCount;
                for (auto2471FCAA_i = 1; auto2471FCAA_i <= auto2471FCAA_n; auto2471FCAA_i += 1) {
                    lv_spawnRegion = libPEB1_gf_NearestSpawnPointtoPoint(libPEB1_gf_PositionofLeftmostPlayerHero(), libPEB1_ge_Direction_Normal);
                    TimerStart(libPEB1_gv_spawnPoints[1][lv_spawnRegion].lv_recentlyUsedTimer, 4.0, false, c_timeGame);
                    auto0215DC61_val = RandomInt(1, 3);
                    if (auto0215DC61_val == 1) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(2, 4), lv_spawnRegion, 1);
                        libPEB1_gf_SpawnZergWave("ZergHydralisk", 1, lv_spawnRegion, 1);
                    }
                    else if (auto0215DC61_val == 2) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(6, 8), lv_spawnRegion, 1);
                    }
                    else if (auto0215DC61_val == 3) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(2, 4), lv_spawnRegion, 1);
                        libPEB1_gf_SpawnZergWave("ZergRoach", libPVEB_gf_PVEDifficultyValueInt(1, 1), lv_spawnRegion, 1);
                    }
                    else {
                    }
                }
                autoDFB6212D_n = lv_highCount;
                for (autoDFB6212D_i = 1; autoDFB6212D_i <= autoDFB6212D_n; autoDFB6212D_i += 1) {
                    lv_spawnRegion = libPEB1_gf_NearestSpawnPointtoPoint(libPEB1_gf_PositionofRightmostPlayerHero(), libPEB1_ge_Direction_Rightward);
                    TimerStart(libPEB1_gv_spawnPoints[1][lv_spawnRegion].lv_recentlyUsedTimer, 4.0, false, c_timeGame);
                    autoDC8CF40C_val = RandomInt(1, 4);
                    if (autoDC8CF40C_val == 1) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(8, 10), lv_spawnRegion, 1);
                    }
                    else if (autoDC8CF40C_val == 2) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(4, 6), lv_spawnRegion, 1);
                        libPEB1_gf_SpawnZergWave("ZergBaneling", libPVEB_gf_PVEDifficultyValueInt(2, 2), lv_spawnRegion, 1);
                    }
                    else if (autoDC8CF40C_val == 3) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(0, 2), lv_spawnRegion, 1);
                        libPEB1_gf_SpawnZergWave("ZergRoach", 1, lv_spawnRegion, 1);
                        libPEB1_gf_SpawnZergWave("ZergHydralisk", 1, lv_spawnRegion, 1);
                    }
                    else {
                    }
                }
            }
        }
        if ((libPEB1_gv_pauseHeroRevival == false)) {
            if ((lv_totalWavesSpawned <= (libPEB1_gv_wavesNeededToEscalate * 3))) {
                libPEB1_gf_ReviveZergHeroes(1);
            }
            else {
                libPEB1_gf_ReviveZergHeroes(libPVEB_gf_PVEDifficultyValueInt(1, 2));
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ZergWavesStage1_Init () {
    libPEB1_gt_ZergWavesStage1 = TriggerCreate("libPEB1_gt_ZergWavesStage1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Waves - Stage 2
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ZergWavesStage2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_spawnRegion;
    int lv_totalWavesSpawned;
    int lv_lowCount;
    int lv_highCount;
    int lv_lowIncrement;
    int lv_highIncrement;
    bool lv_extraHighCount;

    // Automatic Variable Declarations
    int auto95A341CE_n;
    int auto95A341CE_i;
    int auto87F6CD5E_val;
    int autoE5D58260_n;
    int autoE5D58260_i;
    int auto4A14AC88_val;
    int autoD7DEC72B_n;
    int autoD7DEC72B_i;
    int auto01BB6539_val;
    int auto88E85EC8_n;
    int auto88E85EC8_i;
    int auto2F640979_val;
    int auto7979E6C7_n;
    int auto7979E6C7_i;
    int autoC1A5C28F_n;
    int autoC1A5C28F_i;
    int auto7B5D7BF6_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((libPEB1_gv_zergSpawningDisabled == true)) {
            return true;
        }

        Wait(libPEB1_gv_zergWaveDelay, c_timeGame);
        while (!((UnitGroupCount(UnitGroupFilterPlayer(libPEB1_gv_activeZergMinions, libCore_gv_cOMPUTER_TeamChaos, 0), c_unitCountAlive) < libPEB1_gv_maxActiveZergMinions))) {
            Wait(1.0, c_timeGame);
        }
        while (true) {
            if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 2))) {
                return true;
            }

            if ((libPEB1_gv_zergHeroGraceCounter > 0)) {
                libPEB1_gv_zergHeroGraceCounter -= 1;
            }
            else {
                break;
            }
            Wait(1.0, c_timeGame);
        }
        while (!(((libPEB1_gv_holdoutStage2Started == true) || (UnitGroupCount(UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceEnemy, RegionFromName("Holdout 2 Wave Freeze"), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)))) {
            Wait(1.0, c_timeGame);
        }
        if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 2))) {
            return true;
        }

        if ((lv_highIncrement == lv_lowIncrement)) {
            if ((RandomInt(1, 2) == 1)) {
                lv_lowCount = 0;
                lv_highCount = 1;
                lv_lowIncrement += 1;
            }
            else {
                lv_lowCount = 2;
                lv_highCount = 2;
                lv_highIncrement += 1;
            }
        }
        else {
            if ((lv_highIncrement > lv_lowIncrement)) {
                lv_lowCount = 0;
                lv_highCount = 1;
                lv_lowIncrement += 1;
            }
            else {
                lv_lowCount = 2;
                lv_highCount = 2;
                lv_highIncrement += 1;
            }
        }
        if ((lv_highCount == 2)) {
            if ((lv_extraHighCount == false)) {
                lv_extraHighCount = true;
            }
            else {
                lv_extraHighCount = false;
                lv_highCount += 1;
            }
        }

        lv_totalWavesSpawned += 1;
        if ((lv_totalWavesSpawned <= (libPEB1_gv_wavesNeededToEscalate * 1))) {
            auto7979E6C7_n = lv_lowCount;
            for (auto7979E6C7_i = 1; auto7979E6C7_i <= auto7979E6C7_n; auto7979E6C7_i += 1) {
                lv_spawnRegion = libPEB1_gf_NearestSpawnPointtoPoint(libPEB1_gf_PositionofRightmostPlayerHero(), libPEB1_ge_Direction_Normal);
                TimerStart(libPEB1_gv_spawnPoints[1][lv_spawnRegion].lv_recentlyUsedTimer, 4.0, false, c_timeGame);
                libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(4, 6), lv_spawnRegion, 2);
            }
            autoC1A5C28F_n = lv_highCount;
            for (autoC1A5C28F_i = 1; autoC1A5C28F_i <= autoC1A5C28F_n; autoC1A5C28F_i += 1) {
                lv_spawnRegion = libPEB1_gf_NearestSpawnPointtoPoint(libPEB1_gf_PositionofLeftmostPlayerHero(), libPEB1_ge_Direction_Leftward);
                TimerStart(libPEB1_gv_spawnPoints[1][lv_spawnRegion].lv_recentlyUsedTimer, 4.0, false, c_timeGame);
                auto7B5D7BF6_val = RandomInt(1, 3);
                if (auto7B5D7BF6_val == 1) {
                    libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(2, 4), lv_spawnRegion, 2);
                    libPEB1_gf_SpawnZergWave("ZergHydralisk", 1, lv_spawnRegion, 2);
                }
                else if (auto7B5D7BF6_val == 2) {
                    libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(6, 8), lv_spawnRegion, 2);
                }
                else if (auto7B5D7BF6_val == 3) {
                    libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(2, 4), lv_spawnRegion, 2);
                    libPEB1_gf_SpawnZergWave("ZergRoach", 1, lv_spawnRegion, 2);
                }
                else {
                }
            }
        }
        else {
            if ((lv_totalWavesSpawned <= (libPEB1_gv_wavesNeededToEscalate * 2))) {
                autoD7DEC72B_n = lv_lowCount;
                for (autoD7DEC72B_i = 1; autoD7DEC72B_i <= autoD7DEC72B_n; autoD7DEC72B_i += 1) {
                    lv_spawnRegion = libPEB1_gf_NearestSpawnPointtoPoint(libPEB1_gf_PositionofRightmostPlayerHero(), libPEB1_ge_Direction_Normal);
                    TimerStart(libPEB1_gv_spawnPoints[1][lv_spawnRegion].lv_recentlyUsedTimer, 4.0, false, c_timeGame);
                    auto01BB6539_val = RandomInt(1, 3);
                    if (auto01BB6539_val == 1) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(2, 4), lv_spawnRegion, 2);
                        libPEB1_gf_SpawnZergWave("ZergHydralisk", 1, lv_spawnRegion, 2);
                    }
                    else if (auto01BB6539_val == 2) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(6, 8), lv_spawnRegion, 2);
                    }
                    else if (auto01BB6539_val == 3) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(2, 4), lv_spawnRegion, 2);
                        libPEB1_gf_SpawnZergWave("ZergRoach", libPVEB_gf_PVEDifficultyValueInt(1, 1), lv_spawnRegion, 2);
                    }
                    else {
                    }
                }
                auto88E85EC8_n = lv_highCount;
                for (auto88E85EC8_i = 1; auto88E85EC8_i <= auto88E85EC8_n; auto88E85EC8_i += 1) {
                    lv_spawnRegion = libPEB1_gf_NearestSpawnPointtoPoint(libPEB1_gf_PositionofLeftmostPlayerHero(), libPEB1_ge_Direction_Leftward);
                    TimerStart(libPEB1_gv_spawnPoints[1][lv_spawnRegion].lv_recentlyUsedTimer, 4.0, false, c_timeGame);
                    auto2F640979_val = RandomInt(1, 3);
                    if (auto2F640979_val == 1) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(6, 8), lv_spawnRegion, 2);
                    }
                    else if (auto2F640979_val == 2) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(2, 2), lv_spawnRegion, 2);
                        libPEB1_gf_SpawnZergWave("ZergBaneling", libPVEB_gf_PVEDifficultyValueInt(2, 3), lv_spawnRegion, 2);
                    }
                    else if (auto2F640979_val == 3) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(2, 4), lv_spawnRegion, 2);
                        libPEB1_gf_SpawnZergWave("ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(1, 1), lv_spawnRegion, 2);
                    }
                    else {
                    }
                }
            }
            else {
                auto95A341CE_n = lv_lowCount;
                for (auto95A341CE_i = 1; auto95A341CE_i <= auto95A341CE_n; auto95A341CE_i += 1) {
                    lv_spawnRegion = libPEB1_gf_NearestSpawnPointtoPoint(libPEB1_gf_PositionofRightmostPlayerHero(), libPEB1_ge_Direction_Normal);
                    TimerStart(libPEB1_gv_spawnPoints[1][lv_spawnRegion].lv_recentlyUsedTimer, 4.0, false, c_timeGame);
                    auto87F6CD5E_val = RandomInt(1, 3);
                    if (auto87F6CD5E_val == 1) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(4, 6), lv_spawnRegion, 2);
                        libPEB1_gf_SpawnZergWave("ZergHydralisk", 1, lv_spawnRegion, 2);
                    }
                    else if (auto87F6CD5E_val == 2) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(8, 10), lv_spawnRegion, 2);
                    }
                    else if (auto87F6CD5E_val == 3) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(4, 6), lv_spawnRegion, 2);
                        libPEB1_gf_SpawnZergWave("ZergRoach", libPVEB_gf_PVEDifficultyValueInt(1, 1), lv_spawnRegion, 2);
                    }
                    else {
                    }
                }
                if ((lv_highCount > 2) && (UnitGroupCount(UnitGroupFilter("ZergUltralisk", libCore_gv_cOMPUTER_TeamChaos, libPEB1_gv_activeZergMinions, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    lv_highCount -= 1;
                    lv_spawnRegion = libPEB1_gf_NearestSpawnPointtoPoint(libPEB1_gf_PositionofLeftmostPlayerHero(), libPEB1_ge_Direction_Leftward);
                    TimerStart(libPEB1_gv_spawnPoints[1][lv_spawnRegion].lv_recentlyUsedTimer, 4.0, false, c_timeGame);
                    libPEB1_gf_SpawnZergWave("ZergUltralisk", 1, lv_spawnRegion, 2);
                }

                autoE5D58260_n = lv_highCount;
                for (autoE5D58260_i = 1; autoE5D58260_i <= autoE5D58260_n; autoE5D58260_i += 1) {
                    lv_spawnRegion = libPEB1_gf_NearestSpawnPointtoPoint(libPEB1_gf_PositionofLeftmostPlayerHero(), libPEB1_ge_Direction_Leftward);
                    TimerStart(libPEB1_gv_spawnPoints[1][lv_spawnRegion].lv_recentlyUsedTimer, 4.0, false, c_timeGame);
                    auto4A14AC88_val = RandomInt(1, 4);
                    if (auto4A14AC88_val == 1) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(8, 10), lv_spawnRegion, 2);
                    }
                    else if (auto4A14AC88_val == 2) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(4, 4), lv_spawnRegion, 2);
                        libPEB1_gf_SpawnZergWave("ZergBaneling", libPVEB_gf_PVEDifficultyValueInt(2, 3), lv_spawnRegion, 2);
                    }
                    else if (auto4A14AC88_val == 3) {
                        libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(0, 2), lv_spawnRegion, 2);
                        libPEB1_gf_SpawnZergWave("ZergRoach", 1, lv_spawnRegion, 2);
                        libPEB1_gf_SpawnZergWave("ZergHydralisk", 1, lv_spawnRegion, 2);
                    }
                    else {
                    }
                }
            }
        }
        if ((libPEB1_gv_pauseHeroRevival == false)) {
            if ((lv_totalWavesSpawned <= (libPEB1_gv_wavesNeededToEscalate * 2))) {
                libPEB1_gf_ReviveZergHeroes(1);
            }
            else {
                libPEB1_gf_ReviveZergHeroes(2);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ZergWavesStage2_Init () {
    libPEB1_gt_ZergWavesStage2 = TriggerCreate("libPEB1_gt_ZergWavesStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Wave
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_FirstWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_spawnRegion;
    unitgroup lv_marines;
    unitgroup lv_nearbyUnits;

    // Automatic Variable Declarations
    unitgroup auto1A385BA7_g;
    int auto1A385BA7_u;
    unit auto1A385BA7_var;
    unitgroup autoFDBCA73D_g;
    int autoFDBCA73D_u;
    unit autoFDBCA73D_var;

    // Variable Initialization
    lv_marines = UnitGroupEmpty();
    lv_nearbyUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libPEB1_gv_zergSpawningDisabled == true)) {
        return true;
    }

    lv_marines = UnitGroup("RangedMinion", libCore_gv_cOMPUTER_NoVision_TeamOrder, RegionFromName("Initial Marines"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1A385BA7_g = lv_marines;
    auto1A385BA7_u = UnitGroupCount(auto1A385BA7_g, c_unitCountAll);
    for (;; auto1A385BA7_u -= 1) {
        auto1A385BA7_var = UnitGroupUnitFromEnd(auto1A385BA7_g, auto1A385BA7_u);
        if (auto1A385BA7_var == null) { break; }
        UnitSetOwner(auto1A385BA7_var, libStEx_gv_pLAYER_11_ORDER, true);
        UnitSetPropertyFixed(auto1A385BA7_var, c_unitPropLife, RandomFixed(75.0, 150.0));
        UnitIssueOrder(auto1A385BA7_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto1A385BA7_var), 15.0, UnitGetFacing(auto1A385BA7_var))), c_orderQueueReplace);
    }
    libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(4, 6), 1, 1);
    libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(6, 8), 2, 1);
    libPEB1_gf_SpawnZergWave("ZergZergling", libPVEB_gf_PVEDifficultyValueInt(8, 12), 3, 1);
    Wait(2.0, c_timeGame);
    while (true) {
        if (((libNtve_gf_UnitGroupIsDead(lv_marines) == true) || (libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 1))) {
            return true;
        }

        lv_nearbyUnits = UnitGroupAlliance(libStEx_gv_pLAYER_11_ORDER, c_unitAllianceEnemy, RegionCircle(UnitGroupCenterOfGroup(lv_marines), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
        autoFDBCA73D_g = lv_marines;
        autoFDBCA73D_u = UnitGroupCount(autoFDBCA73D_g, c_unitCountAll);
        for (;; autoFDBCA73D_u -= 1) {
            autoFDBCA73D_var = UnitGroupUnitFromEnd(autoFDBCA73D_g, autoFDBCA73D_u);
            if (autoFDBCA73D_var == null) { break; }
            if ((UnitGroupCount(lv_nearbyUnits, c_unitCountAlive) > 0)) {
                UnitIssueOrder(autoFDBCA73D_var, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(lv_nearbyUnits, UnitGetPosition(autoFDBCA73D_var))), c_orderQueueReplace);
            }
            else {
                if ((libNtve_gf_UnitInRegion(autoFDBCA73D_var, RegionCircle(PointFromName("Marine Despawn"), 1.0)) == true)) {
                    UnitRemove(autoFDBCA73D_var);
                }
                else {
                    UnitIssueOrder(autoFDBCA73D_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName("Marine Despawn")), c_orderQueueReplace);
                }
            }
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_FirstWave_Init () {
    libPEB1_gt_FirstWave = TriggerCreate("libPEB1_gt_FirstWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marine Event 2
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_MarineEvent2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_visionGained;
    int lv_marineTag;
    point lv_position;
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    unitgroup autoE2FCE186_g;
    int autoE2FCE186_u;
    unit autoE2FCE186_var;
    unitgroup auto69E44FA7_g;
    int auto69E44FA7_u;
    unit auto69E44FA7_var;
    unitgroup autoBDCAB359_g;
    int autoBDCAB359_u;
    unit autoBDCAB359_var;
    unitgroup auto632FFA08_g;
    int auto632FFA08_u;
    unit auto632FFA08_var;
    unitgroup auto60FC706A_g;
    int auto60FC706A_u;
    unit auto60FC706A_var;
    unitgroup autoFC5C1736_g;
    int autoFC5C1736_u;
    unit autoFC5C1736_var;
    unitgroup autoC96410E1_g;
    int autoC96410E1_u;
    unit autoC96410E1_var;
    unitgroup auto7FCF7EF3_g;
    int auto7FCF7EF3_u;
    unit auto7FCF7EF3_var;
    unitgroup autoAEBAF3EC_g;
    int autoAEBAF3EC_u;
    unit autoAEBAF3EC_var;

    // Variable Initialization
    lv_marineTag = c_textTagNone;
    lv_playerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(0.5, c_timeGame);
        if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 1))) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(libPEB1_gv_marineEvent2Marines) == true)) {
            autoE2FCE186_g = libPEB1_gv_marineEvent2Hydralisks;
            autoE2FCE186_u = UnitGroupCount(autoE2FCE186_g, c_unitCountAll);
            for (;; autoE2FCE186_u -= 1) {
                autoE2FCE186_var = UnitGroupUnitFromEnd(autoE2FCE186_g, autoE2FCE186_u);
                if (autoE2FCE186_var == null) { break; }
                libNtve_gf_ChangeUnitDamage(autoE2FCE186_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
                libNtve_gf_PauseUnit(autoE2FCE186_var, false);
                libPEB1_gf_PZETurnOnOffZergMinionAI(autoE2FCE186_var, true);
            }
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(libPEB1_gv_marineEvent2Hydralisks) == true)) {
            break;
        }

        if ((lv_visionGained == false)) {
            if ((libNtve_gf_UnitIsVisibleToPlayer(UnitGroupUnit(libPEB1_gv_marineEvent2Marines, 1), libCore_gv_cOMPUTER_TeamOrder) == true)) {
                lv_playerUnits = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamOrder, c_unitAllianceAlly, RegionCircle(UnitGetPosition(UnitGroupUnit(libPEB1_gv_marineEvent2Marines, 1)), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                UnitGroupRemoveUnitGroup(lv_playerUnits, libPEB1_gv_marineEvent2Marines);
                if ((UnitGroupCount(lv_playerUnits, c_unitCountAlive) > 0)) {
                    lv_visionGained = true;
                    auto69E44FA7_g = libPEB1_gv_marineEvent2Marines;
                    auto69E44FA7_u = UnitGroupCount(auto69E44FA7_g, c_unitCountAll);
                    for (;; auto69E44FA7_u -= 1) {
                        auto69E44FA7_var = UnitGroupUnitFromEnd(auto69E44FA7_g, auto69E44FA7_u);
                        if (auto69E44FA7_var == null) { break; }
                        UnitSetOwner(auto69E44FA7_var, libCore_gv_cOMPUTER_TeamOrder, true);
                        libNtve_gf_ChangeUnitDamage(auto69E44FA7_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
                    }
                    autoBDCAB359_g = libPEB1_gv_marineEvent2Hydralisks;
                    autoBDCAB359_u = UnitGroupCount(autoBDCAB359_g, c_unitCountAll);
                    for (;; autoBDCAB359_u -= 1) {
                        autoBDCAB359_var = UnitGroupUnitFromEnd(autoBDCAB359_g, autoBDCAB359_u);
                        if (autoBDCAB359_var == null) { break; }
                        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(autoBDCAB359_var), "Unburrow", "Unburrow", 0, c_animTimeDefault);
                    }
                    Wait(0.0625, c_timeGame);
                    auto632FFA08_g = libPEB1_gv_marineEvent2Hydralisks;
                    auto632FFA08_u = UnitGroupCount(auto632FFA08_g, c_unitCountAll);
                    for (;; auto632FFA08_u -= 1) {
                        auto632FFA08_var = UnitGroupUnitFromEnd(auto632FFA08_g, auto632FFA08_u);
                        if (auto632FFA08_var == null) { break; }
                        libNtve_gf_ShowHideUnit(auto632FFA08_var, true);
                        libNtve_gf_ChangeUnitDamage(auto632FFA08_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
                        UnitSetState(auto632FFA08_var, c_unitStateStatusBar, true);
                    }
                    Wait(0.6045, c_timeGame);
                    auto60FC706A_g = libPEB1_gv_marineEvent2Hydralisks;
                    auto60FC706A_u = UnitGroupCount(auto60FC706A_g, c_unitCountAll);
                    for (;; auto60FC706A_u -= 1) {
                        auto60FC706A_var = UnitGroupUnitFromEnd(auto60FC706A_g, auto60FC706A_u);
                        if (auto60FC706A_var == null) { break; }
                        libNtve_gf_PauseUnit(auto60FC706A_var, false);
                    }
                }

            }

        }

        if ((lv_visionGained == true) && (UnitGroupCount(libPEB1_gv_marineEvent2Marines, c_unitCountAlive) > 0) && (UnitGroupCount(libPEB1_gv_marineEvent2Hydralisks, c_unitCountAlive) > 0)) {
            autoFC5C1736_g = libPEB1_gv_marineEvent2Marines;
            autoFC5C1736_u = UnitGroupCount(autoFC5C1736_g, c_unitCountAll);
            for (;; autoFC5C1736_u -= 1) {
                autoFC5C1736_var = UnitGroupUnitFromEnd(autoFC5C1736_g, autoFC5C1736_u);
                if (autoFC5C1736_var == null) { break; }
                UnitIssueOrder(autoFC5C1736_var, OrderTargetingUnit(AbilityCommand("AttackAlly", 0), UnitGroupClosestToPoint(libPEB1_gv_marineEvent2Hydralisks, UnitGetPosition(autoFC5C1736_var))), c_orderQueueReplace);
            }
            autoC96410E1_g = libPEB1_gv_marineEvent2Hydralisks;
            autoC96410E1_u = UnitGroupCount(autoC96410E1_g, c_unitCountAll);
            for (;; autoC96410E1_u -= 1) {
                autoC96410E1_var = UnitGroupUnitFromEnd(autoC96410E1_g, autoC96410E1_u);
                if (autoC96410E1_var == null) { break; }
                UnitIssueOrder(autoC96410E1_var, OrderTargetingUnit(AbilityCommand("AttackAlly", 0), UnitGroupClosestToPoint(libPEB1_gv_marineEvent2Marines, UnitGetPosition(autoC96410E1_var))), c_orderQueueReplace);
            }
        }

    }
    auto7FCF7EF3_g = libPEB1_gv_marineEvent2Marines;
    auto7FCF7EF3_u = UnitGroupCount(auto7FCF7EF3_g, c_unitCountAll);
    for (;; auto7FCF7EF3_u -= 1) {
        auto7FCF7EF3_var = UnitGroupUnitFromEnd(auto7FCF7EF3_g, auto7FCF7EF3_u);
        if (auto7FCF7EF3_var == null) { break; }
        UnitIssueOrder(auto7FCF7EF3_var, OrderTargetingPoint(AbilityCommand("move", 4), PointFromName("Item Spawn Point 1 - 1")), c_orderQueueReplace);
    }
    if ((UnitIsAlive(libPEB1_gv_textTagMarine) == false)) {
        libPEB1_gv_textTagMarine = UnitGroupClosestToPoint(libPEB1_gv_marineEvent2Marines, PointFromName("Item Spawn Point 1 - 1"));
    }

    TextTagCreate(StringExternal("Param/Value/lib_PEB1_50BCBEAB"), 32, UnitGetPosition(libPEB1_gv_textTagMarine), 2.0, true, false, PlayerGroupAll());
    lv_marineTag = TextTagLastCreated();
    TextTagAttachToUnit(lv_marineTag, libPEB1_gv_textTagMarine, 2.0);
    libPEB1_gf_MonitorTextTag(libPEB1_gv_textTagMarine, 2.0, lv_marineTag);
    Wait(0.5, c_timeGame);
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 1) || (libNtve_gf_UnitGroupIsDead(libPEB1_gv_marineEvent2Marines) == true))) {
        return true;
    }

    libPVEB_gf_PvEPickupSpawnRandomInRotation("PVEMiniNukePickup", PointFromName("Item Spawn Point 1 - 1"));
    Wait(1.5, c_timeGame);
    while (true) {
        if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 1) || (libNtve_gf_UnitGroupIsDead(libPEB1_gv_marineEvent2Marines) == true))) {
            return true;
        }

        autoAEBAF3EC_g = libPEB1_gv_marineEvent2Marines;
        autoAEBAF3EC_u = UnitGroupCount(autoAEBAF3EC_g, c_unitCountAll);
        for (;; autoAEBAF3EC_u -= 1) {
            autoAEBAF3EC_var = UnitGroupUnitFromEnd(autoAEBAF3EC_g, autoAEBAF3EC_u);
            if (autoAEBAF3EC_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(autoAEBAF3EC_var, RegionCircle(PointFromName("Marine Event 2 Despawn Point"), 1.0)) == true)) {
                UnitRemove(autoAEBAF3EC_var);
            }
            else {
                UnitIssueOrder(autoAEBAF3EC_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName("Marine Event 2 Despawn Point")), c_orderQueueReplace);
            }
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_MarineEvent2_Init () {
    libPEB1_gt_MarineEvent2 = TriggerCreate("libPEB1_gt_MarineEvent2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Worm 2 - 1
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_NydusWorm21_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 2))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 0, libPVEB_gv_filtersPvEEventHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("Zagara_NydusWorm_Birth", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("UI_PvEBrawl_ObjectivePing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libPEB1_gf_CreateNydusWormatPoint(PointFromName("Nydus Worm 2 - 1"), 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_NydusWorm21_Init () {
    libPEB1_gt_NydusWorm21 = TriggerCreate("libPEB1_gt_NydusWorm21_Func");
    TriggerAddEventUnitRegion(libPEB1_gt_NydusWorm21, null, RegionFromName("Nydus Worm Spawn 2 - 1"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Worm 2 - 2-4
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_NydusWorm224_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 2))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 0, libPVEB_gv_filtersPvEEventHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("Zagara_NydusWorm_Birth", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("UI_PvEBrawl_ObjectivePing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libPEB1_gf_CreateNydusWormatPoint(PointFromName("Nydus Worm 2 - 2"), 2);
    Wait(0.1, c_timeGame);
    libPEB1_gf_CreateNydusWormatPoint(PointFromName("Nydus Worm 2 - 3"), 2);
    Wait(0.1, c_timeGame);
    libPEB1_gf_CreateNydusWormatPoint(PointFromName("Nydus Worm 2 - 4"), 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_NydusWorm224_Init () {
    libPEB1_gt_NydusWorm224 = TriggerCreate("libPEB1_gt_NydusWorm224_Func");
    TriggerAddEventUnitRegion(libPEB1_gt_NydusWorm224, null, RegionFromName("Nydus Worm Spawn 2 - 2-4"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Worm 2 - 5
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_NydusWorm25_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 2))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 0, libPVEB_gv_filtersPvEEventHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("Zagara_NydusWorm_Birth", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("UI_PvEBrawl_ObjectivePing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libPEB1_gf_CreateNydusWormatPoint(PointFromName("Nydus Worm 2 - 5"), 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_NydusWorm25_Init () {
    libPEB1_gt_NydusWorm25 = TriggerCreate("libPEB1_gt_NydusWorm25_Func");
    TriggerAddEventUnitRegion(libPEB1_gt_NydusWorm25, null, RegionFromName("Nydus Worm Spawn 2 - 5"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Worm 2 - 6
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_NydusWorm26_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 2))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 0, libPVEB_gv_filtersPvEEventHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("Zagara_NydusWorm_Birth", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("UI_PvEBrawl_ObjectivePing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libPEB1_gf_CreateNydusWormatPoint(PointFromName("Nydus Worm 2 - 6"), 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_NydusWorm26_Init () {
    libPEB1_gt_NydusWorm26 = TriggerCreate("libPEB1_gt_NydusWorm26_Func");
    TriggerAddEventUnitRegion(libPEB1_gt_NydusWorm26, null, RegionFromName("Nydus Worm Spawn 2 - 6"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Worm 2 - 7
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_NydusWorm27_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 2))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 0, libPVEB_gv_filtersPvEEventHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("Zagara_NydusWorm_Birth", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("UI_PvEBrawl_ObjectivePing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libPEB1_gf_CreateNydusWormatPoint(PointFromName("Nydus Worm 2 - 7"), 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_NydusWorm27_Init () {
    libPEB1_gt_NydusWorm27 = TriggerCreate("libPEB1_gt_NydusWorm27_Func");
    TriggerAddEventUnitRegion(libPEB1_gt_NydusWorm27, null, RegionFromName("Nydus Worm Spawn 2 - 7"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Worm 2 - 14
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_NydusWorm214_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 2))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 0, libPVEB_gv_filtersPvEEventHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("Zagara_NydusWorm_Birth", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("UI_PvEBrawl_ObjectivePing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libPEB1_gf_CreateNydusWormatPoint(PointFromName("Nydus Worm 2 - 14"), 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_NydusWorm214_Init () {
    libPEB1_gt_NydusWorm214 = TriggerCreate("libPEB1_gt_NydusWorm214_Func");
    TriggerAddEventUnitRegion(libPEB1_gt_NydusWorm214, null, RegionFromName("Nydus Worm Spawn 2 - 14"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout - Stage 2 - Nydus Worms
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_HoldoutStage2NydusWorms_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("Zagara_NydusWorm_Birth", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("UI_PvEBrawl_ObjectivePing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libPEB1_gf_CreateNydusWormatPoint(PointFromName("Nydus Worm 2 - 8"), 2);
    Wait(0.1, c_timeGame);
    libPEB1_gf_CreateNydusWormatPoint(PointFromName("Nydus Worm 2 - 9"), 2);
    Wait(0.1, c_timeGame);
    libPEB1_gf_CreateNydusWormatPoint(PointFromName("Nydus Worm 2 - 10"), 2);
    Wait(0.1, c_timeGame);
    libPEB1_gf_CreateNydusWormatPoint(PointFromName("Nydus Worm 2 - 11"), 2);
    Wait(0.1, c_timeGame);
    libPEB1_gf_CreateNydusWormatPoint(PointFromName("Nydus Worm 2 - 12"), 2);
    Wait(0.1, c_timeGame);
    libPEB1_gf_CreateNydusWormatPoint(PointFromName("Nydus Worm 2 - 13"), 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_HoldoutStage2NydusWorms_Init () {
    libPEB1_gt_HoldoutStage2NydusWorms = TriggerCreate("libPEB1_gt_HoldoutStage2NydusWorms_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout - Stage 2 - Drop Pod Volley
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_HoldoutStage2DropPodVolley_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoC05603B7_n = 3;
    int autoC05603B7_i;

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoC05603B7_i = 1; autoC05603B7_i <= autoC05603B7_n; autoC05603B7_i += 1) {
        if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 2))) {
            return true;
        }

        libPEB1_gf_CreateDropPod(RegionRandomPoint(RegionFromId(140)), "ZergZergling", libPVEB_gf_PVEDifficultyValueInt(4, 6));
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_HoldoutStage2DropPodVolley_Init () {
    libPEB1_gt_HoldoutStage2DropPodVolley = TriggerCreate("libPEB1_gt_HoldoutStage2DropPodVolley_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cocoon Hatched
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_CocoonHatched_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true)) {
        UnitSetFacing(EventPlayerEffectUsedUnit(c_effectUnitTarget), RandomFixed(0.0, 360.0), 0.0);
        libPEB1_gf_PZETurnOnOffZergMinionAI(EventPlayerEffectUsedUnit(c_effectUnitTarget), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_CocoonHatched_Init () {
    libPEB1_gt_CocoonHatched = TriggerCreate("libPEB1_gt_CocoonHatched_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_CocoonHatched, c_playerAny, "ZergCocoonHatchedPodInitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PEB1 Phase 1 Finished
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PEB1Phase1Finished_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((UnitHasBehavior2(libPEB1_gv_slivan, "SlivanBossCastingBehavior") == false))) {
        Wait(0.0625, c_timeGame);
    }
    UnitDestroyAIThinkTree(libPEB1_gv_slivan);
    UnitIssueOrder(libPEB1_gv_slivan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    while (((UnitGetPosition(libPEB1_gv_slivan) != libPEB1_gv_pEB1SlivanPhase2Point) || (UnitOrderCount(libPEB1_gv_slivan) > 0))) {
        UnitIssueOrder(libPEB1_gv_slivan, OrderTargetingPoint(AbilityCommand("move", 0), libPEB1_gv_pEB1SlivanPhase2Point), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
    }
    UnitIssueOrder(libPEB1_gv_slivan, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitFacePoint(libPEB1_gv_slivan, libPEB1_gv_slivanSpawnPoint, 0.0);
    libPEB1_gv_pZECurrentStageCurrent = libPEB1_ge_PZEStages_Stage3BossPhase2;
    UnitBehaviorRemove(EventUnit(), "SlivanBossAbilityScan", 1);
    UnitBehaviorAdd(EventUnit(), "SlivanBossBurrowed", EventUnit(), 1);
    UnitBehaviorRemove(EventUnit(), "SlivanBossTransitionBehavior", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PEB1Phase1Finished_Init () {
    libPEB1_gt_PEB1Phase1Finished = TriggerCreate("libPEB1_gt_PEB1Phase1Finished_Func");
    TriggerAddEventUnitBehaviorChange(libPEB1_gt_PEB1Phase1Finished, UnitRefFromVariable("libPEB1_gv_slivan"), "SlivanBossPhase1Behavior", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PEB1 Phase 2 Finished
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PEB1Phase2Finished_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) == libPEB1_gv_slivan))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((DistanceBetweenPoints(UnitGetPosition(libPEB1_gv_slivan), libPEB1_gv_slivanSpawnPoint) > 2.0)) {
        UnitIssueOrder(libPEB1_gv_slivan, OrderTargetingPoint(AbilityCommand("move", 0), libPEB1_gv_slivanSpawnPoint), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    UnitCreateEffectUnit(libPEB1_gv_slivan, "SlivanBossMovetoCenterCompleteSet", libPEB1_gv_slivan);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PEB1Phase2Finished_Init () {
    libPEB1_gt_PEB1Phase2Finished = TriggerCreate("libPEB1_gt_PEB1Phase2Finished_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_PEB1Phase2Finished, c_playerAny, "SlivanBossMovetoCenterDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PEB1 Start Phase 3
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PEB1StartPhase3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) == libPEB1_gv_slivan))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEB1_gv_pZECurrentStageCurrent = libPEB1_ge_PZEStages_Stage3BossPhase3;
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SlivanBossAbilityScanDelay", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SlivanBossPhase3Behavior", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    UnitCreateAIThinkTree(libPEB1_gv_slivan);
    UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SlivanBossTransitionBehavior", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PEB1StartPhase3_Init () {
    libPEB1_gt_PEB1StartPhase3 = TriggerCreate("libPEB1_gt_PEB1StartPhase3_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_PEB1StartPhase3, c_playerAny, "SlivanBossUnburrowedDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PEB1 Phase 3 Finished
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PEB1Phase3Finished_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) == libPEB1_gv_slivan))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEB1_gv_pZECurrentStageCurrent = libPEB1_ge_PZEStages_Stage3BossPhase4;
    TriggerExecute(libPEB1_gt_PEB1Phase4Buffs, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PEB1Phase3Finished_Init () {
    libPEB1_gt_PEB1Phase3Finished = TriggerCreate("libPEB1_gt_PEB1Phase3Finished_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_PEB1Phase3Finished, c_playerAny, "SlivanBossPhase4Apply");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PEB1 Phase 4 Buffs
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PEB1Phase4Buffs_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogAbil, "SlivanBossSlimeSpit", "Cost.Cooldown.TimeUse", libCore_gv_cOMPUTER_TeamChaos, IntToString(libPVEB_gf_PVEDifficultyValueInt(5, 3)));
    CatalogFieldValueSet(c_gameCatalogAbil, "SlivanBossSpawnPods", "Cost.Cooldown.TimeUse", libCore_gv_cOMPUTER_TeamChaos, IntToString(libPVEB_gf_PVEDifficultyValueInt(12, 12)));
    CatalogFieldValueSet(c_gameCatalogEffect, "SlivanBossSlimeSpitModifyCooldown", "Cost[" + IntToString(0) + "].CooldownTimeUse", libCore_gv_cOMPUTER_TeamChaos, "1");
    CatalogFieldValueSet(c_gameCatalogEffect, "SlivanBossSpawnPodsModifyCooldown", "Cost[" + IntToString(0) + "].CooldownTimeUse", libCore_gv_cOMPUTER_TeamChaos, "1");
    CatalogFieldValueSet(c_gameCatalogEffect, "SlivanBossDrawInModifyCooldown", "Cost[" + IntToString(0) + "].CooldownTimeUse", libCore_gv_cOMPUTER_TeamChaos, "1");
    libPEB1_gv_pEB1SpawnPodsTargetCount = libPVEB_gf_PVEDifficultyValueInt(18, 24);
    UnitBehaviorAdd(libPEB1_gv_slivan, "SlivanBossDropPodPeriodicCast", libPEB1_gv_slivan, 1);
    UnitAbilityReset(libPEB1_gv_slivan, AbilityCommand("SlivanBossSlimeSpit", 0), c_spendLocationAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PEB1Phase4Buffs_Init () {
    libPEB1_gt_PEB1Phase4Buffs = TriggerCreate("libPEB1_gt_PEB1Phase4Buffs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PEB1 Phase 2 Determine Bosses
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PEB1Phase2DetermineBosses_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_zergBossGroup;
    int lv_itBoss;
    int lv_bossIndex;
    string[7] lv_availableHeroTypes;

    // Automatic Variable Declarations
    const int autoB7B7506A_ae = 6;
    const int autoB7B7506A_ai = 1;
    const int auto4E6C36FE_ae = 6;
    const int auto4E6C36FE_ai = 1;

    // Variable Initialization
    lv_zergBossGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_availableHeroTypes[1] = "Dehaka";
    lv_availableHeroTypes[2] = "Butcher";
    lv_availableHeroTypes[3] = "Kerrigan";
    lv_availableHeroTypes[4] = "Anubarak";
    lv_availableHeroTypes[5] = "Diablo";
    lv_availableHeroTypes[6] = "Stitches";
    lv_itBoss = 1;
    for ( ; ( (autoB7B7506A_ai >= 0 && lv_itBoss <= autoB7B7506A_ae) || (autoB7B7506A_ai < 0 && lv_itBoss >= autoB7B7506A_ae) ) ; lv_itBoss += autoB7B7506A_ai ) {
        PlayerGroupAdd(lv_zergBossGroup, lv_itBoss);
    }
    lv_itBoss = 1;
    for ( ; ( (auto4E6C36FE_ai >= 0 && lv_itBoss <= auto4E6C36FE_ae) || (auto4E6C36FE_ai < 0 && lv_itBoss >= auto4E6C36FE_ae) ) ; lv_itBoss += auto4E6C36FE_ai ) {
        lv_bossIndex = PlayerGroupPlayer(lv_zergBossGroup, RandomInt(1, PlayerGroupCount(lv_zergBossGroup)));
        PlayerGroupRemove(lv_zergBossGroup, lv_bossIndex);
        libPEB1_gv_pEB1SlivanZergBosses[lv_itBoss] = lv_availableHeroTypes[lv_bossIndex];
    }
    TriggerExecute(libPEB1_gt_PEB1Phase2SpawnWorms, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PEB1Phase2DetermineBosses_Init () {
    libPEB1_gt_PEB1Phase2DetermineBosses = TriggerCreate("libPEB1_gt_PEB1Phase2DetermineBosses_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_PEB1Phase2DetermineBosses, c_playerAny, "SlivanBossBurrowedInvulnerableApplyBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PEB1 Phase 2 Spawn Worms
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PEB1Phase2SpawnWorms_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_textTagIndex;
    int lv_heroIndex;
    fixed lv_wormAngle;
    fixed lv_baseWormAngle;
    fixed lv_wormDistance;
    int lv_sidePicker;

    // Automatic Variable Declarations
    const int auto6F5ED93D_ae = 3;
    const int auto6F5ED93D_ai = 1;
    const int auto45C4F7A8_n = 3;
    int auto45C4F7A8_i;

    // Variable Initialization
    lv_textTagIndex = 1;

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libPEB1_gv_pEB1BossFirstWormWave == true)) {
        libPVEB_gf_PBPrepareNPCHero(libPEB1_gv_pEB1SlivanZergBosses[1], libPEB1_gf_PZEZergBossSkin(libPEB1_gv_pEB1SlivanZergBosses[1]));
        libPVEB_gf_PBPrepareNPCHero(libPEB1_gv_pEB1SlivanZergBosses[2], libPEB1_gf_PZEZergBossSkin(libPEB1_gv_pEB1SlivanZergBosses[2]));
        libPVEB_gf_PBPrepareNPCHero(libPEB1_gv_pEB1SlivanZergBosses[3], libPEB1_gf_PZEZergBossSkin(libPEB1_gv_pEB1SlivanZergBosses[3]));
    }
    else {
        lv_textTagIndex = 4;
        lv_heroIndex = 1;
        for ( ; ( (auto6F5ED93D_ai >= 0 && lv_heroIndex <= auto6F5ED93D_ae) || (auto6F5ED93D_ai < 0 && lv_heroIndex >= auto6F5ED93D_ae) ) ; lv_heroIndex += auto6F5ED93D_ai ) {
            if ((UnitIsAlive(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_pEB1SlivanZergBosses[lv_heroIndex])) == false)) {
                libPVEB_gf_PBResetNPCHero(libPEB1_gv_pEB1SlivanZergBosses[lv_heroIndex]);
            }

        }
        libPVEB_gf_PBPrepareNPCHero(libPEB1_gv_pEB1SlivanZergBosses[4], libPEB1_gf_PZEZergBossSkin(libPEB1_gv_pEB1SlivanZergBosses[4]));
        libPVEB_gf_PBPrepareNPCHero(libPEB1_gv_pEB1SlivanZergBosses[5], libPEB1_gf_PZEZergBossSkin(libPEB1_gv_pEB1SlivanZergBosses[5]));
        libPVEB_gf_PBPrepareNPCHero(libPEB1_gv_pEB1SlivanZergBosses[6], libPEB1_gf_PZEZergBossSkin(libPEB1_gv_pEB1SlivanZergBosses[6]));
    }
    lv_baseWormAngle = 225.0;
    lv_wormDistance = 6.0;
    lv_wormAngle = lv_baseWormAngle;
    for (auto45C4F7A8_i = 1; auto45C4F7A8_i <= auto45C4F7A8_n; auto45C4F7A8_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CoopNydusWorm", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_TeamChaos, PointWithOffsetPolar(libPEB1_gv_slivanSpawnPoint, lv_wormDistance, lv_wormAngle), null);
        UnitBehaviorAdd(UnitLastCreated(), "SlivanNydusWormSpawningDelay", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "SlivanNydusWormTimedLifeBehavior", UnitLastCreated(), 1);
        libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, libGame_gv_teamOrderIndex_C);
        TextExpressionSetToken("Param/Expression/lib_PEB1_07B123E1", "A", libPEB1_gf_PZEZergBossName(libPEB1_gv_pEB1SlivanZergBosses[lv_textTagIndex]));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_PEB1_07B123E1"), 24, UnitGetPosition(UnitLastCreated()), 4.2, true, true, PlayerGroupAll());
        libPEB1_gv_pEB1SlivanZergBossTextTags[lv_textTagIndex] = TextTagLastCreated();
        MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 5.0, Color(100.00, 0.00, 0.00));
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), "birth", "Birth 02", c_animFlagFullMatch | c_animFlagNonLooping, 0.0);
        libCore_gf_StoreIntegerForUnit(UnitLastCreated(), 1, lv_textTagIndex);
        UnitGroupAdd(libPEB1_gv_pEB1SlivanSummonedUnits, UnitLastCreated());
        if ((lv_sidePicker == 0)) {
            lv_wormDistance = 9.0;
            lv_sidePicker = RandomInt(1, 2);
        }
        else {
            lv_sidePicker = (3 - lv_sidePicker);
        }
        if ((lv_sidePicker == 1)) {
            lv_wormAngle = (lv_baseWormAngle + RandomInt(70, 80));
        }
        else {
            lv_wormAngle = (lv_baseWormAngle - RandomInt(70, 80));
        }
        lv_textTagIndex += 1;
    }
    TriggerEnable(libPEB1_gt_PEB1Phase2UnitDied, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PEB1Phase2SpawnWorms_Init () {
    libPEB1_gt_PEB1Phase2SpawnWorms = TriggerCreate("libPEB1_gt_PEB1Phase2SpawnWorms_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PEB1 Phase 2 Spawn Zerg
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PEB1Phase2SpawnZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_wormIndex;
    unit lv_nydusWorm;

    // Automatic Variable Declarations
    int autoBDC8F728_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_nydusWorm = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_wormIndex = libCore_gf_IntegerStoredForUnit(lv_nydusWorm, 1);
    autoBDC8F728_val = libPEB1_gv_pEB1SlivanWormSpawnCount[lv_wormIndex];
    if (autoBDC8F728_val == 1) {
        libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergZergling", libPVEB_gf_PVEDifficultyValueInt(3, 6));
        if ((RandomInt(1, 2) == 1)) {
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(1, 2));
        }
        else {
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(1, 2));
        }
    }
    else if (autoBDC8F728_val == 2) {
        libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergZergling", libPVEB_gf_PVEDifficultyValueInt(4, 8));
        if ((RandomInt(1, 2) == 1)) {
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(1, 2));
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(1, 1));
        }
        else {
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(1, 2));
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(1, 1));
        }
    }
    else {
        libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergZergling", libPVEB_gf_PVEDifficultyValueInt(4, 8));
        if ((RandomInt(1, 2) == 1)) {
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(1, 2));
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(1, 1));
        }
        else {
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(1, 2));
            libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(1, 1));
        }
    }
    libPEB1_gv_pEB1SlivanWormSpawnCount[lv_wormIndex] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PEB1Phase2SpawnZerg_Init () {
    libPEB1_gt_PEB1Phase2SpawnZerg = TriggerCreate("libPEB1_gt_PEB1Phase2SpawnZerg_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_PEB1Phase2SpawnZerg, c_playerAny, "SlivanNydusWormSpawnZergDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PEB1 Phase 2 Nydus Worm Timed Life Expires
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PEB1Phase2NydusWormTimedLifeExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nydusWorm;
    unit lv_itUnit;
    bool lv_lastWorm;
    unit lv_zergBoss;
    fixed lv_nydusWormLifePercent;
    const fixed lv_bossMinimumLifePercent_C = 25.0;

    // Automatic Variable Declarations
    unitgroup auto91A1A5DB_g;
    int auto91A1A5DB_u;
    const int autoB239390E_n = 2;
    int autoB239390E_i;

    // Variable Initialization
    lv_lastWorm = true;

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_nydusWorm = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_nydusWormLifePercent = UnitGetPropertyFixed(lv_nydusWorm, c_unitPropLifePercent, c_unitPropCurrent);
    libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergZergling", libPVEB_gf_PVEDifficultyValueInt(4, 8));
    libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(1, 2));
    libPEB1_gf_CreateNydusWormUnits(lv_nydusWorm, "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(1, 2));
    libPVEB_gf_PBSpawnNPCHero(libPEB1_gv_pEB1SlivanZergBosses[libCore_gf_IntegerStoredForUnit(lv_nydusWorm, 1)], UnitGetPosition(lv_nydusWorm), libPEB1_gv_zergHeroLevel[3]);
    lv_zergBoss = libPVEB_gv_pBNPCHeroes[libPVEB_gf_PBNPCHeroIndex(libPEB1_gv_pEB1SlivanZergBosses[libCore_gf_IntegerStoredForUnit(lv_nydusWorm, 1)])].lv_heroUnit;
    UnitBehaviorAdd(lv_zergBoss, "SlivanNydusZergBossAbilityDelay", lv_zergBoss, 1);
    UnitGroupAdd(libPEB1_gv_pEB1SlivanSummonedUnits, lv_zergBoss);
    libPEB1_gf_PZETurnOnOffZergBossAI(lv_zergBoss, true);
    TextTagDestroy(libPEB1_gv_pEB1SlivanZergBossTextTags[libCore_gf_IntegerStoredForUnit(lv_nydusWorm, 1)]);
    UnitGroupRemove(libPEB1_gv_pEB1SlivanSummonedUnits, lv_nydusWorm);
    UnitKill(lv_nydusWorm);
    auto91A1A5DB_g = libPEB1_gv_pEB1SlivanSummonedUnits;
    auto91A1A5DB_u = UnitGroupCount(auto91A1A5DB_g, c_unitCountAll);
    for (;; auto91A1A5DB_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto91A1A5DB_g, auto91A1A5DB_u);
        if (lv_itUnit == null) { break; }
        if ((UnitGetType(lv_itUnit) == "CoopNydusWorm")) {
            lv_lastWorm = false;
        }

    }
    if ((lv_lastWorm == true)) {
        TimerStart(libPEB1_gv_pEB1SlivanBossKillTimer, libPEB1_gv_pEB1SlivanBossKillTimeAllowed_C, false, c_timeGame);
    }

    for (autoB239390E_i = 1; autoB239390E_i <= autoB239390E_n; autoB239390E_i += 1) {
        Wait(0.0625, c_timeGame);
        UnitSetPropertyFixed(lv_zergBoss, c_unitPropLifePercent, (lv_bossMinimumLifePercent_C + ((100 - lv_bossMinimumLifePercent_C) * (lv_nydusWormLifePercent / 100))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PEB1Phase2NydusWormTimedLifeExpires_Init () {
    libPEB1_gt_PEB1Phase2NydusWormTimedLifeExpires = TriggerCreate("libPEB1_gt_PEB1Phase2NydusWormTimedLifeExpires_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_PEB1Phase2NydusWormTimedLifeExpires, c_playerAny, "SlivanNydusWormSpawnBossDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PEB1 Phase 2 Boss Kill Timer Expires
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PEB1Phase2BossKillTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enemyHeroesAlive;
    int lv_heroIndex;

    // Automatic Variable Declarations
    playergroup auto34E2DA5B_g;
    int auto34E2DA5B_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libPEB1_gv_pEB1BossFirstWormWave == true)) {
        libPEB1_gv_pEB1BossFirstWormWave = false;
        while (true) {
            lv_enemyHeroesAlive = 0;
            auto34E2DA5B_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
            auto34E2DA5B_var = -1;
            while (true) {
                	auto34E2DA5B_var = PlayerGroupNextPlayer(auto34E2DA5B_g, auto34E2DA5B_var);
                	if (auto34E2DA5B_var<0) { break; }
                	if ((UnitIsAlive(libGame_gv_players[auto34E2DA5B_var].lv_heroUnit) == true)) {
                    lv_enemyHeroesAlive += 1;
                }

            }
            if ((lv_enemyHeroesAlive <= 2)) {
                break;
            }

            Wait(1.0, c_timeGame);
            if (((libGame_gv_gameOver == true) || (UnitIsAlive(libPEB1_gv_slivan) == false))) {
                return true;
            }

        }
        TriggerExecute(libPEB1_gt_PEB1Phase2SpawnWorms, true, false);
    }
    else {
        TriggerEnable(libPEB1_gt_PEB1Phase2UnitDied, false);
        UnitBehaviorRemove(libPEB1_gv_slivan, "SlivanBossPhase2Behavior", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PEB1Phase2BossKillTimerExpires_Init () {
    libPEB1_gt_PEB1Phase2BossKillTimerExpires = TriggerCreate("libPEB1_gt_PEB1Phase2BossKillTimerExpires_Func");
    TriggerAddEventTimer(libPEB1_gt_PEB1Phase2BossKillTimerExpires, libPEB1_gv_pEB1SlivanBossKillTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PEB1 Phase 2 Unit Died
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PEB1Phase2UnitDied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;
    bool lv_lastWorm;

    // Automatic Variable Declarations
    unitgroup auto495D8A7F_g;
    int auto495D8A7F_u;

    // Variable Initialization
    lv_lastWorm = true;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libPEB1_gv_pEB1SlivanSummonedUnits, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(libPEB1_gv_pEB1SlivanSummonedUnits, EventUnit());
    if ((UnitGetType(EventUnit()) == "CoopNydusWorm")) {
        TextTagDestroy(libPEB1_gv_pEB1SlivanZergBossTextTags[libCore_gf_IntegerStoredForUnit(EventUnit(), 1)]);
    }

    if ((libNtve_gf_UnitGroupIsDead(libPEB1_gv_pEB1SlivanSummonedUnits) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TimerPause(libPEB1_gv_pEB1SlivanBossKillTimer, true);
        if ((libPEB1_gv_pEB1BossFirstWormWave == true)) {
            Wait(2.0, c_timeGame);
            libPEB1_gv_pEB1BossFirstWormWave = false;
            TriggerExecute(libPEB1_gt_PEB1Phase2SpawnWorms, true, false);
        }
        else {
            UnitBehaviorRemove(libPEB1_gv_slivan, "SlivanBossPhase2Behavior", 1);
        }
        return true;
    }

    if ((UnitGetType(EventUnit()) == "CoopNydusWorm")) {
        auto495D8A7F_g = libPEB1_gv_pEB1SlivanSummonedUnits;
        auto495D8A7F_u = UnitGroupCount(auto495D8A7F_g, c_unitCountAll);
        for (;; auto495D8A7F_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(auto495D8A7F_g, auto495D8A7F_u);
            if (lv_itUnit == null) { break; }
            if ((UnitGetType(lv_itUnit) == "CoopNydusWorm")) {
                lv_lastWorm = false;
            }

        }
        if ((lv_lastWorm == true)) {
            TimerStart(libPEB1_gv_pEB1SlivanBossKillTimer, libPEB1_gv_pEB1SlivanBossKillTimeAllowed_C, false, c_timeGame);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PEB1Phase2UnitDied_Init () {
    libPEB1_gt_PEB1Phase2UnitDied = TriggerCreate("libPEB1_gt_PEB1Phase2UnitDied_Func");
    TriggerEnable(libPEB1_gt_PEB1Phase2UnitDied, false);
    TriggerAddEventUnitDied(libPEB1_gt_PEB1Phase2UnitDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PEB1 Boss Impale Used
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PEB1BossImpaleUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_enemyHeroes;
    point lv_casterPosition;
    unit lv_targetHero;
    fixed lv_targetAngle;
    unit lv_slivan;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyHeroes = UnitGroupEmpty();
    lv_slivan = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true)) {
        lv_enemyHeroes = UnitGroupAlliance(UnitGetOwner(lv_slivan), c_unitAllianceEnemy, RegionEntireMap(), libCore_gv_filtersHeroicEnemyandnotHallucination, 0);
        if ((libPEB1_gv_pEB1BossImpaleLastTarget != null)) {
            UnitGroupRemove(lv_enemyHeroes, libPEB1_gv_pEB1BossImpaleLastTarget);
        }

        if ((libNtve_gf_UnitGroupIsDead(lv_enemyHeroes) == true)) {
            return true;
        }

        lv_casterPosition = UnitGetPosition(lv_slivan);
        lv_targetHero = UnitGroupRandomUnit(lv_enemyHeroes, c_unitCountAlive);
        UnitGroupRemove(lv_enemyHeroes, lv_targetHero);
        lv_targetAngle = AngleBetweenPoints(lv_casterPosition, UnitGetPosition(lv_targetHero));
        while ((((libPEB1_gv_pEB1BossImpaleLastAngle - lv_targetAngle) <= 10.0) || ((libPEB1_gv_pEB1BossImpaleLastAngle - lv_targetAngle) >= -10.0))) {
            if ((libNtve_gf_UnitGroupIsDead(lv_enemyHeroes) == true)) {
                break;
            }
            else {
                lv_targetHero = UnitGroupRandomUnit(lv_enemyHeroes, c_unitCountAlive);
                UnitGroupRemove(lv_enemyHeroes, lv_targetHero);
                lv_targetAngle = AngleBetweenPoints(lv_casterPosition, UnitGetPosition(lv_targetHero));
            }
        }
        libPEB1_gv_pEB1BossImpaleLastTarget = lv_targetHero;
        libPEB1_gv_pEB1BossImpaleLastAngle = lv_targetAngle;
        UnitIssueOrder(lv_slivan, OrderTargetingPoint(AbilityCommand("SlivanImpale", 0), UnitGetPosition(lv_targetHero)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PEB1BossImpaleUsed_Init () {
    libPEB1_gt_PEB1BossImpaleUsed = TriggerCreate("libPEB1_gt_PEB1BossImpaleUsed_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_PEB1BossImpaleUsed, c_playerAny, "SlivanBossImpaleDummyCastSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PEB1 Boss Drop Pod Used
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PEB1BossDropPodUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_enemyHeroes;
    unit lv_proposedTarget;
    point lv_proposedPoint;

    // Automatic Variable Declarations
    int auto1291648A_val;

    // Variable Initialization
    lv_enemyHeroes = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true)) {
        lv_enemyHeroes = UnitGroupAlliance(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), c_unitAllianceEnemy, RegionEntireMap(), libCore_gv_filtersHeroicEnemyandnotHallucination, 0);
        if ((libPEB1_gv_pEB1BossDropPodLastTarget != null)) {
            UnitGroupRemove(lv_enemyHeroes, libPEB1_gv_pEB1BossDropPodLastTarget);
        }

        if ((libNtve_gf_UnitGroupIsDead(lv_enemyHeroes) == true)) {
            return true;
        }

        while (true) {
            lv_proposedTarget = UnitGroupRandomUnit(lv_enemyHeroes, c_unitCountAlive);
            lv_proposedPoint = PointWithOffsetPolar(UnitGetPosition(lv_proposedTarget), RandomInt(2, 4), libNtve_gf_RandomAngle());
            if (((PointPathingPassable(lv_proposedPoint) == false) || (DistanceBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_proposedPoint) <= 5.0))) {
                continue;
            }

            libPEB1_gv_pEB1BossDropPodLastTarget = lv_proposedTarget;
            auto1291648A_val = RandomInt(1, 2);
            if (auto1291648A_val == 1) {
                libPEB1_gf_CreateDropPod(lv_proposedPoint, "ZergZergling", libPVEB_gf_PVEDifficultyValueInt(2, 4));
                libPEB1_gf_CreateDropPod(lv_proposedPoint, "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(1, 2));
                libPEB1_gf_CreateDropPod(lv_proposedPoint, "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(1, 1));
            }
            else if (auto1291648A_val == 2) {
                libPEB1_gf_CreateDropPod(lv_proposedPoint, "ZergZergling", libPVEB_gf_PVEDifficultyValueInt(2, 4));
                libPEB1_gf_CreateDropPod(lv_proposedPoint, "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(1, 1));
                libPEB1_gf_CreateDropPod(lv_proposedPoint, "ZergHydralisk", libPVEB_gf_PVEDifficultyValueInt(1, 2));
            }
            else {
            }
            return true;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PEB1BossDropPodUsed_Init () {
    libPEB1_gt_PEB1BossDropPodUsed = TriggerCreate("libPEB1_gt_PEB1BossDropPodUsed_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_PEB1BossDropPodUsed, c_playerAny, "SlivanBossBurrowedDropPodDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PEB1 Spawn Pods Used
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PEB1SpawnPodsUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true)) {
        libPEB1_gf_PEB1SpawnPodsLocationLogic(libPEB1_gv_pEB1SpawnPodsTargetCount, EventPlayerEffectUsedUnit(c_effectUnitCaster));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PEB1SpawnPodsUsed_Init () {
    libPEB1_gt_PEB1SpawnPodsUsed = TriggerCreate("libPEB1_gt_PEB1SpawnPodsUsed_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_PEB1SpawnPodsUsed, c_playerAny, "SlivanBossSpawnPodsTriggerDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Slivan Balance Numbers
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_InitSlivanBalanceNumbers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogUnit, "SlivanBoss", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, IntToString(libPVEB_gf_PVEDifficultyValueInt(135000, 180000)));
    CatalogFieldValueSet(c_gameCatalogUnit, "SlivanBoss", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, IntToString(libPVEB_gf_PVEDifficultyValueInt(135000, 180000)));
    CatalogFieldValueSet(c_gameCatalogBehavior, "SlivanBossDropPodPeriodicCast", "Period", libCore_gv_cOMPUTER_TeamChaos, IntToString(libPVEB_gf_PVEDifficultyValueInt(12, 9)));
    CatalogFieldValueSet(c_gameCatalogBehavior, "SlivanBossImpalePeriodicCast", "Period", libCore_gv_cOMPUTER_TeamChaos, IntToString(libPVEB_gf_PVEDifficultyValueInt(10, 7)));
    libPEB1_gv_pEB1SpawnPodsTargetCount = libPVEB_gf_PVEDifficultyValueInt(12, 18);
    CatalogFieldValueSet(c_gameCatalogEffect, "SlivanBossWeaponDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, IntToString(libPVEB_gf_PVEDifficultyValueInt(400, 560)));
    CatalogFieldValueSet(c_gameCatalogEffect, "SlivanBossDrawInPullDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, IntToString(libPVEB_gf_PVEDifficultyValueInt(350, 490)));
    CatalogFieldValueSet(c_gameCatalogEffect, "SlivanBossDrawInStunDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, IntToString(libPVEB_gf_PVEDifficultyValueInt(350, 490)));
    CatalogFieldValueSet(c_gameCatalogEffect, "SlivanBossImpaleDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, IntToString(libPVEB_gf_PVEDifficultyValueInt(500, 700)));
    CatalogFieldValueSet(c_gameCatalogEffect, "SlivanBossSlimeSpitDoTDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, IntToString(libPVEB_gf_PVEDifficultyValueInt(420, 588)));
    CatalogFieldValueSet(c_gameCatalogEffect, "SlivanPodImpactDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, IntToString(libPVEB_gf_PVEDifficultyValueInt(150, 210)));
    CatalogFieldValueSet(c_gameCatalogEffect, "SlivanPodDoTDamage", "Amount", libCore_gv_cOMPUTER_TeamChaos, IntToString(libPVEB_gf_PVEDifficultyValueInt(120, 168)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_InitSlivanBalanceNumbers_Init () {
    libPEB1_gt_InitSlivanBalanceNumbers = TriggerCreate("libPEB1_gt_InitSlivanBalanceNumbers_Func");
    libPESC_gf_HardModeActivated(libPEB1_gt_InitSlivanBalanceNumbers);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pre Slivan Fight Data Updates
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PreSlivanFightDataUpdates_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogUnit, "CoopNydusWorm", "LifeStart", libCore_gv_cOMPUTER_TeamChaos, IntToString(libPVEB_gf_PVEDifficultyValueInt(12300, 17220)));
    CatalogFieldValueSet(c_gameCatalogUnit, "CoopNydusWorm", "LifeMax", libCore_gv_cOMPUTER_TeamChaos, IntToString(libPVEB_gf_PVEDifficultyValueInt(12300, 17220)));
    CatalogFieldValueSet(c_gameCatalogActor, "CoopNydusWorm", "CustomUnitStatusFrame", libCore_gv_cOMPUTER_TeamChaos, "StarcraftPvEUI/BossNydusWormStatusFrameTemplate");
    CatalogFieldValueSet(c_gameCatalogBehavior, "SlivanNydusWormTimedLifeBehavior", "Duration", libCore_gv_cOMPUTER_TeamChaos, IntToString(libPVEB_gf_PVEDifficultyValueInt(14, 14)));
    CatalogFieldValueSet(c_gameCatalogBehavior, "SlivanNydusWormSpawningDelay", "Duration", libCore_gv_cOMPUTER_TeamChaos, IntToString(libPVEB_gf_PVEDifficultyValueInt(3, 3)));
    CatalogFieldValueSet(c_gameCatalogBehavior, "SlivanNydusWormSpawningBehavior", "Period", libCore_gv_cOMPUTER_TeamChaos, IntToString(libPVEB_gf_PVEDifficultyValueInt(6, 6)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PreSlivanFightDataUpdates_Init () {
    libPEB1_gt_PreSlivanFightDataUpdates = TriggerCreate("libPEB1_gt_PreSlivanFightDataUpdates_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Phase 4 Buffs Baseline
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_SlivanPhase4BuffsBaseline_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEB1_gv_pEB1SpawnPodsTargetCount = libPVEB_gf_PVEDifficultyValueInt(12, 18);
    CatalogFieldValueSet(c_gameCatalogAbil, "SlivanBossSlimeSpit", "Cost.Cooldown.TimeUse", libCore_gv_cOMPUTER_TeamChaos, IntToString(7));
    CatalogFieldValueSet(c_gameCatalogAbil, "SlivanBossSpawnPods", "Cost.Cooldown.TimeUse", libCore_gv_cOMPUTER_TeamChaos, IntToString(14));
    CatalogFieldValueSet(c_gameCatalogEffect, "SlivanBossSlimeSpitModifyCooldown", "Cost[" + IntToString(0) + "].CooldownTimeUse", libCore_gv_cOMPUTER_TeamChaos, "3");
    CatalogFieldValueSet(c_gameCatalogEffect, "SlivanBossSpawnPodsModifyCooldown", "Cost[" + IntToString(0) + "].CooldownTimeUse", libCore_gv_cOMPUTER_TeamChaos, "3");
    CatalogFieldValueSet(c_gameCatalogEffect, "SlivanBossDrawInModifyCooldown", "Cost[" + IntToString(0) + "].CooldownTimeUse", libCore_gv_cOMPUTER_TeamChaos, "3");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_SlivanPhase4BuffsBaseline_Init () {
    libPEB1_gt_SlivanPhase4BuffsBaseline = TriggerCreate("libPEB1_gt_SlivanPhase4BuffsBaseline_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Slivan
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_SpawnSlivan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(libPEB1_gt_PreSlivanFightDataUpdates, true, false);
    Wait(1.5, c_timeGame);
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "SlivanBoss", 0, libStEx_gv_pLAYER_12_CHAOS, libPEB1_gv_slivanSpawnPoint, null);
    libPEB1_gv_slivan = UnitLastCreated();
    libPEB1_gf_DisplayBossPanel(libPEB1_gv_slivan);
    VisRevealerCreate(libCore_gv_cOMPUTER_TeamOrder, RegionFromName("Slivan Reveal"));
    libPEB1_gv_slivanRevealer = VisRevealerLastCreated();
    TriggerEnable(libPEB1_gt_SlivanDies, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_SpawnSlivan_Init () {
    libPEB1_gt_SpawnSlivan = TriggerCreate("libPEB1_gt_SpawnSlivan_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Dies
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_SlivanDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9C28272B_g;
    int auto9C28272B_u;
    unit auto9C28272B_var;
    unitgroup auto71F5D142_g;
    int auto71F5D142_u;
    unit auto71F5D142_var;
    unitgroup auto573842CC_g;
    int auto573842CC_u;
    unit auto573842CC_var;
    unitgroup autoE686DA3F_g;
    int autoE686DA3F_u;
    unit autoE686DA3F_var;
    const int autoB0CAC648_n = 6;
    int autoB0CAC648_i;
    unitgroup auto6EB5405A_g;
    int auto6EB5405A_u;
    unit auto6EB5405A_var;
    unitgroup autoB7229B54_g;
    int autoB7229B54_u;
    unit autoB7229B54_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((EventUnit() == null)) {
        libPEB1_gv_victoryPanPoint = PointFromName("Slivan Spawn");
    }
    else {
        libPEB1_gv_victoryPanPoint = UnitGetPosition(EventUnit());
    }
    libPEB1_gf_ShowHideBossPanel(false);
    TriggerExecute(libPEB1_gt_VictorySequence, true, false);
    auto9C28272B_g = UnitGroup("PVESpecialAbilityPickupUnit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9C28272B_u = UnitGroupCount(auto9C28272B_g, c_unitCountAll);
    for (;; auto9C28272B_u -= 1) {
        auto9C28272B_var = UnitGroupUnitFromEnd(auto9C28272B_g, auto9C28272B_u);
        if (auto9C28272B_var == null) { break; }
    }
    auto71F5D142_g = UnitGroup(null, libCore_gv_cOMPUTER_TeamChaos, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto71F5D142_u = UnitGroupCount(auto71F5D142_g, c_unitCountAll);
    for (;; auto71F5D142_u -= 1) {
        auto71F5D142_var = UnitGroupUnitFromEnd(auto71F5D142_g, auto71F5D142_u);
        if (auto71F5D142_var == null) { break; }
        UnitCreateEffectUnit(auto71F5D142_var, "Kill", auto71F5D142_var);
    }
    auto573842CC_g = UnitGroup(null, libCore_gv_cOMPUTER_TeamChaos, RegionEntireMap(), UnitFilter((1 << c_targetFilterMissile), 0, 0, 0), 0);
    auto573842CC_u = UnitGroupCount(auto573842CC_g, c_unitCountAll);
    for (;; auto573842CC_u -= 1) {
        auto573842CC_var = UnitGroupUnitFromEnd(auto573842CC_g, auto573842CC_u);
        if (auto573842CC_var == null) { break; }
        UnitRemove(auto573842CC_var);
    }
    autoE686DA3F_g = UnitGroupAlliance(libGame_gv_teamOrderIndex_C, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE686DA3F_u = UnitGroupCount(autoE686DA3F_g, c_unitCountAll);
    for (;; autoE686DA3F_u -= 1) {
        autoE686DA3F_var = UnitGroupUnitFromEnd(autoE686DA3F_g, autoE686DA3F_u);
        if (autoE686DA3F_var == null) { break; }
        UnitIssueOrder(autoE686DA3F_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    Wait(0.125, c_timeGame);
    UnitPauseAll(true);
    for (autoB0CAC648_i = 1; autoB0CAC648_i <= autoB0CAC648_n; autoB0CAC648_i += 1) {
        Wait(0.5, c_timeGame);
        auto6EB5405A_g = UnitGroup(null, libCore_gv_cOMPUTER_TeamChaos, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6EB5405A_u = UnitGroupCount(auto6EB5405A_g, c_unitCountAll);
        for (;; auto6EB5405A_u -= 1) {
            auto6EB5405A_var = UnitGroupUnitFromEnd(auto6EB5405A_g, auto6EB5405A_u);
            if (auto6EB5405A_var == null) { break; }
            UnitCreateEffectUnit(auto6EB5405A_var, "Kill", auto6EB5405A_var);
        }
        autoB7229B54_g = UnitGroup(null, libCore_gv_cOMPUTER_TeamChaos, RegionEntireMap(), UnitFilter((1 << c_targetFilterMissile), 0, 0, 0), 0);
        autoB7229B54_u = UnitGroupCount(autoB7229B54_g, c_unitCountAll);
        for (;; autoB7229B54_u -= 1) {
            autoB7229B54_var = UnitGroupUnitFromEnd(autoB7229B54_g, autoB7229B54_u);
            if (autoB7229B54_var == null) { break; }
            UnitRemove(autoB7229B54_var);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_SlivanDies_Init () {
    libPEB1_gt_SlivanDies = TriggerCreate("libPEB1_gt_SlivanDies_Func");
    TriggerEnable(libPEB1_gt_SlivanDies, false);
    TriggerAddEventUnitDied(libPEB1_gt_SlivanDies, UnitRefFromVariable("libPEB1_gv_slivan"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan - Poison Overlay
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_SlivanPoisonOverlay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoD7497882_val;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), UnitGetOwner(EventUnit())) == true) && (EventUnit() == libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit)) {
        autoD7497882_val = EventUnitBehaviorChange();
        if (autoD7497882_val == c_unitBehaviorChangeActivate) {
            libUIUI_gf_FullscreenOverlayAddItemForPlayer(UnitGetOwner(EventUnit()), libUIUI_ge_FullscreenOverlayPriorities_VoidPrison, "Cutscenes\\GameUI_PoisonOverlay.StormCutscene", "SlivanBossSlimeSpitDoT");
        }
        else if (autoD7497882_val == c_unitBehaviorChangeDeactivate) {
            libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(UnitGetOwner(EventUnit()), "Cutscenes\\GameUI_PoisonOverlay.StormCutscene", "SlivanBossSlimeSpitDoT");
        }
        else {
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_SlivanPoisonOverlay_Init () {
    libPEB1_gt_SlivanPoisonOverlay = TriggerCreate("libPEB1_gt_SlivanPoisonOverlay_Func");
    TriggerAddEventUnitBehaviorChange(libPEB1_gt_SlivanPoisonOverlay, null, "SlivanBossSlimeSpitDoT", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout - Stage 1
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_HoldoutStage1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_durationRemaining;
    int lv_countdownTextTag;
    int lv_spawnRegion;
    int lv_playerIndex;
    int lv_zergRemaining;

    // Automatic Variable Declarations
    unitgroup autoA4B37B84_g;
    int autoA4B37B84_u;
    unit autoA4B37B84_var;
    unitgroup autoA548C63D_g;
    int autoA548C63D_u;
    unit autoA548C63D_var;
    int auto215F1BD3_n;
    int auto215F1BD3_i;
    int auto541C8D27_n;
    int auto541C8D27_i;
    int autoEA66EFC7_n;
    int autoEA66EFC7_i;
    int autoBB643259_n;
    int autoBB643259_i;
    unitgroup auto4142A8CB_g;
    int auto4142A8CB_u;
    unit auto4142A8CB_var;
    unitgroup auto02FD701D_g;
    int auto02FD701D_u;
    unit auto02FD701D_var;
    unitgroup autoF517BD4F_g;
    int autoF517BD4F_u;
    unit autoF517BD4F_var;
    unitgroup auto1D56FD3C_g;
    int auto1D56FD3C_u;
    unit auto1D56FD3C_var;
    unitgroup auto881718EB_g;
    int auto881718EB_u;
    unit auto881718EB_var;
    unitgroup autoAF053F9A_g;
    int autoAF053F9A_u;
    unit autoAF053F9A_var;
    unitgroup autoDD299986_g;
    int autoDD299986_u;
    unit autoDD299986_var;
    playergroup autoCB8BE149_g;

    // Variable Initialization
    lv_countdownTextTag = c_textTagNone;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 1))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 0, libPVEB_gv_filtersPvEEventHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPEB1_gv_pZECurrentStageCurrent = libPEB1_ge_PZEStages_Stage1Holdout;
    UnitKill(libPEB1_gv_checkpoints[1].lv_beacon);
    libPEB1_gv_pauseHeroRevival = true;
    libPEB1_gv_holdoutStage1Started = true;
    libPEB1_gv_zergHeroGraceCounter = 0;
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Holdout1MusicPart1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerExecute(libPEB1_gt_CheckpointAdmissionProtocolStage1Q, true, false);
    lv_durationRemaining = 60;
    TimerStart(libPEB1_gv_holdoutTimer, 60.0, false, c_timeGame);
    libPEB1_gf_DisplayHoldoutPanel(libPEB1_ge_PZEHoldoutPanelState_OnTimer, libPEB1_gv_holdoutTimer);
    TextExpressionSetToken("Param/Expression/lib_PEB1_53ADFC75", "A", FixedToText(TimerGetRemaining(libPEB1_gv_holdoutTimer), 0));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_PEB1_53ADFC75"), 40, UnitGetPosition(libPEB1_gv_checkpoints[1].lv_entryGate), 1.0, true, false, PlayerGroupAll());
    lv_countdownTextTag = TextTagLastCreated();
    VisRevealArea(libCore_gv_cOMPUTER_TeamOrder, libPEB1_gv_checkpoints[1].lv_frontRegion, 0.0, false);
    autoA4B37B84_g = UnitGroup(null, libStEx_gv_pLAYER_11_ORDER, RegionFromName("Initial Exploration"), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA4B37B84_u = UnitGroupCount(autoA4B37B84_g, c_unitCountAll);
    for (;; autoA4B37B84_u -= 1) {
        autoA4B37B84_var = UnitGroupUnitFromEnd(autoA4B37B84_g, autoA4B37B84_u);
        if (autoA4B37B84_var == null) { break; }
        UnitSetPropertyFixed(autoA4B37B84_var, c_unitPropLife, 1.0);
    }
    autoA548C63D_g = UnitGroup("MurkyRespawnEgg", c_playerAny, RegionFromName("Murky Safety 1"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA548C63D_u = UnitGroupCount(autoA548C63D_g, c_unitCountAll);
    for (;; autoA548C63D_u -= 1) {
        autoA548C63D_var = UnitGroupUnitFromEnd(autoA548C63D_g, autoA548C63D_u);
        if (autoA548C63D_var == null) { break; }
        if ((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, UnitGetOwner(autoA548C63D_var)) == true)) {
            UnitCreateEffectUnit(autoA548C63D_var, "Kill", autoA548C63D_var);
        }

    }
    while (true) {
        Wait(1.0, c_timeGame);
        if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 1))) {
            TextTagDestroy(lv_countdownTextTag);
            return true;
        }

        lv_durationRemaining = FixedToInt(TimerGetRemaining(libPEB1_gv_holdoutTimer));
        if ((TimerGetRemaining(libPEB1_gv_holdoutTimer) < 0.1)) {
            break;
        }

        TextExpressionSetToken("Param/Expression/lib_PEB1_D1776699", "A", FixedToText(TimerGetRemaining(libPEB1_gv_holdoutTimer), 0));
        TextTagSetText(lv_countdownTextTag, TextExpressionAssemble("Param/Expression/lib_PEB1_D1776699"));
        if ((lv_durationRemaining == 12)) {
            TriggerExecute(libPEB1_gt_CheckpointOpenin10Stage1Q, true, false);
        }

        if ((ModI(lv_durationRemaining, 5) == 0)) {
            SoundPlayAtPointForPlayer(SoundLink("Zagara_Hydralisk_Unburrow", -1), c_maxPlayers, PlayerGroupAll(), RegionGetCenter(RegionFromName("Holdout 1 Unburrow Region")), 0.0, 100.0, 0.0);
            auto215F1BD3_n = libPVEB_gf_PVEDifficultyValueInt(6, 8);
            for (auto215F1BD3_i = 1; auto215F1BD3_i <= auto215F1BD3_n; auto215F1BD3_i += 1) {
                libPEB1_gf_UnburrowZerg("ZergZergling", RegionRandomPoint(RegionFromName("Holdout 1 Unburrow Region")));
            }
        }

        if ((ModI(lv_durationRemaining, 10) == 0)) {
            auto541C8D27_n = libPVEB_gf_PVEDifficultyValueInt(1, 2);
            for (auto541C8D27_i = 1; auto541C8D27_i <= auto541C8D27_n; auto541C8D27_i += 1) {
                libPEB1_gf_UnburrowZerg("ZergHydralisk", RegionRandomPoint(RegionFromName("Holdout 1 Unburrow Region")));
            }
        }

        if (((lv_durationRemaining == 55) || (lv_durationRemaining == 35) || (lv_durationRemaining == 20) || (lv_durationRemaining == 10))) {
            libNtve_gf_StopTimer(libPEB1_gv_zergHeroEventWaitTimer);
            libPEB1_gf_ReviveZergHeroes(1);
        }

        if ((lv_durationRemaining == 10)) {
            autoEA66EFC7_n = libPVEB_gf_PVEDifficultyValueInt(12, 16);
            for (autoEA66EFC7_i = 1; autoEA66EFC7_i <= autoEA66EFC7_n; autoEA66EFC7_i += 1) {
                libPEB1_gf_UnburrowZerg("ZergZergling", RegionRandomPoint(RegionFromName("Holdout 1 Unburrow Region")));
            }
        }

        if ((lv_durationRemaining == 5)) {
            autoBB643259_n = libPVEB_gf_PVEDifficultyValueInt(2, 3);
            for (autoBB643259_i = 1; autoBB643259_i <= autoBB643259_n; autoBB643259_i += 1) {
                libPEB1_gf_UnburrowZerg("ZergHydralisk", RegionRandomPoint(RegionFromName("Holdout 1 Unburrow Region")));
            }
        }

        if ((lv_durationRemaining == 5)) {
            TriggerStop(libPEB1_gt_ZergWavesStage1);
            libPEB1_gv_zergHeroes[1][1].lv_active = false;
            libPEB1_gv_zergHeroes[1][2].lv_active = false;
            libPEB1_gv_zergHeroes[1][3].lv_active = false;
            libPEB1_gv_zergHeroes[1][4].lv_active = false;
            libPEB1_gv_zergHeroes[1][5].lv_active = false;
            libPEB1_gv_pauseNydusSpawning = true;
        }

    }
    ActorSend(libNtve_gf_MainActorofUnit(libPEB1_gv_checkpoints[1].lv_entryGate), "Signal PrePlayBuild");
    SoundStop(libPEB1_gv_checkpoints[1].lv_entryGateZergSound, true);
    auto4142A8CB_g = UnitGroup("MurkyRespawnEgg", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4142A8CB_u = UnitGroupCount(auto4142A8CB_g, c_unitCountAll);
    for (;; auto4142A8CB_u -= 1) {
        auto4142A8CB_var = UnitGroupUnitFromEnd(auto4142A8CB_g, auto4142A8CB_u);
        if (auto4142A8CB_var == null) { break; }
        if ((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, UnitGetOwner(auto4142A8CB_var)) == true)) {
            UnitCreateEffectUnit(auto4142A8CB_var, "Kill", auto4142A8CB_var);
        }

    }
    auto02FD701D_g = UnitGroup("CoopNydusWorm", libCore_gv_cOMPUTER_TeamChaos, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto02FD701D_u = UnitGroupCount(auto02FD701D_g, c_unitCountAll);
    for (;; auto02FD701D_u -= 1) {
        auto02FD701D_var = UnitGroupUnitFromEnd(auto02FD701D_g, auto02FD701D_u);
        if (auto02FD701D_var == null) { break; }
        UnitCreateEffectUnit(auto02FD701D_var, "Kill", auto02FD701D_var);
    }
    autoF517BD4F_g = libPEB1_gv_activeZergMinions;
    autoF517BD4F_u = UnitGroupCount(autoF517BD4F_g, c_unitCountAll);
    for (;; autoF517BD4F_u -= 1) {
        autoF517BD4F_var = UnitGroupUnitFromEnd(autoF517BD4F_g, autoF517BD4F_u);
        if (autoF517BD4F_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(autoF517BD4F_var, true, libStEx_gv_pLAYER_11_ORDER);
    }
    auto1D56FD3C_g = libPEB1_gv_activeZergHeroes;
    auto1D56FD3C_u = UnitGroupCount(auto1D56FD3C_g, c_unitCountAll);
    for (;; auto1D56FD3C_u -= 1) {
        auto1D56FD3C_var = UnitGroupUnitFromEnd(auto1D56FD3C_g, auto1D56FD3C_u);
        if (auto1D56FD3C_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto1D56FD3C_var, true, libStEx_gv_pLAYER_11_ORDER);
    }
    TriggerExecute(libPEB1_gt_CheckpointOpenStage1Q, true, false);
    libNtve_gf_StopTimer(libPEB1_gv_holdoutTimer);
    while (true) {
        lv_zergRemaining = (UnitGroupCount(UnitGroupFilterAlliance(libPEB1_gv_activeZergHeroes, libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceAlly, 0), c_unitCountAlive) + UnitGroupCount(UnitGroupFilterPlayer(libPEB1_gv_activeZergMinions, libCore_gv_cOMPUTER_TeamChaos, 0), c_unitCountAlive));
        if ((lv_zergRemaining == 0)) {
            break;
        }
        else {
            libPEB1_gf_SetHoldoutPanelZergRemaining(lv_zergRemaining);
            TextExpressionSetToken("Param/Expression/lib_PEB1_F54CD33D", "A", IntToText(lv_zergRemaining));
            TextTagSetText(lv_countdownTextTag, TextExpressionAssemble("Param/Expression/lib_PEB1_F54CD33D"));
        }
        Wait(1.0, c_timeGame);
        if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 1))) {
            libPEB1_gf_ShowHideHoldoutPanel(false);
            TextTagDestroy(lv_countdownTextTag);
            return true;
        }

    }
    ActorSend(libNtve_gf_MainActorofUnit(libPEB1_gv_checkpoints[1].lv_entryGate), "Signal PlayBuild");
    libPEB1_gv_checkpointGate1Opening = true;
    SoundPlayForPlayer(SoundLink("UI_Game_Ping_Shrine_Ready", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libPEB1_gf_SetHoldoutPanelDoorOpened();
    TextTagDestroy(lv_countdownTextTag);
    Wait(3.0, c_timeGame);
    VisRevealArea(libStEx_gv_pLAYER_11_ORDER, libPEB1_gv_checkpoints[1].lv_eventCompleteTriggerRegion, 0.0, false);
    auto881718EB_g = libPEB1_gv_checkpoints[1].lv_blockers1;
    auto881718EB_u = UnitGroupCount(auto881718EB_g, c_unitCountAll);
    for (;; auto881718EB_u -= 1) {
        auto881718EB_var = UnitGroupUnitFromEnd(auto881718EB_g, auto881718EB_u);
        if (auto881718EB_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto881718EB_var, false);
    }
    autoAF053F9A_g = libPEB1_gv_checkpoints[1].lv_entryWalls;
    autoAF053F9A_u = UnitGroupCount(autoAF053F9A_g, c_unitCountAll);
    for (;; autoAF053F9A_u -= 1) {
        autoAF053F9A_var = UnitGroupUnitFromEnd(autoAF053F9A_g, autoAF053F9A_u);
        if (autoAF053F9A_var == null) { break; }
        UnitSetOwner(autoAF053F9A_var, libStEx_gv_pLAYER_11_ORDER, true);
    }
    autoDD299986_g = libPEB1_gv_checkpoints[1].lv_exitWalls;
    autoDD299986_u = UnitGroupCount(autoDD299986_g, c_unitCountAll);
    for (;; autoDD299986_u -= 1) {
        autoDD299986_var = UnitGroupUnitFromEnd(autoDD299986_g, autoDD299986_u);
        if (autoDD299986_var == null) { break; }
        UnitSetOwner(autoDD299986_var, libStEx_gv_pLAYER_11_ORDER, true);
    }
    while (true) {
        Wait(1.0, c_timeGame);
        if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 1))) {
            return true;
        }

        autoCB8BE149_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
        lv_playerIndex = -1;
        while (true) {
            	lv_playerIndex = PlayerGroupNextPlayer(autoCB8BE149_g, lv_playerIndex);
            	if (lv_playerIndex<0) { break; }
            	if ((UnitIsAlive(libGame_gv_players[lv_playerIndex].lv_heroUnit) == true) && (libNtve_gf_UnitInRegion(libGame_gv_players[lv_playerIndex].lv_heroUnit, libPEB1_gv_checkpoints[1].lv_eventCompleteTriggerRegion) == true)) {
                TriggerEnable(libPEB1_gt_DEBUGStage2, false);
                libPEB1_gf_ShowHideHoldoutPanel(false);
                CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
                TriggerExecute(libPEB1_gt_TransitiontoStage2, true, false);
                return true;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_HoldoutStage1_Init () {
    libPEB1_gt_HoldoutStage1 = TriggerCreate("libPEB1_gt_HoldoutStage1_Func");
    TriggerAddEventUnitRegion(libPEB1_gt_HoldoutStage1, null, RegionFromName("Checkpoint 1 Beacon Region"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleanup Stage 1
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_CleanupStage1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zergHeroIndex;
    int lv_itPlayerIndex;

    // Automatic Variable Declarations
    playergroup autoC3526C59_g;
    unitgroup autoE0320103_g;
    int autoE0320103_u;
    unit autoE0320103_var;
    unitgroup auto91ACC13A_g;
    int auto91ACC13A_u;
    unit auto91ACC13A_var;
    unitgroup auto84432505_g;
    int auto84432505_u;
    unit auto84432505_var;
    unitgroup auto5CC2753F_g;
    int auto5CC2753F_u;
    unit auto5CC2753F_var;
    unitgroup auto1A7098C1_g;
    int auto1A7098C1_u;
    unit auto1A7098C1_var;
    playergroup autoC0A9E711_g;
    const int auto439DFDAB_ae = 5;
    const int auto439DFDAB_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPEB1_gf_ShowHideHoldoutPanel(false);
    libPEB1_gv_zergHeroGraceCounter = 0;
    libPEB1_gv_zergHeroes[1][1].lv_active = false;
    libPEB1_gv_zergHeroes[1][2].lv_active = false;
    libPEB1_gv_zergHeroes[1][3].lv_active = false;
    libPEB1_gv_zergHeroes[1][4].lv_active = false;
    libPEB1_gv_zergHeroes[1][5].lv_active = false;
    autoC3526C59_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayerIndex = -1;
    while (true) {
        	lv_itPlayerIndex = PlayerGroupNextPlayer(autoC3526C59_g, lv_itPlayerIndex);
        	if (lv_itPlayerIndex<0) { break; }
        	VisExploreArea(lv_itPlayerIndex, RegionEntireMap(), false, false);
    }
    PingDestroy(libPEB1_gv_checkpoints[1].lv_ping);
    TransmissionClearAll();
    UnitKill(libPEB1_gv_checkpoints[1].lv_beacon);
    autoE0320103_g = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceAlly, libPEB1_gv_playableSpace[1], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoE0320103_u = UnitGroupCount(autoE0320103_g, c_unitCountAll);
    for (;; autoE0320103_u -= 1) {
        autoE0320103_var = UnitGroupUnitFromEnd(autoE0320103_g, autoE0320103_u);
        if (autoE0320103_var == null) { break; }
        UnitRemove(autoE0320103_var);
    }
    auto91ACC13A_g = UnitGroup("RangedMinion", c_playerAny, libPEB1_gv_playableSpace[1], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto91ACC13A_u = UnitGroupCount(auto91ACC13A_g, c_unitCountAll);
    for (;; auto91ACC13A_u -= 1) {
        auto91ACC13A_var = UnitGroupUnitFromEnd(auto91ACC13A_g, auto91ACC13A_u);
        if (auto91ACC13A_var == null) { break; }
        UnitRemove(auto91ACC13A_var);
    }
    libPVEB_gf_PvEPickupDespawnPickupsInRegion(RegionEntireMap());
    auto84432505_g = libPEB1_gv_checkpoints[1].lv_blockers1;
    auto84432505_u = UnitGroupCount(auto84432505_g, c_unitCountAll);
    for (;; auto84432505_u -= 1) {
        auto84432505_var = UnitGroupUnitFromEnd(auto84432505_g, auto84432505_u);
        if (auto84432505_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto84432505_var, false);
    }
    auto5CC2753F_g = libPEB1_gv_checkpoints[1].lv_entryWalls;
    auto5CC2753F_u = UnitGroupCount(auto5CC2753F_g, c_unitCountAll);
    for (;; auto5CC2753F_u -= 1) {
        auto5CC2753F_var = UnitGroupUnitFromEnd(auto5CC2753F_g, auto5CC2753F_u);
        if (auto5CC2753F_var == null) { break; }
        UnitSetOwner(auto5CC2753F_var, libStEx_gv_pLAYER_11_ORDER, true);
    }
    auto1A7098C1_g = libPEB1_gv_checkpoints[1].lv_exitWalls;
    auto1A7098C1_u = UnitGroupCount(auto1A7098C1_g, c_unitCountAll);
    for (;; auto1A7098C1_u -= 1) {
        auto1A7098C1_var = UnitGroupUnitFromEnd(auto1A7098C1_g, auto1A7098C1_u);
        if (auto1A7098C1_var == null) { break; }
        UnitSetOwner(auto1A7098C1_var, libStEx_gv_pLAYER_11_ORDER, true);
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libPEB1_gv_checkpoints[1].lv_entryGate), c_animNameDefault, "Stand Morph A", c_animFlagPlayForever, c_animTimeDefault);
    TriggerStop(libPVEB_gt_PvEPickupPreplacedPickupVisibilityCheck);
    autoC0A9E711_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_itPlayerIndex = -1;
    while (true) {
        	lv_itPlayerIndex = PlayerGroupNextPlayer(autoC0A9E711_g, lv_itPlayerIndex);
        	if (lv_itPlayerIndex<0) { break; }
        	AIDisableForPlayer(lv_itPlayerIndex);
    }
    VisRevealArea(libCore_gv_cOMPUTER_TeamOrder, libPEB1_gv_checkpoints[1].lv_eventCompleteTriggerRegion, 0.0, false);
    VisRevealArea(libCore_gv_cOMPUTER_TeamOrder, libPEB1_gv_checkpoints[1].lv_frontRegion, 0.0, false);
    if ((libPEB1_gv_heroesPrepared[1] == true)) {
        libPEB1_gv_heroesPrepared[1] = false;
        lv_zergHeroIndex = 1;
        for ( ; ( (auto439DFDAB_ai >= 0 && lv_zergHeroIndex <= auto439DFDAB_ae) || (auto439DFDAB_ai < 0 && lv_zergHeroIndex >= auto439DFDAB_ae) ) ; lv_zergHeroIndex += auto439DFDAB_ai ) {
            libPVEB_gf_PBResetNPCHero(libPEB1_gv_zergHeroes[1][lv_zergHeroIndex].lv_hero);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_CleanupStage1_Init () {
    libPEB1_gt_CleanupStage1 = TriggerCreate("libPEB1_gt_CleanupStage1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transition to Stage 2
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_TransitiontoStage2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayerIndex;
    int lv_pointIndex;

    // Automatic Variable Declarations
    playergroup auto92C6E5AA_g;
    unitgroup auto4C1C75CD_g;
    int auto4C1C75CD_u;
    unit auto4C1C75CD_var;
    const int autoF86985C2_ae = 5;
    const int autoF86985C2_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPEB1_gv_stage1CompleteTime = FixedToInt(libUIUI_gf_HeroesGameTime());
    libPEB1_gv_pZECurrentStageCurrent = libPEB1_ge_PZEStages_Stage2PreHoldout;
    libGame_gv_announcement_SystemEnabled = false;
    libPEB1_gv_currentStage = 2;
    TriggerExecute(libPEB1_gt_XPGainFromStage1, true, false);
    TriggerExecute(libPEB1_gt_CleanupStage1, true, false);
    PointSet(PointFromName("Start Location 0012"), PointFromName("Start Location 12 - 2"));
    DialogControlSetAnimationState(libPEB1_gv_pZEMinimap, PlayerGroupAll(), "MaskState", "Part2");
    auto92C6E5AA_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayerIndex = -1;
    while (true) {
        	lv_itPlayerIndex = PlayerGroupNextPlayer(auto92C6E5AA_g, lv_itPlayerIndex);
        	if (lv_itPlayerIndex<0) { break; }
        	if ((PlayerStatus(lv_itPlayerIndex) != c_playerStatusUnused)) {
            auto4C1C75CD_g = UnitGroup(null, lv_itPlayerIndex, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto4C1C75CD_u = UnitGroupCount(auto4C1C75CD_g, c_unitCountAll);
            for (;; auto4C1C75CD_u -= 1) {
                auto4C1C75CD_var = UnitGroupUnitFromEnd(auto4C1C75CD_g, auto4C1C75CD_u);
                if (auto4C1C75CD_var == null) { break; }
                UnitCreateEffectUnit(auto4C1C75CD_var, "PVEGenericAbortMissile", auto4C1C75CD_var);
                UnitSetPosition(auto4C1C75CD_var, libPEB1_gv_checkpoints[1].lv_playerSpawnPoints[libGame_gv_players[lv_itPlayerIndex].lv_rosterSlot], false);
                UnitIssueOrder(auto4C1C75CD_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                if ((UnitTypeTestFlag(UnitGetType(auto4C1C75CD_var), c_unitFlagTurnable) == true)) {
                    UnitSetFacing(auto4C1C75CD_var, 90.0, 0.0);
                }

                UnitSetPropertyFixed(auto4C1C75CD_var, c_unitPropLifePercent, 100.0);
                UnitSetPropertyFixed(auto4C1C75CD_var, c_unitPropEnergyPercent, 100.0);
                UnitBehaviorRemovePlayer(auto4C1C75CD_var, "RegenGlobePercentBuff", lv_itPlayerIndex, 1);
            }
            if ((UnitIsAlive(libGame_gv_players[lv_itPlayerIndex].lv_heroUnit) == false)) {
                libPVEB_gf_PvEResurrectRevivePlayerInstantly(lv_itPlayerIndex, libPEB1_gv_checkpoints[1].lv_playerSpawnPoints[libGame_gv_players[lv_itPlayerIndex].lv_rosterSlot]);
            }

            CameraApplyInfo(lv_itPlayerIndex, CameraInfoDefault(), 0.0, -1, 10.0, false);
            CameraPan(lv_itPlayerIndex, libPEB1_gv_checkpoints[1].lv_playerSpawnPoints[libGame_gv_players[lv_itPlayerIndex].lv_rosterSlot], 0.0, -1, 10.0, false);
            libGame_gf_HeroRefreshCooldowns(lv_itPlayerIndex, false);
        }

    }
    RegionPlayableMapSet(libPEB1_gv_playableSpace[2]);
    lv_pointIndex = 1;
    for ( ; ( (autoF86985C2_ai >= 0 && lv_pointIndex <= autoF86985C2_ae) || (autoF86985C2_ai < 0 && lv_pointIndex >= autoF86985C2_ae) ) ; lv_pointIndex += autoF86985C2_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PVEPathingBlocker8x8", c_unitCreateIgnorePlacement, 0, PointFromName(("Checkpoint 1 Back Blocker " + IntToString(lv_pointIndex))), null);
    }
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    TriggerExecute(libPEB1_gt_OpenCheckpointExitStage2, true, false);
    if ((RandomInt(1, 2) == 1)) {
        libPEB1_gv_abathurInitialSpawnRight = true;
    }
    else {
        libPEB1_gv_abathurInitialSpawnRight = false;
    }
    TriggerExecute(libPEB1_gt_InitialZergStage2, true, false);
    libPVEB_gv_pvEPickupPlacingPreplacedPickups = true;
    TriggerExecute(libPVEB_gv_pvEPickupPreplacedPickupCallback, true, true);
    libPVEB_gv_pvEPickupPlacingPreplacedPickups = false;
    TriggerExecute(libPVEB_gt_PvEPickupPreplacedPickupVisibilityCheck, true, false);
    libPVEB_gf_PBUpdateTeamLevel(1, 16);
    libPVEB_gf_PBUpdateTeamLevel(2, libPEB1_gv_zergHeroLevel[2]);
    libPEB1_gv_pauseNydusSpawning = false;
    libPEB1_gv_pauseHeroRevival = false;
    libPEB1_gv_zergHeroSpawnSoundsEnabled = false;
    libNtve_gf_StopTimer(libPEB1_gv_zergHeroEventWaitTimer);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 2))) {
        return true;
    }

    libPVEB_gf_PVECreateDirectiveMessage(StringExternal("Param/Value/lib_PEB1_DCC78654"), StringExternal("Param/Value/lib_PEB1_53B16B46"), libPVEB_ge_PVEDirectiveStyle_ObjectiveDiscovered);
    Wait(3.0, c_timeReal);
    TriggerExecute(libPEB1_gt_ObjectiveFirstCheckpointComplete, true, false);
    Wait(2.0, c_timeReal);
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 2))) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngleWithType(PlayerGroupAll(), "PingObjective", libPEB1_gv_checkpoints[2].lv_pingPoint, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0, -1, -1);
    libPEB1_gv_checkpoints[2].lv_ping = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_PEB1_DF86B549"));
    SoundPlayForPlayer(SoundLink("UI_PvEBrawl_ObjectivePing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libGame_gv_announcement_SystemEnabled = true;
    TriggerExecute(libPEB1_gt_ObjectiveSecondCheckpointDisplayNotification, true, false);
    libPEB1_gv_objectivesCreated2 = true;
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Stage2MusicPart1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_TransitiontoStage2_Init () {
    libPEB1_gt_TransitiontoStage2 = TriggerCreate("libPEB1_gt_TransitiontoStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Checkpoint Exit - Stage 2
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_OpenCheckpointExitStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto81256675_g;
    int auto81256675_u;
    unit auto81256675_var;
    unitgroup auto1D4DF35B_g;
    int auto1D4DF35B_u;
    unit auto1D4DF35B_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto81256675_g = libPEB1_gv_checkpoints[1].lv_exitWalls;
    auto81256675_u = UnitGroupCount(auto81256675_g, c_unitCountAll);
    for (;; auto81256675_u -= 1) {
        auto81256675_var = UnitGroupUnitFromEnd(auto81256675_g, auto81256675_u);
        if (auto81256675_var == null) { break; }
        UnitSetOwner(auto81256675_var, libStEx_gv_pLAYER_11_ORDER, true);
    }
    libNtve_gf_MakeUnitInvulnerable(libPEB1_gv_checkpoints[1].lv_exitGate, false);
    ActorSend(libNtve_gf_MainActorofUnit(libPEB1_gv_checkpoints[1].lv_exitGate), "Signal PrePlayBuild");
    SoundStop(libPEB1_gv_checkpoints[1].lv_exitGateZergSound, true);
    Wait(7.0, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(libPEB1_gv_checkpoints[1].lv_exitGate), "Signal PlayBuild");
    Wait(3.0, c_timeGame);
    if ((libPEB1_gv_currentStage != 2)) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("GateStinger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto1D4DF35B_g = libPEB1_gv_checkpoints[1].lv_blockers2;
    auto1D4DF35B_u = UnitGroupCount(auto1D4DF35B_g, c_unitCountAll);
    for (;; auto1D4DF35B_u -= 1) {
        auto1D4DF35B_var = UnitGroupUnitFromEnd(auto1D4DF35B_g, auto1D4DF35B_u);
        if (auto1D4DF35B_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto1D4DF35B_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_OpenCheckpointExitStage2_Init () {
    libPEB1_gt_OpenCheckpointExitStage2 = TriggerCreate("libPEB1_gt_OpenCheckpointExitStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout - Stage 2
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_HoldoutStage2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_durationRemaining;
    int lv_countdownTextTag;
    int lv_spawnRegion;
    int lv_playerIndex;
    bool lv_playerInCheckpoint;

    // Automatic Variable Declarations
    unitgroup autoDDE47484_g;
    int autoDDE47484_u;
    unit autoDDE47484_var;
    unitgroup auto5CDDB76E_g;
    int auto5CDDB76E_u;
    unit auto5CDDB76E_var;
    unitgroup autoB2AC6BC6_g;
    int autoB2AC6BC6_u;
    unit autoB2AC6BC6_var;
    unitgroup auto3B2FA073_g;
    int auto3B2FA073_u;
    unit auto3B2FA073_var;
    unitgroup autoD7849C55_g;
    int autoD7849C55_u;
    unit autoD7849C55_var;
    unitgroup auto9346F7F0_g;
    int auto9346F7F0_u;
    unit auto9346F7F0_var;
    unitgroup auto074BC11D_g;
    int auto074BC11D_u;
    unit auto074BC11D_var;
    unitgroup auto4F6DB88F_g;
    int auto4F6DB88F_u;
    unit auto4F6DB88F_var;
    unitgroup auto4BA04B20_g;
    int auto4BA04B20_u;
    unit auto4BA04B20_var;
    unitgroup auto60163C0F_g;
    int auto60163C0F_u;
    unit auto60163C0F_var;
    playergroup auto51346106_g;

    // Variable Initialization
    lv_countdownTextTag = c_textTagNone;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 2))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 0, libPVEB_gv_filtersPvEEventHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPEB1_gv_pZECurrentStageCurrent = libPEB1_ge_PZEStages_Stage2Holdout;
    UnitKill(libPEB1_gv_checkpoints[2].lv_beacon);
    libPEB1_gv_pauseHeroRevival = true;
    libPEB1_gv_holdoutStage2Started = true;
    libPEB1_gv_zergHeroGraceCounter = 0;
    TriggerExecute(libPEB1_gt_CuratePreparedHeroesforHoldout2, true, false);
    TriggerExecute(libPEB1_gt_Holdout2Music, true, false);
    TriggerExecute(libPEB1_gt_CheckpointAdmissionProtocolStage2Q, true, false);
    lv_durationRemaining = 90;
    TimerStart(libPEB1_gv_holdoutTimer, 90.0, false, c_timeGame);
    libPEB1_gf_DisplayHoldoutPanel(libPEB1_ge_PZEHoldoutPanelState_OnTimer, libPEB1_gv_holdoutTimer);
    TextExpressionSetToken("Param/Expression/lib_PEB1_1BA6B7CD", "A", FixedToText(TimerGetRemaining(libPEB1_gv_holdoutTimer), 0));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_PEB1_1BA6B7CD"), 40, UnitGetPosition(libPEB1_gv_checkpoints[2].lv_entryGate), 1.0, true, false, PlayerGroupAll());
    lv_countdownTextTag = TextTagLastCreated();
    VisRevealArea(libCore_gv_cOMPUTER_TeamOrder, libPEB1_gv_checkpoints[2].lv_frontRegion, 0.0, false);
    UnitSetPropertyFixed(libPEB1_gv_checkpoints[1].lv_exitGate, c_unitPropLife, 1.0);
    autoDDE47484_g = UnitGroup("MurkyRespawnEgg", c_playerAny, RegionFromName("Murky Safety 2"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDDE47484_u = UnitGroupCount(autoDDE47484_g, c_unitCountAll);
    for (;; autoDDE47484_u -= 1) {
        autoDDE47484_var = UnitGroupUnitFromEnd(autoDDE47484_g, autoDDE47484_u);
        if (autoDDE47484_var == null) { break; }
        if ((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, UnitGetOwner(autoDDE47484_var)) == true)) {
            UnitCreateEffectUnit(autoDDE47484_var, "Kill", autoDDE47484_var);
        }

    }
    auto5CDDB76E_g = UnitGroup("CoopNydusWorm", libCore_gv_cOMPUTER_TeamChaos, RegionFromName("Nydus Kill 1"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5CDDB76E_u = UnitGroupCount(auto5CDDB76E_g, c_unitCountAll);
    for (;; auto5CDDB76E_u -= 1) {
        auto5CDDB76E_var = UnitGroupUnitFromEnd(auto5CDDB76E_g, auto5CDDB76E_u);
        if (auto5CDDB76E_var == null) { break; }
        UnitCreateEffectUnit(auto5CDDB76E_var, "Kill", auto5CDDB76E_var);
    }
    while (true) {
        Wait(1.0, c_timeGame);
        if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 2))) {
            TextTagDestroy(lv_countdownTextTag);
            return true;
        }

        lv_durationRemaining = FixedToInt(TimerGetRemaining(libPEB1_gv_holdoutTimer));
        if ((TimerGetRemaining(libPEB1_gv_holdoutTimer) < 0.1)) {
            break;
        }

        TextExpressionSetToken("Param/Expression/lib_PEB1_45252F93", "A", FixedToText(TimerGetRemaining(libPEB1_gv_holdoutTimer), 0));
        TextTagSetText(lv_countdownTextTag, TextExpressionAssemble("Param/Expression/lib_PEB1_45252F93"));
        if ((lv_durationRemaining == 12)) {
            TriggerExecute(libPEB1_gt_CheckpointOpenin10Stage2Q, true, false);
        }

        if (((lv_durationRemaining == 80) || (lv_durationRemaining == 70) || (lv_durationRemaining == 60) || (lv_durationRemaining == 50) || (lv_durationRemaining == 40) || (lv_durationRemaining == 30) || (lv_durationRemaining == 20) || (lv_durationRemaining == 10))) {
            TriggerExecute(libPEB1_gt_HoldoutStage2DropPodVolley, true, false);
        }

        if (((lv_durationRemaining == 75) || (lv_durationRemaining == 65) || (lv_durationRemaining == 55) || (lv_durationRemaining == 45) || (lv_durationRemaining == 35) || (lv_durationRemaining == 25) || (lv_durationRemaining == 15) || (lv_durationRemaining == 10))) {
            libPEB1_gf_CreateDropPod(RegionRandomPoint(RegionFromName("Holdout 2 Drop Pods")), "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(2, 3));
            libPEB1_gf_CreateDropPod(RegionRandomPoint(RegionFromName("Holdout 2 Drop Pods")), "ZergRoach", libPVEB_gf_PVEDifficultyValueInt(2, 3));
        }

        if (((lv_durationRemaining == 85) || (lv_durationRemaining == 70) || (lv_durationRemaining == 55) || (lv_durationRemaining == 40) || (lv_durationRemaining == 30) || (lv_durationRemaining == 20) || (lv_durationRemaining == 10))) {
            libNtve_gf_StopTimer(libPEB1_gv_zergHeroEventWaitTimer);
            libPEB1_gf_ReviveZergHeroes(1);
        }

        if ((lv_durationRemaining == 15)) {
            autoB2AC6BC6_g = UnitGroup("CoopNydusWorm", libCore_gv_cOMPUTER_TeamChaos, RegionFromName("Nydus Kill 2"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoB2AC6BC6_u = UnitGroupCount(autoB2AC6BC6_g, c_unitCountAll);
            for (;; autoB2AC6BC6_u -= 1) {
                autoB2AC6BC6_var = UnitGroupUnitFromEnd(autoB2AC6BC6_g, autoB2AC6BC6_u);
                if (autoB2AC6BC6_var == null) { break; }
                UnitCreateEffectUnit(autoB2AC6BC6_var, "Kill", autoB2AC6BC6_var);
            }
        }

        if ((lv_durationRemaining == 5)) {
            TriggerStop(libPEB1_gt_ZergWavesStage2);
            libPEB1_gv_zergHeroes[1][1].lv_active = false;
            libPEB1_gv_zergHeroes[1][2].lv_active = false;
            libPEB1_gv_zergHeroes[1][3].lv_active = false;
            libPEB1_gv_zergHeroes[1][4].lv_active = false;
            libPEB1_gv_zergHeroes[1][5].lv_active = false;
            libPEB1_gv_pauseNydusSpawning = true;
        }

        if ((lv_durationRemaining == 85)) {
            TriggerExecute(libPEB1_gt_HoldoutStage2NydusWorms, true, false);
        }

    }
    libPEB1_gv_holdoutStage2Finished = true;
    ActorSend(libNtve_gf_MainActorofUnit(libPEB1_gv_checkpoints[2].lv_entryGate), "Signal PrePlayBuild");
    SoundStop(libPEB1_gv_checkpoints[2].lv_entryGateZergSound, true);
    auto3B2FA073_g = UnitGroup("MurkyRespawnEgg", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3B2FA073_u = UnitGroupCount(auto3B2FA073_g, c_unitCountAll);
    for (;; auto3B2FA073_u -= 1) {
        auto3B2FA073_var = UnitGroupUnitFromEnd(auto3B2FA073_g, auto3B2FA073_u);
        if (auto3B2FA073_var == null) { break; }
        if ((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, UnitGetOwner(auto3B2FA073_var)) == true)) {
            UnitCreateEffectUnit(auto3B2FA073_var, "Kill", auto3B2FA073_var);
        }

    }
    autoD7849C55_g = UnitGroup("CoopNydusWorm", libCore_gv_cOMPUTER_TeamChaos, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD7849C55_u = UnitGroupCount(autoD7849C55_g, c_unitCountAll);
    for (;; autoD7849C55_u -= 1) {
        autoD7849C55_var = UnitGroupUnitFromEnd(autoD7849C55_g, autoD7849C55_u);
        if (autoD7849C55_var == null) { break; }
        UnitCreateEffectUnit(autoD7849C55_var, "Kill", autoD7849C55_var);
    }
    auto9346F7F0_g = libPEB1_gv_activeZergMinions;
    auto9346F7F0_u = UnitGroupCount(auto9346F7F0_g, c_unitCountAll);
    for (;; auto9346F7F0_u -= 1) {
        auto9346F7F0_var = UnitGroupUnitFromEnd(auto9346F7F0_g, auto9346F7F0_u);
        if (auto9346F7F0_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto9346F7F0_var, true, libStEx_gv_pLAYER_11_ORDER);
    }
    auto074BC11D_g = libPEB1_gv_activeZergHeroes;
    auto074BC11D_u = UnitGroupCount(auto074BC11D_g, c_unitCountAll);
    for (;; auto074BC11D_u -= 1) {
        auto074BC11D_var = UnitGroupUnitFromEnd(auto074BC11D_g, auto074BC11D_u);
        if (auto074BC11D_var == null) { break; }
        libNtve_gf_ShareVisionofUnit(auto074BC11D_var, true, libStEx_gv_pLAYER_11_ORDER);
    }
    TriggerExecute(libPEB1_gt_CheckpointOpenStage2Q, true, false);
    libNtve_gf_StopTimer(libPEB1_gv_holdoutTimer);
    while (true) {
        if ((UnitGroupCount(UnitGroupFilterPlayer(libPEB1_gv_activeZergMinions, libCore_gv_cOMPUTER_TeamChaos, 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroupFilterAlliance(libPEB1_gv_activeZergHeroes, libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceAlly, 0), c_unitCountAlive) == 0)) {
            break;
        }
        else {
            libPEB1_gf_SetHoldoutPanelZergRemaining((UnitGroupCount(UnitGroupFilterAlliance(libPEB1_gv_activeZergHeroes, libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceAlly, 0), c_unitCountAlive) + UnitGroupCount(UnitGroupFilterPlayer(libPEB1_gv_activeZergMinions, libCore_gv_cOMPUTER_TeamChaos, 0), c_unitCountAlive)));
            TextExpressionSetToken("Param/Expression/lib_PEB1_8C9C6DCD", "A", IntToText((UnitGroupCount(libPEB1_gv_activeZergHeroes, c_unitCountAlive) + UnitGroupCount(libPEB1_gv_activeZergMinions, c_unitCountAlive))));
            TextTagSetText(lv_countdownTextTag, TextExpressionAssemble("Param/Expression/lib_PEB1_8C9C6DCD"));
        }
        Wait(1.0, c_timeGame);
        if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 2))) {
            libPEB1_gf_ShowHideHoldoutPanel(false);
            TextTagDestroy(lv_countdownTextTag);
            return true;
        }

    }
    ActorSend(libNtve_gf_MainActorofUnit(libPEB1_gv_checkpoints[2].lv_entryGate), "Signal PlayBuild");
    libPEB1_gv_checkpointGate2Opening = true;
    SoundPlayForPlayer(SoundLink("UI_Game_Ping_Shrine_Ready", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libPEB1_gf_SetHoldoutPanelDoorOpened();
    TextTagDestroy(lv_countdownTextTag);
    Wait(3.0, c_timeGame);
    VisRevealArea(libStEx_gv_pLAYER_11_ORDER, libPEB1_gv_checkpoints[2].lv_eventCompleteTriggerRegion, 0.0, false);
    auto4F6DB88F_g = libPEB1_gv_checkpoints[2].lv_blockers1;
    auto4F6DB88F_u = UnitGroupCount(auto4F6DB88F_g, c_unitCountAll);
    for (;; auto4F6DB88F_u -= 1) {
        auto4F6DB88F_var = UnitGroupUnitFromEnd(auto4F6DB88F_g, auto4F6DB88F_u);
        if (auto4F6DB88F_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto4F6DB88F_var, false);
    }
    auto4BA04B20_g = libPEB1_gv_checkpoints[2].lv_entryWalls;
    auto4BA04B20_u = UnitGroupCount(auto4BA04B20_g, c_unitCountAll);
    for (;; auto4BA04B20_u -= 1) {
        auto4BA04B20_var = UnitGroupUnitFromEnd(auto4BA04B20_g, auto4BA04B20_u);
        if (auto4BA04B20_var == null) { break; }
        UnitSetOwner(auto4BA04B20_var, libStEx_gv_pLAYER_11_ORDER, true);
    }
    auto60163C0F_g = libPEB1_gv_checkpoints[2].lv_exitWalls;
    auto60163C0F_u = UnitGroupCount(auto60163C0F_g, c_unitCountAll);
    for (;; auto60163C0F_u -= 1) {
        auto60163C0F_var = UnitGroupUnitFromEnd(auto60163C0F_g, auto60163C0F_u);
        if (auto60163C0F_var == null) { break; }
        UnitSetOwner(auto60163C0F_var, libStEx_gv_pLAYER_11_ORDER, true);
    }
    while (true) {
        Wait(1.0, c_timeGame);
        if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 2))) {
            return true;
        }

        auto51346106_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
        lv_playerIndex = -1;
        while (true) {
            	lv_playerIndex = PlayerGroupNextPlayer(auto51346106_g, lv_playerIndex);
            	if (lv_playerIndex<0) { break; }
            	if ((UnitIsAlive(libGame_gv_players[lv_playerIndex].lv_heroUnit) == true) && (libNtve_gf_UnitInRegion(libGame_gv_players[lv_playerIndex].lv_heroUnit, libPEB1_gv_checkpoints[2].lv_eventCompleteTriggerRegion) == true)) {
                TriggerEnable(libPEB1_gt_DEBUGStage3, false);
                libPEB1_gf_ShowHideHoldoutPanel(false);
                CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
                TriggerExecute(libPEB1_gt_TransitiontoStage3, true, false);
                return true;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_HoldoutStage2_Init () {
    libPEB1_gt_HoldoutStage2 = TriggerCreate("libPEB1_gt_HoldoutStage2_Func");
    TriggerAddEventUnitRegion(libPEB1_gt_HoldoutStage2, null, RegionFromName("Checkpoint 2 Beacon Region"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Curate Prepared Heroes for Holdout 2
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_CuratePreparedHeroesforHoldout2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    const int auto83E23C31_ae = 5;
    const int auto83E23C31_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroIndex = 1;
    for ( ; ( (auto83E23C31_ai >= 0 && lv_heroIndex <= auto83E23C31_ae) || (auto83E23C31_ai < 0 && lv_heroIndex >= auto83E23C31_ae) ) ; lv_heroIndex += auto83E23C31_ai ) {
        if ((libPEB1_gv_zergHeroes[2][lv_heroIndex].lv_hero == "Murky") && (UnitIsAlive(libPVEB_gf_PBNPCHeroUnit("Murky")) == false) && (UnitIsAlive(libPEB1_gv_pvEMurkyEggUnit) == false)) {
            TimerStart(libPEB1_gv_zergHeroes[2][lv_heroIndex].lv_respawnTimer, libPEB1_gv_zergHeroRespawnTimer, false, c_timeGame);
            while (!((libPEB1_gv_zergHeroes[2][lv_heroIndex].lv_active == true))) {
                Wait(1.0, c_timeGame);
            }
            libPEB1_gf_PrepareTheNextHero(2, lv_heroIndex);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_CuratePreparedHeroesforHoldout2_Init () {
    libPEB1_gt_CuratePreparedHeroesforHoldout2 = TriggerCreate("libPEB1_gt_CuratePreparedHeroesforHoldout2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleanup Stage 2
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_CleanupStage2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zergHeroIndex;
    int lv_itPlayerIndex;

    // Automatic Variable Declarations
    playergroup auto63B9E520_g;
    unitgroup auto65469414_g;
    int auto65469414_u;
    unit auto65469414_var;
    unitgroup auto436B6E38_g;
    int auto436B6E38_u;
    unit auto436B6E38_var;
    unitgroup auto8BA49493_g;
    int auto8BA49493_u;
    unit auto8BA49493_var;
    unitgroup autoBFBB09F6_g;
    int autoBFBB09F6_u;
    unit autoBFBB09F6_var;
    playergroup auto2BF4D3A3_g;
    const int autoF1A1D2E6_ae = 5;
    const int autoF1A1D2E6_ai = 1;
    const int auto6580E86A_ae = 5;
    const int auto6580E86A_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPEB1_gf_ShowHideHoldoutPanel(false);
    TriggerStop(libPEB1_gt_InitialZergStage2);
    libPEB1_gv_zergHeroGraceCounter = 0;
    libPEB1_gv_zergHeroes[2][1].lv_active = false;
    libPEB1_gv_zergHeroes[2][2].lv_active = false;
    libPEB1_gv_zergHeroes[2][3].lv_active = false;
    libPEB1_gv_zergHeroes[2][4].lv_active = false;
    libPEB1_gv_zergHeroes[2][5].lv_active = false;
    auto63B9E520_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayerIndex = -1;
    while (true) {
        	lv_itPlayerIndex = PlayerGroupNextPlayer(auto63B9E520_g, lv_itPlayerIndex);
        	if (lv_itPlayerIndex<0) { break; }
        	VisExploreArea(lv_itPlayerIndex, RegionEntireMap(), false, false);
    }
    PingDestroy(libPEB1_gv_checkpoints[2].lv_ping);
    TransmissionClearAll();
    UnitKill(libPEB1_gv_checkpoints[2].lv_beacon);
    auto65469414_g = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto65469414_u = UnitGroupCount(auto65469414_g, c_unitCountAll);
    for (;; auto65469414_u -= 1) {
        auto65469414_var = UnitGroupUnitFromEnd(auto65469414_g, auto65469414_u);
        if (auto65469414_var == null) { break; }
        UnitRemove(auto65469414_var);
    }
    libPVEB_gf_PvEPickupDespawnPickupsInRegion(RegionEntireMap());
    auto436B6E38_g = libPEB1_gv_checkpoints[2].lv_blockers1;
    auto436B6E38_u = UnitGroupCount(auto436B6E38_g, c_unitCountAll);
    for (;; auto436B6E38_u -= 1) {
        auto436B6E38_var = UnitGroupUnitFromEnd(auto436B6E38_g, auto436B6E38_u);
        if (auto436B6E38_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto436B6E38_var, false);
    }
    auto8BA49493_g = libPEB1_gv_checkpoints[2].lv_entryWalls;
    auto8BA49493_u = UnitGroupCount(auto8BA49493_g, c_unitCountAll);
    for (;; auto8BA49493_u -= 1) {
        auto8BA49493_var = UnitGroupUnitFromEnd(auto8BA49493_g, auto8BA49493_u);
        if (auto8BA49493_var == null) { break; }
        UnitSetOwner(auto8BA49493_var, libStEx_gv_pLAYER_11_ORDER, true);
    }
    autoBFBB09F6_g = libPEB1_gv_checkpoints[2].lv_exitWalls;
    autoBFBB09F6_u = UnitGroupCount(autoBFBB09F6_g, c_unitCountAll);
    for (;; autoBFBB09F6_u -= 1) {
        autoBFBB09F6_var = UnitGroupUnitFromEnd(autoBFBB09F6_g, autoBFBB09F6_u);
        if (autoBFBB09F6_var == null) { break; }
        UnitSetOwner(autoBFBB09F6_var, libStEx_gv_pLAYER_11_ORDER, true);
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libPEB1_gv_checkpoints[2].lv_entryGate), c_animNameDefault, "Stand Morph A", c_animFlagPlayForever, c_animTimeDefault);
    TriggerStop(libPVEB_gt_PvEPickupPreplacedPickupVisibilityCheck);
    auto2BF4D3A3_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_itPlayerIndex = -1;
    while (true) {
        	lv_itPlayerIndex = PlayerGroupNextPlayer(auto2BF4D3A3_g, lv_itPlayerIndex);
        	if (lv_itPlayerIndex<0) { break; }
        	AIDisableForPlayer(lv_itPlayerIndex);
    }
    VisRevealArea(libCore_gv_cOMPUTER_TeamOrder, libPEB1_gv_checkpoints[2].lv_eventCompleteTriggerRegion, 0.0, false);
    VisRevealArea(libCore_gv_cOMPUTER_TeamOrder, libPEB1_gv_checkpoints[2].lv_frontRegion, 0.0, false);
    if ((libPEB1_gv_heroesPrepared[1] == true)) {
        libPEB1_gv_heroesPrepared[1] = false;
        lv_zergHeroIndex = 1;
        for ( ; ( (autoF1A1D2E6_ai >= 0 && lv_zergHeroIndex <= autoF1A1D2E6_ae) || (autoF1A1D2E6_ai < 0 && lv_zergHeroIndex >= autoF1A1D2E6_ae) ) ; lv_zergHeroIndex += autoF1A1D2E6_ai ) {
            libPVEB_gf_PBResetNPCHero(libPEB1_gv_zergHeroes[1][lv_zergHeroIndex].lv_hero);
        }
    }

    if ((libPEB1_gv_heroesPrepared[2] == true)) {
        libPEB1_gv_heroesPrepared[2] = false;
        lv_zergHeroIndex = 1;
        for ( ; ( (auto6580E86A_ai >= 0 && lv_zergHeroIndex <= auto6580E86A_ae) || (auto6580E86A_ai < 0 && lv_zergHeroIndex >= auto6580E86A_ae) ) ; lv_zergHeroIndex += auto6580E86A_ai ) {
            libPVEB_gf_PBResetNPCHero(libPEB1_gv_zergHeroes[2][lv_zergHeroIndex].lv_hero);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_CleanupStage2_Init () {
    libPEB1_gt_CleanupStage2 = TriggerCreate("libPEB1_gt_CleanupStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transition to Stage 3
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_TransitiontoStage3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayerIndex;
    int lv_pointIndex;

    // Automatic Variable Declarations
    playergroup auto1A904ED2_g;
    unitgroup autoCA2899B9_g;
    int autoCA2899B9_u;
    unit autoCA2899B9_var;
    unitgroup autoAA4F46C2_g;
    int autoAA4F46C2_u;
    unit autoAA4F46C2_var;
    playergroup autoC1865C4C_g;
    const int autoC3A669CF_ae = 6;
    const int autoC3A669CF_ai = 1;
    unitgroup autoA90C4D57_g;
    int autoA90C4D57_u;
    unit autoA90C4D57_var;
    playergroup autoF85DF58F_g;
    int autoF85DF58F_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPEB1_gv_stage2CompleteTime = FixedToInt(libUIUI_gf_HeroesGameTime());
    libPEB1_gv_pZECurrentStageCurrent = libPEB1_ge_PZEStages_Stage3BossPhase1;
    libGame_gv_announcement_SystemEnabled = false;
    libPEB1_gv_currentStage = 3;
    TriggerExecute(libPEB1_gt_XPGainFromStage2, true, false);
    TriggerExecute(libPEB1_gt_CleanupStage1, true, false);
    TriggerExecute(libPEB1_gt_CleanupStage2, true, false);
    DialogControlSetPosition(libPEB1_gv_pZEMinimapPanel, PlayerGroupAll(), c_anchorBottomRight, 20, -20);
    DialogControlSetSize(libPEB1_gv_pZEMinimapPanel, PlayerGroupAll(), 334, 330);
    DialogControlSetSize(libPEB1_gv_pZEMinimap, PlayerGroupAll(), 330, 330);
    PointSet(PointFromName("Start Location 0012"), PointFromName("Start Location 12 - 3"));
    DialogControlSetAnimationState(libPEB1_gv_pZEMinimap, PlayerGroupAll(), "MaskState", "Part3");
    auto1A904ED2_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayerIndex = -1;
    while (true) {
        	lv_itPlayerIndex = PlayerGroupNextPlayer(auto1A904ED2_g, lv_itPlayerIndex);
        	if (lv_itPlayerIndex<0) { break; }
        	if ((PlayerStatus(lv_itPlayerIndex) != c_playerStatusUnused)) {
            autoCA2899B9_g = UnitGroup(null, lv_itPlayerIndex, RegionPlayableMap(), UnitFilter((1 << c_targetFilterTower), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoCA2899B9_u = UnitGroupCount(autoCA2899B9_g, c_unitCountAll);
            for (;; autoCA2899B9_u -= 1) {
                autoCA2899B9_var = UnitGroupUnitFromEnd(autoCA2899B9_g, autoCA2899B9_u);
                if (autoCA2899B9_var == null) { break; }
                UnitRemove(autoCA2899B9_var);
            }
            autoAA4F46C2_g = UnitGroup(null, lv_itPlayerIndex, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoAA4F46C2_u = UnitGroupCount(autoAA4F46C2_g, c_unitCountAll);
            for (;; autoAA4F46C2_u -= 1) {
                autoAA4F46C2_var = UnitGroupUnitFromEnd(autoAA4F46C2_g, autoAA4F46C2_u);
                if (autoAA4F46C2_var == null) { break; }
                UnitCreateEffectUnit(autoAA4F46C2_var, "PVEGenericAbortMissile", autoAA4F46C2_var);
                UnitSetPosition(autoAA4F46C2_var, libPEB1_gv_checkpoints[2].lv_playerSpawnPoints[libGame_gv_players[lv_itPlayerIndex].lv_rosterSlot], false);
                UnitIssueOrder(autoAA4F46C2_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                if ((UnitTypeTestFlag(UnitGetType(autoAA4F46C2_var), c_unitFlagTurnable) == true)) {
                    UnitSetFacing(autoAA4F46C2_var, 90.0, 0.0);
                }

                UnitSetPropertyFixed(autoAA4F46C2_var, c_unitPropLifePercent, 100.0);
                UnitSetPropertyFixed(autoAA4F46C2_var, c_unitPropEnergyPercent, 100.0);
                UnitBehaviorRemovePlayer(autoAA4F46C2_var, "RegenGlobePercentBuff", lv_itPlayerIndex, 1);
            }
        }

    }
    RegionPlayableMapSet(libPEB1_gv_playableSpace[3]);
    autoC1865C4C_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayerIndex = -1;
    while (true) {
        	lv_itPlayerIndex = PlayerGroupNextPlayer(autoC1865C4C_g, lv_itPlayerIndex);
        	if (lv_itPlayerIndex<0) { break; }
        	if ((PlayerStatus(lv_itPlayerIndex) != c_playerStatusUnused)) {
            if ((UnitIsAlive(libGame_gv_players[lv_itPlayerIndex].lv_heroUnit) == false)) {
                libPVEB_gf_PvEResurrectRevivePlayerInstantly(lv_itPlayerIndex, libPEB1_gv_checkpoints[2].lv_playerSpawnPoints[libGame_gv_players[lv_itPlayerIndex].lv_rosterSlot]);
            }

            CameraApplyInfo(lv_itPlayerIndex, CameraInfoDefault(), 0.0, -1, 10.0, false);
            CameraPan(lv_itPlayerIndex, libPEB1_gv_checkpoints[2].lv_playerSpawnPoints[libGame_gv_players[lv_itPlayerIndex].lv_rosterSlot], 0.0, -1, 10.0, false);
            libGame_gf_HeroRefreshCooldowns(lv_itPlayerIndex, false);
        }

    }
    lv_pointIndex = 1;
    for ( ; ( (autoC3A669CF_ai >= 0 && lv_pointIndex <= autoC3A669CF_ae) || (autoC3A669CF_ai < 0 && lv_pointIndex >= autoC3A669CF_ae) ) ; lv_pointIndex += autoC3A669CF_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PVEPathingBlocker8x8", c_unitCreateIgnorePlacement, 0, PointFromName(("Checkpoint 2 Back Blocker " + IntToString(lv_pointIndex))), null);
    }
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    TriggerExecute(libPEB1_gt_OpenCheckpointExitStage3, true, false);
    TriggerExecute(libPEB1_gt_ZergCampsStage3, true, false);
    libPVEB_gf_PBUpdateTeamLevel(1, 20);
    libPEB1_gv_pauseNydusSpawning = false;
    libPEB1_gv_pauseHeroRevival = false;
    libPEB1_gv_zergHeroSpawnSoundsEnabled = false;
    libPVEB_gf_PvEPickupStoreHeldPickups();
    libNtve_gf_StopTimer(libPEB1_gv_zergHeroEventWaitTimer);
    autoA90C4D57_g = libPEB1_gv_extraBlockers[3];
    autoA90C4D57_u = UnitGroupCount(autoA90C4D57_g, c_unitCountAll);
    for (;; autoA90C4D57_u -= 1) {
        autoA90C4D57_var = UnitGroupUnitFromEnd(autoA90C4D57_g, autoA90C4D57_u);
        if (autoA90C4D57_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoA90C4D57_var, true);
    }
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 3))) {
        return true;
    }

    if ((libPEB1_gv_retrying == false)) {
        libPVEB_gf_PVECreateDirectiveMessage(StringExternal("Param/Value/lib_PEB1_C7C5FD96"), StringExternal("Param/Value/lib_PEB1_442385AF"), libPVEB_ge_PVEDirectiveStyle_ObjectiveDiscovered);
    }
    else {
        libPVEB_gf_PVECreateDirectiveMessage(StringExternal("Param/Value/lib_PEB1_1D557D47"), StringExternal("Param/Value/lib_PEB1_BBEFEC67"), libPVEB_ge_PVEDirectiveStyle_ObjectiveDiscovered);
        autoF85DF58F_g = libPVEB_gf_PBPlayersOnHumanTeam();
        autoF85DF58F_var = -1;
        while (true) {
            	autoF85DF58F_var = PlayerGroupNextPlayer(autoF85DF58F_g, autoF85DF58F_var);
            	if (autoF85DF58F_var<0) { break; }
            	if ((libPVEB_gf_PBIsValidHumanPlayer(autoF85DF58F_var) == true)) {
                AddUnitOfInterest(libGame_gv_players[autoF85DF58F_var].lv_heroUnit, 500.0, 0.0, "EscortAllyHero", libNtve_ge_GoalTeam_Both, 0);
            }

        }
    }
    Wait(3.0, c_timeReal);
    TriggerExecute(libPEB1_gt_ObjectiveFirstCheckpointComplete, true, false);
    TriggerExecute(libPEB1_gt_ObjectiveSecondCheckpointComplete, true, false);
    Wait(2.0, c_timeReal);
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 3))) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngleWithType(PlayerGroupAll(), "PingObjective", libPEB1_gv_shelter.lv_pingPoint, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0, -1, -1);
    libPEB1_gv_shelter.lv_ping = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_PEB1_B293FEA2"));
    SoundPlayForPlayer(SoundLink("UI_PvEBrawl_ObjectivePing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libGame_gv_announcement_SystemEnabled = true;
    TriggerExecute(libPEB1_gt_ObjectiveShelterDisplayNotification, true, false);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PreBossMusic", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_TransitiontoStage3_Init () {
    libPEB1_gt_TransitiontoStage3 = TriggerCreate("libPEB1_gt_TransitiontoStage3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleanup Stage 3
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_CleanupStage3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;
    int lv_itIndex;
    int lv_itPlayer;

    // Automatic Variable Declarations
    unitgroup auto3F442E76_g;
    int auto3F442E76_u;
    unitgroup auto52BE5A5F_g;
    int auto52BE5A5F_u;
    const int auto8EAF0B7B_ae = 3;
    const int auto8EAF0B7B_ai = 1;
    unitgroup auto58B23EE6_g;
    int auto58B23EE6_u;
    unitgroup auto4D07B4C6_g;
    int auto4D07B4C6_u;
    const int auto6CA4CD1C_n = 6;
    int auto6CA4CD1C_i;
    playergroup auto9BD675FD_g;
    unitgroup auto055F4C90_g;
    int auto055F4C90_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libPEB1_gt_SlivanDies, false);
    TriggerEnable(libPEB1_gt_PEB1Phase2UnitDied, false);
    TriggerEnable(libPEB1_gt_DangerousCreatureAheadQ, true);
    TriggerEnable(libPEB1_gt_ZergCampsStage3, true);
    TriggerEnable(libPEB1_gt_OpenCheckpointExitStage3, true);
    TriggerEnable(libPEB1_gt_SpawnSlivan, true);
    TriggerEnable(libPEB1_gt_PEB1Phase2DetermineBosses, true);
    TriggerExecute(libPEB1_gt_SlivanPhase4BuffsBaseline, true, false);
    TimerPause(libPEB1_gv_pEB1SlivanBossKillTimer, true);
    libPEB1_gf_ShowHideBossPanel(false);
    VisRevealerDestroy(libPEB1_gv_slivanRevealer);
    if ((libPEB1_gv_slivan != null)) {
        UnitRemove(libPEB1_gv_slivan);
        libPEB1_gv_slivan = null;
    }

    libPVEB_gf_PvEPickupDespawnPickupsInRegion(RegionEntireMap());
    auto3F442E76_g = UnitGroup("RegenGlobe", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3F442E76_u = UnitGroupCount(auto3F442E76_g, c_unitCountAll);
    for (;; auto3F442E76_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto3F442E76_g, auto3F442E76_u);
        if (lv_itUnit == null) { break; }
        UnitRemove(lv_itUnit);
    }
    auto52BE5A5F_g = libPEB1_gv_checkpoints[2].lv_exitWalls;
    auto52BE5A5F_u = UnitGroupCount(auto52BE5A5F_g, c_unitCountAll);
    for (;; auto52BE5A5F_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto52BE5A5F_g, auto52BE5A5F_u);
        if (lv_itUnit == null) { break; }
        UnitRemove(lv_itUnit);
    }
    libPEB1_gf_RemoveDeathModelsInRegion(libPEB1_gv_stage3ExitWallRegion);
    lv_itIndex = 1;
    for ( ; ( (auto8EAF0B7B_ai >= 0 && lv_itIndex <= auto8EAF0B7B_ae) || (auto8EAF0B7B_ai < 0 && lv_itIndex >= auto8EAF0B7B_ae) ) ; lv_itIndex += auto8EAF0B7B_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, libPEB1_gv_stage3ResetUnits[lv_itIndex].lv_unitType, c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_TeamOrder, libPEB1_gv_stage3ResetUnits[lv_itIndex].lv_unitPosition, null);
        UnitGroupAdd(libPEB1_gv_checkpoints[2].lv_exitWalls, UnitLastCreated());
        if ((UnitGetType(UnitLastCreated()) == "ZergedTownGateL3HorizontalTopVisionBlocked")) {
            libPEB1_gv_checkpoints[2].lv_exitGate = UnitLastCreated();
        }

    }
    auto58B23EE6_g = libPEB1_gv_checkpoints[2].lv_blockers2;
    auto58B23EE6_u = UnitGroupCount(auto58B23EE6_g, c_unitCountAll);
    for (;; auto58B23EE6_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto58B23EE6_g, auto58B23EE6_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_itUnit, true);
    }
    auto4D07B4C6_g = UnitGroup(null, libCore_gv_cOMPUTER_TeamChaos, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4D07B4C6_u = UnitGroupCount(auto4D07B4C6_g, c_unitCountAll);
    for (;; auto4D07B4C6_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto4D07B4C6_g, auto4D07B4C6_u);
        if (lv_itUnit == null) { break; }
        if ((UnitGetType(lv_itUnit) == "CoopNydusWorm")) {
            TextTagDestroy(libPEB1_gv_pEB1SlivanZergBossTextTags[libCore_gf_IntegerStoredForUnit(lv_itUnit, 1)]);
        }

        UnitRemove(lv_itUnit);
    }
    for (auto6CA4CD1C_i = 1; auto6CA4CD1C_i <= auto6CA4CD1C_n; auto6CA4CD1C_i += 1) {
        auto9BD675FD_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
        lv_itPlayer = -1;
        while (true) {
            	lv_itPlayer = PlayerGroupNextPlayer(auto9BD675FD_g, lv_itPlayer);
            	if (lv_itPlayer<0) { break; }
            	auto055F4C90_g = UnitGroup(null, lv_itPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto055F4C90_u = UnitGroupCount(auto055F4C90_g, c_unitCountAll);
            for (;; auto055F4C90_u -= 1) {
                lv_itUnit = UnitGroupUnitFromEnd(auto055F4C90_g, auto055F4C90_u);
                if (lv_itUnit == null) { break; }
                if ((UnitGetType(lv_itUnit) == "CoopNydusWorm")) {
                    TextTagDestroy(libPEB1_gv_pEB1SlivanZergBossTextTags[libCore_gf_IntegerStoredForUnit(lv_itUnit, 1)]);
                }

                UnitRemove(lv_itUnit);
            }
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_CleanupStage3_Init () {
    libPEB1_gt_CleanupStage3 = TriggerCreate("libPEB1_gt_CleanupStage3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Checkpoint Exit - Stage 3
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_OpenCheckpointExitStage3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9A871863_g;
    int auto9A871863_u;
    unit auto9A871863_var;
    unitgroup autoAE3A611A_g;
    int autoAE3A611A_u;
    unit autoAE3A611A_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto9A871863_g = libPEB1_gv_checkpoints[2].lv_exitWalls;
    auto9A871863_u = UnitGroupCount(auto9A871863_g, c_unitCountAll);
    for (;; auto9A871863_u -= 1) {
        auto9A871863_var = UnitGroupUnitFromEnd(auto9A871863_g, auto9A871863_u);
        if (auto9A871863_var == null) { break; }
        UnitSetOwner(auto9A871863_var, libStEx_gv_pLAYER_11_ORDER, true);
    }
    libNtve_gf_MakeUnitInvulnerable(libPEB1_gv_checkpoints[2].lv_exitGate, false);
    ActorSend(libNtve_gf_MainActorofUnit(libPEB1_gv_checkpoints[2].lv_exitGate), "Signal PrePlayBuild");
    SoundStop(libPEB1_gv_checkpoints[2].lv_exitGateZergSound, true);
    Wait(7.0, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(libPEB1_gv_checkpoints[2].lv_exitGate), "Signal PlayBuild");
    Wait(3.0, c_timeGame);
    if ((libPEB1_gv_currentStage != 3)) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("GateStinger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    autoAE3A611A_g = libPEB1_gv_checkpoints[2].lv_blockers2;
    autoAE3A611A_u = UnitGroupCount(autoAE3A611A_g, c_unitCountAll);
    for (;; autoAE3A611A_u -= 1) {
        autoAE3A611A_var = UnitGroupUnitFromEnd(autoAE3A611A_g, autoAE3A611A_u);
        if (autoAE3A611A_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoAE3A611A_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_OpenCheckpointExitStage3_Init () {
    libPEB1_gt_OpenCheckpointExitStage3 = TriggerCreate("libPEB1_gt_OpenCheckpointExitStage3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout 2 Music
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Holdout2Music_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeReal);
    if ((libPEB1_gv_currentStage != 2)) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Holdout2MusicPart1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Holdout2Music_Init () {
    libPEB1_gt_Holdout2Music = TriggerCreate("libPEB1_gt_Holdout2Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: XP Gain From Stage 1
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_XPGainFromStage1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_xP_C = 13837;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPVEB_gv_pBGameOverPlayerXPGain += libPVEB_gf_PVEDifficultyValueReal(lv_xP_C, (lv_xP_C * 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_XPGainFromStage1_Init () {
    libPEB1_gt_XPGainFromStage1 = TriggerCreate("libPEB1_gt_XPGainFromStage1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: XP Gain From Stage 2
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_XPGainFromStage2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_xP_C = 43518;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPVEB_gv_pBGameOverPlayerXPGain += libPVEB_gf_PVEDifficultyValueReal(lv_xP_C, (lv_xP_C * 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_XPGainFromStage2_Init () {
    libPEB1_gt_XPGainFromStage2 = TriggerCreate("libPEB1_gt_XPGainFromStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: XP Gain From Stage 3
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_XPGainFromStage3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_xP_C = 61373;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPVEB_gv_pBGameOverPlayerXPGain += libPVEB_gf_PVEDifficultyValueReal(lv_xP_C, (lv_xP_C * 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_XPGainFromStage3_Init () {
    libPEB1_gt_XPGainFromStage3 = TriggerCreate("libPEB1_gt_XPGainFromStage3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Pickups
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_InitPickups_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libPVEB_gf_PvEPickupInitializePickup(libPVEB_ge_PvEPickupPickupActivationType_Instant, "PVETeamStimpackPickup", "HasMapMechanicInstantAbility1");
    libPVEB_gf_PvEPickupInitializePickup(libPVEB_ge_PvEPickupPickupActivationType_Instant, "PVERejuvenationPulsePickup", "HasMapMechanicInstantAbility2");
    libPVEB_gf_PvEPickupInitializePickup(libPVEB_ge_PvEPickupPickupActivationType_Instant, "PVEReinforcementsPickup", "HasMapMechanicInstantAbility3");
    libPVEB_gf_PvEPickupInitializePickup(libPVEB_ge_PvEPickupPickupActivationType_Target, "PVEMiniNukePickup", "HasMapMechanicTargetAbility");
    libPVEB_gf_PvEPickupInitializePickup(libPVEB_ge_PvEPickupPickupActivationType_Target, "PVEPsiEmitterPickup", "HasMapMechanicTargetAbility2");
    TriggerExecute(libPVEB_gt_PvEPickupPingOverrides, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_InitPickups_Init () {
    libPEB1_gt_InitPickups = TriggerCreate("libPEB1_gt_InitPickups_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Adjust Capture MacGuffin
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_InitAdjustCaptureMacGuffin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoB8DCC624_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB8DCC624_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoB8DCC624_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	CatalogFieldValueSet(c_gameCatalogEffect, "CaptureMacGuffin", "PeriodCount", lv_itPlayer, "2");
        CatalogFieldValueSet(c_gameCatalogEffect, "CaptureMacGuffin", "PeriodicValidator", lv_itPlayer, "CaptureMacguffinPeriodValidatorCombat");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_InitAdjustCaptureMacGuffin_Init () {
    libPEB1_gt_InitAdjustCaptureMacGuffin = TriggerCreate("libPEB1_gt_InitAdjustCaptureMacGuffin_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Regeneration Globe
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_SpawnRegenerationGlobe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_maxRandom;
    unit lv_killingUnit;

    // Automatic Variable Declarations
    string auto9F0CE43B_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == libStEx_gv_pLAYER_12_CHAOS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9F0CE43B_val = UnitGetType(EventUnit());
    if (auto9F0CE43B_val == "ZergZergling") {
        libPEB1_gv_regenerationGlobeCounter += 1;
    }
    else if (auto9F0CE43B_val == "ZergZerglingNotMinion") {
        if ((libPVEB_gf_PBGameDifficulty() == libPVEB_ge_PVEGameDifficulty_Normal)) {
            libPEB1_gv_regenerationGlobeCounter += 1;
        }

    }
    else if (auto9F0CE43B_val == "ZergHydralisk") {
        libPEB1_gv_regenerationGlobeCounter += 4;
    }
    else if (auto9F0CE43B_val == "ZergRoach") {
        libPEB1_gv_regenerationGlobeCounter += 4;
    }
    else if (auto9F0CE43B_val == "ZergBaneling") {
        libPEB1_gv_regenerationGlobeCounter += 2;
    }
    else if (auto9F0CE43B_val == "ZergUltralisk") {
        libPEB1_gv_regenerationGlobeCounter += 12;
    }
    else if (auto9F0CE43B_val == "SlivanBossPod") {
        lv_killingUnit = libNtve_gf_KillingUnit();
        if ((lv_killingUnit != null) && (PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, UnitGetOwner(lv_killingUnit)) == true)) {
            libPEB1_gv_regenerationGlobeCounter += 1;
        }

    }
    else {
        return true;
    }
    if ((libPEB1_gv_regenerationGlobeCounter >= libPEB1_gv_killValueNeededToSpawnGlobe)) {
        libPEB1_gv_regenerationGlobeCounter -= libPEB1_gv_killValueNeededToSpawnGlobe;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RegenGlobe", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_TeamOrder, UnitGetPosition(EventUnit()), null);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_SpawnRegenerationGlobe_Init () {
    libPEB1_gt_SpawnRegenerationGlobe = TriggerCreate("libPEB1_gt_SpawnRegenerationGlobe_Func");
    TriggerAddEventUnitDied(libPEB1_gt_SpawnRegenerationGlobe, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Item
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_SpawnItem_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libPEB1_gv_currentStage != 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEB1_gv_itemDropCounter += 1;
    if ((libPEB1_gv_itemDropCounter >= libPEB1_gv_zergHeroKillsNeededToSpawnItem)) {
        libPEB1_gv_itemDropCounter = 0;
        libPVEB_gf_PvEPickupSpawnRandomInRotation("PVEMiniNukePickup", libGame_gf_HeroKilledLocation());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_SpawnItem_Init () {
    libPEB1_gt_SpawnItem = TriggerCreate("libPEB1_gt_SpawnItem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: EFB Play VO Sound for Player
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_EFBPlayVOSoundforPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_vOSound;
    int lv_randomInt;

    // Automatic Variable Declarations
    int autoBEB292B2_val;

    // Variable Initialization
    lv_vOSound = SoundLink("EditorDefaultSound", -1);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_randomInt = RandomInt(1, 4);
    autoBEB292B2_val = lv_randomInt;
    if (autoBEB292B2_val == 1) {
        lv_vOSound = SoundLink("PvEVO_Adjutant_144", -1);
    }
    else if (autoBEB292B2_val == 2) {
        lv_vOSound = SoundLink("PvEVO_Adjutant_145", -1);
    }
    else if (autoBEB292B2_val == 3) {
        lv_vOSound = SoundLink("PvEVO_Adjutant_146", -1);
    }
    else if (autoBEB292B2_val == 4) {
        lv_vOSound = SoundLink("PvEVO_Adjutant_147", -1);
    }
    else {
    }
    SoundPlayForPlayer(lv_vOSound, c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_EFBPlayVOSoundforPlayer_Init () {
    libPEB1_gt_EFBPlayVOSoundforPlayer = TriggerCreate("libPEB1_gt_EFBPlayVOSoundforPlayer_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_EFBPlayVOSoundforPlayer, c_playerAny, "PvEMiniNukeCreatePersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reinforcements Used
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ReinforcementsUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minDistance;
    int lv_maxDistance;
    point lv_heroPosition;
    int lv_owningPlayer;
    fixed lv_lineAngle;
    point lv_proposedSpawnPosition;
    point[6] lv_proposedSpawnPoints;
    bool lv_validSpawnPoint;
    unitgroup lv_reinforcementUnitGroup;
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto945EE484_g;
    int auto945EE484_u;

    // Variable Initialization
    lv_minDistance = 3;
    lv_maxDistance = 7;
    lv_heroPosition = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_owningPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_reinforcementUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lineAngle = RandomInt(1, 360);
    lv_proposedSpawnPosition = PointWithOffsetPolar(lv_heroPosition, RandomInt(lv_minDistance, lv_maxDistance), lv_lineAngle);
    while ((lv_validSpawnPoint == false)) {
        lv_proposedSpawnPoints[1] = PointWithOffsetPolar(lv_proposedSpawnPosition, 1.5, (lv_lineAngle - 36.0));
        lv_proposedSpawnPoints[2] = PointWithOffsetPolar(lv_proposedSpawnPosition, 1.5, (lv_lineAngle + 36.0));
        lv_proposedSpawnPoints[3] = PointWithOffsetPolar(lv_proposedSpawnPosition, 1.5, (lv_lineAngle + 108.0));
        lv_proposedSpawnPoints[4] = PointWithOffsetPolar(lv_proposedSpawnPosition, 1.5, (lv_lineAngle + 180.0));
        lv_proposedSpawnPoints[5] = PointWithOffsetPolar(lv_proposedSpawnPosition, 1.5, (lv_lineAngle + 252.0));
        if ((PointPathingPassable(lv_proposedSpawnPoints[1]) == true) && (PointPathingPassable(lv_proposedSpawnPoints[2]) == true) && (PointPathingPassable(lv_proposedSpawnPoints[3]) == true) && (PointPathingPassable(lv_proposedSpawnPoints[4]) == true) && (PointPathingPassable(lv_proposedSpawnPoints[5]) == true)) {
            lv_validSpawnPoint = true;
        }
        else {
            lv_lineAngle = RandomInt(1, 360);
            lv_proposedSpawnPosition = PointWithOffsetPolar(lv_heroPosition, RandomInt(lv_minDistance, lv_maxDistance), lv_lineAngle);
            Wait(0.0625, c_timeGame);
        }
    }
    UnitCreate(1, "TerranHellbat", 0, lv_owningPlayer, lv_proposedSpawnPoints[1], lv_lineAngle, null);
    UnitGroupAdd(lv_reinforcementUnitGroup, UnitLastCreated());
    UnitCreate(1, "TerranHellbat", 0, lv_owningPlayer, lv_proposedSpawnPoints[2], lv_lineAngle, null);
    UnitGroupAdd(lv_reinforcementUnitGroup, UnitLastCreated());
    UnitCreate(1, "TerranGoliath", 0, lv_owningPlayer, lv_proposedSpawnPoints[3], lv_lineAngle, null);
    UnitGroupAdd(lv_reinforcementUnitGroup, UnitLastCreated());
    UnitCreate(1, "TerranGoliath", 0, lv_owningPlayer, lv_proposedSpawnPoints[4], lv_lineAngle, null);
    UnitGroupAdd(lv_reinforcementUnitGroup, UnitLastCreated());
    UnitCreate(1, "TerranGoliath", 0, lv_owningPlayer, lv_proposedSpawnPoints[5], lv_lineAngle, null);
    UnitGroupAdd(lv_reinforcementUnitGroup, UnitLastCreated());
    auto945EE484_g = lv_reinforcementUnitGroup;
    auto945EE484_u = UnitGroupCount(auto945EE484_g, c_unitCountAll);
    for (;; auto945EE484_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto945EE484_g, auto945EE484_u);
        if (lv_itUnit == null) { break; }
        UnitCreateAIThinkTree(lv_itUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ReinforcementsUsed_Init () {
    libPEB1_gt_ReinforcementsUsed = TriggerCreate("libPEB1_gt_ReinforcementsUsed_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_ReinforcementsUsed, c_playerAny, "PvEReinforcementsDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item Used
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ItemUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoE3D539F5_val;

    // Actions
    if (!runActions) {
        return true;
    }

    StatEventCreate("Pickup Used");
    autoE3D539F5_val = EventPlayerEffectUsed();
    if (autoE3D539F5_val == "PvEMiniNukeInitialSet") {
        StatEventAddDataString(StatEventLastCreated(), "Pickup Type", "Mini Nuke");
    }
    else if (autoE3D539F5_val == "PvEPsiEmitterInitialSet") {
        StatEventAddDataString(StatEventLastCreated(), "Pickup Type", "Psi Emitter");
    }
    else if (autoE3D539F5_val == "PvEReinforcementsInitialSet") {
        StatEventAddDataString(StatEventLastCreated(), "Pickup Type", "Reinforcements");
    }
    else if (autoE3D539F5_val == "PvERejuvenationPulseInitialSet") {
        StatEventAddDataString(StatEventLastCreated(), "Pickup Type", "Rejuvenation Pulse");
    }
    else if (autoE3D539F5_val == "PvETeamStimpackInitialSet") {
        StatEventAddDataString(StatEventLastCreated(), "Pickup Type", "Team Stimpack");
    }
    else {
    }
    StatEventAddDataInt(StatEventLastCreated(), "PlayerID", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    StatEventSend(StatEventLastCreated());
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "DisplayLockedMapMechanicAbility", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ItemUsed_Init () {
    libPEB1_gt_ItemUsed = TriggerCreate("libPEB1_gt_ItemUsed_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_ItemUsed, c_playerAny, "PvEMiniNukeInitialSet");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_ItemUsed, c_playerAny, "PvEReinforcementsInitialSet");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_ItemUsed, c_playerAny, "PvERejuvenationPulseInitialSet");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_ItemUsed, c_playerAny, "PvEPsiEmitterInitialSet");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_ItemUsed, c_playerAny, "PvETeamStimpackInitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Stage 3
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ResetStage3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoD5892BAB_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libGame_gv_announcement_SystemEnabled = false;
    if ((libPEB1_gv_shelter.lv_ping != c_invalidPingId)) {
        PingDestroy(libPEB1_gv_shelter.lv_ping);
        libPEB1_gv_shelter.lv_ping = c_invalidPingId;
    }

    TriggerExecute(libPEB1_gt_CleanupStage3, true, false);
    libPVEB_gf_PvEPickupRestoreHeldPickups();
    Wait(0.125, c_timeGame);
    autoD5892BAB_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoD5892BAB_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	VisExploreArea(lv_itPlayer, RegionEntireMap(), false, false);
    }
    UnitPauseAll(false);
    TriggerExecute(libPEB1_gt_TransitiontoStage3, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ResetStage3_Init () {
    libPEB1_gt_ResetStage3 = TriggerCreate("libPEB1_gt_ResetStage3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Automatic Variable Declarations
    playergroup auto5887FB28_g;
    int auto5887FB28_var;
    playergroup auto35A7B0B1_g;
    int auto35A7B0B1_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPEB1_gv_victorySequenceRan = true;
    libGame_gv_gameOver = true;
    libPEB1_gv_currentStage = 4;
    libPEB1_gv_victoryTime = FixedToInt(libUIUI_gf_HeroesGameTime());
    libPEB1_gv_victoryTimeLoop = FixedToInt((libUIUI_gf_HeroesGameTime() * 16.0));
    libPEB1_gv_pZECurrentStageCurrent = libPEB1_ge_PZEStages_MapComplete;
    TriggerExecute(libPEB1_gt_XPGainFromStage3, true, false);
    TimerPause(libGame_gv_gameTimer, true);
    TimerPause(libGame_gv_matchGameplayTimer, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundPlayForPlayer(SoundLink("SlivanVictoryStinger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(libPEB1_gt_PZEEndofGameMessages, true, false);
    TriggerExecute(libPEB1_gt_ObjectiveShelterComplete, true, false);
    ActorSend(libPEB1_gv_victoryBridge, "Signal Lowering");
    auto5887FB28_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    auto5887FB28_var = -1;
    while (true) {
        	auto5887FB28_var = PlayerGroupNextPlayer(auto5887FB28_g, auto5887FB28_var);
        	if (auto5887FB28_var<0) { break; }
        	libNtve_gf_MakeUnitInvulnerable(libGame_gv_players[auto5887FB28_var].lv_heroUnit, true);
        libUIUI_gf_FullscreenOverlayStopandClearCutsceneQueueForPlayer(auto5887FB28_var);
    }
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 2.0);
    auto35A7B0B1_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    auto35A7B0B1_var = -1;
    while (true) {
        	auto35A7B0B1_var = PlayerGroupNextPlayer(auto35A7B0B1_g, auto35A7B0B1_var);
        	if (auto35A7B0B1_var<0) { break; }
        	VisRevealArea(auto35A7B0B1_var, RegionPlayableMap(), 0.0, false);
        PlayerOptionOverride(auto35A7B0B1_var, "camerafollow", "0");
        CameraForceFollowUnitGroup(auto35A7B0B1_var, false);
        CameraApplyInfo(auto35A7B0B1_var, CameraInfoDefault(), 2.0, -1, 10.0, false);
        CameraPan(auto35A7B0B1_var, PointWithOffsetPolar(libPEB1_gv_victoryPanPoint, 3.0, 90.0), 2.0, -1, 10.0, false);
        CameraSetValue(auto35A7B0B1_var, c_cameraValuePitch, 43.0, 2.0, -1, 10.0);
        CameraSetValue(auto35A7B0B1_var, c_cameraValueDistance, 28.0, 2.0, -1, 10.0);
    }
    Wait(7.0, c_timeGame);
    TriggerExecute(libPEB1_gt_VictoryCinematicQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_VictorySequence_Init () {
    libPEB1_gt_VictorySequence = TriggerCreate("libPEB1_gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_VictoryCinematicQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    playergroup auto7ECE30C5_g;
    int auto7ECE30C5_var;
    playergroup auto05642D4F_g;
    int auto05642D4F_var;
    unitgroup auto8554D1F7_g;
    int auto8554D1F7_u;
    unit auto8554D1F7_var;
    unitgroup auto4EE563E5_g;
    int auto4EE563E5_u;
    unit auto4EE563E5_var;
    playergroup auto696D0F58_g;
    int auto696D0F58_var;
    playergroup auto1CA9FA5F_g;
    playergroup auto8B9E5A1A_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libPEB1_gv_victorySequenceRan == false)) {
        libGame_gv_gameOver = true;
        libPEB1_gv_currentStage = 4;
        TimerPause(libGame_gv_gameTimer, true);
        TimerPause(libGame_gv_matchGameplayTimer, true);
        libPEB1_gv_pZECurrentStageCurrent = libPEB1_ge_PZEStages_MapComplete;
        UnitPauseAll(true);
        libCore_gf_SendActorMessageToDoodadsInRegion("Signal Lowering", libPEB1_gv_shelter.lv_bridgeRegion, "Storm_Doodad_SCBraxis_Bridge");
        auto7ECE30C5_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
        auto7ECE30C5_var = -1;
        while (true) {
            	auto7ECE30C5_var = PlayerGroupNextPlayer(auto7ECE30C5_g, auto7ECE30C5_var);
            	if (auto7ECE30C5_var<0) { break; }
            	libNtve_gf_MakeUnitInvulnerable(libGame_gv_players[auto7ECE30C5_var].lv_heroUnit, true);
            libUIUI_gf_FullscreenOverlayStopandClearCutsceneQueueForPlayer(auto7ECE30C5_var);
        }
    }

    auto05642D4F_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    auto05642D4F_var = -1;
    while (true) {
        	auto05642D4F_var = PlayerGroupNextPlayer(auto05642D4F_g, auto05642D4F_var);
        	if (auto05642D4F_var<0) { break; }
        	PlayerScoreValueEnableAll(auto05642D4F_var, true);
    }
    TriggerQueueEnter();
    if ((libPEB1_gv_victorySequenceRan == false)) {
        libNtve_gf_CinematicMode(true, PlayerGroupAll(), 1.0);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        libNtve_gf_PlayAnimationOnDoodadsInRegion(libPEB1_gv_shelter.lv_bridgeRegion, "Storm_Doodad_SC_Braxis_Infested_Bridge", "Lower", "Stand Morph Start 01", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_SetAnimationCompletion(libPEB1_gv_victoryBridge, "Lower", 100.0);
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PostBossMusic", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    auto8554D1F7_g = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto8554D1F7_u = UnitGroupCount(auto8554D1F7_g, c_unitCountAll);
    for (;; auto8554D1F7_u -= 1) {
        auto8554D1F7_var = UnitGroupUnitFromEnd(auto8554D1F7_g, auto8554D1F7_u);
        if (auto8554D1F7_var == null) { break; }
        UnitRemove(auto8554D1F7_var);
    }
    auto4EE563E5_g = libPEB1_gv_shelter.lv_blockers;
    auto4EE563E5_u = UnitGroupCount(auto4EE563E5_g, c_unitCountAll);
    for (;; auto4EE563E5_u -= 1) {
        auto4EE563E5_var = UnitGroupUnitFromEnd(auto4EE563E5_g, auto4EE563E5_u);
        if (auto4EE563E5_var == null) { break; }
        UnitRemove(auto4EE563E5_var);
    }
    libPEB1_gf_ShowHideHoldoutPanel(false);
    libPEB1_gf_ShowHideBossPanel(false);
    RegionPlayableMapSet(libPEB1_gv_playableSpace[3]);
    auto696D0F58_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    auto696D0F58_var = -1;
    while (true) {
        	auto696D0F58_var = PlayerGroupNextPlayer(auto696D0F58_g, auto696D0F58_var);
        	if (auto696D0F58_var<0) { break; }
        	VisRevealArea(auto696D0F58_var, RegionPlayableMap(), 0.0, false);
    }
    auto1CA9FA5F_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_playerIndex = -1;
    while (true) {
        	lv_playerIndex = PlayerGroupNextPlayer(auto1CA9FA5F_g, lv_playerIndex);
        	if (lv_playerIndex<0) { break; }
        	lv_heroUnit = libGame_gv_players[lv_playerIndex].lv_heroUnit;
        if ((UnitIsAlive(lv_heroUnit) == true)) {
            libNtve_gf_PauseUnit(lv_heroUnit, false);
            UnitCreateEffectUnit(lv_heroUnit, "PVEGenericAbortMissile", lv_heroUnit);
            UnitSetPosition(lv_heroUnit, PointFromName(("Shelter - Player Spawn " + IntToString(libGame_gv_players[lv_playerIndex].lv_rosterSlot))), false);
            if ((UnitGetType(lv_heroUnit) == "HeroTyrael") && (UnitHasBehavior2(lv_heroUnit, "TyraelArchangelsWrathDeathActiveBuff") == true)) {
                UnitBehaviorSetDuration(lv_heroUnit, "TyraelArchangelsWrathDeathActiveBuff", 99.0);
                UnitBehaviorSetDurationRemaining(lv_heroUnit, "TyraelArchangelsWrathDeathActiveBuff", 99.0);
            }

            if ((UnitGetType(lv_heroUnit) == "HeroUther") && (UnitHasBehavior2(lv_heroUnit, "SpiritOfRedemptionSpiritFormBuff") == true)) {
                UnitBehaviorSetDuration(lv_heroUnit, "SpiritOfRedemptionSpiritFormBuff", 99.0);
                UnitBehaviorSetDurationRemaining(lv_heroUnit, "SpiritOfRedemptionSpiritFormBuff", 99.0);
            }

            if ((UnitGetType(lv_heroUnit) == "HeroSgtHammer")) {
                UnitIssueOrder(lv_heroUnit, Order(AbilityCommand("SgtHammerTankMode", 0)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lv_heroUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            }
        }
        else {
            libPVEB_gf_PvEResurrectRevivePlayerInstantly(lv_playerIndex, PointFromName(("Shelter - Player Spawn " + IntToString(libGame_gv_players[lv_playerIndex].lv_rosterSlot))));
            libNtve_gf_PauseUnit(lv_heroUnit, false);
        }
        libNtve_gf_MakeUnitUncommandable(lv_heroUnit, true);
        UnitSetState(lv_heroUnit, c_unitStateFidget, false);
        UnitSetFacing(lv_heroUnit, 45.0, 0.0);
        UnitClearSelection(lv_playerIndex);
        UnitBehaviorAdd(lv_heroUnit, "GenericCloakRevealer", lv_heroUnit, 1);
    }
    Wait(0.0625, c_timeGame);
    auto8B9E5A1A_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_playerIndex = -1;
    while (true) {
        	lv_playerIndex = PlayerGroupNextPlayer(auto8B9E5A1A_g, lv_playerIndex);
        	if (lv_playerIndex<0) { break; }
        	lv_heroUnit = libGame_gv_players[lv_playerIndex].lv_heroUnit;
        UnitIssueOrder(lv_heroUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(PointFromName(("Shelter - Player Spawn " + IntToString(libGame_gv_players[lv_playerIndex].lv_rosterSlot))), 14.0, 45.0)), c_orderQueueReplace);
        UnitIssueOrder(lv_heroUnit, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        PlayerOptionOverride(lv_playerIndex, "camerafollow", "0");
        CameraForceFollowUnitGroup(lv_playerIndex, false);
        CameraApplyInfo(lv_playerIndex, CameraInfoDefault(), 0.0, -1, 10.0, false);
        CameraPan(lv_playerIndex, libPEB1_gv_shelter.lv_cameraPanPoint, 0.0, -1, 10.0, false);
        CameraApplyInfo(lv_playerIndex, libPEB1_gv_shelter.lv_victoryCamera, 5.0, -1, 10.0, true);
    }
    TriggerExecute(libPEB1_gt_VictoryCinematicAction, true, true);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libPEB1_gf_Victory(null, null);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_VictoryCinematicQ_Init () {
    libPEB1_gt_VictoryCinematicQ = TriggerCreate("libPEB1_gt_VictoryCinematicQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic Action
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_VictoryCinematicAction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    playergroup auto34D4CA09_g;
    playergroup auto86B42F6B_g;
    playergroup auto1ED06806_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 1, null, true, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    auto34D4CA09_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_playerIndex = -1;
    while (true) {
        	lv_playerIndex = PlayerGroupNextPlayer(auto34D4CA09_g, lv_playerIndex);
        	if (lv_playerIndex<0) { break; }
        	lv_heroUnit = libGame_gv_players[lv_playerIndex].lv_heroUnit;
        UnitIssueOrder(lv_heroUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(PointFromName(("Shelter - Player Spawn " + IntToString(libGame_gv_players[lv_playerIndex].lv_rosterSlot))), 14.0, 45.0)), c_orderQueueReplace);
        UnitIssueOrder(lv_heroUnit, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
    Wait(1.0, c_timeGame);
    auto86B42F6B_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_playerIndex = -1;
    while (true) {
        	lv_playerIndex = PlayerGroupNextPlayer(auto86B42F6B_g, lv_playerIndex);
        	if (lv_playerIndex<0) { break; }
        	lv_heroUnit = libGame_gv_players[lv_playerIndex].lv_heroUnit;
        UnitIssueOrder(lv_heroUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(PointFromName(("Shelter - Player Spawn " + IntToString(libGame_gv_players[lv_playerIndex].lv_rosterSlot))), 14.0, 45.0)), c_orderQueueReplace);
        UnitIssueOrder(lv_heroUnit, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
    Wait(1.0, c_timeGame);
    auto1ED06806_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_playerIndex = -1;
    while (true) {
        	lv_playerIndex = PlayerGroupNextPlayer(auto1ED06806_g, lv_playerIndex);
        	if (lv_playerIndex<0) { break; }
        	lv_heroUnit = libGame_gv_players[lv_playerIndex].lv_heroUnit;
        UnitIssueOrder(lv_heroUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(PointFromName(("Shelter - Player Spawn " + IntToString(libGame_gv_players[lv_playerIndex].lv_rosterSlot))), 14.0, 45.0)), c_orderQueueReplace);
        UnitIssueOrder(lv_heroUnit, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("AdjutantPVEVO|Line00014", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_VictoryCinematicAction_Init () {
    libPEB1_gt_VictoryCinematicAction = TriggerCreate("libPEB1_gt_VictoryCinematicAction_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_Defeat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    fixed lv_specialDeathStateWaitTime;

    // Automatic Variable Declarations
    playergroup auto98CDF91B_g;
    playergroup autoCF2F8B59_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libGame_gf_TeamNumberOfPlayer(libGame_gf_HeroKilledPlayer()) == libGame_gv_teamOrderIndex_C))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto98CDF91B_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto98CDF91B_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((libPVEB_gf_PBIsValidHumanTeamPlayer(lv_itPlayer) == true) && (libPVEB_gf_PBPlayerHeroIsDead(lv_itPlayer) == false)) {
            return true;
        }

    }
    TimerPause(libGame_gv_gameTimer, true);
    TimerPause(libGame_gv_matchGameplayTimer, true);
    if ((libPEB1_gv_slivan != null)) {
        libNtve_gf_ChangeUnitDamage(libPEB1_gv_slivan, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
        libNtve_gf_ChangeUnitDamage(libPEB1_gv_slivan, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }

    Wait(1.0, c_timeGame);
    autoCF2F8B59_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(autoCF2F8B59_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if (((UnitGetType(libGame_gv_players[lv_itPlayer].lv_heroUnit) == "HeroUther") || (UnitGetType(libGame_gv_players[lv_itPlayer].lv_heroUnit) == "HeroTyrael"))) {
            if ((UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "TyraelArchangelsWrathDeathActiveBuff") == true) && (UnitBehaviorDuration(libGame_gv_players[lv_itPlayer].lv_heroUnit, "TyraelArchangelsWrathDeathActiveBuff") > lv_specialDeathStateWaitTime)) {
                lv_specialDeathStateWaitTime = UnitBehaviorDuration(libGame_gv_players[lv_itPlayer].lv_heroUnit, "TyraelArchangelsWrathDeathActiveBuff");
            }

            if ((UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "UtherEternalVanguardRezDelay") == true) && (UnitBehaviorDuration(libGame_gv_players[lv_itPlayer].lv_heroUnit, "UtherEternalVanguardRezDelay") > lv_specialDeathStateWaitTime)) {
                lv_specialDeathStateWaitTime = (UnitBehaviorDuration(libGame_gv_players[lv_itPlayer].lv_heroUnit, "SpiritOfRedemptionSpiritFormBuff") + 1.5);
            }

            if ((UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "SpiritOfRedemptionSpiritFormBuff") == true) && (UnitBehaviorDuration(libGame_gv_players[lv_itPlayer].lv_heroUnit, "SpiritOfRedemptionSpiritFormBuff") > lv_specialDeathStateWaitTime)) {
                lv_specialDeathStateWaitTime = UnitBehaviorDuration(libGame_gv_players[lv_itPlayer].lv_heroUnit, "SpiritOfRedemptionSpiritFormBuff");
            }

        }

    }
    Wait(lv_specialDeathStateWaitTime, c_timeGame);
    UnitPauseAll(true);
    Wait(1.0, c_timeGame);
    if ((libPEB1_gv_currentStage == 3) && (libPEB1_gv_retryChances > 0) && (libPVEB_gf_PBGameDifficulty() == libPVEB_ge_PVEGameDifficulty_Normal)) {
        libPEB1_gv_retryChances -= 1;
        libPEB1_gv_retrying = true;
        TriggerExecute(libPEB1_gt_ResetStage3, true, false);
        return true;
    }

    libPEB1_gv_defeatTime = FixedToInt(libUIUI_gf_HeroesGameTime());
    TriggerExecute(libPEB1_gt_PZEEndofGameMessages, true, false);
    Wait(2.0, c_timeGame);
    libPEB1_gf_ShowHideHoldoutPanel(false);
    libPEB1_gf_ShowHideBossPanel(false);
    libPVEB_gf_PBVictoryDefeat(false, null, null);
    KickFromGame(PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_Defeat_Init () {
    libPEB1_gt_Defeat = TriggerCreate("libPEB1_gt_Defeat_Func");
    libGame_gf_HeroKilled(libPEB1_gt_Defeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Over Score Transmission
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_GameOverScoreTransmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto63C9FA8D_g;
    int auto63C9FA8D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto63C9FA8D_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
    auto63C9FA8D_var = -1;
    while (true) {
        	auto63C9FA8D_var = PlayerGroupNextPlayer(auto63C9FA8D_g, auto63C9FA8D_var);
        	if (auto63C9FA8D_var<0) { break; }
        	libGame_gf_ScoreValuesReportIntegerValueAndLog(auto63C9FA8D_var, "Difficulty", libPVEB_gf_PVEDifficultyValueInt(1, 2));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_GameOverScoreTransmission_Init () {
    libPEB1_gt_GameOverScoreTransmission = TriggerCreate("libPEB1_gt_GameOverScoreTransmission_Func");
    libGame_gf_GameOverEvent(libPEB1_gt_GameOverScoreTransmission);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - First Checkpoint - Display Notification
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ObjectiveFirstCheckpointDisplayNotification_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPEB1_gf_DisplayHoldoutPanel(libPEB1_ge_PZEHoldoutPanelState_CheckpointFirst, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ObjectiveFirstCheckpointDisplayNotification_Init () {
    libPEB1_gt_ObjectiveFirstCheckpointDisplayNotification = TriggerCreate("libPEB1_gt_ObjectiveFirstCheckpointDisplayNotification_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - First Checkpoint - Complete
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ObjectiveFirstCheckpointComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPEB1_gf_ShowHideHoldoutPanel(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ObjectiveFirstCheckpointComplete_Init () {
    libPEB1_gt_ObjectiveFirstCheckpointComplete = TriggerCreate("libPEB1_gt_ObjectiveFirstCheckpointComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Second Checkpoint - Display Notification
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ObjectiveSecondCheckpointDisplayNotification_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPEB1_gf_DisplayHoldoutPanel(libPEB1_ge_PZEHoldoutPanelState_CheckpointSecond, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ObjectiveSecondCheckpointDisplayNotification_Init () {
    libPEB1_gt_ObjectiveSecondCheckpointDisplayNotification = TriggerCreate("libPEB1_gt_ObjectiveSecondCheckpointDisplayNotification_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Second Checkpoint - Complete
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ObjectiveSecondCheckpointComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPEB1_gf_ShowHideHoldoutPanel(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ObjectiveSecondCheckpointComplete_Init () {
    libPEB1_gt_ObjectiveSecondCheckpointComplete = TriggerCreate("libPEB1_gt_ObjectiveSecondCheckpointComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Shelter - Display Notification
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ObjectiveShelterDisplayNotification_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPEB1_gf_DisplayHoldoutPanel(libPEB1_ge_PZEHoldoutPanelState_Shelter, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ObjectiveShelterDisplayNotification_Init () {
    libPEB1_gt_ObjectiveShelterDisplayNotification = TriggerCreate("libPEB1_gt_ObjectiveShelterDisplayNotification_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Shelter - Complete
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ObjectiveShelterComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libPEB1_gf_ShowHideHoldoutPanel(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ObjectiveShelterComplete_Init () {
    libPEB1_gt_ObjectiveShelterComplete = TriggerCreate("libPEB1_gt_ObjectiveShelterComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Transmission Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_IntroTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 1))) {
        return true;
    }

    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("AdjutantPVEVO|Line00054", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_IntroTransmissionQ_Init () {
    libPEB1_gt_IntroTransmissionQ = TriggerCreate("libPEB1_gt_IntroTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Arriving Countdown Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ZergArrivingCountdownQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 1))) {
        return true;
    }

    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("AdjutantPVEVO|Line00004", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ZergArrivingCountdownQ_Init () {
    libPEB1_gt_ZergArrivingCountdownQ = TriggerCreate("libPEB1_gt_ZergArrivingCountdownQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battle Begins Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_BattleBeginsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 1))) {
        return true;
    }

    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("AdjutantPVEVO|Line00026", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_BattleBeginsQ_Init () {
    libPEB1_gt_BattleBeginsQ = TriggerCreate("libPEB1_gt_BattleBeginsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Hero Detected Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_EnemyHeroDetectedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 1))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 0, libPVEB_gv_filtersPvEEventHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 1))) {
        return true;
    }

    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("AdjutantPVEVO|Line00019", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_EnemyHeroDetectedQ_Init () {
    libPEB1_gt_EnemyHeroDetectedQ = TriggerCreate("libPEB1_gt_EnemyHeroDetectedQ_Func");
    TriggerAddEventUnitRegion(libPEB1_gt_EnemyHeroDetectedQ, null, RegionFromName("Enemy Hero Detected"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkpoint Admission Protocol - Stage 1 Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_CheckpointAdmissionProtocolStage1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 1))) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("Doodad_SCBraxis_CaptureSlab_Unlock", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), libPEB1_gv_checkpoints[1].lv_pingPoint, 5.0, Color(0.00, 100.00, 0.00));
    SoundPlayForPlayer(SoundLink("UI_PvEBrawl_ObjectivePing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 1))) {
        return true;
    }

    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("AdjutantPVEVO|Line00034", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_CheckpointAdmissionProtocolStage1Q_Init () {
    libPEB1_gt_CheckpointAdmissionProtocolStage1Q = TriggerCreate("libPEB1_gt_CheckpointAdmissionProtocolStage1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkpoint Open in 10 - Stage 1 Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_CheckpointOpenin10Stage1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 1))) {
        return true;
    }

    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("AdjutantPVEVO|Line00009", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_CheckpointOpenin10Stage1Q_Init () {
    libPEB1_gt_CheckpointOpenin10Stage1Q = TriggerCreate("libPEB1_gt_CheckpointOpenin10Stage1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkpoint Open - Stage 1 Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_CheckpointOpenStage1Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 1))) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("Doodad_SCBraxis_CaptureSlab_Unlock", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), libPEB1_gv_checkpoints[1].lv_pingPoint, 5.0, Color(0.00, 100.00, 0.00));
    SoundPlayForPlayer(SoundLink("UI_PvEBrawl_ObjectivePing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 1))) {
        return true;
    }

    if ((UnitGroupCount(UnitGroupFilterPlayer(libPEB1_gv_activeZergMinions, libCore_gv_cOMPUTER_TeamChaos, 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroupFilterAlliance(libPEB1_gv_activeZergHeroes, libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceAlly, 0), c_unitCountAlive) == 0)) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("AdjutantPVEVO|Line00016", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("AdjutantPVEVO|Line00043", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_CheckpointOpenStage1Q_Init () {
    libPEB1_gt_CheckpointOpenStage1Q = TriggerCreate("libPEB1_gt_CheckpointOpenStage1Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Heroes Nearby Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_EnemyHeroesNearbyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 2))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 0, libPVEB_gv_filtersPvEEventHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libPEB1_gv_zergHeroesStage2Ready == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueEnter();
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 2))) {
        return true;
    }

    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("AdjutantPVEVO|Line00002", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    if ((UnitIsAlive(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[2][2].lv_hero)) == true)) {
        libPEB1_gf_PlayZergHeroSpawnSound(libPVEB_gf_PBNPCHeroUnit(libPEB1_gv_zergHeroes[2][2].lv_hero));
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_EnemyHeroesNearbyQ_Init () {
    libPEB1_gt_EnemyHeroesNearbyQ = TriggerCreate("libPEB1_gt_EnemyHeroesNearbyQ_Func");
    TriggerAddEventUnitRegion(libPEB1_gt_EnemyHeroesNearbyQ, null, RegionFromName("Enemy Heroes Nearby"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkpoint Admission Protocol - Stage 2 Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_CheckpointAdmissionProtocolStage2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 2))) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("Doodad_SCBraxis_CaptureSlab_Unlock", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), libPEB1_gv_checkpoints[2].lv_pingPoint, 5.0, Color(0.00, 100.00, 0.00));
    SoundPlayForPlayer(SoundLink("UI_PvEBrawl_ObjectivePing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 2))) {
        return true;
    }

    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("AdjutantPVEVO|Line00017", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_CheckpointAdmissionProtocolStage2Q_Init () {
    libPEB1_gt_CheckpointAdmissionProtocolStage2Q = TriggerCreate("libPEB1_gt_CheckpointAdmissionProtocolStage2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkpoint Open in 10 - Stage 2 Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_CheckpointOpenin10Stage2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 2))) {
        return true;
    }

    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("AdjutantPVEVO|Line00009", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_CheckpointOpenin10Stage2Q_Init () {
    libPEB1_gt_CheckpointOpenin10Stage2Q = TriggerCreate("libPEB1_gt_CheckpointOpenin10Stage2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkpoint Open - Stage 2 Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_CheckpointOpenStage2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 2))) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("Doodad_SCBraxis_CaptureSlab_Unlock", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), libPEB1_gv_checkpoints[2].lv_pingPoint, 5.0, Color(0.00, 100.00, 0.00));
    SoundPlayForPlayer(SoundLink("UI_PvEBrawl_ObjectivePing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 2))) {
        return true;
    }

    if ((UnitGroupCount(UnitGroupFilterPlayer(libPEB1_gv_activeZergMinions, libCore_gv_cOMPUTER_TeamChaos, 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroupFilterAlliance(libPEB1_gv_activeZergHeroes, libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceAlly, 0), c_unitCountAlive) == 0)) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("AdjutantPVEVO|Line00016", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("AdjutantPVEVO|Line00043", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_CheckpointOpenStage2Q_Init () {
    libPEB1_gt_CheckpointOpenStage2Q = TriggerCreate("libPEB1_gt_CheckpointOpenStage2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dangerous Creature Ahead Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_DangerousCreatureAheadQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 3))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 0, libPVEB_gv_filtersPvEEventHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(libPEB1_gt_SpawnSlivan, true, false);
    TriggerQueueEnter();
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 3))) {
        return true;
    }

    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("AdjutantPVEVO|Line00012", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    TriggerQueueExit();
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 3))) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "BossMusicPart1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_DangerousCreatureAheadQ_Init () {
    libPEB1_gt_DangerousCreatureAheadQ = TriggerCreate("libPEB1_gt_DangerousCreatureAheadQ_Func");
    TriggerAddEventUnitRegion(libPEB1_gt_DangerousCreatureAheadQ, null, RegionFromName("Dangerous Creature Ahead"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Dies Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_SlivanDiesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PostBossMusic", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 3))) {
        return true;
    }

    MinimapPing(PlayerGroupAll(), libPEB1_gv_shelter.lv_pingPoint, 5.0, Color(0.00, 100.00, 0.00));
    SoundPlayForPlayer(SoundLink("UI_PvEBrawl_ObjectivePing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    VisRevealArea(libGame_gv_teamOrderIndex_C, RegionFromName("Shelter Reveal"), 0.0, false);
    Wait(1.0, c_timeReal);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("AdjutantPVEVO|Line00049", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_SlivanDiesQ_Init () {
    libPEB1_gt_SlivanDiesQ = TriggerCreate("libPEB1_gt_SlivanDiesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Revived Q
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PlayerRevivedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    int lv_targetPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_targetPlayer = UnitGetOwner(lv_target);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    if ((RandomInt(1, 2) == 1)) {
        TransmissionSendForPlayerSelect(PlayerGroupSingle(lv_targetPlayer), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("AdjutantPVEVO_Adjutant_101"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
        TransmissionSendForPlayerSelect(PlayerGroupSingle(lv_targetPlayer), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex("AdjutantPVEVO_Adjutant_104"), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PlayerRevivedQ_Init () {
    libPEB1_gt_PlayerRevivedQ = TriggerCreate("libPEB1_gt_PlayerRevivedQ_Func");
    TriggerAddEventPlayerEffectUsed(libPEB1_gt_PlayerRevivedQ, c_playerAny, "CaptureMacGuffinTwoCastComplete");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PZE Init UI
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PZEInitUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MinimapPanel");
    libPEB1_gv_pZEMinimapPanel = DialogControlLastCreated();
    DialogControlHookup(libPEB1_gv_pZEMinimapPanel, c_triggerControlTypePanel, "Minimap");
    libPEB1_gv_pZEMinimap = DialogControlLastCreated();
    DialogControlHookup(libPEB1_gv_pZEMinimap, c_triggerControlTypeImage, "HoverImage");
    DialogControlSetAnimationState(libPEB1_gv_pZEMinimap, PlayerGroupAll(), "MaskState", "Part1");
    libPVEB_gv_pBGameOverScreenCallback = libPEB1_gt_PZEGameOverScreenCallback;
    TriggerExecute(libPESC_gt_TopBarInit, true, false);
    TriggerExecute(libPEB1_gt_MissionTimerBarInit, true, false);
    DialogControlSetVisible(libUIUI_gv_uIObserverUI.lv_mainPanel, PlayerGroupAll(), false);
    DialogControlFadeTransparency(libUIUI_gv_uIObserverUI.lv_mainPanel, PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(libUIUI_gv_uIPartyFrame.lv_mainPanel, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PZEInitUI_Init () {
    libPEB1_gt_PZEInitUI = TriggerCreate("libPEB1_gt_PZEInitUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Screen Display
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ScoreScreenDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_statsFrame;
    int lv_playerIndex;
    int lv_tempDialogItem;
    int lv_itButton;
    int lv_sortButton;

    // Automatic Variable Declarations
    playergroup auto4A974380_g;
    const int auto1989FCE4_ae = 6;
    const int auto1989FCE4_ai = 1;
    playergroup auto52279AA5_g;

    // Variable Initialization
    lv_statsFrame = c_invalidDialogControlId;
    lv_tempDialogItem = c_invalidDialogControlId;
    lv_sortButton = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    auto4A974380_g = PlayerGroupActive();
    lv_playerIndex = -1;
    while (true) {
        	lv_playerIndex = PlayerGroupNextPlayer(auto4A974380_g, lv_playerIndex);
        	if (lv_playerIndex<0) { break; }
        	libStEx_gf_CinematicFade(false, 0.0, Color(0.00, 0.00, 0.00), lv_playerIndex);
    }
    UISetWorldVisible(PlayerGroupAll(), false);
    libUIUI_gf_GameOverSplashShowHideForAllPlayers(false, libGame_gv_teamOrderIndex_C);
    DialogControlHookup(libPEB1_gv_pZETabScreenPanel.lv_mainPanel, c_triggerControlTypeButton, "CloseButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPEB1_gv_pZETabScreenPanel.lv_tabControl, c_triggerControlTypePanel, "ShowDeathRecapButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPEB1_gv_pZETabScreenPanel.lv_tabControl, c_triggerControlTypePanel, "ShowStatsButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPEB1_gv_pZETabScreenPanel.lv_tabControl, c_triggerControlTypePanel, "ShowTalentsButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libPEB1_gv_pZETabScreenPanel.lv_tabControl, c_triggerControlTypePanel, "TalentsContainerFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlHookup(libPEB1_gv_pZETabScreenPanel.lv_tabControl, c_triggerControlTypePanel, "DeathRecapContainerFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlHookup(libPEB1_gv_pZETabScreenPanel.lv_tabControl, c_triggerControlTypePanel, "StatsContainerFrame");
    lv_statsFrame = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    if ((libPEB1_gv_pZEScoreScreenPanel.lv_mainPanel == c_invalidDialogControlId)) {
        DialogControlCreateInPanelFromTemplate(libPEB1_gv_pZETabScreenPanel.lv_tabControl, c_triggerControlTypePanel, "StarcraftPvEUI/PVEBrawlScoreSubPanel");
        libPEB1_gv_pZEScoreScreenPanel.lv_mainPanel = DialogControlLastCreated();
        DialogControlSetSize(libPEB1_gv_pZETabScreenPanel.lv_mainPanel, PlayerGroupAll(), 1380, 900);
        DialogControlHookup(libPEB1_gv_pZEScoreScreenPanel.lv_mainPanel, c_triggerControlTypeLabel, "CompletionTime");
        libPEB1_gv_pZEScoreScreenPanel.lv_timeLabel = DialogControlLastCreated();
    }

    lv_itButton = 0;
    for ( ; ( (auto1989FCE4_ai >= 0 && lv_itButton <= auto1989FCE4_ae) || (auto1989FCE4_ai < 0 && lv_itButton >= auto1989FCE4_ae) ) ; lv_itButton += auto1989FCE4_ai ) {
        DialogControlHookup(lv_statsFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("SortButton" + IntToString(lv_itButton))));
        lv_sortButton = DialogControlLastCreated();
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
        if ((lv_itButton == 3)) {
            DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_statsFrame, c_anchorTopLeft, 380, 290);
        }

        DialogControlHookup(lv_sortButton, c_triggerControlTypeImage, "FilterIcon");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(lv_sortButton, c_triggerControlTypeImage, "ClearIcon");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    DialogControlSetVisible(libPEB1_gv_pZETabScreenPanel.lv_timeRunSubPanel, PlayerGroupAll(), false);
    DialogControlHookup(libPEB1_gv_pZEScoreScreenPanel.lv_mainPanel, c_triggerControlTypeButton, "CloseButton");
    libPEB1_gv_pZEScoreScreenPanel.lv_closeButton = DialogControlLastCreated();
    DialogControlSetVisible(libPEB1_gv_pZETabScreenPanel.lv_mainPanel, PlayerGroupAll(), true);
    DialogControlFadeTransparency(libPEB1_gv_pZETabScreenPanel.lv_mainPanel, PlayerGroupAll(), 0.0, 0.0);
    DialogControlSetVisible(libPEB1_gv_pZETabScreenPanel.lv_tabControl, PlayerGroupAll(), true);
    auto52279AA5_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_playerIndex = -1;
    while (true) {
        	lv_playerIndex = PlayerGroupNextPlayer(auto52279AA5_g, lv_playerIndex);
        	if (lv_playerIndex<0) { break; }
        	if ((PlayerStatus(lv_playerIndex) == c_playerStatusActive)) {
            DialogControlHookup(libPEB1_gv_pZETabScreenPanel.lv_tabControl, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("PlayerFrame" + IntToString((lv_playerIndex - 1)))));
            lv_tempDialogItem = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
            DialogControlHookup(lv_tempDialogItem, c_triggerControlTypePanel, "TalentsContainerFrame");
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            DialogControlHookup(lv_tempDialogItem, c_triggerControlTypePanel, "PlayerDeathIndicatorFrame");
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            DialogControlHookup(lv_tempDialogItem, c_triggerControlTypePanel, "StatsContainerFrame");
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
        }

    }
    libNtve_gf_SetDialogItemText(libPEB1_gv_pZEScoreScreenPanel.lv_timeLabel, TextTimeFormat(StringToText("<hour2/>:<min2/>:<sec2/>"), libPEB1_gv_victoryTime), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ScoreScreenDisplay_Init () {
    libPEB1_gt_ScoreScreenDisplay = TriggerCreate("libPEB1_gt_ScoreScreenDisplay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Screen Hide
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ScoreScreenHide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libPEB1_gv_pZETabScreenPanel.lv_mainPanel, PlayerGroupAll(), false);
    DialogControlFadeTransparency(libPEB1_gv_pZETabScreenPanel.lv_mainPanel, PlayerGroupAll(), 0.0, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ScoreScreenHide_Init () {
    libPEB1_gt_ScoreScreenHide = TriggerCreate("libPEB1_gt_ScoreScreenHide_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Screen Leave
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ScoreScreenLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libPEB1_gv_pZEScoreScreenPanel.lv_closeButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_players[EventPlayer()].lv_victoryDefeat = c_gameOverVictory;
    libPVEB_gf_PBEndGameForPlayer(EventPlayer());
    KickFromGame(PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ScoreScreenLeave_Init () {
    libPEB1_gt_ScoreScreenLeave = TriggerCreate("libPEB1_gt_ScoreScreenLeave_Func");
    TriggerAddEventDialogControl(libPEB1_gt_ScoreScreenLeave, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tab Screen Init
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_TabScreenInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    playergroup lv_visibleGroup;
    fixed lv_time;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_visibleGroup = PlayerGroupEmpty();

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_TabScreenInit_Init () {
    libPEB1_gt_TabScreenInit = TriggerCreate("libPEB1_gt_TabScreenInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mission Timer Bar Init
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_MissionTimerBarInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(libPESC_gv_pVEBrawlTopBar.lv_timerLabelGold, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(libPEB1_gv_goldTime_C)), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(libPESC_gv_pVEBrawlTopBar.lv_timerLabelGold, "Storm_CoopBrawlTopBarTimerGold", PlayerGroupAll());
    DialogControlFadeTransparency(libPESC_gv_pVEBrawlTopBar.lv_timerLabelGold, PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemText(libPESC_gv_pVEBrawlTopBar.lv_timerLabelSilver, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt((libPEB1_gv_silverTime_C - libPEB1_gv_goldTime_C))), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(libPESC_gv_pVEBrawlTopBar.lv_timerLabelSilver, "Storm_CoopBrawlTopBarTimerDisabled", PlayerGroupAll());
    DialogControlFadeTransparency(libPESC_gv_pVEBrawlTopBar.lv_timerLabelSilver, PlayerGroupAll(), 0.0, 50.0);
    TriggerEnable(libPEB1_gt_MissionTimerBarUpdate, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_MissionTimerBarInit_Init () {
    libPEB1_gt_MissionTimerBarInit = TriggerCreate("libPEB1_gt_MissionTimerBarInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mission Timer Bar Update
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_MissionTimerBarUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_goldBarWidth_C = 373;
    const int lv_silverBarWidth_C = 110;
    int lv_missionTimerState;
    fixed lv_time;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        lv_time = libUIUI_gf_HeroesGameTime();
        if ((lv_time < libPEB1_gv_goldTime_C)) {
            libNtve_gf_SetDialogItemText(libPESC_gv_pVEBrawlTopBar.lv_timerLabelGold, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), CeilingI((libPEB1_gv_goldTime_C - TimerGetElapsed(libGame_gv_gameTimer)))), PlayerGroupAll());
            DialogControlSetSize(libPESC_gv_pVEBrawlTopBar.lv_timerBarGold, PlayerGroupAll(), FixedToInt((((libPEB1_gv_goldTime_C - TimerGetElapsed(libGame_gv_gameTimer)) * lv_goldBarWidth_C) / libPEB1_gv_goldTime_C)), 14);
        }
        else if ((lv_time >= libPEB1_gv_goldTime_C) && (lv_missionTimerState == 0)) {
            lv_missionTimerState += 1;
            libNtve_gf_SetDialogItemText(libPESC_gv_pVEBrawlTopBar.lv_timerLabelGold, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), 0), PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(libPESC_gv_pVEBrawlTopBar.lv_timerLabelGold, "Storm_CoopBrawlTopBarTimerDisabled", PlayerGroupAll());
            DialogControlFadeTransparency(libPESC_gv_pVEBrawlTopBar.lv_timerLabelGold, PlayerGroupAll(), 0.0, 50.0);
            DialogControlSetVisible(libPESC_gv_pVEBrawlTopBar.lv_timerBarGold, PlayerGroupAll(), false);
            libNtve_gf_SetDialogItemText(libPESC_gv_pVEBrawlTopBar.lv_timerLabelSilver, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt((libPEB1_gv_silverTime_C - libPEB1_gv_goldTime_C))), PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(libPESC_gv_pVEBrawlTopBar.lv_timerLabelSilver, "Storm_CoopBrawlTopBarTimerSilver", PlayerGroupAll());
            DialogControlFadeTransparency(libPESC_gv_pVEBrawlTopBar.lv_timerLabelSilver, PlayerGroupAll(), 0.0, 0.0);
        }
        else if ((lv_time > libPEB1_gv_goldTime_C) && (lv_time < libPEB1_gv_silverTime_C) && (lv_missionTimerState == 1)) {
            libNtve_gf_SetDialogItemText(libPESC_gv_pVEBrawlTopBar.lv_timerLabelSilver, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), CeilingI((libPEB1_gv_silverTime_C - TimerGetElapsed(libGame_gv_gameTimer)))), PlayerGroupAll());
            DialogControlSetSize(libPESC_gv_pVEBrawlTopBar.lv_timerBarSilver, PlayerGroupAll(), FixedToInt((((libPEB1_gv_silverTime_C - TimerGetElapsed(libGame_gv_gameTimer)) * lv_silverBarWidth_C) / (libPEB1_gv_silverTime_C - libPEB1_gv_goldTime_C))), 14);
        }
        else if ((lv_time >= libPEB1_gv_silverTime_C) && (lv_missionTimerState == 1)) {
            libNtve_gf_SetDialogItemText(libPESC_gv_pVEBrawlTopBar.lv_timerLabelSilver, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), 0), PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(libPESC_gv_pVEBrawlTopBar.lv_timerLabelSilver, "Storm_CoopBrawlTopBarTimerDisabled", PlayerGroupAll());
            DialogControlFadeTransparency(libPESC_gv_pVEBrawlTopBar.lv_timerLabelSilver, PlayerGroupAll(), 0.0, 50.0);
            DialogControlSetVisible(libPESC_gv_pVEBrawlTopBar.lv_timerBarSilver, PlayerGroupAll(), false);
            return true;
        }
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_MissionTimerBarUpdate_Init () {
    libPEB1_gt_MissionTimerBarUpdate = TriggerCreate("libPEB1_gt_MissionTimerBarUpdate_Func");
    TriggerEnable(libPEB1_gt_MissionTimerBarUpdate, false);
    TriggerAddEventTimer(libPEB1_gt_MissionTimerBarUpdate, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PZE Game Over Screen Callback
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PZEGameOverScreenCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libPVEB_gv_gameOverResult == c_gameOverVictory)) {
        libNtve_gf_SetDialogItemText(libPVEB_gv_pBGameOverScreen.lv_timeLabel, TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetElapsed(libGame_gv_gameTimer))), PlayerGroupAll());
        if ((IntToFixed(libPEB1_gv_victoryTime) <= libPEB1_gv_goldTime_C)) {
            libNtve_gf_SetDialogItemStyle(libPVEB_gv_pBGameOverScreen.lv_timeLabel, "Storm_CoopBrawlVictoryTimeLabelGold", PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(libPVEB_gv_pBGameOverScreen.lv_finalTimeLabel, "Storm_CoopBrawlVictoryFinalTimeGold", PlayerGroupAll());
        }
        else if ((IntToFixed(libPEB1_gv_victoryTime) <= libPEB1_gv_silverTime_C)) {
            libNtve_gf_SetDialogItemStyle(libPVEB_gv_pBGameOverScreen.lv_timeLabel, "Storm_CoopBrawlVictoryTimeLabelSilver", PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(libPVEB_gv_pBGameOverScreen.lv_finalTimeLabel, "Storm_CoopBrawlVictoryFinalTimeSilver", PlayerGroupAll());
        }
        else if (true) {
            libNtve_gf_SetDialogItemStyle(libPVEB_gv_pBGameOverScreen.lv_timeLabel, "Storm_CoopBrawlVictoryTimeLabelBronze", PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(libPVEB_gv_pBGameOverScreen.lv_finalTimeLabel, "Storm_CoopBrawlVictoryFinalTimeBronze", PlayerGroupAll());
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PZEGameOverScreenCallback_Init () {
    libPEB1_gt_PZEGameOverScreenCallback = TriggerCreate("libPEB1_gt_PZEGameOverScreenCallback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Exploration Regions - Stage 1
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ExplorationRegionsStage1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region[32] lv_explorationRegions;
    point[32] lv_explorationPoints;
    bool[32] lv_regionExplored;
    int lv_regionIndex;
    int lv_maxRegions;
    bool lv_everythingExplored;
    int lv_playerIndex;

    // Automatic Variable Declarations
    const int autoF2DA5F5B_ae = 31;
    const int autoF2DA5F5B_ai = 1;
    int autoCB023606_ae;
    const int autoCB023606_ai = 1;
    int autoB4688327_ae;
    const int autoB4688327_ai = 1;
    playergroup auto54DAE664_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_regionIndex = 1;
    for ( ; ( (autoF2DA5F5B_ai >= 0 && lv_regionIndex <= autoF2DA5F5B_ae) || (autoF2DA5F5B_ai < 0 && lv_regionIndex >= autoF2DA5F5B_ae) ) ; lv_regionIndex += autoF2DA5F5B_ai ) {
        if (((RegionFromName(("Exploration Region 1 - " + IntToString(lv_regionIndex))) == null) || (PointFromName(("Exploration Point 1 - " + IntToString(lv_regionIndex))) == null))) {
            break;
        }
        else {
            lv_explorationRegions[lv_regionIndex] = RegionFromName(("Exploration Region 1 - " + IntToString(lv_regionIndex)));
            lv_explorationPoints[lv_regionIndex] = PointFromName(("Exploration Point 1 - " + IntToString(lv_regionIndex)));
            lv_maxRegions = lv_regionIndex;
        }
    }
    while (true) {
        Wait(1.0, c_timeGame);
        if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 1))) {
            return true;
        }

        lv_everythingExplored = true;
        autoCB023606_ae = lv_maxRegions;
        lv_regionIndex = 1;
        for ( ; ( (autoCB023606_ai >= 0 && lv_regionIndex <= autoCB023606_ae) || (autoCB023606_ai < 0 && lv_regionIndex >= autoCB023606_ae) ) ; lv_regionIndex += autoCB023606_ai ) {
            if ((lv_regionExplored[lv_regionIndex] == false)) {
                lv_everythingExplored = false;
                break;
            }

        }
        if ((lv_everythingExplored == true)) {
            return true;
        }

        autoB4688327_ae = lv_maxRegions;
        lv_regionIndex = 1;
        for ( ; ( (autoB4688327_ai >= 0 && lv_regionIndex <= autoB4688327_ae) || (autoB4688327_ai < 0 && lv_regionIndex >= autoB4688327_ae) ) ; lv_regionIndex += autoB4688327_ai ) {
            if ((lv_regionExplored[lv_regionIndex] == false) && (VisIsVisibleForPlayer(libStEx_gv_pLAYER_11_ORDER, lv_explorationPoints[lv_regionIndex]) == true)) {
                lv_regionExplored[lv_regionIndex] = true;
                auto54DAE664_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
                lv_playerIndex = -1;
                while (true) {
                    	lv_playerIndex = PlayerGroupNextPlayer(auto54DAE664_g, lv_playerIndex);
                    	if (lv_playerIndex<0) { break; }
                    	VisExploreArea(lv_playerIndex, lv_explorationRegions[lv_regionIndex], true, false);
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ExplorationRegionsStage1_Init () {
    libPEB1_gt_ExplorationRegionsStage1 = TriggerCreate("libPEB1_gt_ExplorationRegionsStage1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Exploration Regions - Stage 2
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_ExplorationRegionsStage2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region[32] lv_explorationRegions;
    point[32] lv_explorationPoints;
    bool[32] lv_regionExplored;
    int lv_regionIndex;
    int lv_maxRegions;
    bool lv_everythingExplored;
    int lv_playerIndex;

    // Automatic Variable Declarations
    const int auto5012D5EA_ae = 31;
    const int auto5012D5EA_ai = 1;
    int auto402B1FF7_ae;
    const int auto402B1FF7_ai = 1;
    int auto532C4E19_ae;
    const int auto532C4E19_ai = 1;
    playergroup auto661FAD45_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libPEB1_gv_currentStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_regionIndex = 1;
    for ( ; ( (auto5012D5EA_ai >= 0 && lv_regionIndex <= auto5012D5EA_ae) || (auto5012D5EA_ai < 0 && lv_regionIndex >= auto5012D5EA_ae) ) ; lv_regionIndex += auto5012D5EA_ai ) {
        if (((RegionFromName(("Exploration Region 2 - " + IntToString(lv_regionIndex))) == null) || (PointFromName(("Exploration Point 2 - " + IntToString(lv_regionIndex))) == null))) {
            break;
        }
        else {
            lv_explorationRegions[lv_regionIndex] = RegionFromName(("Exploration Region 2 - " + IntToString(lv_regionIndex)));
            lv_explorationPoints[lv_regionIndex] = PointFromName(("Exploration Point 2 - " + IntToString(lv_regionIndex)));
            lv_maxRegions = lv_regionIndex;
        }
    }
    while (true) {
        Wait(1.0, c_timeGame);
        if (((libGame_gv_gameOver == true) || (libPEB1_gv_currentStage != 2))) {
            return true;
        }

        lv_everythingExplored = true;
        auto402B1FF7_ae = lv_maxRegions;
        lv_regionIndex = 1;
        for ( ; ( (auto402B1FF7_ai >= 0 && lv_regionIndex <= auto402B1FF7_ae) || (auto402B1FF7_ai < 0 && lv_regionIndex >= auto402B1FF7_ae) ) ; lv_regionIndex += auto402B1FF7_ai ) {
            if ((lv_regionExplored[lv_regionIndex] == false)) {
                lv_everythingExplored = false;
                break;
            }

        }
        if ((lv_everythingExplored == true)) {
            return true;
        }

        auto532C4E19_ae = lv_maxRegions;
        lv_regionIndex = 1;
        for ( ; ( (auto532C4E19_ai >= 0 && lv_regionIndex <= auto532C4E19_ae) || (auto532C4E19_ai < 0 && lv_regionIndex >= auto532C4E19_ae) ) ; lv_regionIndex += auto532C4E19_ai ) {
            if ((lv_regionExplored[lv_regionIndex] == false) && (VisIsVisibleForPlayer(libStEx_gv_pLAYER_11_ORDER, lv_explorationPoints[lv_regionIndex]) == true)) {
                lv_regionExplored[lv_regionIndex] = true;
                auto661FAD45_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
                lv_playerIndex = -1;
                while (true) {
                    	lv_playerIndex = PlayerGroupNextPlayer(auto661FAD45_g, lv_playerIndex);
                    	if (lv_playerIndex<0) { break; }
                    	VisExploreArea(lv_playerIndex, lv_explorationRegions[lv_regionIndex], true, false);
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_ExplorationRegionsStage2_Init () {
    libPEB1_gt_ExplorationRegionsStage2 = TriggerCreate("libPEB1_gt_ExplorationRegionsStage2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PZE End of Game Messages
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_PZEEndofGameMessages_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto509F083C_val;
    int auto20A9D4B7_val;

    // Actions
    if (!runActions) {
        return true;
    }

    StatEventCreate("Game Results");
    StatEventAddDataString(StatEventLastCreated(), "Map Name", "Escape from Braxis");
    auto509F083C_val = libPVEB_gf_PBGameDifficulty();
    if (auto509F083C_val == libPVEB_ge_PVEGameDifficulty_Hard) {
        StatEventAddDataString(StatEventLastCreated(), "Difficulty", "Hard");
    }
    else {
        StatEventAddDataString(StatEventLastCreated(), "Difficulty", "Normal");
    }
    if ((libPEB1_gv_stage1CompleteTime != 0)) {
        StatEventAddDataInt(StatEventLastCreated(), "Stage 1 Time", libPEB1_gv_stage1CompleteTime);
    }

    if ((libPEB1_gv_stage2CompleteTime != 0)) {
        StatEventAddDataInt(StatEventLastCreated(), "Stage 2 Time", libPEB1_gv_stage2CompleteTime);
    }

    if ((libPEB1_gv_pZECurrentStageCurrent == libPEB1_ge_PZEStages_MapComplete)) {
        StatEventAddDataString(StatEventLastCreated(), "Map Complete", "True");
        StatEventAddDataInt(StatEventLastCreated(), "Victory Time", libPEB1_gv_victoryTime);
        StatEventAddDataInt(StatEventLastCreated(), "Victory Time Loop", libPEB1_gv_victoryTimeLoop);
    }
    else {
        StatEventAddDataString(StatEventLastCreated(), "Map Complete", "False");
        StatEventAddDataInt(StatEventLastCreated(), "Defeat Time", libPEB1_gv_defeatTime);
        auto20A9D4B7_val = libPEB1_gv_pZECurrentStageCurrent;
        if (auto20A9D4B7_val == libPEB1_ge_PZEStages_Stage1PreHoldout) {
            StatEventAddDataString(StatEventLastCreated(), "Farthest Stage", "Stage 1 Pre Holdout");
        }
        else if (auto20A9D4B7_val == libPEB1_ge_PZEStages_Stage1Holdout) {
            StatEventAddDataString(StatEventLastCreated(), "Farthest Stage", "Stage 1 Holdout");
        }
        else if (auto20A9D4B7_val == libPEB1_ge_PZEStages_Stage2PreHoldout) {
            StatEventAddDataString(StatEventLastCreated(), "Farthest Stage", "Stage 2 Pre Holdout");
        }
        else if (auto20A9D4B7_val == libPEB1_ge_PZEStages_Stage2Holdout) {
            StatEventAddDataString(StatEventLastCreated(), "Farthest Stage", "Stage 2 Holdout");
        }
        else if (auto20A9D4B7_val == libPEB1_ge_PZEStages_Stage3BossPhase1) {
            StatEventAddDataString(StatEventLastCreated(), "Farthest Stage", "Stage 3 Boss Phase 1");
        }
        else if (auto20A9D4B7_val == libPEB1_ge_PZEStages_Stage3BossPhase2) {
            StatEventAddDataString(StatEventLastCreated(), "Farthest Stage", "Stage 3 Boss Phase 2");
        }
        else if (auto20A9D4B7_val == libPEB1_ge_PZEStages_Stage3BossPhase3) {
            StatEventAddDataString(StatEventLastCreated(), "Farthest Stage", "Stage 3 Boss Phase 3");
        }
        else if (auto20A9D4B7_val == libPEB1_ge_PZEStages_Stage3BossPhase4) {
            StatEventAddDataString(StatEventLastCreated(), "Farthest Stage", "Stage 3 Boss Phase 4");
        }
        else {
        }
    }
    StatEventSend(StatEventLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_PZEEndofGameMessages_Init () {
    libPEB1_gt_PZEEndofGameMessages = TriggerCreate("libPEB1_gt_PZEEndofGameMessages_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Revived
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_HeroRevived_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libPVEB_gf_PBIsValidHumanPlayer(UnitGetOwner(EventUnit())) == true)) {
        AddUnitOfInterest(libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit, 500.0, 0.0, "EscortAllyHero", libNtve_ge_GoalTeam_Both, 0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_HeroRevived_Init () {
    libPEB1_gt_HeroRevived = TriggerCreate("libPEB1_gt_HeroRevived_Func");
    TriggerAddEventUnitRevive(libPEB1_gt_HeroRevived, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero AI Start 
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_HeroAIStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto21A117D9_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto21A117D9_g = libPVEB_gf_PBPlayersOnHumanTeam();
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto21A117D9_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	if ((libPVEB_gf_PBIsValidHumanPlayer(lv_itPlayer) == true)) {
            AddUnitOfInterest(libGame_gv_players[lv_itPlayer].lv_heroUnit, 500.0, 0.0, "EscortAllyHero", libNtve_ge_GoalTeam_Both, 0);
        }

    }
    TriggerEnable(libPEB1_gt_HeroAIPlayerJoins, true);
    TriggerEnable(libPEB1_gt_HeroAIPlayerLeaves, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_HeroAIStart_Init () {
    libPEB1_gt_HeroAIStart = TriggerCreate("libPEB1_gt_HeroAIStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero AI Player Joins
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_HeroAIPlayerJoins_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPVEB_gf_PBIsValidHumanPlayer(EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AddUnitOfInterest(libGame_gv_players[EventPlayer()].lv_heroUnit, 500.0, 0.0, "EscortAllyHero", libNtve_ge_GoalTeam_Both, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_HeroAIPlayerJoins_Init () {
    libPEB1_gt_HeroAIPlayerJoins = TriggerCreate("libPEB1_gt_HeroAIPlayerJoins_Func");
    TriggerEnable(libPEB1_gt_HeroAIPlayerJoins, false);
    TriggerAddEventPlayerJoin(libPEB1_gt_HeroAIPlayerJoins, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero AI Player Leaves
//--------------------------------------------------------------------------------------------------
bool libPEB1_gt_HeroAIPlayerLeaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libPVEB_gf_PBIsValidHumanPlayer(EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    RemoveUnitOfInterest(libGame_gv_players[EventPlayer()].lv_heroUnit, "EscortAllyHero", libNtve_ge_GoalTeam_Both);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEB1_gt_HeroAIPlayerLeaves_Init () {
    libPEB1_gt_HeroAIPlayerLeaves = TriggerCreate("libPEB1_gt_HeroAIPlayerLeaves_Func");
    TriggerEnable(libPEB1_gt_HeroAIPlayerLeaves, false);
    TriggerAddEventPlayerLeft(libPEB1_gt_HeroAIPlayerLeaves, c_playerAny, c_gameResultUndecided);
}

void libPEB1_InitTriggers () {
    libPEB1_gt_IncludeMMZergEscape_Init();
    libPEB1_gt_PZEInit_Init();
    libPEB1_gt_PZEInitDifficultyHooks_Init();
    libPEB1_gt_PZEHeroCatalogChangesCallback_Init();
    libPEB1_gt_PZECurateHeroListCallback_Init();
    libPEB1_gt_InitHeroTalents_Init();
    libPEB1_gt_DEBUGObserver_Init();
    libPEB1_gt_DEBUGTemp_Init();
    libPEB1_gt_DEBUGMakeaFakeHero_Init();
    libPEB1_gt_DEBUGAddInstantItem_Init();
    libPEB1_gt_DEBUGAddTargetedItem1_Init();
    libPEB1_gt_DEBUGAddTargetedItem2_Init();
    libPEB1_gt_DEBUGStage2_Init();
    libPEB1_gt_DEBUGStage3_Init();
    libPEB1_gt_DEBUGMercs_Init();
    libPEB1_gt_DEBUGHoldoutTimerUI_Init();
    libPEB1_gt_DEBUGBossUI_Init();
    libPEB1_gt_DEBUGSlivanPod_Init();
    libPEB1_gt_DEBUGRetryScreen_Init();
    libPEB1_gt_DEBUGBGSound_Init();
    libPEB1_gt_DEBUGVictory_Init();
    libPEB1_gt_DEBUGTimer_Init();
    libPEB1_gt_DEBUGDisableZergSpawning_Init();
    libPEB1_gt_DEBUGHoldoutPerformanceTest_Init();
    libPEB1_gt_DEBUGBossPerformanceTest_Init();
    libPEB1_gt_EscapefromBraxisStartingSequence_Init();
    libPEB1_gt_Stage1Music_Init();
    libPEB1_gt_InitPlayers_Init();
    libPEB1_gt_InitHeroesPostSpawn_Init();
    libPEB1_gt_PlayerHeroDies_Init();
    libPEB1_gt_SpawnAbathur_Init();
    libPEB1_gt_MonstrosityStacks_Init();
    libPEB1_gt_ToxicNestDamageBehavior_Init();
    libPEB1_gt_PvEMurkyEggTimerExpires_Init();
    libPEB1_gt_PvEMurkyEggDies_Init();
    libPEB1_gt_PvEMurkyCreateEggOnSpawn_Init();
    libPEB1_gt_SpawnZagara_Init();
    libPEB1_gt_ZagaraAI_Init();
    libPEB1_gt_ZagaraHunterKillerTransfusion_Init();
    libPEB1_gt_AbathurTalents_Init();
    libPEB1_gt_ZagaraTalents_Init();
    libPEB1_gt_InitZergHeroes_Init();
    libPEB1_gt_PZEZergBossSpawn_Init();
    libPEB1_gt_ZergHeroDies_Init();
    libPEB1_gt_Stage1ButcherliskWarningSoundCue_Init();
    libPEB1_gt_FirstZergHeroStage1_Init();
    libPEB1_gt_FirstZergHeroStage2_Init();
    libPEB1_gt_Stage2ZagaraWarningSoundCue_Init();
    libPEB1_gt_InitSpawnPoints_Init();
    libPEB1_gt_InitialZergStage1_Init();
    libPEB1_gt_InitialZergStage2_Init();
    libPEB1_gt_ZergCampsStage2_Init();
    libPEB1_gt_ZergCampsStage3_Init();
    libPEB1_gt_ZergWavesStage1_Init();
    libPEB1_gt_ZergWavesStage2_Init();
    libPEB1_gt_FirstWave_Init();
    libPEB1_gt_MarineEvent2_Init();
    libPEB1_gt_NydusWorm21_Init();
    libPEB1_gt_NydusWorm224_Init();
    libPEB1_gt_NydusWorm25_Init();
    libPEB1_gt_NydusWorm26_Init();
    libPEB1_gt_NydusWorm27_Init();
    libPEB1_gt_NydusWorm214_Init();
    libPEB1_gt_HoldoutStage2NydusWorms_Init();
    libPEB1_gt_HoldoutStage2DropPodVolley_Init();
    libPEB1_gt_CocoonHatched_Init();
    libPEB1_gt_PEB1Phase1Finished_Init();
    libPEB1_gt_PEB1Phase2Finished_Init();
    libPEB1_gt_PEB1StartPhase3_Init();
    libPEB1_gt_PEB1Phase3Finished_Init();
    libPEB1_gt_PEB1Phase4Buffs_Init();
    libPEB1_gt_PEB1Phase2DetermineBosses_Init();
    libPEB1_gt_PEB1Phase2SpawnWorms_Init();
    libPEB1_gt_PEB1Phase2SpawnZerg_Init();
    libPEB1_gt_PEB1Phase2NydusWormTimedLifeExpires_Init();
    libPEB1_gt_PEB1Phase2BossKillTimerExpires_Init();
    libPEB1_gt_PEB1Phase2UnitDied_Init();
    libPEB1_gt_PEB1BossImpaleUsed_Init();
    libPEB1_gt_PEB1BossDropPodUsed_Init();
    libPEB1_gt_PEB1SpawnPodsUsed_Init();
    libPEB1_gt_InitSlivanBalanceNumbers_Init();
    libPEB1_gt_PreSlivanFightDataUpdates_Init();
    libPEB1_gt_SlivanPhase4BuffsBaseline_Init();
    libPEB1_gt_SpawnSlivan_Init();
    libPEB1_gt_SlivanDies_Init();
    libPEB1_gt_SlivanPoisonOverlay_Init();
    libPEB1_gt_HoldoutStage1_Init();
    libPEB1_gt_CleanupStage1_Init();
    libPEB1_gt_TransitiontoStage2_Init();
    libPEB1_gt_OpenCheckpointExitStage2_Init();
    libPEB1_gt_HoldoutStage2_Init();
    libPEB1_gt_CuratePreparedHeroesforHoldout2_Init();
    libPEB1_gt_CleanupStage2_Init();
    libPEB1_gt_TransitiontoStage3_Init();
    libPEB1_gt_CleanupStage3_Init();
    libPEB1_gt_OpenCheckpointExitStage3_Init();
    libPEB1_gt_Holdout2Music_Init();
    libPEB1_gt_XPGainFromStage1_Init();
    libPEB1_gt_XPGainFromStage2_Init();
    libPEB1_gt_XPGainFromStage3_Init();
    libPEB1_gt_InitPickups_Init();
    libPEB1_gt_InitAdjustCaptureMacGuffin_Init();
    libPEB1_gt_SpawnRegenerationGlobe_Init();
    libPEB1_gt_SpawnItem_Init();
    libPEB1_gt_EFBPlayVOSoundforPlayer_Init();
    libPEB1_gt_ReinforcementsUsed_Init();
    libPEB1_gt_ItemUsed_Init();
    libPEB1_gt_ResetStage3_Init();
    libPEB1_gt_VictorySequence_Init();
    libPEB1_gt_VictoryCinematicQ_Init();
    libPEB1_gt_VictoryCinematicAction_Init();
    libPEB1_gt_Defeat_Init();
    libPEB1_gt_GameOverScoreTransmission_Init();
    libPEB1_gt_ObjectiveFirstCheckpointDisplayNotification_Init();
    libPEB1_gt_ObjectiveFirstCheckpointComplete_Init();
    libPEB1_gt_ObjectiveSecondCheckpointDisplayNotification_Init();
    libPEB1_gt_ObjectiveSecondCheckpointComplete_Init();
    libPEB1_gt_ObjectiveShelterDisplayNotification_Init();
    libPEB1_gt_ObjectiveShelterComplete_Init();
    libPEB1_gt_IntroTransmissionQ_Init();
    libPEB1_gt_ZergArrivingCountdownQ_Init();
    libPEB1_gt_BattleBeginsQ_Init();
    libPEB1_gt_EnemyHeroDetectedQ_Init();
    libPEB1_gt_CheckpointAdmissionProtocolStage1Q_Init();
    libPEB1_gt_CheckpointOpenin10Stage1Q_Init();
    libPEB1_gt_CheckpointOpenStage1Q_Init();
    libPEB1_gt_EnemyHeroesNearbyQ_Init();
    libPEB1_gt_CheckpointAdmissionProtocolStage2Q_Init();
    libPEB1_gt_CheckpointOpenin10Stage2Q_Init();
    libPEB1_gt_CheckpointOpenStage2Q_Init();
    libPEB1_gt_DangerousCreatureAheadQ_Init();
    libPEB1_gt_SlivanDiesQ_Init();
    libPEB1_gt_PlayerRevivedQ_Init();
    libPEB1_gt_PZEInitUI_Init();
    libPEB1_gt_ScoreScreenDisplay_Init();
    libPEB1_gt_ScoreScreenHide_Init();
    libPEB1_gt_ScoreScreenLeave_Init();
    libPEB1_gt_TabScreenInit_Init();
    libPEB1_gt_MissionTimerBarInit_Init();
    libPEB1_gt_MissionTimerBarUpdate_Init();
    libPEB1_gt_PZEGameOverScreenCallback_Init();
    libPEB1_gt_ExplorationRegionsStage1_Init();
    libPEB1_gt_ExplorationRegionsStage2_Init();
    libPEB1_gt_PZEEndofGameMessages_Init();
    libPEB1_gt_HeroRevived_Init();
    libPEB1_gt_HeroAIStart_Init();
    libPEB1_gt_HeroAIPlayerJoins_Init();
    libPEB1_gt_HeroAIPlayerLeaves_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libPEB1_InitLib_completed = false;

void libPEB1_InitLib () {
    if (libPEB1_InitLib_completed) {
        return;
    }

    libPEB1_InitLib_completed = true;

    libPEB1_InitLibraries();
    libPEB1_InitVariables();
    libPEB1_InitTriggers();
}

