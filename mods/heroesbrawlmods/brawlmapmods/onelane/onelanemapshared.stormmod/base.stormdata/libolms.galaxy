include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"

include "LibOLMS_h"

//--------------------------------------------------------------------------------------------------
// Library: One Lane Map Shared
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libOLMS_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
}

// Variable Initialization
bool libOLMS_InitVariables_completed = false;

void libOLMS_InitVariables () {
    if (libOLMS_InitVariables_completed) {
        return;
    }

    libOLMS_InitVariables_completed = true;

    libOLMS_gv_mMOneLaneTrickleModifier = 0.35;
    libOLMS_gv_mMOneLaneRegenGlobeGens = UnitGroupEmpty();
}

// Functions
trigger auto_libOLMS_gf_MMOneLaneDisplayRegenGlobeGeneratorTimer_Trigger = null;
unit auto_libOLMS_gf_MMOneLaneDisplayRegenGlobeGeneratorTimer_lp_unit;

void libOLMS_gf_MMOneLaneDisplayRegenGlobeGeneratorTimer (unit lp_unit) {
    auto_libOLMS_gf_MMOneLaneDisplayRegenGlobeGeneratorTimer_lp_unit = lp_unit;

    if (auto_libOLMS_gf_MMOneLaneDisplayRegenGlobeGeneratorTimer_Trigger == null) {
        auto_libOLMS_gf_MMOneLaneDisplayRegenGlobeGeneratorTimer_Trigger = TriggerCreate("auto_libOLMS_gf_MMOneLaneDisplayRegenGlobeGeneratorTimer_TriggerFunc");
    }

    TriggerExecute(auto_libOLMS_gf_MMOneLaneDisplayRegenGlobeGeneratorTimer_Trigger, false, false);
}

bool auto_libOLMS_gf_MMOneLaneDisplayRegenGlobeGeneratorTimer_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libOLMS_gf_MMOneLaneDisplayRegenGlobeGeneratorTimer_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_OLMS_6E84E410", "A", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(UnitBehaviorDuration(lp_unit, "GenerateRegenGlobe"))));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_OLMS_6E84E410"), 24, UnitGetPosition(lp_unit), 2.0, true, false, PlayerGroupAll());
    while ((UnitHasBehavior2(lp_unit, "GenerateRegenGlobe") == true)) {
        TextExpressionSetToken("Param/Expression/lib_OLMS_EA11C855", "A", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(UnitBehaviorDuration(lp_unit, "GenerateRegenGlobe"))));
        TextTagSetText(TextTagLastCreated(), TextExpressionAssemble("Param/Expression/lib_OLMS_EA11C855"));
        Wait(1.0, c_timeGame);
    }
    TextTagDestroy(TextTagLastCreated());
    return true;
}

void libOLMS_gf_MMOneLaneRegenGlobeCoolupTime () {
    // Automatic Variable Declarations
    unitgroup auto37472270_g;
    int auto37472270_u;
    unit auto37472270_var;

    // Implementation
    auto37472270_g = libOLMS_gv_mMOneLaneRegenGlobeGens;
    auto37472270_u = UnitGroupCount(auto37472270_g, c_unitCountAll);
    for (;; auto37472270_u -= 1) {
        auto37472270_var = UnitGroupUnitFromEnd(auto37472270_g, auto37472270_u);
        if (auto37472270_var == null) { break; }
        UnitBehaviorSetDuration(auto37472270_var, "GenerateRegenGlobe", libOLMS_gv_mMHO_RegenGlobeCoolupTime_C);
        libNtve_gf_SendActorMessageToUnit(auto37472270_var, "Signal RegenGlobeDurationRefreshed");
        libOLMS_gf_MMOneLaneDisplayRegenGlobeGeneratorTimer(auto37472270_var);
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Hero Spawn
//--------------------------------------------------------------------------------------------------
bool libOLMS_gt_HeroSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF4E86E66_g;
    int autoF4E86E66_u;
    unit autoF4E86E66_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF4E86E66_g = libGame_gv_players[libGame_gf_HeroSpawnPlayer()].lv_heroUnitGroup;
    autoF4E86E66_u = UnitGroupCount(autoF4E86E66_g, c_unitCountAll);
    for (;; autoF4E86E66_u -= 1) {
        autoF4E86E66_var = UnitGroupUnitFromEnd(autoF4E86E66_g, autoF4E86E66_u);
        if (autoF4E86E66_var == null) { break; }
        UnitAbilityShow(autoF4E86E66_var, "Hearthstone", false);
        UnitBehaviorAdd(autoF4E86E66_var, "HearthstonePermanentDisableAbilityBuff", autoF4E86E66_var, 1);
        UnitBehaviorAdd(autoF4E86E66_var, "OneLaneMapBlockAltarHealing", autoF4E86E66_var, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libOLMS_gt_HeroSpawn_Init () {
    libOLMS_gt_HeroSpawn = TriggerCreate("libOLMS_gt_HeroSpawn_Func");
    libGame_gf_HeroSpawn(libOLMS_gt_HeroSpawn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MMOneLane Gate Timer Starts
//--------------------------------------------------------------------------------------------------
bool libOLMS_gt_MMOneLaneGateTimerStarts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto324920CE_g;
    int auto324920CE_u;
    unit auto324920CE_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto324920CE_g = libOLMS_gv_mMOneLaneRegenGlobeGens;
    auto324920CE_u = UnitGroupCount(auto324920CE_g, c_unitCountAll);
    for (;; auto324920CE_u -= 1) {
        auto324920CE_var = UnitGroupUnitFromEnd(auto324920CE_g, auto324920CE_u);
        if (auto324920CE_var == null) { break; }
        UnitBehaviorSetDuration(auto324920CE_var, "GenerateRegenGlobe", libOLMS_gv_mMHO_RegenGlobeCoolupTime_C);
        libNtve_gf_SendActorMessageToUnit(auto324920CE_var, "Signal RegenGlobeDurationRefreshed");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libOLMS_gt_MMOneLaneGateTimerStarts_Init () {
    libOLMS_gt_MMOneLaneGateTimerStarts = TriggerCreate("libOLMS_gt_MMOneLaneGateTimerStarts_Func");
    libGame_gf_GameOpenTimerStarted(libOLMS_gt_MMOneLaneGateTimerStarts);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Include Mod Init
//--------------------------------------------------------------------------------------------------
bool libOLMS_gt_IncludeModInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto036426EB_ae = libCore_gv_bALMaxTeams;
    const int auto036426EB_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_sYSIsBrawlGame = true;
    libCore_gv_data_XP_HeroValuePerLevel_C = 75.0;
    libGame_gf_SetXPTrickleModifier((libOLMS_gv_mMOneLaneTrickleModifier + 1.0));
    libOLMS_gv_mMOneLaneRegenGlobeGens = UnitGroup("RegenGlobeGenerator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), libOLMS_gv_mMOneLaneMaxGenerators);
    lv_itTeam = 1;
    for ( ; ( (auto036426EB_ai >= 0 && lv_itTeam <= auto036426EB_ae) || (auto036426EB_ai < 0 && lv_itTeam >= auto036426EB_ae) ) ; lv_itTeam += auto036426EB_ai ) {
        UnitBehaviorRemove(libGame_gv_teams[lv_itTeam].lv_core, "CoreShieldsLevel1", 1);
        UnitBehaviorRemove(libGame_gv_teams[lv_itTeam].lv_core, "CoreShieldsLevel2", 1);
        UnitBehaviorRemove(libGame_gv_teams[lv_itTeam].lv_core, "CoreShieldsLevel3", 1);
    }
    libCore_gv_bALDeathTimes[1] = 5.0;
    libCore_gv_bALDeathTimes[2] = 5.5;
    libCore_gv_bALDeathTimes[3] = 6.0;
    libCore_gv_bALDeathTimes[4] = 7.0;
    libCore_gv_bALDeathTimes[5] = 8.0;
    libCore_gv_bALDeathTimes[6] = 9.0;
    libCore_gv_bALDeathTimes[7] = 10.5;
    libCore_gv_bALDeathTimes[8] = 12.0;
    libCore_gv_bALDeathTimes[9] = 13.5;
    libCore_gv_bALDeathTimes[10] = 15.5;
    libCore_gv_bALDeathTimes[11] = 17.5;
    libCore_gv_bALDeathTimes[12] = 19.5;
    libCore_gv_bALDeathTimes[13] = 22.0;
    libCore_gv_bALDeathTimes[14] = 24.5;
    libCore_gv_bALDeathTimes[15] = 27.0;
    libCore_gv_bALDeathTimes[16] = 30.0;
    libCore_gv_bALDeathTimes[17] = 33.0;
    libCore_gv_bALDeathTimes[18] = 36.0;
    libCore_gv_bALDeathTimes[19] = 39.0;
    libCore_gv_bALDeathTimes[20] = 42.0;
    libCore_gv_bALDeathTimes[21] = 42.0;
    libCore_gv_bALDeathTimes[22] = 42.0;
    libCore_gv_bALDeathTimes[23] = 42.0;
    libCore_gv_bALDeathTimes[24] = 42.0;
    libCore_gv_bALDeathTimes[25] = 42.0;
    libCore_gv_bALDeathTimes[26] = 42.0;
    libCore_gv_bALDeathTimes[27] = 42.0;
    libCore_gv_bALDeathTimes[28] = 42.0;
    libCore_gv_bALDeathTimes[29] = 42.0;
    libCore_gv_bALDeathTimes[30] = 42.0;
    SetTalentEnabled("RagnarosLavaWave", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libOLMS_gt_IncludeModInit_Init () {
    libOLMS_gt_IncludeModInit = TriggerCreate("libOLMS_gt_IncludeModInit_Func");
    libCore_gf_IncludeModInitialization(libOLMS_gt_IncludeModInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MMOneLane Gates Open
//--------------------------------------------------------------------------------------------------
bool libOLMS_gt_MMOneLaneGatesOpen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libOLMS_gf_MMOneLaneRegenGlobeCoolupTime();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libOLMS_gt_MMOneLaneGatesOpen_Init () {
    libOLMS_gt_MMOneLaneGatesOpen = TriggerCreate("libOLMS_gt_MMOneLaneGatesOpen_Func");
    TriggerAddEventTimer(libOLMS_gt_MMOneLaneGatesOpen, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: One Lane Scaling Increments
//--------------------------------------------------------------------------------------------------
bool libOLMS_gt_OneLaneScalingIncrements_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libOLMS_gv_mMOneLaneTrickleModifier += 0.05;
    libGame_gf_SetXPTrickleModifier((libOLMS_gv_mMOneLaneTrickleModifier + 1.0));
    if ((libCore_gv_bALMinionWaveInterval > 15.0)) {
        libCore_gv_bALMinionWaveInterval -= 0.5;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libOLMS_gt_OneLaneScalingIncrements_Init () {
    libOLMS_gt_OneLaneScalingIncrements = TriggerCreate("libOLMS_gt_OneLaneScalingIncrements_Func");
    libGame_gf_ScalingIncremented(libOLMS_gt_OneLaneScalingIncrements);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MMOneLane Regen Globe Start Timer
//--------------------------------------------------------------------------------------------------
bool libOLMS_gt_MMOneLaneRegenGlobeStartTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libOLMS_gv_mMOneLaneRegenGlobeGens, EventUnit()) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libOLMS_gf_MMOneLaneDisplayRegenGlobeGeneratorTimer(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libOLMS_gt_MMOneLaneRegenGlobeStartTimer_Init () {
    libOLMS_gt_MMOneLaneRegenGlobeStartTimer = TriggerCreate("libOLMS_gt_MMOneLaneRegenGlobeStartTimer_Func");
    TriggerAddEventUnitBehaviorChange(libOLMS_gt_MMOneLaneRegenGlobeStartTimer, null, "GenerateRegenGlobe", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddRegenGlobeGoals
//--------------------------------------------------------------------------------------------------
bool libOLMS_gt_AddRegenGlobeGoals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIAddCollectable(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CollectHealthPack", 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libOLMS_gt_AddRegenGlobeGoals_Init () {
    libOLMS_gt_AddRegenGlobeGoals = TriggerCreate("libOLMS_gt_AddRegenGlobeGoals_Func");
    TriggerAddEventPlayerEffectUsed(libOLMS_gt_AddRegenGlobeGoals, c_playerAny, "GenerateRegenGlobeCreateSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Town Hall Killed
//--------------------------------------------------------------------------------------------------
bool libOLMS_gt_TownHallKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dyingStructureUnit;
    int lv_structureType;
    int lv_townIndex;
    int lv_structureIndex;
    unit lv_structure;

    // Automatic Variable Declarations
    int auto52DF278A_ae;
    const int auto52DF278A_ai = 1;

    // Variable Initialization
    lv_dyingStructureUnit = EventUnit();
    lv_structureType = libGame_gf_TownGetTownStructurePresetFromUnit(lv_dyingStructureUnit);

    // Conditions
    if (testConds) {
        if (!((lv_structureType == libGame_ge_TownStructureTypes_TownHall))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_townIndex = libGame_gf_TownGetTownForUnit(lv_dyingStructureUnit);
    auto52DF278A_ae = libGame_gv_townTownData[lv_townIndex].lv_structureCount;
    lv_structureIndex = 1;
    for ( ; ( (auto52DF278A_ai >= 0 && lv_structureIndex <= auto52DF278A_ae) || (auto52DF278A_ai < 0 && lv_structureIndex >= auto52DF278A_ae) ) ; lv_structureIndex += auto52DF278A_ai ) {
        lv_structure = libGame_gv_townTownData[lv_townIndex].lv_structureUnits[lv_structureIndex];
        if ((UnitIsAlive(lv_structure) == true) && (libGame_gf_TownGetTownStructurePresetFromUnit(lv_structure) == libGame_ge_TownStructureTypes_Moonwell)) {
            UnitKill(lv_structure);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libOLMS_gt_TownHallKilled_Init () {
    libOLMS_gt_TownHallKilled = TriggerCreate("libOLMS_gt_TownHallKilled_Func");
    TriggerAddEventUnitDied(libOLMS_gt_TownHallKilled, null);
}

void libOLMS_InitTriggers () {
    libOLMS_gt_HeroSpawn_Init();
    libOLMS_gt_MMOneLaneGateTimerStarts_Init();
    libOLMS_gt_IncludeModInit_Init();
    libOLMS_gt_MMOneLaneGatesOpen_Init();
    libOLMS_gt_OneLaneScalingIncrements_Init();
    libOLMS_gt_MMOneLaneRegenGlobeStartTimer_Init();
    libOLMS_gt_AddRegenGlobeGoals_Init();
    libOLMS_gt_TownHallKilled_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libOLMS_InitLib_completed = false;

void libOLMS_InitLib () {
    if (libOLMS_InitLib_completed) {
        return;
    }

    libOLMS_InitLib_completed = true;

    libOLMS_InitLibraries();
    libOLMS_InitVariables();
    libOLMS_InitTriggers();
}

