include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/UILib"
include "TriggerLibs/SoundLib"

include "LibIGHS_h"

//--------------------------------------------------------------------------------------------------
// Library: In Game Hero Selection
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libIGHS_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libUIUI_InitVariables();
    libSond_InitVariables();
}

// Variable Initialization
bool libIGHS_InitVariables_completed = false;

void libIGHS_InitVariables () {
    int init_i1;
    int init_j1;

    if (libIGHS_InitVariables_completed) {
        return;
    }

    libIGHS_InitVariables_completed = true;

    libIGHS_gv_shuffleSettings.lv_shufflePickMode = libIGHS_ge_ShufflePickMode_NotInitialized;
    libIGHS_gv_shuffleSettings.lv_totalTimeAllowedToPickHeroes = 30;
    libIGHS_gv_shuffleSettings.lv_heroPickTimer = TimerCreate();
    libIGHS_gv_shuffleSettings.lv_crazyModeChance = 0.0;
    libIGHS_gv_shuffleSettings.lv_showHeroPickSuggestions = true;
    libIGHS_gv_shuffleSettings.lv_showHeroClassIcons = true;
    libIGHS_gv_shuffleUI.lv_dialog = c_invalidDialogId;
    libIGHS_gv_shuffleUI.lv_mainPanel = c_invalidDialogControlId;
    libIGHS_gv_shuffleUI.lv_countdownLabel = c_invalidDialogControlId;
    libIGHS_gv_shuffleUI.lv_finalCountdownFrame = c_invalidDialogControlId;
    libIGHS_gv_shuffleUI.lv_titleLabel = c_invalidDialogControlId;
    libIGHS_gv_shuffleUI.lv_arenaModeTitlePanel = c_invalidDialogControlId;
    libIGHS_gv_shuffleUI.lv_nonArenaModeTitlePanel = c_invalidDialogControlId;
    libIGHS_gv_shuffleUI.lv_extraInfoLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libIGHS_gv_shuffleUI.lv_teamRoundIndicatorFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 3; init_j1 += 1) {
            libIGHS_gv_shuffleUI.lv_roundWinIndicatorImageBackgrounds[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 3; init_j1 += 1) {
            libIGHS_gv_shuffleUI.lv_roundWinIndicatorImages[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libIGHS_gv_shuffleUI.lv_pickHeroPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libIGHS_gv_shuffleUI.lv_playerHeroPanelPerPlayer[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libIGHS_gv_shuffleUI.lv_playerIdLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libIGHS_gv_shuffleUI.lv_playerClassLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libIGHS_gv_shuffleUI.lv_playerReadyButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libIGHS_gv_shuffleUI.lv_playerReadyLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libIGHS_gv_shuffleUI.lv_voiceChatFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libIGHS_gv_shuffleUI.lv_heroContainerFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libIGHS_gv_shuffleUI.lv_heroCutsceneFrame[init_i1] = c_invalidDialogControlId;
    }
    libIGHS_gv_shuffleUI.lv_abilitiesInfoButton = c_invalidDialogControlId;
    libIGHS_gv_shuffleUI.lv_talentsInfoButton = c_invalidDialogControlId;
    libIGHS_gv_shuffleUI.lv_debugCrazyBtn = c_invalidDialogControlId;
    libIGHS_gv_shuffleUI.lv_debugRerollBtn = c_invalidDialogControlId;
}

// Presets
// Functions
void libIGHS_gf_InitializeShufflePickRoleLocked (text lp_shuffleScreenTitle, bool lp_randomizeMountsAndSkins, bool lp_showHeroClassIcons, int lp_timeAllowedToPick, fixed lp_crazyModeChance) {
    // Automatic Variable Declarations
    // Implementation
    libIGHS_gf_ShufflePickDebugMessage(StringExternal("Param/Value/lib_IGHS_75241E3A"));
    libIGHS_gv_shuffleSettings.lv_shufflePickMode = libIGHS_ge_ShufflePickMode_RoleLocked;
    libIGHS_gv_shuffleSettings.lv_totalTimeAllowedToPickHeroes = lp_timeAllowedToPick;
    libIGHS_gv_shuffleSettings.lv_randomizeSkinsAndMounts = lp_randomizeMountsAndSkins;
    libIGHS_gv_shuffleSettings.lv_showHeroClassIcons = lp_showHeroClassIcons;
    libIGHS_gv_shuffleSettings.lv_crazyModeChance = lp_crazyModeChance;
    libIGHS_gv_shuffleSettings.lv_showHeroPickSuggestions = false;
    libIGHS_gv_shuffleSettings.lv_titleText = lp_shuffleScreenTitle;
}

void libIGHS_gf_InitializeShufflePickUnlocked (text lp_shuffleScreenTitle, bool lp_randomizeMountsAndSkins, bool lp_showHeroClassIcons, int lp_timeAllowedToPick, fixed lp_crazyModeChance, bool lp_usePickSuggestions) {
    // Automatic Variable Declarations
    // Implementation
    libIGHS_gf_ShufflePickDebugMessage(StringExternal("Param/Value/lib_IGHS_59D1012A"));
    libIGHS_gv_shuffleSettings.lv_shufflePickMode = libIGHS_ge_ShufflePickMode_Unlocked;
    libIGHS_gv_shuffleSettings.lv_totalTimeAllowedToPickHeroes = lp_timeAllowedToPick;
    libIGHS_gv_shuffleSettings.lv_randomizeSkinsAndMounts = lp_randomizeMountsAndSkins;
    libIGHS_gv_shuffleSettings.lv_showHeroClassIcons = lp_showHeroClassIcons;
    libIGHS_gv_shuffleSettings.lv_crazyModeChance = lp_crazyModeChance;
    libIGHS_gv_shuffleSettings.lv_showHeroPickSuggestions = lp_usePickSuggestions;
    libIGHS_gv_shuffleSettings.lv_titleText = lp_shuffleScreenTitle;
}

void libIGHS_gf_InitializeShufflePickAllSameHero (text lp_shuffleScreenTitle, bool lp_randomizeMountsAndSkins, bool lp_showHeroClassIcons, int lp_timeAllowedToPick, string lp_everyonesHero) {
    // Automatic Variable Declarations
    // Implementation
    libIGHS_gf_ShufflePickDebugMessage(StringExternal("Param/Value/lib_IGHS_B5A20A48"));
    libIGHS_gv_shuffleSettings.lv_shufflePickMode = libIGHS_ge_ShufflePickMode_AllSameHero;
    libIGHS_gv_shuffleSettings.lv_totalTimeAllowedToPickHeroes = lp_timeAllowedToPick;
    libIGHS_gv_shuffleSettings.lv_randomizeSkinsAndMounts = lp_randomizeMountsAndSkins;
    libIGHS_gv_shuffleSettings.lv_showHeroClassIcons = lp_showHeroClassIcons;
    libIGHS_gv_shuffleSettings.lv_crazyModeChance = 0.0;
    libIGHS_gv_shuffleSettings.lv_showHeroPickSuggestions = false;
    libIGHS_gv_shuffleSettings.lv_titleText = lp_shuffleScreenTitle;
    libIGHS_gv_shuffleSettings.lv_everyonesHero = lp_everyonesHero;
}

void libIGHS_gf_InitializeShufflePickCuratedHeroList (text lp_shuffleScreenTitle, bool lp_randomizeMountsAndSkins, bool lp_showHeroClassIcons, int lp_timeAllowedToPick, trigger lp_curatedListInitializationTrigger, bool lp_usePickSuggestions) {
    // Automatic Variable Declarations
    // Implementation
    libIGHS_gf_ShufflePickDebugMessage(StringExternal("Param/Value/lib_IGHS_6D80D04F"));
    libIGHS_gv_shuffleSettings.lv_shufflePickMode = libIGHS_ge_ShufflePickMode_CuratedList;
    libIGHS_gv_shuffleSettings.lv_totalTimeAllowedToPickHeroes = lp_timeAllowedToPick;
    libIGHS_gv_shuffleSettings.lv_randomizeSkinsAndMounts = lp_randomizeMountsAndSkins;
    libIGHS_gv_shuffleSettings.lv_showHeroClassIcons = lp_showHeroClassIcons;
    libIGHS_gv_shuffleSettings.lv_crazyModeChance = 0.0;
    libIGHS_gv_shuffleSettings.lv_showHeroPickSuggestions = lp_usePickSuggestions;
    libIGHS_gv_shuffleSettings.lv_titleText = lp_shuffleScreenTitle;
    TriggerExecute(lp_curatedListInitializationTrigger, true, true);
}

void libIGHS_gf_ReshuffleHeroPicksAndShowShuffleUI () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoB2088FBE_val;

    // Variable Initialization

    // Implementation
    libIGHS_gf_ShufflePickDebugMessage(StringExternal("Param/Value/lib_IGHS_722F2E2F"));
    libIGHS_gf_ResetAllHeroPicks();
    libIGHS_gv_shuffleSettings.lv_shufflePickInProgress = true;
    autoB2088FBE_val = libIGHS_gv_shuffleSettings.lv_shufflePickMode;
    if (autoB2088FBE_val == libIGHS_ge_ShufflePickMode_RoleLocked) {
        libIGHS_gf_PrepareHeroPicksRoleLocked();
    }
    else if (autoB2088FBE_val == libIGHS_ge_ShufflePickMode_Unlocked) {
        libIGHS_gf_PrepareHeroPicksUnlocked();
    }
    else if (autoB2088FBE_val == libIGHS_ge_ShufflePickMode_AllSameHero) {
        libIGHS_gf_PrepareHeroPicksAllSameHero();
    }
    else if (autoB2088FBE_val == libIGHS_ge_ShufflePickMode_CuratedList) {
        libIGHS_gf_PrepareHeroPicksCuratedHeroList();
    }
    else {
    }
    libIGHS_gf_ShowPickOptionsforAllPlayers();
    libIGHS_gf_ShowShufflePickUI();
    while (!((libIGHS_gv_shuffleSettings.lv_shufflePickInProgress == false))) {
        Wait(0.125, c_timeGame);
    }
}

void libIGHS_gf_SetShuffleScreenTitleText (text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    libIGHS_gv_shuffleSettings.lv_titleText = lp_text;
    libNtve_gf_SetDialogItemText(libIGHS_gv_shuffleUI.lv_titleLabel, lp_text, PlayerGroupAll());
}

void libIGHS_gf_SetShuffleScreenExtraInfoTextForPlayer (int lp_playerID, text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libIGHS_gv_shuffleUI.lv_extraInfoLabel, lp_text, PlayerGroupSingle(lp_playerID));
}

void libIGHS_gf_SetShuffleUIVictoryCounters (int lp_winningTeam, int lp_victoryCount) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_roundWinIndicatorImages[lp_winningTeam][lp_victoryCount], PlayerGroupAll(), true);
}

void libIGHS_gf_ClearEveryonesHero () {
    // Automatic Variable Declarations
    // Implementation
    libIGHS_gv_shuffleSettings.lv_everyonesHero = null;
}

bool libIGHS_gf_HeroAlreadyBeenPickedForCrazyMode (string lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_hero == libIGHS_gv_shuffleSettings.lv_crazyModeHeroesPicked[1]) || (lp_hero == libIGHS_gv_shuffleSettings.lv_crazyModeHeroesPicked[2]) || (lp_hero == libIGHS_gv_shuffleSettings.lv_crazyModeHeroesPicked[3]) || (lp_hero == libIGHS_gv_shuffleSettings.lv_crazyModeHeroesPicked[4]) || (lp_hero == libIGHS_gv_shuffleSettings.lv_crazyModeHeroesPicked[5]))) {
        return true;
    }
    else {
        return false;
    }
}

void libIGHS_gf_ResetAllHeroPicks () {
    // Variable Declarations
    int lv_player;
    int lv_pick;

    // Automatic Variable Declarations
    const int auto931F560C_ae = libCore_gv_bALMaxPlayers;
    const int auto931F560C_ai = 1;
    const int auto3CB84B7F_ae = libIGHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
    const int auto3CB84B7F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (auto931F560C_ai >= 0 && lv_player <= auto931F560C_ae) || (auto931F560C_ai < 0 && lv_player >= auto931F560C_ae) ) ; lv_player += auto931F560C_ai ) {
        libIGHS_gf_LockUnlockHeroChoice(false, lv_player);
        libIGHS_gf_SelectPickOptionforPlayer(lv_player, 0);
        lv_pick = 1;
        for ( ; ( (auto3CB84B7F_ai >= 0 && lv_pick <= auto3CB84B7F_ae) || (auto3CB84B7F_ai < 0 && lv_pick >= auto3CB84B7F_ae) ) ; lv_pick += auto3CB84B7F_ai ) {
            libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[lv_pick] = null;
        }
    }
}

void libIGHS_gf_PrepareHeroPicksRoleLocked () {
    // Variable Declarations
    const int lv_maxWarriorsPerTeam_C = 2;
    const int lv_maxSupportsPerTeam_C = 2;
    const fixed lv_chanceOfAssassinInsteadOfSpecialist_C = 60.0;
    int lv_warriorsPerTeam;
    int lv_supportsPerTeam;
    shuffler lv_rosterSlotShuffler;
    int lv_playersAssigned;
    int[libCore_gv_bALMaxPlayersOnATeam + 1] lv_playerClassesByRosterSlot;
    int lv_i;
    int lv_rosterSlot;
    int lv_rosterOffset;
    int lv_pick;
    int lv_player;
    string lv_heroCandidate;

    // Automatic Variable Declarations
    const int autoA8269F7C_ae = 1;
    const int autoA8269F7C_ai = -1;
    const int auto72819729_ae = 1;
    const int auto72819729_ai = -1;
    const int auto34B7656D_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto34B7656D_ai = 1;
    const int autoCA06D6BC_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int autoCA06D6BC_ai = libCore_gv_bALMaxPlayersOnATeam;
    const int auto2272DB71_ae = libIGHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
    const int auto2272DB71_ai = 1;

    // Variable Initialization
    lv_warriorsPerTeam = RandomInt(0, lv_maxWarriorsPerTeam_C);
    lv_supportsPerTeam = RandomInt(0, lv_maxSupportsPerTeam_C);
    lv_rosterSlotShuffler = ShufflerCreate(libCore_gv_bALMaxPlayersOnATeam);

    // Implementation
    libIGHS_gf_ShufflePickDebugMessage(StringExternal("Param/Value/lib_IGHS_11DE1E09"));
    libIGHS_gf_ResetAllHeroPicks();
    lv_i = lv_warriorsPerTeam;
    for ( ; ( (autoA8269F7C_ai >= 0 && lv_i <= autoA8269F7C_ae) || (autoA8269F7C_ai < 0 && lv_i >= autoA8269F7C_ae) ) ; lv_i += autoA8269F7C_ai ) {
        lv_rosterSlot = (ShufflerAdvance(lv_rosterSlotShuffler) + 1);
        lv_playerClassesByRosterSlot[lv_rosterSlot] = c_heroRoleWarrior;
        lv_playersAssigned += 1;
    }
    lv_i = lv_supportsPerTeam;
    for ( ; ( (auto72819729_ai >= 0 && lv_i <= auto72819729_ae) || (auto72819729_ai < 0 && lv_i >= auto72819729_ae) ) ; lv_i += auto72819729_ai ) {
        lv_rosterSlot = (ShufflerAdvance(lv_rosterSlotShuffler) + 1);
        lv_playerClassesByRosterSlot[lv_rosterSlot] = c_heroRoleSupport;
        lv_playersAssigned += 1;
    }
    while ((lv_playersAssigned < libCore_gv_bALMaxPlayersOnATeam)) {
        lv_rosterSlot = (ShufflerAdvance(lv_rosterSlotShuffler) + 1);
        if ((libNtve_gf_RandomPercent() <= lv_chanceOfAssassinInsteadOfSpecialist_C)) {
            lv_playerClassesByRosterSlot[lv_rosterSlot] = c_heroRoleDamage;
        }
        else {
            lv_playerClassesByRosterSlot[lv_rosterSlot] = c_heroRoleSpecialist;
        }
        lv_playersAssigned += 1;
    }
    lv_rosterSlot = 1;
    for ( ; ( (auto34B7656D_ai >= 0 && lv_rosterSlot <= auto34B7656D_ae) || (auto34B7656D_ai < 0 && lv_rosterSlot >= auto34B7656D_ae) ) ; lv_rosterSlot += auto34B7656D_ai ) {
        lv_rosterOffset = 0;
        for ( ; ( (autoCA06D6BC_ai >= 0 && lv_rosterOffset <= autoCA06D6BC_ae) || (autoCA06D6BC_ai < 0 && lv_rosterOffset >= autoCA06D6BC_ae) ) ; lv_rosterOffset += autoCA06D6BC_ai ) {
            lv_pick = 1;
            for ( ; ( (auto2272DB71_ai >= 0 && lv_pick <= auto2272DB71_ae) || (auto2272DB71_ai < 0 && lv_pick >= auto2272DB71_ae) ) ; lv_pick += auto2272DB71_ai ) {
                lv_player = libGame_gf_GetPlayerNumberFromRosterSlot((lv_rosterSlot + lv_rosterOffset));
                lv_heroCandidate = null;
                while (((lv_heroCandidate == null) || (libIGHS_gf_GetClassofHero(lv_heroCandidate) != lv_playerClassesByRosterSlot[lv_rosterSlot]) || (libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[1] == lv_heroCandidate) || (libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[2] == lv_heroCandidate) || (libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[3] == lv_heroCandidate) || ((lv_heroCandidate == "LostVikings") && (libIGHS_gf_GetCountofHeroPickAppearencesonTeam("LostVikings", libGame_gf_TeamNumberOfPlayer(lv_player)) >= 1)) || ((lv_heroCandidate == "Ragnaros") && ((libIGHS_gf_GetCountofHeroPickAppearencesonTeam("Ragnaros", libGame_gv_teamOrderIndex_C) >= 1) || (libIGHS_gf_GetCountofHeroPickAppearencesonTeam("Ragnaros", libGame_gv_teamChaosIndex_C) >= 1))))) {
                    lv_heroCandidate = libIGHS_gf_GetRandomShufflePickEnabledHero(false);
                }
                libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[lv_pick] = lv_heroCandidate;
            }
        }
    }
}

void libIGHS_gf_PrepareHeroPicksUnlocked () {
    // Variable Declarations
    int lv_rosterSlot;
    int lv_rosterOffset;
    int lv_player;
    int lv_pick;
    string lv_heroCandidate;
    int lv_heroClass;

    // Automatic Variable Declarations
    const int auto00E8AEF7_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto00E8AEF7_ai = 1;
    const int auto9A18AF34_ae = libIGHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
    const int auto9A18AF34_ai = 1;
    const int auto64DC54DE_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto64DC54DE_ai = libCore_gv_bALMaxPlayersOnATeam;

    // Variable Initialization
    lv_heroClass = c_heroRoleWarrior;

    // Implementation
    libIGHS_gf_ShufflePickDebugMessage(StringExternal("Param/Value/lib_IGHS_D705D049"));
    libIGHS_gf_ResetAllHeroPicks();
    if ((libIGHS_gv_shuffleSettings.lv_crazyModeChance != 0.0) && (libNtve_gf_RandomPercent() <= libIGHS_gv_shuffleSettings.lv_crazyModeChance)) {
        libIGHS_gf_PrepareHeroPicksAllSameHero();
        return ;
    }

    lv_rosterSlot = 1;
    for ( ; ( (auto00E8AEF7_ai >= 0 && lv_rosterSlot <= auto00E8AEF7_ae) || (auto00E8AEF7_ai < 0 && lv_rosterSlot >= auto00E8AEF7_ae) ) ; lv_rosterSlot += auto00E8AEF7_ai ) {
        lv_pick = 1;
        for ( ; ( (auto9A18AF34_ai >= 0 && lv_pick <= auto9A18AF34_ae) || (auto9A18AF34_ai < 0 && lv_pick >= auto9A18AF34_ae) ) ; lv_pick += auto9A18AF34_ai ) {
            lv_rosterOffset = 0;
            for ( ; ( (auto64DC54DE_ai >= 0 && lv_rosterOffset <= auto64DC54DE_ae) || (auto64DC54DE_ai < 0 && lv_rosterOffset >= auto64DC54DE_ae) ) ; lv_rosterOffset += auto64DC54DE_ai ) {
                lv_player = libGame_gf_GetPlayerNumberFromRosterSlot((lv_rosterSlot + lv_rosterOffset));
                lv_heroCandidate = null;
                while (((lv_heroCandidate == null) || ((libGame_gf_TeamNumberOfPlayer(lv_player) == libGame_gv_teamChaosIndex_C) && (libIGHS_gf_GetClassofHero(lv_heroCandidate) != lv_heroClass)) || (libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[1] == lv_heroCandidate) || (libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[2] == lv_heroCandidate) || (libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[3] == lv_heroCandidate) || ((lv_heroCandidate == "LostVikings") && (libIGHS_gf_GetCountofHeroPickAppearencesonTeam("LostVikings", libGame_gf_TeamNumberOfPlayer(lv_player)) >= 1)) || ((lv_heroCandidate == "Ragnaros") && ((libIGHS_gf_GetCountofHeroPickAppearencesonTeam("Ragnaros", libGame_gv_teamOrderIndex_C) >= 1) || (libIGHS_gf_GetCountofHeroPickAppearencesonTeam("Ragnaros", libGame_gv_teamChaosIndex_C) >= 1))))) {
                    lv_heroCandidate = libIGHS_gf_GetRandomShufflePickEnabledHero(false);
                }
                lv_heroClass = libIGHS_gf_GetClassofHero(lv_heroCandidate);
                libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[lv_pick] = lv_heroCandidate;
            }
        }
    }
}

void libIGHS_gf_PrepareHeroPicksAllSameHero () {
    // Variable Declarations
    int lv_player;
    int lv_pick;
    string lv_everyonesHero;

    // Automatic Variable Declarations
    const int autoC3ECA7C8_ae = libCore_gv_bALMaxPlayers;
    const int autoC3ECA7C8_ai = 1;
    const int autoC0B0ECD0_ae = libIGHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
    const int autoC0B0ECD0_ai = 1;
    const int auto96127062_ae = 5;
    const int auto96127062_ai = 1;

    // Variable Initialization

    // Implementation
    libIGHS_gf_ShufflePickDebugMessage(StringExternal("Param/Value/lib_IGHS_DF692E56"));
    libIGHS_gf_ResetAllHeroPicks();
    if ((libIGHS_gv_shuffleSettings.lv_everyonesHero != null)) {
        lv_everyonesHero = libIGHS_gv_shuffleSettings.lv_everyonesHero;
    }
    else {
        while (((lv_everyonesHero == null) || (lv_everyonesHero == libIGHS_gv_shuffleSettings.lv_crazyModeHeroesPicked[1]) || (lv_everyonesHero == libIGHS_gv_shuffleSettings.lv_crazyModeHeroesPicked[2]) || (lv_everyonesHero == libIGHS_gv_shuffleSettings.lv_crazyModeHeroesPicked[3]) || (lv_everyonesHero == libIGHS_gv_shuffleSettings.lv_crazyModeHeroesPicked[4]) || (lv_everyonesHero == libIGHS_gv_shuffleSettings.lv_crazyModeHeroesPicked[5]))) {
            lv_everyonesHero = libIGHS_gf_GetRandomShufflePickEnabledHero(true);
        }
    }
    lv_player = 1;
    for ( ; ( (autoC3ECA7C8_ai >= 0 && lv_player <= autoC3ECA7C8_ae) || (autoC3ECA7C8_ai < 0 && lv_player >= autoC3ECA7C8_ae) ) ; lv_player += autoC3ECA7C8_ai ) {
        lv_pick = 1;
        for ( ; ( (autoC0B0ECD0_ai >= 0 && lv_pick <= autoC0B0ECD0_ae) || (autoC0B0ECD0_ai < 0 && lv_pick >= autoC0B0ECD0_ae) ) ; lv_pick += autoC0B0ECD0_ai ) {
            libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[lv_pick] = lv_everyonesHero;
        }
    }
    lv_pick = 1;
    for ( ; ( (auto96127062_ai >= 0 && lv_pick <= auto96127062_ae) || (auto96127062_ai < 0 && lv_pick >= auto96127062_ae) ) ; lv_pick += auto96127062_ai ) {
        if ((libIGHS_gv_shuffleSettings.lv_crazyModeHeroesPicked[lv_pick] == null)) {
            libIGHS_gv_shuffleSettings.lv_crazyModeHeroesPicked[lv_pick] = lv_everyonesHero;
            break;
        }

    }
}

void libIGHS_gf_PrepareHeroPicksCuratedHeroList () {
    // Variable Declarations
    int lv_team;
    int lv_player;
    int lv_pick;
    string lv_heroCandidate;
    int lv_rosterslot;

    // Automatic Variable Declarations
    const int auto8AEA88B4_ae = libCore_gv_bALMaxTeams;
    const int auto8AEA88B4_ai = 1;
    playergroup auto56190444_g;
    const int auto996A23E0_ae = libIGHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
    const int auto996A23E0_ai = 1;

    // Variable Initialization

    // Implementation
    libIGHS_gf_ShufflePickDebugMessage(StringExternal("Param/Value/lib_IGHS_8F20D761"));
    libIGHS_gf_ResetAllHeroPicks();
    if ((libIGHS_gv_curatedHeroCount == 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_IGHS_34A8A114"), true);
        libIGHS_gf_PrepareHeroPicksUnlocked();
        return ;
    }

    lv_team = 1;
    for ( ; ( (auto8AEA88B4_ai >= 0 && lv_team <= auto8AEA88B4_ae) || (auto8AEA88B4_ai < 0 && lv_team >= auto8AEA88B4_ae) ) ; lv_team += auto8AEA88B4_ai ) {
        auto56190444_g = libGame_gf_PlayersOnTeamHeroes(lv_team, false);
        lv_player = -1;
        while (true) {
            	lv_player = PlayerGroupNextPlayer(auto56190444_g, lv_player);
            	if (lv_player<0) { break; }
            	lv_rosterslot = libGame_gv_players[lv_player].lv_rosterSlot;
            lv_pick = 1;
            for ( ; ( (auto996A23E0_ai >= 0 && lv_pick <= auto996A23E0_ae) || (auto996A23E0_ai < 0 && lv_pick >= auto996A23E0_ae) ) ; lv_pick += auto996A23E0_ai ) {
                lv_heroCandidate = null;
                while (((lv_heroCandidate == null) || (libIGHS_gf_IsCuratedHeroinRemovedList(lv_heroCandidate, libGame_gf_TeamNumberOfPlayer(lv_player)) == true) || ((lv_team == libGame_gv_teamChaosIndex_C) && (libIGHS_gf_GetClassofHero(lv_heroCandidate) != libIGHS_gf_GetClassofHero(libIGHS_gv_shuffleSettings.lv_players[libGame_gf_GetPlayerNumberFromRosterSlot((lv_rosterslot - 5))].lv_heroPickOptions[lv_pick]))) || ((libIGHS_gv_curatedHeroCount >= 3) && ((libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[1] == lv_heroCandidate) || (libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[2] == lv_heroCandidate) || (libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[3] == lv_heroCandidate))) || ((lv_heroCandidate == "LostVikings") && (libIGHS_gf_GetCountofHeroPickAppearencesonTeam("LostVikings", libGame_gf_TeamNumberOfPlayer(lv_player)) >= 1)) || ((lv_heroCandidate == "Ragnaros") && ((libIGHS_gf_GetCountofHeroPickAppearencesonTeam("Ragnaros", libGame_gv_teamOrderIndex_C) >= 1) || (libIGHS_gf_GetCountofHeroPickAppearencesonTeam("Ragnaros", libGame_gv_teamChaosIndex_C) >= 1))))) {
                    lv_heroCandidate = libIGHS_gf_GetRandomCuratedHero(libGame_gf_TeamNumberOfPlayer(lv_player));
                }
                libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[lv_pick] = lv_heroCandidate;
            }
        }
    }
}

int libIGHS_gf_GetClassofHero (string lp_heroLink) {
    // Variable Declarations
    string lv_classFromData;

    // Automatic Variable Declarations
    string autoAC981AF1_val;

    // Variable Initialization
    lv_classFromData = CatalogFieldValueGet(c_gameCatalogHero, lp_heroLink, "Role", c_playerAny);

    // Implementation
    autoAC981AF1_val = lv_classFromData;
    if (autoAC981AF1_val == "Warrior") {
        return c_heroRoleWarrior;
    }
    else if (autoAC981AF1_val == "Assassin") {
        return c_heroRoleDamage;
    }
    else if (autoAC981AF1_val == "Support") {
        return c_heroRoleSupport;
    }
    else if (autoAC981AF1_val == "Specialist") {
        return c_heroRoleSpecialist;
    }
    else if (autoAC981AF1_val == "Multiclass") {
        return c_heroRoleWarrior;
    }
    else {
        return c_heroRoleDamage;
    }
}

int libIGHS_gf_GetCountofHeroPickAppearencesonTeam (string lp_hero, int lp_team) {
    // Variable Declarations
    int lv_count;
    int lv_player;
    int lv_pick;

    // Automatic Variable Declarations
    playergroup autoCC13BDCD_g;
    const int auto4286BDB2_ae = libIGHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
    const int auto4286BDB2_ai = 1;

    // Variable Initialization

    // Implementation
    autoCC13BDCD_g = GameAttributePlayersForTeam(lp_team);
    lv_player = -1;
    while (true) {
        	lv_player = PlayerGroupNextPlayer(autoCC13BDCD_g, lv_player);
        	if (lv_player<0) { break; }
        	lv_pick = 1;
        for ( ; ( (auto4286BDB2_ai >= 0 && lv_pick <= auto4286BDB2_ae) || (auto4286BDB2_ai < 0 && lv_pick >= auto4286BDB2_ae) ) ; lv_pick += auto4286BDB2_ai ) {
            if ((libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[lv_pick] == lp_hero)) {
                lv_count += 1;
            }

        }
    }
    return lv_count;
}

string libIGHS_gf_GetRandomShufflePickEnabledHero (bool lp_usingCrazyMode) {
    // Variable Declarations
    string lv_heroCandidate;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroCandidate = libCore_gf_GetHeroFromIndex(RandomInt(1, libCore_gf_GetHeroTotalCount()));

    // Implementation
    while ((libIGHS_gf_IsHeroValidforShufflePick(lv_heroCandidate, lp_usingCrazyMode) == false)) {
        lv_heroCandidate = libCore_gf_GetHeroFromIndex(RandomInt(1, libCore_gf_GetHeroTotalCount()));
    }
    return lv_heroCandidate;
}

bool libIGHS_gf_IsHeroValidforShufflePick (string lp_hero, bool lp_usingCrazyMode) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_usingCrazyMode == true) && (CatalogFieldValueGet(c_gameCatalogHero, lp_hero, "Flags[" + IntToString(c_heroFlagGoodForModeB) + "]", c_playerAny) == "1")) {
        return true;
    }

    if ((lp_usingCrazyMode == false) && (CatalogFieldValueGet(c_gameCatalogHero, lp_hero, "Flags[" + IntToString(c_heroFlagGoodForModeA) + "]", c_playerAny) == "1")) {
        return true;
    }

    return false;
}

bool libIGHS_gf_AreAllPlayersLockedIn () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto5EDAD4C3_ae = libCore_gv_bALMaxPlayers;
    const int auto5EDAD4C3_ai = 1;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (auto5EDAD4C3_ai >= 0 && lv_player <= auto5EDAD4C3_ae) || (auto5EDAD4C3_ai < 0 && lv_player >= auto5EDAD4C3_ae) ) ; lv_player += auto5EDAD4C3_ai ) {
        if ((PlayerStatus(lv_player) != c_playerStatusUnused) && (libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_isLockedIn == false)) {
            return false;
        }

    }
    return true;
}

void libIGHS_gf_SetHeroSkinAndMountForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCore_gf_DataClearHeroDataAtIndex(lp_player);
    libCore_gf_DataLoadHeroDataIntoIndex(libCore_gf_GetHeroFromIndex(libGame_gv_players[lp_player].lv_heroIndex), lp_player);
    if ((libIGHS_gv_shuffleSettings.lv_randomizeSkinsAndMounts == true)) {
        libGame_gf_HeroSelectionRandomlyPickSkin(lp_player);
        libGame_gf_HeroSelectionRandomlyPickMount(lp_player);
        libGame_gf_HeroSelectionRandomlyPickSpray(lp_player);
    }
    else {
        libIGHS_gf_SetSkinforPlayerUsingCuratedList(lp_player);
        libIGHS_gf_SetMountforPlayerUsingCuratedList(lp_player);
    }
}

bool libIGHS_gf_IsCuratedHeroinRemovedList (string lp_heroLink, int lp_team) {
    // Variable Declarations
    int lv_removedHeroIndex;

    // Automatic Variable Declarations
    int auto48BABFD1_ae;
    const int auto48BABFD1_ai = 1;

    // Variable Initialization

    // Implementation
    auto48BABFD1_ae = libIGHS_gv_removedCuratedHeroCount;
    lv_removedHeroIndex = 1;
    for ( ; ( (auto48BABFD1_ai >= 0 && lv_removedHeroIndex <= auto48BABFD1_ae) || (auto48BABFD1_ai < 0 && lv_removedHeroIndex >= auto48BABFD1_ae) ) ; lv_removedHeroIndex += auto48BABFD1_ai ) {
        if ((libIGHS_gv_removedCuratedHeroes[lv_removedHeroIndex].lv_heroLink == lp_heroLink) && ((libIGHS_gv_removedCuratedHeroes[lv_removedHeroIndex].lv_team == lp_team) || (libIGHS_gv_removedCuratedHeroes[lv_removedHeroIndex].lv_team == 0))) {
            return true;
        }

    }
    return false;
}

string libIGHS_gf_GetRandomCuratedHero (int lp_team) {
    // Variable Declarations
    int lv_randomIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_randomIndex = RandomInt(1, libIGHS_gv_curatedHeroCount);

    // Implementation
    while (((libIGHS_gf_IsCuratedHeroinRemovedList(libIGHS_gv_curatedHeroes[lv_randomIndex].lv_heroLink, lp_team) == true) || ((libIGHS_gv_curatedHeroes[lv_randomIndex].lv_team != lp_team) && (libIGHS_gv_curatedHeroes[lv_randomIndex].lv_team != 0)))) {
        lv_randomIndex = RandomInt(1, libIGHS_gv_curatedHeroCount);
    }
    return libIGHS_gv_curatedHeroes[lv_randomIndex].lv_heroLink;
}

void libIGHS_gf_AddHeroToCuratedHeroList (string lp_hero, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    if ((libIGHS_gv_curatedHeroCount == libIGHS_gv_curatedHeroCountMax)) {
        TextExpressionSetToken("Param/Expression/lib_IGHS_6CB3A0B3", "A", StringToText(CatalogFieldValueGet(c_gameCatalogHero, lp_hero, "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_IGHS_6CB3A0B3", "B", IntToText(libIGHS_gv_curatedHeroCountMax));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_IGHS_6CB3A0B3"), true);
        return ;
    }

    libIGHS_gv_curatedHeroCount += 1;
    libIGHS_gv_curatedHeroes[libIGHS_gv_curatedHeroCount].lv_heroLink = lp_hero;
    libIGHS_gv_curatedHeroes[libIGHS_gv_curatedHeroCount].lv_team = lp_team;
}

void libIGHS_gf_AddAllValidHeroesToCuratedHeroList () {
    // Variable Declarations
    int lv_heroIndex;

    // Automatic Variable Declarations
    int autoA9C35C69_ae;
    const int autoA9C35C69_ai = 1;

    // Variable Initialization

    // Implementation
    autoA9C35C69_ae = (libCore_gf_GetHeroTotalCount() - 1);
    lv_heroIndex = 1;
    for ( ; ( (autoA9C35C69_ai >= 0 && lv_heroIndex <= autoA9C35C69_ae) || (autoA9C35C69_ai < 0 && lv_heroIndex >= autoA9C35C69_ae) ) ; lv_heroIndex += autoA9C35C69_ai ) {
        if ((CatalogFieldValueGet(c_gameCatalogHero, libCore_gf_GetHeroFromIndex(lv_heroIndex), "Flags[" + IntToString(c_heroFlagGoodForModeA) + "]", c_playerAny) == "1")) {
            libIGHS_gf_AddHeroToCuratedHeroList(libCore_gf_GetHeroFromIndex(lv_heroIndex), 0);
        }

    }
}

void libIGHS_gf_RemoveHeroFromCuratedHeroList (string lp_hero, int lp_team) {
    // Variable Declarations
    int lv_curatedHeroIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libIGHS_gv_removedCuratedHeroCount += 1;
    libIGHS_gv_removedCuratedHeroes[libIGHS_gv_removedCuratedHeroCount].lv_heroLink = lp_hero;
    libIGHS_gv_removedCuratedHeroes[libIGHS_gv_removedCuratedHeroCount].lv_team = lp_team;
}

void libIGHS_gf_AddSkinToCuratedSkinList (string lp_skin, string lp_heroThatUsesSkin, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    if ((libIGHS_gv_curatedHeroCount == libIGHS_gv_curatedHeroCountMax)) {
        TextExpressionSetToken("Param/Expression/lib_IGHS_36920A65", "A", StringToText(CatalogFieldValueGet(c_gameCatalogSkin, lp_skin, "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_IGHS_36920A65", "B", IntToText(libIGHS_gv_curatedSkinCountMax));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_IGHS_36920A65"), true);
        return ;
    }

    libIGHS_gv_curatedSkinCount += 1;
    libIGHS_gv_curatedSkins[libIGHS_gv_curatedSkinCount].lv_skinLink = lp_skin;
    libIGHS_gv_curatedSkins[libIGHS_gv_curatedSkinCount].lv_requiredHero = lp_heroThatUsesSkin;
    libIGHS_gv_curatedSkins[libIGHS_gv_curatedSkinCount].lv_team = lp_team;
}

void libIGHS_gf_SetSkinforPlayerUsingCuratedList (int lp_player) {
    // Variable Declarations
    int lv_team;
    string[libIGHS_gv_curatedSkinCountMax + 1] lv_possibleSkins;
    int lv_possibleSkinCount;
    int lv_i;

    // Automatic Variable Declarations
    int auto3843BB09_ae;
    const int auto3843BB09_ai = 1;

    // Variable Initialization
    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);

    // Implementation
    auto3843BB09_ae = libIGHS_gv_curatedSkinCount;
    lv_i = 1;
    for ( ; ( (auto3843BB09_ai >= 0 && lv_i <= auto3843BB09_ae) || (auto3843BB09_ai < 0 && lv_i >= auto3843BB09_ae) ) ; lv_i += auto3843BB09_ai ) {
        if ((libIGHS_gv_curatedSkins[lv_i].lv_requiredHero == libCore_gf_GetHeroFromIndex(libGame_gv_players[lp_player].lv_heroIndex)) && ((libIGHS_gv_curatedSkins[lv_i].lv_team == lv_team) || (libIGHS_gv_curatedSkins[lv_i].lv_team == 0))) {
            lv_possibleSkinCount += 1;
            lv_possibleSkins[lv_possibleSkinCount] = libIGHS_gv_curatedSkins[lv_i].lv_skinLink;
        }

    }
    if ((lv_possibleSkinCount > 0)) {
        PlayerSetSkin(lp_player, lv_possibleSkins[RandomInt(1, lv_possibleSkinCount)]);
    }

}

void libIGHS_gf_SetSkinforAllPlayersUsingCuratedList () {
    // Variable Declarations
    int lv_playerIndex;

    // Automatic Variable Declarations
    const int auto4FDE96F7_ae = libCore_gv_bALMaxPlayers;
    const int auto4FDE96F7_ai = 1;

    // Variable Initialization

    // Implementation
    lv_playerIndex = 1;
    for ( ; ( (auto4FDE96F7_ai >= 0 && lv_playerIndex <= auto4FDE96F7_ae) || (auto4FDE96F7_ai < 0 && lv_playerIndex >= auto4FDE96F7_ae) ) ; lv_playerIndex += auto4FDE96F7_ai ) {
        libIGHS_gf_SetSkinforPlayerUsingCuratedList(lv_playerIndex);
    }
}

void libIGHS_gf_AddMountToCuratedMountList (string lp_mount, string lp_hero, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    if ((libIGHS_gv_curatedHeroCount == libIGHS_gv_curatedHeroCountMax)) {
        TextExpressionSetToken("Param/Expression/lib_IGHS_69723F79", "A", StringToText(CatalogFieldValueGet(c_gameCatalogMount, lp_mount, "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_IGHS_69723F79", "B", IntToText(libIGHS_gv_curatedMountCountMax));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_IGHS_69723F79"), true);
        return ;
    }

    libIGHS_gv_curatedMountCount += 1;
    libIGHS_gv_curatedMounts[libIGHS_gv_curatedMountCount].lv_mountLink = lp_mount;
    libIGHS_gv_curatedMounts[libIGHS_gv_curatedMountCount].lv_requiredHero = lp_hero;
    libIGHS_gv_curatedMounts[libIGHS_gv_curatedMountCount].lv_team = lp_team;
}

void libIGHS_gf_SetMountforPlayerUsingCuratedList (int lp_player) {
    // Variable Declarations
    int lv_team;
    string[libIGHS_gv_curatedMountCountMax + 1] lv_possibleMounts;
    int lv_possibleMountCount;
    int lv_i;

    // Automatic Variable Declarations
    int auto137B9E04_ae;
    const int auto137B9E04_ai = 1;

    // Variable Initialization
    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);

    // Implementation
    auto137B9E04_ae = libIGHS_gv_curatedMountCount;
    lv_i = 1;
    for ( ; ( (auto137B9E04_ai >= 0 && lv_i <= auto137B9E04_ae) || (auto137B9E04_ai < 0 && lv_i >= auto137B9E04_ae) ) ; lv_i += auto137B9E04_ai ) {
        if (((libIGHS_gv_curatedMounts[lv_i].lv_requiredHero == libCore_gf_GetHeroFromIndex(libGame_gv_players[lp_player].lv_heroIndex)) || (libIGHS_gv_curatedMounts[lv_i].lv_requiredHero == null)) && ((libIGHS_gv_curatedMounts[lv_i].lv_team == lv_team) || (libIGHS_gv_curatedMounts[lv_i].lv_team == 0))) {
            lv_possibleMountCount += 1;
            lv_possibleMounts[lv_possibleMountCount] = libIGHS_gv_curatedMounts[lv_i].lv_mountLink;
        }

    }
    if ((lv_possibleMountCount > 0)) {
        PlayerSetMount(lp_player, lv_possibleMounts[RandomInt(1, lv_possibleMountCount)]);
    }

}

void libIGHS_gf_SetMountforAllPlayersUsingCuratedList () {
    // Variable Declarations
    int lv_playerIndex;

    // Automatic Variable Declarations
    const int autoDEF0B587_ae = libCore_gv_bALMaxPlayers;
    const int autoDEF0B587_ai = 1;

    // Variable Initialization

    // Implementation
    lv_playerIndex = 1;
    for ( ; ( (autoDEF0B587_ai >= 0 && lv_playerIndex <= autoDEF0B587_ae) || (autoDEF0B587_ai < 0 && lv_playerIndex >= autoDEF0B587_ae) ) ; lv_playerIndex += autoDEF0B587_ai ) {
        libIGHS_gf_SetMountforPlayerUsingCuratedList(lv_playerIndex);
    }
}

void libIGHS_gf_ARM_HeroPickUIInit () {
    int init_i;

    // Variable Declarations
    int[11] lv_panels;
    int lv_currentPanelLayer;
    int lv_itPlayerSlot;
    int lv_itHero;
    int lv_itRound;
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto2F908C58_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto2F908C58_ai = 1;
    const int auto5305D6D7_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto5305D6D7_ai = 1;
    const int auto8374867C_ae = libCore_gv_bALMaxTeams;
    const int auto8374867C_ai = 1;
    int autoFBB8B9DE_ae;
    const int autoFBB8B9DE_ai = 1;
    const int auto0D5AE7AF_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int auto0D5AE7AF_ai = 1;
    const int autoF28DC79E_ae = libIGHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
    const int autoF28DC79E_ai = 1;
    const int auto7007A4FF_ae = libIGHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
    const int auto7007A4FF_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    libIGHS_gf_ShufflePickDebugMessage(StringExternal("Param/Value/lib_IGHS_7C887BF7"));
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libIGHS_gv_shuffleUI.lv_dialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "ArenaModePickHeroUI/ArenaPickHeroPanelTemplate");
    libIGHS_gv_shuffleUI.lv_mainPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "MapNameLabel");
    libIGHS_gv_shuffleUI.lv_titleLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ArenaModeTitleFrame");
    libIGHS_gv_shuffleUI.lv_arenaModeTitlePanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "NonArenaModeTitleFrame");
    libIGHS_gv_shuffleUI.lv_nonArenaModeTitlePanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CountdownLabel");
    libIGHS_gv_shuffleUI.lv_countdownLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "MapExtraInfoLabel");
    libIGHS_gv_shuffleUI.lv_extraInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "RoundStartCountdownFrame");
    libIGHS_gv_shuffleUI.lv_finalCountdownFrame = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "AbilitiesButton");
    libIGHS_gv_shuffleUI.lv_abilitiesInfoButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "TalentsButton");
    libIGHS_gv_shuffleUI.lv_talentsInfoButton = DialogControlLastCreated();
    lv_itPlayerSlot = 1;
    for ( ; ( (auto2F908C58_ai >= 0 && lv_itPlayerSlot <= auto2F908C58_ae) || (auto2F908C58_ai < 0 && lv_itPlayerSlot >= auto2F908C58_ae) ) ; lv_itPlayerSlot += auto2F908C58_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeHeroCutscene, "HeroCutsceneFrame" + IntToString(lv_itPlayerSlot -  1));
        libIGHS_gv_shuffleUI.lv_heroCutsceneFrame[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    lv_itPlayerSlot = 1;
    for ( ; ( (auto5305D6D7_ai >= 0 && lv_itPlayerSlot <= auto5305D6D7_ae) || (auto5305D6D7_ai < 0 && lv_itPlayerSlot >= auto5305D6D7_ae) ) ; lv_itPlayerSlot += auto5305D6D7_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeHeroContainer, "SelectedHero" + IntToString(lv_itPlayerSlot -  1));
        libIGHS_gv_shuffleUI.lv_heroContainerFrame[lv_itPlayerSlot] = DialogControlLastCreated();
    }
    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_ArenaMode)) {
        lv_itTeam = 1;
        for ( ; ( (auto8374867C_ai >= 0 && lv_itTeam <= auto8374867C_ae) || (auto8374867C_ai < 0 && lv_itTeam >= auto8374867C_ae) ) ; lv_itTeam += auto8374867C_ai ) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Team" + IntToString(lv_itTeam) + "RoundIndicators");
            libIGHS_gv_shuffleUI.lv_teamRoundIndicatorFrame[lv_itTeam] = DialogControlLastCreated();
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            autoFBB8B9DE_ae = libIGHS_gv_shuffleUI.lv_victoryCount;
            lv_itRound = 1;
            for ( ; ( (autoFBB8B9DE_ai >= 0 && lv_itRound <= autoFBB8B9DE_ae) || (autoFBB8B9DE_ai < 0 && lv_itRound >= autoFBB8B9DE_ae) ) ; lv_itRound += autoFBB8B9DE_ai ) {
                DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "Round" + IntToString(lv_itRound));
                libIGHS_gv_shuffleUI.lv_roundWinIndicatorImageBackgrounds[lv_itTeam][lv_itRound] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
                DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "Round" + IntToString(lv_itRound) + "/Victory");
                libIGHS_gv_shuffleUI.lv_roundWinIndicatorImages[lv_itTeam][lv_itRound] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            }
            lv_currentPanelLayer -= 1;
        }
    }

    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PickHeroFrame");
    libIGHS_gv_shuffleUI.lv_pickHeroPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    lv_itPlayerSlot = 1;
    for ( ; ( (auto0D5AE7AF_ai >= 0 && lv_itPlayerSlot <= auto0D5AE7AF_ae) || (auto0D5AE7AF_ai < 0 && lv_itPlayerSlot >= auto0D5AE7AF_ae) ) ; lv_itPlayerSlot += auto0D5AE7AF_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Player" + IntToString(lv_itPlayerSlot) + "PickHero");
        libIGHS_gv_shuffleUI.lv_playerHeroPanelPerPlayer[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_playerHeroPanelPerPlayer[lv_itPlayerSlot], PlayerGroupAll(), false);
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        if ((lv_itPlayerSlot > 1)) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PlayerNameFrame/PlayerIdLabel");
            libIGHS_gv_shuffleUI.lv_playerIdLabel[lv_itPlayerSlot] = DialogControlLastCreated();
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "RoleDescriptionLabel");
        libIGHS_gv_shuffleUI.lv_playerClassLabel[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "RoleDescriptionLabel");
        libIGHS_gv_shuffleUI.lv_playerClassLabel[(lv_itPlayerSlot+5)] = DialogControlLastCreated();
        if (true) {
            DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_playerClassLabel[lv_itPlayerSlot], PlayerGroupAll(), false);
            DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_playerClassLabel[(lv_itPlayerSlot+5)], PlayerGroupAll(), false);
        }

        lv_itHero = 1;
        for ( ; ( (autoF28DC79E_ai >= 0 && lv_itHero <= autoF28DC79E_ae) || (autoF28DC79E_ai < 0 && lv_itHero >= autoF28DC79E_ae) ) ; lv_itHero += autoF28DC79E_ai ) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "PlayerHeroButton" + IntToString(lv_itHero));
            libIGHS_gv_shuffleUI.lv_playerHeroButton[lv_itPlayerSlot][lv_itHero] = DialogControlLastCreated();
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "NormalImage");
            libIGHS_gv_shuffleUI.lv_playerHeroButtonBorder[lv_itPlayerSlot][lv_itHero] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "SelectedImage");
            libIGHS_gv_shuffleUI.lv_playerHeroButtonBorderSelected[lv_itPlayerSlot][lv_itHero] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroImage");
            libIGHS_gv_shuffleUI.lv_playerHeroButtonImage[lv_itPlayerSlot][lv_itHero] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroRole");
            libIGHS_gv_shuffleUI.lv_playerHeroRoleImage[lv_itPlayerSlot][lv_itHero] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroRoleBG");
            libIGHS_gv_shuffleUI.lv_playerHeroRoleBackground[lv_itPlayerSlot][lv_itHero] = DialogControlLastCreated();
            if ((lv_itPlayerSlot == 1)) {
                DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "SuggestedPickImage");
                libIGHS_gv_shuffleUI.lv_playerSuggestedHeroImage[lv_itHero] = DialogControlLastCreated();
            }

            lv_currentPanelLayer -= 1;
        }
        lv_itHero = 1;
        for ( ; ( (auto7007A4FF_ai >= 0 && lv_itHero <= auto7007A4FF_ae) || (auto7007A4FF_ai < 0 && lv_itHero >= auto7007A4FF_ae) ) ; lv_itHero += auto7007A4FF_ai ) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PlayerHeroButtonName" + IntToString(lv_itHero));
            libIGHS_gv_shuffleUI.lv_playerHeroButtonLabel[lv_itPlayerSlot][lv_itHero] = DialogControlLastCreated();
        }
        if ((lv_itPlayerSlot == 1)) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "ReadyButton");
            libIGHS_gv_shuffleUI.lv_playerReadyButton[lv_itPlayerSlot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(libCore_gv_oBSERVER_ObserverUIPlayer), false);
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Label");
            libIGHS_gv_shuffleUI.lv_playerReadyLabel[lv_itPlayerSlot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(libCore_gv_oBSERVER_ObserverUIPlayer), false);
            lv_currentPanelLayer -= 1;
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeBattleUserFrame, "VoiceChatFrame");
        libIGHS_gv_shuffleUI.lv_voiceChatFrame[lv_itPlayerSlot] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
    }
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "DebugFunButton");
    libIGHS_gv_shuffleUI.lv_debugCrazyBtn = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_IGHS_C8EAC2E3"), PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "DebugRerollButton");
    libIGHS_gv_shuffleUI.lv_debugRerollBtn = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_IGHS_FD23EBDB"), PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == false)) {
        DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_debugRerollBtn, PlayerGroupAll(), false);
        DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_debugCrazyBtn, PlayerGroupAll(), false);
    }

}

void libIGHS_gf_ShowShufflePickUI () {
    // Variable Declarations
    int lv_itPlayer2;
    int lv_t;

    // Automatic Variable Declarations
    const int auto42631844_ae = libCore_gv_bALMaxPlayers;
    const int auto42631844_ai = 1;
    const int auto47007754_ae = libCore_gv_bALMaxTeams;
    const int auto47007754_ai = 1;
    int auto2D17B3ED_ae;
    const int auto2D17B3ED_ai = 1;
    const int auto1BEB21DC_ae = libCore_gv_bALMaxPlayers;
    const int auto1BEB21DC_ai = 1;

    // Variable Initialization

    // Implementation
    libIGHS_gf_ShufflePickDebugMessage(StringExternal("Param/Value/lib_IGHS_2B21E8D3"));
    libGame_gv_heroPickDone = false;
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    UISetWorldVisible(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, false);
    SetHeroLeaderPanelEnabled(false);
    libIGHS_gf_MuteUnmuteSoundChannelsNotUsedForHeroSelection(true);
    libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("MX_Brawl_LockIn", PlayerGroupAll());
    DialogControlSetEnabled(libIGHS_gv_shuffleUI.lv_pickHeroPanel, PlayerGroupAll(), true);
    DialogSetVisible(libIGHS_gv_shuffleUI.lv_dialog, PlayerGroupAll(), true);
    DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_playerReadyButton[1], PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(libIGHS_gv_shuffleUI.lv_titleLabel, libIGHS_gv_shuffleSettings.lv_titleText, PlayerGroupAll());
    lv_itPlayer2 = 1;
    for ( ; ( (auto42631844_ai >= 0 && lv_itPlayer2 <= auto42631844_ae) || (auto42631844_ai < 0 && lv_itPlayer2 >= auto42631844_ae) ) ; lv_itPlayer2 += auto42631844_ai ) {
        libUIUI_gf_UIGameUIShowHideConsolePanelForPlayer(false, lv_itPlayer2);
    }
    DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_countdownLabel, PlayerGroupAll(), true);
    TextExpressionSetToken("Param/Expression/lib_IGHS_5696640C", "A", IntToText(libIGHS_gv_shuffleSettings.lv_totalTimeAllowedToPickHeroes));
    libNtve_gf_SetDialogItemText(libIGHS_gv_shuffleUI.lv_countdownLabel, TextExpressionAssemble("Param/Expression/lib_IGHS_5696640C"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(libIGHS_gv_shuffleUI.lv_countdownLabel, "ShufflePick_CountdownLabel", PlayerGroupAll());
    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_ArenaMode)) {
        while ((libIGHS_gv_shuffleUI.lv_victoryCount <= 0)) {
            Wait(0.0625, c_timeGame);
        }
        lv_t = 1;
        for ( ; ( (auto47007754_ai >= 0 && lv_t <= auto47007754_ae) || (auto47007754_ai < 0 && lv_t >= auto47007754_ae) ) ; lv_t += auto47007754_ai ) {
            auto2D17B3ED_ae = libIGHS_gv_shuffleUI.lv_victoryCount;
            lv_itPlayer2 = 1;
            for ( ; ( (auto2D17B3ED_ai >= 0 && lv_itPlayer2 <= auto2D17B3ED_ae) || (auto2D17B3ED_ai < 0 && lv_itPlayer2 >= auto2D17B3ED_ae) ) ; lv_itPlayer2 += auto2D17B3ED_ai ) {
                DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_roundWinIndicatorImageBackgrounds[lv_t][lv_itPlayer2], PlayerGroupAll(), true);
            }
        }
        DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_arenaModeTitlePanel, PlayerGroupAll(), true);
        DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_nonArenaModeTitlePanel, PlayerGroupAll(), false);
        SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "ArenaHeroSelect", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        SoundPlayForPlayer(SoundLink("UI_BNet_Draft_Countdown_Start", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("UI_BNet_Arena_Crowd_Cheer_HeroSelect_Start", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("UI_BNet_Arena_Crowd_Walla_HeroSelect", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_nonArenaModeTitlePanel, PlayerGroupAll(), true);
        DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_arenaModeTitlePanel, PlayerGroupAll(), false);
    }
    DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_nonArenaModeTitlePanel, PlayerGroupSingle(libCore_gv_oBSERVER_ObserverUIPlayer), false);
    DialogControlSetVisible(libUIUI_gv_uIObserverUI.lv_mainPanel, PlayerGroupSingle(libCore_gv_oBSERVER_ObserverUIPlayer), false);
    TriggerEnable(libIGHS_gt_PlayerClicksaShuffleUIButton, true);
    TriggerEnable(libIGHS_gt_HeroPickCountdownTimerExpires, true);
    if ((libIGHS_gv_dEBUG_ShuffleTimerIsPaused == false)) {
        TimerStart(libIGHS_gv_shuffleSettings.lv_heroPickTimer, IntToFixed(libIGHS_gv_shuffleSettings.lv_totalTimeAllowedToPickHeroes), false, c_timeGame);
    }

    libIGHS_gf_ShowCalloutsDuringHeroPickCountdown(libIGHS_gv_shuffleSettings.lv_heroPickTimer);
    libIGHS_gf_SendEventShufflePickUIShown();
    Wait(1.0, c_timeGame);
    lv_itPlayer2 = 1;
    for ( ; ( (auto1BEB21DC_ai >= 0 && lv_itPlayer2 <= auto1BEB21DC_ae) || (auto1BEB21DC_ai < 0 && lv_itPlayer2 >= auto1BEB21DC_ae) ) ; lv_itPlayer2 += auto1BEB21DC_ai ) {
        if ((PlayerStatus(lv_itPlayer2) != c_playerStatusUnused) && (PlayerType(lv_itPlayer2) != c_playerTypeUser)) {
            libIGHS_gf_SelectPickOptionforPlayer(lv_itPlayer2, RandomInt(1, libIGHS_gv_aRM_TeamComp_PickHeroHeroesCount_C));
            libIGHS_gf_LockUnlockHeroChoice(true, lv_itPlayer2);
        }

    }
}

void libIGHS_gf_SelectPickOptionforPlayer (int lp_player, int lp_newPick) {
    // Variable Declarations
    playergroup lv_teamMembers;
    int lv_viewer;
    int lv_pick;
    int lv_displayColumn;

    // Automatic Variable Declarations
    playergroup auto00A37962_g;
    const int auto260FE898_ae = libIGHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
    const int auto260FE898_ai = 1;

    // Variable Initialization
    lv_teamMembers = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false);

    // Implementation
    libIGHS_gv_shuffleSettings.lv_players[lp_player].lv_currentOptionSelected = lp_newPick;
    if ((lp_newPick == 0)) {
        libGame_gv_players[lp_player].lv_heroIndex = 0;
    }
    else {
        libGame_gv_players[lp_player].lv_heroIndex = libCore_gf_GetIndexFromHero(libIGHS_gv_shuffleSettings.lv_players[lp_player].lv_heroPickOptions[lp_newPick]);
        libCore_gf_DataClearHeroDataAtIndex(lp_player);
        libCore_gf_DataLoadHeroDataIntoIndex(libIGHS_gv_shuffleSettings.lv_players[lp_player].lv_heroPickOptions[lp_newPick], lp_player);
    }
    if ((libGame_gf_TeamNumberOfPlayer(lp_player) == libGame_gv_teamOrderIndex_C)) {
        PlayerGroupAdd(lv_teamMembers, libCore_gv_oBSERVER_ObserverUIPlayer);
    }

    auto00A37962_g = lv_teamMembers;
    lv_viewer = -1;
    while (true) {
        	lv_viewer = PlayerGroupNextPlayer(auto00A37962_g, lv_viewer);
        	if (lv_viewer<0) { break; }
        	lv_displayColumn = libIGHS_gf_GetHeroPickDisplayColumn(lv_viewer, lp_player);
        lv_pick = 1;
        for ( ; ( (auto260FE898_ai >= 0 && lv_pick <= auto260FE898_ae) || (auto260FE898_ai < 0 && lv_pick >= auto260FE898_ae) ) ; lv_pick += auto260FE898_ai ) {
            if ((lv_pick == lp_newPick)) {
                DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_playerHeroButtonBorderSelected[lv_displayColumn][lv_pick], PlayerGroupSingle(lv_viewer), true);
            }
            else {
                DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_playerHeroButtonBorderSelected[lv_displayColumn][lv_pick], PlayerGroupSingle(lv_viewer), false);
            }
        }
    }
    if ((lp_newPick != 0)) {
        DialogControlSetEnabled(libIGHS_gv_shuffleUI.lv_playerReadyButton[1], PlayerGroupSingle(lp_player), true);
    }
    else {
        DialogControlSetEnabled(libIGHS_gv_shuffleUI.lv_playerReadyButton[1], PlayerGroupSingle(lp_player), false);
    }
    if ((lp_newPick != 0)) {
        libNtve_gf_SetDialogItemHeroLink(libIGHS_gv_shuffleUI.lv_heroContainerFrame[1], libIGHS_gv_shuffleSettings.lv_players[lp_player].lv_heroPickOptions[libIGHS_gv_shuffleSettings.lv_players[lp_player].lv_currentOptionSelected], PlayerGroupSingle(lp_player));
        DialogControlSetEnabled(libIGHS_gv_shuffleUI.lv_abilitiesInfoButton, PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(libIGHS_gv_shuffleUI.lv_talentsInfoButton, PlayerGroupSingle(lp_player), true);
    }
    else {
        DialogControlSetEnabled(libIGHS_gv_shuffleUI.lv_abilitiesInfoButton, PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(libIGHS_gv_shuffleUI.lv_talentsInfoButton, PlayerGroupSingle(lp_player), false);
    }
    libGame_gf_HeroSelectionRandomlyPickVoiceLine(lp_player);
}

void libIGHS_gf_LockUnlockHeroChoice (bool lp_toggle, int lp_player) {
    // Variable Declarations
    playergroup lv_teamMembers;
    int lv_viewer;
    int lv_pick;
    int lv_displayColumn;

    // Automatic Variable Declarations
    playergroup auto0EB55B19_g;
    const int autoFDB9F568_ae = libIGHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
    const int autoFDB9F568_ai = 1;

    // Variable Initialization
    lv_teamMembers = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false);

    // Implementation
    libIGHS_gv_shuffleSettings.lv_players[lp_player].lv_isLockedIn = (lp_toggle == true);
    if ((lp_toggle == true) && (libIGHS_gf_AreAllPlayersLockedIn() == true)) {
        TriggerExecute(libIGHS_gt_HeroPickCountdownTimerExpires, true, false);
        return ;
    }

    if ((lp_toggle == true)) {
        libNtve_gf_SetDialogItemText(libIGHS_gv_shuffleUI.lv_playerReadyButton[1], StringExternal("Param/Value/lib_IGHS_AF13819A"), PlayerGroupSingle(lp_player));
    }
    else {
        libNtve_gf_SetDialogItemText(libIGHS_gv_shuffleUI.lv_playerReadyButton[1], StringExternal("Param/Value/lib_IGHS_C972D167"), PlayerGroupSingle(lp_player));
    }
    if ((libGame_gf_TeamNumberOfPlayer(lp_player) == libGame_gv_teamOrderIndex_C)) {
        PlayerGroupAdd(lv_teamMembers, libCore_gv_oBSERVER_ObserverUIPlayer);
    }

    auto0EB55B19_g = lv_teamMembers;
    lv_viewer = -1;
    while (true) {
        	lv_viewer = PlayerGroupNextPlayer(auto0EB55B19_g, lv_viewer);
        	if (lv_viewer<0) { break; }
        	lv_displayColumn = libIGHS_gf_GetHeroPickDisplayColumn(lv_viewer, lp_player);
        lv_pick = 1;
        for ( ; ( (autoFDB9F568_ai >= 0 && lv_pick <= autoFDB9F568_ae) || (autoFDB9F568_ai < 0 && lv_pick >= autoFDB9F568_ae) ) ; lv_pick += autoFDB9F568_ai ) {
            if ((lp_toggle == true) && (lv_pick != libIGHS_gv_shuffleSettings.lv_players[lp_player].lv_currentOptionSelected)) {
                libNtve_gf_SetDialogItemDesaturated(libIGHS_gv_shuffleUI.lv_playerHeroButtonImage[lv_displayColumn][lv_pick], true, PlayerGroupSingle(lv_viewer));
                libNtve_gf_SetDialogItemDesaturated(libIGHS_gv_shuffleUI.lv_playerHeroRoleBackground[lv_displayColumn][lv_pick], true, PlayerGroupSingle(lv_viewer));
                DialogControlFadeTransparency(libIGHS_gv_shuffleUI.lv_playerHeroRoleImage[lv_displayColumn][lv_pick], PlayerGroupSingle(lv_viewer), 0.0, 25.0);
                DialogControlFadeTransparency(libIGHS_gv_shuffleUI.lv_playerHeroRoleBackground[lv_displayColumn][lv_pick], PlayerGroupSingle(lv_viewer), 0.0, 25.0);
            }
            else {
                libNtve_gf_SetDialogItemDesaturated(libIGHS_gv_shuffleUI.lv_playerHeroButtonImage[lv_displayColumn][lv_pick], false, PlayerGroupSingle(lv_viewer));
                libNtve_gf_SetDialogItemDesaturated(libIGHS_gv_shuffleUI.lv_playerHeroRoleBackground[lv_displayColumn][lv_pick], false, PlayerGroupSingle(lv_viewer));
                libNtve_gf_SetDialogItemDesaturated(libIGHS_gv_shuffleUI.lv_playerHeroRoleImage[lv_displayColumn][lv_pick], false, PlayerGroupSingle(lv_viewer));
                DialogControlFadeTransparency(libIGHS_gv_shuffleUI.lv_playerHeroRoleImage[lv_displayColumn][lv_pick], PlayerGroupSingle(lv_viewer), 0.0, 0.0);
                DialogControlFadeTransparency(libIGHS_gv_shuffleUI.lv_playerHeroRoleBackground[lv_displayColumn][lv_pick], PlayerGroupSingle(lv_viewer), 0.0, 0.0);
            }
        }
    }
    if ((lp_toggle == true) && (libIGHS_gv_shuffleSettings.lv_showHeroPickSuggestions == true)) {
        libIGHS_gf_ShowPickSuggestionsforTeam(libGame_gf_TeamNumberOfPlayer(lp_player));
    }

}

void libIGHS_gf_ShowPickOptionsforAllPlayers () {
    // Variable Declarations
    int lv_viewer;
    playergroup lv_teamMembers;
    int lv_updatedPlayer;
    int lv_pick;
    int lv_displayColumn;
    string lv_heroImage;
    text lv_heroName;
    int lv_team;

    // Automatic Variable Declarations
    const int auto8424CDFE_ae = libCore_gv_bALMaxPlayers;
    const int auto8424CDFE_ai = 1;
    const int auto1310CCCF_ae = libCore_gv_bALMaxPlayers;
    const int auto1310CCCF_ai = 1;
    playergroup auto02074460_g;
    const int autoD3506EE0_ae = libIGHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
    const int autoD3506EE0_ai = 1;
    int auto4108CF45_val;
    const int autoEC7D59B5_ae = libCore_gv_bALMaxTeams;
    const int autoEC7D59B5_ai = 1;

    // Variable Initialization

    // Implementation
    libIGHS_gf_ShufflePickDebugMessage(StringExternal("Param/Value/lib_IGHS_481214F2"));
    DialogSetVisible(libIGHS_gv_shuffleUI.lv_dialog, PlayerGroupAll(), true);
    DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_mainPanel, PlayerGroupAll(), true);
    DialogControlSetEnabled(libIGHS_gv_shuffleUI.lv_abilitiesInfoButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libIGHS_gv_shuffleUI.lv_talentsInfoButton, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemText(libIGHS_gv_shuffleUI.lv_titleLabel, libIGHS_gv_shuffleSettings.lv_titleText, PlayerGroupAll());
    DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_playerSuggestedHeroImage[1], PlayerGroupAll(), false);
    DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_playerSuggestedHeroImage[2], PlayerGroupAll(), false);
    DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_playerSuggestedHeroImage[3], PlayerGroupAll(), false);
    lv_updatedPlayer = 1;
    for ( ; ( (auto8424CDFE_ai >= 0 && lv_updatedPlayer <= auto8424CDFE_ae) || (auto8424CDFE_ai < 0 && lv_updatedPlayer >= auto8424CDFE_ae) ) ; lv_updatedPlayer += auto8424CDFE_ai ) {
        libIGHS_gf_ShowHidePlayersHeroCutscene(lv_updatedPlayer, false);
    }
    lv_updatedPlayer = 1;
    for ( ; ( (auto1310CCCF_ai >= 0 && lv_updatedPlayer <= auto1310CCCF_ae) || (auto1310CCCF_ai < 0 && lv_updatedPlayer >= auto1310CCCF_ae) ) ; lv_updatedPlayer += auto1310CCCF_ai ) {
        lv_teamMembers = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lv_updatedPlayer), false);
        if ((libGame_gf_TeamNumberOfPlayer(lv_updatedPlayer) == libGame_gv_teamOrderIndex_C)) {
            PlayerGroupAdd(lv_teamMembers, libCore_gv_oBSERVER_ObserverUIPlayer);
        }

        auto02074460_g = lv_teamMembers;
        lv_viewer = -1;
        while (true) {
            	lv_viewer = PlayerGroupNextPlayer(auto02074460_g, lv_viewer);
            	if (lv_viewer<0) { break; }
            	lv_displayColumn = libIGHS_gf_GetHeroPickDisplayColumn(lv_viewer, lv_updatedPlayer);
            if ((PlayerStatus(lv_updatedPlayer) == c_playerStatusUnused)) {
                DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_playerHeroPanelPerPlayer[lv_displayColumn], PlayerGroupSingle(lv_viewer), false);
                continue;
            }
            else {
                DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_playerHeroPanelPerPlayer[lv_displayColumn], PlayerGroupSingle(lv_viewer), true);
            }
            libNtve_gf_SetDialogItemText(libIGHS_gv_shuffleUI.lv_playerIdLabel[lv_displayColumn], IntToText(lv_updatedPlayer), PlayerGroupSingle(lv_viewer));
            lv_pick = 1;
            for ( ; ( (autoD3506EE0_ai >= 0 && lv_pick <= autoD3506EE0_ae) || (autoD3506EE0_ai < 0 && lv_pick >= autoD3506EE0_ae) ) ; lv_pick += autoD3506EE0_ai ) {
                lv_heroImage = (CatalogFieldValueGet(c_gameCatalogHero, libIGHS_gv_shuffleSettings.lv_players[lv_updatedPlayer].lv_heroPickOptions[lv_pick], "SelectScreenButtonImage", c_playerAny));
                libNtve_gf_SetDialogItemImage(libIGHS_gv_shuffleUI.lv_playerHeroButtonImage[lv_displayColumn][lv_pick], lv_heroImage, PlayerGroupSingle(lv_viewer));
                lv_heroName = UnitTypeGetName((CatalogFieldValueGet(c_gameCatalogHero, libIGHS_gv_shuffleSettings.lv_players[lv_updatedPlayer].lv_heroPickOptions[lv_pick], "Unit", c_playerAny)));
                libNtve_gf_SetDialogItemText(libIGHS_gv_shuffleUI.lv_playerHeroButtonLabel[lv_displayColumn][lv_pick], lv_heroName, PlayerGroupSingle(lv_viewer));
                if ((libIGHS_gv_shuffleSettings.lv_showHeroClassIcons == true)) {
                    DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_playerHeroRoleImage[lv_displayColumn][lv_pick], PlayerGroupSingle(lv_viewer), true);
                    DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_playerHeroRoleBackground[lv_displayColumn][lv_pick], PlayerGroupSingle(lv_viewer), true);
                    auto4108CF45_val = libIGHS_gf_GetClassofHero(libIGHS_gv_shuffleSettings.lv_players[lv_updatedPlayer].lv_heroPickOptions[lv_pick]);
                    if (auto4108CF45_val == c_heroRoleSupport) {
                        libNtve_gf_SetDialogItemImage(libIGHS_gv_shuffleUI.lv_playerHeroRoleImage[lv_displayColumn][lv_pick], "Assets\\Textures\\storm_ui_play_randomhero_button_icon_active_support.dds", PlayerGroupSingle(lv_viewer));
                    }
                    else if (auto4108CF45_val == c_heroRoleWarrior) {
                        libNtve_gf_SetDialogItemImage(libIGHS_gv_shuffleUI.lv_playerHeroRoleImage[lv_displayColumn][lv_pick], "Assets\\Textures\\storm_ui_play_randomhero_button_icon_active_warrior.dds", PlayerGroupSingle(lv_viewer));
                    }
                    else if (auto4108CF45_val == c_heroRoleSpecialist) {
                        libNtve_gf_SetDialogItemImage(libIGHS_gv_shuffleUI.lv_playerHeroRoleImage[lv_displayColumn][lv_pick], "Assets\\Textures\\storm_ui_play_randomhero_button_icon_active_specialist.dds", PlayerGroupSingle(lv_viewer));
                    }
                    else if (auto4108CF45_val == c_heroRoleDamage) {
                        libNtve_gf_SetDialogItemImage(libIGHS_gv_shuffleUI.lv_playerHeroRoleImage[lv_displayColumn][lv_pick], "Assets\\Textures\\storm_ui_play_randomhero_button_icon_active_assassin.dds", PlayerGroupSingle(lv_viewer));
                    }
                    else {
                        libNtve_gf_SetDialogItemImage(libIGHS_gv_shuffleUI.lv_playerHeroRoleImage[lv_displayColumn][lv_pick], "Assets\\Textures\\storm_ui_play_randomhero_button_icon_active_multiclass.dds", PlayerGroupSingle(lv_viewer));
                    }
                }
                else {
                    DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_playerHeroRoleImage[lv_displayColumn][lv_pick], PlayerGroupSingle(lv_viewer), false);
                    DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_playerHeroRoleBackground[lv_displayColumn][lv_pick], PlayerGroupSingle(lv_viewer), false);
                }
            }
            libNtve_gf_SetDialogItemPlayerId(libIGHS_gv_shuffleUI.lv_voiceChatFrame[lv_displayColumn], libCore_gf_GetPlayerIDfromTeamSlot(lv_updatedPlayer, libGame_gf_TeamNumberOfPlayer(lv_viewer)), PlayerGroupSingle(lv_viewer));
        }
    }
    if ((libIGHS_gv_shuffleSettings.lv_showHeroPickSuggestions == true)) {
        lv_team = 1;
        for ( ; ( (autoEC7D59B5_ai >= 0 && lv_team <= autoEC7D59B5_ae) || (autoEC7D59B5_ai < 0 && lv_team >= autoEC7D59B5_ae) ) ; lv_team += autoEC7D59B5_ai ) {
            libIGHS_gf_ShowPickSuggestionsforTeam(lv_team);
        }
    }

}

trigger auto_libIGHS_gf_ShowCalloutsDuringHeroPickCountdown_Trigger = null;
timer auto_libIGHS_gf_ShowCalloutsDuringHeroPickCountdown_lp_timer;

void libIGHS_gf_ShowCalloutsDuringHeroPickCountdown (timer lp_timer) {
    auto_libIGHS_gf_ShowCalloutsDuringHeroPickCountdown_lp_timer = lp_timer;

    if (auto_libIGHS_gf_ShowCalloutsDuringHeroPickCountdown_Trigger == null) {
        auto_libIGHS_gf_ShowCalloutsDuringHeroPickCountdown_Trigger = TriggerCreate("auto_libIGHS_gf_ShowCalloutsDuringHeroPickCountdown_TriggerFunc");
    }

    TriggerExecute(auto_libIGHS_gf_ShowCalloutsDuringHeroPickCountdown_Trigger, false, false);
}

bool auto_libIGHS_gf_ShowCalloutsDuringHeroPickCountdown_TriggerFunc (bool testConds, bool runActions) {
    timer lp_timer = auto_libIGHS_gf_ShowCalloutsDuringHeroPickCountdown_lp_timer;

    // Variable Declarations
    bool lv__10SecondReminderPlayed;
    bool lv__5SecondReminderPlayed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (true) {
        TextExpressionSetToken("Param/Expression/lib_IGHS_4D94D4D6", "A", FixedToText(TimerGetRemaining(libIGHS_gv_shuffleSettings.lv_heroPickTimer), 0));
        libNtve_gf_SetDialogItemText(libIGHS_gv_shuffleUI.lv_countdownLabel, TextExpressionAssemble("Param/Expression/lib_IGHS_4D94D4D6"), PlayerGroupAll());
        if ((TimerGetRemaining(lp_timer) < 11.0) && (lv__10SecondReminderPlayed == false)) {
            lv__10SecondReminderPlayed = true;
            SoundPlayForPlayer(SoundLink("UI_BNet_Draft_Countdown_10Sec", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }

        if ((TimerGetRemaining(lp_timer) < 6.0) && (lv__5SecondReminderPlayed == false)) {
            lv__5SecondReminderPlayed = true;
            libNtve_gf_SetDialogItemStyle(libIGHS_gv_shuffleUI.lv_countdownLabel, "ShufflePick_CountdownLabelWarning", PlayerGroupAll());
        }

        if ((TimerGetRemaining(lp_timer) <= 0.0)) {
            return true;
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

trigger auto_libIGHS_gf_ShowHidePlayersHeroCutscene_Trigger = null;
int auto_libIGHS_gf_ShowHidePlayersHeroCutscene_lp_player;
bool auto_libIGHS_gf_ShowHidePlayersHeroCutscene_lp_showOrHide;

void libIGHS_gf_ShowHidePlayersHeroCutscene (int lp_player, bool lp_showOrHide) {
    auto_libIGHS_gf_ShowHidePlayersHeroCutscene_lp_player = lp_player;
    auto_libIGHS_gf_ShowHidePlayersHeroCutscene_lp_showOrHide = lp_showOrHide;

    if (auto_libIGHS_gf_ShowHidePlayersHeroCutscene_Trigger == null) {
        auto_libIGHS_gf_ShowHidePlayersHeroCutscene_Trigger = TriggerCreate("auto_libIGHS_gf_ShowHidePlayersHeroCutscene_TriggerFunc");
    }

    TriggerExecute(auto_libIGHS_gf_ShowHidePlayersHeroCutscene_Trigger, false, false);
}

bool auto_libIGHS_gf_ShowHidePlayersHeroCutscene_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libIGHS_gf_ShowHidePlayersHeroCutscene_lp_player;
    bool lp_showOrHide = auto_libIGHS_gf_ShowHidePlayersHeroCutscene_lp_showOrHide;

    // Variable Declarations
    playergroup lv_teamMembers;
    int lv_viewer;
    int lv_displayColumn;

    // Automatic Variable Declarations
    playergroup auto900E741A_g;

    // Variable Initialization
    lv_teamMembers = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false);

    // Implementation
    if ((libGame_gf_TeamNumberOfPlayer(lp_player) == libGame_gv_teamOrderIndex_C) && (PlayerStatus(libCore_gv_oBSERVER_ObserverUIPlayer) != c_playerStatusUnused)) {
        PlayerGroupAdd(lv_teamMembers, libCore_gv_oBSERVER_ObserverUIPlayer);
    }

    auto900E741A_g = lv_teamMembers;
    lv_viewer = -1;
    while (true) {
        	lv_viewer = PlayerGroupNextPlayer(auto900E741A_g, lv_viewer);
        	if (lv_viewer<0) { break; }
        	lv_displayColumn = libIGHS_gf_GetHeroPickDisplayColumn(lv_viewer, lp_player);
        if ((lp_showOrHide == true)) {
            libNtve_gf_SetDialogItemHeroLink(libIGHS_gv_shuffleUI.lv_heroContainerFrame[lv_displayColumn], libIGHS_gv_shuffleSettings.lv_players[lp_player].lv_heroPickOptions[libIGHS_gv_shuffleSettings.lv_players[lp_player].lv_currentOptionSelected], PlayerGroupSingle(lv_viewer));
            libNtve_gf_SetDialogItemSkinLink(libIGHS_gv_shuffleUI.lv_heroContainerFrame[lv_displayColumn], PlayerSkin(lp_player), PlayerGroupSingle(lv_viewer));
            DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_heroCutsceneFrame[lv_displayColumn], PlayerGroupSingle(lv_viewer), true);
        }
        else {
            DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_heroCutsceneFrame[lv_displayColumn], PlayerGroupSingle(lv_viewer), false);
        }
    }
    return true;
}

void libIGHS_gf_ShowPickSuggestionsforTeam (int lp_team) {
    // Variable Declarations
    const int lv_roleNotFoundYet_C = 0;
    const int lv_roleFoundMultipleTimes_C = -1;
    int lv_player;
    int lv_pick;
    int lv_heroClass;
    int lv_playerGettingAssassinHighlights;
    int lv_playerGettingSupportHighlights;
    int lv_playerGettingTankHighlights;

    // Automatic Variable Declarations
    playergroup autoA01268D3_g;
    const int auto3DB0FAD9_ae = libIGHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
    const int auto3DB0FAD9_ai = 1;
    int auto7CE5CD54_val;
    playergroup auto5B2799E3_g;
    const int auto3B7ED371_ae = libIGHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
    const int auto3B7ED371_ai = 1;

    // Variable Initialization
    lv_heroClass = c_heroRoleWarrior;
    lv_playerGettingAssassinHighlights = lv_roleNotFoundYet_C;
    lv_playerGettingSupportHighlights = lv_roleNotFoundYet_C;
    lv_playerGettingTankHighlights = lv_roleNotFoundYet_C;

    // Implementation
    autoA01268D3_g = libGame_gf_PlayersOnTeamHeroes(lp_team, false);
    lv_player = -1;
    while (true) {
        	lv_player = PlayerGroupNextPlayer(autoA01268D3_g, lv_player);
        	if (lv_player<0) { break; }
        	lv_pick = 1;
        for ( ; ( (auto3DB0FAD9_ai >= 0 && lv_pick <= auto3DB0FAD9_ae) || (auto3DB0FAD9_ai < 0 && lv_pick >= auto3DB0FAD9_ae) ) ; lv_pick += auto3DB0FAD9_ai ) {
            if (((libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_isLockedIn == false) || (lv_pick == libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_currentOptionSelected))) {
                lv_heroClass = libIGHS_gf_GetClassofHero(libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[lv_pick]);
                auto7CE5CD54_val = lv_heroClass;
                if (auto7CE5CD54_val == c_heroRoleSupport) {
                    if ((lv_playerGettingSupportHighlights != lv_roleNotFoundYet_C) && (lv_playerGettingSupportHighlights != lv_player)) {
                        lv_playerGettingSupportHighlights = lv_roleFoundMultipleTimes_C;
                    }
                    else {
                        lv_playerGettingSupportHighlights = lv_player;
                    }
                }
                else if (auto7CE5CD54_val == c_heroRoleWarrior) {
                    if ((lv_playerGettingTankHighlights != lv_roleNotFoundYet_C) && (lv_playerGettingTankHighlights != lv_player)) {
                        lv_playerGettingTankHighlights = lv_roleFoundMultipleTimes_C;
                    }
                    else {
                        lv_playerGettingTankHighlights = lv_player;
                    }
                }
                else if (auto7CE5CD54_val == c_heroRoleDamage) {
                    if ((lv_playerGettingAssassinHighlights != lv_roleNotFoundYet_C) && (lv_playerGettingAssassinHighlights != lv_player)) {
                        lv_playerGettingAssassinHighlights = lv_roleFoundMultipleTimes_C;
                    }
                    else {
                        lv_playerGettingAssassinHighlights = lv_player;
                    }
                }
                else {
                }
            }

        }
    }
    auto5B2799E3_g = libGame_gf_PlayersOnTeamHeroes(lp_team, false);
    lv_player = -1;
    while (true) {
        	lv_player = PlayerGroupNextPlayer(auto5B2799E3_g, lv_player);
        	if (lv_player<0) { break; }
        	lv_pick = 1;
        for ( ; ( (auto3B7ED371_ai >= 0 && lv_pick <= auto3B7ED371_ae) || (auto3B7ED371_ai < 0 && lv_pick >= auto3B7ED371_ae) ) ; lv_pick += auto3B7ED371_ai ) {
            if ((libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_isLockedIn == false) && (((lv_playerGettingSupportHighlights == lv_player) && (libIGHS_gf_GetClassofHero(libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[lv_pick]) == c_heroRoleSupport)) || ((lv_playerGettingTankHighlights == lv_player) && (libIGHS_gf_GetClassofHero(libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[lv_pick]) == c_heroRoleWarrior)) || ((lv_playerGettingAssassinHighlights == lv_player) && (libIGHS_gf_GetClassofHero(libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[lv_pick]) == c_heroRoleDamage)))) {
                DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_playerSuggestedHeroImage[lv_pick], PlayerGroupSingle(lv_player), true);
            }
            else {
                DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_playerSuggestedHeroImage[lv_pick], PlayerGroupSingle(lv_player), false);
            }
        }
    }
}

void libIGHS_gf_SetVictoryCount (int lp_victoryCount) {
    // Automatic Variable Declarations
    // Implementation
    libIGHS_gv_shuffleUI.lv_victoryCount = lp_victoryCount;
}

int libIGHS_gf_GetHeroPickDisplayColumn (int lp_viewerPlayer, int lp_subjectPlayer) {
    // Variable Declarations
    int lv_viewerSlot;
    int lv_subjectSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_viewerSlot = (ModI((libGame_gv_players[lp_viewerPlayer].lv_rosterSlot - 1), 5) + 1);
    lv_subjectSlot = (ModI((libGame_gv_players[lp_subjectPlayer].lv_rosterSlot - 1), 5) + 1);

    // Implementation
    if (((lp_viewerPlayer == libCore_gv_oBSERVER_ObserverUIPlayer) || (lv_viewerSlot < lv_subjectSlot))) {
        return lv_subjectSlot;
    }

    if ((lv_viewerSlot > lv_subjectSlot)) {
        return (lv_subjectSlot + 1);
    }

    return 1;
}

void libIGHS_gf_ShufflePickUIShown (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libIGHS_gv_eventID_ShufflePickUIShown_C);
}

void libIGHS_gf_SendEventShufflePickUIShown () {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(libIGHS_gv_eventID_ShufflePickUIShown_C);
}

void libIGHS_gf_ShufflePickDebugMessage (text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    if ((libIGHS_gv_dEBUG_ShuffleDebugEnabled == true) && (GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) {
        TriggerDebugOutput(1, lp_text, true);
    }

}

void libIGHS_gf_MuteUnmuteSoundChannelsNotUsedForHeroSelection (bool lp_muteUnmute) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryVoice, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryBuild, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySAmbient, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryUser11, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAlert, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMission, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFoley, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMovie, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpell, lp_muteUnmute);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Map Initialization - Set Heroes Callback
//--------------------------------------------------------------------------------------------------
bool libIGHS_gt_MapInitializationSetHeroesCallback_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((GameTestConfigType() == 1) || (GameTestConfigType() == 2) || (GameTestConfigType() == 3) || (GameTestConfigType() == 4))) {
        return true;
    }

    libGame_gv_pickingHeroesCallback = libIGHS_gt_ShufflePickHeroSelectionCallback;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libIGHS_gt_MapInitializationSetHeroesCallback_Init () {
    libIGHS_gt_MapInitializationSetHeroesCallback = TriggerCreate("libIGHS_gt_MapInitializationSetHeroesCallback_Func");
    TriggerAddEventMapInit(libIGHS_gt_MapInitializationSetHeroesCallback);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuffle Pick Hero Selection Callback
//--------------------------------------------------------------------------------------------------
bool libIGHS_gt_ShufflePickHeroSelectionCallback_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer2;
    bool lv_ready;
    int lv_itCount;
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libIGHS_gv_shuffleSettings.lv_shufflePickMode == libIGHS_ge_ShufflePickMode_NotInitialized)) {
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_IGHS_3D8393EA"), true);
        libIGHS_gv_shuffleSettings.lv_shufflePickMode = libIGHS_ge_ShufflePickMode_Unlocked;
    }

    libIGHS_gf_ShufflePickDebugMessage(StringExternal("Param/Value/lib_IGHS_BB849E76"));
    libIGHS_gv_shuffleSettings.lv_shufflePickInProgress = true;
    libGame_gv_randomizeMountsAndSkins = false;
    libIGHS_gf_ARM_HeroPickUIInit();
    libIGHS_gf_ReshuffleHeroPicksAndShowShuffleUI();
    libIGHS_gf_ShufflePickDebugMessage(StringExternal("Param/Value/lib_IGHS_748C2230"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libIGHS_gt_ShufflePickHeroSelectionCallback_Init () {
    libIGHS_gt_ShufflePickHeroSelectionCallback = TriggerCreate("libIGHS_gt_ShufflePickHeroSelectionCallback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Clicks a Shuffle UI Button
//--------------------------------------------------------------------------------------------------
bool libIGHS_gt_PlayerClicksaShuffleUIButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_usedDialog;
    int lv_pick;

    // Automatic Variable Declarations
    const int auto436BF63D_ae = libIGHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
    const int auto436BF63D_ai = 1;

    // Variable Initialization
    lv_itPlayer = EventPlayer();
    lv_usedDialog = EventDialogControl();

    // Conditions
    if (testConds) {
        if (!(((lv_itPlayer >= 1) && (lv_itPlayer <= libCore_gv_bALMaxPlayers)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_usedDialog == libIGHS_gv_shuffleUI.lv_debugRerollBtn)) {
        libIGHS_gf_ReshuffleHeroPicksAndShowShuffleUI();
        return true;
    }

    lv_pick = 1;
    for ( ; ( (auto436BF63D_ai >= 0 && lv_pick <= auto436BF63D_ae) || (auto436BF63D_ai < 0 && lv_pick >= auto436BF63D_ae) ) ; lv_pick += auto436BF63D_ai ) {
        if ((lv_usedDialog == libIGHS_gv_shuffleUI.lv_playerHeroButton[1][lv_pick]) && (libIGHS_gv_shuffleSettings.lv_players[lv_itPlayer].lv_isLockedIn == false)) {
            libIGHS_gf_SelectPickOptionforPlayer(lv_itPlayer, lv_pick);
            return true;
        }

    }
    if ((lv_usedDialog == libIGHS_gv_shuffleUI.lv_playerReadyButton[1])) {
        if ((libIGHS_gv_shuffleSettings.lv_players[lv_itPlayer].lv_isLockedIn == false)) {
            libIGHS_gf_LockUnlockHeroChoice(true, lv_itPlayer);
        }
        else {
            libIGHS_gf_LockUnlockHeroChoice(false, lv_itPlayer);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libIGHS_gt_PlayerClicksaShuffleUIButton_Init () {
    libIGHS_gt_PlayerClicksaShuffleUIButton = TriggerCreate("libIGHS_gt_PlayerClicksaShuffleUIButton_Func");
    TriggerEnable(libIGHS_gt_PlayerClicksaShuffleUIButton, false);
    TriggerAddEventDialogControl(libIGHS_gt_PlayerClicksaShuffleUIButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Pick Countdown Timer Expires
//--------------------------------------------------------------------------------------------------
bool libIGHS_gt_HeroPickCountdownTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer2;
    sound lv_crowdSound;

    // Automatic Variable Declarations
    const int autoBAE0BC4B_ae = libCore_gv_bALMaxPlayers;
    const int autoBAE0BC4B_ai = 1;
    const int autoB83ACDBA_ae = libCore_gv_bALMaxPlayers;
    const int autoB83ACDBA_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libIGHS_gf_ShufflePickDebugMessage(StringExternal("Param/Value/lib_IGHS_AD1F18C7"));
    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_StopTimer(libIGHS_gv_shuffleSettings.lv_heroPickTimer);
    TriggerEnable(libIGHS_gt_PlayerClicksaShuffleUIButton, false);
    lv_itPlayer2 = 1;
    for ( ; ( (autoBAE0BC4B_ai >= 0 && lv_itPlayer2 <= autoBAE0BC4B_ae) || (autoBAE0BC4B_ai < 0 && lv_itPlayer2 >= autoBAE0BC4B_ae) ) ; lv_itPlayer2 += autoBAE0BC4B_ai ) {
        if ((PlayerStatus(lv_itPlayer2) != c_playerStatusUnused)) {
            if ((libIGHS_gv_shuffleSettings.lv_players[lv_itPlayer2].lv_currentOptionSelected == 0)) {
                libIGHS_gf_SelectPickOptionforPlayer(lv_itPlayer2, RandomInt(1, libIGHS_gv_aRM_TeamComp_PickHeroHeroesCount_C));
            }

            libIGHS_gv_shuffleSettings.lv_players[lv_itPlayer2].lv_isLockedIn = true;
            libIGHS_gf_SetHeroSkinAndMountForPlayer(lv_itPlayer2);
        }

    }
    if (((libIGHS_gv_allHeroesPickedSound != null) && (libCore_gv_sYSGameMode == libCore_ge_GameModes_ArenaMode))) {
        SoundPlayForPlayer(libIGHS_gv_allHeroesPickedSound, c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_playerReadyButton[1], PlayerGroupAll(), false);
    lv_itPlayer2 = 1;
    for ( ; ( (autoB83ACDBA_ai >= 0 && lv_itPlayer2 <= autoB83ACDBA_ae) || (autoB83ACDBA_ai < 0 && lv_itPlayer2 >= autoB83ACDBA_ae) ) ; lv_itPlayer2 += autoB83ACDBA_ai ) {
        if ((PlayerStatus(lv_itPlayer2) != c_playerStatusUnused)) {
            libIGHS_gf_ShowHidePlayersHeroCutscene(lv_itPlayer2, true);
        }

    }
    DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_countdownLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_finalCountdownFrame, PlayerGroupAll(), true);
    SoundPlayForPlayer(SoundLink("UI_BNet_Draft_Countdown", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(7.25, c_timeGame);
    DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_finalCountdownFrame, PlayerGroupAll(), false);
    DialogSetVisible(libIGHS_gv_shuffleUI.lv_dialog, PlayerGroupAll(), false);
    SoundStop(lv_crowdSound, true);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, libCore_gv_mAPMapAmbience, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    UISetWorldVisible(PlayerGroupAll(), true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, true);
    SetHeroLeaderPanelEnabled(true);
    DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_nonArenaModeTitlePanel, PlayerGroupSingle(libCore_gv_oBSERVER_ObserverUIPlayer), true);
    DialogControlSetVisible(libUIUI_gv_uIObserverUI.lv_mainPanel, PlayerGroupSingle(libCore_gv_oBSERVER_ObserverUIPlayer), true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libIGHS_gf_MuteUnmuteSoundChannelsNotUsedForHeroSelection(false);
    libSond_gf_SoundtrackPlayMapSoundtrackAsDefaultSoundtrackForAllPlayers();
    libGame_gv_heroPickDone = true;
    libGame_gv_heroSpawnReady = true;
    libIGHS_gv_shuffleSettings.lv_shufflePickInProgress = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libIGHS_gt_HeroPickCountdownTimerExpires_Init () {
    libIGHS_gt_HeroPickCountdownTimerExpires = TriggerCreate("libIGHS_gt_HeroPickCountdownTimerExpires_Func");
    TriggerEnable(libIGHS_gt_HeroPickCountdownTimerExpires, false);
    TriggerAddEventTimer(libIGHS_gt_HeroPickCountdownTimerExpires, libIGHS_gv_shuffleSettings.lv_heroPickTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Enable Debug Mode
//--------------------------------------------------------------------------------------------------
bool libIGHS_gt_DEBUGEnableDebugMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libIGHS_gv_dEBUG_ShuffleDebugEnabled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libIGHS_gv_dEBUG_ShuffleDebugEnabled = true;
    libIGHS_gf_ShufflePickDebugMessage(StringExternal("Param/Value/lib_IGHS_477BDA04"));
    DialogControlSetVisible(libIGHS_gv_shuffleUI.lv_debugRerollBtn, PlayerGroupAll(), true);
    if ((libIGHS_gv_dEBUG_ShuffleTimerIsPaused == false)) {
        TimerPause(libIGHS_gv_shuffleSettings.lv_heroPickTimer, true);
        libIGHS_gv_dEBUG_ShuffleTimerIsPaused = true;
        libIGHS_gf_ShufflePickDebugMessage(StringExternal("Param/Value/lib_IGHS_41D66ECC"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libIGHS_gt_DEBUGEnableDebugMode_Init () {
    libIGHS_gt_DEBUGEnableDebugMode = TriggerCreate("libIGHS_gt_DEBUGEnableDebugMode_Func");
    TriggerAddEventChatMessage(libIGHS_gt_DEBUGEnableDebugMode, c_playerAny, "shuffledebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Init Unlocked Pick
//--------------------------------------------------------------------------------------------------
bool libIGHS_gt_DEBUGInitUnlockedPick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libIGHS_gv_dEBUG_ShuffleDebugEnabled == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libIGHS_gf_InitializeShufflePickUnlocked(libIGHS_gv_shuffleSettings.lv_titleText, true, true, 30, 0.0, true);
    libIGHS_gf_ReshuffleHeroPicksAndShowShuffleUI();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libIGHS_gt_DEBUGInitUnlockedPick_Init () {
    libIGHS_gt_DEBUGInitUnlockedPick = TriggerCreate("libIGHS_gt_DEBUGInitUnlockedPick_Func");
    TriggerAddEventChatMessage(libIGHS_gt_DEBUGInitUnlockedPick, c_playerAny, "initunlocked", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Init Role Locked Pick
//--------------------------------------------------------------------------------------------------
bool libIGHS_gt_DEBUGInitRoleLockedPick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libIGHS_gv_dEBUG_ShuffleDebugEnabled == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libIGHS_gf_InitializeShufflePickRoleLocked(libIGHS_gv_shuffleSettings.lv_titleText, true, false, 30, 0.0);
    libIGHS_gf_ReshuffleHeroPicksAndShowShuffleUI();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libIGHS_gt_DEBUGInitRoleLockedPick_Init () {
    libIGHS_gt_DEBUGInitRoleLockedPick = TriggerCreate("libIGHS_gt_DEBUGInitRoleLockedPick_Func");
    TriggerAddEventChatMessage(libIGHS_gt_DEBUGInitRoleLockedPick, c_playerAny, "initlocked", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Init All Same Hero Pick
//--------------------------------------------------------------------------------------------------
bool libIGHS_gt_DEBUGInitAllSameHeroPick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_chatString;
    string lv_heroName;
    string lv_hero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chatString = EventChatMessage(false);
    lv_heroName = "";

    // Conditions
    if (testConds) {
        if (!((libIGHS_gv_dEBUG_ShuffleDebugEnabled == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringLength(lv_chatString) >= 13)) {
        lv_heroName = StringSub(lv_chatString, 13, StringLength(lv_chatString));
        lv_hero = (lv_heroName);
    }

    libIGHS_gf_InitializeShufflePickAllSameHero(libIGHS_gv_shuffleSettings.lv_titleText, true, false, 30, lv_hero);
    libIGHS_gf_ReshuffleHeroPicksAndShowShuffleUI();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libIGHS_gt_DEBUGInitAllSameHeroPick_Init () {
    libIGHS_gt_DEBUGInitAllSameHeroPick = TriggerCreate("libIGHS_gt_DEBUGInitAllSameHeroPick_Func");
    TriggerAddEventChatMessage(libIGHS_gt_DEBUGInitAllSameHeroPick, c_playerAny, "initallsame", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Init Curated List
//--------------------------------------------------------------------------------------------------
bool libIGHS_gt_DEBUGInitCuratedList_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libIGHS_gv_dEBUG_ShuffleDebugEnabled == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libIGHS_gf_InitializeShufflePickCuratedHeroList(libIGHS_gv_shuffleSettings.lv_titleText, true, true, 30, libIGHS_gt_DEBUGCurateHeroesforDebugging, true);
    libIGHS_gf_ReshuffleHeroPicksAndShowShuffleUI();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libIGHS_gt_DEBUGInitCuratedList_Init () {
    libIGHS_gt_DEBUGInitCuratedList = TriggerCreate("libIGHS_gt_DEBUGInitCuratedList_Func");
    TriggerAddEventChatMessage(libIGHS_gt_DEBUGInitCuratedList, c_playerAny, "initcurated", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Curate Heroes for Debugging
//--------------------------------------------------------------------------------------------------
bool libIGHS_gt_DEBUGCurateHeroesforDebugging_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libIGHS_gv_dEBUG_ShuffleDebugEnabled == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libIGHS_gf_AddHeroToCuratedHeroList("Monk", 0);
    libIGHS_gf_AddHeroToCuratedHeroList("Crusader", 0);
    libIGHS_gf_AddHeroToCuratedHeroList("Azmodan", 0);
    libIGHS_gf_AddHeroToCuratedHeroList("Raynor", libGame_gv_teamOrderIndex_C);
    libIGHS_gf_AddHeroToCuratedHeroList("Zeratul", libGame_gv_teamChaosIndex_C);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libIGHS_gt_DEBUGCurateHeroesforDebugging_Init () {
    libIGHS_gt_DEBUGCurateHeroesforDebugging = TriggerCreate("libIGHS_gt_DEBUGCurateHeroesforDebugging_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Pause/Unpause Shuffle Timer
//--------------------------------------------------------------------------------------------------
bool libIGHS_gt_DEBUGPauseUnpauseShuffleTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libIGHS_gv_dEBUG_ShuffleDebugEnabled == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libIGHS_gv_dEBUG_ShuffleTimerIsPaused = !(libIGHS_gv_dEBUG_ShuffleTimerIsPaused);
    if ((libIGHS_gv_dEBUG_ShuffleTimerIsPaused == true)) {
        libIGHS_gf_ShufflePickDebugMessage(StringExternal("Param/Value/lib_IGHS_00975896"));
        TimerPause(libIGHS_gv_shuffleSettings.lv_heroPickTimer, true);
    }
    else {
        libIGHS_gf_ShufflePickDebugMessage(StringExternal("Param/Value/lib_IGHS_35064B52"));
        TimerPause(libIGHS_gv_shuffleSettings.lv_heroPickTimer, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libIGHS_gt_DEBUGPauseUnpauseShuffleTimer_Init () {
    libIGHS_gt_DEBUGPauseUnpauseShuffleTimer = TriggerCreate("libIGHS_gt_DEBUGPauseUnpauseShuffleTimer_Func");
    TriggerAddEventChatMessage(libIGHS_gt_DEBUGPauseUnpauseShuffleTimer, c_playerAny, "shuffletimer", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Set Role Option for Player
//--------------------------------------------------------------------------------------------------
bool libIGHS_gt_DEBUGSetRoleOptionforPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_chatString;
    int lv_player;
    string lv_roleString;
    int lv_role;
    int lv_pick;
    string lv_heroCandidate;

    // Automatic Variable Declarations
    string auto3C73D8C6_val;
    const int auto684DAB45_ae = libIGHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
    const int auto684DAB45_ai = 1;

    // Variable Initialization
    lv_chatString = EventChatMessage(false);
    lv_roleString = "";
    lv_role = c_heroRoleWarrior;

    // Conditions
    if (testConds) {
        if (!((libIGHS_gv_dEBUG_ShuffleDebugEnabled == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringSub(lv_chatString, 13, 13) == "0")) {
        lv_player = StringToInt(StringSub(lv_chatString, 12, 13));
    }
    else {
        lv_player = StringToInt(StringSub(lv_chatString, 12, 12));
    }
    if ((StringSub(lv_chatString, 13, 13) == "0")) {
        lv_roleString = StringSub(lv_chatString, 15, StringLength(lv_chatString));
    }
    else {
        lv_roleString = StringSub(lv_chatString, 14, StringLength(lv_chatString));
    }
    lv_roleString = StringCase(lv_roleString, false);
    auto3C73D8C6_val = lv_roleString;
    if (auto3C73D8C6_val == "warrior") {
        lv_role = c_heroRoleWarrior;
    }
    else if (auto3C73D8C6_val == "support") {
        lv_role = c_heroRoleSupport;
    }
    else if (auto3C73D8C6_val == "specialist") {
        lv_role = c_heroRoleSpecialist;
    }
    else if (auto3C73D8C6_val == "assassin") {
        lv_role = c_heroRoleDamage;
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_IGHS_1E7DBFDD", "A", StringToText(lv_roleString));
        libIGHS_gf_ShufflePickDebugMessage(TextExpressionAssemble("Param/Expression/lib_IGHS_1E7DBFDD"));
        return true;
    }
    lv_pick = 1;
    for ( ; ( (auto684DAB45_ai >= 0 && lv_pick <= auto684DAB45_ae) || (auto684DAB45_ai < 0 && lv_pick >= auto684DAB45_ae) ) ; lv_pick += auto684DAB45_ai ) {
        lv_heroCandidate = null;
        while (((lv_heroCandidate == null) || (libIGHS_gf_GetClassofHero(lv_heroCandidate) != lv_role) || (libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[1] == lv_heroCandidate) || (libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[2] == lv_heroCandidate) || (libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[3] == lv_heroCandidate) || ((lv_heroCandidate == "LostVikings") && (libIGHS_gf_GetCountofHeroPickAppearencesonTeam("LostVikings", libGame_gf_TeamNumberOfPlayer(lv_player)) >= 1)) || ((lv_heroCandidate == "Ragnaros") && ((libIGHS_gf_GetCountofHeroPickAppearencesonTeam("Ragnaros", libGame_gv_teamOrderIndex_C) >= 1) || (libIGHS_gf_GetCountofHeroPickAppearencesonTeam("Ragnaros", libGame_gv_teamChaosIndex_C) >= 1))))) {
            lv_heroCandidate = libIGHS_gf_GetRandomShufflePickEnabledHero(false);
        }
        libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[lv_pick] = lv_heroCandidate;
    }
    libIGHS_gf_ShowPickOptionsforAllPlayers();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libIGHS_gt_DEBUGSetRoleOptionforPlayer_Init () {
    libIGHS_gt_DEBUGSetRoleOptionforPlayer = TriggerCreate("libIGHS_gt_DEBUGSetRoleOptionforPlayer_Func");
    TriggerAddEventChatMessage(libIGHS_gt_DEBUGSetRoleOptionforPlayer, c_playerAny, "roleoption", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Set Hero Picks for Player
//--------------------------------------------------------------------------------------------------
bool libIGHS_gt_DEBUGSetHeroPicksforPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_chatString;
    int lv_player;
    string lv_heroName;
    int lv_pick;
    int lv_delimiterPosition;

    // Automatic Variable Declarations
    const int auto34A22090_ae = 2;
    const int auto34A22090_ai = 1;

    // Variable Initialization
    lv_chatString = EventChatMessage(false);
    lv_heroName = "";

    // Conditions
    if (testConds) {
        if (!((libIGHS_gv_dEBUG_ShuffleDebugEnabled == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringSub(lv_chatString, 13, 13) == "0")) {
        lv_player = StringToInt(StringSub(lv_chatString, 12, 13));
        lv_chatString = StringSub(lv_chatString, 15, StringLength(lv_chatString));
    }
    else {
        lv_player = StringToInt(StringSub(lv_chatString, 12, 12));
        lv_chatString = StringSub(lv_chatString, 14, StringLength(lv_chatString));
    }
    lv_pick = 1;
    for ( ; ( (auto34A22090_ai >= 0 && lv_pick <= auto34A22090_ae) || (auto34A22090_ai < 0 && lv_pick >= auto34A22090_ae) ) ; lv_pick += auto34A22090_ai ) {
        lv_delimiterPosition = StringFind(lv_chatString, " ", c_stringNoCase);
        lv_heroName = StringSub(lv_chatString, 1, (lv_delimiterPosition - 1));
        libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[lv_pick] = (lv_heroName);
        lv_chatString = StringSub(lv_chatString, (lv_delimiterPosition + 1), StringLength(lv_chatString));
    }
    libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[3] = (lv_chatString);
    libIGHS_gf_ShowPickOptionsforAllPlayers();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libIGHS_gt_DEBUGSetHeroPicksforPlayer_Init () {
    libIGHS_gt_DEBUGSetHeroPicksforPlayer = TriggerCreate("libIGHS_gt_DEBUGSetHeroPicksforPlayer_Func");
    TriggerAddEventChatMessage(libIGHS_gt_DEBUGSetHeroPicksforPlayer, c_playerAny, "herooption", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - 100Picks
//--------------------------------------------------------------------------------------------------
bool libIGHS_gt_DEBUG100Picks_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    const int lv_debugMsgType_C = 4;
    const int lv_heroNameCountMax_C = 200;
    const string lv_outputFileName_C = "100PicksLog.txt";
    int lv_reshuffleCount;
    int lv_player;
    int lv_circle;
    int lv_name;
    string lv_heroPick;
    string[lv_heroNameCountMax_C + 1] lv_heroPicks;
    int lv_heroPickCount;
    int[lv_heroNameCountMax_C + 1] lv_heroAppearences;
    bool lv_heroAlreadyPicked;

    // Automatic Variable Declarations
    int auto583E98A7_n;
    int auto583E98A7_i;
    int auto40A5BD7E_val;
    const int auto7EB07017_ae = libCore_gv_bALMaxPlayers;
    const int auto7EB07017_ai = 1;
    const int autoC6926C6A_ae = libIGHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
    const int autoC6926C6A_ai = 1;
    int auto6B4795C9_ae;
    const int auto6B4795C9_ai = 1;
    int auto8ACA9DBB_ae;
    const int auto8ACA9DBB_ai = 1;

    // Variable Initialization
    lv_reshuffleCount = StringToInt(StringSub(EventChatMessage(false), 1, (StringFind(EventChatMessage(false), "picks", c_stringNoCase) - 1)));
    for (init_i = 0; init_i <= lv_heroNameCountMax_C; init_i += 1) {
        lv_heroAppearences[init_i] = 1;
    }

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libIGHS_gv_dEBUG_ShuffleDebugEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_IGHS_A3FBE773", "A", IntToText(lv_reshuffleCount));
    libIGHS_gf_ShufflePickDebugMessage(TextExpressionAssemble("Param/Expression/lib_IGHS_A3FBE773"));
    libIGHS_gv_dEBUG_100PicksCheatUsed += 1;
    auto583E98A7_n = lv_reshuffleCount;
    for (auto583E98A7_i = 1; auto583E98A7_i <= auto583E98A7_n; auto583E98A7_i += 1) {
        libIGHS_gf_ResetAllHeroPicks();
        auto40A5BD7E_val = libIGHS_gv_shuffleSettings.lv_shufflePickMode;
        if (auto40A5BD7E_val == libIGHS_ge_ShufflePickMode_RoleLocked) {
            libIGHS_gf_PrepareHeroPicksRoleLocked();
        }
        else if (auto40A5BD7E_val == libIGHS_ge_ShufflePickMode_Unlocked) {
            libIGHS_gf_PrepareHeroPicksUnlocked();
        }
        else if (auto40A5BD7E_val == libIGHS_ge_ShufflePickMode_AllSameHero) {
            libIGHS_gf_PrepareHeroPicksAllSameHero();
        }
        else if (auto40A5BD7E_val == libIGHS_ge_ShufflePickMode_CuratedList) {
            libIGHS_gf_PrepareHeroPicksCuratedHeroList();
        }
        else {
        }
        lv_player = 1;
        for ( ; ( (auto7EB07017_ai >= 0 && lv_player <= auto7EB07017_ae) || (auto7EB07017_ai < 0 && lv_player >= auto7EB07017_ae) ) ; lv_player += auto7EB07017_ai ) {
            lv_circle = 1;
            for ( ; ( (autoC6926C6A_ai >= 0 && lv_circle <= autoC6926C6A_ae) || (autoC6926C6A_ai < 0 && lv_circle >= autoC6926C6A_ae) ) ; lv_circle += autoC6926C6A_ai ) {
                lv_heroPick = libIGHS_gv_shuffleSettings.lv_players[lv_player].lv_heroPickOptions[lv_circle];
                lv_heroAlreadyPicked = false;
                auto6B4795C9_ae = lv_heroPickCount;
                lv_name = 1;
                for ( ; ( (auto6B4795C9_ai >= 0 && lv_name <= auto6B4795C9_ae) || (auto6B4795C9_ai < 0 && lv_name >= auto6B4795C9_ae) ) ; lv_name += auto6B4795C9_ai ) {
                    if ((lv_heroPicks[lv_name] == lv_heroPick)) {
                        lv_heroAppearences[lv_name] += 1;
                        lv_heroAlreadyPicked = true;
                        break;
                    }

                }
                if ((lv_heroAlreadyPicked == false)) {
                    lv_heroPickCount += 1;
                    lv_heroPicks[lv_heroPickCount] = lv_heroPick;
                }

            }
        }
    }
    TriggerDebugSetTypeFile(lv_debugMsgType_C, lv_outputFileName_C);
    auto8ACA9DBB_ae = lv_heroPickCount;
    lv_name = 1;
    for ( ; ( (auto8ACA9DBB_ai >= 0 && lv_name <= auto8ACA9DBB_ae) || (auto8ACA9DBB_ai < 0 && lv_name >= auto8ACA9DBB_ae) ) ; lv_name += auto8ACA9DBB_ai ) {
        TextExpressionSetToken("Param/Expression/lib_IGHS_E1FD8802", "A", IntToText(lv_heroAppearences[lv_name]));
        TextExpressionSetToken("Param/Expression/lib_IGHS_E1FD8802", "B", UnitTypeGetName((CatalogFieldValueGet(c_gameCatalogHero, lv_heroPicks[lv_name], "Unit", c_playerAny))));
        TriggerDebugOutput(lv_debugMsgType_C, TextExpressionAssemble("Param/Expression/lib_IGHS_E1FD8802"), false);
    }
    libIGHS_gf_ReshuffleHeroPicksAndShowShuffleUI();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libIGHS_gt_DEBUG100Picks_Init () {
    libIGHS_gt_DEBUG100Picks = TriggerCreate("libIGHS_gt_DEBUG100Picks_Func");
    TriggerAddEventChatMessage(libIGHS_gt_DEBUG100Picks, c_playerAny, "picks", false);
    TriggerAddEventChatMessage(libIGHS_gt_DEBUG100Picks, c_playerAny, "Picks", false);
}

void libIGHS_InitTriggers () {
    libIGHS_gt_MapInitializationSetHeroesCallback_Init();
    libIGHS_gt_ShufflePickHeroSelectionCallback_Init();
    libIGHS_gt_PlayerClicksaShuffleUIButton_Init();
    libIGHS_gt_HeroPickCountdownTimerExpires_Init();
    libIGHS_gt_DEBUGEnableDebugMode_Init();
    libIGHS_gt_DEBUGInitUnlockedPick_Init();
    libIGHS_gt_DEBUGInitRoleLockedPick_Init();
    libIGHS_gt_DEBUGInitAllSameHeroPick_Init();
    libIGHS_gt_DEBUGInitCuratedList_Init();
    libIGHS_gt_DEBUGCurateHeroesforDebugging_Init();
    libIGHS_gt_DEBUGPauseUnpauseShuffleTimer_Init();
    libIGHS_gt_DEBUGSetRoleOptionforPlayer_Init();
    libIGHS_gt_DEBUGSetHeroPicksforPlayer_Init();
    libIGHS_gt_DEBUG100Picks_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libIGHS_InitLib_completed = false;

void libIGHS_InitLib () {
    if (libIGHS_InitLib_completed) {
        return;
    }

    libIGHS_InitLib_completed = true;

    libIGHS_InitLibraries();
    libIGHS_InitVariables();
    libIGHS_InitTriggers();
}

