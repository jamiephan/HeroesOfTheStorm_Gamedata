include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/MapMechanicsLib"
include "TriggerLibs/UILib"
include "TriggerLibs/StartingExperienceLib"

include "LibDNCM_h"

//--------------------------------------------------------------------------------------------------
// Library: Day Night Cycle Mod
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libDNCM_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libMapM_InitVariables();
    libUIUI_InitVariables();
    libStEx_InitVariables();
}

// Variable Initialization
bool libDNCM_InitVariables_completed = false;

void libDNCM_InitVariables () {
    if (libDNCM_InitVariables_completed) {
        return;
    }

    libDNCM_InitVariables_completed = true;

    libDNCM_gv_weatherPanel.lv_mainPanel = c_invalidDialogControlId;
    libDNCM_gv_weatherPanel.lv_weatherFrame = c_invalidDialogControlId;
    libDNCM_gv_weatherPanel.lv_rainOnFrame = c_invalidDialogControlId;
    libDNCM_gv_weatherPanel.lv_rainOffFrame = c_invalidDialogControlId;
    libDNCM_gv_weatherPanel.lv_snowOnFrame = c_invalidDialogControlId;
    libDNCM_gv_weatherPanel.lv_snowOffFrame = c_invalidDialogControlId;
    libDNCM_gv_weatherPanel.lv_fogOnFrame = c_invalidDialogControlId;
    libDNCM_gv_weatherPanel.lv_fogOffFrame = c_invalidDialogControlId;
    libDNCM_gv_weatherPanel.lv_weatherTimerLabel = c_invalidDialogControlId;
    libDNCM_gv_weatherWeatherUnits = UnitGroupEmpty();
    libDNCM_gv_weatherType = libDNCM_ge_WeatherTypes_NoWeather;
    libDNCM_gv_weatherTimer = TimerCreate();
    libDNCM_gv_weatherTime = 120.0;
    libDNCM_gv_weatherTime2 = 240.0;
    libDNCM_gv_weatherInitialTimer = TimerCreate();
    libDNCM_gv_weatherInitialTime = 6.0;
    libDNCM_gv_weatherWeatherInactive = true;
    libDNCM_gv_weatherActiveAtStart = true;
    libDNCM_gv_weatherMapBasedWeather = true;
    libDNCM_gv_weatherSystemFirstRain = true;
    libDNCM_gv_weatherSystemLightningTimer = TimerCreate();
    libDNCM_gv_weatherSystemLightningTimerDuration = 20.0;
    libDNCM_gv_dEBUGDayNightCycleCycleTimer = TimerCreate();
    libDNCM_gv_dEBUGDayNightCycleTime = 120.0;
    libDNCM_gv_dEBUGDayNightCycleDayTimeModifier = 60.0;
    libDNCM_gv_dEBUGDayNightCycleIsDayTime = true;
}

// Presets
// Functions
void libDNCM_gf_WeatherUIShowHidePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_mainPanel, PlayerGroupAll(), lp_showHide);
}

void libDNCM_gf_WeatherUISetMode (int lp_mode) {
    // Automatic Variable Declarations
    int auto85D04E87_val;

    // Implementation
    if ((libDNCM_gv_weatherUIFailedInitialization == true)) {
        return ;
    }

    auto85D04E87_val = lp_mode;
    if (auto85D04E87_val == libDNCM_ge_WeatherUIModes_Idle) {
        libDNCM_gf_WeatherUIShowHidePanel(false);
    }
    else if (auto85D04E87_val == libDNCM_ge_WeatherUIModes_RainOn) {
        libDNCM_gf_WeatherUIShowHidePanel(true);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_rainOnFrame, PlayerGroupAll(), true);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_rainOffFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_fogOnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_fogOffFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_snowOnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_snowOffFrame, PlayerGroupAll(), false);
    }
    else if (auto85D04E87_val == libDNCM_ge_WeatherUIModes_RainOff) {
        libDNCM_gf_WeatherUIShowHidePanel(true);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_rainOnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_rainOffFrame, PlayerGroupAll(), true);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_fogOnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_fogOffFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_snowOnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_snowOffFrame, PlayerGroupAll(), false);
    }
    else if (auto85D04E87_val == libDNCM_ge_WeatherUIModes_SnowOn) {
        libDNCM_gf_WeatherUIShowHidePanel(true);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_rainOnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_rainOffFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_snowOnFrame, PlayerGroupAll(), true);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_snowOffFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_fogOnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_fogOffFrame, PlayerGroupAll(), false);
    }
    else if (auto85D04E87_val == libDNCM_ge_WeatherUIModes_SnowOff) {
        libDNCM_gf_WeatherUIShowHidePanel(true);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_rainOnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_rainOffFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_snowOnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_snowOffFrame, PlayerGroupAll(), true);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_fogOnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_fogOffFrame, PlayerGroupAll(), false);
    }
    else if (auto85D04E87_val == libDNCM_ge_WeatherUIModes_FogOn) {
        libDNCM_gf_WeatherUIShowHidePanel(true);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_rainOnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_rainOffFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_snowOnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_snowOffFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_fogOnFrame, PlayerGroupAll(), true);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_fogOffFrame, PlayerGroupAll(), false);
    }
    else if (auto85D04E87_val == libDNCM_ge_WeatherUIModes_FogOff) {
        libDNCM_gf_WeatherUIShowHidePanel(true);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_rainOnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_rainOffFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_snowOnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_snowOffFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_fogOnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libDNCM_gv_weatherPanel.lv_fogOffFrame, PlayerGroupAll(), true);
    }
    else {
    }
}

void libDNCM_gf_WeatherUIInit (int lp_parentPanel) {
    int init_i;

    // Variable Declarations
    int lv_p;
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    playergroup auto6618990D_g;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    DialogControlCreateInPanelFromTemplate(lp_parentPanel, c_triggerControlTypePanel, "Weather/WeatherFrame");
    if ((DialogControlLastCreated() == c_invalidDialogControlId)) {
        libDNCM_gv_weatherUIFailedInitialization = true;
        return ;
    }

    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libDNCM_gv_weatherPanel.lv_mainPanel = DialogControlLastCreated();
    auto6618990D_g = PlayerGroupAll();
    lv_p = -1;
    while (true) {
        	lv_p = PlayerGroupNextPlayer(auto6618990D_g, lv_p);
        	if (lv_p<0) { break; }
        	if ((PlayerGroupHasPlayer(libCore_gv_activeHumanPlayers, lv_p) == false)) {
            DialogControlSetPosition(libDNCM_gv_weatherPanel.lv_mainPanel, PlayerGroupSingle(lv_p), c_anchorTop, 0, 178);
        }

    }
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("RainOnFrame"));
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libDNCM_gv_weatherPanel.lv_rainOnFrame = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("RainOffFrame"));
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libDNCM_gv_weatherPanel.lv_rainOffFrame = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("FogOnFrame"));
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libDNCM_gv_weatherPanel.lv_fogOnFrame = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("FogOffFrame"));
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libDNCM_gv_weatherPanel.lv_fogOffFrame = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("SnowOnFrame"));
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libDNCM_gv_weatherPanel.lv_snowOnFrame = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("SnowOffFrame"));
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libDNCM_gv_weatherPanel.lv_snowOffFrame = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
}

void libDNCM_gf_InitializeWeatherSystem () {
    // Variable Declarations
    point lv_mapTopRight;
    point lv_mapBottomLeft;
    fixed lv_maxHeight;
    fixed lv_maxWidth;
    fixed lv_height;
    fixed lv_width;
    fixed lv_widthIncrement;
    fixed lv_heightIncrement;
    fixed lv_widthOffset;
    fixed lv_heightOffset;

    // Automatic Variable Declarations
    fixed auto32D6F339_ae;
    fixed auto32D6F339_ai;
    fixed auto142C7B58_ae;
    fixed auto142C7B58_ai;

    // Variable Initialization
    lv_mapTopRight = RegionGetBoundsMax(RegionEntireMap());
    lv_mapBottomLeft = RegionGetBoundsMin(RegionEntireMap());
    lv_maxHeight = PointGetY(lv_mapTopRight);
    lv_maxWidth = PointGetX(lv_mapTopRight);
    lv_height = libNtve_gf_HeightOfRegion(RegionEntireMap());
    lv_width = libNtve_gf_WidthOfRegion(RegionEntireMap());
    lv_widthOffset = 12.0;
    lv_heightOffset = 16.0;

    // Implementation
    libDNCM_gv_weatherSystemInitialized = true;
    auto32D6F339_ae = lv_maxHeight;
    auto32D6F339_ai = lv_heightOffset;
    lv_heightIncrement = 0.0;
    for ( ; ( (auto32D6F339_ai >= 0 && lv_heightIncrement <= auto32D6F339_ae) || (auto32D6F339_ai < 0 && lv_heightIncrement >= auto32D6F339_ae) ) ; lv_heightIncrement += auto32D6F339_ai ) {
        if ((lv_heightIncrement < lv_maxHeight)) {
            auto142C7B58_ae = lv_maxWidth;
            auto142C7B58_ai = lv_widthOffset;
            lv_widthIncrement = 12.0;
            for ( ; ( (auto142C7B58_ai >= 0 && lv_widthIncrement <= auto142C7B58_ae) || (auto142C7B58_ai < 0 && lv_widthIncrement >= auto142C7B58_ae) ) ; lv_widthIncrement += auto142C7B58_ai ) {
                if ((lv_widthIncrement < lv_maxWidth)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WeatherUnit", c_unitCreateIgnorePlacement, 0, Point(lv_widthIncrement, lv_heightIncrement), null);
                    UnitGroupAdd(libDNCM_gv_weatherWeatherUnits, UnitLastCreated());
                }
                else {
                    break;
                }
            }
        }
        else {
            break;
        }
    }
}

void libDNCM_gf_WeatherDecideWeatherType (bool lp_mapBased) {
    // Variable Declarations
    string lv_weatherName;
    int lv_random;

    // Automatic Variable Declarations
    int auto6A5F7A88_val;

    // Variable Initialization
    lv_weatherName = "";

    // Implementation
    if ((lp_mapBased == true)) {
        if (((libCore_gv_mAPMapStringID == "HauntedWoods") || (libCore_gv_mAPMapStringID == "ControlPoints") || (libCore_gv_mAPMapStringID == "Warhead Junction") || (libCore_gv_mAPMapStringID == "BraxisHoldout") || (libCore_gv_mAPMapStringID == "DragonShire") || (libCore_gv_mAPMapStringID == "BlackheartsBay"))) {
            libDNCM_gv_weatherType = libDNCM_ge_WeatherTypes_Rain;
            lv_weatherName = "Rain";
            return ;
        }

        if (((libCore_gv_mAPMapStringID == "CursedHollow") || (libCore_gv_mAPMapStringID == "CursedHollowSandbox") || (libCore_gv_mAPMapStringID == "Shrines") || (libCore_gv_mAPMapStringID == "Volskaya") || (libCore_gv_mAPMapStringID == "AlteracPass"))) {
            libDNCM_gv_weatherType = libDNCM_ge_WeatherTypes_Snow;
            lv_weatherName = "Snow";
            return ;
        }

        if (((libCore_gv_mAPMapStringID == "Crypts") || (libCore_gv_mAPMapStringID == "BattlefieldOfEternity") || (libCore_gv_mAPMapStringID == "Hanamura") || (libCore_gv_mAPMapStringID == "TowersOfDoom") || (libCore_gv_mAPMapStringID == "HauntedMines"))) {
            libDNCM_gv_weatherType = libDNCM_ge_WeatherTypes_Fog;
            lv_weatherName = "Fog";
            return ;
        }

    }

    lv_random = RandomInt(1, 3);
    if ((libDNCM_gv_weatherType == libDNCM_ge_WeatherTypes_NoWeather)) {
        auto6A5F7A88_val = lv_random;
        if (auto6A5F7A88_val == 1) {
            libDNCM_gv_weatherType = libDNCM_ge_WeatherTypes_Rain;
            lv_weatherName = "Rain";
        }
        else if (auto6A5F7A88_val == 2) {
            libDNCM_gv_weatherType = libDNCM_ge_WeatherTypes_Snow;
            lv_weatherName = "Snow";
        }
        else if (auto6A5F7A88_val == 3) {
            libDNCM_gv_weatherType = libDNCM_ge_WeatherTypes_Fog;
            lv_weatherName = "Fog";
        }
        else {
        }
        return ;
    }

}

void libDNCM_gf_WeatherActivateWeather (bool lp_startNow) {
    // Automatic Variable Declarations
    bool auto90A43D62_val;

    // Implementation
    auto90A43D62_val = lp_startNow;
    if (auto90A43D62_val == true) {
        libDNCM_gf_EnableDisableWeather();
    }
    else if (auto90A43D62_val == false) {
        TimerStart(libDNCM_gv_weatherTimer, (libDNCM_gv_weatherTime + RandomFixed(libCore_gv_bALOpenTheGatesDelay, libDNCM_gv_weatherTimeModifier)), false, c_timeGame);
    }
    else {
    }
}

void libDNCM_gf_EnableDisableWeather () {
    // Automatic Variable Declarations
    // Implementation
    if ((libDNCM_gv_weatherSystemEnabled == true) && (libDNCM_gv_weatherWeatherInactive == true)) {
        libDNCM_gf_StartWeather(libDNCM_gv_weatherType);
        libDNCM_gv_weatherWeatherActive = true;
        libDNCM_gv_weatherWeatherInactive = false;
        TimerStart(libDNCM_gv_weatherTimer, libDNCM_gv_weatherTime, false, c_timeGame);
    }
    else {
        if ((libDNCM_gv_weatherSystemEnabled == true) && (libDNCM_gv_weatherWeatherActive == true)) {
            libDNCM_gf_StopWeather(libDNCM_gv_weatherType);
            libDNCM_gv_weatherWeatherActive = false;
            libDNCM_gv_weatherWeatherInactive = true;
            TimerStart(libDNCM_gv_weatherTimer, libDNCM_gv_weatherTime2, false, c_timeGame);
        }

    }
}

void libDNCM_gf_StartWeather (int lp_weatherType) {
    // Variable Declarations
    point lv_mapTopRight;
    point lv_mapBottomLeft;
    fixed lv_maxHeight;
    fixed lv_maxWidth;
    fixed lv_height;
    fixed lv_width;
    fixed lv_widthIncrement;
    fixed lv_heightIncrement;
    fixed lv_widthOffset;
    fixed lv_heightOffset;

    // Automatic Variable Declarations
    int auto97EA868C_val;
    unitgroup auto73F8BF48_g;
    int auto73F8BF48_u;
    unit auto73F8BF48_var;
    unitgroup autoEB822BFF_g;
    int autoEB822BFF_u;
    unit autoEB822BFF_var;
    unitgroup auto41A01306_g;
    int auto41A01306_u;
    unit auto41A01306_var;
    unitgroup autoED13B606_g;
    int autoED13B606_u;
    unit autoED13B606_var;
    unitgroup auto47410560_g;
    int auto47410560_u;
    unit auto47410560_var;
    unitgroup autoCD382327_g;
    int autoCD382327_u;
    unit autoCD382327_var;

    // Variable Initialization
    lv_mapTopRight = RegionGetBoundsMax(RegionEntireMap());
    lv_mapBottomLeft = RegionGetBoundsMin(RegionEntireMap());
    lv_maxHeight = PointGetY(lv_mapTopRight);
    lv_maxWidth = PointGetX(lv_mapTopRight);
    lv_height = libNtve_gf_HeightOfRegion(RegionEntireMap());
    lv_width = libNtve_gf_WidthOfRegion(RegionEntireMap());
    lv_widthOffset = 12.0;
    lv_heightOffset = 16.0;

    // Implementation
    if ((libDNCM_gv_weatherSystemInitialized == true)) {
        libNtve_gf_StopTimer(libDNCM_gv_weatherSystemLightningTimer);
        auto97EA868C_val = lp_weatherType;
        if (auto97EA868C_val == libDNCM_ge_WeatherTypes_Rain) {
            libDNCM_gv_weatherSystemRainActive = true;
            libDNCM_gf_WeatherUISetMode(libDNCM_ge_WeatherUIModes_RainOn);
            if ((libDNCM_gv_weatherSystemFirstRain == true)) {
                TimerStart(libDNCM_gv_weatherSystemLightningTimer, 55.0, false, c_timeGame);
                libDNCM_gv_weatherSystemFirstRain = false;
            }
            else {
                TimerStart(libDNCM_gv_weatherSystemLightningTimer, (libDNCM_gv_weatherSystemLightningTimerDuration + RandomFixed(5.0, 15.0)), false, c_timeGame);
            }
            auto73F8BF48_g = libDNCM_gv_weatherWeatherUnits;
            auto73F8BF48_u = UnitGroupCount(auto73F8BF48_g, c_unitCountAll);
            for (;; auto73F8BF48_u -= 1) {
                auto73F8BF48_var = UnitGroupUnitFromEnd(auto73F8BF48_g, auto73F8BF48_u);
                if (auto73F8BF48_var == null) { break; }
                libNtve_gf_SendActorMessageToUnit(auto73F8BF48_var, "Signal Rain");
                libNtve_gf_SendActorMessageToUnit(auto73F8BF48_var, "Signal StartRain");
            }
        }
        else if (auto97EA868C_val == libDNCM_ge_WeatherTypes_Snow) {
            libDNCM_gv_weatherSystemSnowActive = true;
            libDNCM_gf_WeatherUISetMode(libDNCM_ge_WeatherUIModes_SnowOn);
            autoEB822BFF_g = libDNCM_gv_weatherWeatherUnits;
            autoEB822BFF_u = UnitGroupCount(autoEB822BFF_g, c_unitCountAll);
            for (;; autoEB822BFF_u -= 1) {
                autoEB822BFF_var = UnitGroupUnitFromEnd(autoEB822BFF_g, autoEB822BFF_u);
                if (autoEB822BFF_var == null) { break; }
                libNtve_gf_SendActorMessageToUnit(autoEB822BFF_var, "Signal Snow");
                libNtve_gf_SendActorMessageToUnit(autoEB822BFF_var, "Signal StartSnow");
            }
            libDNCM_gf_WeatherSystemGrantRemoveSnowBuff(true);
        }
        else if (auto97EA868C_val == libDNCM_ge_WeatherTypes_Fog) {
            libDNCM_gv_weatherSystemFogActive = true;
            libDNCM_gf_WeatherUISetMode(libDNCM_ge_WeatherUIModes_FogOn);
            libDNCM_gf_WeatherSystemEnableDisableFogEffects(true);
            auto41A01306_g = libDNCM_gv_weatherWeatherUnits;
            auto41A01306_u = UnitGroupCount(auto41A01306_g, c_unitCountAll);
            for (;; auto41A01306_u -= 1) {
                auto41A01306_var = UnitGroupUnitFromEnd(auto41A01306_g, auto41A01306_u);
                if (auto41A01306_var == null) { break; }
                libNtve_gf_SendActorMessageToUnit(auto41A01306_var, "Signal Fog");
                libNtve_gf_SendActorMessageToUnit(auto41A01306_var, "Signal StartFog");
            }
        }
        else if (auto97EA868C_val == libDNCM_ge_WeatherTypes_Sandstorm) {
            libDNCM_gv_weatherSystemSandActive = true;
            autoED13B606_g = libDNCM_gv_weatherWeatherUnits;
            autoED13B606_u = UnitGroupCount(autoED13B606_g, c_unitCountAll);
            for (;; autoED13B606_u -= 1) {
                autoED13B606_var = UnitGroupUnitFromEnd(autoED13B606_g, autoED13B606_u);
                if (autoED13B606_var == null) { break; }
                libNtve_gf_SendActorMessageToUnit(autoED13B606_var, "Signal Sand");
                libNtve_gf_SendActorMessageToUnit(autoED13B606_var, "Signal StartSand");
            }
        }
        else if (auto97EA868C_val == libDNCM_ge_WeatherTypes_Sun) {
            libDNCM_gv_weatherSystemSunActive = true;
            auto47410560_g = libDNCM_gv_weatherWeatherUnits;
            auto47410560_u = UnitGroupCount(auto47410560_g, c_unitCountAll);
            for (;; auto47410560_u -= 1) {
                auto47410560_var = UnitGroupUnitFromEnd(auto47410560_g, auto47410560_u);
                if (auto47410560_var == null) { break; }
                libNtve_gf_SendActorMessageToUnit(auto47410560_var, "Signal Sun");
                libNtve_gf_SendActorMessageToUnit(auto47410560_var, "Signal StartSun");
            }
        }
        else {
        }
        autoCD382327_g = libDNCM_gv_weatherWeatherUnits;
        autoCD382327_u = UnitGroupCount(autoCD382327_g, c_unitCountAll);
        for (;; autoCD382327_u -= 1) {
            autoCD382327_var = UnitGroupUnitFromEnd(autoCD382327_g, autoCD382327_u);
            if (autoCD382327_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(autoCD382327_var, "StatusSet WeatherEnabled 1");
        }
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_DNCM_211497F4"), true);
    }
}

void libDNCM_gf_StopWeather (int lp_weatherType) {
    // Variable Declarations
    point lv_mapTopRight;
    point lv_mapBottomLeft;
    fixed lv_maxHeight;
    fixed lv_maxWidth;
    fixed lv_height;
    fixed lv_width;
    fixed lv_widthIncrement;
    fixed lv_heightIncrement;
    fixed lv_widthOffset;
    fixed lv_heightOffset;

    // Automatic Variable Declarations
    int auto82C4F2B3_val;
    unitgroup auto24F26F4A_g;
    int auto24F26F4A_u;
    unit auto24F26F4A_var;
    unitgroup autoB29B0218_g;
    int autoB29B0218_u;
    unit autoB29B0218_var;
    unitgroup auto4FD14349_g;
    int auto4FD14349_u;
    unit auto4FD14349_var;
    unitgroup auto2060A137_g;
    int auto2060A137_u;
    unit auto2060A137_var;
    unitgroup autoDA1C2087_g;
    int autoDA1C2087_u;
    unit autoDA1C2087_var;

    // Variable Initialization
    lv_mapTopRight = RegionGetBoundsMax(RegionEntireMap());
    lv_mapBottomLeft = RegionGetBoundsMin(RegionEntireMap());
    lv_maxHeight = PointGetY(lv_mapTopRight);
    lv_maxWidth = PointGetX(lv_mapTopRight);
    lv_height = libNtve_gf_HeightOfRegion(RegionEntireMap());
    lv_width = libNtve_gf_WidthOfRegion(RegionEntireMap());
    lv_widthOffset = 12.0;
    lv_heightOffset = 16.0;

    // Implementation
    if ((libDNCM_gv_weatherSystemInitialized == true)) {
        libNtve_gf_StopTimer(libDNCM_gv_weatherSystemLightningTimer);
        auto82C4F2B3_val = lp_weatherType;
        if (auto82C4F2B3_val == libDNCM_ge_WeatherTypes_Rain) {
            libDNCM_gv_weatherSystemRainActive = false;
            libDNCM_gf_WeatherUISetMode(libDNCM_ge_WeatherUIModes_RainOff);
            libNtve_gf_StopTimer(libDNCM_gv_weatherSystemLightningTimer);
            auto24F26F4A_g = libDNCM_gv_weatherWeatherUnits;
            auto24F26F4A_u = UnitGroupCount(auto24F26F4A_g, c_unitCountAll);
            for (;; auto24F26F4A_u -= 1) {
                auto24F26F4A_var = UnitGroupUnitFromEnd(auto24F26F4A_g, auto24F26F4A_u);
                if (auto24F26F4A_var == null) { break; }
                libNtve_gf_SendActorMessageToUnit(auto24F26F4A_var, "Signal StopRain");
            }
        }
        else if (auto82C4F2B3_val == libDNCM_ge_WeatherTypes_Snow) {
            libDNCM_gv_weatherSystemSnowActive = false;
            libDNCM_gf_WeatherUISetMode(libDNCM_ge_WeatherUIModes_SnowOff);
            libDNCM_gf_WeatherSystemGrantRemoveSnowBuff(false);
            autoB29B0218_g = libDNCM_gv_weatherWeatherUnits;
            autoB29B0218_u = UnitGroupCount(autoB29B0218_g, c_unitCountAll);
            for (;; autoB29B0218_u -= 1) {
                autoB29B0218_var = UnitGroupUnitFromEnd(autoB29B0218_g, autoB29B0218_u);
                if (autoB29B0218_var == null) { break; }
                libNtve_gf_SendActorMessageToUnit(autoB29B0218_var, "Signal StopSnow");
            }
        }
        else if (auto82C4F2B3_val == libDNCM_ge_WeatherTypes_Sandstorm) {
            libDNCM_gv_weatherSystemSandActive = false;
            auto4FD14349_g = libDNCM_gv_weatherWeatherUnits;
            auto4FD14349_u = UnitGroupCount(auto4FD14349_g, c_unitCountAll);
            for (;; auto4FD14349_u -= 1) {
                auto4FD14349_var = UnitGroupUnitFromEnd(auto4FD14349_g, auto4FD14349_u);
                if (auto4FD14349_var == null) { break; }
                libNtve_gf_SendActorMessageToUnit(auto4FD14349_var, "Signal StopSand");
            }
        }
        else if (auto82C4F2B3_val == libDNCM_ge_WeatherTypes_Fog) {
            libDNCM_gv_weatherSystemFogActive = false;
            libDNCM_gf_WeatherUISetMode(libDNCM_ge_WeatherUIModes_FogOff);
            libDNCM_gf_WeatherSystemEnableDisableFogEffects(false);
            auto2060A137_g = libDNCM_gv_weatherWeatherUnits;
            auto2060A137_u = UnitGroupCount(auto2060A137_g, c_unitCountAll);
            for (;; auto2060A137_u -= 1) {
                auto2060A137_var = UnitGroupUnitFromEnd(auto2060A137_g, auto2060A137_u);
                if (auto2060A137_var == null) { break; }
                libNtve_gf_SendActorMessageToUnit(auto2060A137_var, "Signal StopFog");
            }
        }
        else if (auto82C4F2B3_val == libDNCM_ge_WeatherTypes_Sun) {
            libDNCM_gv_weatherSystemSunActive = false;
            autoDA1C2087_g = libDNCM_gv_weatherWeatherUnits;
            autoDA1C2087_u = UnitGroupCount(autoDA1C2087_g, c_unitCountAll);
            for (;; autoDA1C2087_u -= 1) {
                autoDA1C2087_var = UnitGroupUnitFromEnd(autoDA1C2087_g, autoDA1C2087_u);
                if (autoDA1C2087_var == null) { break; }
                libNtve_gf_SendActorMessageToUnit(autoDA1C2087_var, "Signal StopSun");
            }
        }
        else {
        }
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_DNCM_E033A4EA"), true);
    }
}

point libDNCM_gf_WeatherSystemFindPlayerConflict () {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itPoint;
    point[51] lv_initialPoints;
    int lv_pointIncrement;
    point[51] lv_majorPoints;
    int lv_majorPointIncrement;
    fixed lv_conflictRadius;
    unit lv_currentHero;
    unit lv_currentNearbyEnemy;
    fixed lv_currentX;
    fixed lv_currentY;
    point lv_finalPoint;
    int lv_conflictPointWeight;
    int lv_randomizer;

    // Automatic Variable Declarations
    const int auto4E98A8EF_ae = libCore_gv_bALMaxPlayers;
    const int auto4E98A8EF_ai = 1;
    unitgroup auto6A0C3A9C_g;
    int auto6A0C3A9C_u;
    unit auto6A0C3A9C_var;
    unitgroup auto296DDA8F_g;
    int auto296DDA8F_u;
    unit auto296DDA8F_var;
    int auto84AE47DE_ae;
    const int auto84AE47DE_ai = 1;
    unitgroup auto888BBE14_g;
    int auto888BBE14_u;
    unit auto888BBE14_var;
    unitgroup autoCD567BFC_g;
    int autoCD567BFC_u;
    unit autoCD567BFC_var;

    // Variable Initialization
    lv_pointIncrement = 1;
    lv_majorPointIncrement = 1;
    lv_conflictRadius = 15.0;

    // Implementation
    lv_itPlayer = 1;
    for ( ; ( (auto4E98A8EF_ai >= 0 && lv_itPlayer <= auto4E98A8EF_ae) || (auto4E98A8EF_ai < 0 && lv_itPlayer >= auto4E98A8EF_ae) ) ; lv_itPlayer += auto4E98A8EF_ai ) {
        auto6A0C3A9C_g = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
        auto6A0C3A9C_u = UnitGroupCount(auto6A0C3A9C_g, c_unitCountAll);
        for (;; auto6A0C3A9C_u -= 1) {
            auto6A0C3A9C_var = UnitGroupUnitFromEnd(auto6A0C3A9C_g, auto6A0C3A9C_u);
            if (auto6A0C3A9C_var == null) { break; }
            lv_currentHero = auto6A0C3A9C_var;
            auto296DDA8F_g = UnitGroupAlliance(UnitGetOwner(lv_currentHero), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_currentHero), lv_conflictRadius), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto296DDA8F_u = UnitGroupCount(auto296DDA8F_g, c_unitCountAll);
            for (;; auto296DDA8F_u -= 1) {
                auto296DDA8F_var = UnitGroupUnitFromEnd(auto296DDA8F_g, auto296DDA8F_u);
                if (auto296DDA8F_var == null) { break; }
                lv_currentNearbyEnemy = auto296DDA8F_var;
                lv_currentX = ((PointGetX(UnitGetPosition(lv_currentHero)) + PointGetX(UnitGetPosition(lv_currentNearbyEnemy))) / 2.0);
                lv_currentY = ((PointGetY(UnitGetPosition(lv_currentHero)) + PointGetY(UnitGetPosition(lv_currentNearbyEnemy))) / 2.0);
                lv_initialPoints[lv_pointIncrement] = Point(lv_currentX, lv_currentY);
                lv_pointIncrement += 1;
            }
        }
    }
    auto84AE47DE_ae = lv_pointIncrement;
    lv_itPoint = 1;
    for ( ; ( (auto84AE47DE_ai >= 0 && lv_itPoint <= auto84AE47DE_ae) || (auto84AE47DE_ai < 0 && lv_itPoint >= auto84AE47DE_ae) ) ; lv_itPoint += auto84AE47DE_ai ) {
        auto888BBE14_g = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamChaos, c_unitAllianceEnemy, RegionCircle(lv_initialPoints[lv_itPoint], lv_conflictRadius), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto888BBE14_u = UnitGroupCount(auto888BBE14_g, c_unitCountAll);
        for (;; auto888BBE14_u -= 1) {
            auto888BBE14_var = UnitGroupUnitFromEnd(auto888BBE14_g, auto888BBE14_u);
            if (auto888BBE14_var == null) { break; }
            lv_conflictPointWeight += 1;
        }
        autoCD567BFC_g = UnitGroupAlliance(libCore_gv_cOMPUTER_TeamOrder, c_unitAllianceEnemy, RegionCircle(lv_initialPoints[lv_itPoint], lv_conflictRadius), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoCD567BFC_u = UnitGroupCount(autoCD567BFC_g, c_unitCountAll);
        for (;; autoCD567BFC_u -= 1) {
            autoCD567BFC_var = UnitGroupUnitFromEnd(autoCD567BFC_g, autoCD567BFC_u);
            if (autoCD567BFC_var == null) { break; }
            lv_conflictPointWeight -= 1;
        }
        if ((lv_conflictPointWeight == 0)) {
            lv_majorPoints[lv_itPoint] = lv_initialPoints[lv_itPoint];
            lv_majorPointIncrement += 1;
        }

    }
    if ((lv_majorPointIncrement > 1)) {
        lv_randomizer = RandomInt(1, lv_majorPointIncrement);
        lv_finalPoint = lv_majorPoints[lv_randomizer];
    }
    else {
        if ((lv_pointIncrement > 1)) {
            lv_randomizer = RandomInt(1, lv_pointIncrement);
            lv_finalPoint = lv_initialPoints[lv_randomizer];
        }
        else {
            lv_finalPoint = RegionRandomPoint(RegionEntireMap());
        }
    }
    return lv_finalPoint;
}

trigger auto_libDNCM_gf_WeatherSystemCreateLightningStrikes_Trigger = null;

void libDNCM_gf_WeatherSystemCreateLightningStrikes () {
    if (auto_libDNCM_gf_WeatherSystemCreateLightningStrikes_Trigger == null) {
        auto_libDNCM_gf_WeatherSystemCreateLightningStrikes_Trigger = TriggerCreate("auto_libDNCM_gf_WeatherSystemCreateLightningStrikes_TriggerFunc");
    }

    TriggerExecute(auto_libDNCM_gf_WeatherSystemCreateLightningStrikes_Trigger, false, false);
}

bool auto_libDNCM_gf_WeatherSystemCreateLightningStrikes_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itStrikes;
    point lv_centerStrikePoint;
    point lv_randomStrikePoint;
    int lv_numberofStrikes;
    fixed lv_timeBetweenStrikes;

    // Automatic Variable Declarations
    int auto9806CC69_ae;
    const int auto9806CC69_ai = 1;

    // Variable Initialization

    // Implementation
    SoundPlayForPlayer(SoundLink("WeatherRainStormDelaySound", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    lv_centerStrikePoint = libDNCM_gf_WeatherSystemFindPlayerConflict();
    if (((PointGetX(lv_centerStrikePoint) == 0.0) && (PointGetY(lv_centerStrikePoint) == 0.0))) {
        lv_centerStrikePoint = RegionRandomPoint(RegionEntireMap());
    }

    lv_numberofStrikes = RandomInt(4, 6);
    lv_timeBetweenStrikes = RandomFixed(2.0, 4.0);
    auto9806CC69_ae = lv_numberofStrikes;
    lv_itStrikes = 1;
    for ( ; ( (auto9806CC69_ai >= 0 && lv_itStrikes <= auto9806CC69_ae) || (auto9806CC69_ai < 0 && lv_itStrikes >= auto9806CC69_ae) ) ; lv_itStrikes += auto9806CC69_ai ) {
        lv_randomStrikePoint = RegionRandomPoint(RegionCircle(lv_centerStrikePoint, 4.0));
        PlayerCreateEffectPoint(0, "WeatherRainStormInitialDelayPersistent", lv_randomStrikePoint);
        Wait(lv_timeBetweenStrikes, c_timeGame);
        if ((RandomInt(0, 100) >= 60)) {
            SoundPlayForPlayer(SoundLink("WeatherRainStormDelaySound", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        }

        lv_timeBetweenStrikes = RandomFixed(RandomFixed(1.0, 2.0), RandomFixed(2.5, 4.0));
    }
    return true;
}

void libDNCM_gf_WeatherSystemStrikeAllPlayers () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto8EFD3FC3_ae = libCore_gv_bALMaxPlayers;
    const int auto8EFD3FC3_ai = 1;
    unitgroup auto755F713E_g;
    int auto755F713E_u;
    unit auto755F713E_var;

    // Variable Initialization

    // Implementation
    SoundPlayForPlayer(SoundLink("WeatherRainStormDelaySound", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    lv_player = 1;
    for ( ; ( (auto8EFD3FC3_ai >= 0 && lv_player <= auto8EFD3FC3_ae) || (auto8EFD3FC3_ai < 0 && lv_player >= auto8EFD3FC3_ae) ) ; lv_player += auto8EFD3FC3_ai ) {
        auto755F713E_g = libGame_gv_players[lv_player].lv_heroUnitGroup;
        auto755F713E_u = UnitGroupCount(auto755F713E_g, c_unitCountAll);
        for (;; auto755F713E_u -= 1) {
            auto755F713E_var = UnitGroupUnitFromEnd(auto755F713E_g, auto755F713E_u);
            if (auto755F713E_var == null) { break; }
            if (((UnitIsAlive(auto755F713E_var) == true) && (UnitHasBehaviorWithCategoryFlag(auto755F713E_var, c_behaviorCategorySpecialDeathState) == false) && (UnitFilterMatch(auto755F713E_var, lv_player, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterImmuneToFriendlyAbilities), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
                UnitCreateEffectUnit(auto755F713E_var, "WeatherRainStormBuffApplySet", auto755F713E_var);
            }

        }
    }
}

void libDNCM_gf_WeatherSystemGrantRemoveSnowBuff (bool lp_enableDisable) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    bool auto6C79CEC5_val;
    const int autoC4D7593B_ae = libCore_gv_bALMaxPlayers;
    const int autoC4D7593B_ai = 1;
    unitgroup auto0E49B9CC_g;
    int auto0E49B9CC_u;
    unit auto0E49B9CC_var;
    const int auto62A525D9_ae = libCore_gv_bALMaxPlayers;
    const int auto62A525D9_ai = 1;
    unitgroup auto69E6710D_g;
    int auto69E6710D_u;
    unit auto69E6710D_var;

    // Variable Initialization

    // Implementation
    auto6C79CEC5_val = lp_enableDisable;
    if (auto6C79CEC5_val == true) {
        if ((libDNCM_gv_weatherSystemSnowActive == true)) {
            lv_player = 1;
            for ( ; ( (autoC4D7593B_ai >= 0 && lv_player <= autoC4D7593B_ae) || (autoC4D7593B_ai < 0 && lv_player >= autoC4D7593B_ae) ) ; lv_player += autoC4D7593B_ai ) {
                auto0E49B9CC_g = libGame_gv_players[lv_player].lv_heroUnitGroup;
                auto0E49B9CC_u = UnitGroupCount(auto0E49B9CC_g, c_unitCountAll);
                for (;; auto0E49B9CC_u -= 1) {
                    auto0E49B9CC_var = UnitGroupUnitFromEnd(auto0E49B9CC_g, auto0E49B9CC_u);
                    if (auto0E49B9CC_var == null) { break; }
                    UnitBehaviorAdd(auto0E49B9CC_var, "WeatherSnowShieldController", auto0E49B9CC_var, 1);
                }
            }
        }

    }
    else if (auto6C79CEC5_val == false) {
        lv_player = 1;
        for ( ; ( (auto62A525D9_ai >= 0 && lv_player <= auto62A525D9_ae) || (auto62A525D9_ai < 0 && lv_player >= auto62A525D9_ae) ) ; lv_player += auto62A525D9_ai ) {
            auto69E6710D_g = libGame_gv_players[lv_player].lv_heroUnitGroup;
            auto69E6710D_u = UnitGroupCount(auto69E6710D_g, c_unitCountAll);
            for (;; auto69E6710D_u -= 1) {
                auto69E6710D_var = UnitGroupUnitFromEnd(auto69E6710D_g, auto69E6710D_u);
                if (auto69E6710D_var == null) { break; }
                UnitBehaviorRemove(auto69E6710D_var, "WeatherSnowShieldController", 1);
                UnitBehaviorRemove(auto69E6710D_var, "WeatherSnowShieldBuff", 1);
            }
        }
    }
    else {
    }
}

void libDNCM_gf_WeatherSystemEnableDisableFogEffects (bool lp_enableDisable) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    bool auto599F2CF8_val;
    const int autoC474F09E_ae = libCore_gv_bALMaxPlayers;
    const int autoC474F09E_ai = 1;
    unitgroup auto2C99CD41_g;
    int auto2C99CD41_u;
    unit auto2C99CD41_var;
    const int auto88196750_ae = libCore_gv_bALMaxPlayers;
    const int auto88196750_ai = 1;
    unitgroup autoBA871D3F_g;
    int autoBA871D3F_u;
    unit autoBA871D3F_var;

    // Variable Initialization

    // Implementation
    auto599F2CF8_val = lp_enableDisable;
    if (auto599F2CF8_val == true) {
        if ((libDNCM_gv_weatherSystemFogActive == true)) {
            lv_player = 1;
            for ( ; ( (autoC474F09E_ai >= 0 && lv_player <= autoC474F09E_ae) || (autoC474F09E_ai < 0 && lv_player >= autoC474F09E_ae) ) ; lv_player += autoC474F09E_ai ) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "NightTime", 1);
                auto2C99CD41_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, 0, (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
                auto2C99CD41_u = UnitGroupCount(auto2C99CD41_g, c_unitCountAll);
                for (;; auto2C99CD41_u -= 1) {
                    auto2C99CD41_var = UnitGroupUnitFromEnd(auto2C99CD41_g, auto2C99CD41_u);
                    if (auto2C99CD41_var == null) { break; }
                    UnitBehaviorAdd(auto2C99CD41_var, "DayNightCycleNightTimeController", auto2C99CD41_var, 1);
                }
            }
        }

    }
    else if (auto599F2CF8_val == false) {
        lv_player = 1;
        for ( ; ( (auto88196750_ai >= 0 && lv_player <= auto88196750_ae) || (auto88196750_ai < 0 && lv_player >= auto88196750_ae) ) ; lv_player += auto88196750_ai ) {
            autoBA871D3F_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, 0, (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
            autoBA871D3F_u = UnitGroupCount(autoBA871D3F_g, c_unitCountAll);
            for (;; autoBA871D3F_u -= 1) {
                autoBA871D3F_var = UnitGroupUnitFromEnd(autoBA871D3F_g, autoBA871D3F_u);
                if (autoBA871D3F_var == null) { break; }
                UnitBehaviorRemove(autoBA871D3F_var, "DayNightCycleNightStealthCloakCountdown", 1);
                UnitBehaviorRemove(autoBA871D3F_var, "DayNightCycleNightStealthCloak", 1);
                UnitBehaviorRemove(autoBA871D3F_var, "DayNightCycleNightTimeController", 1);
                UnitBehaviorRemove(autoBA871D3F_var, "DayNightCycleNightTimeVisionDebuff", 1);
                UnitBehaviorRemove(autoBA871D3F_var, "DayNightCycleNightStealthHoldFire", 1);
            }
            TechTreeUpgradeAddLevel(lv_player, "NightTime", -1);
        }
    }
    else {
    }
}

void libDNCM_gf_DEBUGDayNightCycleLightingEventStart () {
    // Automatic Variable Declarations
    string auto0E9EC192_val;

    // Implementation
    auto0E9EC192_val = libMapM_gf_PrimaryMapMechanic();
    if (auto0E9EC192_val == "InfernalShrines") {
        libGame_gf_SpecialLightingEventStart("StormHeavenNight", PlayerGroupAll(), 3.0);
        libDNCM_gv_dEBUGDayNightCycleLight = "StormHeavenNight";
    }
    else {
    }
}

void libDNCM_gf_DEBUGDayNightCycleFlipDayNight () {
    // Automatic Variable Declarations
    // Implementation
    if ((libDNCM_gv_dEBUGDayNightSystemIsSystemEnabled == true) && (libDNCM_gv_dEBUGDayNightCycleIsDayTime == true)) {
        libDNCM_gf_StartWeather(libDNCM_gv_weatherType);
        libDNCM_gv_dEBUGDayNightCycleIsNightTime = true;
        libDNCM_gv_dEBUGDayNightCycleIsDayTime = false;
        TimerStart(libDNCM_gv_dEBUGDayNightCycleCycleTimer, (libDNCM_gv_dEBUGDayNightCycleTime + RandomFixed(0.0, libDNCM_gv_dEBUGDayNightCycleDayTimeModifier)), false, c_timeGame);
    }
    else {
        if ((libDNCM_gv_dEBUGDayNightSystemIsSystemEnabled == true) && (libDNCM_gv_dEBUGDayNightCycleIsNightTime == true)) {
            libDNCM_gf_StopWeather(libDNCM_gv_weatherType);
            libDNCM_gv_dEBUGDayNightCycleIsNightTime = false;
            libDNCM_gv_dEBUGDayNightCycleIsDayTime = true;
            TimerStart(libDNCM_gv_dEBUGDayNightCycleCycleTimer, (libDNCM_gv_dEBUGDayNightCycleTime + RandomFixed(0.0, libDNCM_gv_dEBUGDayNightCycleDayTimeModifier)), false, c_timeGame);
        }

    }
}

void libDNCM_gf_DEBUGDayNightCycleEnableDisableSharedVision (bool lp_enableDisable) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    bool auto6CB61C9B_val;
    unitgroup auto43BDD176_g;
    int auto43BDD176_u;
    unit auto43BDD176_var;
    const int auto8D27E409_ae = libCore_gv_bALMaxPlayers;
    const int auto8D27E409_ai = 1;
    unitgroup autoB25F53F4_g;
    int autoB25F53F4_u;
    unit autoB25F53F4_var;
    unitgroup auto9107A341_g;
    int auto9107A341_u;
    unit auto9107A341_var;
    const int auto394AFB28_ae = libCore_gv_bALMaxPlayers;
    const int auto394AFB28_ai = 1;
    unitgroup auto9D20CD88_g;
    int auto9D20CD88_u;
    unit auto9D20CD88_var;

    // Variable Initialization

    // Implementation
    auto6CB61C9B_val = lp_enableDisable;
    if (auto6CB61C9B_val == true) {
        auto43BDD176_g = UnitGroup("KingsCore", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto43BDD176_u = UnitGroupCount(auto43BDD176_g, c_unitCountAll);
        for (;; auto43BDD176_u -= 1) {
            auto43BDD176_var = UnitGroupUnitFromEnd(auto43BDD176_g, auto43BDD176_u);
            if (auto43BDD176_var == null) { break; }
            PlayerCreateEffectUnit(UnitGetOwner(auto43BDD176_var), "DayNightCycleNightTimeSubtractVision", auto43BDD176_var);
        }
        lv_player = 1;
        for ( ; ( (auto8D27E409_ai >= 0 && lv_player <= auto8D27E409_ae) || (auto8D27E409_ai < 0 && lv_player >= auto8D27E409_ae) ) ; lv_player += auto8D27E409_ai ) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "NightTime", 1);
            autoB25F53F4_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, 0, (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
            autoB25F53F4_u = UnitGroupCount(autoB25F53F4_g, c_unitCountAll);
            for (;; autoB25F53F4_u -= 1) {
                autoB25F53F4_var = UnitGroupUnitFromEnd(autoB25F53F4_g, autoB25F53F4_u);
                if (autoB25F53F4_var == null) { break; }
                UnitBehaviorAdd(autoB25F53F4_var, "DayNightCycleNightTimeController", autoB25F53F4_var, 1);
            }
        }
    }
    else if (auto6CB61C9B_val == false) {
        auto9107A341_g = UnitGroup("KingsCore", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto9107A341_u = UnitGroupCount(auto9107A341_g, c_unitCountAll);
        for (;; auto9107A341_u -= 1) {
            auto9107A341_var = UnitGroupUnitFromEnd(auto9107A341_g, auto9107A341_u);
            if (auto9107A341_var == null) { break; }
            PlayerCreateEffectUnit(UnitGetOwner(auto9107A341_var), "DayNightCycleNightTimeAddVision", auto9107A341_var);
        }
        lv_player = 1;
        for ( ; ( (auto394AFB28_ai >= 0 && lv_player <= auto394AFB28_ae) || (auto394AFB28_ai < 0 && lv_player >= auto394AFB28_ae) ) ; lv_player += auto394AFB28_ai ) {
            auto9D20CD88_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, 0, (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
            auto9D20CD88_u = UnitGroupCount(auto9D20CD88_g, c_unitCountAll);
            for (;; auto9D20CD88_u -= 1) {
                auto9D20CD88_var = UnitGroupUnitFromEnd(auto9D20CD88_g, auto9D20CD88_u);
                if (auto9D20CD88_var == null) { break; }
                UnitBehaviorRemove(auto9D20CD88_var, "DayNightCycleNightStealthCloakCountdown", 1);
                UnitBehaviorRemove(auto9D20CD88_var, "DayNightCycleNightStealthCloak", 1);
                UnitBehaviorRemove(auto9D20CD88_var, "DayNightCycleNightTimeController", 1);
                UnitBehaviorRemove(auto9D20CD88_var, "DayNightCycleNightTimeVisionDebuff", 1);
                UnitBehaviorRemove(auto9D20CD88_var, "DayNightCycleNightStealthHoldFire", 1);
            }
            TechTreeUpgradeAddLevel(lv_player, "NightTime", -1);
        }
    }
    else {
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: PVP Trinket Activated
//--------------------------------------------------------------------------------------------------
bool libDNCM_gt_PVPTrinketActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto0098836F_g;
    int auto0098836F_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(libGame_gv_players[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_heroUnitGroup, c_unitCountAlive) > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0098836F_g = libGame_gv_players[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_heroUnitGroup;
    auto0098836F_u = UnitGroupCount(auto0098836F_g, c_unitCountAll);
    for (;; auto0098836F_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto0098836F_g, auto0098836F_u);
        if (lv_unit == null) { break; }
        UnitCreateEffectUnit(lv_unit, "GladiatorsMedallionApplyCleanse", lv_unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDNCM_gt_PVPTrinketActivated_Init () {
    libDNCM_gt_PVPTrinketActivated = TriggerCreate("libDNCM_gt_PVPTrinketActivated_Func");
    TriggerAddEventPlayerEffectUsed(libDNCM_gt_PVPTrinketActivated, c_playerAny, "GladiatorsMedallionCastSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weather - Core UI Handler
//--------------------------------------------------------------------------------------------------
bool libDNCM_gt_WeatherCoreUIHandler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    playergroup auto979D88B3_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto979D88B3_g = PlayerGroupAll();
    lv_p = -1;
    while (true) {
        	lv_p = PlayerGroupNextPlayer(auto979D88B3_g, lv_p);
        	if (lv_p<0) { break; }
        	if ((PlayerGroupHasPlayer(libCore_gv_activeHumanPlayers, lv_p) == true)) {
            DialogControlSetPosition(libDNCM_gv_weatherPanel.lv_mainPanel, PlayerGroupSingle(lv_p), c_anchorTop, 0, 128);
        }

    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDNCM_gt_WeatherCoreUIHandler_Init () {
    libDNCM_gt_WeatherCoreUIHandler = TriggerCreate("libDNCM_gt_WeatherCoreUIHandler_Func");
    TriggerAddEventPlayerEffectUsed(libDNCM_gt_WeatherCoreUIHandler, c_playerAny, "PalaceDamageResponseDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Weather - Set Weather Type
//--------------------------------------------------------------------------------------------------
bool libDNCM_gt_DEBUGWeatherSetWeatherType_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoA94DC868_val;
    int auto780CB8C2_val;
    unitgroup autoB4025171_g;
    int autoB4025171_u;
    unit autoB4025171_var;

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA94DC868_val = EventChatMessage(false);
    if (autoA94DC868_val == "-weatherrain") {
        libDNCM_gv_weatherType = libDNCM_ge_WeatherTypes_Rain;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_DNCM_2B249827"));
    }
    else if (autoA94DC868_val == "-weathersnow") {
        libDNCM_gv_weatherType = libDNCM_ge_WeatherTypes_Snow;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_DNCM_7622D131"));
    }
    else if (autoA94DC868_val == "-weathersand") {
        libDNCM_gv_weatherType = libDNCM_ge_WeatherTypes_Sandstorm;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_DNCM_4BD5EB7E"));
    }
    else if (autoA94DC868_val == "-weatherfog") {
        libDNCM_gv_weatherType = libDNCM_ge_WeatherTypes_Fog;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_DNCM_EEC3937A"));
    }
    else if (autoA94DC868_val == "-weathersun") {
        libDNCM_gv_weatherType = libDNCM_ge_WeatherTypes_Sun;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_DNCM_5C4878A2"));
    }
    else {
    }
    auto780CB8C2_val = libDNCM_gv_weatherType;
    if (auto780CB8C2_val == libDNCM_ge_WeatherTypes_Rain) {
        libStEx_gf_DisplayVOMessage(StringExternal("Param/Value/lib_DNCM_7C2B6415"), 9.0, true);
    }
    else if (auto780CB8C2_val == libDNCM_ge_WeatherTypes_Snow) {
        libStEx_gf_DisplayVOMessage(StringExternal("Param/Value/lib_DNCM_7D683CE4"), 9.0, true);
    }
    else if (auto780CB8C2_val == libDNCM_ge_WeatherTypes_Fog) {
        libStEx_gf_DisplayVOMessage(StringExternal("Param/Value/lib_DNCM_F1280756"), 9.0, true);
    }
    else if (auto780CB8C2_val == libDNCM_ge_WeatherTypes_Sandstorm) {
        libStEx_gf_DisplayVOMessage(StringExternal("Param/Value/lib_DNCM_10343FB9"), 9.0, true);
    }
    else if (auto780CB8C2_val == libDNCM_ge_WeatherTypes_Sun) {
        libStEx_gf_DisplayVOMessage(StringExternal("Param/Value/lib_DNCM_8B2AEA0E"), 9.0, true);
    }
    else {
    }
    if ((UnitGroupCount(libDNCM_gv_weatherWeatherUnits, c_unitCountAlive) > 0)) {
        autoB4025171_g = libDNCM_gv_weatherWeatherUnits;
        autoB4025171_u = UnitGroupCount(autoB4025171_g, c_unitCountAll);
        for (;; autoB4025171_u -= 1) {
            autoB4025171_var = UnitGroupUnitFromEnd(autoB4025171_g, autoB4025171_u);
            if (autoB4025171_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(autoB4025171_var, "Signal ClearWeather");
            libNtve_gf_SendActorMessageToUnit(autoB4025171_var, "StatusSet WeatherEnabled 0");
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libDNCM_gt_DEBUGWeatherSetWeatherType_Init () {
    libDNCM_gt_DEBUGWeatherSetWeatherType = TriggerCreate("libDNCM_gt_DEBUGWeatherSetWeatherType_Func");
    TriggerAddEventChatMessage(libDNCM_gt_DEBUGWeatherSetWeatherType, c_playerAny, "-weathersnow", true);
    TriggerAddEventChatMessage(libDNCM_gt_DEBUGWeatherSetWeatherType, c_playerAny, "-weatherrain", true);
    TriggerAddEventChatMessage(libDNCM_gt_DEBUGWeatherSetWeatherType, c_playerAny, "-weathersand", true);
    TriggerAddEventChatMessage(libDNCM_gt_DEBUGWeatherSetWeatherType, c_playerAny, "-weatherfog", true);
    TriggerAddEventChatMessage(libDNCM_gt_DEBUGWeatherSetWeatherType, c_playerAny, "-weathersun", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Weather - Disable Weather
//--------------------------------------------------------------------------------------------------
bool libDNCM_gt_DEBUGWeatherDisableWeather_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libDNCM_gv_weatherSystemEnabled == true) && (libDNCM_gv_weatherWeatherActive == true)) {
        libNtve_gf_StopTimer(libDNCM_gv_weatherTimer);
        libDNCM_gv_weatherSystemEnabled = false;
        libDNCM_gv_weatherWeatherActive = false;
        libDNCM_gv_weatherWeatherInactive = true;
        libDNCM_gf_StopWeather(libDNCM_gv_weatherType);
        libDNCM_gf_WeatherUISetMode(libDNCM_ge_WeatherUIModes_Idle);
    }
    else {
        libNtve_gf_StopTimer(libDNCM_gv_weatherTimer);
        libDNCM_gv_weatherSystemEnabled = false;
        libDNCM_gf_StopWeather(libDNCM_gv_weatherType);
        libDNCM_gf_WeatherUISetMode(libDNCM_ge_WeatherUIModes_Idle);
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_DNCM_DE67C428"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDNCM_gt_DEBUGWeatherDisableWeather_Init () {
    libDNCM_gt_DEBUGWeatherDisableWeather = TriggerCreate("libDNCM_gt_DEBUGWeatherDisableWeather_Func");
    TriggerAddEventChatMessage(libDNCM_gt_DEBUGWeatherDisableWeather, c_playerAny, "-stopweather", true);
    TriggerAddEventChatMessage(libDNCM_gt_DEBUGWeatherDisableWeather, c_playerAny, "-weatherstop", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Weather - Enable Weather
//--------------------------------------------------------------------------------------------------
bool libDNCM_gt_DEBUGWeatherEnableWeather_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libDNCM_gv_weatherSystemEnabled == false)) {
        TimerStart(libDNCM_gv_weatherTimer, 3.0, false, c_timeGame);
        libDNCM_gv_weatherSystemEnabled = true;
        libDNCM_gf_StopWeather(libDNCM_gv_weatherType);
        libDNCM_gv_weatherWeatherInactive = true;
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_DNCM_E168CA5B"), true);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_DNCM_3D138E04"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDNCM_gt_DEBUGWeatherEnableWeather_Init () {
    libDNCM_gt_DEBUGWeatherEnableWeather = TriggerCreate("libDNCM_gt_DEBUGWeatherEnableWeather_Func");
    TriggerAddEventChatMessage(libDNCM_gt_DEBUGWeatherEnableWeather, c_playerAny, "-startweather", true);
    TriggerAddEventChatMessage(libDNCM_gt_DEBUGWeatherEnableWeather, c_playerAny, "-weatherstart", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weather System - Rain Storm Periodic Lightning Strike
//--------------------------------------------------------------------------------------------------
bool libDNCM_gt_WeatherSystemRainStormPeriodicLightningStrike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_strikePoint;
    fixed lv_randomLowEnd;
    fixed lv_randomHighEnd;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_randomLowEnd = 5.0;
    lv_randomHighEnd = 15.0;

    // Conditions
    if (testConds) {
        if (!((libDNCM_gv_weatherSystemRainActive == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libDNCM_gv_weatherSystemLightningTimer, (libDNCM_gv_weatherSystemLightningTimerDuration + RandomFixed(lv_randomLowEnd, lv_randomHighEnd)), false, c_timeGame);
    libDNCM_gf_WeatherSystemStrikeAllPlayers();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDNCM_gt_WeatherSystemRainStormPeriodicLightningStrike_Init () {
    libDNCM_gt_WeatherSystemRainStormPeriodicLightningStrike = TriggerCreate("libDNCM_gt_WeatherSystemRainStormPeriodicLightningStrike_Func");
    TriggerAddEventTimer(libDNCM_gt_WeatherSystemRainStormPeriodicLightningStrike, libDNCM_gv_weatherSystemLightningTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weather System - Apply Lightning Buff
//--------------------------------------------------------------------------------------------------
bool libDNCM_gt_WeatherSystemApplyLightningBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_target, "WeatherRainStormBuffApplySet", lv_target);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDNCM_gt_WeatherSystemApplyLightningBuff_Init () {
    libDNCM_gt_WeatherSystemApplyLightningBuff = TriggerCreate("libDNCM_gt_WeatherSystemApplyLightningBuff_Func");
    TriggerAddEventPlayerEffectUsed(libDNCM_gt_WeatherSystemApplyLightningBuff, 0, "WeatherRainStormImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Day Night Cycle Reminder
//--------------------------------------------------------------------------------------------------
bool libDNCM_gt_DEBUGDayNightCycleReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto78EE0CCB_val;

    // Conditions
    if (testConds) {
        if (!((libDNCM_gv_dEBUGDayNightCycleReminderTriggered == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.0, c_timeGame);
    if ((libDNCM_gv_dEBUGDayNightSystemIsSystemEnabled == true)) {
        auto78EE0CCB_val = libDNCM_gv_weatherType;
        if (auto78EE0CCB_val == libDNCM_ge_WeatherTypes_Rain) {
            libStEx_gf_DisplayVOMessage(StringExternal("Param/Value/lib_DNCM_45E2428F"), 9.0, true);
        }
        else if (auto78EE0CCB_val == libDNCM_ge_WeatherTypes_Snow) {
            libStEx_gf_DisplayVOMessage(StringExternal("Param/Value/lib_DNCM_B0662816"), 9.0, true);
        }
        else if (auto78EE0CCB_val == libDNCM_ge_WeatherTypes_Fog) {
            libStEx_gf_DisplayVOMessage(StringExternal("Param/Value/lib_DNCM_2C952E5F"), 9.0, true);
        }
        else {
        }
    }
    else {
        libStEx_gf_DisplayVOMessage(StringExternal("Param/Value/lib_DNCM_FEB17066"), 9.0, true);
        libDNCM_gv_dEBUGDayNightCycleReminderTriggered = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDNCM_gt_DEBUGDayNightCycleReminder_Init () {
    libDNCM_gt_DEBUGDayNightCycleReminder = TriggerCreate("libDNCM_gt_DEBUGDayNightCycleReminder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Day Night Cycle - Turn On/Off System
//--------------------------------------------------------------------------------------------------
bool libDNCM_gt_DEBUGDayNightCycleTurnOnOffSystem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_random;
    string lv_weatherName;

    // Automatic Variable Declarations
    int auto4C658B45_val;
    int auto51312E86_val;

    // Variable Initialization
    lv_weatherName = "";

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libDNCM_gv_dEBUGDayNightSystemIsSystemEnabled == false)) {
        libDNCM_gv_dEBUGDayNightSystemIsSystemEnabled = true;
        libDNCM_gf_InitializeWeatherSystem();
        lv_random = RandomInt(1, 3);
        if ((libDNCM_gv_weatherType == libDNCM_ge_WeatherTypes_NoWeather)) {
            auto4C658B45_val = lv_random;
            if (auto4C658B45_val == 1) {
                libDNCM_gv_weatherType = libDNCM_ge_WeatherTypes_Rain;
                lv_weatherName = "Rain";
            }
            else if (auto4C658B45_val == 2) {
                libDNCM_gv_weatherType = libDNCM_ge_WeatherTypes_Snow;
                lv_weatherName = "Snow";
            }
            else if (auto4C658B45_val == 3) {
                libDNCM_gv_weatherType = libDNCM_ge_WeatherTypes_Fog;
                lv_weatherName = "Fog";
            }
            else {
            }
        }

        TimerStart(libDNCM_gv_dEBUGDayNightCycleCycleTimer, (libDNCM_gv_dEBUGDayNightCycleTime + RandomFixed(0.0, libDNCM_gv_dEBUGDayNightCycleDayTimeModifier)), false, c_timeGame);
        if ((libDNCM_gv_dEBUGDayNightCycleReminderTriggered == true)) {
            auto51312E86_val = libDNCM_gv_weatherType;
            if (auto51312E86_val == libDNCM_ge_WeatherTypes_Rain) {
                libStEx_gf_DisplayVOMessage(StringExternal("Param/Value/lib_DNCM_C0F5AA4C"), 9.0, true);
            }
            else if (auto51312E86_val == libDNCM_ge_WeatherTypes_Snow) {
                libStEx_gf_DisplayVOMessage(StringExternal("Param/Value/lib_DNCM_3EF91706"), 9.0, true);
            }
            else if (auto51312E86_val == libDNCM_ge_WeatherTypes_Fog) {
                libStEx_gf_DisplayVOMessage(StringExternal("Param/Value/lib_DNCM_B882C2DB"), 9.0, true);
            }
            else if (auto51312E86_val == libDNCM_ge_WeatherTypes_Sandstorm) {
                libStEx_gf_DisplayVOMessage(StringExternal("Param/Value/lib_DNCM_10ED2AA2"), 9.0, true);
            }
            else if (auto51312E86_val == libDNCM_ge_WeatherTypes_Sun) {
                libStEx_gf_DisplayVOMessage(StringExternal("Param/Value/lib_DNCM_F4676590"), 9.0, true);
            }
            else {
            }
        }

    }
    else {
        if ((libDNCM_gv_dEBUGDayNightSystemIsSystemEnabled == true) && (libDNCM_gv_dEBUGDayNightCycleIsNightTime == true)) {
            libNtve_gf_StopTimer(libDNCM_gv_dEBUGDayNightCycleCycleTimer);
            libDNCM_gv_dEBUGDayNightSystemIsSystemEnabled = false;
            libDNCM_gv_dEBUGDayNightCycleIsNightTime = false;
            libDNCM_gv_dEBUGDayNightCycleIsDayTime = true;
        }
        else {
            libNtve_gf_StopTimer(libDNCM_gv_dEBUGDayNightCycleCycleTimer);
            libDNCM_gv_dEBUGDayNightSystemIsSystemEnabled = false;
        }
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_DNCM_E303309E"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDNCM_gt_DEBUGDayNightCycleTurnOnOffSystem_Init () {
    libDNCM_gt_DEBUGDayNightCycleTurnOnOffSystem = TriggerCreate("libDNCM_gt_DEBUGDayNightCycleTurnOnOffSystem_Func");
    TriggerAddEventChatMessage(libDNCM_gt_DEBUGDayNightCycleTurnOnOffSystem, c_playerAny, "-dnc", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Day Night Cycle - Set Day Or Night
//--------------------------------------------------------------------------------------------------
bool libDNCM_gt_DEBUGDayNightCycleSetDayOrNight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_cheat;

    // Automatic Variable Declarations
    string auto80ADAFD2_val;

    // Variable Initialization
    lv_cheat = EventChatMessage(false);

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDNCM_gv_dEBUGDayNightSystemIsSystemEnabled = true;
    auto80ADAFD2_val = lv_cheat;
    if (auto80ADAFD2_val == "-dncday") {
        if ((libDNCM_gv_dEBUGDayNightCycleIsNightTime == true)) {
            libDNCM_gf_DEBUGDayNightCycleFlipDayNight();
        }

    }
    else if (auto80ADAFD2_val == "-dncnight") {
        if ((libDNCM_gv_dEBUGDayNightCycleIsNightTime == false)) {
            libDNCM_gf_DEBUGDayNightCycleFlipDayNight();
        }

    }
    else {
    }
    libNtve_gf_StopTimer(libDNCM_gv_dEBUGDayNightCycleCycleTimer);
    libDNCM_gv_dEBUGDayNightSystemIsSystemEnabled = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDNCM_gt_DEBUGDayNightCycleSetDayOrNight_Init () {
    libDNCM_gt_DEBUGDayNightCycleSetDayOrNight = TriggerCreate("libDNCM_gt_DEBUGDayNightCycleSetDayOrNight_Func");
    TriggerAddEventChatMessage(libDNCM_gt_DEBUGDayNightCycleSetDayOrNight, c_playerAny, "-dncday", true);
    TriggerAddEventChatMessage(libDNCM_gt_DEBUGDayNightCycleSetDayOrNight, c_playerAny, "-dncnight", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Day Night Cycle Timer Expires
//--------------------------------------------------------------------------------------------------
bool libDNCM_gt_DEBUGDayNightCycleTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((libDNCM_gv_dEBUGDayNightSystemIsSystemEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDNCM_gf_DEBUGDayNightCycleFlipDayNight();
    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDNCM_gt_DEBUGDayNightCycleTimerExpires_Init () {
    libDNCM_gt_DEBUGDayNightCycleTimerExpires = TriggerCreate("libDNCM_gt_DEBUGDayNightCycleTimerExpires_Func");
    TriggerAddEventTimer(libDNCM_gt_DEBUGDayNightCycleTimerExpires, libDNCM_gv_dEBUGDayNightCycleCycleTimer);
}

void libDNCM_InitTriggers () {
    libDNCM_gt_PVPTrinketActivated_Init();
    libDNCM_gt_WeatherCoreUIHandler_Init();
    libDNCM_gt_DEBUGWeatherSetWeatherType_Init();
    libDNCM_gt_DEBUGWeatherDisableWeather_Init();
    libDNCM_gt_DEBUGWeatherEnableWeather_Init();
    libDNCM_gt_WeatherSystemRainStormPeriodicLightningStrike_Init();
    libDNCM_gt_WeatherSystemApplyLightningBuff_Init();
    libDNCM_gt_DEBUGDayNightCycleReminder_Init();
    libDNCM_gt_DEBUGDayNightCycleTurnOnOffSystem_Init();
    libDNCM_gt_DEBUGDayNightCycleSetDayOrNight_Init();
    libDNCM_gt_DEBUGDayNightCycleTimerExpires_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libDNCM_InitLib_completed = false;

void libDNCM_InitLib () {
    if (libDNCM_InitLib_completed) {
        return;
    }

    libDNCM_InitLib_completed = true;

    libDNCM_InitLibraries();
    libDNCM_InitVariables();
    libDNCM_InitTriggers();
}

