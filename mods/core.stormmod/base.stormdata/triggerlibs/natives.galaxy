//--------------------------------------------------------------------------------------------------
// About Types
//--------------------------------------------------------------------------------------------------
//
// -- Complex types and automatic deletion --
// 
// Many native types represent "complex" objects (i.e. larger than 4 bytes).  The script language
// automatically keeps track of these objects and deletes them from memory when they are no longer
// used (that is, when nothing in the script references them any longer).  The types which benefit
// from automatic deletion are:
//
//      abilcmd, bank, camerainfo, marker, order, playergroup, point,
//      region, soundlink, string, text, timer, transmissionsource, unitfilter, unitgroup, unitref
//
// Other object types must be explicitly destroyed with the appropriate native function when you
// are done using them.
//
//
// -- Complex types and equality --
// 
// Normally, comparing two "complex" objects with the == or != operators will only compare the
// object reference, not the contained object data.  However, a few types will compare the contained
// data instead.  These types are:
//
//      abilcmd, point, string, unitfilter, unitref
//
// Examples:
//
//      Point(1, 2) == Point(1, 2)                              // True
//      "test string" == "test string"                          // True (note: this is case sensitive)
//      AbilityCommand("move", 0) == AbilityCommand("move", 0)  // True
//      Order(abilCmd) == Order(abilCmd)                        // False (two different order instances)
//      RegionEmpty() == RegionEmpty()                          // False (two different region instances)
//
//
// -- Complex types and +/- operators --
//
// Besides numerical types (byte, int, fixed), a few complex types support + and/or - operators:
//
//      string, text    + operator will concatenate the strings or text
//      point           +/- operators will add or subtract the x and y components of the points
//

//--------------------------------------------------------------------------------------------------
// Physics
//--------------------------------------------------------------------------------------------------
const int c_physicsDisabled                         = 0;
const int e_physicsKeyframed                        = 1;
const int e_physicsSimulated                        = 2;

//--------------------------------------------------------------------------------------------------
// Animation
//--------------------------------------------------------------------------------------------------
const fixed c_animTimeDefault           = -1;

//--------------------------------------------------------------------------------------------------
// BitMask
//--------------------------------------------------------------------------------------------------
const int       c_maxBitsInMax = 128;

//--------------------------------------------------------------------------------------------------
// Boards
//--------------------------------------------------------------------------------------------------
const int c_boardNone = 0;

const fixed c_boardWidthAuto    = 0; // Automatically size the column to fit all items

//--------------------------------------------------------------------------------------------------
// Conversions
//--------------------------------------------------------------------------------------------------
const int c_fixedPrecisionAny = -1;

//--------------------------------------------------------------------------------------------------
// Cutscenes
// - Cutscenes are scenes created in the Cutscene Editor.
//--------------------------------------------------------------------------------------------------
const int c_cutsceneNone = 0;

//--------------------------------------------------------------------------------------------------
// Dialogs
//--------------------------------------------------------------------------------------------------
// Item constants
const int c_invalidDialogControlId                      = 0;

const int c_dialogControlItemNone                       = -1;

// Dialog events
const int c_dialogControlAny = -1;

//--------------------------------------------------------------------------------------------------
// Floating Combat Text
//--------------------------------------------------------------------------------------------------
const int c_floatingCombatTextAutoRandomSeed    = 0;

//--------------------------------------------------------------------------------------------------
// Math
//--------------------------------------------------------------------------------------------------
bool OneIn (int value) { return RandomInt(1, value) == 1; }

//--------------------------------------------------------------------------------------------------
// Objectives
//--------------------------------------------------------------------------------------------------
const int c_primaryObjectivesId         = 1;
const int c_secondaryObjectivesId       = 2;

//--------------------------------------------------------------------------------------------------
// Path
//--------------------------------------------------------------------------------------------------
const int c_pathLocationAll = -1;

//--------------------------------------------------------------------------------------------------
// Portrait
//--------------------------------------------------------------------------------------------------
const int c_noPortraitChannel      = -1;
    
//--------------------------------------------------------------------------------------------------
// Regions
// 
// Regions are comprised of any number of basic shapes (rectangles, circles, etc).  Each shape
// can be specified as positive or negative.  A point is considered within the region if it is
// within a least one positive shape but not within any negative shapes.
//
// Example:
// An L-shaped region could be created with either
// 
// (a) Two positive rectangles
//      _
//     | | <-- (+)
//     | |
//     |_|___
//     |_____| <-- (+)
//
// (b) One positive and one negative rectangle
//        _____
//      _|___  |
//     | |   | |
//     | |   | | <-- (-)
//     | |___|_|
//     |_____|   <-- (+)
//
// The "bounds" of the region are defined as the smallest rectangle which contains all positive
// shapes.  The "center" is the average of the center of all positive shapes, weighted by area.
//
// The "offset" of the region is relative to the shape coordinates.  The center and bounds take
// the offset into account.
//
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Strings
//--------------------------------------------------------------------------------------------------
const bool c_stringCase = true;
const bool c_stringNoCase = false;

// Text expressions
// - An expression consists of externalized text with one or more tokens to be replaced dynamically
// - TextExpressionSetToken sets the token values
// - TextExpressionAssemble returns the final text with token replacements
// - Use c_textExpressionTokenMain as the token code to define the main expression text
//   dynamically, rather than looking up from externalized text. In this case the string id
//   is arbitrary.
//
const string c_textExpressionTokenMain = "(main)";

// TextTimeFormat converts a time value, in seconds, to text using a format string
// - The time format string should use the following tokens:
//
//      <hour/>         = hour count, rounded down
//      <hour2/>        = hour count, rounded down, always two digits
//      <hourtotal/>    = total hour count, rounded down
//      <hourtotaln/>   = total hour count, rounded to nearest
//      <hourtotalu/>   = total hour count, rounded up
//      <min/>          = minute count, rounded down
//      <min2/>         = minute count, rounded down, always two digits
//      <mintotal/>     = total minute count, rounded down
//      <mintotaln/>    = total minute count, rounded to nearest
//      <mintotalu/>    = total minute count, rounded up
//      <sec/>          = second count
//      <sec2/>         = second count, always two digits
//      <sectotal/>     = total second count
//      <short/>        = one of "<hour/>h", "<min/>m", or "<sec/>s"
//
//   Examples (these all represent the same value):
//      "<hour/>:<min2/>:<sec2/>"   ->  1:08:38     (this is the default format)
//      "<mintotaln/> minutes"      ->  69 minutes
//      "<mintotal/>:<sec2/>"       ->  68:38
//      "<short/>"                  ->  1h
//

//--------------------------------------------------------------------------------------------------
// Text Tags
//--------------------------------------------------------------------------------------------------
const int c_textTagNone = 0;

const fixed c_textTagTimePermanent  = 0; // Use with c_textTagTimeDuration for permanent text

//--------------------------------------------------------------------------------------------------
// Timing
//
// -- Time types --
//
// Timing functions can work with three different types of time:
//
//   Game Time - Takes into account the current game speed, and will pass more slowly at slower
//               speeds, and vice versa.
//
//   Real Time - Passes at the same rate regardless of game speed, and approximates time passing
//               in the real world for the user.  However, "real" time is still synchronous, and
//               will therefore be affected by lag due to network or system issues.
//
//   AI Time   - Passes at the same rate as game time, but may be paused/unpaused independently
//               of game time via triggers.  This is most commonly done to pause the AI while
//               an in-game cinematic sequence is run.
//
//--------------------------------------------------------------------------------------------------
// Timers
const fixed c_timerDurationInfinite = -1.0;

// Timer windows
//   inShowElapsed shows elapsed vs. remaining time (defaults off)
//
const int c_timerWindowNone = 0;

//--------------------------------------------------------------------------------------------------
// Transmission
//--------------------------------------------------------------------------------------------------
const fixed c_transmissionTransitionDuration = 0.5;

//--------------------------------------------------------------------------------------------------
// Units
//--------------------------------------------------------------------------------------------------

const bool c_unitPropCurrent = true;
const bool c_unitPropNormal  = false;

// Behavior count
const int c_unitBehaviorCountAll                = -1;

const int c_placementTestCreepMask = 1 << c_placementTestCreep;
const int c_placementTestFogMask = 1 << c_placementTestFog;
const int c_placementTestIgnoreBlockersMask = 1 << c_placementTestIgnoreBlockers;
const int c_placementTestIgnoreInvisibleMask = 1 << c_placementTestIgnoreInvisible;
const int c_placementTestZoneMask = 1 << c_placementTestZone;
const int c_placementTestCliffMask = 1 << c_placementTestCliff;
const int c_placementTestDensityMask = 1 << c_placementTestDensity;

//--------------------------------------------------------------------------------------------------
// Unit Groups
//--------------------------------------------------------------------------------------------------
const int c_noMaxCount = 0;

//--------------------------------------------------------------------------------------------------
// User Interface
//--------------------------------------------------------------------------------------------------
const fixed c_transitionDurationImmediate   = 0.0;
const fixed c_transitionDurationDefault     = -1.0;

const int   c_mouseButtonFlagLeft           = (1 << 0);
const int   c_mouseButtonFlagMiddle         = (1 << 1);
const int   c_mouseButtonFlagRight          = (1 << 2);
const int   c_mouseButtonFlagXButton1       = (1 << 3);
const int   c_mouseButtonFlagXButton2       = (1 << 4);

//--------------------------------------------------------------------------------------------------
include "TriggerLibs/AI"

// $AS - Trigger Editor(Bug 33070): In order for line numbers to be correct you need a newline at the end of this file
