//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Heroes of the Storm Veteran Challenges
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/MapMechanicsLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"
include "TriggerLibs/StartingExperienceLib"
include "TriggerLibs/SoundLib"
include "TriggerLibs/GameDataHelperLib"
include "TriggerLibs/SupportLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libCore_InitLib();
    libGame_InitLib();
    libMapM_InitLib();
    libAIAI_InitLib();
    libUIUI_InitLib();
    libStEx_InitLib();
    libSond_InitLib();
    libGDHL_InitLib();
    libSprt_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const fixed gv_cameraZoomDistance_C = 2.0;
const fixed gv__1D_TownHallMaxHealth_C = 21000.0;
const fixed gv__1D_TownHallMaxHealthEasy_C = 24000.0;
const int gv__1D_TownStructureMax_C = 11;
const int gv__1D_WaveDelayLong_C = 16;
const int gv__1D_WaveDelayMid_C = 12;
const int gv__1D_WaveDelayShort_C = 8;
const int gv__2A_WaypointCount = 5;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_Town_Structure_Record {
    int lv_team;
    string lv_unitType;
    point lv_position;
    fixed lv_facing;
    unit lv_unit;
    fixed lv_maxHealth;
};

struct gs__1D_Structure_Info {
    string lv_unitType;
    point lv_position;
    fixed lv_facing;
    fixed lv_health;
    fixed lv_healthPercent;
    fixed lv_energyPercent;
    unit lv_unit;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_Challenges__None = 0;
const int ge_Challenges_GardenTerror = 1;
const int ge_Challenges_MoshPit = 2;
const int ge_Challenges_KeepDefense = 3;
const int ge_Challenges_ZeratulRoaming = 4;
const int ge_Challenges_HelpAlly = 5;
const int ge_Challenges_TeamFight = 6;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_unitStatusPanel;
int gv_challengeCurrent;
int gv_debug_ChallengeDlg;
int gv_debug_ChallengeDlgLevelTerror;
int gv_debug_ChallengeDlgLevelMoshPit;
int gv_debug_ChallengeDlgLevelKeepDefense;
int gv_debug_ChallengeDlgLevelRoaming;
int gv_debug_ChallengeDlgLevelHelpAlly;
int gv_debug_ChallengeDlgLevelFinalFight;
int gv_debug_ChallengeDlgCancel;
gs_Town_Structure_Record[41] gv_town_Structure_Array;
int gv_town_Structure_Count;
unitgroup gv_town_Structure_Group;
bool gv__1A_TalentPanelOpened;
bool gv__1A_TalentPicked;
bool gv__1A_BossActivated;
unit gv__1A_GardenTerror;
int gv__1A_PlayTimes;
bool gv__1A_Complete;
bool gv__1A_TalentRespecFlashed;
bool gv__1A_TalentUseAbilities;
unitgroup gv__1C_Enemy_Unit_Group;
int gv__1C_PlayTimes;
bool gv__1C_RainDamagedETC;
bool gv__1C_RainDamagedSonya;
bool gv__1C_Complete;
bool gv__1C_TalentsPanelOpened;
unitgroup gv__1D_AOERegenGlobes;
int gv__1D_AOERegenGlobeCount;
unit gv__1D_Fountain;
unit gv__1D_Keep;
unitgroup gv__1D_Remaining_Enemies;
unitgroup gv__1D_Remaining_Structures;
gs__1D_Structure_Info[gv__1D_TownStructureMax_C + 1] gv__1D_TownStructureInfo;
int gv__1D_TownStructureCount;
timer gv__1D_WaveTimer;
revealer gv__1D_VisionRevealer;
int gv__1D_PlayTimes;
fixed gv__1E_HeroXPModifierBeforeKill;
fixed gv__1E_MinionXPModifierBeforeKill;
fixed gv__1E_HeroXPModifierAfterKill;
fixed gv__1E_MinionXPModifierAfterKill;
fixed gv__1E_MinionXPModifierEnemy;
fixed gv__1E_DeathTime;
fixed gv__1E_XPStartEnemy;
fixed gv__1E_XPStartAlly;
bool gv__1E_EnemyKilledNazeebo;
bool gv__1E_EnemyKilledGraymann;
int gv__1E_PlayTimes;
unit[3] gv__1E_Fountains;
int[3] gv__1E_FountainText;
bool gv__1E_Complete;
int gv__1E_RoamingChallengeLevelTransmission;
bool gv__2A_GateOpen;
unit gv__2A_EnemyGate;
point[gv__2A_WaypointCount + 1] gv__2A_Waypoints;
point gv__2A_EscapeZombieWallLocation;
int gv__2A_PlayTimes;
actor gv__2A_NestReticle;
int gv__2A_NestTag;
timer gv__2B_ChallengeTimer;
int gv__2B_CurrentLane;
fixed gv__2B_EnemyXPAdvantage;
int gv__2B_PlayTimes;
unitgroup gv__2C_Structures;
fixed gv__2C_Reinforcement_Delay;
unit gv__2C_Dragon_Knight_Statue;
int gv__2C_Dragon_Knight_VictoryTransmission;
unit gv__2C_Hidden_Hero;
int gv__2C_PlayTimes;
unit gv__2C_Symbiote_Unit;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
actor gv_intro_TPEffect;
actor gv_intro_GardenTerrorReticle;
bool gv_intro_CleanupStarted;
bool gv__1A_CinematicSkipped;
actor gv__1C_VallaLevelUp;
bool gv__1C_CinematicSkipped;
actor gv__1D_KeepReticle;
actor gv__1D_FountainReticle;
int gv__1D_FountainText;
int gv__1E_CineTextDialog;
unit gv__1E_CineLevelUpUnit;
actor gv__1E_CineZeratulInSmoke;
sound gv__1E_CineLevelUpSound;
bool gv__1E_CinematicSkipped;
actor gv__1E_FountainReticle;
unit gv__2A_Symbiote_Unit;
unitgroup gv__2A_EnemyMinions;
actor gv__2A_DummyReticle1;
actor gv__2A_DummyReticle2;
unitgroup gv__2A_CinematicMinions;
unitgroup gv__2A_CinematicHiddenUnits;
revealer gv__2A_CinematicRevealer;
unitgroup gv__2B_CineMinions;
unitgroup[3] gv__2B_CineMinionsBot;
unitgroup[3] gv__2B_CineMinionsTop;
unit gv__2B_CineSymbiote_Unit;
unit gv__2B_CineXPUnit;
unit gv__2B_CineXPUnit2;
actor gv__2B_CineXPRing;
actor gv__2B_CineXPReticle;
int gv__2B_CineTextDialog;
unit gv__2C_UltimateEvolutionClone;

void InitGlobals () {
    int init_i;

    gv_unitStatusPanel = c_invalidDialogControlId;
    gv_challengeCurrent = ge_Challenges__None;
    gv_debug_ChallengeDlg = c_invalidDialogId;
    gv_debug_ChallengeDlgLevelTerror = c_invalidDialogControlId;
    gv_debug_ChallengeDlgLevelMoshPit = c_invalidDialogControlId;
    gv_debug_ChallengeDlgLevelKeepDefense = c_invalidDialogControlId;
    gv_debug_ChallengeDlgLevelRoaming = c_invalidDialogControlId;
    gv_debug_ChallengeDlgLevelHelpAlly = c_invalidDialogControlId;
    gv_debug_ChallengeDlgLevelFinalFight = c_invalidDialogControlId;
    gv_debug_ChallengeDlgCancel = c_invalidDialogControlId;
    gv_town_Structure_Group = UnitGroupEmpty();
    gv__1C_Enemy_Unit_Group = UnitGroupEmpty();
    gv__1D_AOERegenGlobes = UnitGroupEmpty();
    gv__1D_Remaining_Enemies = UnitGroupEmpty();
    gv__1D_Remaining_Structures = UnitGroupEmpty();
    for (init_i = 0; init_i <= gv__1D_TownStructureMax_C; init_i += 1) {
        gv__1D_TownStructureInfo[init_i].lv_health = 100.0;
        gv__1D_TownStructureInfo[init_i].lv_healthPercent = 100.0;
        gv__1D_TownStructureInfo[init_i].lv_energyPercent = 100.0;
    }
    gv__1D_WaveTimer = TimerCreate();
    gv__1E_HeroXPModifierBeforeKill = 0.6;
    gv__1E_MinionXPModifierBeforeKill = 0.75;
    gv__1E_HeroXPModifierAfterKill = 1.1;
    gv__1E_MinionXPModifierAfterKill = 1.1;
    gv__1E_MinionXPModifierEnemy = 1.0;
    gv__1E_DeathTime = 14.0;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv__1E_FountainText[init_i] = c_textTagNone;
    }
    gv__1E_RoamingChallengeLevelTransmission = c_invalidTransmissionId;
    gv__2A_EnemyGate = UnitFromId(361);
    gv__2A_NestTag = c_textTagNone;
    gv__2B_ChallengeTimer = TimerCreate();
    gv__2B_EnemyXPAdvantage = 0.05;
    gv__2C_Structures = UnitGroupEmpty();
    gv__2C_Reinforcement_Delay = 1.0;
    gv__2C_Dragon_Knight_VictoryTransmission = c_invalidTransmissionId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv__1D_FountainText = c_textTagNone;
    gv__1E_CineTextDialog = c_invalidDialogId;
    gv__2A_EnemyMinions = UnitGroupEmpty();
    gv__2A_CinematicMinions = UnitGroupEmpty();
    gv__2A_CinematicHiddenUnits = UnitGroupEmpty();
    gv__2B_CineMinions = UnitGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv__2B_CineMinionsBot[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv__2B_CineMinionsTop[init_i] = UnitGroupEmpty();
    }
    gv__2B_CineTextDialog = c_invalidDialogId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_PlayerPickedCorrectTalents (int lp_challenge);
void gf_Debug_ResetCurrentTrial ();
void gf_RestoreHero ();
region gf_RegionWithOffset (region lp_area, fixed lp_leftOffset, fixed lp_rightOffset, fixed lp_topOffset, fixed lp_bottomOffset);
void gf_SetPlayableWithLooseCameraBounds (region lp_area);
void gf_CreateTeleportInModel (point lp_position);
void gf_RemoveAllRegenGlobes ();
void gf_ClearTownandLaneData ();
void gf_TurnCinematicCameraOnOffChallenge (int lp_player, bool lp_onOff);
void gf_ChallengeBriefMode (bool lp_onOff);
void gf_ChallengeStartWait (bool lp_fade, trigger lp_callbackPrep, trigger lp_callbackStart, point lp_startingCameraLoc, text lp_title, bool lp_firstTime);
void gf_ChallengeSuccessWait ();
void gf_ChallengeFailedWait (trigger lp_resetCallback);
bool gf_ChallengeTalentsAvailableQuery ();
void gf_ChallengeEncouragementLine (int lp_index, bool lp_waitOptions);
void gf_EnableAIToDefendPoint (int lp_player, point lp_point);
void gf_RemoveDeathModelswithAliasInRegion (region lp_region);
void gf_InitTownStructuresInfo ();
void gf_Reset2LaneTownWait ();
void gf__1A_Damage_Adjustment ();
void gf__1A_Damage_Reset ();
void gf_SE_ShowHideTalentPortraitFlashingImage (bool lp_showHide);
void gf__1A_ActivateBoss (unit lp_boss, bool lp_doReticle);
void gf__1A_GardenTerrorChallengeCancel ();
void gf__1C_MoshPitChallengeDisableAI ();
void gf__1C_MoshPitChallengeCancel ();
void gf__1D_InitTownStructuresInfo ();
void gf__1D_SpawnTopWave ();
void gf__1D_SpawnRightWave ();
void gf__1D_SpawnMinion (point lp_loc, string lp_type);
void gf__1D_ActivateMinionAIforUnitGroup (unitgroup lp_unitGroup, int lp_lane);
void gf__1D_ResetTown ();
void gf__1D_SetTownVitals ();
void gf__1D_AddReplenisherBehaviors ();
void gf__1D_AOEChallengeCancel ();
void gf__1E_EnableAIToDefendTheLane (int lp_player);
void gf__1E_DisableAI ();
void gf__1E_RoamingChallengeCancel ();
void gf__2A_StoreWaypoints ();
void gf__2A_EscapeChallengeCancel ();
void gf__2B_EnableAIToDefendTheLane (int lp_player);
void gf__2B_SoakLanesChallengeCancel ();
void gf__2C_UltimateUnlocks ();
void gf__2C_CreateDragonKnight ();
void gf__2C_ResetDragonKnight ();
void gf__2C_EnableAIToFightOverDragonKnight (int lp_player);
void gf__2C_AIOffStandStill ();
void gf__2C_DragonKnightChallengeCancel ();
void gf__2A_CinematicSpawnAndActivateMinion (int lp_player, point lp_loc, string lp_type);
void gf__2A_CinematicSpawnMinionsforCutscene ();
void gf__2B_CineSpawnAndActivateMinion (int lp_player, point lp_loc, string lp_type, bool lp_top);
void gf__2B_CineSpawnMinionsforCutscene ();
void gf__2B_CineFreezeAllMinions (int lp_freezeOptions);
void gf_AutomateGardenTerrorChallenge ();
void gf_AutomateMoshPitChallenge ();
void gf_AutomateRoamingChallenge ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_InitPlayers;
trigger gt_Init01Data;
trigger gt_Init02Unit;
trigger gt_Init03UI;
trigger gt_Init04Environment;
trigger gt_Init05Ally;
trigger gt_Init06BaseRegions;
trigger gt_HookupLaneData;
trigger gt_HookupTownData;
trigger gt_StormInitializeMap;
trigger gt_StormHookupGlobalVariables;
trigger gt_StormStartGame;
trigger gt_DebugTemp;
trigger gt_Debug_Challenges;
trigger gt_Debug_DisplayChallengeDialog;
trigger gt_Debug_ChallengeDialogButtonClickedTerror;
trigger gt_Debug_ChallengeDialogButtonClickedMoshPit;
trigger gt_Debug_ChallengeDialogButtonClickedKeepDefense;
trigger gt_Debug_ChallengeDialogButtonClickedRoaming;
trigger gt_Debug_ChallengeDialogButtonClickedHelpAlly;
trigger gt_Debug_ChallengeDialogButtonClickedFinalFight;
trigger gt_Debug_ChallengeDialogButtonClickedCancel;
trigger gt_PlayerLeavesGameMessages;
trigger gt_ChallengeStartHideScreenImage;
trigger gt_AddReferenceCardMove;
trigger gt_AddReferenceCardAttack;
trigger gt_AddReferenceCardPenetratingRound;
trigger gt_AddReferenceCardInspire;
trigger gt_AddReferenceCardCamera;
trigger gt_TwoLane_HookupLaneData;
trigger gt_TwoLane_HookupTownData;
trigger gt_TwoLane_HookupRegionData;
trigger gt_TwoLane_InitializeLanes;
trigger gt__1A_StartGameQ;
trigger gt__1A_TalentsPanelFlashTalents;
trigger gt__1A_TalentsPanelOpened;
trigger gt__1A_TalentsPicked;
trigger gt__1A_GraveGolemUtherFight;
trigger gt__1A_TalentsPickedTransmissionQ;
trigger gt__1A_GardenTerrorReadyButtonClicked;
trigger gt__1A_GardenTerrorChallengePreReady;
trigger gt__1A_GardenTerrorChallengeStart;
trigger gt__1A_GardenTerrorChallengeSuccess;
trigger gt__1A_GardenTerrorChallengeFail;
trigger gt__1A_GardenTerrorChallengeBalance;
trigger gt__1A_GardenTerrorChallengeCallbackPrep;
trigger gt__1A_GardenTerrorChallengeCallbackStart;
trigger gt__1A_GardenTerrorChallengeCallbackReset;
trigger gt__1C_MoshPitQ;
trigger gt__1C_TalentsPanelOpened;
trigger gt__1C_MoshPitReadyButtonClicked;
trigger gt__1C_MoshPitChallengePreReady;
trigger gt__1C_MoshPitChallengeStart;
trigger gt__1C_MoshPitChallengeEnableAIETCStunned;
trigger gt__1C_MoshPitChallengeSuccess;
trigger gt__1C_MoshPitChallengeFail;
trigger gt__1C_MoshPitChallengeRainDamageTwoHeroes;
trigger gt__1C_MoshPitChallengeBalance;
trigger gt__1C_MoshPitChallengeCallbackPrep;
trigger gt__1C_MoshPitChallengeCallbackStart;
trigger gt__1C_MoshPitChallengeCallbackReset;
trigger gt__1C_MoshPitChallengeAttackManager;
trigger gt__1D_HookupJungleCreepData;
trigger gt__1D_HookupTownData;
trigger gt__1D_HookupLaneData;
trigger gt__1D_AOEFountainUsed;
trigger gt__1D_AOEFountainDeath;
trigger gt__1D_AOERegenGlobeReminder;
trigger gt__1D_AOERegenGlobeTransmissionQ;
trigger gt__1D_AOERegenGlobePickedUp;
trigger gt__1D_AOERegenGlobeDies;
trigger gt__1D_AOEWaveTimerExpires;
trigger gt__1D_AOEQ;
trigger gt__1D_AOEReadyButtonClicked;
trigger gt__1D_AOEChallengePreReady;
trigger gt__1D_AOEChallengeStart;
trigger gt__1D_AOEChallengeSuccess;
trigger gt__1D_AOEChallengeFail;
trigger gt__1D_AOEChallengeBalance;
trigger gt__1D_AOEChallengeCallbackPrep;
trigger gt__1D_AOEChallengeCallbackStart;
trigger gt__1D_AOEChallengeCallbackReset;
trigger gt__1E_GiveMULEAgain;
trigger gt__1E_RoamingLevelMonitor;
trigger gt__1E_RoamingQ;
trigger gt__1E_RoamingReadyButtonClicked;
trigger gt__1E_RoamingChallengePreReady;
trigger gt__1E_RoamingChallengeLevelHighlight;
trigger gt__1E_RoamingChallengeStart;
trigger gt__1E_RoamingChallengeSuccess;
trigger gt__1E_RoamingChallengeFail;
trigger gt__1E_RoamingHeroKilled;
trigger gt__1E_RoamingHeroTakesDamage;
trigger gt__1E_RoamingTeamLevelUpLabel;
trigger gt__1E_RoamingTipMount;
trigger gt__1E_RoamingTipMountUnhighlightButton;
trigger gt__1E_RoamingFountainUsed;
trigger gt__1E_RoamingFoutainText;
trigger gt__1E_RoamingChallengeBalance;
trigger gt__1E_RoamingChallengeCallbackPrep;
trigger gt__1E_RoamingChallengeCallbackStart;
trigger gt__1E_RoamingChallengeCallbackReset;
trigger gt__2A_EscapeLogic;
trigger gt__2A_ZombieWallCancelLogic;
trigger gt__2A_EscapeJainaKilled;
trigger gt__2A_EscapeAbathurOutsideBase;
trigger gt__2A_EscapeAbathurUsedNest;
trigger gt__2A_EscapeQ;
trigger gt__2A_EscapeReadyButtonClicked;
trigger gt__2A_EscapeChallengePreReady;
trigger gt__2A_EscapeChallengeStart;
trigger gt__2A_EscapeChallengeSuccess;
trigger gt__2A_EscapeChallengeFail;
trigger gt__2A_EscapeChallengeBalance;
trigger gt__2A_EscapeChallengeCallbackPrep;
trigger gt__2A_EscapeChallengeCallbackStart;
trigger gt__2A_EscapeChallengeCallbackReset;
trigger gt__2B_FalstadChangeLane;
trigger gt__2B_SoakLanesLevelMonitor;
trigger gt__2B_AttackAbathur;
trigger gt__2B_SoakLanesQ;
trigger gt__2B_SoakLanesReadyButtonClicked;
trigger gt__2B_SoakLanesChallengePreReady;
trigger gt__2B_SoakLanesChallengeStart;
trigger gt__2B_SoakLanesChallengeSuccess;
trigger gt__2B_SoakLanesChallengeFail;
trigger gt__2B_SoakLanesChallengeBalance;
trigger gt__2B_SoakLanesChallengeCallbackPrep;
trigger gt__2B_SoakLanesChallengeCallbackStart;
trigger gt__2B_SoakLanesChallengeCallbackReset;
trigger gt__2C_AIOn;
trigger gt__2C_HeroDied;
trigger gt__2C_Abathur_Used_Symbiote;
trigger gt__2C_DragonKnightQ;
trigger gt__2C_DragonKnightReadyButtonClicked;
trigger gt__2C_DragonKnightChallengePreReady;
trigger gt__2C_DragonKnightChallengeStart;
trigger gt__2C_DragonKnightChallengeSuccess;
trigger gt__2C_DragonKnightChallengeFail;
trigger gt__2C_DragonKnightChallengeBalance;
trigger gt__2C_DragonKnightChallengeCallbackPrep;
trigger gt__2C_DragonKnightChallengeCallbackStart;
trigger gt__2C_DragonKnightChallengeCallbackReset;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_MoshPitQ;
trigger gt_MoshPitSetup;
trigger gt_MoshPitCinematic;
trigger gt_MoshPitCinematicEnd;
trigger gt_MoshPitCleanup;
trigger gt_AOEQ;
trigger gt_AOESetup;
trigger gt_AOECinematic;
trigger gt_AOECinematicEnd;
trigger gt_AOECleanup;
trigger gt__1E_CinematicXPDisplay;
trigger gt__1E_CineLevelUp;
trigger gt_RoamingQ;
trigger gt_RoamingSetup;
trigger gt_RoamingCinematic;
trigger gt_RoamingCinematicEnd;
trigger gt_RoamingCleanup;
trigger gt__2A_Abathur_Used_Symbiote;
trigger gt_EscapeQ;
trigger gt_EscapeSetup;
trigger gt_EscapeCinematic;
trigger gt_EscapeCinematicEnd;
trigger gt_EscapeCleanup;
trigger gt__2B_Abathur_Used_Symbiote;
trigger gt__2B_CineXP;
trigger gt_SoakLanesQ;
trigger gt_SoakLanesSetup;
trigger gt_SoakLanesCinematic;
trigger gt_SoakLanesCinematicEnd;
trigger gt_SoakLanesCleanup;
trigger gt_DragonKnightQ;
trigger gt_DragonKnightSetup;
trigger gt_DragonKnightCinematic;
trigger gt_DragonKnightCinematicEnd;
trigger gt_DragonKnightCleanup;
trigger gt_VictoryQ;
trigger gt_VictorySetupQ;
trigger gt_VictoryCinematic;
trigger gt_AutoTestTrigger;
trigger gt_AutomationExitOut;
trigger gt_Debug_Temp;

//--------------------------------------------------------------------------------------------------
// Custom Script: Tutorial Tactical Hero AI
//--------------------------------------------------------------------------------------------------
//include "StormTactical.galaxy"

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_PlayerPickedCorrectTalents (int lp_challenge) {
    // Automatic Variable Declarations
    int auto9D4C41EB_val;

    // Implementation
    auto9D4C41EB_val = lp_challenge;
    if (auto9D4C41EB_val == ge_Challenges_GardenTerror) {
        if (((libGame_gv_talents_TalentChoices[libStEx_gv_pLAYER_01_USER][1].lv_selection != 4) || (libGame_gv_talents_TalentChoices[libStEx_gv_pLAYER_01_USER][2].lv_selection != 2) || (libGame_gv_talents_TalentChoices[libStEx_gv_pLAYER_01_USER][3].lv_selection != 4))) {
            return false;
        }

    }
    else if (auto9D4C41EB_val == ge_Challenges_MoshPit) {
        if (((libGame_gv_talents_TalentChoices[libStEx_gv_pLAYER_01_USER][4].lv_selection != 2))) {
            return false;
        }

    }
    else if (auto9D4C41EB_val == ge_Challenges_ZeratulRoaming) {
        if (((libGame_gv_talents_TalentChoices[libStEx_gv_pLAYER_01_USER][1].lv_selection != 2) || (libGame_gv_talents_TalentChoices[libStEx_gv_pLAYER_01_USER][2].lv_selection != 1) || (libGame_gv_talents_TalentChoices[libStEx_gv_pLAYER_01_USER][3].lv_selection != 1))) {
            return false;
        }

    }
    else {
        return false;
    }
    return true;
}

void gf_Debug_ResetCurrentTrial () {
    // Automatic Variable Declarations
    int auto7F23A6A4_val;

    // Implementation
    DialogSetVisible(gv_debug_ChallengeDlg, PlayerGroupAll(), false);
    gv__1A_PlayTimes = 0;
    gv__1C_PlayTimes = 0;
    gv__1D_PlayTimes = 0;
    gv__1E_PlayTimes = 0;
    gv__2A_PlayTimes = 0;
    gv__2B_PlayTimes = 0;
    gv__2C_PlayTimes = 0;
    TriggerEnable(gt__1A_StartGameQ, true);
    TriggerEnable(gt__1C_MoshPitQ, true);
    TriggerEnable(gt__1D_AOEQ, true);
    TriggerEnable(gt__1E_RoamingQ, true);
    TriggerEnable(gt__2A_EscapeQ, true);
    TriggerEnable(gt__2C_DragonKnightQ, true);
    libStEx_gf_ClearHintMessage();
    gf_SE_ShowHideTalentPortraitFlashingImage(false);
    auto7F23A6A4_val = gv_challengeCurrent;
    if (auto7F23A6A4_val == ge_Challenges_GardenTerror) {
        gf__1A_GardenTerrorChallengeCancel();
    }
    else if (auto7F23A6A4_val == ge_Challenges_MoshPit) {
        gf__1C_MoshPitChallengeCancel();
    }
    else if (auto7F23A6A4_val == ge_Challenges_KeepDefense) {
        gf__1D_AOEChallengeCancel();
    }
    else if (auto7F23A6A4_val == ge_Challenges_ZeratulRoaming) {
        gf__1E_RoamingChallengeCancel();
    }
    else if (auto7F23A6A4_val == ge_Challenges_HelpAlly) {
        gf__2A_EscapeChallengeCancel();
    }
    else if (auto7F23A6A4_val == ge_Challenges_TeamFight) {
        gf__2C_DragonKnightChallengeCancel();
    }
    else {
    }
}

void gf_RestoreHero () {
    // Automatic Variable Declarations
    // Implementation
    libStEx_gf_RestoreUnit(libStEx_gv_hERO_PlayerUnit);
    libStEx_gf_RestoreUnit(libStEx_gv_hERO_FriendlyUther);
}

region gf_RegionWithOffset (region lp_area, fixed lp_leftOffset, fixed lp_rightOffset, fixed lp_topOffset, fixed lp_bottomOffset) {
    // Variable Declarations
    fixed lv_x1;
    fixed lv_x2;
    fixed lv_y1;
    fixed lv_y2;
    region lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_x1 = PointGetX(RegionGetBoundsMin(lp_area));
    lv_x2 = PointGetX(RegionGetBoundsMax(lp_area));
    lv_y1 = PointGetY(RegionGetBoundsMin(lp_area));
    lv_y2 = PointGetY(RegionGetBoundsMax(lp_area));
    lv_result = RegionRect((lv_x1 + lp_leftOffset), (lv_y1 + lp_bottomOffset), (lv_x2 + lp_rightOffset), (lv_y2 + lp_topOffset));
    return lv_result;
}

void gf_SetPlayableWithLooseCameraBounds (region lp_area) {
    // Automatic Variable Declarations
    // Implementation
    RegionPlayableMapSet(lp_area);
    libGame_gf_SetCameraBoundStormForPlayer(libStEx_gv_pLAYER_01_USER, gf_RegionWithOffset(lp_area, -8.0, 8.0, 8.0, -8.0));
}

trigger auto_gf_CreateTeleportInModel_Trigger = null;
point auto_gf_CreateTeleportInModel_lp_position;

void gf_CreateTeleportInModel (point lp_position) {
    auto_gf_CreateTeleportInModel_lp_position = lp_position;

    if (auto_gf_CreateTeleportInModel_Trigger == null) {
        auto_gf_CreateTeleportInModel_Trigger = TriggerCreate("auto_gf_CreateTeleportInModel_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateTeleportInModel_Trigger, false, false);
}

bool auto_gf_CreateTeleportInModel_TriggerFunc (bool testConds, bool runActions) {
    point lp_position = auto_gf_CreateTeleportInModel_lp_position;

    // Automatic Variable Declarations
    // Implementation
    SoundPlay(SoundLink("Gen_Hero_Respawn", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateModelAtPoint("Storm_UI_HeroSelection_LightningBeam", lp_position);
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

void gf_RemoveAllRegenGlobes () {
    // Variable Declarations
    unit lv_indexGlobe;

    // Automatic Variable Declarations
    unitgroup auto604C46F8_g;
    int auto604C46F8_u;
    unitgroup autoC44FAA30_g;
    int autoC44FAA30_u;
    unitgroup auto84914565_g;
    int auto84914565_u;
    unitgroup auto5B54B574_g;
    int auto5B54B574_u;
    unitgroup auto86778249_g;
    int auto86778249_u;
    unitgroup auto6B8D959A_g;
    int auto6B8D959A_u;

    // Variable Initialization

    // Implementation
    auto604C46F8_g = UnitGroup("RegenGlobe", c_playerAny, RegionFromId(63), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto604C46F8_u = UnitGroupCount(auto604C46F8_g, c_unitCountAll);
    for (;; auto604C46F8_u -= 1) {
        lv_indexGlobe = UnitGroupUnitFromEnd(auto604C46F8_g, auto604C46F8_u);
        if (lv_indexGlobe == null) { break; }
        UnitRemove(lv_indexGlobe);
    }
    autoC44FAA30_g = UnitGroup("RegenGlobeMissile", c_playerAny, RegionFromId(63), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC44FAA30_u = UnitGroupCount(autoC44FAA30_g, c_unitCountAll);
    for (;; autoC44FAA30_u -= 1) {
        lv_indexGlobe = UnitGroupUnitFromEnd(autoC44FAA30_g, autoC44FAA30_u);
        if (lv_indexGlobe == null) { break; }
        UnitRemove(lv_indexGlobe);
    }
    auto84914565_g = UnitGroup("RegenGlobeMissileNoEnemyVisibility", c_playerAny, RegionFromId(63), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto84914565_u = UnitGroupCount(auto84914565_g, c_unitCountAll);
    for (;; auto84914565_u -= 1) {
        lv_indexGlobe = UnitGroupUnitFromEnd(auto84914565_g, auto84914565_u);
        if (lv_indexGlobe == null) { break; }
        UnitRemove(lv_indexGlobe);
    }
    auto5B54B574_g = UnitGroup("RegenGlobeNeutral", c_playerAny, RegionFromId(63), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5B54B574_u = UnitGroupCount(auto5B54B574_g, c_unitCountAll);
    for (;; auto5B54B574_u -= 1) {
        lv_indexGlobe = UnitGroupUnitFromEnd(auto5B54B574_g, auto5B54B574_u);
        if (lv_indexGlobe == null) { break; }
        UnitRemove(lv_indexGlobe);
    }
    auto86778249_g = UnitGroup("RegenGlobeNeutralPrecursor", c_playerAny, RegionFromId(63), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto86778249_u = UnitGroupCount(auto86778249_g, c_unitCountAll);
    for (;; auto86778249_u -= 1) {
        lv_indexGlobe = UnitGroupUnitFromEnd(auto86778249_g, auto86778249_u);
        if (lv_indexGlobe == null) { break; }
        UnitRemove(lv_indexGlobe);
    }
    auto6B8D959A_g = UnitGroup("RegenGlobeNeutralSpawnMissile", c_playerAny, RegionFromId(63), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6B8D959A_u = UnitGroupCount(auto6B8D959A_g, c_unitCountAll);
    for (;; auto6B8D959A_u -= 1) {
        lv_indexGlobe = UnitGroupUnitFromEnd(auto6B8D959A_g, auto6B8D959A_u);
        if (lv_indexGlobe == null) { break; }
        UnitRemove(lv_indexGlobe);
    }
}

void gf_ClearTownandLaneData () {
    // Automatic Variable Declarations
    // Implementation
    libGame_gv_laneCount = 0;
    libGame_gv_townTownCount = 0;
    TriggerExecute(libGame_gt_InitializeCodeLaneSystem, true, true);
    TriggerExecute(libGame_gt_InitializeTownSystem, true, true);
}

void gf_TurnCinematicCameraOnOffChallenge (int lp_player, bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    libStEx_gf_TurnCinematicCameraOnOff(lp_player, lp_onOff);
    if ((lp_onOff == true)) {
        SetTalentTreeSelectionPanelDismissAllowed(false);
    }
    else {
        SetTalentTreeSelectionPanelDismissAllowed(true);
    }
}

void gf_ChallengeBriefMode (bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true)) {
        UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationDefault);
        DialogControlSetVisible(gv_unitStatusPanel, PlayerGroupAll(), false);
    }
    else {
        UISetMode(PlayerGroupAll(), c_uiModeConsole, c_transitionDurationDefault);
        DialogControlSetVisible(gv_unitStatusPanel, PlayerGroupAll(), true);
    }
}

void gf_ChallengeStartWait (bool lp_fade, trigger lp_callbackPrep, trigger lp_callbackStart, point lp_startingCameraLoc, text lp_title, bool lp_firstTime) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    SoundPlayForPlayer(SoundLink("UI_Game_Tutorial_Veteran_Challenge_Accepted", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_ChallengeBriefMode(true);
    CameraLockInput(libStEx_gv_pLAYER_01_USER, true);
    if ((lp_fade == true)) {
        CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    }

    if ((lp_callbackPrep != null)) {
        TriggerExecute(lp_callbackPrep, true, false);
    }

    if ((lp_fade == true)) {
        CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
        CameraPan(libStEx_gv_pLAYER_01_USER, lp_startingCameraLoc, 0.0, -1, 10.0, false);
        CameraSetValue(libStEx_gv_pLAYER_01_USER, c_cameraValueDistance, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + gv_cameraZoomDistance_C), 0.0, -1, 10.0);
        UIClearMessages(libCore_gv_playerGroupFromPlayer[libStEx_gv_pLAYER_01_USER], c_messageAreaAll);
    }
    else {
        CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), 1.5, -1, 10.0, false);
        CameraPan(libStEx_gv_pLAYER_01_USER, lp_startingCameraLoc, 1.5, -1, 10.0, false);
    }
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_01_USER);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    DialogControlSetVisible(libStEx_gv_tutorialVeteranPanel.lv_challengeTitleFrame, libCore_gv_playerGroupFromPlayer[libStEx_gv_pLAYER_01_USER], true);
    DialogControlSetVisible(libStEx_gv_tutorialVeteranPanel.lv_challengeDescriptionLabel, libCore_gv_playerGroupFromPlayer[libStEx_gv_pLAYER_01_USER], true);
    libNtve_gf_SetDialogItemText(libStEx_gv_tutorialVeteranPanel.lv_challengeDescriptionLabel, lp_title, libCore_gv_playerGroupFromPlayer[libStEx_gv_pLAYER_01_USER]);
    if ((lp_callbackStart != null)) {
        TriggerExecute(lp_callbackStart, true, true);
    }

    SoundPlayForPlayer(SoundLink("UI_Game_Tutorial_Veteran_Challenge_Countdown", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    DialogControlSetVisible(libStEx_gv_tutorialVeteranPanel.lv_challengeTitleFrame, libCore_gv_playerGroupFromPlayer[libStEx_gv_pLAYER_01_USER], false);
    DialogControlSetVisible(libStEx_gv_tutorialVeteranPanel.lv_countdownGoLabel, libCore_gv_playerGroupFromPlayer[libStEx_gv_pLAYER_01_USER], false);
    libCore_gf_SendTransmissionCampaign(null, "TutorialVO|Line00649", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    DialogControlSetVisible(libStEx_gv_tutorialVeteranPanel.lv_countdown3Image, libCore_gv_playerGroupFromPlayer[libStEx_gv_pLAYER_01_USER], true);
    Wait(1.0, c_timeGame);
    libCore_gf_SendTransmissionCampaign(null, "TutorialVO|Line00650", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    DialogControlSetVisible(libStEx_gv_tutorialVeteranPanel.lv_countdown3Image, libCore_gv_playerGroupFromPlayer[libStEx_gv_pLAYER_01_USER], false);
    DialogControlSetVisible(libStEx_gv_tutorialVeteranPanel.lv_countdown2Image, libCore_gv_playerGroupFromPlayer[libStEx_gv_pLAYER_01_USER], true);
    Wait(1.0, c_timeGame);
    libCore_gf_SendTransmissionCampaign(null, "TutorialVO|Line00651", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    DialogControlSetVisible(libStEx_gv_tutorialVeteranPanel.lv_countdown2Image, libCore_gv_playerGroupFromPlayer[libStEx_gv_pLAYER_01_USER], false);
    DialogControlSetVisible(libStEx_gv_tutorialVeteranPanel.lv_countdown1Image, libCore_gv_playerGroupFromPlayer[libStEx_gv_pLAYER_01_USER], true);
    Wait(1.0, c_timeGame);
    libCore_gf_SendTransmissionCampaign(null, "TutorialVO|Line00652", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundPlayForPlayer(SoundLink("UI_Game_Tutorial_Veteran_Challenge_Start", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    DialogControlSetVisible(libStEx_gv_tutorialVeteranPanel.lv_countdown1Image, libCore_gv_playerGroupFromPlayer[libStEx_gv_pLAYER_01_USER], false);
    DialogControlSetVisible(libStEx_gv_tutorialVeteranPanel.lv_countdownGoLabel, libCore_gv_playerGroupFromPlayer[libStEx_gv_pLAYER_01_USER], true);
    gf_ChallengeBriefMode(false);
    if ((lp_fade == true)) {
        CameraSetValue(libStEx_gv_pLAYER_01_USER, c_cameraValueDistance, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), 2.0, -1, 10.0);
    }

    CameraLockInput(libStEx_gv_pLAYER_01_USER, false);
    TriggerExecute(gt_ChallengeStartHideScreenImage, true, false);
}

void gf_ChallengeSuccessWait () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libStEx_gv_tutorialVeteranPanel.lv_challengeCompleteImage, libCore_gv_playerGroupFromPlayer[libStEx_gv_pLAYER_01_USER], true);
    SoundPlayForPlayer(SoundLink("UI_Game_Tutorial_Veteran_Challenge_Complete", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MX_TutorialVet_Success", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    if (((gv__2C_PlayTimes >= 1) || (gv__1E_PlayTimes >= 1))) {
        Wait(2.0, c_timeGame);
        CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        Wait(1.0, c_timeGame);
        DialogControlSetVisible(libStEx_gv_tutorialVeteranPanel.lv_challengeCompleteImage, libCore_gv_playerGroupFromPlayer[libStEx_gv_pLAYER_01_USER], false);
        TriggerExecute(gt_VictoryQ, true, true);
    }
    else {
        Wait(2.0, c_timeGame);
        gf_ChallengeBriefMode(true);
        CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        Wait(1.0, c_timeGame);
        DialogControlSetVisible(libStEx_gv_tutorialVeteranPanel.lv_challengeCompleteImage, libCore_gv_playerGroupFromPlayer[libStEx_gv_pLAYER_01_USER], false);
        Wait(1.0, c_timeGame);
    }
}

void gf_ChallengeFailedWait (trigger lp_resetCallback) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlayForPlayer(SoundLink("UI_Game_Tutorial_Veteran_Challenge_Fail", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MX_TutorialVet_Failed", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    Wait(2.0, c_timeGame);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libStEx_gf_CinematicModeTutorial(true, PlayerGroupAll(), c_transitionDurationDefault);
    libStEx_gf_GlobalCinematicSettingTutorial(true);
    VisEnable(c_visTypeFog, true);
    Wait(1.0, c_timeGame);
    Wait(1.0, c_timeGame);
    if ((lp_resetCallback != null)) {
        TriggerExecute(lp_resetCallback, true, true);
    }

    Wait(0.5, c_timeGame);
    libStEx_gf_CinematicModeTutorial(false, PlayerGroupAll(), c_transitionDurationDefault);
    libStEx_gf_GlobalCinematicSettingTutorial(false);
    gf_TurnCinematicCameraOnOffChallenge(libStEx_gv_pLAYER_01_USER, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
}

bool gf_ChallengeTalentsAvailableQuery () {
    // Automatic Variable Declarations
    // Implementation
    if ((libStEx_gf_PlayerPickedAllTalents() == false) && (libStEx_gf_IsthisanAutomatedPlaythrough() == false)) {
        if ((libStEx_gf_QueryForYesNo(StringExternal("Param/Value/45848179")) == false)) {
            return false;
        }

    }

    return true;
}

void gf_ChallengeEncouragementLine (int lp_index, bool lp_waitOptions) {
    // Automatic Variable Declarations
    int auto3661FA6B_val;

    // Implementation
    auto3661FA6B_val = (ModI(lp_index, 7) + 1);
    if (auto3661FA6B_val == 1) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00702", c_transmissionDurationAdd, 0.0, lp_waitOptions, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto3661FA6B_val == 2) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00703", c_transmissionDurationAdd, 0.0, lp_waitOptions, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto3661FA6B_val == 3) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00704", c_transmissionDurationAdd, 0.0, lp_waitOptions, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto3661FA6B_val == 4) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00705", c_transmissionDurationAdd, 0.0, lp_waitOptions, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto3661FA6B_val == 5) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00706", c_transmissionDurationAdd, 0.0, lp_waitOptions, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto3661FA6B_val == 6) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00707", c_transmissionDurationAdd, 0.0, lp_waitOptions, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto3661FA6B_val == 7) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00708", c_transmissionDurationAdd, 0.0, lp_waitOptions, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
}

void gf_EnableAIToDefendPoint (int lp_player, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    libAIAI_gf_HeroAIEnableAIForPlayer(lp_player);
}

void gf_RemoveDeathModelswithAliasInRegion (region lp_region) {
    // Variable Declarations
    actor lv_actorRegion;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_region);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, "Destroy", "Model", "ScopeContains _DeadClearable");
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, "Destroy", "Unit", "ScopeContains _DeadClearable");
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

void gf_InitTownStructuresInfo () {
    // Variable Declarations
    int lv_itIndex;
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup autoC383DB00_g;
    int autoC383DB00_u;

    // Variable Initialization

    // Implementation
    autoC383DB00_g = UnitGroup(null, c_playerAny, RegionFromId(21), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC383DB00_u = UnitGroupCount(autoC383DB00_g, c_unitCountAll);
    for (;; autoC383DB00_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoC383DB00_g, autoC383DB00_u);
        if (lv_itUnit == null) { break; }
        gv_town_Structure_Count += 1;
        gv_town_Structure_Array[gv_town_Structure_Count].lv_unit = lv_itUnit;
        gv_town_Structure_Array[gv_town_Structure_Count].lv_unitType = UnitGetType(lv_itUnit);
        gv_town_Structure_Array[gv_town_Structure_Count].lv_position = UnitGetPosition(lv_itUnit);
        gv_town_Structure_Array[gv_town_Structure_Count].lv_facing = UnitGetFacing(lv_itUnit);
        gv_town_Structure_Array[gv_town_Structure_Count].lv_team = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_itUnit));
        gv_town_Structure_Array[gv_town_Structure_Count].lv_maxHealth = UnitGetPropertyFixed(lv_itUnit, c_unitPropLifeMax, c_unitPropCurrent);
        if ((gv_town_Structure_Array[gv_town_Structure_Count].lv_unitType == "TownCannonTowerL3")) {
            gv_town_Structure_Array[gv_town_Structure_Count].lv_maxHealth = 12000.0;
            UnitSetPropertyFixed(lv_itUnit, c_unitPropLifeMax, gv_town_Structure_Array[gv_town_Structure_Count].lv_maxHealth);
            UnitSetPropertyFixed(lv_itUnit, c_unitPropLifePercent, 100.0);
        }

        UnitGroupAdd(gv_town_Structure_Group, lv_itUnit);
    }
}

void gf_Reset2LaneTownWait () {
    // Variable Declarations
    unit lv_itUnit;
    int lv_itStructureIndex;
    int lv_itTower;
    int lv_type;

    // Automatic Variable Declarations
    unitgroup auto19D4242D_g;
    int auto19D4242D_u;
    int auto7C953F5F_ae;
    const int auto7C953F5F_ai = 1;

    // Variable Initialization

    // Implementation
    auto19D4242D_g = UnitGroup("TownCannonTowerDead", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto19D4242D_u = UnitGroupCount(auto19D4242D_g, c_unitCountAll);
    for (;; auto19D4242D_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto19D4242D_g, auto19D4242D_u);
        if (lv_itUnit == null) { break; }
        UnitKill(lv_itUnit);
    }
    gf_RemoveDeathModelswithAliasInRegion(RegionFromId(21));
    auto7C953F5F_ae = gv_town_Structure_Count;
    lv_itStructureIndex = 1;
    for ( ; ( (auto7C953F5F_ai >= 0 && lv_itStructureIndex <= auto7C953F5F_ae) || (auto7C953F5F_ai < 0 && lv_itStructureIndex >= auto7C953F5F_ae) ) ; lv_itStructureIndex += auto7C953F5F_ai ) {
        if ((gv_town_Structure_Array[lv_itStructureIndex].lv_position == null)) {
            return ;
        }

        if ((UnitIsValid(gv_town_Structure_Array[lv_itStructureIndex].lv_unit) == true) && (UnitIsAlive(gv_town_Structure_Array[lv_itStructureIndex].lv_unit) == true)) {
            UnitSetPropertyFixed(gv_town_Structure_Array[lv_itStructureIndex].lv_unit, c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(gv_town_Structure_Array[lv_itStructureIndex].lv_unit, c_unitPropEnergyPercent, 100.0);
            continue;
        }

        UnitCreate(1, gv_town_Structure_Array[lv_itStructureIndex].lv_unitType, c_unitCreateIgnorePlacement, libGame_gf_ComputerPlayerInTeam(gv_town_Structure_Array[lv_itStructureIndex].lv_team), gv_town_Structure_Array[lv_itStructureIndex].lv_position, gv_town_Structure_Array[lv_itStructureIndex].lv_facing, null);
        libCore_gf_StoreIntegerForUnit(UnitLastCreated(), 1, lv_itStructureIndex);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_town_Structure_Array[lv_itStructureIndex].lv_maxHealth);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
        gv_town_Structure_Array[lv_itStructureIndex].lv_unit = UnitLastCreated();
        UnitGroupAdd(gv_town_Structure_Group, UnitLastCreated());
        lv_type = libGame_gf_TownGetTownStructurePresetFromUnit(UnitLastCreated());
        if (((lv_type == libGame_ge_TownStructureTypes_CannonTower) || (lv_type == libGame_ge_TownStructureTypes_TownHall) || (lv_type == libGame_ge_TownStructureTypes_Gate))) {
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Signal PlayBuild");
        }

    }
    libAIAI_gf_TowerTurnTowerSystemOnOff(false);
    TriggerExecute(libGame_gt_InitializeTownSystem, true, true);
    Wait(0.0625, c_timeGame);
    libAIAI_gf_TowerTurnTowerSystemOnOff(true);
}

void gf__1A_Damage_Adjustment () {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "DemonHunterWeaponDamage", "Amount", libStEx_gv_pLAYER_01_USER, "132");
    CatalogFieldValueSet(c_gameCatalogEffect, "HungeringArrowDamage1", "Amount", libStEx_gv_pLAYER_01_USER, "172");
    CatalogFieldValueSet(c_gameCatalogEffect, "HungeringArrowDamage2", "Amount", libStEx_gv_pLAYER_01_USER, "86");
    CatalogFieldValueSet(c_gameCatalogEffect, "HungeringArrowDamage3", "Amount", libStEx_gv_pLAYER_01_USER, "86");
    CatalogFieldValueSet(c_gameCatalogEffect, "HungeringArrowDamage4", "Amount", libStEx_gv_pLAYER_01_USER, "86");
}

void gf__1A_Damage_Reset () {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "DemonHunterWeaponDamage", "Amount", libStEx_gv_pLAYER_01_USER, "124");
    CatalogFieldValueSet(c_gameCatalogEffect, "HungeringArrowDamage1", "Amount", libStEx_gv_pLAYER_01_USER, "220");
    CatalogFieldValueSet(c_gameCatalogEffect, "HungeringArrowDamage2", "Amount", libStEx_gv_pLAYER_01_USER, "111");
    CatalogFieldValueSet(c_gameCatalogEffect, "HungeringArrowDamage3", "Amount", libStEx_gv_pLAYER_01_USER, "111");
    CatalogFieldValueSet(c_gameCatalogEffect, "HungeringArrowDamage4", "Amount", libStEx_gv_pLAYER_01_USER, "111");
}

void gf_SE_ShowHideTalentPortraitFlashingImage (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((libStEx_gv_sE_TrainingModeTalentPanelFlashingImage == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer\\ConsolePanel\\TutorialPortraitHighlight");
        libStEx_gv_sE_TrainingModeTalentPanelFlashingImage = DialogControlLastCreated();
    }

    DialogControlSetVisible(libStEx_gv_sE_TrainingModeTalentPanelFlashingImage, PlayerGroupAll(), lp_showHide);
}

trigger auto_gf__1A_ActivateBoss_Trigger = null;
unit auto_gf__1A_ActivateBoss_lp_boss;
bool auto_gf__1A_ActivateBoss_lp_doReticle;

void gf__1A_ActivateBoss (unit lp_boss, bool lp_doReticle) {
    auto_gf__1A_ActivateBoss_lp_boss = lp_boss;
    auto_gf__1A_ActivateBoss_lp_doReticle = lp_doReticle;

    if (auto_gf__1A_ActivateBoss_Trigger == null) {
        auto_gf__1A_ActivateBoss_Trigger = TriggerCreate("auto_gf__1A_ActivateBoss_TriggerFunc");
    }

    TriggerExecute(auto_gf__1A_ActivateBoss_Trigger, false, false);
}

bool auto_gf__1A_ActivateBoss_TriggerFunc (bool testConds, bool runActions) {
    unit lp_boss = auto_gf__1A_ActivateBoss_lp_boss;
    bool lp_doReticle = auto_gf__1A_ActivateBoss_lp_doReticle;

    // Variable Declarations
    unit lv_uther;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv__1A_BossActivated == false)) {
        gv__1A_BossActivated = true;
    }
    else {
        return true;
    }
    libNtve_gf_SendActorMessageToUnit(lp_boss, "AnimPlay Birth Birth NonLooping 0.000000");
    libNtve_gf_PauseUnit(lp_boss, false);
    libNtve_gf_ShowHideUnit(lp_boss, true);
    Wait(1.0, c_timeGame);
    UnitAbilityEnable(gv__1A_GardenTerror, "UnderworldBossStun", false);
    UnitAbilityEnable(gv__1A_GardenTerror, "UnderworldBossRoots", false);
    UnitBehaviorRemove(lp_boss, "JungleCreepBenign", 1);
    UnitBehaviorRemove(lp_boss, "JungleCreepPassive", 1);
    UnitSetState(libStEx_gv_hERO_FriendlyUther, c_unitStateInvulnerable, false);
    if ((lp_doReticle == true) && (gv_intro_GardenTerrorReticle == null) && (gv_intro_CleanupStarted == false)) {
        libCore_gf_AttachReticleEffectAndTextTagOnUnit(libCore_ge_ReticleType_Enemy, libCore_ge_ReticleSize_Large, null, gv__1A_GardenTerror, "Ref_Center");
        gv_intro_GardenTerrorReticle = libNtve_gf_ActorLastCreated();
    }

    Wait(2.0, c_timeGame);
    libNtve_gf_PauseUnit(lp_boss, true);
    libAIAI_gf_StartDefenderAI(false, libNtve_gf_ConvertUnitToUnitGroup(lp_boss), RegionCircle(UnitGetPosition(lp_boss), 13.0), null, false);
    libStEx_gf_TVActivateUtherAI(lv_uther, libGame_gv_players[1].lv_heroUnit, lp_boss);
    return true;
}

void gf__1A_GardenTerrorChallengeCancel () {
    // Automatic Variable Declarations
    // Implementation
    gv__1A_PlayTimes = 0;
    TriggerEnable(gt__1A_GardenTerrorChallengeFail, false);
    TriggerEnable(gt__1A_GardenTerrorChallengeSuccess, false);
    TriggerEnable(gt__1A_GardenTerrorReadyButtonClicked, false);
    TriggerEnable(gt__1A_TalentsPanelOpened, false);
    TriggerEnable(gt__1A_TalentsPicked, false);
    TriggerEnable(gt__1A_TalentsPickedTransmissionQ, false);
    TriggerStop(gt__1A_GardenTerrorChallengePreReady);
    TriggerStop(gt__1A_TalentsPicked);
    TriggerStop(gt__1A_TalentsPickedTransmissionQ);
    UnitKill(gv__1A_GardenTerror);
    UnitAbilityEnable(libStEx_gv_hERO_FriendlyUther, "UtherHolyLight", true);
    UnitAbilityEnable(libStEx_gv_hERO_FriendlyUther, "UtherHolyRadiance", true);
    UnitAbilityEnable(libStEx_gv_hERO_FriendlyUther, "UtherHammerOfJustice", true);
    UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "TutorialNoMinionAggroBehavior", 1);
    gf__1A_Damage_Reset();
    libStEx_gf_TutorialVeteranShowHideReadyButton(false);
    libStEx_gf_TutorialVeteranShowHideRespecButton(false);
    libStEx_gf_TutorialVeteranShowHideRetryButton(false);
    TriggerExecute(libStEx_gt_ObjectiveTargetDummyFail, true, false);
    gf_ChallengeFailedWait(gt__1A_GardenTerrorChallengeCallbackReset);
    SetTalentHighlighted("DemonHunterMasteryMonsterHunterHungeringArrow", false);
    SetTalentHighlighted("DemonHunterCreedoftheHunter", false);
    SetTalentHighlighted("DemonHunterMasteryRepeatingArrowVault", false);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
}

void gf__1C_MoshPitChallengeDisableAI () {
    // Automatic Variable Declarations
    // Implementation
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_02_UTHER);
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_03_ORDER1);
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_04_ORDER2);
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_06_CHAOS1);
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_07_CHAOS2);
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_08_CHAOS3);
}

void gf__1C_MoshPitChallengeCancel () {
    // Automatic Variable Declarations
    // Implementation
    gv__1C_PlayTimes = 0;
    TriggerStop(gt__1C_MoshPitChallengePreReady);
    TriggerEnable(gt__1C_MoshPitChallengeFail, false);
    TriggerEnable(gt__1C_MoshPitChallengeSuccess, false);
    TriggerEnable(gt__1C_MoshPitReadyButtonClicked, false);
    TriggerEnable(gt__1C_MoshPitChallengeEnableAIETCStunned, false);
    TriggerEnable(gt__1C_MoshPitChallengeRainDamageTwoHeroes, false);
    TriggerExecute(libStEx_gt_ObjectiveMoshPitFightFail, true, false);
    gf__1C_MoshPitChallengeDisableAI();
    TriggerStop(gt__1C_MoshPitChallengeAttackManager);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyUther, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyTyrael, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyMuradin, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_EnemyETC, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_EnemyNazeebo, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_EnemySonya, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyUther, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyTyrael, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyMuradin, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyETC, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyNazeebo, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemySonya, true);
    gf_ChallengeFailedWait(gt__1C_MoshPitChallengeCallbackReset);
    SetTalentHighlighted("DemonHunterMasteryMonsterHunterHungeringArrow", false);
    SetTalentHighlighted("DemonHunterCreedoftheHunter", false);
    SetTalentHighlighted("DemonHunterMasteryRepeatingArrowVault", false);
    SetTalentHighlighted("DemonHunterHeroicAbilityRainofVengeance", false);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
}

void gf__1D_InitTownStructuresInfo () {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto845D8B71_ae;
    const int auto845D8B71_ai = 1;

    // Variable Initialization

    // Implementation
    gv__1D_TownStructureCount += 1;
    gv__1D_TownStructureInfo[gv__1D_TownStructureCount].lv_unit = UnitFromId(346);
    gv__1D_TownStructureCount += 1;
    gv__1D_TownStructureInfo[gv__1D_TownStructureCount].lv_unit = UnitFromId(340);
    libNtve_gf_SendActorMessageToUnit(gv__1D_TownStructureInfo[gv__1D_TownStructureCount].lv_unit, "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_tower_2.dds");
    gv__1D_TownStructureCount += 1;
    gv__1D_TownStructureInfo[gv__1D_TownStructureCount].lv_unit = UnitFromId(302);
    libNtve_gf_SendActorMessageToUnit(gv__1D_TownStructureInfo[gv__1D_TownStructureCount].lv_unit, "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_tower_2.dds");
    gv__1D_TownStructureCount += 1;
    gv__1D_TownStructureInfo[gv__1D_TownStructureCount].lv_unit = UnitFromId(347);
    gv__1D_TownStructureCount += 1;
    gv__1D_TownStructureInfo[gv__1D_TownStructureCount].lv_unit = UnitFromId(307);
    gv__1D_TownStructureCount += 1;
    gv__1D_TownStructureInfo[gv__1D_TownStructureCount].lv_unit = UnitFromId(305);
    libNtve_gf_SendActorMessageToUnit(gv__1D_TownStructureInfo[gv__1D_TownStructureCount].lv_unit, "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_tower_2.dds");
    gv__1D_TownStructureCount += 1;
    gv__1D_TownStructureInfo[gv__1D_TownStructureCount].lv_unit = UnitFromId(304);
    libNtve_gf_SendActorMessageToUnit(gv__1D_TownStructureInfo[gv__1D_TownStructureCount].lv_unit, "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_tower_2.dds");
    gv__1D_TownStructureCount += 1;
    gv__1D_TownStructureInfo[gv__1D_TownStructureCount].lv_unit = UnitFromId(312);
    gv__1D_TownStructureCount += 1;
    gv__1D_TownStructureInfo[gv__1D_TownStructureCount].lv_unit = UnitFromId(65);
    gv__1D_TownStructureCount += 1;
    gv__1D_TownStructureInfo[gv__1D_TownStructureCount].lv_unit = UnitFromId(339);
    libNtve_gf_SendActorMessageToUnit(gv__1D_TownStructureInfo[gv__1D_TownStructureCount].lv_unit, "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_tower_2.dds");
    gv__1D_TownStructureCount += 1;
    gv__1D_TownStructureInfo[gv__1D_TownStructureCount].lv_unit = UnitFromId(337);
    auto845D8B71_ae = gv__1D_TownStructureCount;
    lv_itIndex = 1;
    for ( ; ( (auto845D8B71_ai >= 0 && lv_itIndex <= auto845D8B71_ae) || (auto845D8B71_ai < 0 && lv_itIndex >= auto845D8B71_ae) ) ; lv_itIndex += auto845D8B71_ai ) {
        gv__1D_TownStructureInfo[lv_itIndex].lv_unitType = UnitGetType(gv__1D_TownStructureInfo[lv_itIndex].lv_unit);
        gv__1D_TownStructureInfo[lv_itIndex].lv_position = UnitGetPosition(gv__1D_TownStructureInfo[lv_itIndex].lv_unit);
        gv__1D_TownStructureInfo[lv_itIndex].lv_facing = UnitGetFacing(gv__1D_TownStructureInfo[lv_itIndex].lv_unit);
        gv__1D_TownStructureInfo[lv_itIndex].lv_health = UnitGetPropertyFixed(gv__1D_TownStructureInfo[lv_itIndex].lv_unit, c_unitPropLifeMax, c_unitPropCurrent);
        if ((libGame_gf_TownGetTownStructurePresetFromUnit(gv__1D_TownStructureInfo[lv_itIndex].lv_unit) == libGame_ge_TownStructureTypes_CannonTower)) {
            UnitBehaviorRemove(gv__1D_TownStructureInfo[lv_itIndex].lv_unit, "TowerEnergyInfiniteRegen", 1);
        }

    }
}

void gf__1D_SpawnTopWave () {
    // Automatic Variable Declarations
    // Implementation
    gf__1D_SpawnMinion(PointFromId(325), "FootmanMinion");
    gf__1D_SpawnMinion(PointFromId(332), "FootmanMinion");
    gf__1D_SpawnMinion(PointFromId(300), "FootmanMinion");
    gf__1D_SpawnMinion(PointFromId(334), "RangedMinion");
    gf__1D_SpawnMinion(PointFromId(335), "RangedMinion");
    gf__1D_SpawnMinion(PointFromId(336), "RangedMinion");
    gf__1D_SpawnMinion(PointFromId(1567), "RangedMinion");
    gf__1D_SpawnMinion(PointFromId(1833), "RangedMinion");
    gf__1D_SpawnMinion(PointFromId(1834), "RangedMinion");
    gf__1D_SpawnMinion(PointFromId(333), "WizardMinion");
}

void gf__1D_SpawnRightWave () {
    // Automatic Variable Declarations
    // Implementation
    gf__1D_SpawnMinion(PointFromId(315), "FootmanMinion");
    gf__1D_SpawnMinion(PointFromId(316), "FootmanMinion");
    gf__1D_SpawnMinion(PointFromId(317), "FootmanMinion");
    gf__1D_SpawnMinion(PointFromId(330), "FootmanMinion");
    gf__1D_SpawnMinion(PointFromId(314), "FootmanMinion");
    gf__1D_SpawnMinion(PointFromId(320), "RangedMinion");
    gf__1D_SpawnMinion(PointFromId(326), "RangedMinion");
    gf__1D_SpawnMinion(PointFromId(318), "RangedMinion");
    gf__1D_SpawnMinion(PointFromId(327), "RangedMinion");
    gf__1D_SpawnMinion(PointFromId(328), "RangedMinion");
    if (true) {
        gf__1D_SpawnMinion(PointFromId(210), "RangedMinion");
        gf__1D_SpawnMinion(PointFromId(1835), "RangedMinion");
    }

    gf__1D_SpawnMinion(PointFromId(319), "WizardMinion");
}

void gf__1D_SpawnMinion (point lp_loc, string lp_type) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(1, lp_type, c_unitCreateIgnorePlacement, libStEx_gv_pLAYER_12_CHAOS, lp_loc, null);
    UnitGroupAdd(gv__1D_Remaining_Enemies, UnitLastCreated());
}

void gf__1D_ActivateMinionAIforUnitGroup (unitgroup lp_unitGroup, int lp_lane) {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto74A19460_g;
    int auto74A19460_u;

    // Variable Initialization

    // Implementation
    auto74A19460_g = lp_unitGroup;
    auto74A19460_u = UnitGroupCount(auto74A19460_g, c_unitCountAll);
    for (;; auto74A19460_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto74A19460_g, auto74A19460_u);
        if (lv_itUnit == null) { break; }
        libGame_gf_CalculateSpawnedMinionGoalPoints(UnitGetOwner(lv_itUnit), UnitGetPosition(lv_itUnit));
        libAIAI_gf_MinionAIStartMinionAI(-1, lv_itUnit, lp_lane, libGame_gv_spawnedMinionFirstWaypointIndex, false, false, false, 0, false);
    }
}

void gf__1D_ResetTown () {
    // Variable Declarations
    unit lv_itUnit;
    int lv_itStructureIndex;
    int lv_itTower;
    int lv_type;

    // Automatic Variable Declarations
    int auto53343FF0_ae;
    const int auto53343FF0_ai = 1;

    // Variable Initialization

    // Implementation
    gf_RemoveDeathModelswithAliasInRegion(RegionFromId(2));
    auto53343FF0_ae = gv__1D_TownStructureCount;
    lv_itStructureIndex = 1;
    for ( ; ( (auto53343FF0_ai >= 0 && lv_itStructureIndex <= auto53343FF0_ae) || (auto53343FF0_ai < 0 && lv_itStructureIndex >= auto53343FF0_ae) ) ; lv_itStructureIndex += auto53343FF0_ai ) {
        if ((gv__1D_TownStructureInfo[lv_itStructureIndex].lv_position == null)) {
            return ;
        }

        if ((UnitIsValid(gv__1D_TownStructureInfo[lv_itStructureIndex].lv_unit) == true) && (UnitIsAlive(gv__1D_TownStructureInfo[lv_itStructureIndex].lv_unit) == true)) {
            UnitSetPropertyFixed(gv__1D_TownStructureInfo[lv_itStructureIndex].lv_unit, c_unitPropLifePercent, gv__1D_TownStructureInfo[lv_itStructureIndex].lv_healthPercent);
            UnitSetPropertyFixed(gv__1D_TownStructureInfo[lv_itStructureIndex].lv_unit, c_unitPropEnergyPercent, gv__1D_TownStructureInfo[lv_itStructureIndex].lv_energyPercent);
            continue;
        }

        UnitCreate(1, gv__1D_TownStructureInfo[lv_itStructureIndex].lv_unitType, c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_TeamOrder, gv__1D_TownStructureInfo[lv_itStructureIndex].lv_position, gv__1D_TownStructureInfo[lv_itStructureIndex].lv_facing, null);
        libCore_gf_StoreIntegerForUnit(UnitLastCreated(), 1, lv_itStructureIndex);
        gv__1D_TownStructureInfo[lv_itStructureIndex].lv_unit = UnitLastCreated();
        UnitGroupAdd(gv__1D_Remaining_Structures, UnitLastCreated());
        UnitSetPropertyFixed(gv__1D_TownStructureInfo[lv_itStructureIndex].lv_unit, c_unitPropLifePercent, gv__1D_TownStructureInfo[lv_itStructureIndex].lv_healthPercent);
        UnitSetPropertyFixed(gv__1D_TownStructureInfo[lv_itStructureIndex].lv_unit, c_unitPropEnergyPercent, gv__1D_TownStructureInfo[lv_itStructureIndex].lv_energyPercent);
        UnitBehaviorRemove(gv__1D_TownStructureInfo[lv_itStructureIndex].lv_unit, "StructureAmmoReplenisher", 1);
        if ((UnitGetType(UnitLastCreated()) == "TownTownHallL3")) {
            gv__1D_Keep = UnitLastCreated();
        }

        if ((UnitGetType(UnitLastCreated()) == "TownMoonwellL2")) {
            gv__1D_Fountain = UnitLastCreated();
            TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
            libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
            gv__1D_FountainText = TextTagLastCreated();
        }

        lv_type = libGame_gf_TownGetTownStructurePresetFromUnit(UnitLastCreated());
        libGame_gf_TownAddStructureToTownArray(1, UnitLastCreated(), lv_type, libGame_gv_teamChaosIndex_C);
        if (((lv_type == libGame_ge_TownStructureTypes_CannonTower) || (lv_type == libGame_ge_TownStructureTypes_TownHall))) {
            if ((lv_type == libGame_ge_TownStructureTypes_TownHall)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap TownTownHallL3");
            }
            else {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap TownTowerL3KingsCrest");
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_tower_2.dds");
            }
        }

    }
}

void gf__1D_SetTownVitals () {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto6030BCB3_ae;

    // Variable Initialization
    lv_itIndex = -1;

    // Implementation
    auto6030BCB3_ae = gv__1D_TownStructureCount;
    lv_itIndex = 1;
    for ( ; lv_itIndex <= auto6030BCB3_ae ; lv_itIndex += 1 ) {
        if ((UnitIsAlive(gv__1D_TownStructureInfo[lv_itIndex].lv_unit) == true)) {
            UnitSetPropertyFixed(gv__1D_TownStructureInfo[lv_itIndex].lv_unit, c_unitPropLifePercent, gv__1D_TownStructureInfo[lv_itIndex].lv_healthPercent);
            UnitSetPropertyFixed(gv__1D_TownStructureInfo[lv_itIndex].lv_unit, c_unitPropEnergyPercent, gv__1D_TownStructureInfo[lv_itIndex].lv_energyPercent);
            UnitBehaviorRemove(gv__1D_TownStructureInfo[lv_itIndex].lv_unit, "StructureAmmoReplenisher", 1);
        }

    }
}

void gf__1D_AddReplenisherBehaviors () {
    // Variable Declarations
    int lv_type;
    int lv_itIndex;

    // Automatic Variable Declarations
    int auto5ABBE364_ae;

    // Variable Initialization

    // Implementation
    auto5ABBE364_ae = gv__1D_TownStructureCount;
    lv_itIndex = 1;
    for ( ; lv_itIndex <= auto5ABBE364_ae ; lv_itIndex += 1 ) {
        lv_type = libGame_gf_TownGetTownStructurePresetFromUnit(gv__1D_TownStructureInfo[lv_itIndex].lv_unit);
        if ((UnitIsAlive(gv__1D_TownStructureInfo[lv_itIndex].lv_unit) == true) && ((lv_type == libGame_ge_TownStructureTypes_TownHall) || (lv_type == libGame_ge_TownStructureTypes_CannonTower))) {
            UnitBehaviorAdd(gv__1D_TownStructureInfo[lv_itIndex].lv_unit, "StructureAmmoReplenisher", gv__1D_TownStructureInfo[lv_itIndex].lv_unit, 1);
        }

    }
}

void gf__1D_AOEChallengeCancel () {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto92364FBA_g;
    int auto92364FBA_u;
    unitgroup auto1F80F7D6_g;
    int auto1F80F7D6_u;

    // Variable Initialization

    // Implementation
    TriggerStop(gt__1D_AOEChallengePreReady);
    TriggerEnable(gt__1D_AOEChallengeFail, false);
    TriggerEnable(gt__1D_AOEChallengeSuccess, false);
    TriggerEnable(gt__1D_AOEReadyButtonClicked, false);
    TriggerEnable(gt__1D_AOEFountainUsed, false);
    TriggerEnable(gt__1D_AOEFountainDeath, false);
    TriggerEnable(gt__1D_AOERegenGlobeReminder, false);
    TriggerEnable(gt__1D_AOERegenGlobeDies, false);
    TriggerEnable(gt__1D_AOERegenGlobePickedUp, false);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, true);
    auto92364FBA_g = gv__1D_Remaining_Enemies;
    auto92364FBA_u = UnitGroupCount(auto92364FBA_g, c_unitCountAll);
    for (;; auto92364FBA_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto92364FBA_g, auto92364FBA_u);
        if (lv_itUnit == null) { break; }
        UnitIssueOrder(lv_itUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(lv_itUnit, true);
    }
    TimerPause(gv__1D_WaveTimer, true);
    gf_ChallengeFailedWait(gt__1D_AOEChallengeCallbackReset);
    gf_ClearTownandLaneData();
    auto1F80F7D6_g = gv__1D_Remaining_Enemies;
    auto1F80F7D6_u = UnitGroupCount(auto1F80F7D6_g, c_unitCountAll);
    for (;; auto1F80F7D6_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto1F80F7D6_g, auto1F80F7D6_u);
        if (lv_itUnit == null) { break; }
        UnitRemove(lv_itUnit);
    }
    gf_RemoveAllRegenGlobes();
    gv__1D_PlayTimes = 0;
}

void gf__1E_EnableAIToDefendTheLane (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libAIAI_gf_HeroAIEnableTalentPicking(lp_player, false);
    UnitBehaviorAdd(libGame_gv_players[lp_player].lv_heroUnit, "GenericCalldownMule", libGame_gv_players[lp_player].lv_heroUnit, 1);
    libAIAI_gf_HeroAIEnableAIForPlayer(lp_player);
}

void gf__1E_DisableAI () {
    // Automatic Variable Declarations
    // Implementation
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_03_ORDER1);
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_02_UTHER);
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_07_CHAOS2);
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_08_CHAOS3);
}

void gf__1E_RoamingChallengeCancel () {
    // Variable Declarations
    int lv_itTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv__1E_PlayTimes = 0;
    TriggerStop(gt__1E_RoamingChallengePreReady);
    TriggerEnable(gt__1E_RoamingChallengeFail, false);
    TriggerEnable(gt__1E_RoamingChallengeSuccess, false);
    TriggerEnable(gt__1E_RoamingReadyButtonClicked, false);
    TriggerExecute(libStEx_gt_ObjectiveRoamingFail, true, false);
    TriggerEnable(gt__1E_RoamingLevelMonitor, false);
    TriggerEnable(gt__1E_RoamingFoutainText, false);
    TriggerEnable(gt__1E_RoamingFountainUsed, false);
    SetTalentTreeSelectionPanelAutoShow(true);
    gf__1E_DisableAI();
    libUIUI_gf_UIPartyFrameShowHidePartyFramePanelForPlayer(false, libStEx_gv_pLAYER_01_USER);
    TriggerEnable(gt__1E_GiveMULEAgain, false);
    libCore_gv_sYSXPOn = false;
    libCore_gv_sYSTalentsOn = true;
    libCore_gv_bALDeathTimeOverride = 60.0;
    libCore_gv_data_XP_HeroXPModifier[1] = 1.0;
    libCore_gv_data_XP_MinionXPModifier[1] = 1.0;
    libCore_gv_data_XP_MinionXPModifier[2] = 1.0;
    CatalogFieldValueModify(c_gameCatalogAbil, "UtherHolyLight", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", libStEx_gv_pLAYER_02_UTHER, "4", c_upgradeOperationAdd);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyRaynor, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyUther, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyNazeebo, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyGreymane, true);
    TriggerStop(gt__1E_RoamingTipMount);
    gf_ChallengeFailedWait(gt__1E_RoamingChallengeCallbackReset);
    SetTalentHighlighted("ZeratulMasteryGreaterCleaveCleave", false);
    SetTalentHighlighted("ZeratulComboSlash", false);
    SetTalentHighlighted("ZeratulSeekerintheDark", false);
    gf_ClearTownandLaneData();
    libGame_gf_MinionStartStopMinionSystem(false);
}

void gf__2A_StoreWaypoints () {
    // Automatic Variable Declarations
    // Implementation
    gv__2A_Waypoints[1] = PointFromId(1573);
    gv__2A_Waypoints[2] = PointFromId(1574);
    gv__2A_Waypoints[3] = PointFromId(1577);
    gv__2A_Waypoints[4] = PointFromId(1579);
    gv__2A_Waypoints[5] = PointFromId(840);
}

void gf__2A_EscapeChallengeCancel () {
    // Automatic Variable Declarations
    // Implementation
    TriggerStop(gt__2A_EscapeChallengePreReady);
    TriggerEnable(gt__2A_EscapeChallengeFail, false);
    TriggerEnable(gt__2A_EscapeJainaKilled, false);
    TriggerEnable(gt__2A_EscapeChallengeSuccess, false);
    TriggerEnable(gt__2A_EscapeReadyButtonClicked, false);
    TriggerEnable(gt__2A_EscapeLogic, false);
    TriggerEnable(gt__2A_ZombieWallCancelLogic, false);
    TriggerEnable(gt__2A_EscapeAbathurOutsideBase, false);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyValla, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyJaina, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyNazeebo, true);
    if ((gv__2A_NestReticle != null)) {
        libNtve_gf_KillModel(gv__2A_NestReticle);
        gv__2A_NestReticle = null;
    }

    if ((gv__2A_NestTag != c_textTagNone)) {
        TextTagDestroy(gv__2A_NestTag);
        gv__2A_NestTag = c_textTagNone;
    }

    gf_ChallengeFailedWait(gt__2A_EscapeChallengeCallbackReset);
    gv__2A_PlayTimes = 0;
}

void gf__2B_EnableAIToDefendTheLane (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libAIAI_gf_HeroAIEnableAIForPlayer(lp_player);
    libAIAI_gf_HeroAISetAIDifficultyLevel(lp_player, libAIAI_ge_HeroAIDifficulty_HeroAIElite);
}

void gf__2B_SoakLanesChallengeCancel () {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto4FAA1F98_g;
    int auto4FAA1F98_u;
    unitgroup auto010124C1_g;
    int auto010124C1_u;

    // Variable Initialization

    // Implementation
    TriggerStop(gt__2B_SoakLanesChallengePreReady);
    TriggerEnable(gt__2B_SoakLanesChallengeFail, false);
    libNtve_gf_StopTimer(gv__2B_ChallengeTimer);
    TriggerEnable(gt__2B_SoakLanesChallengeSuccess, false);
    TriggerEnable(gt__2B_SoakLanesReadyButtonClicked, false);
    TriggerEnable(gt__2B_SoakLanesLevelMonitor, false);
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_07_CHAOS2);
    UnitIssueOrder(libStEx_gv_hERO_EnemyFalstad, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyFalstad, true);
    libCore_gv_sYSXPOn = false;
    TriggerStop(gt__2B_AttackAbathur);
    TriggerStop(gt__2B_FalstadChangeLane);
    gf_ChallengeFailedWait(gt__2B_SoakLanesChallengeCallbackReset);
    libGame_gf_MinionStartStopMinionSystem(false);
    gf_ClearTownandLaneData();
    auto4FAA1F98_g = UnitGroup("AbathurToxicNest", c_playerAny, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4FAA1F98_u = UnitGroupCount(auto4FAA1F98_g, c_unitCountAll);
    for (;; auto4FAA1F98_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto4FAA1F98_g, auto4FAA1F98_u);
        if (lv_itUnit == null) { break; }
        UnitRemove(lv_itUnit);
    }
    auto010124C1_g = UnitGroup("AbathurLocustNormal", c_playerAny, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto010124C1_u = UnitGroupCount(auto010124C1_g, c_unitCountAll);
    for (;; auto010124C1_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto010124C1_g, auto010124C1_u);
        if (lv_itUnit == null) { break; }
        UnitRemove(lv_itUnit);
    }
    gv__2B_PlayTimes = 0;
}

void gf__2C_UltimateUnlocks () {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorAdd(libStEx_gv_hERO_FriendlyValla, "Ultimate1Unlocked", libStEx_gv_hERO_FriendlyValla, 1);
    UnitBehaviorAdd(libStEx_gv_hERO_FriendlyThrall, "Ultimate2Unlocked", libStEx_gv_hERO_FriendlyThrall, 1);
    UnitBehaviorAdd(libStEx_gv_hERO_EnemySonya, "Ultimate2Unlocked", libStEx_gv_hERO_EnemySonya, 1);
    UnitBehaviorAdd(libStEx_gv_hERO_EnemyKerrigan, "Ultimate2Unlocked", libStEx_gv_hERO_EnemyKerrigan, 1);
}

void gf__2C_CreateDragonKnight () {
    // Automatic Variable Declarations
    // Implementation
    UnitCreate(1, "VehicleDragon", c_unitCreateIgnorePlacement, 0, PointFromId(624), PointGetFacing(PointFromId(624)), null);
    gv__2C_Dragon_Knight_Statue = UnitLastCreated();
    UnitSetState(gv__2C_Dragon_Knight_Statue, c_unitStateHighlightable, false);
}

void gf__2C_ResetDragonKnight () {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(libGame_gt_VehiclesVehicleDies, false);
    libStEx_gf_MoveUnit(gv__2C_Dragon_Knight_Statue, PointFromId(1087), false);
    UnitKill(gv__2C_Dragon_Knight_Statue);
    gf__2C_CreateDragonKnight();
    TriggerEnable(libGame_gt_VehiclesVehicleDies, true);
}

void gf__2C_EnableAIToFightOverDragonKnight (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libAIAI_gf_HeroAISetAIDifficultyLevel(lp_player, libAIAI_ge_HeroAIDifficulty_HeroAIElite);
    libAIAI_gf_HeroAIEnableAIForPlayer(lp_player);
}

void gf__2C_AIOffStandStill () {
    // Automatic Variable Declarations
    // Implementation
    TriggerStop(gt__2C_AIOn);
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_03_ORDER1);
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_04_ORDER2);
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_05_ORDER3);
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_06_CHAOS1);
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_07_CHAOS2);
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_08_CHAOS3);
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_09_CHAOS4);
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_10_CHAOS5);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyValla, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyMuradin, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyThrall, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_EnemyArthas, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_EnemySonya, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_EnemyNazeebo, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_EnemySylvanas, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_EnemyKerrigan, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
}

void gf__2C_DragonKnightChallengeCancel () {
    // Automatic Variable Declarations
    // Implementation
    TriggerStop(gt__2C_DragonKnightChallengePreReady);
    TriggerEnable(gt__2C_DragonKnightChallengeFail, false);
    TriggerEnable(gt__2C_DragonKnightChallengeSuccess, false);
    TriggerEnable(gt__2C_DragonKnightReadyButtonClicked, false);
    TriggerEnable(gt__2C_HeroDied, false);
    gf__2C_AIOffStandStill();
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyValla, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyMuradin, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyThrall, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyArthas, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemySonya, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyNazeebo, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemySylvanas, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyKerrigan, true);
    gf_ChallengeFailedWait(gt__2C_DragonKnightChallengeCallbackReset);
    gv__2C_PlayTimes = 0;
}

void gf__2A_CinematicSpawnAndActivateMinion (int lp_player, point lp_loc, string lp_type) {
    // Automatic Variable Declarations
    int autoC01A95E8_val;

    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(1, lp_type, c_unitCreateIgnorePlacement, lp_player, lp_loc, null);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 10.0);
    autoC01A95E8_val = lp_player;
    if (autoC01A95E8_val == libCore_gv_cOMPUTER_TeamOrder) {
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1113)), c_orderQueueReplace);
    }
    else if (autoC01A95E8_val == libCore_gv_cOMPUTER_TeamChaos) {
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1114)), c_orderQueueReplace);
        UnitGroupAdd(gv__2A_EnemyMinions, UnitLastCreated());
    }
    else {
    }
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitGroupAdd(gv__2A_CinematicMinions, UnitLastCreated());
}

void gf__2A_CinematicSpawnMinionsforCutscene () {
    // Automatic Variable Declarations
    // Implementation
    gf__2A_CinematicSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamOrder, PointFromId(1306), "FootmanMinion");
    gf__2A_CinematicSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamOrder, PointFromId(1310), "FootmanMinion");
    gf__2A_CinematicSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamOrder, PointFromId(1311), "FootmanMinion");
    gf__2A_CinematicSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamOrder, PointFromId(1535), "RangedMinion");
    gf__2A_CinematicSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamOrder, PointFromId(1537), "RangedMinion");
    gf__2A_CinematicSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamOrder, PointFromId(1538), "RangedMinion");
    gf__2A_CinematicSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamOrder, PointFromId(1539), "WizardMinion");
    gf__2A_CinematicSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamChaos, PointFromId(1110), "FootmanMinion");
    gf__2A_CinematicSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamChaos, PointFromId(1111), "FootmanMinion");
    gf__2A_CinematicSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamChaos, PointFromId(1112), "RangedMinion");
}

void gf__2B_CineSpawnAndActivateMinion (int lp_player, point lp_loc, string lp_type, bool lp_top) {
    // Automatic Variable Declarations
    int auto7F78C9EB_val;
    int autoEC477F62_val;

    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(1, lp_type, c_unitCreateIgnorePlacement, lp_player, lp_loc, null);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 40.0);
    if ((lp_top == false)) {
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        autoEC477F62_val = lp_player;
        if (autoEC477F62_val == libCore_gv_cOMPUTER_TeamOrder) {
            UnitGroupAdd(gv__2B_CineMinionsBot[1], UnitLastCreated());
        }
        else if (autoEC477F62_val == libCore_gv_cOMPUTER_TeamChaos) {
            UnitGroupAdd(gv__2B_CineMinionsBot[2], UnitLastCreated());
        }
        else {
        }
    }
    else {
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        auto7F78C9EB_val = lp_player;
        if (auto7F78C9EB_val == libCore_gv_cOMPUTER_TeamOrder) {
            UnitGroupAdd(gv__2B_CineMinionsTop[1], UnitLastCreated());
        }
        else if (auto7F78C9EB_val == libCore_gv_cOMPUTER_TeamChaos) {
            UnitGroupAdd(gv__2B_CineMinionsTop[2], UnitLastCreated());
        }
        else {
        }
    }
    UnitGroupAdd(gv__2B_CineMinions, UnitLastCreated());
}

trigger auto_gf__2B_CineSpawnMinionsforCutscene_Trigger = null;

void gf__2B_CineSpawnMinionsforCutscene () {
    if (auto_gf__2B_CineSpawnMinionsforCutscene_Trigger == null) {
        auto_gf__2B_CineSpawnMinionsforCutscene_Trigger = TriggerCreate("auto_gf__2B_CineSpawnMinionsforCutscene_TriggerFunc");
    }

    TriggerExecute(auto_gf__2B_CineSpawnMinionsforCutscene_Trigger, false, false);
}

bool auto_gf__2B_CineSpawnMinionsforCutscene_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamOrder, PointFromId(1133), "FootmanMinion", false);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamOrder, PointFromId(1134), "FootmanMinion", false);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamOrder, PointFromId(1135), "FootmanMinion", false);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamOrder, PointFromId(1139), "WizardMinion", false);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamOrder, PointFromId(1136), "RangedMinion", false);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamOrder, PointFromId(1137), "RangedMinion", false);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamOrder, PointFromId(1138), "RangedMinion", false);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamChaos, PointFromId(1140), "FootmanMinion", false);
    gv__2B_CineXPUnit = UnitLastCreated();
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamChaos, PointFromId(1141), "FootmanMinion", false);
    gv__2B_CineXPUnit2 = UnitLastCreated();
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamChaos, PointFromId(1142), "FootmanMinion", false);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamChaos, PointFromId(1143), "WizardMinion", false);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamChaos, PointFromId(1144), "RangedMinion", false);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamChaos, PointFromId(1145), "RangedMinion", false);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamChaos, PointFromId(1146), "RangedMinion", false);
    UnitGroupIssueOrder(gv__2B_CineMinionsBot[1], OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1130)), c_orderQueueReplace);
    UnitGroupIssueOrder(gv__2B_CineMinionsBot[2], OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1131)), c_orderQueueReplace);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamOrder, PointFromId(1147), "FootmanMinion", true);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamOrder, PointFromId(1148), "FootmanMinion", true);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamOrder, PointFromId(1149), "FootmanMinion", true);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamOrder, PointFromId(1153), "WizardMinion", true);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamOrder, PointFromId(1150), "RangedMinion", true);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamOrder, PointFromId(1151), "RangedMinion", true);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamOrder, PointFromId(1152), "RangedMinion", true);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamChaos, PointFromId(1154), "FootmanMinion", true);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamChaos, PointFromId(1155), "FootmanMinion", true);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamChaos, PointFromId(1156), "FootmanMinion", true);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamChaos, PointFromId(1157), "WizardMinion", true);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamChaos, PointFromId(1158), "RangedMinion", true);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamChaos, PointFromId(1159), "RangedMinion", true);
    gf__2B_CineSpawnAndActivateMinion(libCore_gv_cOMPUTER_TeamChaos, PointFromId(1160), "RangedMinion", true);
    UnitGroupIssueOrder(gv__2B_CineMinionsTop[1], OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1162)), c_orderQueueReplace);
    UnitGroupIssueOrder(gv__2B_CineMinionsTop[2], OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1161)), c_orderQueueReplace);
    return true;
}

void gf__2B_CineFreezeAllMinions (int lp_freezeOptions) {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto95401264_g;
    int auto95401264_u;

    // Variable Initialization

    // Implementation
    auto95401264_g = gv__2B_CineMinions;
    auto95401264_u = UnitGroupCount(auto95401264_g, c_unitCountAll);
    for (;; auto95401264_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto95401264_g, auto95401264_u);
        if (lv_itUnit == null) { break; }
        libStEx_gf_FreezeUnfreezeUnit(lp_freezeOptions, lv_itUnit);
    }
}

void gf_AutomateGardenTerrorChallenge () {
    // Automatic Variable Declarations
    // Implementation
    if ((libStEx_gf_IsthisanAutomatedPlaythrough() == false)) {
        return ;
    }

    TriggerExecute(gt__1A_GardenTerrorChallengePreReady, true, true);
    libStEx_gf_SendEventTutorialPlayerHitsReadyButton();
    while (!((TriggerIsEnabled(gt__1A_GardenTerrorChallengeSuccess) == true))) {
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, OrderTargetingUnit(AbilityCommand("attack", 0), gv__1A_GardenTerror), c_orderQueueReplace);
    Wait(6.0, c_timeGame);
    UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyUther, c_unitPropLife, 1.0);
    while (!((TriggerIsEnabled(gt__1A_GardenTerrorReadyButtonClicked) == true))) {
        Wait(1.0, c_timeGame);
    }
    libStEx_gf_SendEventTutorialPlayerHitsReadyButton();
    while (!((TriggerIsEnabled(gt__1A_GardenTerrorChallengeSuccess) == true))) {
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, OrderTargetingUnit(AbilityCommand("attack", 0), gv__1A_GardenTerror), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    UnitSetPropertyFixed(gv__1A_GardenTerror, c_unitPropLife, 1.0);
}

void gf_AutomateMoshPitChallenge () {
    // Automatic Variable Declarations
    // Implementation
    if ((libStEx_gf_IsthisanAutomatedPlaythrough() == false)) {
        return ;
    }

    libStEx_gf_SendEventTutorialPlayerHitsReadyButton();
    while (!((TriggerIsEnabled(gt__1C_MoshPitChallengeSuccess) == true))) {
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, OrderTargetingUnit(AbilityCommand("attack", 0), libStEx_gv_hERO_EnemyETC), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyTyrael, c_unitPropLife, 1.0);
    while (!((TriggerIsEnabled(gt__1C_MoshPitReadyButtonClicked) == true))) {
        Wait(1.0, c_timeGame);
    }
    libStEx_gf_SendEventTutorialPlayerHitsReadyButton();
    while (!((TriggerIsEnabled(gt__1C_MoshPitChallengeSuccess) == true))) {
        Wait(1.0, c_timeGame);
    }
    UnitBehaviorAdd(libStEx_gv_hERO_PlayerUnit, "Ultimate2Unlocked", libStEx_gv_hERO_PlayerUnit, 1);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, OrderTargetingUnit(AbilityCommand("attack", 0), libStEx_gv_hERO_EnemyETC), c_orderQueueReplace);
    while (!((DistanceBetweenPoints(UnitGetPosition(libStEx_gv_hERO_PlayerUnit), UnitGetPosition(libStEx_gv_hERO_EnemyETC)) <= 9.0))) {
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, OrderTargetingUnit(AbilityCommand("DemonHunterRainOfVengeance", 0), libStEx_gv_hERO_EnemyETC), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1245)), c_orderQueueAddToEnd);
    Wait(4.0, c_timeGame);
    UnitSetPropertyFixed(libStEx_gv_hERO_EnemyETC, c_unitPropLife, 1.0);
    UnitSetPropertyFixed(libStEx_gv_hERO_EnemySonya, c_unitPropLife, 1.0);
    UnitSetPropertyFixed(libStEx_gv_hERO_EnemyNazeebo, c_unitPropLife, 1.0);
}

void gf_AutomateRoamingChallenge () {
    // Variable Declarations
    playergroup lv_orderPlayerGroup;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto9292F8B1_g;

    // Variable Initialization
    lv_orderPlayerGroup = PlayerGroupEmpty();

    // Implementation
    if ((libStEx_gf_IsthisanAutomatedPlaythrough() == false)) {
        return ;
    }

    libStEx_gf_SendEventTutorialPlayerHitsReadyButton();
    while (!((TriggerIsEnabled(gt__1E_RoamingChallengeSuccess) == true))) {
        Wait(1.0, c_timeGame);
    }
    Wait(5.0, c_timeGame);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_PlayerUnit, PointFromId(1143), false);
    UnitSetPropertyFixed(libStEx_gv_hERO_PlayerUnit, c_unitPropLife, 1.0);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, Order(AbilityCommand("ZeratulCleave", 0)), c_orderQueueReplace);
    while (!((TriggerIsEnabled(gt__1E_RoamingReadyButtonClicked) == true))) {
        Wait(1.0, c_timeGame);
    }
    libStEx_gf_SendEventTutorialPlayerHitsReadyButton();
    while (!((TriggerIsEnabled(gt__1E_RoamingChallengeSuccess) == true))) {
        Wait(1.0, c_timeGame);
    }
    Wait(5.0, c_timeGame);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_PlayerUnit, PointFromId(1120), false);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_EnemyGreymane, PointFromId(17), false);
    UnitDamage(libStEx_gv_hERO_PlayerUnit, "CleaveDamage", libStEx_gv_hERO_EnemyGreymane, 2000.0);
    Wait(5.0, c_timeGame);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_PlayerUnit, PointFromId(276870261), false);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_EnemyNazeebo, PointFromId(729), false);
    UnitDamage(libStEx_gv_hERO_PlayerUnit, "CleaveDamage", libStEx_gv_hERO_EnemyNazeebo, 2000.0);
    Wait(5.0, c_timeGame);
    PlayerGroupAdd(lv_orderPlayerGroup, libStEx_gv_pLAYER_01_USER);
    PlayerGroupAdd(lv_orderPlayerGroup, libStEx_gv_pLAYER_02_UTHER);
    PlayerGroupAdd(lv_orderPlayerGroup, libStEx_gv_pLAYER_03_ORDER1);
    auto9292F8B1_g = lv_orderPlayerGroup;
    lv_itPlayer = -1;
    while (true) {
        	lv_itPlayer = PlayerGroupNextPlayer(auto9292F8B1_g, lv_itPlayer);
        	if (lv_itPlayer<0) { break; }
        	libGame_gf_GrantXPToPlayer(5000.0, lv_itPlayer, libGame_ge_XPSources_Trickle);
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libStEx_gt_IncludeStartingExperience, true, false);
    TriggerExecute(gt_Init01Data, true, false);
    TriggerExecute(gt_Init02Unit, true, false);
    TriggerExecute(gt_Init03UI, true, false);
    TriggerExecute(gt_Init04Environment, true, false);
    TriggerExecute(gt_Init05Ally, true, false);
    TriggerExecute(gt_Init06BaseRegions, true, false);
    TriggerExecute(libStEx_gt_TargetDummyInitialize, true, false);
    libGame_gv_gameStarted = true;
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt__1A_StartGameQ, true, false);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_AutoTestTrigger, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Players
//--------------------------------------------------------------------------------------------------
bool gt_InitPlayers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroIndex = libCore_gf_GetIndexFromHero("DemonHunter");
    libGame_gv_players[libStEx_gv_pLAYER_02_UTHER].lv_heroIndex = libCore_gf_GetIndexFromHero("Uther");
    libGame_gv_heroPickDone = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitPlayers_Init () {
    gt_InitPlayers = TriggerCreate("gt_InitPlayers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01Data_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameCheatAllow(c_gameCheatVictory, false);
    GameCheatAllow(c_gameCheatDefeat, false);
    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetSpeedLocked(true);
    ConversationDataPreloadLines("TutorialVO");
    libGame_gv_pickingHeroesCallback = gt_InitPlayers;
    libCore_gv_sYSGameMode = libCore_ge_GameModes_TutorialVeteran;
    libCore_gv_sYSStartGame = false;
    libCore_gv_sYSTalentsOn = true;
    libCore_gv_sYSXPOn = false;
    libUIUI_gv_floatingCombatText_SuppressLeashingText = true;
    libGame_gv_talents_PlayChooseATalentSound = false;
    libGame_gv_announcement_SystemEnabled = false;
    libGame_gv_suppressInitialHeroSpawnFX = true;
    libGame_gv_heroDeath_RespawnMounted = false;
    libUIUI_gv_uIHealingFountainsHelpTextEnabled = false;
    libCore_gv_bALDeathTimeOverride = 60.0;
    AISetFollowPingDisabled(true);
    TimerStart(libGame_gv_gameTimer, c_timerDurationInfinite, false, c_timeGame);
    SetTalentsEnabled(false);
    libGame_gf_MinionTurnOnOffCatapults(false);
    SetTalentEnabled("AbathurCombatStyleSurvivalInstincts", false);
    SetTalentEnabled("GenericTalentCalldownMULE", false);
    SetTalentEnabled("AbathurSymbioteCarapaceNetworkedCarapace", false);
    SetTalentEnabled("AbathurHeroicAbilityEvolveMonstrosity", false);
    TriggerExecute(gt_StormInitializeMap, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Data_Init () {
    gt_Init01Data = TriggerCreate("gt_Init01Data_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Unit
//--------------------------------------------------------------------------------------------------
bool gt_Init02Unit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_position;
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto8F391C9F_g;
    int auto8F391C9F_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libGame_gt_ConfineHeroesToBaseUntilCountdownEnds, false);
    libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_spawnPoint = PointFromId(7);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("DemonHunter"), 1, 1, 0.0, libStEx_gv_pLAYER_01_USER, 0);
    libStEx_gv_hERO_PlayerUnit = libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit;
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, false);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, false);
    SetTalentsEnabled(true);
    UnitAbilityEnable(libStEx_gv_hERO_PlayerUnit, "Hearthstone", false);
    PlayerSetState(libStEx_gv_pLAYER_01_USER, c_playerStateFidgetingEnabled, false);
    libGame_gv_players[libStEx_gv_pLAYER_02_UTHER].lv_selectedSkin = 1;
    libGame_gv_players[libStEx_gv_pLAYER_02_UTHER].lv_spawnPoint = PointFromId(775);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Uther"), 1, 1, 0.0, libStEx_gv_pLAYER_02_UTHER, 0);
    libStEx_gv_hERO_FriendlyUther = libGame_gv_players[libStEx_gv_pLAYER_02_UTHER].lv_heroUnit;
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyUther, true);
    lv_position = UnitGetPosition(libStEx_gv_hERO_FriendlyUther);
    PointSetFacing(lv_position, UnitGetFacing(libStEx_gv_hERO_FriendlyUther));
    libCore_gf_StorePointForUnit(libStEx_gv_hERO_FriendlyUther, 1, lv_position);
    PlayerSetState(libStEx_gv_pLAYER_02_UTHER, c_playerStateFidgetingEnabled, false);
    libGame_gv_players[libCore_gv_cOMPUTER_Hostile].lv_portraitIcon = "Assets\\Textures\\storm_ui_icon_vehicle_gardenterror.dds";
    gv__1A_GardenTerror = UnitFromId(769);
    libNtve_gf_ShowHideUnit(gv__1A_GardenTerror, false);
    libNtve_gf_PauseUnit(gv__1A_GardenTerror, true);
    gv__1D_Keep = UnitFromId(337);
    gv__1D_Fountain = UnitFromId(65);
    auto8F391C9F_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8F391C9F_u = UnitGroupCount(auto8F391C9F_g, c_unitCountAll);
    for (;; auto8F391C9F_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto8F391C9F_g, auto8F391C9F_u);
        if (lv_itUnit == null) { break; }
        if ((libGame_gf_TownGetTownStructurePresetFromUnit(lv_itUnit) == libGame_ge_TownStructureTypes_Gate) && (lv_itUnit != UnitFromId(360))) {
            libNtve_gf_SendActorMessageToUnit(lv_itUnit, "ModelSwap TownGateL2 1");
            libNtve_gf_SendActorMessageToUnit(lv_itUnit, "AnimBracketStart GL_BSD GLbirth GLstand GLdeath FullMatch");
        }
        else if (((UnitGetType(lv_itUnit) == "TownCannonTowerL3") || (UnitGetType(lv_itUnit) == "TownCannonTowerL3Standalone"))) {
            libNtve_gf_SendActorMessageToUnit(lv_itUnit, "ModelSwap TownTowerL3KingsCrest");
        }
        else if ((libGame_gf_TownGetTownStructurePresetFromUnit(lv_itUnit) == libGame_ge_TownStructureTypes_CannonTower)) {
            UnitBehaviorAdd(lv_itUnit, "TowerEnergyInfiniteRegen", lv_itUnit, 1);
        }
        else if ((UnitGetType(lv_itUnit) == "TownTownHallL3")) {
            libNtve_gf_SendActorMessageToUnit(lv_itUnit, "ModelSwap TownTownHallL3");
        }
        else if (((UnitGetType(lv_itUnit) == "KingsCore"))) {
            libNtve_gf_SendActorMessageToUnit(lv_itUnit, "Signal CoreBuild");
        }
    }
    UnitKill(UnitFromId(345));
    UnitKill(UnitFromId(338));
    gv__1D_Remaining_Structures = UnitGroup(null, c_playerAny, RegionFromId(2), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gf__1D_InitTownStructuresInfo();
    gf_InitTownStructuresInfo();
    libNtve_gf_SendActorMessageToUnit(UnitFromId(418), "ModelSwap HealingDummy");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(1098), "ModelSwap HealingDummy");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Unit_Init () {
    gt_Init02Unit = TriggerCreate("gt_Init02Unit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 UI
//--------------------------------------------------------------------------------------------------
bool gt_Init03UI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(libStEx_gv_pLAYER_01_USER, libCore_gv_cOMPUTER_TeamOrder, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(libStEx_gv_pLAYER_06_CHAOS1, libCore_gv_cOMPUTER_TeamChaos, libNtve_ge_AllianceSetting_Ally);
    UnitSetPropertyFixed(libStEx_gv_hERO_PlayerUnit, c_unitPropXP, 0.0);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ChatDisplay");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 200);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ObjectivePanel");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 50, 580);
    SetTalentTreePauseGameWhenSelectionPanelShown(false);
    SetTalentTreeSelectionPanelAutoShow(false);
    libUIUI_gf_UIPartyFrameShowHidePartyFramePanelForPlayer(false, libStEx_gv_pLAYER_01_USER);
    DialogControlSetEnabled(libUIUI_gv_uIGameUIHandles.lv_targetInfoPanel, PlayerGroupAll(), false);
    libStEx_gf_LockUnlockTutorialCamera(false);
    SetHeroLeaderPanelEnabled(false);
    DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_castChannelBarParentFrame, PlayerGroupAll(), true);
    DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_castChannelBarParentFrame, PlayerGroupSingle(libCore_gv_oBSERVER_ObserverUIPlayer), false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "WorldPanel/UnitStatusPanel");
    gv_unitStatusPanel = DialogControlLastCreated();
    TriggerExecute(libStEx_gt_TutorialVeteranPanelInitialize, true, false);
    libStEx_gf_TutorialVeteranShowHideDummyPanel(false);
    libStEx_gf_TutorialVeteranShowHideReadyButton(false);
    libStEx_gf_TutorialVeteranShowHideRespecButton(false);
    libStEx_gf_TutorialVeteranShowHideRetryButton(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03UI_Init () {
    gt_Init03UI = TriggerCreate("gt_Init03UI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init04Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("StormKingsCrestALL", 0.0);
    GameSetBackground(c_backgroundTerrain, null, 100.0);
    ConversationDataPreloadLines("TutorialVO");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Environment_Init () {
    gt_Init04Environment = TriggerCreate("gt_Init04Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Ally
//--------------------------------------------------------------------------------------------------
bool gt_Init05Ally_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayerEnemy;

    // Automatic Variable Declarations
    playergroup auto8EF91213_g;
    int auto8EF91213_var;
    playergroup auto1EAB0647_g;
    playergroup autoDD36CF4E_g;
    int autoDD36CF4E_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto8EF91213_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
    auto8EF91213_var = -1;
    while (true) {
        	auto8EF91213_var = PlayerGroupNextPlayer(auto8EF91213_g, auto8EF91213_var);
        	if (auto8EF91213_var<0) { break; }
        	PlayerSetAlliance(libCore_gv_cOMPUTER_TeamChaos, c_allianceIdPower, auto8EF91213_var, true);
        libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_TeamOrder, auto8EF91213_var, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        PlayerSetColorIndex(auto8EF91213_var, libCore_gv_cOLOROrderPlayerColor, true);
        auto1EAB0647_g = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup;
        lv_itPlayerEnemy = -1;
        while (true) {
            	lv_itPlayerEnemy = PlayerGroupNextPlayer(auto1EAB0647_g, lv_itPlayerEnemy);
            	if (lv_itPlayerEnemy<0) { break; }
            	libNtve_gf_SetAlliance(auto8EF91213_var, lv_itPlayerEnemy, libNtve_ge_AllianceSetting_Enemy);
        }
        libNtve_gf_SetAlliance(auto8EF91213_var, libCore_gv_oBSERVER_ObserverUIPlayer, libNtve_ge_AllianceSetting_Ally);
        PlayerSetAlliance(auto8EF91213_var, c_allianceIdVision, libCore_gv_oBSERVER_ObserverUIPlayer, true);
        if ((auto8EF91213_var != libCore_gv_cOMPUTER_TeamOrder)) {
            libNtve_gf_SetAlliance(auto8EF91213_var, libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Enemy);
            PlayerSetAlliance(libCore_gv_cOMPUTER_TeamOrder, c_allianceIdSeekHelp, auto8EF91213_var, false);
            PlayerSetAlliance(libCore_gv_cOMPUTER_TeamOrder, c_allianceIdPower, auto8EF91213_var, true);
        }

    }
    autoDD36CF4E_g = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup;
    autoDD36CF4E_var = -1;
    while (true) {
        	autoDD36CF4E_var = PlayerGroupNextPlayer(autoDD36CF4E_g, autoDD36CF4E_var);
        	if (autoDD36CF4E_var<0) { break; }
        	PlayerSetAlliance(libCore_gv_cOMPUTER_TeamOrder, c_allianceIdPower, autoDD36CF4E_var, true);
        libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_TeamChaos, autoDD36CF4E_var, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        PlayerSetColorIndex(autoDD36CF4E_var, libCore_gv_cOLORChaosPlayerColor, true);
        libNtve_gf_SetAlliance(autoDD36CF4E_var, libCore_gv_oBSERVER_ObserverUIPlayer, libNtve_ge_AllianceSetting_Enemy);
        PlayerSetAlliance(autoDD36CF4E_var, c_allianceIdVision, libCore_gv_oBSERVER_ObserverUIPlayer, true);
        if ((autoDD36CF4E_var != libCore_gv_cOMPUTER_TeamChaos)) {
            libNtve_gf_SetAlliance(autoDD36CF4E_var, libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Enemy);
            PlayerSetAlliance(libCore_gv_cOMPUTER_TeamChaos, c_allianceIdSeekHelp, autoDD36CF4E_var, false);
            PlayerSetAlliance(libCore_gv_cOMPUTER_TeamChaos, c_allianceIdPower, autoDD36CF4E_var, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Ally_Init () {
    gt_Init05Ally = TriggerCreate("gt_Init05Ally_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Base Regions
//--------------------------------------------------------------------------------------------------
bool gt_Init06BaseRegions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06BaseRegions_Init () {
    gt_Init06BaseRegions = TriggerCreate("gt_Init06BaseRegions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hookup Lane Data
//--------------------------------------------------------------------------------------------------
bool gt_HookupLaneData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HookupLaneData_Init () {
    gt_HookupLaneData = TriggerCreate("gt_HookupLaneData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hookup Town Data
//--------------------------------------------------------------------------------------------------
bool gt_HookupTownData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HookupTownData_Init () {
    gt_HookupTownData = TriggerCreate("gt_HookupTownData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Storm - Initialize Map
//--------------------------------------------------------------------------------------------------
bool gt_StormInitializeMap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libAIAI_gt_IncludeAI, true, false);
    TriggerExecute(libGame_gt_IncludeGame, true, false);
    TriggerExecute(libGDHL_gt_IncludeGameDataHelper, true, false);
    TriggerExecute(libMapM_gt_IncludeMapMechanics, true, false);
    TriggerExecute(libSond_gt_IncludeSound, true, false);
    TriggerExecute(libSprt_gt_IncludeSupport, true, false);
    TriggerExecute(libUIUI_gt_IncludeUI, true, false);
    TriggerExecute(gt_StormHookupGlobalVariables, true, false);
    libCore_gv_sYSTowns = true;
    libCore_gv_sYSJungleCreepCamps = false;
    libCore_gv_sYSJungleWatchTowers = false;
    libCore_gv_sYSTowerAI = true;
    libCore_gv_sYSMinionAI = false;
    libSond_gv_heroVO_Enabled = false;
    TriggerExecute(libCore_gt_InitializeStormMod, true, false);
    TriggerExecute(libGame_gt_RunAnimations, true, false);
    libCore_gf_DataAnnouncerVOSetDefaultAnnouncerForPlayerGroup(PlayerGroupAll(), "Default");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StormInitializeMap_Init () {
    gt_StormInitializeMap = TriggerCreate("gt_StormInitializeMap_Func");
    TriggerEnable(gt_StormInitializeMap, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Storm - Hookup Global Variables
//--------------------------------------------------------------------------------------------------
bool gt_StormHookupGlobalVariables_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_mAPMapStringID = "TutorialVeteran";
    libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core = UnitFromId(154);
    libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core = UnitFromId(918);
    libCore_gv_mAPOrderBaseRegion = RegionFromId(5);
    libCore_gv_mAPChaosBaseRegion = RegionFromId(6);
    libCore_gv_mAPExploredRegion = RegionPlayableMap();
    libCore_gv_mAPMapSoundtrack[0] = "Storm_Music_Tutorial_Main";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StormHookupGlobalVariables_Init () {
    gt_StormHookupGlobalVariables = TriggerCreate("gt_StormHookupGlobalVariables_Func");
    TriggerEnable(gt_StormHookupGlobalVariables, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Storm - Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StormStartGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto2C07EE6A_ae = libCore_gv_bALMaxPlayers;
    const int auto2C07EE6A_ai = 1;
    const int autoE9D8EA7C_ae = libCore_gv_bALMaxTeams;
    const int autoE9D8EA7C_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAIStartAI();
    TimerStart(libGame_gv_openTheGatesTimer, 0.0625, false, c_timeGame);
    TimerStart(libGame_gv_totalTime, c_timerDurationInfinite, false, c_timeGame);
    libGame_gf_HeroSelectionSetBNetHeroAndSkinSelectionsForAllPlayers();
    libAIAI_gf_HeroAIGeneralPreInit();
    lv_itPlayer = 1;
    for ( ; ( (auto2C07EE6A_ai >= 0 && lv_itPlayer <= auto2C07EE6A_ae) || (auto2C07EE6A_ai < 0 && lv_itPlayer >= auto2C07EE6A_ae) ) ; lv_itPlayer += auto2C07EE6A_ai ) {
        libGame_gv_players[lv_itPlayer].lv_heroIndex = 0;
    }
    libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroIndex = libCore_gf_GetIndexFromHero("Raynor");
    libGame_gv_players[libStEx_gv_pLAYER_02_UTHER].lv_heroIndex = libCore_gf_GetIndexFromHero("Uther");
    libGame_gv_players[libStEx_gv_pLAYER_06_CHAOS1].lv_heroIndex = libCore_gf_GetIndexFromHero("Diablo");
    libGame_gv_players[libStEx_gv_pLAYER_07_CHAOS2].lv_heroIndex = libCore_gf_GetIndexFromHero("Stitches");
    lv_itTeam = 1;
    for ( ; ( (autoE9D8EA7C_ai >= 0 && lv_itTeam <= autoE9D8EA7C_ae) || (autoE9D8EA7C_ai < 0 && lv_itTeam >= autoE9D8EA7C_ae) ) ; lv_itTeam += autoE9D8EA7C_ai ) {
        libGame_gf_PreloadHeroesForTeam(lv_itTeam);
    }
    Wait(libGame_gv_heroSpawnDelay_C, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StormStartGame_Init () {
    gt_StormStartGame = TriggerCreate("gt_StormStartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Temp
//--------------------------------------------------------------------------------------------------
bool gt_DebugTemp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugTemp_Init () {
    gt_DebugTemp = TriggerCreate("gt_DebugTemp_Func");
    TriggerAddEventChatMessage(gt_DebugTemp, c_playerAny, "-te", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_Challenges
//--------------------------------------------------------------------------------------------------
bool gt_Debug_Challenges_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_challengeNext;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_challengeNext = ge_Challenges__None;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Debug_DisplayChallengeDialog, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_Challenges_Init () {
    gt_Debug_Challenges = TriggerCreate("gt_Debug_Challenges_Func");
    TriggerAddEventChatMessage(gt_Debug_Challenges, c_playerAny, "-CHALLENGE", true);
    TriggerAddEventChatMessage(gt_Debug_Challenges, c_playerAny, "-CH", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_DisplayChallengeDialog
//--------------------------------------------------------------------------------------------------
bool gt_Debug_DisplayChallengeDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_parentPanel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_parentPanel = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerInCinematicMode(libStEx_gv_pLAYER_01_USER) == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/1E45BEAD"));
        return true;
    }

    if ((gv_debug_ChallengeDlg == c_invalidDialogId)) {
        DialogCreate(350, 535, c_anchorTopRight, 400, 25, true);
        gv_debug_ChallengeDlg = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
        lv_parentPanel = DialogControlLastCreated();
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlCreateInPanelFromTemplate(lv_parentPanel, c_triggerControlTypePanel, "Tutorial01_GameUI/ChallengeJumpFrame");
        lv_parentPanel = DialogControlLastCreated();
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        DialogControlHookup(lv_parentPanel, c_triggerControlTypeButton, "Challenge1");
        gv_debug_ChallengeDlgLevelTerror = DialogControlLastCreated();
        DialogControlHookup(lv_parentPanel, c_triggerControlTypeButton, "Challenge2");
        gv_debug_ChallengeDlgLevelMoshPit = DialogControlLastCreated();
        DialogControlHookup(lv_parentPanel, c_triggerControlTypeButton, "Challenge3");
        gv_debug_ChallengeDlgLevelRoaming = DialogControlLastCreated();
        DialogControlHookup(lv_parentPanel, c_triggerControlTypeButton, "Cancel");
        gv_debug_ChallengeDlgCancel = DialogControlLastCreated();
        gv_debug_ChallengeDlgLevelKeepDefense = DialogControlLastCreated();
    }

    DialogSetVisible(gv_debug_ChallengeDlg, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_DisplayChallengeDialog_Init () {
    gt_Debug_DisplayChallengeDialog = TriggerCreate("gt_Debug_DisplayChallengeDialog_Func");
    TriggerAddEventChatMessage(gt_Debug_DisplayChallengeDialog, c_playerAny, "-Next", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_ChallengeDialogButtonClickedTerror
//--------------------------------------------------------------------------------------------------
bool gt_Debug_ChallengeDialogButtonClickedTerror_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((EventDialogControl() == gv_debug_ChallengeDlgLevelTerror))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Debug_ResetCurrentTrial();
    libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_spawnPoint = PointFromId(7);
    libGame_gv_players[libStEx_gv_pLAYER_02_UTHER].lv_spawnPoint = PointFromId(775);
    libStEx_gf_SwaptoNewHeroforPlayer(libStEx_gv_pLAYER_01_USER, "DemonHunter", 1);
    libStEx_gv_hERO_PlayerUnit = libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit;
    libStEx_gf_SwaptoNewHeroforPlayer(libStEx_gv_pLAYER_02_UTHER, "Uther", 1);
    libStEx_gv_hERO_FriendlyUther = libGame_gv_players[libStEx_gv_pLAYER_02_UTHER].lv_heroUnit;
    gv__1A_BossActivated = false;
    UnitCreate(1, "JunglePlantHorror", c_unitCreateIgnorePlacement, 15, PointFromId(819), PointGetFacing(PointFromId(819)), null);
    gv__1A_GardenTerror = UnitLastCreated();
    libNtve_gf_ShowHideUnit(gv__1A_GardenTerror, false);
    libNtve_gf_PauseUnit(gv__1A_GardenTerror, true);
    TriggerEnable(gt__1A_TalentsPanelOpened, true);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt__1A_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_ChallengeDialogButtonClickedTerror_Init () {
    gt_Debug_ChallengeDialogButtonClickedTerror = TriggerCreate("gt_Debug_ChallengeDialogButtonClickedTerror_Func");
    TriggerAddEventDialogControl(gt_Debug_ChallengeDialogButtonClickedTerror, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_ChallengeDialogButtonClickedMoshPit
//--------------------------------------------------------------------------------------------------
bool gt_Debug_ChallengeDialogButtonClickedMoshPit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((EventDialogControl() == gv_debug_ChallengeDlgLevelMoshPit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Debug_ResetCurrentTrial();
    libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_spawnPoint = PointFromId(1293);
    libGame_gv_players[libStEx_gv_pLAYER_02_UTHER].lv_spawnPoint = PointFromId(1292);
    libStEx_gf_SwaptoNewHeroforPlayer(libStEx_gv_pLAYER_01_USER, "DemonHunter", 1);
    libStEx_gv_hERO_PlayerUnit = libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit;
    libStEx_gf_SwaptoNewHeroforPlayer(libStEx_gv_pLAYER_02_UTHER, "Uther", 1);
    libStEx_gv_hERO_FriendlyUther = libGame_gv_players[libStEx_gv_pLAYER_02_UTHER].lv_heroUnit;
    TriggerExecute(gt__1C_MoshPitQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_ChallengeDialogButtonClickedMoshPit_Init () {
    gt_Debug_ChallengeDialogButtonClickedMoshPit = TriggerCreate("gt_Debug_ChallengeDialogButtonClickedMoshPit_Func");
    TriggerAddEventDialogControl(gt_Debug_ChallengeDialogButtonClickedMoshPit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_ChallengeDialogButtonClickedKeepDefense
//--------------------------------------------------------------------------------------------------
bool gt_Debug_ChallengeDialogButtonClickedKeepDefense_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((EventDialogControl() == gv_debug_ChallengeDlgLevelKeepDefense))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Debug_ResetCurrentTrial();
    libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_spawnPoint = PointFromId(299);
    libStEx_gf_SwaptoNewHeroforPlayer(libStEx_gv_pLAYER_01_USER, "DemonHunter", 1);
    libStEx_gv_hERO_PlayerUnit = libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit;
    TriggerExecute(gt__1D_AOEQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_ChallengeDialogButtonClickedKeepDefense_Init () {
    gt_Debug_ChallengeDialogButtonClickedKeepDefense = TriggerCreate("gt_Debug_ChallengeDialogButtonClickedKeepDefense_Func");
    TriggerAddEventDialogControl(gt_Debug_ChallengeDialogButtonClickedKeepDefense, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_ChallengeDialogButtonClickedRoaming
//--------------------------------------------------------------------------------------------------
bool gt_Debug_ChallengeDialogButtonClickedRoaming_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((EventDialogControl() == gv_debug_ChallengeDlgLevelRoaming))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Debug_ResetCurrentTrial();
    TriggerExecute(gt__1E_RoamingQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_ChallengeDialogButtonClickedRoaming_Init () {
    gt_Debug_ChallengeDialogButtonClickedRoaming = TriggerCreate("gt_Debug_ChallengeDialogButtonClickedRoaming_Func");
    TriggerAddEventDialogControl(gt_Debug_ChallengeDialogButtonClickedRoaming, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_ChallengeDialogButtonClickedHelpAlly
//--------------------------------------------------------------------------------------------------
bool gt_Debug_ChallengeDialogButtonClickedHelpAlly_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((EventDialogControl() == gv_debug_ChallengeDlgLevelHelpAlly))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Debug_ResetCurrentTrial();
    TriggerExecute(gt__2A_EscapeQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_ChallengeDialogButtonClickedHelpAlly_Init () {
    gt_Debug_ChallengeDialogButtonClickedHelpAlly = TriggerCreate("gt_Debug_ChallengeDialogButtonClickedHelpAlly_Func");
    TriggerAddEventDialogControl(gt_Debug_ChallengeDialogButtonClickedHelpAlly, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_ChallengeDialogButtonClickedFinalFight
//--------------------------------------------------------------------------------------------------
bool gt_Debug_ChallengeDialogButtonClickedFinalFight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((EventDialogControl() == gv_debug_ChallengeDlgLevelFinalFight))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Debug_ResetCurrentTrial();
    TriggerExecute(gt__2C_DragonKnightQ, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_ChallengeDialogButtonClickedFinalFight_Init () {
    gt_Debug_ChallengeDialogButtonClickedFinalFight = TriggerCreate("gt_Debug_ChallengeDialogButtonClickedFinalFight_Func");
    TriggerAddEventDialogControl(gt_Debug_ChallengeDialogButtonClickedFinalFight, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_ChallengeDialogButtonClickedCancel
//--------------------------------------------------------------------------------------------------
bool gt_Debug_ChallengeDialogButtonClickedCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((EventDialogControl() == gv_debug_ChallengeDlgCancel))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_debug_ChallengeDlg, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_ChallengeDialogButtonClickedCancel_Init () {
    gt_Debug_ChallengeDialogButtonClickedCancel = TriggerCreate("gt_Debug_ChallengeDialogButtonClickedCancel_Func");
    TriggerAddEventDialogControl(gt_Debug_ChallengeDialogButtonClickedCancel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves Game Messages
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeavesGameMessages_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    StatEventCreate("Challenge 1");
    StatEventAddDataString(StatEventLastCreated(), "Challenge", "Valla DPS");
    StatEventAddDataString(StatEventLastCreated(), "Stage", "1");
    if ((gv__1A_Complete == true)) {
        StatEventAddDataString(StatEventLastCreated(), "Complete", "True");
    }
    else {
        StatEventAddDataString(StatEventLastCreated(), "Complete", "False");
    }
    if ((gv__1A_CinematicSkipped == true)) {
        StatEventAddDataString(StatEventLastCreated(), "CinematicSkipped", "True");
    }
    else {
        StatEventAddDataString(StatEventLastCreated(), "CinematicSkipped", "False");
    }
    StatEventAddDataInt(StatEventLastCreated(), "Attempts", gv__1A_PlayTimes);
    StatEventSend(StatEventLastCreated());
    StatEventCreate("Challenge 2");
    StatEventAddDataString(StatEventLastCreated(), "Challenge", "Valla Mosh Pit");
    StatEventAddDataString(StatEventLastCreated(), "Stage", "2");
    if ((gv__1C_Complete == true)) {
        StatEventAddDataString(StatEventLastCreated(), "Complete", "True");
    }
    else {
        StatEventAddDataString(StatEventLastCreated(), "Complete", "False");
    }
    if ((gv__1C_CinematicSkipped == true)) {
        StatEventAddDataString(StatEventLastCreated(), "CinematicSkipped", "True");
    }
    else {
        StatEventAddDataString(StatEventLastCreated(), "CinematicSkipped", "False");
    }
    StatEventAddDataInt(StatEventLastCreated(), "Attempts", gv__1C_PlayTimes);
    StatEventSend(StatEventLastCreated());
    StatEventCreate("Challenge 3");
    StatEventAddDataString(StatEventLastCreated(), "Challenge", "Zeratul Roaming");
    StatEventAddDataString(StatEventLastCreated(), "Stage", "3");
    if ((gv__1E_Complete == true)) {
        StatEventAddDataString(StatEventLastCreated(), "Complete", "True");
    }
    else {
        StatEventAddDataString(StatEventLastCreated(), "Complete", "False");
    }
    if ((gv__1E_CinematicSkipped == true)) {
        StatEventAddDataString(StatEventLastCreated(), "CinematicSkipped", "True");
    }
    else {
        StatEventAddDataString(StatEventLastCreated(), "CinematicSkipped", "False");
    }
    StatEventAddDataInt(StatEventLastCreated(), "Attempts", gv__1E_PlayTimes);
    StatEventSend(StatEventLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeavesGameMessages_Init () {
    gt_PlayerLeavesGameMessages = TriggerCreate("gt_PlayerLeavesGameMessages_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeavesGameMessages, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Challenge Start Hide Screen Image
//--------------------------------------------------------------------------------------------------
bool gt_ChallengeStartHideScreenImage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    Wait(1.0, c_timeGame);
    libNtve_gf_HideScreenImage2(false, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChallengeStartHideScreenImage_Init () {
    gt_ChallengeStartHideScreenImage = TriggerCreate("gt_ChallengeStartHideScreenImage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Reference Card - Move
//--------------------------------------------------------------------------------------------------
bool gt_AddReferenceCardMove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    libUIUI_gf_AddTutorialReferenceItemPreset(libUIUI_ge_TutorialReferenceItem_Move);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddReferenceCardMove_Init () {
    gt_AddReferenceCardMove = TriggerCreate("gt_AddReferenceCardMove_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Reference Card - Attack
//--------------------------------------------------------------------------------------------------
bool gt_AddReferenceCardAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    libUIUI_gf_AddTutorialReferenceItemPreset(libUIUI_ge_TutorialReferenceItem_Attack);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddReferenceCardAttack_Init () {
    gt_AddReferenceCardAttack = TriggerCreate("gt_AddReferenceCardAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Reference Card - Penetrating Round
//--------------------------------------------------------------------------------------------------
bool gt_AddReferenceCardPenetratingRound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    libUIUI_gf_AddTutorialReferenceItemPreset(libUIUI_ge_TutorialReferenceItem_PenetratingRound);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddReferenceCardPenetratingRound_Init () {
    gt_AddReferenceCardPenetratingRound = TriggerCreate("gt_AddReferenceCardPenetratingRound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Reference Card - Inspire
//--------------------------------------------------------------------------------------------------
bool gt_AddReferenceCardInspire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    libUIUI_gf_AddTutorialReferenceItemPreset(libUIUI_ge_TutorialReferenceItem_Inspire);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddReferenceCardInspire_Init () {
    gt_AddReferenceCardInspire = TriggerCreate("gt_AddReferenceCardInspire_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Reference Card - Camera
//--------------------------------------------------------------------------------------------------
bool gt_AddReferenceCardCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    libUIUI_gf_AddTutorialReferenceItemPreset(libUIUI_ge_TutorialReferenceItem_Camera);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddReferenceCardCamera_Init () {
    gt_AddReferenceCardCamera = TriggerCreate("gt_AddReferenceCardCamera_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TwoLane_Hookup Lane Data
//--------------------------------------------------------------------------------------------------
bool gt_TwoLane_HookupLaneData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_structureCount;
    int lv_waypointCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_laneCount = 0;
    libGame_gv_laneCount += 1;
    lv_waypointCount = 0;
    libGame_gv_laneData[libGame_gv_laneCount].lv_laneName = StringExternal("Param/Value/682597F1");
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(1126);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(130);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(137);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(410);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(727);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(728);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(729);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(730);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(731);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(733);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(734);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(737);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(1127);
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypointCount = lv_waypointCount;
    libGame_gv_laneCount += 1;
    lv_waypointCount = 0;
    libGame_gv_laneData[libGame_gv_laneCount].lv_laneName = StringExternal("Param/Value/9A313C14");
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(1126);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(129);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(128);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(127);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(126);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(18);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(17);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(15);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(13);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(4);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(14);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(1128);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(1127);
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypointCount = lv_waypointCount;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TwoLane_HookupLaneData_Init () {
    gt_TwoLane_HookupLaneData = TriggerCreate("gt_TwoLane_HookupLaneData_Func");
    TriggerEnable(gt_TwoLane_HookupLaneData, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TwoLane_Hookup Town Data
//--------------------------------------------------------------------------------------------------
bool gt_TwoLane_HookupTownData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lane;
    int lv_town;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_town = 0;
    lv_lane = 1;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(18);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = false;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(19);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = false;
    lv_lane = 2;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(15);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = false;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(20);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = false;
    libGame_gv_townTownCount = lv_town;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TwoLane_HookupTownData_Init () {
    gt_TwoLane_HookupTownData = TriggerCreate("gt_TwoLane_HookupTownData_Func");
    TriggerEnable(gt_TwoLane_HookupTownData, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TwoLane_Hookup Region Data
//--------------------------------------------------------------------------------------------------
bool gt_TwoLane_HookupRegionData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gf_MapSetRepulseRegion(libGame_gv_teamChaosIndex_C, RegionFromId(24), PointFromId(1905), PointFromId(1906), PointFromId(1907), null);
    libMapM_gf_MapSetSafeRegion(libGame_gv_teamOrderIndex_C, RegionFromId(64));
    libMapM_gf_MapSetSafeRegion(libGame_gv_teamChaosIndex_C, RegionFromId(24));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TwoLane_HookupRegionData_Init () {
    gt_TwoLane_HookupRegionData = TriggerCreate("gt_TwoLane_HookupRegionData_Func");
    TriggerEnable(gt_TwoLane_HookupRegionData, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TwoLane_Initialize Lanes
//--------------------------------------------------------------------------------------------------
bool gt_TwoLane_InitializeLanes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_TwoLane_HookupLaneData, true, false);
    TriggerExecute(gt_TwoLane_HookupTownData, true, false);
    TriggerExecute(gt_TwoLane_HookupRegionData, true, false);
    TriggerExecute(libGame_gt_InitializeGameSystems, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TwoLane_InitializeLanes_Init () {
    gt_TwoLane_InitializeLanes = TriggerCreate("gt_TwoLane_InitializeLanes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1A_Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt__1A_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_challengeCurrent = ge_Challenges_GardenTerror;
    libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_spawnPoint = PointFromId(771);
    libGame_gv_players[libStEx_gv_pLAYER_02_UTHER].lv_spawnPoint = PointFromId(772);
    TriggerExecute(gt__1A_GardenTerrorChallengeBalance, true, false);
    gf__1A_Damage_Adjustment();
    SetTalentHighlighted("DemonHunterMasteryMonsterHunterHungeringArrow", true);
    SetTalentHighlighted("DemonHunterCreedoftheHunter", true);
    SetTalentHighlighted("DemonHunterMasteryRepeatingArrowVault", true);
    UnitBehaviorAddPlayer(libStEx_gv_hERO_PlayerUnit, "HeroGenericPregameAbilitySuppression", libStEx_gv_pLAYER_01_USER, 1);
    TriggerQueueEnter();
    if ((gv__1A_TalentPanelOpened == false)) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00612", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
        if ((gv__1A_TalentPanelOpened == false)) {
            libStEx_gf_SE_ShowHideTalentPortraitFlashingImage(true);
            Wait(2.5, c_timeGame);
            if ((gv__1A_TalentPanelOpened == false)) {
                libStEx_gf_DisplayHintMessage(StringExternal("Param/Value/E1519445"), true, 1.0);
            }

        }

    }

    TriggerQueueExit();
    gf_AutomateGardenTerrorChallenge();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1A_StartGameQ_Init () {
    gt__1A_StartGameQ = TriggerCreate("gt__1A_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1A_Talents Panel - Flash Talents
//--------------------------------------------------------------------------------------------------
bool gt__1A_TalentsPanelFlashTalents_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer\\ConsoleUIContainer\\HeroTalentTreeSelectionPanel\\TalentTreePanel\\TutorialTalentHighlight");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    while (!((libStEx_gv_sE_TrainingModeTalentPicked == true))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1A_TalentsPanelFlashTalents_Init () {
    gt__1A_TalentsPanelFlashTalents = TriggerCreate("gt__1A_TalentsPanelFlashTalents_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1A_Talents Panel Opened
//--------------------------------------------------------------------------------------------------
bool gt__1A_TalentsPanelOpened_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SE_ShowHideTalentPortraitFlashingImage(false);
    gv__1A_TalentPanelOpened = true;
    TriggerEnable(gt__1A_TalentsPicked, true);
    TransmissionClearGroup(PlayerGroupSingle(libStEx_gv_pLAYER_01_USER));
    libStEx_gf_ClearHintMessage();
    TriggerExecute(gt__1A_TalentsPanelFlashTalents, true, false);
    TriggerQueueEnter();
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00611", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((gv__1A_TalentPicked == false)) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00613", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1A_TalentsPanelOpened_Init () {
    gt__1A_TalentsPanelOpened = TriggerCreate("gt__1A_TalentsPanelOpened_Func");
    TriggerEnable(gt__1A_TalentsPanelOpened, false);
    TriggerAddEventHeroTalentTreeSelectionPanelShown(gt__1A_TalentsPanelOpened, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1A_Talents Picked
//--------------------------------------------------------------------------------------------------
bool gt__1A_TalentsPicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_bankKey;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bankKey = "";

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv__1A_TalentPicked = true;
    CameraLockInput(libStEx_gv_sE_Player, false);
    SoundPlayForPlayer(SoundLink("UI_Game_Training_PickTalentSound", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(libStEx_gt_ObjectiveTalentComplete, true, false);
    Wait(1.0, c_timeGame);
    TriggerEnable(gt__1A_TalentsPickedTransmissionQ, true);
    TriggerExecute(gt__1A_TalentsPickedTransmissionQ, true, false);
    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1A_TalentsPicked_Init () {
    gt__1A_TalentsPicked = TriggerCreate("gt__1A_TalentsPicked_Func");
    TriggerEnable(gt__1A_TalentsPicked, false);
    TriggerAddEventHeroTalentTreeSelected(gt__1A_TalentsPicked, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1A_Grave Golem Uther Fight
//--------------------------------------------------------------------------------------------------
bool gt__1A_GraveGolemUtherFight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto84FF7C9D_n = 3;
    int auto84FF7C9D_i;

    // Actions
    if (!runActions) {
        return true;
    }

    libStEx_gf_TVActivateUtherAI(libStEx_gv_hERO_FriendlyUther, libGame_gv_players[1].lv_heroUnit, gv__1A_GardenTerror);
    libNtve_gf_MakeUnitInvulnerable(gv__1A_GardenTerror, false);
    libNtve_gf_ChangeUnitDamage(gv__1A_GardenTerror, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyUther, false);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_FriendlyUther, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_FriendlyUther, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyUther, OrderTargetingUnit(AbilityCommand("attack", 0), gv__1A_GardenTerror), c_orderQueueReplace);
    libNtve_gf_PauseUnit(gv__1A_GardenTerror, false);
    Wait(1.0, c_timeGame);
    for (auto84FF7C9D_i = 1; auto84FF7C9D_i <= auto84FF7C9D_n; auto84FF7C9D_i += 1) {
        UnitIssueOrder(libStEx_gv_hERO_FriendlyUther, OrderTargetingUnit(AbilityCommand("attack", 0), gv__1A_GardenTerror), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1A_GraveGolemUtherFight_Init () {
    gt__1A_GraveGolemUtherFight = TriggerCreate("gt__1A_GraveGolemUtherFight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1A_Talents Picked Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt__1A_TalentsPickedTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    const int lv_waitDuration_C = 30;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00615", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    if ((libStEx_gf_PlayerPickedAllTalents() == false)) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00675", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    TriggerQueueExit();
    while (true) {
        lv_index += 1;
        if ((libStEx_gf_PlayerPickedAllTalents() == true)) {
            break;
        }

        if ((lv_index >= (lv_waitDuration_C * 2))) {
            lv_index = 0;
            libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00675", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }

        Wait(0.5, c_timeGame);
    }
    TriggerExecute(gt__1A_GardenTerrorChallengePreReady, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1A_TalentsPickedTransmissionQ_Init () {
    gt__1A_TalentsPickedTransmissionQ = TriggerCreate("gt__1A_TalentsPickedTransmissionQ_Func");
    TriggerEnable(gt__1A_TalentsPickedTransmissionQ, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1A_Garden Terror Ready Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt__1A_GardenTerrorReadyButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_ChallengeTalentsAvailableQuery() == false)) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MX_TutorialVet_StartButton", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libStEx_gf_TutorialVeteranShowHideReadyButton(false);
    libStEx_gf_TutorialVeteranShowHideRespecButton(false);
    libStEx_gf_TutorialVeteranShowHideRetryButton(false);
    TransmissionClearAll();
    TriggerExecute(libStEx_gt_ObjectiveChallengeReadyComplete, true, false);
    Wait(1.5, c_timeGame);
    TriggerExecute(gt__1A_GardenTerrorChallengeStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1A_GardenTerrorReadyButtonClicked_Init () {
    gt__1A_GardenTerrorReadyButtonClicked = TriggerCreate("gt__1A_GardenTerrorReadyButtonClicked_Func");
    TriggerEnable(gt__1A_GardenTerrorReadyButtonClicked, false);
    libStEx_gf_TutorialPlayerHitsReadyButton(gt__1A_GardenTerrorReadyButtonClicked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1A_Garden Terror Challenge Pre Ready
//--------------------------------------------------------------------------------------------------
bool gt__1A_GardenTerrorChallengePreReady_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoE2F04EEE_val;

    // Actions
    if (!runActions) {
        return true;
    }

    gv__1A_PlayTimes += 1;
    UnitBehaviorAddPlayer(libStEx_gv_hERO_PlayerUnit, "HeroGenericPregameAbilitySuppression", libStEx_gv_pLAYER_01_USER, 1);
    TriggerQueueEnter();
    autoE2F04EEE_val = gv__1A_PlayTimes;
    if (autoE2F04EEE_val == 1) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00643", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt__1A_GraveGolemUtherFight, true, false);
    }
    else if (autoE2F04EEE_val == 2) {
        if ((gf_PlayerPickedCorrectTalents(ge_Challenges_GardenTerror) == false)) {
            gv__1A_TalentRespecFlashed = true;
            libStEx_gf_TutorialVeteranFlashRespecButton(true);
            libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00653", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            gv__1A_TalentUseAbilities = true;
            libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00681", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
    }
    else if (autoE2F04EEE_val == 3) {
        if ((gf_PlayerPickedCorrectTalents(ge_Challenges_GardenTerror) == false)) {
            if ((gv__1A_TalentRespecFlashed == false)) {
                gv__1A_TalentRespecFlashed = true;
                libStEx_gf_TutorialVeteranFlashRespecButton(true);
            }

            libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00653", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            if ((gv__1A_TalentUseAbilities == false)) {
                gv__1A_TalentUseAbilities = true;
                libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00681", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
                gf_ChallengeEncouragementLine(gv__1A_PlayTimes, false);
            }
        }
    }
    else if (autoE2F04EEE_val == 4) {
        if ((gf_PlayerPickedCorrectTalents(ge_Challenges_GardenTerror) == false)) {
            if ((gv__1A_TalentRespecFlashed == false)) {
                gv__1A_TalentRespecFlashed = true;
                libStEx_gf_TutorialVeteranFlashRespecButton(true);
            }

            libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00653", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            if ((gv__1A_TalentUseAbilities == false)) {
                gv__1A_TalentUseAbilities = true;
                libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00681", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
                gf_ChallengeEncouragementLine(gv__1A_PlayTimes, false);
            }
        }
    }
    else {
        gf_ChallengeEncouragementLine(gv__1A_PlayTimes, false);
    }
    Wait(1.0, c_timeGame);
    TriggerEnable(libStEx_gt_ObjectiveChallengeReadyCreate, true);
    TriggerEnable(gt__1A_GardenTerrorReadyButtonClicked, true);
    libStEx_gf_TutorialVeteranShowHideReadyButton(true);
    libStEx_gf_TutorialVeteranShowHideRespecButton(true);
    libStEx_gf_TutorialVeteranShowHideRetryButton(false);
    TriggerEnable(libStEx_gt_ObjectiveTargetDummyCreate, true);
    TriggerExecute(libStEx_gt_ObjectiveTargetDummyCreate, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1A_GardenTerrorChallengePreReady_Init () {
    gt__1A_GardenTerrorChallengePreReady = TriggerCreate("gt__1A_GardenTerrorChallengePreReady_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1A_Garden Terror Challenge Start
//--------------------------------------------------------------------------------------------------
bool gt__1A_GardenTerrorChallengeStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ChallengeStartWait(false, gt__1A_GardenTerrorChallengeCallbackPrep, gt__1A_GardenTerrorChallengeCallbackStart, CameraInfoGetTarget(CameraInfoFromId(419)), TextCase(StringExternal("Param/Value/62CFC26E"), true), (gv__1A_PlayTimes == 1));
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MX_TutorialVet_ChallengeStart1", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "HeroGenericPregameAbilitySuppression", 1);
    UnitModifyCooldown(gv__1A_GardenTerror, "Abil/UnderworldBossStun", 5.0, c_cooldownOperationSet);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, false);
    libStEx_gf_ActivateDamageforUnit(libStEx_gv_hERO_PlayerUnit);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_FriendlyUther, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    UnitAbilityEnable(libStEx_gv_hERO_FriendlyUther, "UtherHolyLight", false);
    UnitAbilityEnable(libStEx_gv_hERO_FriendlyUther, "UtherHolyRadiance", false);
    UnitAbilityEnable(libStEx_gv_hERO_FriendlyUther, "UtherHammerOfJustice", false);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_FriendlyUther, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(gv__1A_GardenTerror, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    UnitBehaviorAddPlayer(libStEx_gv_hERO_PlayerUnit, "TutorialNoMinionAggroBehavior", libStEx_gv_pLAYER_01_USER, 1);
    UnitAbilityEnable(gv__1A_GardenTerror, "UnderworldBossStun", true);
    TriggerEnable(gt__1A_GardenTerrorChallengeSuccess, true);
    TriggerEnable(gt__1A_GardenTerrorChallengeFail, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1A_GardenTerrorChallengeStart_Init () {
    gt__1A_GardenTerrorChallengeStart = TriggerCreate("gt__1A_GardenTerrorChallengeStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1A_Garden Terror Challenge Success
//--------------------------------------------------------------------------------------------------
bool gt__1A_GardenTerrorChallengeSuccess_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == gv__1A_GardenTerror))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__1A_GardenTerrorChallengeFail, false);
    gv__1A_Complete = true;
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyUther, true);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_FriendlyUther, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_FriendlyUther, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Full);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyUther, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "TutorialNoMinionAggroBehavior", 1);
    libStEx_gf_TutorialVeteranShowHideReadyButton(false);
    libStEx_gf_TutorialVeteranShowHideRespecButton(false);
    libStEx_gf_TutorialVeteranShowHideRetryButton(false);
    TriggerExecute(libStEx_gt_ObjectiveTargetDummyComplete, true, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_PlayerUnit, "Signal ClearReadyState");
    libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_FriendlyUther, "Signal ClearReadyState");
    libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyUther, true);
    UnitAbilityEnable(libStEx_gv_hERO_FriendlyUther, "UtherHolyLight", true);
    UnitAbilityEnable(libStEx_gv_hERO_FriendlyUther, "UtherHolyRadiance", true);
    UnitAbilityEnable(libStEx_gv_hERO_FriendlyUther, "UtherHammerOfJustice", true);
    gf__1A_Damage_Reset();
    gf_ChallengeSuccessWait();
    SetTalentHighlighted("DemonHunterMasteryMonsterHunterHungeringArrow", false);
    SetTalentHighlighted("DemonHunterCreedoftheHunter", false);
    SetTalentHighlighted("DemonHunterMasteryRepeatingArrowVault", false);
    TriggerExecute(gt__1C_MoshPitQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1A_GardenTerrorChallengeSuccess_Init () {
    gt__1A_GardenTerrorChallengeSuccess = TriggerCreate("gt__1A_GardenTerrorChallengeSuccess_Func");
    TriggerEnable(gt__1A_GardenTerrorChallengeSuccess, false);
    TriggerAddEventUnitDied(gt__1A_GardenTerrorChallengeSuccess, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1A_Garden Terror Challenge Fail
//--------------------------------------------------------------------------------------------------
bool gt__1A_GardenTerrorChallengeFail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((EventUnit() == libStEx_gv_hERO_PlayerUnit) || (EventUnit() == libStEx_gv_hERO_FriendlyUther)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__1A_GardenTerrorChallengeSuccess, false);
    libStEx_gf_TutorialVeteranShowHideReadyButton(false);
    libStEx_gf_TutorialVeteranShowHideRespecButton(false);
    libStEx_gf_TutorialVeteranShowHideRetryButton(false);
    TriggerExecute(libStEx_gt_ObjectiveTargetDummyFail, true, false);
    libNtve_gf_MakeUnitInvulnerable(gv__1A_GardenTerror, true);
    libNtve_gf_ChangeUnitDamage(gv__1A_GardenTerror, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitAbilityEnable(gv__1A_GardenTerror, "UnderworldBossStun", false);
    libNtve_gf_PauseUnit(gv__1A_GardenTerror, true);
    gf_ChallengeFailedWait(gt__1A_GardenTerrorChallengeCallbackReset);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MX_TutorialVet_PreCountdown1", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerExecute(gt__1A_GardenTerrorChallengePreReady, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1A_GardenTerrorChallengeFail_Init () {
    gt__1A_GardenTerrorChallengeFail = TriggerCreate("gt__1A_GardenTerrorChallengeFail_Func");
    TriggerEnable(gt__1A_GardenTerrorChallengeFail, false);
    TriggerAddEventUnitDied(gt__1A_GardenTerrorChallengeFail, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1A_Garden Terror Challenge Balance
//--------------------------------------------------------------------------------------------------
bool gt__1A_GardenTerrorChallengeBalance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv__1A_PlayTimes >= libStEx_gv_playCount_LowerDifficulty_C)) {
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyUther, c_unitPropLifeMax, 3000.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyUther, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyUther, c_unitPropEnergyPercent, 100.0);
        UnitSetPropertyFixed(gv__1A_GardenTerror, c_unitPropLifeMax, 6350.0);
        UnitSetPropertyFixed(gv__1A_GardenTerror, c_unitPropLifePercent, 100.0);
    }
    else {
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyUther, c_unitPropLifeMax, 2600.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyUther, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyUther, c_unitPropEnergyPercent, 100.0);
        UnitSetPropertyFixed(gv__1A_GardenTerror, c_unitPropLifeMax, 7000.0);
        UnitSetPropertyFixed(gv__1A_GardenTerror, c_unitPropLifePercent, 100.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1A_GardenTerrorChallengeBalance_Init () {
    gt__1A_GardenTerrorChallengeBalance = TriggerCreate("gt__1A_GardenTerrorChallengeBalance_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1A_Garden Terror Challenge Callback Prep
//--------------------------------------------------------------------------------------------------
bool gt__1A_GardenTerrorChallengeCallbackPrep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetPosition(libStEx_gv_hERO_PlayerUnit, PointFromId(771), false);
    UnitSetFacing(libStEx_gv_hERO_PlayerUnit, PointGetFacing(PointFromId(771)), 0.0);
    UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "Mounted", 1);
    libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_spawnPoint = PointFromId(771);
    UnitSetPropertyFixed(libStEx_gv_hERO_PlayerUnit, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(libStEx_gv_hERO_PlayerUnit, c_unitPropEnergyPercent, 100.0);
    UnitSetPosition(libStEx_gv_hERO_FriendlyUther, PointFromId(772), false);
    UnitSetFacing(libStEx_gv_hERO_FriendlyUther, PointGetFacing(PointFromId(772)), 0.0);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_FriendlyUther, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    if ((UnitIsValid(gv__1A_GardenTerror) == false) && (gv__1A_PlayTimes != 0)) {
        UnitCreate(1, "JunglePlantHorror", c_unitCreateIgnorePlacement, 15, PointFromId(819), PointGetFacing(PointFromId(819)), null);
        gv__1A_GardenTerror = UnitLastCreated();
    }

    if ((UnitIsValid(gv__1A_GardenTerror) == true)) {
        UnitAbilityEnable(gv__1A_GardenTerror, "UnderworldBossStun", false);
        UnitAbilityEnable(gv__1A_GardenTerror, "UnderworldBossRoots", false);
        libNtve_gf_ChangeUnitDamage(gv__1A_GardenTerror, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitSetPosition(gv__1A_GardenTerror, PointFromId(819), false);
        UnitSetFacing(gv__1A_GardenTerror, PointGetFacing(PointFromId(819)), 0.0);
        UnitIssueOrder(gv__1A_GardenTerror, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(gv__1A_GardenTerror, false);
        UnitBehaviorRemovePlayer(gv__1A_GardenTerror, "UnderworldSummonedBossAbilityDisable", libStEx_gv_pLAYER_01_USER, 1);
    }

    libGame_gv_players[libStEx_gv_pLAYER_02_UTHER].lv_spawnPoint = PointFromId(772);
    TriggerExecute(gt__1A_GraveGolemUtherFight, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1A_GardenTerrorChallengeCallbackPrep_Init () {
    gt__1A_GardenTerrorChallengeCallbackPrep = TriggerCreate("gt__1A_GardenTerrorChallengeCallbackPrep_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1A_Garden Terror Challenge Callback Start
//--------------------------------------------------------------------------------------------------
bool gt__1A_GardenTerrorChallengeCallbackStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv__1A_PlayTimes == 1)) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00644", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1A_GardenTerrorChallengeCallbackStart_Init () {
    gt__1A_GardenTerrorChallengeCallbackStart = TriggerCreate("gt__1A_GardenTerrorChallengeCallbackStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1A_Garden Terror Challenge Callback Reset
//--------------------------------------------------------------------------------------------------
bool gt__1A_GardenTerrorChallengeCallbackReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_01_USER);
    gf__1A_Damage_Adjustment();
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_02_UTHER);
    TriggerExecute(gt__1A_GardenTerrorChallengeBalance, true, false);
    TriggerExecute(gt__1A_GardenTerrorChallengeCallbackPrep, true, false);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    CameraPan(libStEx_gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(419)), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1A_GardenTerrorChallengeCallbackReset_Init () {
    gt__1A_GardenTerrorChallengeCallbackReset = TriggerCreate("gt__1A_GardenTerrorChallengeCallbackReset_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1C_Mosh Pit Q
//--------------------------------------------------------------------------------------------------
bool gt__1C_MoshPitQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int autoF1B70930_ae = 10;
    const int autoF1B70930_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_challengeCurrent = ge_Challenges_MoshPit;
    SetTalentTreeSelectionPanelAutoShow(true);
    libGame_gv_players[libStEx_gv_pLAYER_03_ORDER1].lv_spawnPoint = PointFromId(2079);
    libStEx_gf_SwaptoNewHeroforPlayer(libStEx_gv_pLAYER_03_ORDER1, "Tyrael", 1);
    libStEx_gv_hERO_FriendlyTyrael = libGame_gv_players[libStEx_gv_pLAYER_03_ORDER1].lv_heroUnit;
    libGame_gv_players[libStEx_gv_pLAYER_04_ORDER2].lv_spawnPoint = PointFromId(1287);
    libStEx_gf_SwaptoNewHeroforPlayer(libStEx_gv_pLAYER_04_ORDER2, "Muradin", 1);
    libStEx_gv_hERO_FriendlyMuradin = libGame_gv_players[libStEx_gv_pLAYER_04_ORDER2].lv_heroUnit;
    libGame_gv_players[libStEx_gv_pLAYER_06_CHAOS1].lv_spawnPoint = PointFromId(1291);
    libStEx_gf_SwaptoNewHeroforPlayer(libStEx_gv_pLAYER_06_CHAOS1, "L90ETC", 1);
    libStEx_gv_hERO_EnemyETC = libGame_gv_players[libStEx_gv_pLAYER_06_CHAOS1].lv_heroUnit;
    UnitBehaviorAdd(libStEx_gv_hERO_EnemyETC, "Ultimate2Unlocked", libStEx_gv_hERO_EnemyETC, 1);
    libGame_gv_players[libStEx_gv_pLAYER_07_CHAOS2].lv_spawnPoint = PointFromId(2091);
    libStEx_gf_SwaptoNewHeroforPlayer(libStEx_gv_pLAYER_07_CHAOS2, "Barbarian", 1);
    libStEx_gv_hERO_EnemySonya = libGame_gv_players[libStEx_gv_pLAYER_07_CHAOS2].lv_heroUnit;
    libGame_gv_players[libStEx_gv_pLAYER_08_CHAOS3].lv_spawnPoint = PointFromId(1290);
    libStEx_gf_SwaptoNewHeroforPlayer(libStEx_gv_pLAYER_08_CHAOS3, "WitchDoctor", 1);
    libStEx_gv_hERO_EnemyNazeebo = libGame_gv_players[libStEx_gv_pLAYER_08_CHAOS3].lv_heroUnit;
    libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_spawnPoint = PointFromId(1293);
    libGame_gv_players[libStEx_gv_pLAYER_02_UTHER].lv_spawnPoint = PointFromId(1292);
    TriggerExecute(gt_MoshPitQ, true, true);
    libGame_gv_players[libStEx_gv_pLAYER_02_UTHER].lv_spawnPoint = PointFromId(2088);
    libGame_gv_players[libStEx_gv_pLAYER_03_ORDER1].lv_spawnPoint = PointFromId(2079);
    libGame_gv_players[libStEx_gv_pLAYER_04_ORDER2].lv_spawnPoint = PointFromId(2089);
    libGame_gv_players[libStEx_gv_pLAYER_06_CHAOS1].lv_spawnPoint = PointFromId(2090);
    libGame_gv_players[libStEx_gv_pLAYER_07_CHAOS2].lv_spawnPoint = PointFromId(2091);
    libGame_gv_players[libStEx_gv_pLAYER_08_CHAOS3].lv_spawnPoint = PointFromId(2092);
    lv_itPlayer = 1;
    for ( ; ( (autoF1B70930_ai >= 0 && lv_itPlayer <= autoF1B70930_ae) || (autoF1B70930_ai < 0 && lv_itPlayer >= autoF1B70930_ae) ) ; lv_itPlayer += autoF1B70930_ai ) {
        libAIAI_gf_HeroAIEnableTalentPicking(lv_itPlayer, false);
    }
    TriggerExecute(gt__1C_MoshPitChallengeBalance, true, false);
    SetTalentHighlighted("DemonHunterMasteryMonsterHunterHungeringArrow", true);
    SetTalentHighlighted("DemonHunterCreedoftheHunter", true);
    SetTalentHighlighted("DemonHunterMasteryRepeatingArrowVault", true);
    SetTalentHighlighted("DemonHunterHeroicAbilityRainofVengeance", true);
    TriggerExecute(gt__1C_MoshPitChallengePreReady, true, true);
    gf_AutomateMoshPitChallenge();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1C_MoshPitQ_Init () {
    gt__1C_MoshPitQ = TriggerCreate("gt__1C_MoshPitQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1C_Talents Panel Opened
//--------------------------------------------------------------------------------------------------
bool gt__1C_TalentsPanelOpened_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv__1C_TalentsPanelOpened = true;
    libStEx_gf_TutorialVeteranShowHideRespecButton(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1C_TalentsPanelOpened_Init () {
    gt__1C_TalentsPanelOpened = TriggerCreate("gt__1C_TalentsPanelOpened_Func");
    TriggerEnable(gt__1C_TalentsPanelOpened, false);
    TriggerAddEventHeroTalentTreeSelectionPanelShown(gt__1C_TalentsPanelOpened, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1C_Mosh Pit Ready Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt__1C_MoshPitReadyButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_ChallengeTalentsAvailableQuery() == false)) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MX_TutorialVet_StartButton", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libStEx_gf_TutorialVeteranShowHideReadyButton(false);
    libStEx_gf_TutorialVeteranShowHideRespecButton(false);
    libStEx_gf_TutorialVeteranShowHideRetryButton(false);
    TransmissionClearAll();
    TriggerExecute(libStEx_gt_ObjectiveChallengeReadyComplete, true, false);
    Wait(1.5, c_timeGame);
    TriggerExecute(gt__1C_MoshPitChallengeStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1C_MoshPitReadyButtonClicked_Init () {
    gt__1C_MoshPitReadyButtonClicked = TriggerCreate("gt__1C_MoshPitReadyButtonClicked_Func");
    TriggerEnable(gt__1C_MoshPitReadyButtonClicked, false);
    libStEx_gf_TutorialPlayerHitsReadyButton(gt__1C_MoshPitReadyButtonClicked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1C_Mosh Pit Challenge Pre Ready
//--------------------------------------------------------------------------------------------------
bool gt__1C_MoshPitChallengePreReady_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto8D1F323B_val;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MX_TutorialVet_PreCountdown2", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gv__1C_PlayTimes += 1;
    UnitBehaviorAddPlayer(libStEx_gv_hERO_PlayerUnit, "HeroGenericPregameAbilitySuppression", libStEx_gv_pLAYER_01_USER, 1);
    TriggerQueueEnter();
    UnitGroupClear(gv__1C_Enemy_Unit_Group);
    UnitGroupAdd(gv__1C_Enemy_Unit_Group, libStEx_gv_hERO_EnemyETC);
    UnitGroupAdd(gv__1C_Enemy_Unit_Group, libStEx_gv_hERO_EnemySonya);
    UnitGroupAdd(gv__1C_Enemy_Unit_Group, libStEx_gv_hERO_EnemyNazeebo);
    UnitIssueOrder(libStEx_gv_hERO_EnemyETC, Order(AbilityCommand("L90ETCMoshPit", 0)), c_orderQueueReplace);
    auto8D1F323B_val = gv__1C_PlayTimes;
    if (auto8D1F323B_val == 1) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00700", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto8D1F323B_val == 2) {
        if ((gf_PlayerPickedCorrectTalents(ge_Challenges_MoshPit) == false) && (gv__1A_TalentRespecFlashed == false)) {
            gv__1A_TalentRespecFlashed = true;
            libStEx_gf_TutorialVeteranFlashRespecButton(true);
        }

        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00658", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto8D1F323B_val == 3) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00684", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        gf_ChallengeEncouragementLine(gv__1C_PlayTimes, false);
    }
    Wait(1.0, c_timeGame);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_EnemyETC, true);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyMuradin, true);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyTyrael, true);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyUther, true);
    TriggerEnable(libStEx_gt_ObjectiveChallengeReadyCreate, true);
    TriggerEnable(gt__1C_MoshPitReadyButtonClicked, true);
    libStEx_gf_TutorialVeteranShowHideReadyButton(true);
    libStEx_gf_TutorialVeteranShowHideRetryButton(false);
    if ((gv__1C_TalentsPanelOpened == false)) {
        libStEx_gf_TutorialVeteranShowHideRespecButton(false);
    }
    else {
        libStEx_gf_TutorialVeteranShowHideRespecButton(true);
    }
    TriggerEnable(libStEx_gt_ObjectiveMoshPitFightCreate, true);
    TriggerExecute(libStEx_gt_ObjectiveMoshPitFightCreate, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1C_MoshPitChallengePreReady_Init () {
    gt__1C_MoshPitChallengePreReady = TriggerCreate("gt__1C_MoshPitChallengePreReady_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1C_Mosh Pit Challenge Start
//--------------------------------------------------------------------------------------------------
bool gt__1C_MoshPitChallengeStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ChallengeStartWait(false, gt__1C_MoshPitChallengeCallbackPrep, gt__1C_MoshPitChallengeCallbackStart, CameraInfoGetTarget(CameraInfoFromId(313)), TextCase(StringExternal("Param/Value/19C54563"), true), (gv__1C_PlayTimes == 1));
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MX_TutorialVet_ChallengeStart2", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "HeroGenericPregameAbilitySuppression", 1);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, false);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, false);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_FriendlyUther, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyUther, false);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyUther, false);
    UnitAbilityEnable(libStEx_gv_hERO_FriendlyUther, "UtherHammerOfJustice", false);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_FriendlyTyrael, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyTyrael, false);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyTyrael, false);
    UnitAbilityEnable(libStEx_gv_hERO_FriendlyTyrael, "TyraelElDruinsMight", false);
    UnitAbilityEnable(libStEx_gv_hERO_FriendlyTyrael, "ElDruinsMightAngelicFlash", false);
    UnitAbilityEnable(libStEx_gv_hERO_FriendlyTyrael, "ElDruinsMightAngelicFlashMastery", false);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_FriendlyMuradin, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyMuradin, false);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyMuradin, false);
    UnitAbilityEnable(libStEx_gv_hERO_FriendlyMuradin, "MuradinStormBolt", false);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_EnemyETC, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyETC, false);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_EnemyETC, false);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_EnemySonya, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemySonya, false);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_EnemyNazeebo, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyNazeebo, false);
    TriggerEnable(gt__1C_MoshPitChallengeSuccess, true);
    TriggerEnable(gt__1C_MoshPitChallengeFail, true);
    TriggerEnable(gt__1C_MoshPitChallengeEnableAIETCStunned, true);
    TriggerEnable(gt__1C_MoshPitChallengeRainDamageTwoHeroes, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1C_MoshPitChallengeStart_Init () {
    gt__1C_MoshPitChallengeStart = TriggerCreate("gt__1C_MoshPitChallengeStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1C_Mosh Pit Challenge Enable AI (ETC Stunned)
//--------------------------------------------------------------------------------------------------
bool gt__1C_MoshPitChallengeEnableAIETCStunned_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MX_TutorialVet_Challenge2_ETC_Dead", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_EnableAIToDefendPoint(libStEx_gv_pLAYER_02_UTHER, PointFromId(1248));
    gf_EnableAIToDefendPoint(libStEx_gv_pLAYER_03_ORDER1, PointFromId(1248));
    gf_EnableAIToDefendPoint(libStEx_gv_pLAYER_04_ORDER2, PointFromId(1248));
    Wait(0.25, c_timeGame);
    UnitIssueOrder(libStEx_gv_hERO_EnemyETC, OrderTargetingUnit(AbilityCommand("attack", 0), libStEx_gv_hERO_FriendlyTyrael), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_EnemyNazeebo, OrderTargetingUnit(AbilityCommand("attack", 0), libStEx_gv_hERO_FriendlyTyrael), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_EnemySonya, OrderTargetingUnit(AbilityCommand("attack", 0), libStEx_gv_hERO_FriendlyTyrael), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyTyrael, Order(AbilityCommand("TyraelRighteousness", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1C_MoshPitChallengeEnableAIETCStunned_Init () {
    gt__1C_MoshPitChallengeEnableAIETCStunned = TriggerCreate("gt__1C_MoshPitChallengeEnableAIETCStunned_Func");
    TriggerEnable(gt__1C_MoshPitChallengeEnableAIETCStunned, false);
    TriggerAddEventUnitBehaviorChange(gt__1C_MoshPitChallengeEnableAIETCStunned, null, "L90ETCMoshPitChannel", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1C_Mosh Pit Challenge Success
//--------------------------------------------------------------------------------------------------
bool gt__1C_MoshPitChallengeSuccess_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto30EF8E91_ae = 10;
    const int auto30EF8E91_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((EventUnit() == libStEx_gv_hERO_EnemyETC) || (EventUnit() == libStEx_gv_hERO_EnemySonya) || (EventUnit() == libStEx_gv_hERO_EnemyNazeebo)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv__1C_Enemy_Unit_Group) == false)) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__1C_MoshPitChallengeFail, false);
    TriggerEnable(gt__1C_MoshPitChallengeEnableAIETCStunned, false);
    TriggerEnable(gt__1C_MoshPitChallengeRainDamageTwoHeroes, false);
    TriggerExecute(libStEx_gt_ObjectiveMoshPitFightComplete, true, false);
    gv__1C_Complete = true;
    gf__1C_MoshPitChallengeDisableAI();
    TriggerStop(gt__1C_MoshPitChallengeAttackManager);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyUther, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyTyrael, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyMuradin, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyUther, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyTyrael, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyMuradin, true);
    Wait(2.0, c_timeGame);
    gf_ChallengeSuccessWait();
    SetTalentHighlighted("DemonHunterMasteryMonsterHunterHungeringArrow", false);
    SetTalentHighlighted("DemonHunterCreedoftheHunter", false);
    SetTalentHighlighted("DemonHunterMasteryRepeatingArrowVault", false);
    SetTalentHighlighted("DemonHunterHeroicAbilityRainofVengeance", false);
    libGame_gv_players[libStEx_gv_pLAYER_06_CHAOS1].lv_spawnPoint = PointFromId(819);
    libGame_gv_players[libStEx_gv_pLAYER_07_CHAOS2].lv_spawnPoint = PointFromId(819);
    libGame_gv_players[libStEx_gv_pLAYER_08_CHAOS3].lv_spawnPoint = PointFromId(819);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_02_UTHER);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_03_ORDER1);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_04_ORDER2);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_06_CHAOS1);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_07_CHAOS2);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_08_CHAOS3);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyETC, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemySonya, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyNazeebo, true);
    lv_itPlayer = 1;
    for ( ; ( (auto30EF8E91_ai >= 0 && lv_itPlayer <= auto30EF8E91_ae) || (auto30EF8E91_ai < 0 && lv_itPlayer >= auto30EF8E91_ae) ) ; lv_itPlayer += auto30EF8E91_ai ) {
        libAIAI_gf_HeroAIEnableTalentPicking(lv_itPlayer, true);
    }
    TriggerExecute(gt__1E_RoamingQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1C_MoshPitChallengeSuccess_Init () {
    gt__1C_MoshPitChallengeSuccess = TriggerCreate("gt__1C_MoshPitChallengeSuccess_Func");
    TriggerEnable(gt__1C_MoshPitChallengeSuccess, false);
    TriggerAddEventUnitDied(gt__1C_MoshPitChallengeSuccess, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1C_Mosh Pit Challenge Fail
//--------------------------------------------------------------------------------------------------
bool gt__1C_MoshPitChallengeFail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((libGame_gf_HeroKilledPlayer() == libStEx_gv_pLAYER_01_USER) || (libGame_gf_HeroKilledPlayer() == libStEx_gv_pLAYER_02_UTHER) || (libGame_gf_HeroKilledPlayer() == libStEx_gv_pLAYER_03_ORDER1) || (libGame_gf_HeroKilledPlayer() == libStEx_gv_pLAYER_04_ORDER2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__1C_MoshPitChallengeSuccess, false);
    TriggerEnable(gt__1C_MoshPitChallengeEnableAIETCStunned, false);
    TriggerEnable(gt__1C_MoshPitChallengeRainDamageTwoHeroes, false);
    TriggerExecute(libStEx_gt_ObjectiveMoshPitFightFail, true, false);
    gf__1C_MoshPitChallengeDisableAI();
    TriggerStop(gt__1C_MoshPitChallengeAttackManager);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyUther, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyTyrael, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyMuradin, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_EnemyETC, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_EnemyNazeebo, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_EnemySonya, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyUther, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyTyrael, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyMuradin, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyETC, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyNazeebo, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemySonya, true);
    gf_ChallengeFailedWait(gt__1C_MoshPitChallengeCallbackReset);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt__1C_MoshPitChallengePreReady, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1C_MoshPitChallengeFail_Init () {
    gt__1C_MoshPitChallengeFail = TriggerCreate("gt__1C_MoshPitChallengeFail_Func");
    TriggerEnable(gt__1C_MoshPitChallengeFail, false);
    libGame_gf_HeroKilled(gt__1C_MoshPitChallengeFail);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1C_Mosh Pit Challenge Rain Damage Two Heroes
//--------------------------------------------------------------------------------------------------
bool gt__1C_MoshPitChallengeRainDamageTwoHeroes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unit autoC8C686A7_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoC8C686A7_val = EventUnit();
    if (autoC8C686A7_val == libStEx_gv_hERO_EnemyETC) {
        gv__1C_RainDamagedETC = true;
    }
    else if (autoC8C686A7_val == libStEx_gv_hERO_EnemySonya) {
        gv__1C_RainDamagedSonya = true;
    }
    else {
    }
    Wait(1.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv__1C_RainDamagedETC == true) && (gv__1C_RainDamagedSonya == true)) {
        gv__1C_RainDamagedETC = false;
        gv__1C_RainDamagedSonya = false;
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00645", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        gv__1C_RainDamagedETC = false;
        gv__1C_RainDamagedSonya = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1C_MoshPitChallengeRainDamageTwoHeroes_Init () {
    gt__1C_MoshPitChallengeRainDamageTwoHeroes = TriggerCreate("gt__1C_MoshPitChallengeRainDamageTwoHeroes_Func");
    TriggerEnable(gt__1C_MoshPitChallengeRainDamageTwoHeroes, false);
    TriggerAddEventUnitDamaged(gt__1C_MoshPitChallengeRainDamageTwoHeroes, null, c_unitDamageTypeAny, c_unitDamageEither, "RainOfVengeanceDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1C_Mosh Pit Challenge Balance
//--------------------------------------------------------------------------------------------------
bool gt__1C_MoshPitChallengeBalance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv__1C_PlayTimes >= libStEx_gv_playCount_LowerDifficulty_C)) {
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyTyrael, c_unitPropLifeMax, 2500.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyTyrael, c_unitPropLifePercent, 100.0);
    }
    else {
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyTyrael, c_unitPropLifeMax, 2000.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyTyrael, c_unitPropLifePercent, 100.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1C_MoshPitChallengeBalance_Init () {
    gt__1C_MoshPitChallengeBalance = TriggerCreate("gt__1C_MoshPitChallengeBalance_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1C_Mosh Pit Challenge Callback Prep
//--------------------------------------------------------------------------------------------------
bool gt__1C_MoshPitChallengeCallbackPrep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
    UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "Mounted", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1C_MoshPitChallengeCallbackPrep_Init () {
    gt__1C_MoshPitChallengeCallbackPrep = TriggerCreate("gt__1C_MoshPitChallengeCallbackPrep_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1C_Mosh Pit Challenge Callback Start
//--------------------------------------------------------------------------------------------------
bool gt__1C_MoshPitChallengeCallbackStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv__1C_PlayTimes == 1)) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00679", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
        TransmissionWait(TransmissionLastSent(), 0.0);
        Wait(1.0, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1C_MoshPitChallengeCallbackStart_Init () {
    gt__1C_MoshPitChallengeCallbackStart = TriggerCreate("gt__1C_MoshPitChallengeCallbackStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1C_Mosh Pit Challenge Callback Reset
//--------------------------------------------------------------------------------------------------
bool gt__1C_MoshPitChallengeCallbackReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_03_ORDER1);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_07_CHAOS2);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_01_USER);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_02_UTHER);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_04_ORDER2);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_06_CHAOS1);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_08_CHAOS3);
    TriggerExecute(gt__1C_MoshPitChallengeBalance, true, false);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
    UnitSetState(libStEx_gv_hERO_PlayerUnit, c_unitStateFidget, false);
    UnitBehaviorAdd(libStEx_gv_hERO_EnemyETC, "Ultimate2Unlocked", libStEx_gv_hERO_EnemyETC, 1);
    TriggerExecute(gt__1C_MoshPitChallengeAttackManager, true, false);
    TriggerExecute(gt__1C_MoshPitChallengeCallbackPrep, true, false);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    CameraPan(libStEx_gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(313)), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1C_MoshPitChallengeCallbackReset_Init () {
    gt__1C_MoshPitChallengeCallbackReset = TriggerCreate("gt__1C_MoshPitChallengeCallbackReset_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1C_Mosh Pit Challenge Attack Manager
//--------------------------------------------------------------------------------------------------
bool gt__1C_MoshPitChallengeAttackManager_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        UnitIssueOrder(libStEx_gv_hERO_EnemySonya, OrderTargetingUnit(AbilityCommand("attack", 0), libStEx_gv_hERO_FriendlyTyrael), c_orderQueueReplace);
        UnitIssueOrder(libStEx_gv_hERO_EnemyNazeebo, OrderTargetingUnit(AbilityCommand("attack", 0), libStEx_gv_hERO_FriendlyTyrael), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1C_MoshPitChallengeAttackManager_Init () {
    gt__1C_MoshPitChallengeAttackManager = TriggerCreate("gt__1C_MoshPitChallengeAttackManager_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1D_Hookup Jungle Creep Data
//--------------------------------------------------------------------------------------------------
bool gt__1D_HookupJungleCreepData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gv_jungleNumberOfCreepCamps = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1D_HookupJungleCreepData_Init () {
    gt__1D_HookupJungleCreepData = TriggerCreate("gt__1D_HookupJungleCreepData_Func");
    TriggerEnable(gt__1D_HookupJungleCreepData, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1D_Hookup Town Data
//--------------------------------------------------------------------------------------------------
bool gt__1D_HookupTownData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lane;
    int lv_town;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_town = 0;
    lv_lane = 1;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(2);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = false;
    libGame_gv_townTownCount = lv_town;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1D_HookupTownData_Init () {
    gt__1D_HookupTownData = TriggerCreate("gt__1D_HookupTownData_Func");
    TriggerEnable(gt__1D_HookupTownData, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1D_Hookup Lane Data
//--------------------------------------------------------------------------------------------------
bool gt__1D_HookupLaneData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_structureCount;
    int lv_waypointCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_laneCount = 0;
    libGame_gv_laneCount += 1;
    lv_waypointCount = 0;
    libGame_gv_laneData[libGame_gv_laneCount].lv_laneName = StringExternal("Param/Value/9F8771E2");
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(875);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(878);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(1553);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(1554);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(1555);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(1556);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(1541);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(1542);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(1551);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(1552);
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypointCount = lv_waypointCount;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1D_HookupLaneData_Init () {
    gt__1D_HookupLaneData = TriggerCreate("gt__1D_HookupLaneData_Func");
    TriggerEnable(gt__1D_HookupLaneData, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1D_AOE Fountain Used
//--------------------------------------------------------------------------------------------------
bool gt__1D_AOEFountainUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv__1D_FountainText != c_textTagNone)) {
        TextTagDestroy(gv__1D_FountainText);
        gv__1D_FountainText = c_textTagNone;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1D_AOEFountainUsed_Init () {
    gt__1D_AOEFountainUsed = TriggerCreate("gt__1D_AOEFountainUsed_Func");
    TriggerEnable(gt__1D_AOEFountainUsed, false);
    TriggerAddEventPlayerEffectUsed(gt__1D_AOEFountainUsed, c_playerAny, "MoonwellDrinkStartingSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1D_AOE Fountain Death
//--------------------------------------------------------------------------------------------------
bool gt__1D_AOEFountainDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv__1D_Fountain))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv__1D_FountainText != c_textTagNone)) {
        TextTagDestroy(gv__1D_FountainText);
        gv__1D_FountainText = c_textTagNone;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1D_AOEFountainDeath_Init () {
    gt__1D_AOEFountainDeath = TriggerCreate("gt__1D_AOEFountainDeath_Func");
    TriggerEnable(gt__1D_AOEFountainDeath, false);
    TriggerAddEventUnitDied(gt__1D_AOEFountainDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1D_AOE Regen Globe Reminder
//--------------------------------------------------------------------------------------------------
bool gt__1D_AOERegenGlobeReminder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;

    // Automatic Variable Declarations
    unitgroup autoD59586B7_g;
    int autoD59586B7_u;
    unit autoD59586B7_var;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_group = UnitGroup("RegenGlobe", libCore_gv_cOMPUTER_TeamOrder, RegionCircle(UnitGetPosition(libStEx_gv_hERO_PlayerUnit), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupRemoveUnitGroup(lv_group, gv__1D_AOERegenGlobes);
    if ((libNtve_gf_UnitGroupIsDead(lv_group) == false)) {
        TriggerEnable(gt__1D_AOERegenGlobePickedUp, true);
        TriggerEnable(gt__1D_AOERegenGlobeDies, true);
        autoD59586B7_g = lv_group;
        autoD59586B7_u = UnitGroupCount(autoD59586B7_g, c_unitCountAll);
        for (;; autoD59586B7_u -= 1) {
            autoD59586B7_var = UnitGroupUnitFromEnd(autoD59586B7_g, autoD59586B7_u);
            if (autoD59586B7_var == null) { break; }
            gv__1D_AOERegenGlobeCount += 1;
            libCore_gf_CreateReticleEffectAndTextTagAtPoint(libCore_ge_ReticleType_MainObjective, libCore_ge_ReticleSize_Small, UnitTypeGetName(UnitGetType(autoD59586B7_var)), PointWithOffset(UnitGetPosition(autoD59586B7_var), 0.0, 0.6));
            TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeMask);
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScaleAbsolute 0.700000");
            libCore_gf_StoreActorForUnit(autoD59586B7_var, 1, libNtve_gf_ActorLastCreated());
            libCore_gf_StoreTextTagForUnit(autoD59586B7_var, 1, TextTagLastCreated());
        }
        UnitGroupAddUnitGroup(gv__1D_AOERegenGlobes, lv_group);
        TriggerExecute(gt__1D_AOERegenGlobeTransmissionQ, true, false);
        if ((gv__1D_AOERegenGlobeCount >= 2)) {
            gv__1D_AOERegenGlobeCount = 0;
            TriggerEnable(TriggerGetCurrent(), false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1D_AOERegenGlobeReminder_Init () {
    gt__1D_AOERegenGlobeReminder = TriggerCreate("gt__1D_AOERegenGlobeReminder_Func");
    TriggerEnable(gt__1D_AOERegenGlobeReminder, false);
    TriggerAddEventTimePeriodic(gt__1D_AOERegenGlobeReminder, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1D_AOE Regen Globe Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt__1D_AOERegenGlobeTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00258", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1D_AOERegenGlobeTransmissionQ_Init () {
    gt__1D_AOERegenGlobeTransmissionQ = TriggerCreate("gt__1D_AOERegenGlobeTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1D_AOE Regen Globe Picked Up
//--------------------------------------------------------------------------------------------------
bool gt__1D_AOERegenGlobePickedUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4C9278C3_g;
    int auto4C9278C3_u;
    unit auto4C9278C3_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == libStEx_gv_hERO_PlayerUnit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerGetExecCount(TriggerGetCurrent()) >= 2)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt__1D_AOERegenGlobeReminder, false);
        TriggerEnable(gt__1D_AOERegenGlobeDies, false);
        auto4C9278C3_g = gv__1D_AOERegenGlobes;
        auto4C9278C3_u = UnitGroupCount(auto4C9278C3_g, c_unitCountAll);
        for (;; auto4C9278C3_u -= 1) {
            auto4C9278C3_var = UnitGroupUnitFromEnd(auto4C9278C3_g, auto4C9278C3_u);
            if (auto4C9278C3_var == null) { break; }
            if ((libCore_gf_ActorStoredForUnit(auto4C9278C3_var, 1) != null)) {
                libNtve_gf_KillModel(libCore_gf_ActorStoredForUnit(auto4C9278C3_var, 1));
                libCore_gf_StoreActorForUnit(auto4C9278C3_var, 1, null);
            }

            if ((libCore_gf_TextTagStoredForUnit(auto4C9278C3_var, 1) != c_textTagNone)) {
                TextTagDestroy(libCore_gf_TextTagStoredForUnit(auto4C9278C3_var, 1));
                libCore_gf_StoreTextTagForUnit(auto4C9278C3_var, 1, c_textTagNone);
            }

        }
        UnitGroupClear(gv__1D_AOERegenGlobes);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1D_AOERegenGlobePickedUp_Init () {
    gt__1D_AOERegenGlobePickedUp = TriggerCreate("gt__1D_AOERegenGlobePickedUp_Func");
    TriggerAddEventUnitBehaviorChange(gt__1D_AOERegenGlobePickedUp, null, "RegenGlobeFlatBuff", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(gt__1D_AOERegenGlobePickedUp, null, "RegenGlobeFlatBuff", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1D_AOE Regen Globe Dies
//--------------------------------------------------------------------------------------------------
bool gt__1D_AOERegenGlobeDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "RegenGlobe"))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv__1D_AOERegenGlobes, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gf_ActorStoredForUnit(EventUnit(), 1) != null)) {
        libNtve_gf_KillModel(libCore_gf_ActorStoredForUnit(EventUnit(), 1));
    }

    if ((libCore_gf_TextTagStoredForUnit(EventUnit(), 1) != c_textTagNone)) {
        TextTagDestroy(libCore_gf_TextTagStoredForUnit(EventUnit(), 1));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1D_AOERegenGlobeDies_Init () {
    gt__1D_AOERegenGlobeDies = TriggerCreate("gt__1D_AOERegenGlobeDies_Func");
    TriggerAddEventUnitDied(gt__1D_AOERegenGlobeDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1D_AOE Wave Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt__1D_AOEWaveTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1D_AOEWaveTimerExpires_Init () {
    gt__1D_AOEWaveTimerExpires = TriggerCreate("gt__1D_AOEWaveTimerExpires_Func");
    TriggerAddEventTimer(gt__1D_AOEWaveTimerExpires, gv__1D_WaveTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1D_AOE Q
//--------------------------------------------------------------------------------------------------
bool gt__1D_AOEQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;
    int lv_itStructureIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_challengeCurrent = ge_Challenges_KeepDefense;
    SetTalentTreeSelectionPanelAutoShow(true);
    TriggerExecute(gt__1D_HookupLaneData, true, false);
    TriggerExecute(gt__1D_HookupTownData, true, false);
    TriggerExecute(gt__1D_HookupJungleCreepData, true, false);
    TriggerExecute(libGame_gt_InitializeGameSystems, true, false);
    libGame_gf_MinionTurnMinionScalingOnOff(false);
    libCore_gv_sYSMinionAI = true;
    libGame_gf_MinionStartStopMinionSystem(true);
    libCore_gv_sYSMinionAI = false;
    libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_spawnPoint = PointFromId(299);
    TriggerExecute(gt__1D_AOEChallengeBalance, true, false);
    TriggerExecute(gt_AOEQ, true, true);
    TriggerExecute(gt__1D_AOEChallengePreReady, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1D_AOEQ_Init () {
    gt__1D_AOEQ = TriggerCreate("gt__1D_AOEQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1D_AOE Ready Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt__1D_AOEReadyButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_ChallengeTalentsAvailableQuery() == false)) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libStEx_gf_TutorialVeteranShowHideReadyButton(false);
    libStEx_gf_TutorialVeteranShowHideRespecButton(false);
    libStEx_gf_TutorialVeteranShowHideRetryButton(false);
    TransmissionClearAll();
    TriggerExecute(libStEx_gt_ObjectiveChallengeReadyComplete, true, false);
    Wait(1.5, c_timeGame);
    TriggerExecute(gt__1D_AOEChallengeStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1D_AOEReadyButtonClicked_Init () {
    gt__1D_AOEReadyButtonClicked = TriggerCreate("gt__1D_AOEReadyButtonClicked_Func");
    TriggerEnable(gt__1D_AOEReadyButtonClicked, false);
    libStEx_gf_TutorialPlayerHitsReadyButton(gt__1D_AOEReadyButtonClicked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1D_AOE Challenge Pre Ready
//--------------------------------------------------------------------------------------------------
bool gt__1D_AOEChallengePreReady_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoEA13DF17_val;

    // Actions
    if (!runActions) {
        return true;
    }

    gv__1D_PlayTimes += 1;
    UnitBehaviorAddPlayer(libStEx_gv_hERO_PlayerUnit, "HeroGenericPregameAbilitySuppression", libStEx_gv_pLAYER_01_USER, 1);
    if ((gv__1D_PlayTimes == 1)) {
        libStEx_gf_RespecPlayer(libStEx_gv_pLAYER_01_USER, false);
    }

    if ((gv__1D_VisionRevealer == null)) {
        VisRevealerCreate(libStEx_gv_pLAYER_01_USER, RegionFromId(3));
        gv__1D_VisionRevealer = VisRevealerLastCreated();
    }

    if ((gv__1D_FountainText == c_textTagNone)) {
        TextTagCreate(StringExternal("Param/Value/5CD3A66E"), 24, UnitGetPosition(gv__1D_Fountain), libUIUI_gv_uI_HealingFountainsHelpText_HeightOffset_C, true, false, PlayerGroupAll());
        gv__1D_FountainText = TextTagLastCreated();
    }

    TriggerQueueEnter();
    autoEA13DF17_val = gv__1D_PlayTimes;
    if (autoEA13DF17_val == 1) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00659", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoEA13DF17_val == 2) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00660", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoEA13DF17_val == 3) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00686", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoEA13DF17_val == 4) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00687", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        gf_ChallengeEncouragementLine(gv__1D_PlayTimes, false);
    }
    Wait(1.0, c_timeGame);
    TriggerEnable(libStEx_gt_ObjectiveChallengeReadyCreate, true);
    TriggerEnable(gt__1D_AOEReadyButtonClicked, true);
    libStEx_gf_TutorialVeteranShowHideReadyButton(true);
    libStEx_gf_TutorialVeteranShowHideRespecButton(true);
    libStEx_gf_TutorialVeteranShowHideRetryButton(false);
    TriggerEnable(libStEx_gt_ObjectiveBossFightCreate2, true);
    TriggerExecute(libStEx_gt_ObjectiveBossFightCreate2, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1D_AOEChallengePreReady_Init () {
    gt__1D_AOEChallengePreReady = TriggerCreate("gt__1D_AOEChallengePreReady_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1D_AOE Challenge Start
//--------------------------------------------------------------------------------------------------
bool gt__1D_AOEChallengeStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ChallengeStartWait(false, gt__1D_AOEChallengeCallbackPrep, gt__1D_AOEChallengeCallbackStart, UnitGetPosition(libStEx_gv_hERO_PlayerUnit), TextCase(StringExternal("Param/Value/2B86BC31"), true), (gv__1D_PlayTimes == 1));
    UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "HeroGenericPregameAbilitySuppression", 1);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, false);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_PlayerUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, false);
    libStEx_gf_TutorialVeteranShowHideRetryButton(true);
    gf__1D_AddReplenisherBehaviors();
    TriggerEnable(gt__1D_AOEChallengeSuccess, true);
    TriggerEnable(gt__1D_AOEChallengeFail, true);
    TriggerEnable(gt__1D_AOEFountainUsed, true);
    TriggerEnable(gt__1D_AOEFountainDeath, true);
    TriggerEnable(gt__1D_AOERegenGlobeReminder, true);
    TriggerExecute(gt__1D_AOEWaveTimerExpires, true, false);
    TimerStart(gv__1D_WaveTimer, gv__1D_WaveDelayLong_C, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1D_AOEChallengeStart_Init () {
    gt__1D_AOEChallengeStart = TriggerCreate("gt__1D_AOEChallengeStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1D_AOE Challenge Success
//--------------------------------------------------------------------------------------------------
bool gt__1D_AOEChallengeSuccess_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(gv__1D_Remaining_Enemies) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__1D_AOEChallengeFail, false);
    TriggerExecute(libStEx_gt_ObjectiveBossFightComplete3, true, false);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, true);
    libNtve_gf_MakeUnitInvulnerable(gv__1D_Keep, true);
    TimerPause(gv__1D_WaveTimer, true);
    Wait(2.0, c_timeGame);
    gf_ChallengeSuccessWait();
    if ((gv__1D_VisionRevealer != null)) {
        VisRevealerDestroy(gv__1D_VisionRevealer);
        gv__1D_VisionRevealer = null;
    }

    TriggerEnable(gt__1D_AOEFountainUsed, false);
    TriggerEnable(gt__1D_AOEFountainDeath, false);
    TriggerEnable(gt__1D_AOERegenGlobeReminder, false);
    TriggerEnable(gt__1D_AOERegenGlobeDies, false);
    TriggerEnable(gt__1D_AOERegenGlobePickedUp, false);
    Wait(2.0, c_timeGame);
    gf_ClearTownandLaneData();
    TriggerExecute(gt__1E_RoamingQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1D_AOEChallengeSuccess_Init () {
    gt__1D_AOEChallengeSuccess = TriggerCreate("gt__1D_AOEChallengeSuccess_Func");
    TriggerEnable(gt__1D_AOEChallengeSuccess, false);
    TriggerAddEventUnitDied(gt__1D_AOEChallengeSuccess, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1D_AOE Challenge Fail
//--------------------------------------------------------------------------------------------------
bool gt__1D_AOEChallengeFail_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup autoBEEA7B06_g;
    int autoBEEA7B06_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__1D_AOEChallengeSuccess, false);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, true);
    autoBEEA7B06_g = gv__1D_Remaining_Enemies;
    autoBEEA7B06_u = UnitGroupCount(autoBEEA7B06_g, c_unitCountAll);
    for (;; autoBEEA7B06_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoBEEA7B06_g, autoBEEA7B06_u);
        if (lv_itUnit == null) { break; }
        UnitIssueOrder(lv_itUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(lv_itUnit, true);
    }
    TimerPause(gv__1D_WaveTimer, true);
    gf_ChallengeFailedWait(gt__1D_AOEChallengeCallbackReset);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt__1D_AOEChallengePreReady, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1D_AOEChallengeFail_Init () {
    gt__1D_AOEChallengeFail = TriggerCreate("gt__1D_AOEChallengeFail_Func");
    TriggerEnable(gt__1D_AOEChallengeFail, false);
    TriggerAddEventUnitDied(gt__1D_AOEChallengeFail, UnitRefFromVariable("libStEx_gv_hERO_PlayerUnit"));
    TriggerAddEventUnitDied(gt__1D_AOEChallengeFail, UnitRefFromVariable("gv__1D_Keep"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1D_AOE Challenge Balance
//--------------------------------------------------------------------------------------------------
bool gt__1D_AOEChallengeBalance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv__1D_PlayTimes >= libStEx_gv_playCount_LowerDifficulty_C)) {
        gv__1D_TownStructureInfo[1].lv_healthPercent = 100.0;
        gv__1D_TownStructureInfo[2].lv_healthPercent = 100.0;
        gv__1D_TownStructureInfo[2].lv_energyPercent = 100.0;
        gv__1D_TownStructureInfo[3].lv_healthPercent = 100.0;
        gv__1D_TownStructureInfo[3].lv_energyPercent = 100.0;
        gv__1D_TownStructureInfo[4].lv_healthPercent = 100.0;
        gv__1D_TownStructureInfo[5].lv_healthPercent = 100.0;
        gv__1D_TownStructureInfo[6].lv_healthPercent = 100.0;
        gv__1D_TownStructureInfo[6].lv_energyPercent = 100.0;
        gv__1D_TownStructureInfo[7].lv_healthPercent = 100.0;
        gv__1D_TownStructureInfo[7].lv_energyPercent = 100.0;
        gv__1D_TownStructureInfo[8].lv_healthPercent = 100.0;
        gv__1D_TownStructureInfo[9].lv_healthPercent = 100.0;
        gv__1D_TownStructureInfo[10].lv_healthPercent = 100.0;
        gv__1D_TownStructureInfo[11].lv_healthPercent = 100.0;
        gv__1D_TownStructureInfo[11].lv_health = gv__1D_TownHallMaxHealthEasy_C;
        gv__1D_TownStructureInfo[11].lv_energyPercent = 100.0;
    }
    else {
        gv__1D_TownStructureInfo[1].lv_healthPercent = 80.0;
        gv__1D_TownStructureInfo[2].lv_healthPercent = 80.0;
        gv__1D_TownStructureInfo[2].lv_energyPercent = 70.0;
        gv__1D_TownStructureInfo[3].lv_healthPercent = 80.0;
        gv__1D_TownStructureInfo[3].lv_energyPercent = 50.0;
        gv__1D_TownStructureInfo[4].lv_healthPercent = 80.0;
        gv__1D_TownStructureInfo[5].lv_healthPercent = 85.0;
        gv__1D_TownStructureInfo[6].lv_healthPercent = 90.0;
        gv__1D_TownStructureInfo[6].lv_energyPercent = 95.1;
        gv__1D_TownStructureInfo[7].lv_healthPercent = 90.0;
        gv__1D_TownStructureInfo[7].lv_energyPercent = 95.1;
        gv__1D_TownStructureInfo[8].lv_healthPercent = 85.0;
        gv__1D_TownStructureInfo[9].lv_healthPercent = 100.0;
        gv__1D_TownStructureInfo[10].lv_healthPercent = 100.0;
        gv__1D_TownStructureInfo[11].lv_healthPercent = 100.0;
        gv__1D_TownStructureInfo[11].lv_health = gv__1D_TownHallMaxHealth_C;
        gv__1D_TownStructureInfo[11].lv_energyPercent = 100.0;
    }
    gf__1D_SetTownVitals();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1D_AOEChallengeBalance_Init () {
    gt__1D_AOEChallengeBalance = TriggerCreate("gt__1D_AOEChallengeBalance_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1D_AOE Challenge Callback Prep
//--------------------------------------------------------------------------------------------------
bool gt__1D_AOEChallengeCallbackPrep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1D_AOEChallengeCallbackPrep_Init () {
    gt__1D_AOEChallengeCallbackPrep = TriggerCreate("gt__1D_AOEChallengeCallbackPrep_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1D_AOE Challenge Callback Start
//--------------------------------------------------------------------------------------------------
bool gt__1D_AOEChallengeCallbackStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv__1D_PlayTimes == 1)) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00674", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1D_AOEChallengeCallbackStart_Init () {
    gt__1D_AOEChallengeCallbackStart = TriggerCreate("gt__1D_AOEChallengeCallbackStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1D_AOE Challenge Callback Reset
//--------------------------------------------------------------------------------------------------
bool gt__1D_AOEChallengeCallbackReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto780CD560_g;
    int auto780CD560_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_01_USER);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
    UnitSetState(libStEx_gv_hERO_PlayerUnit, c_unitStateFidget, false);
    libGame_gf_ApplyMountBehaviorToHero(libStEx_gv_hERO_PlayerUnit);
    Wait(0.125, c_timeGame);
    auto780CD560_g = gv__1D_Remaining_Enemies;
    auto780CD560_u = UnitGroupCount(auto780CD560_g, c_unitCountAll);
    for (;; auto780CD560_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto780CD560_g, auto780CD560_u);
        if (lv_itUnit == null) { break; }
        UnitRemove(lv_itUnit);
    }
    gf_RemoveAllRegenGlobes();
    Wait(0.125, c_timeGame);
    gf__1D_ResetTown();
    gf__1D_SpawnRightWave();
    gf__1D_SpawnTopWave();
    TriggerExecute(gt__1D_AOEChallengeBalance, true, false);
    Wait(0.25, c_timeGame);
    TriggerExecute(gt__1D_AOEChallengeCallbackPrep, true, false);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    CameraPan(libStEx_gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(1094)), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1D_AOEChallengeCallbackReset_Init () {
    gt__1D_AOEChallengeCallbackReset = TriggerCreate("gt__1D_AOEChallengeCallbackReset_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_Give MULE Again
//--------------------------------------------------------------------------------------------------
bool gt__1E_GiveMULEAgain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_players[libGame_gf_HeroSpawnPlayer()].lv_heroUnit != null)) {
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_GiveMULEAgain_Init () {
    gt__1E_GiveMULEAgain = TriggerCreate("gt__1E_GiveMULEAgain_Func");
    TriggerEnable(gt__1E_GiveMULEAgain, false);
    libGame_gf_HeroSpawn(gt__1E_GiveMULEAgain);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_Roaming Level Monitor
//--------------------------------------------------------------------------------------------------
bool gt__1E_RoamingLevelMonitor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(libStEx_gv_hERO_PlayerUnit, c_unitPropXP, c_unitPropCurrent) >= libCore_gf_GetTotalXPForLevel(10))) {
        TriggerExecute(gt__1E_RoamingChallengeSuccess, false, false);
    }

    if ((UnitGetPropertyFixed(libStEx_gv_hERO_EnemyNazeebo, c_unitPropXP, c_unitPropCurrent) >= libCore_gf_GetTotalXPForLevel(10))) {
        if ((TriggerIsEnabled(gt__1E_RoamingChallengeFail) == true)) {
            TriggerExecute(gt__1E_RoamingChallengeFail, false, false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_RoamingLevelMonitor_Init () {
    gt__1E_RoamingLevelMonitor = TriggerCreate("gt__1E_RoamingLevelMonitor_Func");
    TriggerEnable(gt__1E_RoamingLevelMonitor, false);
    TriggerAddEventUnitGainLevel(gt__1E_RoamingLevelMonitor, UnitRefFromVariable("libStEx_gv_hERO_PlayerUnit"));
    TriggerAddEventUnitGainLevel(gt__1E_RoamingLevelMonitor, UnitRefFromVariable("libStEx_gv_hERO_EnemyGreymane"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_Roaming Q
//--------------------------------------------------------------------------------------------------
bool gt__1E_RoamingQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto580DF601_ae = libCore_gv_bALMaxPlayers;
    const int auto580DF601_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_challengeCurrent = ge_Challenges_ZeratulRoaming;
    SetTalentTreeSelectionPanelAutoShow(false);
    libUIUI_gf_UIHeroConsoleShowHideForPlayer(false, libStEx_gv_pLAYER_01_USER);
    TriggerExecute(gt_TwoLane_InitializeLanes, true, false);
    gv__1E_Fountains[1] = UnitFromId(699);
    gv__1E_Fountains[2] = UnitFromId(189);
    libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_spawnPoint = PointFromId(1276);
    libGame_gv_players[libStEx_gv_pLAYER_02_UTHER].lv_spawnPoint = PointFromId(843);
    libGame_gv_players[libStEx_gv_pLAYER_03_ORDER1].lv_spawnPoint = PointFromId(842);
    libGame_gv_players[libStEx_gv_pLAYER_07_CHAOS2].lv_spawnPoint = PointFromId(846);
    libGame_gv_players[libStEx_gv_pLAYER_08_CHAOS3].lv_spawnPoint = PointFromId(845);
    libStEx_gf_SwaptoNewHeroforPlayer(libStEx_gv_pLAYER_02_UTHER, "Uther", 8);
    libStEx_gv_hERO_FriendlyUther = libGame_gv_players[libStEx_gv_pLAYER_02_UTHER].lv_heroUnit;
    UnitBehaviorAdd(libStEx_gv_hERO_FriendlyUther, "UtherHolyLightUpgrade", libStEx_gv_hERO_FriendlyUther, 1);
    CatalogFieldValueModify(c_gameCatalogAbil, "UtherHolyLight", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", libStEx_gv_pLAYER_02_UTHER, "4", c_upgradeOperationSubtract);
    libStEx_gf_SwaptoNewHeroforPlayer(libStEx_gv_pLAYER_03_ORDER1, "Raynor", 8);
    libStEx_gv_hERO_FriendlyRaynor = libGame_gv_players[libStEx_gv_pLAYER_03_ORDER1].lv_heroUnit;
    libStEx_gf_SwaptoNewHeroforPlayer(libStEx_gv_pLAYER_07_CHAOS2, "Greymane", 9);
    libStEx_gv_hERO_EnemyGreymane = libGame_gv_players[libStEx_gv_pLAYER_07_CHAOS2].lv_heroUnit;
    libStEx_gf_SwaptoNewHeroforPlayer(libStEx_gv_pLAYER_08_CHAOS3, "WitchDoctor", 9);
    libStEx_gv_hERO_EnemyNazeebo = libGame_gv_players[libStEx_gv_pLAYER_08_CHAOS3].lv_heroUnit;
    lv_itPlayer = 1;
    for ( ; ( (auto580DF601_ai >= 0 && lv_itPlayer <= auto580DF601_ae) || (auto580DF601_ai < 0 && lv_itPlayer >= auto580DF601_ae) ) ; lv_itPlayer += auto580DF601_ai ) {
        if ((lv_itPlayer != libStEx_gv_pLAYER_01_USER) && (lv_itPlayer != libStEx_gv_pLAYER_02_UTHER) && (lv_itPlayer != libStEx_gv_pLAYER_03_ORDER1) && (lv_itPlayer != libStEx_gv_pLAYER_07_CHAOS2) && (lv_itPlayer != libStEx_gv_pLAYER_08_CHAOS3) && (libGame_gv_players[lv_itPlayer].lv_heroUnit != null)) {
            UnitRemove(libGame_gv_players[lv_itPlayer].lv_heroUnit);
            libGame_gv_players[lv_itPlayer].lv_heroUnit = null;
            libUIUI_gf_UIPartyFrameShowHidePlayerForPartyFrame(false, lv_itPlayer);
        }

    }
    libUIUI_gf_UIPartyFrameShowHidePartyFramePanelForPlayer(true, libStEx_gv_pLAYER_01_USER);
    TriggerExecute(gt_RoamingQ, true, true);
    TriggerExecute(gt__1E_RoamingChallengeBalance, true, false);
    SetTalentHighlighted("ZeratulMasteryGreaterCleaveCleave", true);
    SetTalentHighlighted("ZeratulRendingCleave", true);
    SetTalentHighlighted("ZeratulWormhole", true);
    TriggerExecute(gt__1E_RoamingChallengePreReady, true, true);
    gf_AutomateRoamingChallenge();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_RoamingQ_Init () {
    gt__1E_RoamingQ = TriggerCreate("gt__1E_RoamingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_Roaming Ready Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt__1E_RoamingReadyButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_ChallengeTalentsAvailableQuery() == false)) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MX_TutorialVet_StartButton", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libStEx_gf_TutorialVeteranShowHideReadyButton(false);
    libStEx_gf_TutorialVeteranShowHideRespecButton(false);
    libStEx_gf_TutorialVeteranShowHideRetryButton(false);
    TransmissionClearAll();
    TriggerExecute(libStEx_gt_ObjectiveChallengeReadyComplete, true, false);
    Wait(1.5, c_timeGame);
    TriggerExecute(gt__1E_RoamingChallengeStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_RoamingReadyButtonClicked_Init () {
    gt__1E_RoamingReadyButtonClicked = TriggerCreate("gt__1E_RoamingReadyButtonClicked_Func");
    TriggerEnable(gt__1E_RoamingReadyButtonClicked, false);
    libStEx_gf_TutorialPlayerHitsReadyButton(gt__1E_RoamingReadyButtonClicked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_Roaming Challenge Pre Ready
//--------------------------------------------------------------------------------------------------
bool gt__1E_RoamingChallengePreReady_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoCD891D3A_ae = 2;
    const int autoCD891D3A_ai = 1;
    int autoF8349214_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MX_TutorialVet_PreCountdown3", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    UnitBehaviorAddPlayer(libStEx_gv_hERO_PlayerUnit, "HeroGenericPregameAbilitySuppression", libStEx_gv_pLAYER_01_USER, 1);
    gv__1E_EnemyKilledGraymann = false;
    gv__1E_EnemyKilledNazeebo = false;
    if ((gv__1E_PlayTimes == 1)) {
        libStEx_gf_RespecPlayer(libStEx_gv_pLAYER_01_USER, false);
    }

    lv_index = 1;
    for ( ; ( (autoCD891D3A_ai >= 0 && lv_index <= autoCD891D3A_ae) || (autoCD891D3A_ai < 0 && lv_index >= autoCD891D3A_ae) ) ; lv_index += autoCD891D3A_ai ) {
        if ((gv__1E_FountainText[lv_index] == c_textTagNone)) {
            TextTagCreate(StringExternal("Param/Value/BBA84048"), 24, UnitGetPosition(gv__1E_Fountains[lv_index]), libUIUI_gv_uI_HealingFountainsHelpText_HeightOffset_C, true, false, PlayerGroupAll());
            gv__1E_FountainText[lv_index] = TextTagLastCreated();
        }

    }
    TriggerQueueEnter();
    UnitSelect(libStEx_gv_hERO_PlayerUnit, libStEx_gv_pLAYER_01_USER, true);
    CameraLockInput(libStEx_gv_sE_Player, false);
    Wait(1.0, c_timeGame);
    autoF8349214_val = gv__1E_PlayTimes;
    if (autoF8349214_val == 1) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00728", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gv__1E_RoamingChallengeLevelTransmission = TransmissionLastSent();
        TriggerExecute(gt__1E_RoamingChallengeLevelHighlight, true, false);
    }
    else if (autoF8349214_val == 2) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00729", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoF8349214_val == 3) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00730", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        gf_ChallengeEncouragementLine(gv__1E_PlayTimes, false);
    }
    Wait(1.0, c_timeGame);
    TriggerEnable(libStEx_gt_ObjectiveChallengeReadyCreate, true);
    TriggerEnable(gt__1E_RoamingReadyButtonClicked, true);
    libStEx_gf_TutorialVeteranShowHideReadyButton(true);
    libStEx_gf_TutorialVeteranShowHideRespecButton(true);
    libStEx_gf_TutorialVeteranShowHideRetryButton(false);
    TriggerEnable(libStEx_gt_ObjectiveRoamingCreate, true);
    TriggerExecute(libStEx_gt_ObjectiveRoamingCreate, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_RoamingChallengePreReady_Init () {
    gt__1E_RoamingChallengePreReady = TriggerCreate("gt__1E_RoamingChallengePreReady_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_Roaming Challenge Level Highlight
//--------------------------------------------------------------------------------------------------
bool gt__1E_RoamingChallengeLevelHighlight_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[3] lv_labels;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_labels[init_i] = c_invalidDialogControlId;
    }

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionWait(gv__1E_RoamingChallengeLevelTransmission, 0.0);
    Wait(4.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_RoamingChallengeLevelHighlight_Init () {
    gt__1E_RoamingChallengeLevelHighlight = TriggerCreate("gt__1E_RoamingChallengeLevelHighlight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_Roaming Challenge Start
//--------------------------------------------------------------------------------------------------
bool gt__1E_RoamingChallengeStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto11C361A0_g;
    int auto11C361A0_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ChallengeStartWait(false, gt__1E_RoamingChallengeCallbackPrep, gt__1E_RoamingChallengeCallbackStart, PointFromId(1276), TextCase(StringExternal("Param/Value/42D7B07C"), true), (gv__1E_PlayTimes == 1));
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MX_TutorialVet_ChallengeStart3", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libCore_gv_sYSTalentsOn = false;
    UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "HeroGenericPregameAbilitySuppression", 1);
    CameraLockInput(libStEx_gv_pLAYER_01_USER, false);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, false);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, false);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_PlayerUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    libStEx_gf_ActivateDamageforUnit(libStEx_gv_hERO_FriendlyRaynor);
    libStEx_gf_ActivateDamageforUnit(libStEx_gv_hERO_FriendlyUther);
    libStEx_gf_ActivateDamageforUnit(libStEx_gv_hERO_EnemyNazeebo);
    libStEx_gf_ActivateDamageforUnit(libStEx_gv_hERO_EnemyGreymane);
    TriggerEnable(gt__1E_RoamingChallengeSuccess, true);
    TriggerEnable(gt__1E_RoamingChallengeFail, true);
    TriggerEnable(gt__1E_RoamingHeroKilled, true);
    TriggerEnable(gt__1E_RoamingHeroTakesDamage, true);
    libCore_gv_data_XP_HeroXPModifier[1] = gv__1E_HeroXPModifierBeforeKill;
    libCore_gv_data_XP_MinionXPModifier[1] = gv__1E_MinionXPModifierBeforeKill;
    libCore_gv_data_XP_MinionXPModifier[2] = gv__1E_MinionXPModifierEnemy;
    TriggerEnable(gt__1E_RoamingFoutainText, true);
    TriggerEnable(gt__1E_RoamingFountainUsed, true);
    libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_spawnPoint = PointFromId(844);
    libCore_gv_sYSMinionAI = true;
    libGame_gf_MinionStartStopMinionSystem(true);
    libGame_gf_MinionStartStopMinionSpawnCycle(true);
    libCore_gv_bALDeathTimeOverride = gv__1E_DeathTime;
    auto11C361A0_g = UnitGroup("StormGameStartPathingBlocker", libCore_gv_cOMPUTER_Neutral, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto11C361A0_u = UnitGroupCount(auto11C361A0_g, c_unitCountAll);
    for (;; auto11C361A0_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto11C361A0_g, auto11C361A0_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_itUnit, false);
    }
    TriggerExecute(gt__1E_RoamingTipMount, true, false);
    TriggerEnable(gt__1E_RoamingLevelMonitor, true);
    TriggerEnable(gt__1E_RoamingTeamLevelUpLabel, true);
    libCore_gv_sYSXPOn = true;
    libAIAI_gf_HeroAISetupTeamData();
    gf__1E_EnableAIToDefendTheLane(libStEx_gv_pLAYER_02_UTHER);
    AIRequiredLane(libGame_gv_players[libStEx_gv_pLAYER_02_UTHER].lv_heroUnit, 2);
    gf__1E_EnableAIToDefendTheLane(libStEx_gv_pLAYER_03_ORDER1);
    AIRequiredLane(libGame_gv_players[libStEx_gv_pLAYER_03_ORDER1].lv_heroUnit, 1);
    gf__1E_EnableAIToDefendTheLane(libStEx_gv_pLAYER_07_CHAOS2);
    AIRequiredLane(libGame_gv_players[libStEx_gv_pLAYER_07_CHAOS2].lv_heroUnit, 2);
    gf__1E_EnableAIToDefendTheLane(libStEx_gv_pLAYER_08_CHAOS3);
    AIRequiredLane(libGame_gv_players[libStEx_gv_pLAYER_08_CHAOS3].lv_heroUnit, 1);
    TriggerEnable(gt__1E_GiveMULEAgain, true);
    SetTalentTreeSelectionPanelAutoShow(false);
    AINotifyGameStarted();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_RoamingChallengeStart_Init () {
    gt__1E_RoamingChallengeStart = TriggerCreate("gt__1E_RoamingChallengeStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_Roaming Challenge Success
//--------------------------------------------------------------------------------------------------
bool gt__1E_RoamingChallengeSuccess_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto19BE3389_g;
    int auto19BE3389_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__1E_RoamingChallengeFail, false);
    TriggerExecute(libStEx_gt_ObjectiveRoamingComplete, true, false);
    TriggerEnable(gt__1E_RoamingLevelMonitor, false);
    TriggerEnable(gt__1E_RoamingHeroKilled, false);
    TriggerEnable(gt__1E_RoamingHeroTakesDamage, false);
    TriggerEnable(gt__1E_RoamingFoutainText, false);
    TriggerEnable(gt__1E_RoamingFountainUsed, false);
    gv__1E_Complete = true;
    SetTalentTreeSelectionPanelAutoShow(true);
    gf__1E_DisableAI();
    libUIUI_gf_UIPartyFrameShowHidePartyFramePanelForPlayer(false, libStEx_gv_pLAYER_01_USER);
    TriggerEnable(gt__1E_GiveMULEAgain, false);
    libCore_gv_sYSXPOn = false;
    libCore_gv_sYSTalentsOn = true;
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyRaynor, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyUther, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyNazeebo, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyGreymane, true);
    libCore_gv_bALDeathTimeOverride = 60.0;
    CatalogFieldValueModify(c_gameCatalogAbil, "UtherHolyLight", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", libStEx_gv_pLAYER_02_UTHER, "4", c_upgradeOperationAdd);
    TriggerStop(gt__1E_RoamingTipMount);
    libGame_gf_MinionStartStopMinionSpawnCycle(false);
    auto19BE3389_g = UnitGroup(null, c_playerAny, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto19BE3389_u = UnitGroupCount(auto19BE3389_g, c_unitCountAll);
    for (;; auto19BE3389_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto19BE3389_g, auto19BE3389_u);
        if (lv_itUnit == null) { break; }
        UnitIssueOrder(lv_itUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        libNtve_gf_PauseUnit(lv_itUnit, true);
    }
    gf_ChallengeSuccessWait();
    SetTalentHighlighted("ZeratulMasteryGreaterCleaveCleave", false);
    SetTalentHighlighted("ZeratulComboSlash", false);
    SetTalentHighlighted("ZeratulSeekerintheDark", false);
    AchievementAward(1, "TutorialLootChest");
    if ((libStEx_gf_IsthisanAutomatedPlaythrough() == true)) {
        TriggerExecute(gt_AutomationExitOut, true, false);
    }

    libGame_gf_GameOver(libGame_gv_teamOrderIndex_C);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_RoamingChallengeSuccess_Init () {
    gt__1E_RoamingChallengeSuccess = TriggerCreate("gt__1E_RoamingChallengeSuccess_Func");
    TriggerEnable(gt__1E_RoamingChallengeSuccess, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_Roaming Challenge Fail
//--------------------------------------------------------------------------------------------------
bool gt__1E_RoamingChallengeFail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gf_HeroKilledPlayer() == libStEx_gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__1E_RoamingChallengeSuccess, false);
    TriggerExecute(libStEx_gt_ObjectiveRoamingFail, true, false);
    TriggerEnable(gt__1E_RoamingLevelMonitor, false);
    TriggerEnable(gt__1E_RoamingHeroKilled, false);
    TriggerEnable(gt__1E_RoamingHeroTakesDamage, false);
    TriggerEnable(gt__1E_RoamingFoutainText, false);
    TriggerEnable(gt__1E_RoamingFountainUsed, false);
    SetTalentTreeSelectionPanelAutoShow(true);
    gf__1E_DisableAI();
    TriggerEnable(gt__1E_GiveMULEAgain, false);
    libCore_gv_sYSXPOn = false;
    libCore_gv_sYSTalentsOn = true;
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyRaynor, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyUther, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyNazeebo, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyGreymane, true);
    TriggerStop(gt__1E_RoamingTipMount);
    gf_ChallengeFailedWait(gt__1E_RoamingChallengeCallbackReset);
    libGame_gf_MinionStartStopMinionSystem(false);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt__1E_RoamingChallengePreReady, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_RoamingChallengeFail_Init () {
    gt__1E_RoamingChallengeFail = TriggerCreate("gt__1E_RoamingChallengeFail_Func");
    TriggerEnable(gt__1E_RoamingChallengeFail, false);
    libGame_gf_HeroKilled(gt__1E_RoamingChallengeFail);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_Roaming HeroKilled
//--------------------------------------------------------------------------------------------------
bool gt__1E_RoamingHeroKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unit auto17F8B862_val;

    // Conditions
    if (testConds) {
        if (!((DistanceBetweenPoints(UnitGetPosition(libStEx_gv_hERO_PlayerUnit), UnitGetPosition(EventUnit())) <= 12.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto17F8B862_val = EventUnit();
    if (auto17F8B862_val == libStEx_gv_hERO_EnemyGreymane) {
        gv__1E_EnemyKilledGraymann = true;
    }
    else if (auto17F8B862_val == libStEx_gv_hERO_EnemyNazeebo) {
        gv__1E_EnemyKilledNazeebo = true;
    }
    else {
    }
    if ((gv__1E_EnemyKilledGraymann == true) && (gv__1E_EnemyKilledNazeebo == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libCore_gv_data_XP_HeroXPModifier[1] = gv__1E_HeroXPModifierAfterKill;
        libCore_gv_data_XP_MinionXPModifier[1] = gv__1E_MinionXPModifierAfterKill;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_RoamingHeroKilled_Init () {
    gt__1E_RoamingHeroKilled = TriggerCreate("gt__1E_RoamingHeroKilled_Func");
    TriggerEnable(gt__1E_RoamingHeroKilled, false);
    TriggerAddEventUnitDied(gt__1E_RoamingHeroKilled, UnitRefFromVariable("libStEx_gv_hERO_EnemyNazeebo"));
    TriggerAddEventUnitDied(gt__1E_RoamingHeroKilled, UnitRefFromVariable("libStEx_gv_hERO_EnemyGreymane"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_Roaming Hero Takes Damage
//--------------------------------------------------------------------------------------------------
bool gt__1E_RoamingHeroTakesDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    string lv_effect;
    string lv_behavior;
    int lv_effectIndex;
    int lv_effectCount;
    int lv_periodicEffectCount;
    int lv_periodicEffectIndex;
    string lv_periodicEffect;
    unit lv_damagingUnit;
    int lv_playerIndex;
    int lv_heroOwner;
    int lv_buffIndex;
    bool lv_isDot;
    unit lv_unit;

    // Automatic Variable Declarations
    const int autoC6EEB237_ae = libCore_gv_bALMaxPlayers;
    const int autoC6EEB237_ai = 1;
    int auto466FF59C_ae;

    // Variable Initialization
    lv_targetUnit = EventPlayerEffectUsedUnitImpact();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(lv_targetUnit), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = 1;
    for ( ; ( (autoC6EEB237_ai >= 0 && lv_playerIndex <= autoC6EEB237_ae) || (autoC6EEB237_ai < 0 && lv_playerIndex >= autoC6EEB237_ae) ) ; lv_playerIndex += autoC6EEB237_ai ) {
        if (((lv_targetUnit == libGame_gv_players[lv_playerIndex].lv_heroUnit) || (UnitGroupHasUnit(libGame_gv_players[lv_playerIndex].lv_heroUnitGroup, lv_targetUnit) == true))) {
            lv_heroOwner = lv_playerIndex;
            break;
        }

    }
    if ((lv_heroOwner <= 0)) {
        return true;
    }

    lv_damagingUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    if ((UnitGetOwner(lv_damagingUnit) == lv_heroOwner)) {
        return true;
    }

    lv_effect = EventPlayerEffectUsed();
    if ((lv_effect != null)) {
        lv_behavior = EventPlayerEffectUsedSourceBehavior();
        if ((lv_behavior != null)) {
            lv_periodicEffectCount = CatalogFieldValueCount(c_gameCatalogBehavior, lv_behavior, "PeriodicDisplayEffect", c_playerAny);
            auto466FF59C_ae = lv_periodicEffectCount;
            lv_periodicEffectIndex = 1;
            for ( ; lv_periodicEffectIndex <= auto466FF59C_ae ; lv_periodicEffectIndex += 1 ) {
                lv_periodicEffect = (CatalogFieldValueGet(c_gameCatalogBehavior, lv_behavior, "PeriodicDisplayEffect[" + IntToString((lv_periodicEffectIndex - 1)) + "]", c_playerAny));
                if ((lv_effect == lv_periodicEffect)) {
                    return true;
                }

            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_RoamingHeroTakesDamage_Init () {
    gt__1E_RoamingHeroTakesDamage = TriggerCreate("gt__1E_RoamingHeroTakesDamage_Func");
    TriggerEnable(gt__1E_RoamingHeroTakesDamage, false);
    TriggerAddEventPlayerEffectUsedFromScope(gt__1E_RoamingHeroTakesDamage, c_playerAny, "CEffectDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_Roaming Team Level Up Label
//--------------------------------------------------------------------------------------------------
bool gt__1E_RoamingTeamLevelUpLabel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == libStEx_gv_hERO_PlayerUnit)) {
    }

    if ((EventUnit() == libStEx_gv_hERO_EnemyNazeebo)) {
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_RoamingTeamLevelUpLabel_Init () {
    gt__1E_RoamingTeamLevelUpLabel = TriggerCreate("gt__1E_RoamingTeamLevelUpLabel_Func");
    TriggerEnable(gt__1E_RoamingTeamLevelUpLabel, false);
    TriggerAddEventUnitGainLevel(gt__1E_RoamingTeamLevelUpLabel, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_Roaming TipMount
//--------------------------------------------------------------------------------------------------
bool gt__1E_RoamingTipMount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_originalLoc;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt__1E_RoamingTipMountUnhighlightButton, true);
    while (true) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((UnitIsAlive(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit) == true) && (libStEx_gf_PlayerIsInCombat(libStEx_gv_pLAYER_01_USER) == false) && (libGame_gf_MountEnabled(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit) == true) && ((UnitHasBehavior2(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit, "Mounted") == false) || (UnitBehaviorEnabled(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit, "Mounted") == false) || (UnitBehaviorCount(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit, "Mounted") == 0))) {
            if ((lv_originalLoc == null)) {
                lv_originalLoc = UnitGetPosition(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit);
            }
            else {
                if ((AIPathingCostMap(UnitGetPosition(libStEx_gv_hERO_PlayerUnit), lv_originalLoc) > 25)) {
                    TriggerEnable(TriggerGetCurrent(), false);
                    libStEx_gf_HighlightCommandButton(true, libStEx_ge_TutorialCommandButton_Mount);
                    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00674", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
                    Wait(10.0, c_timeGame);
                    libStEx_gf_HighlightCommandButton(false, libStEx_ge_TutorialCommandButton_Mount);
                    TriggerEnable(gt__1E_RoamingTipMountUnhighlightButton, false);
                    return true;
                }

            }
        }
        else {
            lv_originalLoc = null;
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_RoamingTipMount_Init () {
    gt__1E_RoamingTipMount = TriggerCreate("gt__1E_RoamingTipMount_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_Roaming TipMountUnhighlightButton
//--------------------------------------------------------------------------------------------------
bool gt__1E_RoamingTipMountUnhighlightButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libStEx_gf_HighlightCommandButton(false, libStEx_ge_TutorialCommandButton_Mount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_RoamingTipMountUnhighlightButton_Init () {
    gt__1E_RoamingTipMountUnhighlightButton = TriggerCreate("gt__1E_RoamingTipMountUnhighlightButton_Func");
    TriggerEnable(gt__1E_RoamingTipMountUnhighlightButton, false);
    TriggerAddEventUnitAbility(gt__1E_RoamingTipMountUnhighlightButton, UnitRefFromVariable("libStEx_gv_hERO_PlayerUnit"), AbilityCommand("Mount", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_Roaming Fountain Used
//--------------------------------------------------------------------------------------------------
bool gt__1E_RoamingFountainUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoAE5621EA_ae = 2;
    const int autoAE5621EA_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (autoAE5621EA_ai >= 0 && lv_index <= autoAE5621EA_ae) || (autoAE5621EA_ai < 0 && lv_index >= autoAE5621EA_ae) ) ; lv_index += autoAE5621EA_ai ) {
        if ((gv__1E_FountainText[lv_index] != c_textTagNone)) {
            TextTagShow(gv__1E_FountainText[lv_index], PlayerGroupAll(), false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_RoamingFountainUsed_Init () {
    gt__1E_RoamingFountainUsed = TriggerCreate("gt__1E_RoamingFountainUsed_Func");
    TriggerEnable(gt__1E_RoamingFountainUsed, false);
    TriggerAddEventPlayerEffectUsed(gt__1E_RoamingFountainUsed, libStEx_gv_pLAYER_01_USER, "MoonwellDrinkStartingSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_Roaming Foutain Text
//--------------------------------------------------------------------------------------------------
bool gt__1E_RoamingFoutainText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_player;

    // Automatic Variable Declarations
    const int auto75A4EDFA_ae = 2;
    const int auto75A4EDFA_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(libStEx_gv_hERO_PlayerUnit) == false)) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto75A4EDFA_ai >= 0 && lv_index <= auto75A4EDFA_ae) || (auto75A4EDFA_ai < 0 && lv_index >= auto75A4EDFA_ae) ) ; lv_index += auto75A4EDFA_ai ) {
        if ((UnitHasBehavior2(libStEx_gv_hERO_PlayerUnit, "HealingFountainCooldown") == true)) {
            TextTagShow(gv__1E_FountainText[lv_index], PlayerGroupAll(), false);
        }
        else {
            TextTagShow(gv__1E_FountainText[lv_index], PlayerGroupAll(), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_RoamingFoutainText_Init () {
    gt__1E_RoamingFoutainText = TriggerCreate("gt__1E_RoamingFoutainText_Func");
    TriggerEnable(gt__1E_RoamingFoutainText, false);
    TriggerAddEventTimePeriodic(gt__1E_RoamingFoutainText, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_Roaming Challenge Balance
//--------------------------------------------------------------------------------------------------
bool gt__1E_RoamingChallengeBalance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv__1E_PlayTimes += 1;
    if ((gv__1E_PlayTimes >= libStEx_gv_playCount_LowerDifficulty_C)) {
        libAIAI_gf_HeroAISetAIDifficultyLevel(libStEx_gv_pLAYER_02_UTHER, libAIAI_ge_HeroAIDifficulty_HeroAIMedium);
        libAIAI_gf_HeroAISetAIDifficultyLevel(libStEx_gv_pLAYER_03_ORDER1, libAIAI_ge_HeroAIDifficulty_HeroAIMedium);
        libAIAI_gf_HeroAISetAIDifficultyLevel(libStEx_gv_pLAYER_07_CHAOS2, libAIAI_ge_HeroAIDifficulty_HeroAIMedium);
        libAIAI_gf_HeroAISetAIDifficultyLevel(libStEx_gv_pLAYER_08_CHAOS3, libAIAI_ge_HeroAIDifficulty_HeroAIMedium);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyUther, c_unitPropLifeMax, 4000.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyUther, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyRaynor, c_unitPropLifeMax, 3500.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyRaynor, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyNazeebo, c_unitPropLifeMax, 1200.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyNazeebo, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyGreymane, c_unitPropLifeMax, 1200.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyGreymane, c_unitPropLifePercent, 100.0);
    }
    else {
        libAIAI_gf_HeroAISetAIDifficultyLevel(libStEx_gv_pLAYER_02_UTHER, libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard);
        libAIAI_gf_HeroAISetAIDifficultyLevel(libStEx_gv_pLAYER_03_ORDER1, libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard);
        libAIAI_gf_HeroAISetAIDifficultyLevel(libStEx_gv_pLAYER_07_CHAOS2, libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard);
        libAIAI_gf_HeroAISetAIDifficultyLevel(libStEx_gv_pLAYER_08_CHAOS3, libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyUther, c_unitPropLifeMax, 4000.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyUther, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyRaynor, c_unitPropLifeMax, 3500.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyRaynor, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyNazeebo, c_unitPropLifeMax, 1400.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyNazeebo, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyGreymane, c_unitPropLifeMax, 1500.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyGreymane, c_unitPropLifePercent, 100.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_RoamingChallengeBalance_Init () {
    gt__1E_RoamingChallengeBalance = TriggerCreate("gt__1E_RoamingChallengeBalance_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_Roaming Challenge Callback Prep
//--------------------------------------------------------------------------------------------------
bool gt__1E_RoamingChallengeCallbackPrep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_RoamingChallengeCallbackPrep_Init () {
    gt__1E_RoamingChallengeCallbackPrep = TriggerCreate("gt__1E_RoamingChallengeCallbackPrep_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_Roaming Challenge Callback Start
//--------------------------------------------------------------------------------------------------
bool gt__1E_RoamingChallengeCallbackStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv__1E_PlayTimes == 1)) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00732", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_RoamingChallengeCallbackStart_Init () {
    gt__1E_RoamingChallengeCallbackStart = TriggerCreate("gt__1E_RoamingChallengeCallbackStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_Roaming Challenge Callback Reset
//--------------------------------------------------------------------------------------------------
bool gt__1E_RoamingChallengeCallbackReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoB8E12D7F_g;
    int autoB8E12D7F_u;
    unitgroup autoF268D07C_g;
    int autoF268D07C_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_spawnPoint = PointFromId(1276);
    gf_Reset2LaneTownWait();
    libAIAI_gf_HeroAISetupTeamData();
    autoB8E12D7F_g = UnitGroup(null, c_playerAny, RegionFromId(21), libCore_gv_filtersMinionsTownMinions, 0);
    autoB8E12D7F_u = UnitGroupCount(autoB8E12D7F_g, c_unitCountAll);
    for (;; autoB8E12D7F_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoB8E12D7F_g, autoB8E12D7F_u);
        if (lv_itUnit == null) { break; }
        UnitRemove(lv_itUnit);
    }
    if ((UnitGetPropertyFixed(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit, c_unitPropXP, c_unitPropCurrent) >= libCore_gf_GetTotalXPForLevel(9))) {
        libStEx_gf_StorePlayerTalents();
        libStEx_gf_SwaptoNewHeroforPlayer(libStEx_gv_pLAYER_01_USER, "Zeratul", 8);
        libStEx_gf_SwaptoNewHeroforPlayer(libStEx_gv_pLAYER_03_ORDER1, "Raynor", 8);
        libStEx_gf_SwaptoNewHeroforPlayer(libStEx_gv_pLAYER_02_UTHER, "Uther", 8);
        libStEx_gv_hERO_PlayerUnit = libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit;
        libStEx_gv_hERO_FriendlyRaynor = libGame_gv_players[libStEx_gv_pLAYER_03_ORDER1].lv_heroUnit;
        libStEx_gv_hERO_FriendlyUther = libGame_gv_players[libStEx_gv_pLAYER_02_UTHER].lv_heroUnit;
        libStEx_gf_RestorePlayerTalents();
    }
    else {
        libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_01_USER);
        libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_03_ORDER1);
        libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_02_UTHER);
        libGame_gf_GrantXPToPlayer(((libCore_gf_GetTotalXPForLevel(8) - UnitGetPropertyFixed(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit, c_unitPropXP, c_unitPropCurrent))), libStEx_gv_pLAYER_01_USER, libGame_ge_XPSources_Debug);
        libGame_gf_GrantXPToPlayer(((libCore_gf_GetTotalXPForLevel(8) - UnitGetPropertyFixed(libGame_gv_players[libStEx_gv_pLAYER_03_ORDER1].lv_heroUnit, c_unitPropXP, c_unitPropCurrent))), libStEx_gv_pLAYER_03_ORDER1, libGame_ge_XPSources_Debug);
        libGame_gf_GrantXPToPlayer(((libCore_gf_GetTotalXPForLevel(8) - UnitGetPropertyFixed(libGame_gv_players[libStEx_gv_pLAYER_02_UTHER].lv_heroUnit, c_unitPropXP, c_unitPropCurrent))), libStEx_gv_pLAYER_02_UTHER, libGame_ge_XPSources_Debug);
    }
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
    libStEx_gf_SwaptoNewHeroforPlayer(libStEx_gv_pLAYER_07_CHAOS2, "Greymane", 9);
    libStEx_gf_SwaptoNewHeroforPlayer(libStEx_gv_pLAYER_08_CHAOS3, "WitchDoctor", 9);
    libStEx_gv_hERO_EnemyGreymane = libGame_gv_players[libStEx_gv_pLAYER_07_CHAOS2].lv_heroUnit;
    libStEx_gv_hERO_EnemyNazeebo = libGame_gv_players[libStEx_gv_pLAYER_08_CHAOS3].lv_heroUnit;
    TriggerExecute(gt__1E_RoamingChallengeBalance, true, false);
    libGame_gf_ApplyMountBehaviorToHero(libStEx_gv_hERO_PlayerUnit);
    libGame_gf_ApplyMountBehaviorToHero(libStEx_gv_hERO_FriendlyRaynor);
    libGame_gf_ApplyMountBehaviorToHero(libStEx_gv_hERO_FriendlyUther);
    libGame_gf_ApplyMountBehaviorToHero(libStEx_gv_hERO_EnemyNazeebo);
    libGame_gf_ApplyMountBehaviorToHero(libStEx_gv_hERO_EnemyGreymane);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_PlayerUnit, PointFromId(1276), false);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_FriendlyUther, PointFromId(1119), false);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_FriendlyRaynor, PointFromId(1117), false);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_EnemyGreymane, PointFromId(1278), false);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_EnemyNazeebo, PointFromId(1277), false);
    gf_RemoveAllRegenGlobes();
    autoF268D07C_g = UnitGroup("StormGameStartPathingBlocker", libCore_gv_cOMPUTER_Neutral, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoF268D07C_u = UnitGroupCount(autoF268D07C_g, c_unitCountAll);
    for (;; autoF268D07C_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoF268D07C_g, autoF268D07C_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_itUnit, true);
    }
    Wait(0.25, c_timeGame);
    TriggerExecute(gt__1E_RoamingChallengeCallbackPrep, true, false);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    CameraPan(libStEx_gv_pLAYER_01_USER, PointFromId(1276), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_RoamingChallengeCallbackReset_Init () {
    gt__1E_RoamingChallengeCallbackReset = TriggerCreate("gt__1E_RoamingChallengeCallbackReset_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2A_Escape Logic
//--------------------------------------------------------------------------------------------------
bool gt__2A_EscapeLogic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPoint;
    point lv_positionofValla;
    point lv_positionofETC;
    point lv_positionofJaina;
    point lv_positionofNazeebo;
    bool lv_nazeeboActive;
    fixed lv_initialFrostboltCooldown;
    bool lv_zombieWallUsed;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itPoint = gv__2A_WaypointCount;
    lv_initialFrostboltCooldown = 0.25;

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2A_EscapeLogic_Init () {
    gt__2A_EscapeLogic = TriggerCreate("gt__2A_EscapeLogic_Func");
    TriggerEnable(gt__2A_EscapeLogic, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2A_Zombie Wall Cancel Logic
//--------------------------------------------------------------------------------------------------
bool gt__2A_ZombieWallCancelLogic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_positionofValla;
    point lv_positionofNazeebo;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    while (!(((DistanceBetweenPoints(UnitGetPosition(libStEx_gv_hERO_FriendlyValla), gv__2A_EscapeZombieWallLocation) >= 3.0) || (UnitIsAlive(libStEx_gv_hERO_FriendlyValla) == false)))) {
        Wait(0.125, c_timeGame);
    }
    UnitIssueOrder(libStEx_gv_hERO_EnemyNazeebo, Order(AbilityCommand("WitchDoctorZombieWallCancel", 0)), c_orderQueueReplace);
    gv__2A_EscapeZombieWallLocation = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2A_ZombieWallCancelLogic_Init () {
    gt__2A_ZombieWallCancelLogic = TriggerCreate("gt__2A_ZombieWallCancelLogic_Func");
    TriggerEnable(gt__2A_ZombieWallCancelLogic, false);
    TriggerAddEventUnitDamaged(gt__2A_ZombieWallCancelLogic, UnitRefFromVariable("libStEx_gv_hERO_FriendlyValla"), c_unitDamageTypeAny, c_unitDamageEither, "WitchDoctorZombieWallWeaponDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2A_Escape Jaina Killed
//--------------------------------------------------------------------------------------------------
bool gt__2A_EscapeJainaKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == libStEx_gv_hERO_EnemyJaina))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv__2A_NestReticle != null)) {
        libNtve_gf_KillModel(gv__2A_NestReticle);
        gv__2A_NestReticle = null;
    }

    if ((gv__2A_NestTag != c_textTagNone)) {
        TextTagDestroy(gv__2A_NestTag);
        gv__2A_NestTag = c_textTagNone;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2A_EscapeJainaKilled_Init () {
    gt__2A_EscapeJainaKilled = TriggerCreate("gt__2A_EscapeJainaKilled_Func");
    TriggerEnable(gt__2A_EscapeJainaKilled, false);
    TriggerAddEventUnitDied(gt__2A_EscapeJainaKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2A_Escape Abathur Outside Base
//--------------------------------------------------------------------------------------------------
bool gt__2A_EscapeAbathurOutsideBase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == libStEx_gv_hERO_PlayerUnit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2A_EscapeAbathurOutsideBase_Init () {
    gt__2A_EscapeAbathurOutsideBase = TriggerCreate("gt__2A_EscapeAbathurOutsideBase_Func");
    TriggerEnable(gt__2A_EscapeAbathurOutsideBase, false);
    TriggerAddEventUnitRegion(gt__2A_EscapeAbathurOutsideBase, null, RegionFromId(17), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2A_Escape Abathur Used Nest
//--------------------------------------------------------------------------------------------------
bool gt__2A_EscapeAbathurUsedNest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == libStEx_gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "AbathurToxicNest"))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnitCreatedUnit(), RegionCircle(PointFromId(618), 3.0)) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv__2A_NestReticle != null)) {
        libNtve_gf_KillModel(gv__2A_NestReticle);
        gv__2A_NestReticle = null;
    }

    if ((gv__2A_NestTag != c_textTagNone)) {
        TextTagDestroy(gv__2A_NestTag);
        gv__2A_NestTag = c_textTagNone;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2A_EscapeAbathurUsedNest_Init () {
    gt__2A_EscapeAbathurUsedNest = TriggerCreate("gt__2A_EscapeAbathurUsedNest_Func");
    TriggerEnable(gt__2A_EscapeAbathurUsedNest, false);
    TriggerAddEventUnitCreated(gt__2A_EscapeAbathurUsedNest, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2A_Escape Q
//--------------------------------------------------------------------------------------------------
bool gt__2A_EscapeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2A_EscapeQ_Init () {
    gt__2A_EscapeQ = TriggerCreate("gt__2A_EscapeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2A_Escape Ready Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt__2A_EscapeReadyButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_ChallengeTalentsAvailableQuery() == false)) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv__2A_GateOpen == false)) {
        gv__2A_GateOpen = true;
        libNtve_gf_SendActorMessageToUnit(UnitFromId(360), "Signal PlayBuild");
    }

    libStEx_gf_TutorialVeteranShowHideReadyButton(false);
    libStEx_gf_TutorialVeteranShowHideRespecButton(false);
    libStEx_gf_TutorialVeteranShowHideRetryButton(false);
    TransmissionClearAll();
    TriggerExecute(libStEx_gt_ObjectiveChallengeReadyComplete, true, false);
    Wait(1.5, c_timeGame);
    TriggerExecute(gt__2A_EscapeChallengeStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2A_EscapeReadyButtonClicked_Init () {
    gt__2A_EscapeReadyButtonClicked = TriggerCreate("gt__2A_EscapeReadyButtonClicked_Func");
    TriggerEnable(gt__2A_EscapeReadyButtonClicked, false);
    libStEx_gf_TutorialPlayerHitsReadyButton(gt__2A_EscapeReadyButtonClicked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2A_Escape Challenge Pre Ready
//--------------------------------------------------------------------------------------------------
bool gt__2A_EscapeChallengePreReady_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoD0683552_val;

    // Actions
    if (!runActions) {
        return true;
    }

    gv__2A_PlayTimes += 1;
    TriggerQueueEnter();
    CameraLockInput(libStEx_gv_sE_Player, false);
    UnitAbilityEnable(libStEx_gv_hERO_PlayerUnit, "AbathurDeepTunnel", false);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, false);
    UnitBehaviorRemovePlayer(libStEx_gv_hERO_PlayerUnit, "HeroGenericPregameAbilitySuppression", libStEx_gv_pLAYER_01_USER, 1);
    UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyValla, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyValla, c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(libStEx_gv_hERO_EnemyJaina, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(libStEx_gv_hERO_EnemyJaina, c_unitPropEnergyPercent, 100.0);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_EnemyJaina, true);
    Wait(1.0, c_timeGame);
    if ((gv__2A_PlayTimes >= libStEx_gv_playCount_LowerDifficulty_C)) {
        libCore_gf_CreateReticleEffectAndTextTagAtPoint(libCore_ge_ReticleType_MainObjective, libCore_ge_ReticleSize_Medium, StringExternal("Param/Value/D91C2B44"), PointFromId(618));
        gv__2A_NestReticle = libNtve_gf_ActorLastCreated();
        gv__2A_NestTag = TextTagLastCreated();
    }

    autoD0683552_val = gv__2A_PlayTimes;
    if (autoD0683552_val == 1) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00626", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
        TransmissionWait(TransmissionLastSent(), 5.0);
        libCore_gf_AttachReticleEffectAndTextTagOnUnit(libCore_ge_ReticleType_MainObjective, libCore_ge_ReticleSize_Medium, null, UnitFromId(418), "Ref_Center");
        libCore_gf_StoreActorForUnit(UnitFromId(418), 1, libNtve_gf_ActorLastCreated());
        libCore_gf_AttachReticleEffectAndTextTagOnUnit(libCore_ge_ReticleType_MainObjective, libCore_ge_ReticleSize_Medium, null, UnitFromId(1098), "Ref_Center");
        libCore_gf_StoreActorForUnit(UnitFromId(1098), 1, libNtve_gf_ActorLastCreated());
        libCore_gf_AttachReticleEffectAndTextTagOnUnit(libCore_ge_ReticleType_MainObjective, libCore_ge_ReticleSize_Medium, null, UnitFromId(414), "Ref_Center");
        libCore_gf_StoreActorForUnit(UnitFromId(414), 1, libNtve_gf_ActorLastCreated());
        libCore_gf_AttachReticleEffectAndTextTagOnUnit(libCore_ge_ReticleType_MainObjective, libCore_ge_ReticleSize_Medium, null, UnitFromId(413), "Ref_Center");
        libCore_gf_StoreActorForUnit(UnitFromId(413), 1, libNtve_gf_ActorLastCreated());
        TransmissionWait(TransmissionLastSent(), 0.0);
        Wait(1.0, c_timeGame);
        libNtve_gf_KillModel(libCore_gf_ActorStoredForUnit(UnitFromId(418), 1));
        libNtve_gf_KillModel(libCore_gf_ActorStoredForUnit(UnitFromId(1098), 1));
        libNtve_gf_KillModel(libCore_gf_ActorStoredForUnit(UnitFromId(414), 1));
        libNtve_gf_KillModel(libCore_gf_ActorStoredForUnit(UnitFromId(413), 1));
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00743", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoD0683552_val == 2) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00689", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoD0683552_val == 3) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00691", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        gf_ChallengeEncouragementLine(gv__2A_PlayTimes, false);
    }
    Wait(1.0, c_timeGame);
    TriggerEnable(libStEx_gt_ObjectiveChallengeReadyCreate, true);
    TriggerEnable(gt__2A_EscapeReadyButtonClicked, true);
    libStEx_gf_TutorialVeteranShowHideReadyButton(true);
    libStEx_gf_TutorialVeteranShowHideRespecButton(true);
    libStEx_gf_TutorialVeteranShowHideRetryButton(false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2A_EscapeChallengePreReady_Init () {
    gt__2A_EscapeChallengePreReady = TriggerCreate("gt__2A_EscapeChallengePreReady_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2A_Escape Challenge Start
//--------------------------------------------------------------------------------------------------
bool gt__2A_EscapeChallengeStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto86B0116D_g;
    int auto86B0116D_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior2(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehavior") == true) || (UnitHasBehavior2(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehaviorPreControl") == true))) {
        UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehaviorPreControl", 1);
        UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehavior", 1);
    }

    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_07_CHAOS2);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_08_CHAOS3);
    gf_ChallengeStartWait(false, gt__2A_EscapeChallengeCallbackPrep, gt__2A_EscapeChallengeCallbackStart, PointFromId(16), TextCase(StringExternal("Param/Value/8C7A1145"), true), (gv__2A_PlayTimes == 1));
    CameraLockInput(libStEx_gv_sE_Player, false);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyValla, false);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_EnemyJaina, false);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, false);
    UnitAbilityEnable(libStEx_gv_hERO_PlayerUnit, "AbathurDeepTunnel", true);
    libStEx_gf_TutorialVeteranShowHideRetryButton(true);
    auto86B0116D_g = UnitGroup("StormGameStartPathingBlocker", c_playerAny, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto86B0116D_u = UnitGroupCount(auto86B0116D_g, c_unitCountAll);
    for (;; auto86B0116D_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto86B0116D_g, auto86B0116D_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_itUnit, false);
    }
    TriggerEnable(gt__2A_EscapeChallengeSuccess, true);
    TriggerEnable(gt__2A_EscapeChallengeFail, true);
    TriggerEnable(gt__2A_EscapeJainaKilled, true);
    TriggerEnable(gt__2A_EscapeLogic, true);
    TriggerEnable(gt__2A_EscapeAbathurUsedNest, true);
    TriggerEnable(gt__2A_EscapeAbathurOutsideBase, true);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt__2A_EscapeLogic, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2A_EscapeChallengeStart_Init () {
    gt__2A_EscapeChallengeStart = TriggerCreate("gt__2A_EscapeChallengeStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2A_Escape Challenge Success
//--------------------------------------------------------------------------------------------------
bool gt__2A_EscapeChallengeSuccess_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__2A_EscapeJainaKilled, false);
    TriggerEnable(gt__2A_EscapeChallengeFail, false);
    TriggerEnable(gt__2A_EscapeLogic, false);
    TriggerEnable(gt__2A_ZombieWallCancelLogic, false);
    TriggerEnable(gt__2A_EscapeAbathurOutsideBase, false);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyValla, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyJaina, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyNazeebo, true);
    if ((gv__2A_NestReticle != null)) {
        libNtve_gf_KillModel(gv__2A_NestReticle);
        gv__2A_NestReticle = null;
    }

    if ((gv__2A_NestTag != c_textTagNone)) {
        TextTagDestroy(gv__2A_NestTag);
        gv__2A_NestTag = c_textTagNone;
    }

    Wait(2.0, c_timeGame);
    gf_ChallengeSuccessWait();
    TriggerExecute(gt__2C_DragonKnightQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2A_EscapeChallengeSuccess_Init () {
    gt__2A_EscapeChallengeSuccess = TriggerCreate("gt__2A_EscapeChallengeSuccess_Func");
    TriggerEnable(gt__2A_EscapeChallengeSuccess, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2A_Escape Challenge Fail
//--------------------------------------------------------------------------------------------------
bool gt__2A_EscapeChallengeFail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((libGame_gf_HeroKilledPlayer() == libStEx_gv_pLAYER_01_USER) || (libGame_gf_HeroKilledPlayer() == libStEx_gv_pLAYER_03_ORDER1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__2A_EscapeJainaKilled, false);
    TriggerEnable(gt__2A_EscapeChallengeSuccess, false);
    TriggerEnable(gt__2A_EscapeLogic, false);
    TriggerEnable(gt__2A_ZombieWallCancelLogic, false);
    TriggerEnable(gt__2A_EscapeAbathurOutsideBase, false);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyValla, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyJaina, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyNazeebo, true);
    if ((gv__2A_NestReticle != null)) {
        libNtve_gf_KillModel(gv__2A_NestReticle);
        gv__2A_NestReticle = null;
    }

    if ((gv__2A_NestTag != c_textTagNone)) {
        TextTagDestroy(gv__2A_NestTag);
        gv__2A_NestTag = c_textTagNone;
    }

    gf_ChallengeFailedWait(gt__2A_EscapeChallengeCallbackReset);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt__2A_EscapeChallengePreReady, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2A_EscapeChallengeFail_Init () {
    gt__2A_EscapeChallengeFail = TriggerCreate("gt__2A_EscapeChallengeFail_Func");
    TriggerEnable(gt__2A_EscapeChallengeFail, false);
    libGame_gf_HeroKilled(gt__2A_EscapeChallengeFail);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2A_Escape Challenge Balance
//--------------------------------------------------------------------------------------------------
bool gt__2A_EscapeChallengeBalance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv__2A_PlayTimes >= libStEx_gv_playCount_LowerDifficulty_C)) {
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyValla, c_unitPropLifeMax, 1900.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyValla, c_unitPropLifeRegen, 0.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyValla, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyJaina, c_unitPropLifeMax, 1000.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyJaina, c_unitPropLifeRegen, 0.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyJaina, c_unitPropLifePercent, 100.0);
    }
    else {
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyValla, c_unitPropLifeMax, 1600.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyValla, c_unitPropLifeRegen, 0.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyValla, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyJaina, c_unitPropLifeMax, 1300.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyJaina, c_unitPropLifeRegen, 0.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyJaina, c_unitPropLifePercent, 100.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2A_EscapeChallengeBalance_Init () {
    gt__2A_EscapeChallengeBalance = TriggerCreate("gt__2A_EscapeChallengeBalance_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2A_Escape Challenge Callback Prep
//--------------------------------------------------------------------------------------------------
bool gt__2A_EscapeChallengeCallbackPrep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2A_EscapeChallengeCallbackPrep_Init () {
    gt__2A_EscapeChallengeCallbackPrep = TriggerCreate("gt__2A_EscapeChallengeCallbackPrep_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2A_Escape Challenge Callback Start
//--------------------------------------------------------------------------------------------------
bool gt__2A_EscapeChallengeCallbackStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv__2A_PlayTimes == 1)) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00692", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2A_EscapeChallengeCallbackStart_Init () {
    gt__2A_EscapeChallengeCallbackStart = TriggerCreate("gt__2A_EscapeChallengeCallbackStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2A_Escape Challenge Callback Reset
//--------------------------------------------------------------------------------------------------
bool gt__2A_EscapeChallengeCallbackReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup autoBDF2461B_g;
    int autoBDF2461B_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior2(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehavior") == true) || (UnitHasBehavior2(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehaviorPreControl") == true))) {
        UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehaviorPreControl", 1);
        UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehavior", 1);
    }

    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_01_USER);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_03_ORDER1);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyValla, true);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_07_CHAOS2);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_EnemyJaina, true);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_08_CHAOS3);
    autoBDF2461B_g = UnitGroup("StormGameStartPathingBlocker", c_playerAny, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoBDF2461B_u = UnitGroupCount(autoBDF2461B_g, c_unitCountAll);
    for (;; autoBDF2461B_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoBDF2461B_g, autoBDF2461B_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_itUnit, true);
    }
    libGame_gf_RemoveTalentAbilityModificationsForPlayerAtTalent(libStEx_gv_pLAYER_06_CHAOS1, 1, 1);
    TriggerExecute(gt__2A_EscapeChallengeBalance, true, false);
    Wait(0.25, c_timeGame);
    TriggerExecute(gt__2A_EscapeChallengeCallbackPrep, true, false);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    CameraPan(libStEx_gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(2070)), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2A_EscapeChallengeCallbackReset_Init () {
    gt__2A_EscapeChallengeCallbackReset = TriggerCreate("gt__2A_EscapeChallengeCallbackReset_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2B_Falstad Change Lane
//--------------------------------------------------------------------------------------------------
bool gt__2B_FalstadChangeLane_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_duration;

    // Automatic Variable Declarations
    int autoFE29F895_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((UnitIsAlive(libStEx_gv_hERO_EnemyFalstad) == false)) {
            TriggerEnable(TriggerGetCurrent(), true);
            return true;
        }

        if ((AILaneWaypointGetClosestLane(UnitGetPosition(libStEx_gv_hERO_EnemyFalstad)) == gv__2B_CurrentLane)) {
            TriggerEnable(TriggerGetCurrent(), true);
            return true;
        }

        if ((libNtve_gf_UnitInRegion(libStEx_gv_hERO_EnemyFalstad, RegionFromId(6)) == true)) {
            libNtve_gf_UnitAbilityRemoveCooldown(libStEx_gv_hERO_EnemyFalstad, "FalstadFlight", "Abil/FalstadFlight");
            autoFE29F895_val = gv__2B_CurrentLane;
            if (autoFE29F895_val == 1) {
                UnitIssueOrder(libStEx_gv_hERO_EnemyFalstad, OrderTargetingPoint(AbilityCommand("FalstadFlight", 0), PointFromId(733)), c_orderQueueReplace);
            }
            else if (autoFE29F895_val == 2) {
                UnitIssueOrder(libStEx_gv_hERO_EnemyFalstad, OrderTargetingPoint(AbilityCommand("FalstadFlight", 0), PointFromId(4)), c_orderQueueReplace);
            }
            else {
            }
            Wait(2.0, c_timeGame);
            TriggerEnable(TriggerGetCurrent(), true);
            return true;
        }

        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2B_FalstadChangeLane_Init () {
    gt__2B_FalstadChangeLane = TriggerCreate("gt__2B_FalstadChangeLane_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2B_Soak Lanes Level Monitor
//--------------------------------------------------------------------------------------------------
bool gt__2B_SoakLanesLevelMonitor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(libStEx_gv_hERO_PlayerUnit, c_unitPropXP, c_unitPropCurrent) >= libCore_gf_GetTotalXPForLevel(13))) {
        TriggerExecute(gt__2B_SoakLanesChallengeSuccess, false, false);
    }

    if ((UnitGetPropertyFixed(libStEx_gv_hERO_EnemyFalstad, c_unitPropXP, c_unitPropCurrent) >= libCore_gf_GetTotalXPForLevel(13))) {
        TriggerExecute(gt__2B_SoakLanesChallengeFail, false, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2B_SoakLanesLevelMonitor_Init () {
    gt__2B_SoakLanesLevelMonitor = TriggerCreate("gt__2B_SoakLanesLevelMonitor_Func");
    TriggerEnable(gt__2B_SoakLanesLevelMonitor, false);
    TriggerAddEventUnitGainLevel(gt__2B_SoakLanesLevelMonitor, UnitRefFromVariable("libStEx_gv_hERO_PlayerUnit"));
    TriggerAddEventUnitGainLevel(gt__2B_SoakLanesLevelMonitor, UnitRefFromVariable("libStEx_gv_hERO_EnemyFalstad"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2B_AttackAbathur
//--------------------------------------------------------------------------------------------------
bool gt__2B_AttackAbathur_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_locustGroup;
    unit lv_itLocus;

    // Automatic Variable Declarations
    unitgroup autoE87890E0_g;
    int autoE87890E0_u;

    // Variable Initialization
    lv_locustGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((UnitIsAlive(libStEx_gv_hERO_PlayerUnit) == true) && ((libNtve_gf_UnitInRegion(libStEx_gv_hERO_PlayerUnit, RegionFromId(8)) == true) || (libNtve_gf_UnitInRegion(libStEx_gv_hERO_PlayerUnit, RegionFromId(9)) == true)) && (UnitIsAlive(libStEx_gv_hERO_EnemyFalstad) == true)) {
            lv_locustGroup = UnitGroup("AbathurLocustNormal", libStEx_gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(libStEx_gv_hERO_EnemyFalstad), 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoE87890E0_g = lv_locustGroup;
            autoE87890E0_u = UnitGroupCount(autoE87890E0_g, c_unitCountAll);
            for (;; autoE87890E0_u -= 1) {
                lv_itLocus = UnitGroupUnitFromEnd(autoE87890E0_g, autoE87890E0_u);
                if (lv_itLocus == null) { break; }
                if ((libNtve_gf_UnitIsVisibleToPlayer(lv_itLocus, libStEx_gv_pLAYER_07_CHAOS2) == true)) {
                    break;
                }

            }
        }

        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2B_AttackAbathur_Init () {
    gt__2B_AttackAbathur = TriggerCreate("gt__2B_AttackAbathur_Func");
    TriggerEnable(gt__2B_AttackAbathur, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2B_Soak Lanes Q
//--------------------------------------------------------------------------------------------------
bool gt__2B_SoakLanesQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto05120148_ae = libCore_gv_bALMaxPlayers;
    const int auto05120148_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SetTalentTreeSelectionPanelAutoShow(true);
    TriggerExecute(gt_TwoLane_InitializeLanes, true, false);
    libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_spawnPoint = PointFromId(1578);
    libGame_gv_players[libStEx_gv_pLAYER_03_ORDER1].lv_spawnPoint = PointFromId(1122);
    libGame_gv_players[libStEx_gv_pLAYER_07_CHAOS2].lv_spawnPoint = PointFromId(1120);
    if ((UnitGetType(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit) != "HeroAbathur")) {
        libStEx_gv_hERO_PlayerUnit = libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit;
    }

    libStEx_gv_hERO_EnemyFalstad = libGame_gv_players[libStEx_gv_pLAYER_07_CHAOS2].lv_heroUnit;
    lv_itPlayer = 1;
    for ( ; ( (auto05120148_ai >= 0 && lv_itPlayer <= auto05120148_ae) || (auto05120148_ai < 0 && lv_itPlayer >= auto05120148_ae) ) ; lv_itPlayer += auto05120148_ai ) {
        if ((lv_itPlayer != libStEx_gv_pLAYER_01_USER) && (lv_itPlayer != libStEx_gv_pLAYER_03_ORDER1) && (lv_itPlayer != libStEx_gv_pLAYER_07_CHAOS2) && (libGame_gv_players[lv_itPlayer].lv_heroUnit != null)) {
            UnitRemove(libGame_gv_players[lv_itPlayer].lv_heroUnit);
            libGame_gv_players[lv_itPlayer].lv_heroUnit = null;
        }

    }
    TriggerExecute(gt__2B_SoakLanesChallengeBalance, true, false);
    TriggerExecute(gt_SoakLanesQ, true, true);
    TriggerExecute(gt__2B_SoakLanesChallengePreReady, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2B_SoakLanesQ_Init () {
    gt__2B_SoakLanesQ = TriggerCreate("gt__2B_SoakLanesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2B_Soak Lanes Ready Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt__2B_SoakLanesReadyButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_ChallengeTalentsAvailableQuery() == false)) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libStEx_gf_TutorialVeteranShowHideReadyButton(false);
    libStEx_gf_TutorialVeteranShowHideRespecButton(false);
    libStEx_gf_TutorialVeteranShowHideRetryButton(false);
    TransmissionClearAll();
    TriggerExecute(libStEx_gt_ObjectiveChallengeReadyComplete, true, false);
    Wait(1.5, c_timeGame);
    TriggerExecute(gt__2B_SoakLanesChallengeStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2B_SoakLanesReadyButtonClicked_Init () {
    gt__2B_SoakLanesReadyButtonClicked = TriggerCreate("gt__2B_SoakLanesReadyButtonClicked_Func");
    TriggerEnable(gt__2B_SoakLanesReadyButtonClicked, false);
    libStEx_gf_TutorialPlayerHitsReadyButton(gt__2B_SoakLanesReadyButtonClicked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2B_Soak Lanes Challenge Pre Ready
//--------------------------------------------------------------------------------------------------
bool gt__2B_SoakLanesChallengePreReady_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto1C18C827_val;

    // Actions
    if (!runActions) {
        return true;
    }

    gv__2B_PlayTimes += 1;
    TriggerQueueEnter();
    CameraLockInput(libStEx_gv_sE_Player, false);
    libNtve_gf_ShareVisionofUnit(libStEx_gv_hERO_EnemyFalstad, true, libStEx_gv_pLAYER_01_USER);
    UnitSelect(libStEx_gv_hERO_PlayerUnit, libStEx_gv_pLAYER_01_USER, true);
    auto1C18C827_val = gv__2B_PlayTimes;
    if (auto1C18C827_val == 1) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00634", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto1C18C827_val == 2) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00665", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto1C18C827_val == 3) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00693", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto1C18C827_val == 4) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00695", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        gf_ChallengeEncouragementLine(gv__2B_PlayTimes, false);
    }
    Wait(1.0, c_timeGame);
    TriggerEnable(libStEx_gt_ObjectiveChallengeReadyCreate, true);
    TriggerEnable(gt__2B_SoakLanesReadyButtonClicked, true);
    libStEx_gf_TutorialVeteranShowHideReadyButton(true);
    libStEx_gf_TutorialVeteranShowHideRespecButton(true);
    libStEx_gf_TutorialVeteranShowHideRetryButton(false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2B_SoakLanesChallengePreReady_Init () {
    gt__2B_SoakLanesChallengePreReady = TriggerCreate("gt__2B_SoakLanesChallengePreReady_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2B_Soak Lanes Challenge Start
//--------------------------------------------------------------------------------------------------
bool gt__2B_SoakLanesChallengeStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;

    // Automatic Variable Declarations
    const int auto7775520E_ae = libCore_gv_bALMaxPlayers;
    const int auto7775520E_ai = 1;
    unitgroup autoE7423FBF_g;
    int autoE7423FBF_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior2(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehavior") == true) || (UnitHasBehavior2(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehaviorPreControl") == true))) {
        UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehaviorPreControl", 1);
        UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehavior", 1);
    }

    gf_ChallengeStartWait(false, gt__2B_SoakLanesChallengeCallbackPrep, gt__2B_SoakLanesChallengeCallbackStart, UnitGetPosition(libStEx_gv_hERO_PlayerUnit), StringExternal("Param/Value/5BCF56B4"), (gv__2B_PlayTimes == 1));
    lv_itPlayer = 1;
    for ( ; ( (auto7775520E_ai >= 0 && lv_itPlayer <= auto7775520E_ae) || (auto7775520E_ai < 0 && lv_itPlayer >= auto7775520E_ae) ) ; lv_itPlayer += auto7775520E_ai ) {
        if ((lv_itPlayer != libStEx_gv_pLAYER_01_USER) && (lv_itPlayer != libStEx_gv_pLAYER_07_CHAOS2) && (libGame_gv_players[lv_itPlayer].lv_heroUnit != null)) {
            UnitRemove(libGame_gv_players[lv_itPlayer].lv_heroUnit);
            libGame_gv_players[lv_itPlayer].lv_heroUnit = null;
        }

    }
    CameraLockInput(libStEx_gv_sE_Player, false);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, false);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, false);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_PlayerUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyFalstad, false);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_EnemyFalstad, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_EnemyFalstad, false);
    libStEx_gf_TutorialVeteranShowHideRetryButton(true);
    TriggerEnable(gt__2B_SoakLanesChallengeSuccess, true);
    TriggerEnable(gt__2B_SoakLanesChallengeFail, true);
    UnitBehaviorRemovePlayer(libStEx_gv_hERO_PlayerUnit, "HeroGenericPregameAbilitySuppression", libStEx_gv_pLAYER_01_USER, 1);
    UnitBehaviorRemovePlayer(libStEx_gv_hERO_PlayerUnit, "HeroGenericPregameAbilityMinionSuppression", libStEx_gv_pLAYER_01_USER, 1);
    libCore_gv_sYSMinionAI = true;
    libGame_gf_MinionStartStopMinionSystem(true);
    libGame_gf_MinionStartStopMinionSpawnCycle(true);
    TimerStart(gv__2B_ChallengeTimer, c_timerDurationInfinite, false, c_timeGame);
    TriggerEnable(gt__2B_AttackAbathur, true);
    TriggerExecute(gt__2B_AttackAbathur, true, false);
    autoE7423FBF_g = UnitGroup("StormGameStartPathingBlocker", libCore_gv_cOMPUTER_Neutral, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoE7423FBF_u = UnitGroupCount(autoE7423FBF_g, c_unitCountAll);
    for (;; autoE7423FBF_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoE7423FBF_g, autoE7423FBF_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_itUnit, false);
    }
    TriggerEnable(gt__2B_SoakLanesLevelMonitor, true);
    gf__2B_EnableAIToDefendTheLane(libStEx_gv_pLAYER_07_CHAOS2);
    libCore_gv_sYSXPOn = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2B_SoakLanesChallengeStart_Init () {
    gt__2B_SoakLanesChallengeStart = TriggerCreate("gt__2B_SoakLanesChallengeStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2B_Soak Lanes Challenge Success
//--------------------------------------------------------------------------------------------------
bool gt__2B_SoakLanesChallengeSuccess_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_StopTimer(gv__2B_ChallengeTimer);
    TriggerEnable(gt__2B_SoakLanesChallengeFail, false);
    TriggerEnable(gt__2B_SoakLanesLevelMonitor, false);
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_07_CHAOS2);
    UnitIssueOrder(libStEx_gv_hERO_EnemyFalstad, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyFalstad, true);
    libCore_gv_sYSXPOn = false;
    Wait(2.0, c_timeGame);
    TriggerStop(gt__2B_AttackAbathur);
    TriggerStop(gt__2B_FalstadChangeLane);
    gf_ChallengeSuccessWait();
    libGame_gf_MinionStartStopMinionSystem(false);
    TriggerExecute(gt__2C_DragonKnightQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2B_SoakLanesChallengeSuccess_Init () {
    gt__2B_SoakLanesChallengeSuccess = TriggerCreate("gt__2B_SoakLanesChallengeSuccess_Func");
    TriggerEnable(gt__2B_SoakLanesChallengeSuccess, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2B_Soak Lanes Challenge Fail
//--------------------------------------------------------------------------------------------------
bool gt__2B_SoakLanesChallengeFail_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto08B61D45_g;
    int auto08B61D45_u;
    unitgroup auto8536D78B_g;
    int auto8536D78B_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libGame_gf_HeroKilledPlayer() == libStEx_gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_StopTimer(gv__2B_ChallengeTimer);
    TriggerEnable(gt__2B_SoakLanesChallengeSuccess, false);
    TriggerEnable(gt__2B_SoakLanesLevelMonitor, false);
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_07_CHAOS2);
    UnitIssueOrder(libStEx_gv_hERO_EnemyFalstad, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyFalstad, true);
    libCore_gv_sYSXPOn = false;
    TriggerStop(gt__2B_AttackAbathur);
    TriggerStop(gt__2B_FalstadChangeLane);
    gf_ChallengeFailedWait(gt__2B_SoakLanesChallengeCallbackReset);
    libGame_gf_MinionStartStopMinionSystem(false);
    auto08B61D45_g = UnitGroup("AbathurToxicNest", c_playerAny, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto08B61D45_u = UnitGroupCount(auto08B61D45_g, c_unitCountAll);
    for (;; auto08B61D45_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto08B61D45_g, auto08B61D45_u);
        if (lv_itUnit == null) { break; }
        UnitRemove(lv_itUnit);
    }
    auto8536D78B_g = UnitGroup("AbathurLocustNormal", c_playerAny, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8536D78B_u = UnitGroupCount(auto8536D78B_g, c_unitCountAll);
    for (;; auto8536D78B_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto8536D78B_g, auto8536D78B_u);
        if (lv_itUnit == null) { break; }
        UnitRemove(lv_itUnit);
    }
    Wait(0.5, c_timeGame);
    TriggerExecute(gt__2B_SoakLanesChallengePreReady, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2B_SoakLanesChallengeFail_Init () {
    gt__2B_SoakLanesChallengeFail = TriggerCreate("gt__2B_SoakLanesChallengeFail_Func");
    TriggerEnable(gt__2B_SoakLanesChallengeFail, false);
    libGame_gf_HeroKilled(gt__2B_SoakLanesChallengeFail);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2B_Soak Lanes Challenge Balance
//--------------------------------------------------------------------------------------------------
bool gt__2B_SoakLanesChallengeBalance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv__2B_PlayTimes >= libStEx_gv_playCount_LowerDifficulty_C)) {
        libGame_gf_GrantXPToPlayer(((libCore_gf_GetTotalXPForLevel(12) - UnitGetPropertyFixed(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit, c_unitPropXP, c_unitPropCurrent))), libStEx_gv_pLAYER_01_USER, libGame_ge_XPSources_Debug);
        libGame_gf_GrantXPToPlayer(((libCore_gf_GetTotalXPForLevel(13) - libCore_gf_GetTotalXPForLevel(12)) * gv__2B_EnemyXPAdvantage), libStEx_gv_pLAYER_07_CHAOS2, libGame_ge_XPSources_Debug);
    }
    else {
        libGame_gf_GrantXPToPlayer(((libCore_gf_GetTotalXPForLevel(12) - UnitGetPropertyFixed(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit, c_unitPropXP, c_unitPropCurrent))), libStEx_gv_pLAYER_01_USER, libGame_ge_XPSources_Debug);
        libGame_gf_GrantXPToPlayer(((libCore_gf_GetTotalXPForLevel(13) - libCore_gf_GetTotalXPForLevel(12)) * gv__2B_EnemyXPAdvantage), libStEx_gv_pLAYER_07_CHAOS2, libGame_ge_XPSources_Debug);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2B_SoakLanesChallengeBalance_Init () {
    gt__2B_SoakLanesChallengeBalance = TriggerCreate("gt__2B_SoakLanesChallengeBalance_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2B_Soak Lanes Challenge Callback Prep
//--------------------------------------------------------------------------------------------------
bool gt__2B_SoakLanesChallengeCallbackPrep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
    UnitBehaviorAddPlayer(libStEx_gv_hERO_PlayerUnit, "HeroGenericPregameAbilitySuppression", libStEx_gv_pLAYER_01_USER, 1);
    UnitBehaviorAddPlayer(libStEx_gv_hERO_PlayerUnit, "HeroGenericPregameAbilityMinionSuppression", libStEx_gv_pLAYER_01_USER, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2B_SoakLanesChallengeCallbackPrep_Init () {
    gt__2B_SoakLanesChallengeCallbackPrep = TriggerCreate("gt__2B_SoakLanesChallengeCallbackPrep_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2B_Soak Lanes Challenge Callback Start
//--------------------------------------------------------------------------------------------------
bool gt__2B_SoakLanesChallengeCallbackStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShareVisionofUnit(libStEx_gv_hERO_EnemyFalstad, false, libStEx_gv_pLAYER_01_USER);
    if ((gv__2B_PlayTimes == 1)) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00680", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2B_SoakLanesChallengeCallbackStart_Init () {
    gt__2B_SoakLanesChallengeCallbackStart = TriggerCreate("gt__2B_SoakLanesChallengeCallbackStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2B_Soak Lanes Challenge Callback Reset
//--------------------------------------------------------------------------------------------------
bool gt__2B_SoakLanesChallengeCallbackReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto9E6B17AC_g;
    int auto9E6B17AC_u;
    unitgroup autoABD532D8_g;
    int autoABD532D8_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior2(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehavior") == true) || (UnitHasBehavior2(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehaviorPreControl") == true))) {
        UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehaviorPreControl", 1);
        UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehavior", 1);
    }

    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_01_USER);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_07_CHAOS2);
    auto9E6B17AC_g = gv_town_Structure_Group;
    auto9E6B17AC_u = UnitGroupCount(auto9E6B17AC_g, c_unitCountAll);
    for (;; auto9E6B17AC_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto9E6B17AC_g, auto9E6B17AC_u);
        if (lv_itUnit == null) { break; }
        UnitRemove(lv_itUnit);
    }
    libStEx_gv_hERO_EnemyFalstad = libGame_gv_players[libStEx_gv_pLAYER_07_CHAOS2].lv_heroUnit;
    TriggerExecute(gt__2B_SoakLanesChallengeBalance, true, false);
    Wait(0.25, c_timeGame);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_PlayerUnit, PointFromId(1578), false);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
    UnitBehaviorAdd(libStEx_gv_hERO_PlayerUnit, "HeroGenericPregameAbilityMinionSuppression", libStEx_gv_hERO_PlayerUnit, 1);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_EnemyFalstad, PointFromId(1129), false);
    UnitSetFacing(libStEx_gv_hERO_EnemyFalstad, PointGetFacing(PointFromId(1129)), 0.0);
    UnitSelect(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit, libStEx_gv_pLAYER_01_USER, true);
    UnitBehaviorRemovePlayer(libStEx_gv_hERO_EnemyFalstad, "HeroGenericPregameAbilitySuppression", libStEx_gv_pLAYER_01_USER, 1);
    UnitBehaviorRemovePlayer(libStEx_gv_hERO_EnemyFalstad, "HeroGenericPregameAbilityMinionSuppression", libStEx_gv_pLAYER_01_USER, 1);
    gf_RemoveAllRegenGlobes();
    autoABD532D8_g = UnitGroup("StormGameStartPathingBlocker", libCore_gv_cOMPUTER_Neutral, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoABD532D8_u = UnitGroupCount(autoABD532D8_g, c_unitCountAll);
    for (;; autoABD532D8_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoABD532D8_g, autoABD532D8_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_itUnit, true);
    }
    gf_Reset2LaneTownWait();
    Wait(0.25, c_timeGame);
    TriggerExecute(gt__2B_SoakLanesChallengeCallbackPrep, true, false);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    CameraPan(libStEx_gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(1124)), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2B_SoakLanesChallengeCallbackReset_Init () {
    gt__2B_SoakLanesChallengeCallbackReset = TriggerCreate("gt__2B_SoakLanesChallengeCallbackReset_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2C_AI On
//--------------------------------------------------------------------------------------------------
bool gt__2C_AIOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00621", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.5, c_timeGame);
    gf__2C_EnableAIToFightOverDragonKnight(libStEx_gv_pLAYER_04_ORDER2);
    gf__2C_EnableAIToFightOverDragonKnight(libStEx_gv_pLAYER_06_CHAOS1);
    gf__2C_EnableAIToFightOverDragonKnight(libStEx_gv_pLAYER_05_ORDER3);
    gf__2C_EnableAIToFightOverDragonKnight(libStEx_gv_pLAYER_07_CHAOS2);
    gf__2C_EnableAIToFightOverDragonKnight(libStEx_gv_pLAYER_03_ORDER1);
    gf__2C_EnableAIToFightOverDragonKnight(libStEx_gv_pLAYER_08_CHAOS3);
    Wait(gv__2C_Reinforcement_Delay, c_timeGame);
    gf__2C_EnableAIToFightOverDragonKnight(libStEx_gv_pLAYER_09_CHAOS4);
    gf__2C_EnableAIToFightOverDragonKnight(libStEx_gv_pLAYER_10_CHAOS5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2C_AIOn_Init () {
    gt__2C_AIOn = TriggerCreate("gt__2C_AIOn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2C_Hero Died
//--------------------------------------------------------------------------------------------------
bool gt__2C_HeroDied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gf_HeroKilledPlayer() == libStEx_gv_pLAYER_01_USER)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt__2C_DragonKnightChallengeFail, true, false);
        return true;
    }

    if ((UnitIsAlive(libStEx_gv_hERO_FriendlyThrall) == false) && (UnitIsAlive(libStEx_gv_hERO_FriendlyMuradin) == false) && (UnitIsAlive(libStEx_gv_hERO_FriendlyValla) == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt__2C_DragonKnightChallengeFail, true, false);
        return true;
    }

    if ((UnitIsAlive(libStEx_gv_hERO_EnemyArthas) == false) && (UnitIsAlive(libStEx_gv_hERO_EnemySylvanas) == false) && (UnitIsAlive(libStEx_gv_hERO_EnemySonya) == false) && (UnitIsAlive(libStEx_gv_hERO_EnemyNazeebo) == false) && (UnitIsAlive(libStEx_gv_hERO_EnemyKerrigan) == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt__2C_DragonKnightChallengeSuccess, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2C_HeroDied_Init () {
    gt__2C_HeroDied = TriggerCreate("gt__2C_HeroDied_Func");
    TriggerEnable(gt__2C_HeroDied, false);
    libGame_gf_HeroKilled(gt__2C_HeroDied);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2C_Abathur_Used_Symbiote
//--------------------------------------------------------------------------------------------------
bool gt__2C_Abathur_Used_Symbiote_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv__2C_Symbiote_Unit = libGDHL_gf_AbathurSymbioteUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2C_Abathur_Used_Symbiote_Init () {
    gt__2C_Abathur_Used_Symbiote = TriggerCreate("gt__2C_Abathur_Used_Symbiote_Func");
    libGDHL_gf_AbathurSymbiote(gt__2C_Abathur_Used_Symbiote);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2C_Dragon Knight Q
//--------------------------------------------------------------------------------------------------
bool gt__2C_DragonKnightQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2C_DragonKnightQ_Init () {
    gt__2C_DragonKnightQ = TriggerCreate("gt__2C_DragonKnightQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2C_Dragon Knight Ready Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt__2C_DragonKnightReadyButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_ChallengeTalentsAvailableQuery() == false)) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libStEx_gf_TutorialVeteranShowHideReadyButton(false);
    libStEx_gf_TutorialVeteranShowHideRespecButton(false);
    libStEx_gf_TutorialVeteranShowHideRetryButton(false);
    TransmissionClearAll();
    TriggerExecute(libStEx_gt_ObjectiveChallengeReadyComplete, true, false);
    Wait(1.5, c_timeGame);
    TriggerExecute(gt__2C_DragonKnightChallengeStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2C_DragonKnightReadyButtonClicked_Init () {
    gt__2C_DragonKnightReadyButtonClicked = TriggerCreate("gt__2C_DragonKnightReadyButtonClicked_Func");
    TriggerEnable(gt__2C_DragonKnightReadyButtonClicked, false);
    libStEx_gf_TutorialPlayerHitsReadyButton(gt__2C_DragonKnightReadyButtonClicked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2C_Dragon Knight Challenge Pre Ready
//--------------------------------------------------------------------------------------------------
bool gt__2C_DragonKnightChallengePreReady_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2C_DragonKnightChallengePreReady_Init () {
    gt__2C_DragonKnightChallengePreReady = TriggerCreate("gt__2C_DragonKnightChallengePreReady_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2C_Dragon Knight Challenge Start
//--------------------------------------------------------------------------------------------------
bool gt__2C_DragonKnightChallengeStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior2(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehavior") == true) || (UnitHasBehavior2(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehaviorPreControl") == true))) {
        UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehaviorPreControl", 1);
        UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehavior", 1);
    }

    gf_ChallengeStartWait(false, gt__2C_DragonKnightChallengeCallbackPrep, gt__2C_DragonKnightChallengeCallbackStart, CameraInfoGetTarget(CameraInfoFromId(838)), TextCase(StringExternal("Param/Value/A7D5CCCB"), true), (gv__2C_PlayTimes == 1));
    UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "HeroGenericPregameAbilitySuppression", 1);
    CameraLockInput(libStEx_gv_pLAYER_01_USER, false);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, false);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, false);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_PlayerUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    UnitBehaviorRemovePlayer(libStEx_gv_hERO_PlayerUnit, "HeroGenericPregameAbilitySuppression", libStEx_gv_pLAYER_01_USER, 1);
    gf__2C_UltimateUnlocks();
    libStEx_gf_TutorialVeteranShowHideRetryButton(true);
    TriggerEnable(gt__2C_DragonKnightChallengeSuccess, true);
    TriggerEnable(gt__2C_DragonKnightChallengeFail, true);
    TriggerEnable(gt__2C_HeroDied, true);
    TriggerExecute(gt__2C_AIOn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2C_DragonKnightChallengeStart_Init () {
    gt__2C_DragonKnightChallengeStart = TriggerCreate("gt__2C_DragonKnightChallengeStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2C_Dragon Knight Challenge Success
//--------------------------------------------------------------------------------------------------
bool gt__2C_DragonKnightChallengeSuccess_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup autoD325EFE7_g;
    int autoD325EFE7_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__2C_DragonKnightChallengeFail, false);
    TriggerEnable(gt__2C_HeroDied, false);
    gf__2C_AIOffStandStill();
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyValla, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyMuradin, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyThrall, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyArthas, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemySonya, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyNazeebo, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemySylvanas, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyKerrigan, true);
    UnitIssueOrder(gv__2C_Symbiote_Unit, Order(AbilityCommand("AbathurAssumingDirectControlCancel", 0)), c_orderQueueReplace);
    UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "HeroGenericPregameAbilityMinionSuppression", 1);
    Wait(0.125, c_timeGame);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, OrderTargetingPoint(AbilityCommand("AbathurDeepTunnel", 0), PointFromId(1348)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(1107)), c_orderQueueAddToEnd);
    autoD325EFE7_g = UnitGroupAlliance(libStEx_gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD325EFE7_u = UnitGroupCount(autoD325EFE7_g, c_unitCountAll);
    for (;; autoD325EFE7_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoD325EFE7_g, autoD325EFE7_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_PauseUnit(lv_itUnit, true);
        UnitBehaviorRemove(lv_itUnit, "Mounted", 1);
        ActorSend(libNtve_gf_MainActorofUnit(lv_itUnit), "AnimPlay Victory Stand,Victory PlayForever");
        libNtve_gf_SendActorMessageToUnit(lv_itUnit, "Signal GameWon");
    }
    gf_ChallengeSuccessWait();
    libGame_gf_GameOver(libGame_gv_teamOrderIndex_C);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2C_DragonKnightChallengeSuccess_Init () {
    gt__2C_DragonKnightChallengeSuccess = TriggerCreate("gt__2C_DragonKnightChallengeSuccess_Func");
    TriggerEnable(gt__2C_DragonKnightChallengeSuccess, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2C_Dragon Knight Challenge Fail
//--------------------------------------------------------------------------------------------------
bool gt__2C_DragonKnightChallengeFail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__2C_DragonKnightChallengeSuccess, false);
    TriggerEnable(gt__2C_HeroDied, false);
    gf__2C_AIOffStandStill();
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyValla, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyMuradin, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyThrall, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyArthas, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemySonya, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyNazeebo, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemySylvanas, true);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyKerrigan, true);
    gf_ChallengeFailedWait(gt__2C_DragonKnightChallengeCallbackReset);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt__2C_DragonKnightChallengePreReady, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2C_DragonKnightChallengeFail_Init () {
    gt__2C_DragonKnightChallengeFail = TriggerCreate("gt__2C_DragonKnightChallengeFail_Func");
    TriggerEnable(gt__2C_DragonKnightChallengeFail, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2C_Dragon Knight Challenge Balance
//--------------------------------------------------------------------------------------------------
bool gt__2C_DragonKnightChallengeBalance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv__2C_PlayTimes >= libStEx_gv_playCount_LowerDifficulty_C)) {
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyValla, c_unitPropLifeMax, 3500.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyValla, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyMuradin, c_unitPropLifeMax, 4000.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyMuradin, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyThrall, c_unitPropLifeMax, 3800.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyThrall, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyArthas, c_unitPropLifeMax, 3700.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyArthas, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemySonya, c_unitPropLifeMax, 3100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemySonya, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyNazeebo, c_unitPropLifeMax, 2700.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyNazeebo, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemySylvanas, c_unitPropLifeMax, 2500.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemySylvanas, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyKerrigan, c_unitPropLifeMax, 2700.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyKerrigan, c_unitPropLifePercent, 100.0);
        gv__2C_Reinforcement_Delay = 6.0;
    }
    else {
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyValla, c_unitPropLifeMax, 3300.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyValla, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyMuradin, c_unitPropLifeMax, 3700.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyMuradin, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyThrall, c_unitPropLifeMax, 3600.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyThrall, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyArthas, c_unitPropLifeMax, 4100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyArthas, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemySonya, c_unitPropLifeMax, 3400.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemySonya, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyNazeebo, c_unitPropLifeMax, 3000.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyNazeebo, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemySylvanas, c_unitPropLifeMax, 2600.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemySylvanas, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyKerrigan, c_unitPropLifeMax, 2800.0);
        UnitSetPropertyFixed(libStEx_gv_hERO_EnemyKerrigan, c_unitPropLifePercent, 100.0);
        gv__2C_Reinforcement_Delay = 5.0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2C_DragonKnightChallengeBalance_Init () {
    gt__2C_DragonKnightChallengeBalance = TriggerCreate("gt__2C_DragonKnightChallengeBalance_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2C_Dragon Knight Challenge Callback Prep
//--------------------------------------------------------------------------------------------------
bool gt__2C_DragonKnightChallengeCallbackPrep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2C_DragonKnightChallengeCallbackPrep_Init () {
    gt__2C_DragonKnightChallengeCallbackPrep = TriggerCreate("gt__2C_DragonKnightChallengeCallbackPrep_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2C_Dragon Knight Challenge Callback Start
//--------------------------------------------------------------------------------------------------
bool gt__2C_DragonKnightChallengeCallbackStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv__2C_PlayTimes == 1)) {
        libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00701", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
        TransmissionWait(TransmissionLastSent(), 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2C_DragonKnightChallengeCallbackStart_Init () {
    gt__2C_DragonKnightChallengeCallbackStart = TriggerCreate("gt__2C_DragonKnightChallengeCallbackStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2C_Dragon Knight Challenge Callback Reset
//--------------------------------------------------------------------------------------------------
bool gt__2C_DragonKnightChallengeCallbackReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoFF7A5213_g;
    int autoFF7A5213_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior2(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehavior") == true) || (UnitHasBehavior2(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehaviorPreControl") == true))) {
        UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehaviorPreControl", 1);
        UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "AssumingDirectControlBehavior", 1);
    }

    if ((gv__2C_Hidden_Hero != null)) {
        libNtve_gf_ShowHideUnit(gv__2C_Hidden_Hero, true);
        libNtve_gf_MakeUnitUncommandable(gv__2C_Hidden_Hero, false);
        gv__2C_Hidden_Hero = null;
        gf__2C_ResetDragonKnight();
    }

    autoFF7A5213_g = gv__2C_Structures;
    autoFF7A5213_u = UnitGroupCount(autoFF7A5213_g, c_unitCountAll);
    for (;; autoFF7A5213_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoFF7A5213_g, autoFF7A5213_u);
        if (lv_itUnit == null) { break; }
        UnitSetPropertyFixed(lv_itUnit, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(lv_itUnit, c_unitPropEnergyPercent, 100.0);
    }
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_01_USER);
    UnitBehaviorAddPlayer(libStEx_gv_hERO_PlayerUnit, "HeroGenericPregameAbilitySuppression", libStEx_gv_pLAYER_01_USER, 1);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_03_ORDER1);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_04_ORDER2);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_05_ORDER3);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_06_CHAOS1);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_07_CHAOS2);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_08_CHAOS3);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_09_CHAOS4);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_10_CHAOS5);
    TriggerExecute(gt__2C_DragonKnightChallengeBalance, true, false);
    Wait(0.25, c_timeGame);
    TriggerExecute(gt__2C_DragonKnightChallengeCallbackPrep, true, false);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    CameraPan(libStEx_gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(838)), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2C_DragonKnightChallengeCallbackReset_Init () {
    gt__2C_DragonKnightChallengeCallbackReset = TriggerCreate("gt__2C_DragonKnightChallengeCallbackReset_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MX_TutorialVet_Intro1", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    if ((libStEx_gf_IsthisanAutomatedPlaythrough() == false)) {
        ShowTalentPanel(libCore_gv_playerGroupFromPlayer[libStEx_gv_pLAYER_01_USER], false, 0);
    }

    libStEx_gf_CinematicModeTutorial(true, PlayerGroupAll(), 0.0);
    libStEx_gf_GlobalCinematicSettingTutorial(true);
    VisEnable(c_visTypeFog, true);
    gf_TurnCinematicCameraOnOffChallenge(libStEx_gv_pLAYER_01_USER, true);
    GameTimeOfDayPause(true);
    libNtve_gf_ShowHideUnit(libStEx_gv_hERO_PlayerUnit, false);
    libGame_gf_TurnOnOffLevelUpFXForPlayer(false, 1);
    libGame_gf_TurnOnOffLevelUpFXForPlayer(false, 2);
    Wait(0.0625, c_timeGame);
    libStEx_gf_LevelUpPlayer(libStEx_gv_pLAYER_01_USER, 7);
    UnitSetPosition(libStEx_gv_hERO_PlayerUnit, PointFromId(7), false);
    UnitSetState(libStEx_gv_hERO_PlayerUnit, c_unitStateFidget, false);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
    libStEx_gf_LevelUpPlayer(libStEx_gv_pLAYER_02_UTHER, 7);
    libNtve_gf_ShowHideUnit(libStEx_gv_hERO_FriendlyUther, true);
    UnitSelect(libStEx_gv_hERO_PlayerUnit, libStEx_gv_pLAYER_01_USER, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_cinematicCompleted = false;
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(468), 0.0, -1, 10.0, true);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1646), 4.0, -1, 10.0, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SetTalentTreeSelectionPanelDismissAllowed(false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    if ((GameIsTestMap(true) == true)) {
        return true;
    }

    Wait(0.5, c_timeGame);
    UnitSetPosition(libStEx_gv_hERO_PlayerUnit, PointFromId(7), false);
    libNtve_gf_CreateModelAtPoint("HeroRespawn", PointFromId(7));
    SoundPlayAtPointForPlayer(SoundLink("Gen_Hero_Respawn", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(7), 0.0, 100.0, 0.0);
    libNtve_gf_MakeUnitLookAtPoint(libStEx_gv_hERO_FriendlyUther, "MedHeadOnly", PointFromId(1580));
    Wait(1.0, c_timeGame);
    libNtve_gf_ShowHideUnit(libStEx_gv_hERO_PlayerUnit, true);
    Wait(0.25, c_timeGame);
    libNtve_gf_MakeUnitLookAtPoint(libStEx_gv_hERO_FriendlyUther, "MedHeadOnly", PointFromId(1904));
    Wait(0.75, c_timeGame);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(34)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1210), 1.5, -1, 10.0, true);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyUther, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(674)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00608", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(0.5, c_timeGame);
    libNtve_gf_MakeUnitFacePoint(libStEx_gv_hERO_PlayerUnit, PointWithOffset(UnitGetPosition(libStEx_gv_hERO_FriendlyUther), 0.0, -3.0), 0.5);
    Wait(2.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00656", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_MakeUnitLookAtPoint(libStEx_gv_hERO_FriendlyUther, "SlowStanding", PointFromId(1105));
    Wait(0.5, c_timeGame);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(770), 2.0, -1, 10.0, true);
    Wait(0.5, c_timeGame);
    gf__1A_ActivateBoss(gv__1A_GardenTerror, true);
    TransmissionWait(TransmissionLastSent(), 5.0);
    libNtve_gf_SimpleLookAtStop(libStEx_gv_hERO_FriendlyUther, "FastStanding");
    TransmissionWait(TransmissionLastSent(), 0.0);
    if ((gv_intro_GardenTerrorReticle != null)) {
        libNtve_gf_KillModel(gv_intro_GardenTerrorReticle);
        gv_intro_GardenTerrorReticle = null;
    }

    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1570), (SoundLengthSync(SoundLink(ConversationDataGetSound("TutorialVO|Line00718", false), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("TutorialVO|Line00734", false), c_soundIndexAny))), -1, 10.0, true);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00718", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00734", c_transmissionDurationAdd, 0.0, true, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == false)) {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    else {
        lv_fadeDuration = 0.0;
    }
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup autoC535AB02_g;
    int autoC535AB02_u;
    unit autoC535AB02_var;
    unitgroup autoC5C9DB9A_g;
    int autoC5C9DB9A_u;
    unit autoC5C9DB9A_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_intro_CleanupStarted = true;
    SetTalentTreeSelectionPanelDismissAllowed(true);
    UnitPauseAll(false);
    autoC535AB02_g = gv_cinematicTempUnits;
    autoC535AB02_u = UnitGroupCount(autoC535AB02_g, c_unitCountAll);
    for (;; autoC535AB02_u -= 1) {
        autoC535AB02_var = UnitGroupUnitFromEnd(autoC535AB02_g, autoC535AB02_u);
        if (autoC535AB02_var == null) { break; }
        UnitRemove(autoC535AB02_var);
    }
    autoC5C9DB9A_g = gv_cinematicHiddenUnits;
    autoC5C9DB9A_u = UnitGroupCount(autoC5C9DB9A_g, c_unitCountAll);
    for (;; autoC5C9DB9A_u -= 1) {
        autoC5C9DB9A_var = UnitGroupUnitFromEnd(autoC5C9DB9A_g, autoC5C9DB9A_u);
        if (autoC5C9DB9A_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoC5C9DB9A_var, true);
    }
    if ((libNtve_gf_UnitIsHidden(libStEx_gv_hERO_PlayerUnit) == true)) {
        libNtve_gf_ShowHideUnit(libStEx_gv_hERO_PlayerUnit, true);
    }

    if ((libNtve_gf_UnitIsHidden(libStEx_gv_hERO_FriendlyUther) == true)) {
        libNtve_gf_ShowHideUnit(libStEx_gv_hERO_FriendlyUther, true);
    }

    GameTimeOfDayPause(false);
    PlayerSetState(libStEx_gv_pLAYER_01_USER, c_playerStateXPGain, true);
    ActorSend(gv_intro_TPEffect, "Destroy Immediate");
    TriggerEnable(gt__1A_TalentsPanelOpened, true);
    libNtve_gf_SimpleLookAtStop(libStEx_gv_hERO_FriendlyUther, "FastStanding");
    gf_SetPlayableWithLooseCameraBounds(RegionFromId(4));
    VisRevealArea(libStEx_gv_pLAYER_01_USER, RegionCircle(PointFromId(7), 10.0), 5.0, false);
    VisFillArea(libStEx_gv_pLAYER_01_USER, RegionEntireMap(), c_fillTypeFogged, false);
    libNtve_gf_ShareVisionofUnit(libStEx_gv_hERO_FriendlyUther, true, libStEx_gv_pLAYER_01_USER);
    UnitSetState(libStEx_gv_hERO_PlayerUnit, c_unitStateFidget, true);
    if ((gv_cinematicCompleted == false)) {
        gv__1A_CinematicSkipped = true;
        CameraPan(libStEx_gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(419)), 0.0, -1, 10.0, false);
        CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
        gf_TurnCinematicCameraOnOffChallenge(libStEx_gv_pLAYER_01_USER, false);
        UnitSetPosition(libStEx_gv_hERO_FriendlyUther, PointFromId(674), false);
        UnitSetPosition(libStEx_gv_hERO_PlayerUnit, PointFromId(34), false);
        UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetFacing(libStEx_gv_hERO_FriendlyUther, PointGetFacing(PointFromId(674)), 0.0);
        UnitSetFacing(libStEx_gv_hERO_PlayerUnit, PointGetFacing(PointFromId(34)), 0.0);
        gf__1A_ActivateBoss(gv__1A_GardenTerror, false);
        if ((gv_intro_GardenTerrorReticle != null)) {
            ActorSend(gv_intro_GardenTerrorReticle, "Destroy Immediate");
            gv_intro_GardenTerrorReticle = null;
        }

        Wait(0.5, c_timeReal);
        lv_fadeDuration = 1.5;
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
        libStEx_gf_CinematicModeTutorial(false, PlayerGroupAll(), lv_fadeDuration);
        libStEx_gf_TutorialVeteranShowHideDummyPanel(false);
        libStEx_gf_TutorialVeteranShowHideReadyButton(false);
        libStEx_gf_TutorialVeteranShowHideRespecButton(false);
        libStEx_gf_TutorialVeteranShowHideRetryButton(false);
        UnitSelect(libStEx_gv_hERO_PlayerUnit, libStEx_gv_pLAYER_01_USER, true);
        libStEx_gf_GlobalCinematicSettingTutorial(false);
        libNtve_gf_SwooshCamera(libStEx_gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(419)), lv_fadeDuration);
        Wait(lv_fadeDuration, c_timeGame);
    }
    else {
        gv__1A_CinematicSkipped = false;
        lv_fadeDuration = 1.0;
        gf_TurnCinematicCameraOnOffChallenge(libStEx_gv_pLAYER_01_USER, false);
        libStEx_gf_CinematicModeTutorial(false, PlayerGroupAll(), lv_fadeDuration);
        libStEx_gf_GlobalCinematicSettingTutorial(false);
        CameraPan(libStEx_gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(419)), 0.0, -1, 10.0, false);
        CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 10.0, false);
        UnitSelect(libStEx_gv_hERO_PlayerUnit, libStEx_gv_pLAYER_01_USER, true);
        libStEx_gf_TutorialVeteranShowHideDummyPanel(false);
        libStEx_gf_TutorialVeteranShowHideReadyButton(false);
        libStEx_gf_TutorialVeteranShowHideRespecButton(false);
        libStEx_gf_TutorialVeteranShowHideRetryButton(false);
    }
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MX_TutorialVet_PreCountdown1", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mosh Pit Q
//--------------------------------------------------------------------------------------------------
bool gt_MoshPitQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MX_TutorialVet_Intro2", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerExecute(gt_MoshPitSetup, true, true);
    TriggerExecute(gt_MoshPitCinematic, true, true);
    TriggerExecute(gt_MoshPitCinematicEnd, true, true);
    TriggerExecute(gt_MoshPitCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoshPitQ_Init () {
    gt_MoshPitQ = TriggerCreate("gt_MoshPitQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mosh Pit Setup
//--------------------------------------------------------------------------------------------------
bool gt_MoshPitSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libStEx_gf_ClearHintMessage();
    if ((libNtve_gf_PlayerInCinematicMode(libStEx_gv_pLAYER_01_USER) == false)) {
        libStEx_gf_CinematicModeTutorial(true, PlayerGroupAll(), 0.0);
        libStEx_gf_GlobalCinematicSettingTutorial(true);
        VisEnable(c_visTypeFog, true);
    }

    gf_TurnCinematicCameraOnOffChallenge(libStEx_gv_pLAYER_01_USER, true);
    gf_SetPlayableWithLooseCameraBounds(RegionFromId(63));
    GameTimeOfDayPause(true);
    libStEx_gf_LevelUpPlayer(libStEx_gv_pLAYER_01_USER, 10);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_01_USER);
    UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "Mounted", 1);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
    UnitSetState(libStEx_gv_hERO_PlayerUnit, c_unitStateFidget, false);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyUther, false);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_02_UTHER);
    UnitSetState(libStEx_gv_hERO_FriendlyUther, c_unitStateFidget, false);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyTyrael, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1245)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyMuradin, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1245)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_EnemySonya, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1246)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_EnemyNazeebo, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1246)), c_orderQueueReplace);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyTyrael, true);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyMuradin, true);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_EnemySonya, true);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_EnemyNazeebo, true);
    libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_suppressLevelUpFXAndSounds = true;
    libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_suppressLevelUpFXAndTeamXPTracking = true;
    libStEx_gf_LevelUpPlayer(libStEx_gv_pLAYER_03_ORDER1, 7);
    libStEx_gf_LevelUpPlayer(libStEx_gv_pLAYER_04_ORDER2, 7);
    libStEx_gf_LevelUpPlayer(libStEx_gv_pLAYER_06_CHAOS1, 7);
    libStEx_gf_LevelUpPlayer(libStEx_gv_pLAYER_07_CHAOS2, 7);
    libStEx_gf_LevelUpPlayer(libStEx_gv_pLAYER_08_CHAOS3, 7);
    UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyTyrael, c_unitPropLifeMax, 1600.0);
    UnitSetPropertyFixed(libStEx_gv_hERO_FriendlyTyrael, c_unitPropLifePercent, 100.0);
    Wait(0.125, c_timeGame);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_PlayerUnit, PointFromId(1293), false);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_FriendlyUther, PointFromId(1292), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoshPitSetup_Init () {
    gt_MoshPitSetup = TriggerCreate("gt_MoshPitSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mosh Pit Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MoshPitCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1247), 0.0, -1, 10.0, true);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(352), (SoundLengthSync(SoundLink(ConversationDataGetSound("TutorialVO|Line00619", false), c_soundIndexAny))+SoundLengthSync(SoundLink(ConversationDataGetSound("TutorialVO|Line00620", false), c_soundIndexAny))+1-2), -1, 10.0, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SetTalentTreeSelectionPanelDismissAllowed(false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00619", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 2.0);
    libNtve_gf_CreateModelAtPoint("Storm_Effect_HeroLevelUp", UnitGetPosition(libStEx_gv_hERO_PlayerUnit));
    gv__1C_VallaLevelUp = libNtve_gf_ActorLastCreated();
    SoundPlayForPlayer(SoundLink("UI_Game_Tutorial_Veteran_LevelUp", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    ActorSend(libNtve_gf_ActorLastCreated(), "AnimPlay Default Birth PlayForever,NonLooping 0.000000 0.000000");
    TransmissionWait(TransmissionLastSent(), 0.0);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00620", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 2.0);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyTyrael, false);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyMuradin, false);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_EnemySonya, false);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_EnemyNazeebo, false);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1512), 2.0, -1, 10.0, true);
    libNtve_gf_MakeUnitLookAtPoint(libStEx_gv_hERO_FriendlyUther, "MedStandingSubtle", PointFromId(1104));
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.5, c_timeGame);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00621", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_MakeUnitLookAtUnit(libStEx_gv_hERO_PlayerUnit, "SlowStanding", libStEx_gv_hERO_FriendlyUther, "Ref_Head");
    Wait(2.0, c_timeGame);
    libNtve_gf_SimpleLookAtStop(libStEx_gv_hERO_FriendlyUther, "FastStanding");
    TransmissionWait(TransmissionLastSent(), 1.0);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyUther, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1245)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_EnemyETC, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1248)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_EnemyETC, OrderTargetingPoint(AbilityCommand("L90ETCPowerslide", 0), PointFromId(2090)), c_orderQueueAddToEnd);
    UnitIssueOrder(libStEx_gv_hERO_EnemyETC, Order(AbilityCommand("L90ETCMoshPit", 0)), c_orderQueueAddToEnd);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(350), (10.0 + libStEx_gf_DataConversationSoundDuration("TutorialVO|Line00714", 0.0)), -1, 10.0, true);
    while (!((UnitHasBehavior2(libStEx_gv_hERO_EnemyETC, "L90ETCMoshPitChannel") == true))) {
        Wait(0.0625, c_timeGame);
    }
    libNtve_gf_PauseUnit(libStEx_gv_hERO_EnemyETC, true);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyMuradin, true);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyTyrael, true);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyUther, true);
    Wait(4.0, c_timeGame);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00714", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(3.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoshPitCinematic_Init () {
    gt_MoshPitCinematic = TriggerCreate("gt_MoshPitCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mosh Pit Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MoshPitCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == false)) {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }

    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoshPitCinematicEnd_Init () {
    gt_MoshPitCinematicEnd = TriggerCreate("gt_MoshPitCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mosh Pit Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MoshPitCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SetTalentTreeSelectionPanelDismissAllowed(true);
    RegionPlayableMapSet(RegionFromId(12));
    if ((gv__1C_VallaLevelUp != null)) {
        ActorSend(gv__1C_VallaLevelUp, "Destroy Immediate");
    }

    libNtve_gf_SimpleLookAtStop(libStEx_gv_hERO_FriendlyUther, "FastStanding");
    libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_suppressLevelUpFXAndSounds = false;
    libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_suppressLevelUpFXAndTeamXPTracking = false;
    TriggerEnable(gt__1C_TalentsPanelOpened, true);
    if ((gv_cinematicCompleted == false)) {
        gv__1C_CinematicSkipped = true;
        lv_fadeDuration = 1.5;
        gf_TurnCinematicCameraOnOffChallenge(libStEx_gv_pLAYER_01_USER, false);
        libStEx_gf_CinematicModeTutorial(false, PlayerGroupAll(), lv_fadeDuration);
        libStEx_gf_GlobalCinematicSettingTutorial(false);
        CameraPan(libStEx_gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(313)), 0.0, -1, 10.0, false);
        CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
        libNtve_gf_SimpleLookAtStop(libStEx_gv_hERO_PlayerUnit, "InstantStanding");
        libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyTyrael, false);
        libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyMuradin, false);
        libNtve_gf_PauseUnit(libStEx_gv_hERO_EnemySonya, false);
        libNtve_gf_PauseUnit(libStEx_gv_hERO_EnemyNazeebo, false);
        UnitSetState(libStEx_gv_hERO_PlayerUnit, c_unitStateFidget, true);
        UnitSetPosition(libStEx_gv_hERO_FriendlyUther, PointFromId(2088), false);
        UnitSetFacing(libStEx_gv_hERO_FriendlyUther, PointGetFacing(PointFromId(2088)), 0.0);
        UnitSetPosition(libStEx_gv_hERO_EnemyETC, PointFromId(2090), false);
        UnitSetFacing(libStEx_gv_hERO_EnemyETC, PointGetFacing(PointFromId(2090)), 0.0);
        UnitBehaviorRemove(libStEx_gv_hERO_EnemyETC, "Mounted", 1);
        UnitIssueOrder(libStEx_gv_hERO_FriendlyUther, OrderTargetingUnit(AbilityCommand("attack", 0), libStEx_gv_hERO_EnemySonya), c_orderQueueReplace);
        UnitIssueOrder(libStEx_gv_hERO_FriendlyTyrael, OrderTargetingUnit(AbilityCommand("attack", 0), libStEx_gv_hERO_EnemySonya), c_orderQueueReplace);
        UnitIssueOrder(libStEx_gv_hERO_FriendlyMuradin, OrderTargetingUnit(AbilityCommand("attack", 0), libStEx_gv_hERO_EnemySonya), c_orderQueueReplace);
        UnitIssueOrder(libStEx_gv_hERO_EnemySonya, OrderTargetingUnit(AbilityCommand("attack", 0), libStEx_gv_hERO_FriendlyTyrael), c_orderQueueReplace);
        UnitIssueOrder(libStEx_gv_hERO_EnemyNazeebo, OrderTargetingUnit(AbilityCommand("attack", 0), libStEx_gv_hERO_FriendlyTyrael), c_orderQueueReplace);
        if ((UnitHasBehavior2(libStEx_gv_hERO_FriendlyUther, "L90ETCMoshPitStun") == true)) {
            UnitBehaviorAdd(libStEx_gv_hERO_FriendlyTyrael, "L90ETCMoshPitStun", libStEx_gv_hERO_EnemyETC, 1);
            UnitBehaviorAdd(libStEx_gv_hERO_FriendlyMuradin, "L90ETCMoshPitStun", libStEx_gv_hERO_EnemyETC, 1);
            libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyTyrael, true);
            libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyMuradin, true);
        }

        libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
        UnitSelect(libStEx_gv_hERO_PlayerUnit, libStEx_gv_pLAYER_01_USER, true);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
        gf_RestoreHero();
        gf_ChallengeBriefMode(false);
    }
    else {
        gv__1C_CinematicSkipped = false;
        lv_fadeDuration = 1.0;
        libNtve_gf_SimpleLookAtStop(libStEx_gv_hERO_PlayerUnit, "SlowStanding");
        gf_TurnCinematicCameraOnOffChallenge(libStEx_gv_pLAYER_01_USER, false);
        libStEx_gf_CinematicModeTutorial(false, PlayerGroupAll(), lv_fadeDuration);
        libStEx_gf_GlobalCinematicSettingTutorial(false);
        CameraPan(libStEx_gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(313)), lv_fadeDuration, -1, 10.0, false);
        CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 10.0, false);
        UnitSetState(libStEx_gv_hERO_PlayerUnit, c_unitStateFidget, true);
        gf_RestoreHero();
        gf_ChallengeBriefMode(false);
        UnitSelect(libStEx_gv_hERO_PlayerUnit, libStEx_gv_pLAYER_01_USER, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoshPitCleanup_Init () {
    gt_MoshPitCleanup = TriggerCreate("gt_MoshPitCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOE Q
//--------------------------------------------------------------------------------------------------
bool gt_AOEQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_AOESetup, true, true);
    TriggerExecute(gt_AOECinematic, true, true);
    TriggerExecute(gt_AOECinematicEnd, true, true);
    TriggerExecute(gt_AOECleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AOEQ_Init () {
    gt_AOEQ = TriggerCreate("gt_AOEQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOE Setup
//--------------------------------------------------------------------------------------------------
bool gt_AOESetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libStEx_gf_ClearHintMessage();
    if ((libNtve_gf_PlayerInCinematicMode(libStEx_gv_pLAYER_01_USER) == false)) {
        libStEx_gf_CinematicModeTutorial(true, PlayerGroupAll(), 0.0);
        libStEx_gf_GlobalCinematicSettingTutorial(true);
        VisEnable(c_visTypeFog, true);
    }

    gf_TurnCinematicCameraOnOffChallenge(libStEx_gv_pLAYER_01_USER, true);
    gf_SetPlayableWithLooseCameraBounds(RegionFromId(63));
    GameTimeOfDayPause(true);
    libStEx_gf_LevelUpPlayer(libStEx_gv_pLAYER_01_USER, 16);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_01_USER);
    Wait(0.25, c_timeGame);
    libGame_gf_ApplyMountBehaviorToHero(libStEx_gv_hERO_PlayerUnit);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
    UnitSetState(libStEx_gv_hERO_PlayerUnit, c_unitStateFidget, false);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_PlayerUnit, false);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_PlayerUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    gf__1D_SpawnRightWave();
    gf__1D_SpawnTopWave();
    VisEnable(c_visTypeMask, true);
    VisEnable(c_visTypeFog, true);
    if ((gv__1D_VisionRevealer == null)) {
        VisRevealerCreate(libStEx_gv_pLAYER_01_USER, RegionFromId(3));
        gv__1D_VisionRevealer = VisRevealerLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AOESetup_Init () {
    gt_AOESetup = TriggerCreate("gt_AOESetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOE Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_AOECinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(55), 0.0, -1, 10.0, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SetTalentTreeSelectionPanelDismissAllowed(false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00622", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(341), 1.0, -1, 10.0, true);
    libCore_gf_AttachReticleEffectAndTextTagOnUnit(libCore_ge_ReticleType_MainObjective, libCore_ge_ReticleSize_Large, null, gv__1D_Keep, "Ref_Origin");
    gv__1D_KeepReticle = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(343), 2.0, -1, 10.0, true);
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(gv__1D_KeepReticle);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00673", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    gv__1D_KeepReticle = null;
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(344), 2.0, -1, 10.0, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00623", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(342), 0.0, -1, 10.0, true);
    libCore_gf_AttachReticleEffectAndTextTagOnUnit(libCore_ge_ReticleType_MainObjective, libCore_ge_ReticleSize_Medium, null, gv__1D_Fountain, "Ref_Center");
    gv__1D_FountainReticle = libNtve_gf_ActorLastCreated();
    TextTagCreate(StringExternal("Param/Value/870785D9"), 24, UnitGetPosition(gv__1D_Fountain), libUIUI_gv_uI_HealingFountainsHelpText_HeightOffset_C, true, false, PlayerGroupAll());
    gv__1D_FountainText = TextTagLastCreated();
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AOECinematic_Init () {
    gt_AOECinematic = TriggerCreate("gt_AOECinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOE Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_AOECinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == false)) {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }

    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AOECinematicEnd_Init () {
    gt_AOECinematicEnd = TriggerCreate("gt_AOECinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOE Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_AOECleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SetTalentTreeSelectionPanelDismissAllowed(true);
    RegionPlayableMapSet(RegionFromId(1));
    if ((gv__1D_KeepReticle != null)) {
        ActorSend(gv__1D_KeepReticle, "Destroy Immediate");
        gv__1D_KeepReticle = null;
    }

    if ((gv__1D_FountainReticle != null)) {
        ActorSend(gv__1D_FountainReticle, "Destroy Immediate");
        gv__1D_FountainReticle = null;
    }

    if ((gv__1D_FountainText == c_textTagNone)) {
        TextTagCreate(StringExternal("Param/Value/43471968"), 24, UnitGetPosition(gv__1D_Fountain), libUIUI_gv_uI_HealingFountainsHelpText_HeightOffset_C, true, false, PlayerGroupAll());
        gv__1D_FountainText = TextTagLastCreated();
    }

    if ((gv_cinematicCompleted == false)) {
        lv_fadeDuration = 1.5;
        UnitSetState(libStEx_gv_hERO_PlayerUnit, c_unitStateFidget, true);
        UnitSetState(libStEx_gv_hERO_FriendlyUther, c_unitStateFidget, true);
        UnitSelect(libStEx_gv_hERO_PlayerUnit, libStEx_gv_pLAYER_01_USER, true);
        gf_TurnCinematicCameraOnOffChallenge(libStEx_gv_pLAYER_01_USER, false);
        libStEx_gf_CinematicModeTutorial(false, PlayerGroupAll(), lv_fadeDuration);
        libStEx_gf_GlobalCinematicSettingTutorial(false);
        CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
        CameraPan(libStEx_gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(1094)), 0.0, -1, 10.0, false);
        libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_01_USER);
        libGame_gf_ApplyMountBehaviorToHero(libStEx_gv_hERO_PlayerUnit);
        Wait(0.5, c_timeGame);
        gf_ChallengeBriefMode(false);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    else {
        lv_fadeDuration = 1.0;
        libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_01_USER);
        libGame_gf_ApplyMountBehaviorToHero(libStEx_gv_hERO_PlayerUnit);
        UnitSetState(libStEx_gv_hERO_PlayerUnit, c_unitStateFidget, true);
        UnitSelect(libStEx_gv_hERO_PlayerUnit, libStEx_gv_pLAYER_01_USER, true);
        gf_TurnCinematicCameraOnOffChallenge(libStEx_gv_pLAYER_01_USER, false);
        libStEx_gf_CinematicModeTutorial(false, PlayerGroupAll(), lv_fadeDuration);
        libStEx_gf_GlobalCinematicSettingTutorial(false);
        CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 10.0, false);
        CameraPan(libStEx_gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(1094)), lv_fadeDuration, -1, 10.0, false);
        gf_ChallengeBriefMode(false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AOECleanup_Init () {
    gt_AOECleanup = TriggerCreate("gt_AOECleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_CinematicXPDisplay
//--------------------------------------------------------------------------------------------------
bool gt__1E_CinematicXPDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_xPGranted;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMinion) == true) && (UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamChaos)) {
        lv_xPGranted = libCore_gf_DataXPXPForMinion(EventUnitDamageKillXP(), libStEx_gv_pLAYER_01_USER, EventUnit());
        libUIUI_gf_UIFloatingCombatTextH16MidXP(libStEx_gv_pLAYER_01_USER, EventUnit(), libCore_ge_FloatingTextType_XPSmall, FixedToInt(lv_xPGranted));
    }

    if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true)) {
        lv_xPGranted = libCore_gf_DataXPXPForHero(libStEx_gv_pLAYER_01_USER, EventUnit());
        libUIUI_gf_UIFloatingCombatTextH16MidXP(libStEx_gv_pLAYER_01_USER, EventUnit(), libCore_ge_FloatingTextType_XPLarge, FixedToInt(lv_xPGranted));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_CinematicXPDisplay_Init () {
    gt__1E_CinematicXPDisplay = TriggerCreate("gt__1E_CinematicXPDisplay_Func");
    TriggerEnable(gt__1E_CinematicXPDisplay, false);
    TriggerAddEventUnitDied(gt__1E_CinematicXPDisplay, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1E_Cine Level Up
//--------------------------------------------------------------------------------------------------
bool gt__1E_CineLevelUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_panel;
    int lv_label;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_panel = c_invalidDialogControlId;
    lv_label = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_AttachModelToUnit(gv__1E_CineLevelUpUnit, "Storm_Effect_HeroLevelUp", "Ref_Origin");
    gv__1E_CineTextDialog = DialogLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.500000");
    SoundPlayForPlayer(SoundLink("UI_Game_Tutorial_Veteran_LevelUp", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv__1E_CineLevelUpSound = SoundLastPlayed();
    DialogCreate(300, 300, c_anchorCenter, 0, 0, false);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "Tutorial01_GameUI/VTutorialXPFrame");
    lv_panel = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "XPLabel");
    lv_label = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/757C3B9F"), PlayerGroupAll());
    DialogSetPositionRelativeToUnit(DialogLastCreated(), gv__1E_CineLevelUpUnit, "Ref_Origin", -70, -380);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    Wait(1.5, c_timeGame);
    DialogControlFadeTransparency(lv_panel, PlayerGroupAll(), 1.5, 100.0);
    Wait(1.5, c_timeGame);
    DialogDestroy(DialogLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1E_CineLevelUp_Init () {
    gt__1E_CineLevelUp = TriggerCreate("gt__1E_CineLevelUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Roaming Q
//--------------------------------------------------------------------------------------------------
bool gt_RoamingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MX_TutorialVet_Intro3", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerExecute(gt_RoamingSetup, true, true);
    TriggerExecute(gt_RoamingCinematic, true, true);
    TriggerExecute(gt_RoamingCinematicEnd, true, true);
    TriggerExecute(gt_RoamingCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoamingQ_Init () {
    gt_RoamingQ = TriggerCreate("gt_RoamingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Roaming Setup
//--------------------------------------------------------------------------------------------------
bool gt_RoamingSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto37787493_g;
    int auto37787493_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libStEx_gf_ClearHintMessage();
    if ((libNtve_gf_PlayerInCinematicMode(libStEx_gv_pLAYER_01_USER) == false)) {
        libStEx_gf_CinematicModeTutorial2(true, PlayerGroupAll(), c_transitionDurationImmediate);
        libStEx_gf_GlobalCinematicSettingTutorial(true);
        VisEnable(c_visTypeFog, true);
    }

    gf_SetPlayableWithLooseCameraBounds(RegionFromId(63));
    libStEx_gf_SwaptoNewHeroforPlayer(libStEx_gv_pLAYER_01_USER, "Zeratul", 8);
    libStEx_gv_hERO_PlayerUnit = libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit;
    gf_TurnCinematicCameraOnOffChallenge(libStEx_gv_pLAYER_01_USER, true);
    GameTimeOfDayPause(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    auto37787493_g = UnitGroup("StormGameStartPathingBlocker", libCore_gv_cOMPUTER_Neutral, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto37787493_u = UnitGroupCount(auto37787493_g, c_unitCountAll);
    for (;; auto37787493_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto37787493_g, auto37787493_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_PauseUnit(lv_itUnit, true);
        libNtve_gf_ShowHideUnit(lv_itUnit, false);
    }
    Wait(0.25, c_timeGame);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_01_USER);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_PlayerUnit, PointFromId(745), false);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
    UnitSetState(libStEx_gv_hERO_PlayerUnit, c_unitStateFidget, false);
    libNtve_gf_ShowHideUnit(libStEx_gv_hERO_PlayerUnit, false);
    UnitSelect(libStEx_gv_hERO_PlayerUnit, libStEx_gv_pLAYER_01_USER, false);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_02_UTHER);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_FriendlyUther, PointFromId(746), false);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_FriendlyUther, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyUther, false);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyUther, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(126)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyUther, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(18)), c_orderQueueAddToEnd);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyUther, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(17)), c_orderQueueAddToEnd);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyUther, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(15)), c_orderQueueAddToEnd);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_03_ORDER1);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_FriendlyRaynor, PointFromId(773), false);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_FriendlyRaynor, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyRaynor, false);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyRaynor, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(727)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyRaynor, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(728)), c_orderQueueAddToEnd);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyRaynor, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(729)), c_orderQueueAddToEnd);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_07_CHAOS2);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_EnemyGreymane, PointFromId(805), false);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyGreymane, false);
    libNtve_gf_ShowHideUnit(libStEx_gv_hERO_EnemyGreymane, true);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_EnemyGreymane, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitIssueOrder(libStEx_gv_hERO_EnemyGreymane, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(18)), c_orderQueueReplace);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_08_CHAOS3);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_EnemyNazeebo, PointFromId(774), false);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_EnemyNazeebo, false);
    libNtve_gf_ShowHideUnit(libStEx_gv_hERO_EnemyNazeebo, true);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_EnemyNazeebo, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitIssueOrder(libStEx_gv_hERO_EnemyNazeebo, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(728)), c_orderQueueReplace);
    TriggerEnable(gt__1E_CinematicXPDisplay, true);
    gf__2B_CineSpawnMinionsforCutscene();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoamingSetup_Init () {
    gt_RoamingSetup = TriggerCreate("gt_RoamingSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Roaming Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_RoamingCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;
    unit lv_itMinion;
    string lv_typeofCopiedUnit;

    // Automatic Variable Declarations
    const int autoE3175D20_ae = 2;
    const int autoE3175D20_ai = 1;
    unitgroup auto4A98DEE0_g;
    int auto4A98DEE0_u;
    unitgroup auto8238A2F4_g;
    int auto8238A2F4_u;
    unitgroup auto73AA7070_g;
    int auto73AA7070_u;
    unitgroup autoEAE2918D_g;
    int autoEAE2918D_u;
    unitgroup autoF4A0D5C6_g;
    int autoF4A0D5C6_u;
    unitgroup auto2B31993B_g;
    int auto2B31993B_u;
    unitgroup autoEA134F52_g;
    int autoEA134F52_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(542), 0.0, -1, 10.0, true);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(826), 4.0, -1, 10.0, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeGame);
    SetTalentTreeSelectionPanelDismissAllowed(false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    lv_itTeam = 1;
    for ( ; ( (autoE3175D20_ai >= 0 && lv_itTeam <= autoE3175D20_ae) || (autoE3175D20_ai < 0 && lv_itTeam >= autoE3175D20_ae) ) ; lv_itTeam += autoE3175D20_ai ) {
        auto4A98DEE0_g = gv__2B_CineMinionsTop[lv_itTeam];
        auto4A98DEE0_u = UnitGroupCount(auto4A98DEE0_g, c_unitCountAll);
        for (;; auto4A98DEE0_u -= 1) {
            lv_itMinion = UnitGroupUnitFromEnd(auto4A98DEE0_g, auto4A98DEE0_u);
            if (lv_itMinion == null) { break; }
            libNtve_gf_ChangeUnitDamage(lv_itMinion, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            UnitBehaviorAddPlayer(lv_itMinion, "DamageTaken302", libStEx_gv_pLAYER_01_USER, 1);
        }
    }
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00740", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(4.0, c_timeGame);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1099), ((libStEx_gf_DataConversationSoundDuration("TutorialVO|Line00740", 0.0) - 4.0) + (libStEx_gf_DataConversationSoundDuration("TutorialVO|Line00724", 0.0) - 0.5)), -1, 10.0, true);
    TransmissionWait(TransmissionLastSent(), 3.0);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyRaynor, OrderTargetingPoint(AbilityCommand("RaynorPenetratingRound", 0), UnitGetPosition(libStEx_gv_hERO_EnemyNazeebo)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyRaynor, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(729)), c_orderQueueAddToEnd);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00724", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 5.0);
    gv__1E_CineLevelUpUnit = libStEx_gv_hERO_FriendlyRaynor;
    TriggerExecute(gt__1E_CineLevelUp, true, false);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(825), 0.0, -1, 10.0, true);
    Wait(0.5, c_timeGame);
    TriggerStop(gt__1E_CineLevelUp);
    if ((gv__2B_CineTextDialog != c_invalidDialogId)) {
        DialogDestroy(gv__2B_CineTextDialog);
        gv__2B_CineTextDialog = c_invalidDialogId;
    }

    auto8238A2F4_g = gv__2B_CineMinionsBot[1];
    auto8238A2F4_u = UnitGroupCount(auto8238A2F4_g, c_unitCountAll);
    for (;; auto8238A2F4_u -= 1) {
        lv_itMinion = UnitGroupUnitFromEnd(auto8238A2F4_g, auto8238A2F4_u);
        if (lv_itMinion == null) { break; }
        if ((UnitGetType(lv_itMinion) == "FootmanMinion")) {
            libNtve_gf_ChangeUnitDamage(lv_itMinion, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            UnitBehaviorAddPlayer(lv_itMinion, "DamageTakenQuarter", libStEx_gv_pLAYER_01_USER, 1);
        }
        else {
            libNtve_gf_ChangeUnitDamage(lv_itMinion, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            UnitBehaviorAddPlayer(lv_itMinion, "DamageTaken102", libStEx_gv_pLAYER_01_USER, 1);
        }
    }
    auto73AA7070_g = gv__2B_CineMinionsBot[2];
    auto73AA7070_u = UnitGroupCount(auto73AA7070_g, c_unitCountAll);
    for (;; auto73AA7070_u -= 1) {
        lv_itMinion = UnitGroupUnitFromEnd(auto73AA7070_g, auto73AA7070_u);
        if (lv_itMinion == null) { break; }
        if ((UnitGetType(lv_itMinion) == "FootmanMinion")) {
            libNtve_gf_ChangeUnitDamage(lv_itMinion, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            UnitBehaviorAddPlayer(lv_itMinion, "DamageTaken402", libStEx_gv_pLAYER_01_USER, 1);
        }
        else {
            libNtve_gf_ChangeUnitDamage(lv_itMinion, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            UnitBehaviorAddPlayer(lv_itMinion, "DamageTakenQuarter", libStEx_gv_pLAYER_01_USER, 1);
        }
    }
    gv__1E_CineLevelUpUnit = libStEx_gv_hERO_FriendlyUther;
    TriggerExecute(gt__1E_CineLevelUp, true, false);
    Wait(1.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1100), libStEx_gf_DataConversationSoundDuration("TutorialVO|Line00725", 0.0), -1, 10.0, true);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00725", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 2.0);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyUther, OrderTargetingPoint(AbilityCommand("UtherHolyRadiance", 0), UnitGetPosition(libStEx_gv_hERO_EnemyGreymane)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyUther, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(15)), c_orderQueueAddToEnd);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00726", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.0, c_timeGame);
    autoEAE2918D_g = gv__2B_CineMinionsBot[1];
    autoEAE2918D_u = UnitGroupCount(autoEAE2918D_g, c_unitCountAll);
    for (;; autoEAE2918D_u -= 1) {
        lv_itMinion = UnitGroupUnitFromEnd(autoEAE2918D_g, autoEAE2918D_u);
        if (lv_itMinion == null) { break; }
        libNtve_gf_ChangeUnitDamage(lv_itMinion, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    autoF4A0D5C6_g = gv__2B_CineMinionsBot[2];
    autoF4A0D5C6_u = UnitGroupCount(autoF4A0D5C6_g, c_unitCountAll);
    for (;; autoF4A0D5C6_u -= 1) {
        lv_itMinion = UnitGroupUnitFromEnd(autoF4A0D5C6_g, autoF4A0D5C6_u);
        if (lv_itMinion == null) { break; }
        libNtve_gf_ChangeUnitDamage(lv_itMinion, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(879), 0.0, -1, 10.0, true);
    libNtve_gf_CreateModelAtPoint("ZeratulBlinkInModel", PointFromId(745));
    gv__1E_CineZeratulInSmoke = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "AnimPlay Default Birth PlayForever,NonLooping 0.000000 0.000000");
    SoundPlayAtPointForPlayer(SoundLink("UI_Game_Tutorial_Veteran_Zeratul_Blink_Out", -1), libStEx_gv_pLAYER_01_USER, PlayerGroupAll(), PointFromId(745), 0.0, 100.0, 0.0);
    libNtve_gf_ShowHideUnit(libStEx_gv_hERO_PlayerUnit, true);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(543), (libStEx_gf_DataConversationSoundDuration("TutorialVO|Line00726", 0.0) - 2.0), -1, 10.0, true);
    Wait(1.5, c_timeGame);
    libNtve_gf_KillModel(gv__1E_CineZeratulInSmoke);
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(817)), c_orderQueueReplace);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1101), 2.0, -1, 10.0, true);
    gv__1E_CineZeratulInSmoke = null;
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_FriendlyUther, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
    auto2B31993B_g = gv__2B_CineMinionsBot[1];
    auto2B31993B_u = UnitGroupCount(auto2B31993B_g, c_unitCountAll);
    for (;; auto2B31993B_u -= 1) {
        lv_itMinion = UnitGroupUnitFromEnd(auto2B31993B_g, auto2B31993B_u);
        if (lv_itMinion == null) { break; }
        libNtve_gf_ChangeUnitDamage(lv_itMinion, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
        libNtve_gf_ChangeUnitDamage(lv_itMinion, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
    }
    autoEA134F52_g = gv__2B_CineMinionsBot[2];
    autoEA134F52_u = UnitGroupCount(autoEA134F52_g, c_unitCountAll);
    for (;; autoEA134F52_u -= 1) {
        lv_itMinion = UnitGroupUnitFromEnd(autoEA134F52_g, autoEA134F52_u);
        if (lv_itMinion == null) { break; }
        libNtve_gf_ChangeUnitDamage(lv_itMinion, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
        libNtve_gf_ChangeUnitDamage(lv_itMinion, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
    }
    while (!((DistanceBetweenPoints(UnitGetPosition(libStEx_gv_hERO_PlayerUnit), PointFromId(818)) <= StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "ZeratulBlinkStorm", "Range[0]", libStEx_gv_pLAYER_01_USER))))) {
        Wait(0.0625, c_timeGame);
    }
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_PlayerUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, OrderTargetingPoint(AbilityCommand("ZeratulBlinkStorm", 0), UnitGetPosition(libStEx_gv_hERO_EnemyGreymane)), c_orderQueueAddToEnd);
    libAIAI_gf_HeroAIDisableAIForPlayer(UnitGetOwner(libStEx_gv_hERO_EnemyGreymane));
    UnitIssueOrder(libStEx_gv_hERO_EnemyGreymane, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    while (!((DistanceBetweenPoints(UnitGetPosition(libStEx_gv_hERO_PlayerUnit), UnitGetPosition(libStEx_gv_hERO_EnemyGreymane)) <= 3.0))) {
        Wait(0.0625, c_timeGame);
    }
    Wait(0.125, c_timeGame);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_EnemyGreymane, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    UnitSetPropertyFixed(libStEx_gv_hERO_EnemyGreymane, c_unitPropLife, 100.0);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, Order(AbilityCommand("ZeratulCleave", 0)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, OrderTargetingUnit(AbilityCommand("attack", 0), libStEx_gv_hERO_EnemyGreymane), c_orderQueueAddToEnd);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_FriendlyUther, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
    while (!((UnitIsAlive(libStEx_gv_hERO_EnemyGreymane) == false))) {
        Wait(0.125, c_timeGame);
    }
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_FriendlyUther, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Full);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00727", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    UnitAbilityReset(libGame_gv_players[1].lv_heroUnit, AbilityCommand("ZeratulBlinkStorm", 0), c_spendLocationAll);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, Order(AbilityCommand("Mount", 0)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(745)), c_orderQueueAddToEnd);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1082)), c_orderQueueAddToEnd);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(874), 5.0, -1, 10.0, true);
    while (!((DistanceBetweenPoints(UnitGetPosition(libStEx_gv_hERO_PlayerUnit), PointFromId(1083)) <= StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "ZeratulBlinkStorm", "Range[0]", libStEx_gv_pLAYER_01_USER))))) {
        Wait(0.0625, c_timeGame);
    }
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, OrderTargetingPoint(AbilityCommand("ZeratulBlinkStorm", 0), PointFromId(1083)), c_orderQueueAddToEnd);
    while (!((DistanceBetweenPoints(UnitGetPosition(libStEx_gv_hERO_PlayerUnit), PointFromId(1083)) <= 0.5))) {
        Wait(0.125, c_timeGame);
    }
    libNtve_gf_ShowHideUnit(libStEx_gv_hERO_PlayerUnit, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeGame);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00623", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1262), 0.0, -1, 10.0, true);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1264), (libStEx_gf_DataConversationSoundDuration("TutorialVO|Line00623", 0.0) - 1.0), -1, 10.0, true);
    libCore_gf_AttachReticleEffectAndTextTagOnUnit(libCore_ge_ReticleType_MainObjective, libCore_ge_ReticleSize_Medium, null, UnitFromId(189), "Ref_Center");
    gv__1E_FountainReticle = libNtve_gf_ActorLastCreated();
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoamingCinematic_Init () {
    gt_RoamingCinematic = TriggerCreate("gt_RoamingCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Roaming Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_RoamingCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == false)) {
        lv_fadeDuration = 0.5;
    }
    else {
        lv_fadeDuration = 1.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoamingCinematicEnd_Init () {
    gt_RoamingCinematicEnd = TriggerCreate("gt_RoamingCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Roaming Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_RoamingCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto6FD88AEC_g;
    int auto6FD88AEC_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SetTalentTreeSelectionPanelDismissAllowed(true);
    RegionPlayableMapSet(RegionFromId(21));
    auto6FD88AEC_g = gv__2B_CineMinions;
    auto6FD88AEC_u = UnitGroupCount(auto6FD88AEC_g, c_unitCountAll);
    for (;; auto6FD88AEC_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto6FD88AEC_g, auto6FD88AEC_u);
        if (lv_itUnit == null) { break; }
        UnitRemove(lv_itUnit);
    }
    libNtve_gf_ShowHideUnit(libStEx_gv_hERO_PlayerUnit, true);
    UnitClearSelection(libStEx_gv_pLAYER_01_USER);
    UnitSelect(libStEx_gv_hERO_PlayerUnit, libStEx_gv_pLAYER_01_USER, true);
    if ((gv__1E_FountainReticle != null)) {
        ActorSend(gv__1E_FountainReticle, "Destroy Immediate");
        gv__1E_FountainReticle = null;
    }

    if ((gv_cinematicCompleted == false)) {
        gv__1E_CinematicSkipped = true;
        libNtve_gf_KillModel(gv__1E_CineZeratulInSmoke);
        lv_fadeDuration = 1.5;
    }
    else {
        gv__1E_CinematicSkipped = false;
        lv_fadeDuration = 1.0;
    }
    TriggerEnable(gt__1E_CinematicXPDisplay, false);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_01_USER);
    libGame_gf_ApplyMountBehaviorToHero(libStEx_gv_hERO_PlayerUnit);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_PlayerUnit, PointFromId(1276), false);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_02_UTHER);
    libGame_gf_ApplyMountBehaviorToHero(libStEx_gv_hERO_FriendlyUther);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_FriendlyUther, PointFromId(1119), false);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_03_ORDER1);
    libNtve_gf_ChangeUnitDamage(libStEx_gv_hERO_FriendlyUther, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Full);
    libGame_gf_ApplyMountBehaviorToHero(libStEx_gv_hERO_FriendlyRaynor);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_FriendlyRaynor, PointFromId(1117), false);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_07_CHAOS2);
    libGame_gf_ApplyMountBehaviorToHero(libStEx_gv_hERO_EnemyGreymane);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_EnemyGreymane, PointFromId(1278), false);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_08_CHAOS3);
    libGame_gf_ApplyMountBehaviorToHero(libStEx_gv_hERO_EnemyNazeebo);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_EnemyNazeebo, PointFromId(1277), false);
    UnitSetState(libStEx_gv_hERO_PlayerUnit, c_unitStateFidget, true);
    UnitSelect(libStEx_gv_hERO_PlayerUnit, libStEx_gv_pLAYER_01_USER, true);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    CameraPan(libStEx_gv_pLAYER_01_USER, UnitGetPosition(libStEx_gv_hERO_PlayerUnit), 0.0, -1, 10.0, false);
    gf_TurnCinematicCameraOnOffChallenge(libStEx_gv_pLAYER_01_USER, false);
    gf_ChallengeBriefMode(false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libStEx_gf_CinematicModeTutorial(false, PlayerGroupAll(), lv_fadeDuration);
    libStEx_gf_GlobalCinematicSettingTutorial(false);
    libNtve_gf_SwooshCamera(libStEx_gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), UnitGetPosition(libStEx_gv_hERO_PlayerUnit), lv_fadeDuration);
    Wait(lv_fadeDuration, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoamingCleanup_Init () {
    gt_RoamingCleanup = TriggerCreate("gt_RoamingCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2A_Abathur_Used_Symbiote
//--------------------------------------------------------------------------------------------------
bool gt__2A_Abathur_Used_Symbiote_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv__2A_Symbiote_Unit = libGDHL_gf_AbathurSymbioteUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2A_Abathur_Used_Symbiote_Init () {
    gt__2A_Abathur_Used_Symbiote = TriggerCreate("gt__2A_Abathur_Used_Symbiote_Func");
    TriggerEnable(gt__2A_Abathur_Used_Symbiote, false);
    libGDHL_gf_AbathurSymbiote(gt__2A_Abathur_Used_Symbiote);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Q
//--------------------------------------------------------------------------------------------------
bool gt_EscapeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_EscapeSetup, true, true);
    TriggerExecute(gt_EscapeCinematic, true, true);
    TriggerExecute(gt_EscapeCinematicEnd, true, true);
    TriggerExecute(gt_EscapeCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeQ_Init () {
    gt_EscapeQ = TriggerCreate("gt_EscapeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Setup
//--------------------------------------------------------------------------------------------------
bool gt_EscapeSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeSetup_Init () {
    gt_EscapeSetup = TriggerCreate("gt_EscapeSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_EscapeCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup autoAE5DCE26_g;
    int autoAE5DCE26_u;
    unitgroup autoB84555CC_g;
    int autoB84555CC_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(2070), 0.0, -1, 10.0, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00624", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitSetPosition(libStEx_gv_hERO_PlayerUnit, PointFromId(1297), false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libStEx_gv_hERO_PlayerUnit), c_animNameDefault, "Spell E End", c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_ShowHideUnit(libStEx_gv_hERO_PlayerUnit, true);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1106), SoundLengthSync(SoundLink(ConversationDataGetSound("TutorialVO|Line00624", false), c_soundIndexAny)), -1, 10.0, true);
    TransmissionWait(TransmissionLastSent(), 2.0);
    libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_PlayerUnit, "AnimPlay Taunt Taunt 0 -1.000000 -1.000000 1.000000 AsTimeScale 0.000000 30");
    TransmissionWait(TransmissionLastSent(), 0.0);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00625", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_PlayerUnit, "AnimBracketStart SpellE Stand,Cover,Start Stand,Cover Stand,Cover,End 0 1.000000 AsTimeScale");
    UnitBehaviorAddPlayer(libStEx_gv_hERO_PlayerUnit, "SymbioteCasterDummyBehavior", libStEx_gv_pLAYER_01_USER, 1);
    gf__2A_CinematicSpawnMinionsforCutscene();
    Wait(2.0, c_timeGame);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyValla, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1113)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1115), 2.0, -1, 10.0, true);
    Wait(3.0, c_timeGame);
    UnitBehaviorRemovePlayer(libStEx_gv_hERO_PlayerUnit, "SymbioteCasterDummyBehavior", libStEx_gv_pLAYER_01_USER, 1);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, OrderTargetingUnit(AbilityCommand("AbathurSymbiote", 0), libStEx_gv_hERO_FriendlyValla), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    autoAE5DCE26_g = gv__2A_CinematicMinions;
    autoAE5DCE26_u = UnitGroupCount(autoAE5DCE26_g, c_unitCountAll);
    for (;; autoAE5DCE26_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoAE5DCE26_g, autoAE5DCE26_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_ChangeUnitDamage(lv_itUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    }
    if ((gv__2A_Symbiote_Unit != null)) {
        UnitIssueOrder(gv__2A_Symbiote_Unit, Order(AbilityCommand("AbathurSymbioteSpikeBurst", 0)), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
        CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(3), 4.0, -1, 10.0, true);
        UnitIssueOrder(gv__2A_Symbiote_Unit, OrderTargetingPoint(AbilityCommand("AbathurSymbioteStab", 0), UnitGetPosition(UnitGroupUnit(gv__2A_EnemyMinions, 1))), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
        UnitIssueOrder(gv__2A_Symbiote_Unit, Order(AbilityCommand("AbathurSymbioteCarapace", 0)), c_orderQueueReplace);
    }

    TransmissionWait(TransmissionLastSent(), 0.0);
    autoB84555CC_g = gv__2A_CinematicMinions;
    autoB84555CC_u = UnitGroupCount(autoB84555CC_g, c_unitCountAll);
    for (;; autoB84555CC_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoB84555CC_g, autoB84555CC_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_ChangeUnitDamage(lv_itUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega);
    }
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00628", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(libStEx_gv_hERO_EnemyJaina, OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(1585)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_EnemyJaina, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(16)), c_orderQueueAddToEnd);
    UnitIssueOrder(libStEx_gv_hERO_EnemyJaina, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    libNtve_gf_MakeUnitInvulnerable(libStEx_gv_hERO_FriendlyValla, true);
    Wait(3.0, c_timeGame);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyValla, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(16)), c_orderQueueReplace);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyValla, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(460), 1.5, -1, 10.0, true);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00709", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1116), 0.0, -1, 10.0, true);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00629", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv__2A_Symbiote_Unit, Order(AbilityCommand("AbathurAssumingDirectControlCancel", 0)), c_orderQueueReplace);
    gv__2A_Symbiote_Unit = null;
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeCinematic_Init () {
    gt_EscapeCinematic = TriggerCreate("gt_EscapeCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_EscapeCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == false)) {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }

    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeCinematicEnd_Init () {
    gt_EscapeCinematicEnd = TriggerCreate("gt_EscapeCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_EscapeCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto3F2E8733_g;
    int auto3F2E8733_u;
    unitgroup autoB8DE2E48_g;
    int autoB8DE2E48_u;
    unitgroup auto7C969922_g;
    int auto7C969922_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    RegionPlayableMapSet(RegionFromId(14));
    if ((gv__2A_DummyReticle1 != null)) {
        libNtve_gf_KillModel(gv__2A_DummyReticle1);
        gv__2A_DummyReticle1 = null;
    }

    if ((gv__2A_DummyReticle2 != null)) {
        libNtve_gf_KillModel(gv__2A_DummyReticle2);
        gv__2A_DummyReticle2 = null;
    }

    libGDHL_gv_heroAbathurSymbioteDontLockCameraforCutscene = false;
    auto3F2E8733_g = UnitGroup("RegenGlobe", c_playerAny, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3F2E8733_u = UnitGroupCount(auto3F2E8733_g, c_unitCountAll);
    for (;; auto3F2E8733_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto3F2E8733_g, auto3F2E8733_u);
        if (lv_itUnit == null) { break; }
        UnitRemove(lv_itUnit);
    }
    autoB8DE2E48_g = gv__2A_CinematicMinions;
    autoB8DE2E48_u = UnitGroupCount(autoB8DE2E48_g, c_unitCountAll);
    for (;; autoB8DE2E48_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoB8DE2E48_g, autoB8DE2E48_u);
        if (lv_itUnit == null) { break; }
        UnitRemove(lv_itUnit);
    }
    UnitBehaviorRemove(libStEx_gv_hERO_FriendlyValla, "NewHatredStack", c_unitBehaviorCountAll);
    if ((libNtve_gf_UnitIsHidden(libStEx_gv_hERO_PlayerUnit) == true)) {
        libNtve_gf_ShowHideUnit(libStEx_gv_hERO_PlayerUnit, true);
    }

    if ((gv__2A_CinematicRevealer != null)) {
        VisRevealerDestroy(gv__2A_CinematicRevealer);
    }

    if ((gv_cinematicCompleted == false)) {
        CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
        CameraPan(libStEx_gv_pLAYER_01_USER, UnitGetPosition(libStEx_gv_hERO_PlayerUnit), 0.0, -1, 10.0, false);
        UnitSetPosition(libStEx_gv_hERO_FriendlyValla, PointFromId(16), false);
        UnitSetFacing(libStEx_gv_hERO_FriendlyValla, PointGetFacing(PointFromId(16)), 0.0);
        UnitIssueOrder(libStEx_gv_hERO_FriendlyValla, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitSetPosition(libStEx_gv_hERO_EnemyJaina, PointFromId(1585), false);
        UnitSetFacing(libStEx_gv_hERO_EnemyJaina, PointGetFacing(PointFromId(1585)), 0.0);
        UnitIssueOrder(libStEx_gv_hERO_EnemyJaina, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        auto7C969922_g = UnitGroup(null, libCore_gv_cOMPUTER_TeamOrder, RegionFromId(14), UnitFilter((1 << c_targetFilterMinion), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7C969922_u = UnitGroupCount(auto7C969922_g, c_unitCountAll);
        for (;; auto7C969922_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(auto7C969922_g, auto7C969922_u);
            if (lv_itUnit == null) { break; }
            UnitSetPosition(lv_itUnit, PointFromId(1087), false);
            UnitKill(lv_itUnit);
        }
        if ((gv__2A_Symbiote_Unit != null)) {
            UnitBehaviorRemove(libStEx_gv_hERO_FriendlyValla, "AbathurSymbioteHostBehavior", 1);
            gv__2A_Symbiote_Unit = null;
        }

        libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_PlayerUnit, "AnimBracketStop SpellE Instant");
        UnitBehaviorRemovePlayer(libStEx_gv_hERO_PlayerUnit, "SymbioteCasterDummyBehavior", libStEx_gv_pLAYER_01_USER, 1);
        UnitSetState(libStEx_gv_hERO_PlayerUnit, c_unitStateSelectable, true);
        Wait(0.5, c_timeGame);
        libNtve_gf_PauseUnit(libStEx_gv_hERO_FriendlyValla, true);
        libNtve_gf_PauseUnit(libStEx_gv_hERO_EnemyJaina, true);
        UnitSetFacing(libStEx_gv_hERO_FriendlyValla, PointGetFacing(PointFromId(16)), 0.0);
        UnitSetFacing(libStEx_gv_hERO_EnemyJaina, PointGetFacing(PointFromId(1585)), 0.0);
        lv_fadeDuration = 1.5;
        gf_TurnCinematicCameraOnOffChallenge(libStEx_gv_pLAYER_01_USER, false);
        libStEx_gf_CinematicModeTutorial(false, PlayerGroupAll(), lv_fadeDuration);
        libStEx_gf_GlobalCinematicSettingTutorial(false);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
        UnitSetState(libStEx_gv_hERO_PlayerUnit, c_unitStateFidget, true);
        UnitSelect(libStEx_gv_hERO_PlayerUnit, libStEx_gv_pLAYER_01_USER, true);
        UnitSetState(libStEx_gv_hERO_FriendlyValla, c_unitStateFidget, true);
        gf_ChallengeBriefMode(false);
        Wait(lv_fadeDuration, c_timeGame);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 10.0, false);
        CameraPan(libStEx_gv_pLAYER_01_USER, UnitGetPosition(libStEx_gv_hERO_PlayerUnit), lv_fadeDuration, -1, 10.0, false);
        gf_TurnCinematicCameraOnOffChallenge(libStEx_gv_pLAYER_01_USER, false);
        libStEx_gf_CinematicModeTutorial(false, PlayerGroupAll(), lv_fadeDuration);
        libStEx_gf_GlobalCinematicSettingTutorial(false);
        UnitSetState(libStEx_gv_hERO_PlayerUnit, c_unitStateFidget, true);
        UnitSelect(libStEx_gv_hERO_PlayerUnit, libStEx_gv_pLAYER_01_USER, true);
        UnitSetState(libStEx_gv_hERO_FriendlyValla, c_unitStateFidget, true);
        gf_ChallengeBriefMode(false);
        Wait(lv_fadeDuration, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeCleanup_Init () {
    gt_EscapeCleanup = TriggerCreate("gt_EscapeCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2B_Abathur_Used_Symbiote
//--------------------------------------------------------------------------------------------------
bool gt__2B_Abathur_Used_Symbiote_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv__2B_CineSymbiote_Unit = libGDHL_gf_AbathurSymbioteUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2B_Abathur_Used_Symbiote_Init () {
    gt__2B_Abathur_Used_Symbiote = TriggerCreate("gt__2B_Abathur_Used_Symbiote_Func");
    TriggerEnable(gt__2B_Abathur_Used_Symbiote, false);
    libGDHL_gf_AbathurSymbiote(gt__2B_Abathur_Used_Symbiote);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2B_Cine +XP
//--------------------------------------------------------------------------------------------------
bool gt__2B_CineXP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_panel;
    int lv_label;
    int lv_index;
    int lv_offset;
    int lv_offsetOld;

    // Automatic Variable Declarations
    int auto1D5E6612_n;
    int auto1D5E6612_i;

    // Variable Initialization
    lv_panel = c_invalidDialogControlId;
    lv_label = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(300, 300, c_anchorCenter, 0, 0, false);
    gv__2B_CineTextDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "Tutorial01_GameUI/VTutorialXPFrame");
    lv_panel = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "XPLabel");
    lv_label = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/49ACA3E7"), PlayerGroupAll());
    DialogSetPositionRelativeToUnit(DialogLastCreated(), gv__2B_CineXPUnit2, "Ref_Origin", -90, -450);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    auto1D5E6612_n = FixedToInt((3.0 / 0.0625));
    for (auto1D5E6612_i = 1; auto1D5E6612_i <= auto1D5E6612_n; auto1D5E6612_i += 1) {
        lv_index += 1;
        lv_offset = FixedToInt((lv_index * 0.9));
        if ((lv_offset != lv_offsetOld)) {
            DialogControlSetPosition(lv_label, PlayerGroupAll(), c_anchorBottomLeft, 0, FixedToInt((lv_index * 0.9)));
            lv_offsetOld = lv_offset;
        }

        if ((lv_index == 24)) {
            DialogControlFadeTransparency(lv_panel, PlayerGroupAll(), 1.5, 100.0);
        }

        Wait(0.0625, c_timeGame);
    }
    DialogDestroy(DialogLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2B_CineXP_Init () {
    gt__2B_CineXP = TriggerCreate("gt__2B_CineXP_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Soak Lanes Q
//--------------------------------------------------------------------------------------------------
bool gt_SoakLanesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_SoakLanesSetup, true, true);
    TriggerExecute(gt_SoakLanesCinematic, true, true);
    TriggerExecute(gt_SoakLanesCinematicEnd, true, true);
    TriggerExecute(gt_SoakLanesCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SoakLanesQ_Init () {
    gt_SoakLanesQ = TriggerCreate("gt_SoakLanesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Soak Lanes Setup
//--------------------------------------------------------------------------------------------------
bool gt_SoakLanesSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto86DD256F_g;
    int auto86DD256F_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libStEx_gf_ClearHintMessage();
    if ((libNtve_gf_PlayerInCinematicMode(libStEx_gv_pLAYER_01_USER) == false)) {
        libStEx_gf_CinematicModeTutorial(true, PlayerGroupAll(), 0.0);
        libStEx_gf_GlobalCinematicSettingTutorial(true);
        VisEnable(c_visTypeFog, true);
    }

    gf_TurnCinematicCameraOnOffChallenge(libStEx_gv_pLAYER_01_USER, true);
    gf_SetPlayableWithLooseCameraBounds(RegionFromId(63));
    GameTimeOfDayPause(true);
    GameSetMissionTimePaused(false);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_01_USER);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_03_ORDER1);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_07_CHAOS2);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyValla, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1130)), c_orderQueueReplace);
    libNtve_gf_PauseUnit(libStEx_gv_hERO_EnemyFalstad, true);
    libNtve_gf_ShowHideUnit(libStEx_gv_hERO_EnemyFalstad, false);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
    UnitSetState(libStEx_gv_hERO_PlayerUnit, c_unitStateFidget, false);
    gf__2B_CineSpawnMinionsforCutscene();
    auto86DD256F_g = UnitGroup("StormGameStartPathingBlocker", libCore_gv_cOMPUTER_Neutral, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto86DD256F_u = UnitGroupCount(auto86DD256F_g, c_unitCountAll);
    for (;; auto86DD256F_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto86DD256F_g, auto86DD256F_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_itUnit, false);
    }
    TriggerEnable(gt__2B_Abathur_Used_Symbiote, true);
    libGDHL_gv_heroAbathurSymbioteDontLockCameraforCutscene = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SoakLanesSetup_Init () {
    gt_SoakLanesSetup = TriggerCreate("gt_SoakLanesSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Soak Lanes Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_SoakLanesCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_xpRingLoc;

    // Automatic Variable Declarations
    const int autoCB8DBECA_n = 2;
    int autoCB8DBECA_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1123), 0.0, -1, 10.0, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SetTalentTreeSelectionPanelDismissAllowed(false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1132), 6.0, -1, 10.0, true);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00663", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyValla, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1130)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00630", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf__2B_CineFreezeAllMinions(libStEx_ge_FreezeOptions_Freeze);
    UnitIssueOrder(libStEx_gv_hERO_FriendlyValla, OrderTargetingUnit(AbilityCommand("attack", 0), gv__2B_CineXPUnit), c_orderQueueReplace);
    libStEx_gf_FreezeUnfreezeUnit(libStEx_ge_FreezeOptions_Freeze, libStEx_gv_hERO_FriendlyValla);
    lv_xpRingLoc = UnitGetPosition(gv__2B_CineXPUnit);
    libNtve_gf_AttachModelToUnit(gv__2B_CineXPUnit, "Storm_UI_Briefing_UnitSelect", "Ref_Center");
    gv__2B_CineXPReticle = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.700000");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor 255,255,0");
    Wait(1.0, c_timeGame);
    for (autoCB8DBECA_i = 1; autoCB8DBECA_i <= autoCB8DBECA_n; autoCB8DBECA_i += 1) {
        libNtve_gf_CreateModelAtPoint("XPRangeRing", lv_xpRingLoc);
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor 255,255,0");
        gv__2B_CineXPRing = libNtve_gf_ActorLastCreated();
        Wait(0.75, c_timeGame);
        libNtve_gf_KillModel(gv__2B_CineXPRing);
        gv__2B_CineXPRing = null;
        libStEx_gf_FreezeUnfreezeUnit(libStEx_ge_FreezeOptions_Unfrezze, gv__2B_CineXPUnit);
        Wait(0.5, c_timeGame);
    }
    libStEx_gf_FreezeUnfreezeUnit(libStEx_ge_FreezeOptions_Freeze, gv__2B_CineXPUnit);
    libStEx_gf_FreezeUnfreezeUnit(libStEx_ge_FreezeOptions_Unfrezze, libStEx_gv_hERO_FriendlyValla);
    UnitSetPropertyFixed(gv__2B_CineXPUnit, c_unitPropLife, 1.0);
    libNtve_gf_CreateModelAtPoint("XPRangeRing", UnitGetPosition(gv__2B_CineXPUnit));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor 255,255,0");
    gv__2B_CineXPRing = libNtve_gf_ActorLastCreated();
    while (true) {
        if ((UnitIsAlive(gv__2B_CineXPUnit) == false)) {
            break;
        }

        Wait(0.0625, c_timeGame);
    }
    TriggerExecute(gt__2B_CineXP, true, false);
    libStEx_gf_FreezeUnfreezeUnit(libStEx_ge_FreezeOptions_Freeze, libStEx_gv_hERO_FriendlyValla);
    Wait(1.5, c_timeGame);
    libNtve_gf_KillModel(gv__2B_CineXPRing);
    gv__2B_CineXPRing = null;
    TransmissionWait(TransmissionLastSent(), 0.0);
    gf__2B_CineFreezeAllMinions(libStEx_ge_FreezeOptions_Unfrezze);
    libStEx_gf_FreezeUnfreezeUnit(libStEx_ge_FreezeOptions_Unfrezze, libStEx_gv_hERO_FriendlyValla);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00631", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    while (true) {
        if ((UnitIsAlive(gv__2B_CineXPUnit2) == false)) {
            break;
        }

        Wait(0.125, c_timeGame);
    }
    Wait(0.125, c_timeGame);
    gv__1E_CineLevelUpUnit = libStEx_gv_hERO_FriendlyValla;
    TriggerExecute(gt__1E_CineLevelUp, true, false);
    Wait(2.0, c_timeGame);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1124), 0.0, -1, 10.0, true);
    Wait(0.5, c_timeGame);
    TriggerStop(gt__1E_CineLevelUp);
    if ((gv__2B_CineTextDialog != c_invalidDialogId)) {
        DialogDestroy(gv__2B_CineTextDialog);
        gv__2B_CineTextDialog = c_invalidDialogId;
    }

    gv__1E_CineLevelUpUnit = libStEx_gv_hERO_PlayerUnit;
    TriggerExecute(gt__1E_CineLevelUp, true, false);
    libNtve_gf_AttachModelToUnit(libStEx_gv_hERO_PlayerUnit, "Storm_Effect_HeroLevelUp", "Ref_Origin");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.500000");
    SoundPlayForPlayer(SoundLink("UI_Game_LevelUp_Team", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1118), 0.0, -1, 10.0, true);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00633", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(libStEx_gv_hERO_PlayerUnit, OrderTargetingUnit(AbilityCommand("AbathurSymbiote", 0), UnitGroupUnit(gv__2B_CineMinionsTop[1], 2)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    if ((gv__2B_CineSymbiote_Unit != null)) {
        UnitIssueOrder(gv__2B_CineSymbiote_Unit, Order(AbilityCommand("AbathurSymbioteCarapace", 0)), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
        UnitIssueOrder(gv__2B_CineSymbiote_Unit, Order(AbilityCommand("AbathurSymbioteSpikeBurst", 0)), c_orderQueueReplace);
    }

    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SoakLanesCinematic_Init () {
    gt_SoakLanesCinematic = TriggerCreate("gt_SoakLanesCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Soak Lanes Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_SoakLanesCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == false)) {
        lv_fadeDuration = 0.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SoakLanesCinematicEnd_Init () {
    gt_SoakLanesCinematicEnd = TriggerCreate("gt_SoakLanesCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Soak Lanes Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_SoakLanesCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup autoAF3C0792_g;
    int autoAF3C0792_u;
    unitgroup autoCD8B24E8_g;
    int autoCD8B24E8_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SetTalentTreeSelectionPanelDismissAllowed(true);
    RegionPlayableMapSet(RegionFromId(21));
    libGDHL_gv_heroAbathurSymbioteDontLockCameraforCutscene = false;
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_01_USER);
    UnitSetPosition(libStEx_gv_hERO_PlayerUnit, PointFromId(1578), false);
    UnitSetFacing(libStEx_gv_hERO_PlayerUnit, PointGetFacing(PointFromId(1578)), 0.0);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_03_ORDER1);
    UnitRemove(libStEx_gv_hERO_FriendlyValla);
    autoAF3C0792_g = gv__2B_CineMinions;
    autoAF3C0792_u = UnitGroupCount(autoAF3C0792_g, c_unitCountAll);
    for (;; autoAF3C0792_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoAF3C0792_g, autoAF3C0792_u);
        if (lv_itUnit == null) { break; }
        UnitRemove(lv_itUnit);
    }
    autoCD8B24E8_g = UnitGroup("StormGameStartPathingBlocker", libCore_gv_cOMPUTER_Neutral, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoCD8B24E8_u = UnitGroupCount(autoCD8B24E8_g, c_unitCountAll);
    for (;; autoCD8B24E8_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoCD8B24E8_g, autoCD8B24E8_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_itUnit, true);
    }
    TriggerStop(gt__2B_CineXP);
    TriggerStop(gt__1E_CineLevelUp);
    if ((gv__2B_CineTextDialog != c_invalidDialogId)) {
        DialogDestroy(gv__2B_CineTextDialog);
    }

    if ((gv__2B_CineXPRing != null)) {
        ActorSend(gv__2B_CineXPRing, "Destroy Immediate");
    }

    if ((gv__2B_CineXPReticle != null)) {
        ActorSend(gv__2B_CineXPRing, "Destroy Immediate");
    }

    TriggerEnable(gt__2B_Abathur_Used_Symbiote, false);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
    CameraPan(libStEx_gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(838)), 0.0, -1, 10.0, false);
    UnitSetState(libStEx_gv_hERO_PlayerUnit, c_unitStateFidget, true);
    UnitSelect(libStEx_gv_hERO_PlayerUnit, libStEx_gv_pLAYER_01_USER, true);
    UnitBehaviorAddPlayer(libStEx_gv_hERO_PlayerUnit, "HeroGenericPregameAbilitySuppression", libStEx_gv_pLAYER_01_USER, 1);
    UnitBehaviorAddPlayer(libStEx_gv_hERO_PlayerUnit, "HeroGenericPregameAbilityMinionSuppression", libStEx_gv_pLAYER_01_USER, 1);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_EnemyFalstad, PointFromId(1129), false);
    UnitSetFacing(libStEx_gv_hERO_EnemyFalstad, PointGetFacing(PointFromId(1129)), 0.0);
    UnitIssueOrder(libStEx_gv_hERO_EnemyFalstad, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_ShowHideUnit(libStEx_gv_hERO_EnemyFalstad, true);
    Wait(0.5, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, false);
    lv_fadeDuration = 1.5;
    gf_TurnCinematicCameraOnOffChallenge(libStEx_gv_pLAYER_01_USER, false);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libStEx_gf_CinematicModeTutorial(false, PlayerGroupAll(), lv_fadeDuration);
    libStEx_gf_GlobalCinematicSettingTutorial(false);
    gf_ChallengeBriefMode(false);
    Wait(lv_fadeDuration, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SoakLanesCleanup_Init () {
    gt_SoakLanesCleanup = TriggerCreate("gt_SoakLanesCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dragon Knight Q
//--------------------------------------------------------------------------------------------------
bool gt_DragonKnightQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_DragonKnightSetup, true, true);
    TriggerExecute(gt_DragonKnightCinematic, true, true);
    TriggerExecute(gt_DragonKnightCinematicEnd, true, true);
    TriggerExecute(gt_DragonKnightCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DragonKnightQ_Init () {
    gt_DragonKnightQ = TriggerCreate("gt_DragonKnightQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dragon Knight Setup
//--------------------------------------------------------------------------------------------------
bool gt_DragonKnightSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DragonKnightSetup_Init () {
    gt_DragonKnightSetup = TriggerCreate("gt_DragonKnightSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dragon Knight Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_DragonKnightCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_typeofCopiedUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1568), 0.0, -1, 10.0, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SetTalentTreeSelectionPanelDismissAllowed(false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(642), SoundLengthSync(SoundLink(ConversationDataGetSound("TutorialVO|Line00662", false), c_soundIndexAny)), -1, 10.0, true);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00662", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 3.0);
    libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_PlayerUnit, "AnimPlay Taunt Taunt 0 -1.000000 -1.000000 1.000000 AsTimeScale 0.000000 30");
    libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_FriendlyValla, "AnimPlay Taunt Taunt 0 -1.000000 -1.000000 1.000000 AsTimeScale 0.000000 30");
    libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_FriendlyThrall, "AnimPlay Taunt Taunt 0 -1.000000 -1.000000 1.000000 AsTimeScale 0.000000 30");
    libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_FriendlyMuradin, "AnimPlay Taunt Taunt 0 -1.000000 -1.000000 1.000000 AsTimeScale 0.000000 30");
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1575), 0.0, -1, 10.0, true);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1456), 3.0, -1, 10.0, true);
    Wait(0.75, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_EnemyArthas, "AnimPlay Taunt Taunt 0 -1.000000 -1.000000 1.000000 AsTimeScale 0.000000 30");
    libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_EnemySonya, "AnimPlay Taunt Taunt 0 -1.000000 -1.000000 1.000000 AsTimeScale 0.000000 30");
    libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_EnemyNazeebo, "AnimPlay Taunt Taunt 0 -1.000000 -1.000000 1.000000 AsTimeScale 0.000000 30");
    libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_EnemySylvanas, "AnimPlay Taunt Taunt 0 -1.000000 -1.000000 1.000000 AsTimeScale 0.000000 30");
    libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_EnemyKerrigan, "AnimPlay Taunt Taunt 0 -1.000000 -1.000000 1.000000 AsTimeScale 0.000000 30");
    Wait(2.75, c_timeGame);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1343), 0.0, -1, 10.0, true);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1576), (libCore_gf_ConvesationLineDuration("TutorialVO|Line00635") - 1.0), -1, 10.0, true);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_FriendlyMuradin, PointFromId(1485), false);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00635", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_DontShowPortrait, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 5.5);
    libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_PlayerUnit, "AnimPlay Spell Spell,E,Start 0 -1.000000 -1.000000 1.000000 AsTimeScale");
    TransmissionWait(TransmissionLastSent(), 3.0);
    libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_PlayerUnit, "Signal InvisibleModel");
    lv_typeofCopiedUnit = UnitGetType(libStEx_gv_hERO_FriendlyValla);
    libNtve_gf_CreateUnitsAtPoint2(1, lv_typeofCopiedUnit, c_unitCreateIgnorePlacement, libStEx_gv_pLAYER_01_USER, PointFromId(839), null);
    gv__2C_UltimateEvolutionClone = UnitLastCreated();
    UnitBehaviorAdd(gv__2C_UltimateEvolutionClone, "UltimateEvolutionBuild", libStEx_gv_hERO_PlayerUnit, 1);
    UnitBehaviorAdd(gv__2C_UltimateEvolutionClone, "UltimateEvolutionBuff", libStEx_gv_hERO_PlayerUnit, 1);
    TransmissionWait(TransmissionLastSent(), 0.0);
    UnitBehaviorSetDuration(gv__2C_UltimateEvolutionClone, "UltimateEvolutionTimedLife", 60.0);
    Wait(1.5, c_timeGame);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(707), 3.5, -1, 10.0, true);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00699", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv__2C_UltimateEvolutionClone, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1102)), c_orderQueueReplace);
    UnitIssueOrder(gv__2C_UltimateEvolutionClone, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1096)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv__2C_UltimateEvolutionClone, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(611)), c_orderQueueAddToEnd);
    Wait(0.5, c_timeGame);
    while (!((UnitTestState(gv__2C_UltimateEvolutionClone, c_unitStateIdle) == true))) {
        Wait(0.0625, c_timeGame);
    }
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv__2C_UltimateEvolutionClone, "AnimBracketStart BSD Stand,S,Ready,Start Stand,S,Ready Stand,S,Ready,End");
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(753), 0.0, -1, 10.0, true);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(838), SoundLengthSync(SoundLink(ConversationDataGetSound("TutorialVO|Line00636", false), c_soundIndexAny)), -1, 10.0, true);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00636", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DragonKnightCinematic_Init () {
    gt_DragonKnightCinematic = TriggerCreate("gt_DragonKnightCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dragon Knight Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_DragonKnightCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == false)) {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }

    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DragonKnightCinematicEnd_Init () {
    gt_DragonKnightCinematicEnd = TriggerCreate("gt_DragonKnightCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dragon Knight Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_DragonKnightCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    unit lv_itUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SetTalentTreeSelectionPanelDismissAllowed(true);
    RegionPlayableMapSet(RegionFromId(11));
    libStEx_gf_MoveUnit(libStEx_gv_hERO_PlayerUnit, PointFromId(1530), false);
    libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_PlayerUnit, "AnimClear Spell 0.000000");
    libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_PlayerUnit, "Signal RestoreModel");
    UnitSetFacing(libStEx_gv_hERO_PlayerUnit, PointGetFacing(PointFromId(1530)), 0.0);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_EnemySylvanas, PointFromId(1533), false);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_EnemyKerrigan, PointFromId(1172), false);
    libStEx_gf_MoveUnit(libStEx_gv_hERO_FriendlyMuradin, PointFromId(1485), false);
    if ((gv__2C_UltimateEvolutionClone != null)) {
        libStEx_gf_MoveUnit(gv__2C_UltimateEvolutionClone, PointFromId(1087), false);
        UnitRemove(gv__2C_UltimateEvolutionClone);
        gv__2C_UltimateEvolutionClone = null;
        libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_PlayerUnit, "AnimPlay Spell Spell,E,End 0 0.000000 -1.000000 1.000000 AsTimeScale");
        libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_PlayerUnit, "Signal RestoreModel");
    }

    if ((gv_cinematicCompleted == false)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
        CameraPan(libStEx_gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(838)), 0.0, -1, 10.0, false);
        gf_TurnCinematicCameraOnOffChallenge(libStEx_gv_pLAYER_01_USER, false);
        UnitSetFacing(libStEx_gv_hERO_EnemyArthas, PointGetFacing(PointFromId(1528)), 0.0);
        UnitSetFacing(libStEx_gv_hERO_EnemySonya, PointGetFacing(PointFromId(1529)), 0.0);
        UnitSetFacing(libStEx_gv_hERO_EnemyNazeebo, PointGetFacing(PointFromId(1527)), 0.0);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
        libStEx_gf_CinematicModeTutorial(false, PlayerGroupAll(), lv_fadeDuration);
        libStEx_gf_GlobalCinematicSettingTutorial(false);
        UnitSetState(libStEx_gv_hERO_PlayerUnit, c_unitStateFidget, true);
        UnitSelect(libStEx_gv_hERO_PlayerUnit, libStEx_gv_pLAYER_01_USER, true);
        gf_ChallengeBriefMode(false);
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 10.0, false);
        CameraPan(libStEx_gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(838)), lv_fadeDuration, -1, 10.0, false);
        gf_TurnCinematicCameraOnOffChallenge(libStEx_gv_pLAYER_01_USER, false);
        libStEx_gf_CinematicModeTutorial(false, PlayerGroupAll(), lv_fadeDuration);
        libStEx_gf_GlobalCinematicSettingTutorial(false);
        UnitSetState(libStEx_gv_hERO_PlayerUnit, c_unitStateFidget, true);
        UnitSelect(libStEx_gv_hERO_PlayerUnit, libStEx_gv_pLAYER_01_USER, true);
        gf_ChallengeBriefMode(false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DragonKnightCleanup_Init () {
    gt_DragonKnightCleanup = TriggerCreate("gt_DragonKnightCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MX_TutorialVet_Victory", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerExecute(gt_VictorySetupQ, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup Q
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetupQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libStEx_gf_ClearHintMessage();
    if ((libNtve_gf_PlayerInCinematicMode(libStEx_gv_pLAYER_01_USER) == false)) {
        libStEx_gf_CinematicModeTutorial(true, PlayerGroupAll(), 0.0);
        libStEx_gf_GlobalCinematicSettingTutorial(true);
        VisEnable(c_visTypeFog, true);
    }

    gf_TurnCinematicCameraOnOffChallenge(libStEx_gv_pLAYER_01_USER, true);
    gf_SetPlayableWithLooseCameraBounds(RegionFromId(63));
    GameTimeOfDayPause(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libGame_gf_MinionStartStopMinionSystem(false);
    gf_RemoveAllRegenGlobes();
    libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_spawnPoint = PointFromId(1166);
    libGame_gv_players[libStEx_gv_pLAYER_02_UTHER].lv_spawnPoint = PointFromId(1167);
    libGame_gv_players[libStEx_gv_pLAYER_03_ORDER1].lv_spawnPoint = PointFromId(1168);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_01_USER);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_02_UTHER);
    libStEx_gf_ResetHeroUnitforPlayer(libStEx_gv_pLAYER_03_ORDER1);
    libNtve_gf_MakeUnitUncommandable(libStEx_gv_hERO_PlayerUnit, true);
    UnitSetState(libStEx_gv_hERO_PlayerUnit, c_unitStateFidget, false);
    UnitBehaviorAdd(libStEx_gv_hERO_PlayerUnit, "GenericCloakRevealer", libStEx_gv_hERO_PlayerUnit, 1);
    UnitBehaviorRemove(libStEx_gv_hERO_PlayerUnit, "Mounted", 1);
    UnitBehaviorRemove(libStEx_gv_hERO_FriendlyUther, "Mounted", 1);
    UnitBehaviorRemove(libStEx_gv_hERO_FriendlyRaynor, "Mounted", 1);
    libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_PlayerUnit, "Signal GameWon");
    libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_FriendlyUther, "Signal GameWon");
    libNtve_gf_SendActorMessageToUnit(libStEx_gv_hERO_FriendlyRaynor, "Signal GameWon");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetupQ_Init () {
    gt_VictorySetupQ = TriggerCreate("gt_VictorySetupQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1255), 0.0, -1, 10.0, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoFromId(1259), SoundLengthSync(SoundLink(ConversationDataGetSound("TutorialVO|Line00637", false), c_soundIndexAny)), -1, 10.0, true);
    libCore_gf_SendTransmissionCampaign(libStEx_gv_hERO_FriendlyUther, "TutorialVO|Line00637", c_transmissionDurationAdd, 0.0, false, libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter, libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Test Trigger
//--------------------------------------------------------------------------------------------------
bool gt_AutoTestTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameIsTestMap(true) == true) && (GameTestConfigType() == 3)) {
        Wait(10.0, c_timeGame);
        ConsoleCommand("exit", true, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutoTestTrigger_Init () {
    gt_AutoTestTrigger = TriggerCreate("gt_AutoTestTrigger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Automation - Exit Out
//--------------------------------------------------------------------------------------------------
bool gt_AutomationExitOut_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libStEx_gf_IsthisanAutomatedPlaythrough() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    ConsoleCommand("exit", true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutomationExitOut_Init () {
    gt_AutomationExitOut = TriggerCreate("gt_AutomationExitOut_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_Temp
//--------------------------------------------------------------------------------------------------
bool gt_Debug_Temp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libStEx_gf_SendEventTutorialPlayerHitsReadyButton();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_Temp_Init () {
    gt_Debug_Temp = TriggerCreate("gt_Debug_Temp_Func");
    TriggerAddEventChatMessage(gt_Debug_Temp, c_playerAny, "-dt", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_InitPlayers_Init();
    gt_Init01Data_Init();
    gt_Init02Unit_Init();
    gt_Init03UI_Init();
    gt_Init04Environment_Init();
    gt_Init05Ally_Init();
    gt_Init06BaseRegions_Init();
    gt_HookupLaneData_Init();
    gt_HookupTownData_Init();
    gt_StormInitializeMap_Init();
    gt_StormHookupGlobalVariables_Init();
    gt_StormStartGame_Init();
    gt_DebugTemp_Init();
    gt_Debug_Challenges_Init();
    gt_Debug_DisplayChallengeDialog_Init();
    gt_Debug_ChallengeDialogButtonClickedTerror_Init();
    gt_Debug_ChallengeDialogButtonClickedMoshPit_Init();
    gt_Debug_ChallengeDialogButtonClickedKeepDefense_Init();
    gt_Debug_ChallengeDialogButtonClickedRoaming_Init();
    gt_Debug_ChallengeDialogButtonClickedHelpAlly_Init();
    gt_Debug_ChallengeDialogButtonClickedFinalFight_Init();
    gt_Debug_ChallengeDialogButtonClickedCancel_Init();
    gt_PlayerLeavesGameMessages_Init();
    gt_ChallengeStartHideScreenImage_Init();
    gt_AddReferenceCardMove_Init();
    gt_AddReferenceCardAttack_Init();
    gt_AddReferenceCardPenetratingRound_Init();
    gt_AddReferenceCardInspire_Init();
    gt_AddReferenceCardCamera_Init();
    gt_TwoLane_HookupLaneData_Init();
    gt_TwoLane_HookupTownData_Init();
    gt_TwoLane_HookupRegionData_Init();
    gt_TwoLane_InitializeLanes_Init();
    gt__1A_StartGameQ_Init();
    gt__1A_TalentsPanelFlashTalents_Init();
    gt__1A_TalentsPanelOpened_Init();
    gt__1A_TalentsPicked_Init();
    gt__1A_GraveGolemUtherFight_Init();
    gt__1A_TalentsPickedTransmissionQ_Init();
    gt__1A_GardenTerrorReadyButtonClicked_Init();
    gt__1A_GardenTerrorChallengePreReady_Init();
    gt__1A_GardenTerrorChallengeStart_Init();
    gt__1A_GardenTerrorChallengeSuccess_Init();
    gt__1A_GardenTerrorChallengeFail_Init();
    gt__1A_GardenTerrorChallengeBalance_Init();
    gt__1A_GardenTerrorChallengeCallbackPrep_Init();
    gt__1A_GardenTerrorChallengeCallbackStart_Init();
    gt__1A_GardenTerrorChallengeCallbackReset_Init();
    gt__1C_MoshPitQ_Init();
    gt__1C_TalentsPanelOpened_Init();
    gt__1C_MoshPitReadyButtonClicked_Init();
    gt__1C_MoshPitChallengePreReady_Init();
    gt__1C_MoshPitChallengeStart_Init();
    gt__1C_MoshPitChallengeEnableAIETCStunned_Init();
    gt__1C_MoshPitChallengeSuccess_Init();
    gt__1C_MoshPitChallengeFail_Init();
    gt__1C_MoshPitChallengeRainDamageTwoHeroes_Init();
    gt__1C_MoshPitChallengeBalance_Init();
    gt__1C_MoshPitChallengeCallbackPrep_Init();
    gt__1C_MoshPitChallengeCallbackStart_Init();
    gt__1C_MoshPitChallengeCallbackReset_Init();
    gt__1C_MoshPitChallengeAttackManager_Init();
    gt__1D_HookupJungleCreepData_Init();
    gt__1D_HookupTownData_Init();
    gt__1D_HookupLaneData_Init();
    gt__1D_AOEFountainUsed_Init();
    gt__1D_AOEFountainDeath_Init();
    gt__1D_AOERegenGlobeReminder_Init();
    gt__1D_AOERegenGlobeTransmissionQ_Init();
    gt__1D_AOERegenGlobePickedUp_Init();
    gt__1D_AOERegenGlobeDies_Init();
    gt__1D_AOEWaveTimerExpires_Init();
    gt__1D_AOEQ_Init();
    gt__1D_AOEReadyButtonClicked_Init();
    gt__1D_AOEChallengePreReady_Init();
    gt__1D_AOEChallengeStart_Init();
    gt__1D_AOEChallengeSuccess_Init();
    gt__1D_AOEChallengeFail_Init();
    gt__1D_AOEChallengeBalance_Init();
    gt__1D_AOEChallengeCallbackPrep_Init();
    gt__1D_AOEChallengeCallbackStart_Init();
    gt__1D_AOEChallengeCallbackReset_Init();
    gt__1E_GiveMULEAgain_Init();
    gt__1E_RoamingLevelMonitor_Init();
    gt__1E_RoamingQ_Init();
    gt__1E_RoamingReadyButtonClicked_Init();
    gt__1E_RoamingChallengePreReady_Init();
    gt__1E_RoamingChallengeLevelHighlight_Init();
    gt__1E_RoamingChallengeStart_Init();
    gt__1E_RoamingChallengeSuccess_Init();
    gt__1E_RoamingChallengeFail_Init();
    gt__1E_RoamingHeroKilled_Init();
    gt__1E_RoamingHeroTakesDamage_Init();
    gt__1E_RoamingTeamLevelUpLabel_Init();
    gt__1E_RoamingTipMount_Init();
    gt__1E_RoamingTipMountUnhighlightButton_Init();
    gt__1E_RoamingFountainUsed_Init();
    gt__1E_RoamingFoutainText_Init();
    gt__1E_RoamingChallengeBalance_Init();
    gt__1E_RoamingChallengeCallbackPrep_Init();
    gt__1E_RoamingChallengeCallbackStart_Init();
    gt__1E_RoamingChallengeCallbackReset_Init();
    gt__2A_EscapeLogic_Init();
    gt__2A_ZombieWallCancelLogic_Init();
    gt__2A_EscapeJainaKilled_Init();
    gt__2A_EscapeAbathurOutsideBase_Init();
    gt__2A_EscapeAbathurUsedNest_Init();
    gt__2A_EscapeQ_Init();
    gt__2A_EscapeReadyButtonClicked_Init();
    gt__2A_EscapeChallengePreReady_Init();
    gt__2A_EscapeChallengeStart_Init();
    gt__2A_EscapeChallengeSuccess_Init();
    gt__2A_EscapeChallengeFail_Init();
    gt__2A_EscapeChallengeBalance_Init();
    gt__2A_EscapeChallengeCallbackPrep_Init();
    gt__2A_EscapeChallengeCallbackStart_Init();
    gt__2A_EscapeChallengeCallbackReset_Init();
    gt__2B_FalstadChangeLane_Init();
    gt__2B_SoakLanesLevelMonitor_Init();
    gt__2B_AttackAbathur_Init();
    gt__2B_SoakLanesQ_Init();
    gt__2B_SoakLanesReadyButtonClicked_Init();
    gt__2B_SoakLanesChallengePreReady_Init();
    gt__2B_SoakLanesChallengeStart_Init();
    gt__2B_SoakLanesChallengeSuccess_Init();
    gt__2B_SoakLanesChallengeFail_Init();
    gt__2B_SoakLanesChallengeBalance_Init();
    gt__2B_SoakLanesChallengeCallbackPrep_Init();
    gt__2B_SoakLanesChallengeCallbackStart_Init();
    gt__2B_SoakLanesChallengeCallbackReset_Init();
    gt__2C_AIOn_Init();
    gt__2C_HeroDied_Init();
    gt__2C_Abathur_Used_Symbiote_Init();
    gt__2C_DragonKnightQ_Init();
    gt__2C_DragonKnightReadyButtonClicked_Init();
    gt__2C_DragonKnightChallengePreReady_Init();
    gt__2C_DragonKnightChallengeStart_Init();
    gt__2C_DragonKnightChallengeSuccess_Init();
    gt__2C_DragonKnightChallengeFail_Init();
    gt__2C_DragonKnightChallengeBalance_Init();
    gt__2C_DragonKnightChallengeCallbackPrep_Init();
    gt__2C_DragonKnightChallengeCallbackStart_Init();
    gt__2C_DragonKnightChallengeCallbackReset_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_MoshPitQ_Init();
    gt_MoshPitSetup_Init();
    gt_MoshPitCinematic_Init();
    gt_MoshPitCinematicEnd_Init();
    gt_MoshPitCleanup_Init();
    gt_AOEQ_Init();
    gt_AOESetup_Init();
    gt_AOECinematic_Init();
    gt_AOECinematicEnd_Init();
    gt_AOECleanup_Init();
    gt__1E_CinematicXPDisplay_Init();
    gt__1E_CineLevelUp_Init();
    gt_RoamingQ_Init();
    gt_RoamingSetup_Init();
    gt_RoamingCinematic_Init();
    gt_RoamingCinematicEnd_Init();
    gt_RoamingCleanup_Init();
    gt__2A_Abathur_Used_Symbiote_Init();
    gt_EscapeQ_Init();
    gt_EscapeSetup_Init();
    gt_EscapeCinematic_Init();
    gt_EscapeCinematicEnd_Init();
    gt_EscapeCleanup_Init();
    gt__2B_Abathur_Used_Symbiote_Init();
    gt__2B_CineXP_Init();
    gt_SoakLanesQ_Init();
    gt_SoakLanesSetup_Init();
    gt_SoakLanesCinematic_Init();
    gt_SoakLanesCinematicEnd_Init();
    gt_SoakLanesCleanup_Init();
    gt_DragonKnightQ_Init();
    gt_DragonKnightSetup_Init();
    gt_DragonKnightCinematic_Init();
    gt_DragonKnightCinematicEnd_Init();
    gt_DragonKnightCleanup_Init();
    gt_VictoryQ_Init();
    gt_VictorySetupQ_Init();
    gt_VictoryCinematic_Init();
    gt_AutoTestTrigger_Init();
    gt_AutomationExitOut_Init();
    gt_Debug_Temp_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomScript();
    InitTriggers();
}
