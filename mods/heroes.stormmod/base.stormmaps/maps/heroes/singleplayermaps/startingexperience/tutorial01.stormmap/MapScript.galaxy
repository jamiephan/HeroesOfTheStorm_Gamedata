//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Tutorial
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/MapMechanicsLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"
include "TriggerLibs/StartingExperienceLib"
include "TriggerLibs/SoundLib"
include "TriggerLibs/GameDataHelperLib"
include "TriggerLibs/SupportLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libCore_InitLib();
    libGame_InitLib();
    libMapM_InitLib();
    libAIAI_InitLib();
    libUIUI_InitLib();
    libStEx_InitLib();
    libSond_InitLib();
    libGDHL_InitLib();
    libSprt_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_HEALERTANK = 2;
const int gv_pLAYER_03_TANKDPS = 3;
const int gv_pLAYER_04_DEMONHUNTER = 4;
const int gv_pLAYER_05_NOVA = 5;
const int gv_pLAYER_06_ARTHAS = 6;
const int gv_pLAYER_07_TYCHUS = 7;
const int gv_pLAYER_08_GREYMANE = 8;
const int gv_pLAYER_09_STITCHES = 9;
const int gv_pLAYER_10_GULDAN = 10;
const fixed gv_castingAbilityCooldownDelay_C = 10.0;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unit gv_heroPlayer;
unit gv_heroHealerTank;
unit gv_heroNova;
unit gv_heroDemonHunter;
unit gv_heroTankDps;
bool gv_cinematicCompleted;
unitgroup gv_cinematicTempUnits;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
int gv_redPalacePing;
bool gv_enabled;
int[11] gv_heroDamageReduced;
unitgroup gv_vulnerableBuildings;
bool gv_intro_LanePaneLineCreated;
int[4] gv_intro_LanePathLine;
actor gv_intro_FountainReticle;
timer gv_minionWaveDelayTimer;
int gv_talentCurrentTransmission;
actor gv_frontLineReticleActor;
int gv_goToLanePing;
int gv_goToLanePathLine;
unitgroup[3] gv_xP_Minions;
bool gv_xP_CinematicOver;
int gv_xP_TopBarUIDlg;
int gv_xP_TopBarUIPanel;
bool gv_goToWatchtowerStarted;
int gv_goToWatchtowerPing;
actor gv_goToWatchtowerReticle;
int gv_goToWatchtowerTextTag;
int gv_campSiegeGiant;
bool gv_campSiegeGiantSuggested;
int gv_campSiegeGiantPing;
actor gv_campSiegeGiantReticle;
int gv_campSiegeGiantTextTag;
bool gv_campSiegeGiantClearStarted;
bool gv_campSiegeGiantCaptured;
unitgroup gv_siegeGiantsMercs;
int gv_siegeGiantsPing;
bool gv_escortMercsCompleted;
int gv_heroicButton;
bool gv_heroicUsed;
int gv_corePing;
int gv_attackedByTowerCount;
unitgroup gv_regenGlobes;
bool gv_talentPanelOpened;
timer gv_castingAbilityCooldownTimer;
timer gv_castingAbilityPenRoundTimer;
bool gv_suggestingPenRound;
bool gv_suggestingInspire;
bool gv_suggestingHyperion;
bool gv_abilitySuggestingPaused;
int gv_deathTimes;
bool gv_mountSuggested;
bool gv_mountUsed;
bool gv_rightClickReminded;
bool gv_frostBoltCasted;
bool gv_blizzardCasted;
bool gv_stormBoltCasted;
bool gv_dwarfTossCasted;
bool gv_lightEluneCasted;
bool gv_sentinelCasted;
bool gv_lunarFlareCasted;

void InitGlobals () {
    int init_i;

    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_redPalacePing = c_invalidPingId;
    gv_enabled = true;
    gv_vulnerableBuildings = UnitGroupEmpty();
    gv_minionWaveDelayTimer = TimerCreate();
    gv_talentCurrentTransmission = c_invalidTransmissionId;
    gv_goToLanePing = c_invalidPingId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_xP_Minions[init_i] = UnitGroupEmpty();
    }
    gv_xP_TopBarUIDlg = c_invalidDialogId;
    gv_xP_TopBarUIPanel = c_invalidDialogControlId;
    gv_goToWatchtowerPing = c_invalidPingId;
    gv_goToWatchtowerTextTag = c_textTagNone;
    gv_campSiegeGiantPing = c_invalidPingId;
    gv_campSiegeGiantTextTag = c_textTagNone;
    gv_siegeGiantsMercs = UnitGroupEmpty();
    gv_siegeGiantsPing = c_invalidPingId;
    gv_heroicButton = c_invalidDialogControlId;
    gv_corePing = c_invalidPingId;
    gv_regenGlobes = UnitGroupEmpty();
    gv_castingAbilityCooldownTimer = TimerCreate();
    gv_castingAbilityPenRoundTimer = TimerCreate();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
unitgroup gf_EnemyUnitsInRegion (int lp_player, region lp_region);
void gf_IntroCreateLanePathlines ();
void gf_IntroCreateLanePathline (int lp_lane);
void gf_IntroClearLanePathlines ();
void gf_TurnOnOffPerpetualCombat (bool lp_onOff);
void gf_BlinkExperienceBar (fixed lp_duration);
bool gf_EnemyNearby ();
void gf_TurnRightClickMonitorOnOff (bool lp_onOff);
void gf_DisplayRightClickCancelMessage ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_InitializeMap;
trigger gt_InitPlayers;
trigger gt_InitUnit;
trigger gt_InitUI;
trigger gt_ChangeAISettings;
trigger gt_HookupGlobalVariables;
trigger gt_HookupLaneData;
trigger gt_HookupJungleCreepData;
trigger gt_HookupTownData;
trigger gt_HookupRegionData;
trigger gt_HeroSafeGuard;
trigger gt_BuildingSafeGuard;
trigger gt_EnemyHeroLongerRespawn;
trigger gt_PalaceTakesNoDamageWithoutPlayerNearby;
trigger gt_DebugDistance;
trigger gt_DebugTemp;
trigger gt_DebugWatchtower;
trigger gt_DebugWipe;
trigger gt_DebugHint;
trigger gt_DebugTopBar;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCleanup;
trigger gt_IntroClearnupClearLanePathlines;
trigger gt_IntroRaynorIsCreated;
trigger gt_IntroCanceled;
trigger gt_IntroDisableWatchtowers;
trigger gt_FreezetheMinionwaves;
trigger gt_TalentsInstructionQ;
trigger gt_TalentsPanelOpened;
trigger gt_TalentsPicked;
trigger gt_TalentsPickedTransmissionQ;
trigger gt_ObjectivePickTalentCreate;
trigger gt_ObjectivePickTalentComplete;
trigger gt_MoveToFrontLineStartQ;
trigger gt_OpentheGatesTimerExpires;
trigger gt_PauseMercTimers;
trigger gt_ComeOutoftheBaseReminderQ;
trigger gt_UtherProximityMonitor;
trigger gt_ObjectiveComeToTheFrontlinesCreate;
trigger gt_ObjectiveComeToTheFrontlinesComplete;
trigger gt_XPQ;
trigger gt_XPSetup;
trigger gt_XPCinematic;
trigger gt_XPCleanup;
trigger gt_ExperienceGainedUnitDamaged;
trigger gt_HighlightExperienceBar;
trigger gt_StartEXPArrowFlash;
trigger gt_LevelUpQ;
trigger gt_ObjectiveLevelUpCreate;
trigger gt_ObjectiveLevelUpComplete;
trigger gt_ObjectiveUnlockTalentCreate;
trigger gt_ObjectiveUnlockTalentComplete;
trigger gt_DisplayTopBarUI;
trigger gt_HideTopBarUI;
trigger gt_GotoWatchtowerQ;
trigger gt_ActivateWatchtowers;
trigger gt_WatchtowerCapturedMonitor;
trigger gt_WatchtowerSuggestingPath;
trigger gt_ObjectiveCaptureWatchtowerCreate;
trigger gt_ObjectiveCaptureWatchtowerComplete;
trigger gt_MercCampStart;
trigger gt_MercCampCinematic;
trigger gt_MercCampCleanup;
trigger gt_ActivateMercCamps;
trigger gt_MercCampSuggestingPath;
trigger gt_MercCampCleared;
trigger gt_MercCampCaptured;
trigger gt_MercCampAggroed;
trigger gt_ObjectiveCaptureCampCreate;
trigger gt_ObjectiveCaptureCampComplete;
trigger gt_EscortMercsStart;
trigger gt_EscortMercsPing;
trigger gt_EscortMercsFortKilled;
trigger gt_EscortMercsSuggestingPath;
trigger gt_ObjectiveEscortMercsCreate;
trigger gt_ObjectiveEscortMercsComplete;
trigger gt_Level10gained;
trigger gt_CoreStart;
trigger gt_CoreKilled;
trigger gt_ObjectiveCoreCreate;
trigger gt_ObjectiveCoreComplete;
trigger gt_PlayerExitEarly;
trigger gt_PushCorewithTeamReminder;
trigger gt_ClearCoreReminderafterDelay;
trigger gt_AttackedByTower;
trigger gt_AttackedByTowerTransmissionQ;
trigger gt_HealingFountainProximityMonitor;
trigger gt_RegenGlobeReminder;
trigger gt_RegenGlobePickedUp;
trigger gt_RegenGlobeDies;
trigger gt_HealingReminderQ;
trigger gt_TalentsReminder;
trigger gt_TalentsReminderTalentsPanelOpened;
trigger gt_TalentsReminderTalentsPanelClosed;
trigger gt_CastingAbilitiesHint;
trigger gt_DeathReminder;
trigger gt_MountSuggestion;
trigger gt_MountUsed;
trigger gt_FrostboltTargetingModeOn;
trigger gt_FrostboltTargetingModeOff;
trigger gt_FrostboltTargetingModeUsed;
trigger gt_BlizzardTargetingModeOn;
trigger gt_BlizzardTargetingModeOff;
trigger gt_BlizzardTargetingModeUsed;
trigger gt_StormBoltTargetingModeOn;
trigger gt_StormBoltTargetingModeOff;
trigger gt_StormBoltTargetingModeUsed;
trigger gt_DwarfTossTargetingModeOn;
trigger gt_DwarfTossTargetingModeOff;
trigger gt_DwarfTossTargetingModeUsed;
trigger gt_LightEluneTargetingModeOn;
trigger gt_LightEluneTargetingModeOff;
trigger gt_LightEluneTargetingModeUsed;
trigger gt_SentinelTargetingModeOn;
trigger gt_SentinelTargetingModeOff;
trigger gt_SentinelTargetingModeUsed;
trigger gt_LunarFlareTargetingModeOn;
trigger gt_LunarFlareTargetingModeOff;
trigger gt_LunarFlareTargetingModeUsed;
trigger gt_ShortAutoTestTrigger;
trigger gt_AutomationStartupTriggerandCameraLock;
trigger gt_AutomationMovetoFrontline;
trigger gt_AutomationMovetoWatchtower;
trigger gt_AutomationMovetoMercCamp;
trigger gt_AutomationClaimMercCamp;
trigger gt_AutomationPushwithMercs;
trigger gt_AutomationExitOut;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
unitgroup gf_EnemyUnitsInRegion (int lp_player, region lp_region) {
    // Variable Declarations
    unitgroup lv_enemies;
    unit lv_itEnemy;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemies = UnitGroupEmpty();

    // Implementation
    lv_enemies = UnitGroupAlliance(lp_player, c_unitAllianceEnemy, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMerc) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    return lv_enemies;
}

void gf_IntroCreateLanePathlines () {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_intro_LanePaneLineCreated == true)) {
        return ;
    }

    gv_intro_LanePaneLineCreated = true;
    gf_IntroCreateLanePathline(1);
    gf_IntroCreateLanePathline(2);
    gf_IntroCreateLanePathline(3);
}

void gf_IntroCreateLanePathline (int lp_lane) {
    // Automatic Variable Declarations
    int auto08F105A4_val;

    // Implementation
    auto08F105A4_val = lp_lane;
    if (auto08F105A4_val == 1) {
        PathCreateForUnitType(PlayerGroupAll(), "FootmanMinion", libStEx_gv_pLAYER_11_ORDER, PointFromId(1129906521));
        PathSetDestinationPoint(PathLastCreated(), PointFromId(80));
        PathAddWayPoint(PathLastCreated(), PointFromId(2117));
        PathAddWayPoint(PathLastCreated(), PointFromId(2119));
        PathAddWayPoint(PathLastCreated(), PointFromId(2121));
        PathAddWayPoint(PathLastCreated(), PointFromId(581));
        PathAddWayPoint(PathLastCreated(), PointFromId(3551));
        PathAddWayPoint(PathLastCreated(), PointFromId(582));
        PathAddWayPoint(PathLastCreated(), PointFromId(53));
        PathAddWayPoint(PathLastCreated(), PointFromId(2134));
        PathAddWayPoint(PathLastCreated(), PointFromId(2131));
    }
    else if (auto08F105A4_val == 2) {
        PathCreateForUnitType(PlayerGroupAll(), "FootmanMinion", libStEx_gv_pLAYER_11_ORDER, PointFromId(597304232));
        PathSetDestinationPoint(PathLastCreated(), PointFromId(542));
        PathAddWayPoint(PathLastCreated(), PointFromId(2145));
        PathAddWayPoint(PathLastCreated(), PointFromId(2149));
        PathAddWayPoint(PathLastCreated(), PointFromId(2151));
        PathAddWayPoint(PathLastCreated(), PointFromId(824));
        PathAddWayPoint(PathLastCreated(), PointFromId(2157));
        PathAddWayPoint(PathLastCreated(), PointFromId(825));
        PathAddWayPoint(PathLastCreated(), PointFromId(2156));
        PathAddWayPoint(PathLastCreated(), PointFromId(2154));
        PathAddWayPoint(PathLastCreated(), PointFromId(34));
        PathAddWayPoint(PathLastCreated(), PointFromId(2153));
        PathAddWayPoint(PathLastCreated(), PointFromId(2148));
        PathAddWayPoint(PathLastCreated(), PointFromId(2147));
    }
    else if (auto08F105A4_val == 3) {
        PathCreateForUnitType(PlayerGroupAll(), "FootmanMinion", libStEx_gv_pLAYER_11_ORDER, PointFromId(984793316));
        PathSetDestinationPoint(PathLastCreated(), PointFromId(380));
        PathAddWayPoint(PathLastCreated(), PointFromId(372));
        PathAddWayPoint(PathLastCreated(), PointFromId(2132));
        PathAddWayPoint(PathLastCreated(), PointFromId(2135));
        PathAddWayPoint(PathLastCreated(), PointFromId(2139));
        PathAddWayPoint(PathLastCreated(), PointFromId(3552));
        PathAddWayPoint(PathLastCreated(), PointFromId(3550));
        PathAddWayPoint(PathLastCreated(), PointFromId(375));
        PathAddWayPoint(PathLastCreated(), PointFromId(2128));
        PathAddWayPoint(PathLastCreated(), PointFromId(376));
        PathAddWayPoint(PathLastCreated(), PointFromId(2125));
        PathAddWayPoint(PathLastCreated(), PointFromId(2122));
        PathAddWayPoint(PathLastCreated(), PointFromId(377));
        PathAddWayPoint(PathLastCreated(), PointFromId(2120));
        PathAddWayPoint(PathLastCreated(), PointFromId(2118));
        PathAddWayPoint(PathLastCreated(), PointFromId(2114));
    }
    else {
    }
    gv_intro_LanePathLine[lp_lane] = PathLastCreated();
    PathSetStepModel(PathLastCreated(), c_pathLocationWorld, "Assets\\Units\\Test\\InvisibleUnit\\InvisibleUnit.m3");
    PathSetLineTexture(PathLastCreated(), c_pathLocationWorld, "Assets\\Textures\\ui_tutorial_guidearrow.dds");
    PathSetLineTileLength(PathLastCreated(), c_pathLocationWorld, 2.578);
    PathSetLineWidth(PathLastCreated(), c_pathLocationWorld, 1.5);
    PathSetVisible(PathLastCreated(), c_pathLocationWorld, true);
    PathSetVisible(PathLastCreated(), c_pathLocationMinimap, false);
    PathSetStepMidpoint(PathLastCreated(), c_pathLocationWorld, 0.5);
}

void gf_IntroClearLanePathlines () {
    // Variable Declarations
    int lv_itIndex;

    // Automatic Variable Declarations
    const int autoED602987_ae = 3;
    const int autoED602987_ai = 1;

    // Variable Initialization

    // Implementation
    gv_intro_LanePaneLineCreated = false;
    lv_itIndex = 1;
    for ( ; ( (autoED602987_ai >= 0 && lv_itIndex <= autoED602987_ae) || (autoED602987_ai < 0 && lv_itIndex >= autoED602987_ae) ) ; lv_itIndex += autoED602987_ai ) {
        PathDestroy(gv_intro_LanePathLine[lv_itIndex]);
    }
}

trigger auto_gf_TurnOnOffPerpetualCombat_Trigger = null;
bool auto_gf_TurnOnOffPerpetualCombat_lp_onOff;

void gf_TurnOnOffPerpetualCombat (bool lp_onOff) {
    auto_gf_TurnOnOffPerpetualCombat_lp_onOff = lp_onOff;

    if (auto_gf_TurnOnOffPerpetualCombat_Trigger == null) {
        auto_gf_TurnOnOffPerpetualCombat_Trigger = TriggerCreate("auto_gf_TurnOnOffPerpetualCombat_TriggerFunc");
    }

    TriggerExecute(auto_gf_TurnOnOffPerpetualCombat_Trigger, false, false);
}

bool auto_gf_TurnOnOffPerpetualCombat_TriggerFunc (bool testConds, bool runActions) {
    bool lp_onOff = auto_gf_TurnOnOffPerpetualCombat_lp_onOff;

    // Variable Declarations
    unit lv_itUnit;
    int lv_itPlayer;

    // Automatic Variable Declarations
    bool auto515CD666_val;
    unitgroup autoDE2C79AD_g;
    int autoDE2C79AD_u;
    const int autoC56F634E_ae = libCore_gv_bALMaxPlayers;
    const int autoC56F634E_ai = 1;
    unitgroup auto7F7F8EED_g;
    int auto7F7F8EED_u;
    const int autoDCB4F9EC_ae = libCore_gv_bALMaxPlayers;
    const int autoDCB4F9EC_ai = 1;

    // Variable Initialization

    // Implementation
    auto515CD666_val = lp_onOff;
    if (auto515CD666_val == true) {
        libGame_gf_MinionStartStopMinionSpawnCycle(false);
        libGame_gf_MinionPauseUnpauseMinionScaling(true);
        TimerStart(gv_minionWaveDelayTimer, libCore_gv_bALMinionWaveInterval, false, c_timeGame);
        autoDE2C79AD_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterMinion), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDE2C79AD_u = UnitGroupCount(autoDE2C79AD_g, c_unitCountAll);
        for (;; autoDE2C79AD_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(autoDE2C79AD_g, autoDE2C79AD_u);
            if (lv_itUnit == null) { break; }
            libNtve_gf_ChangeUnitDamage(lv_itUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        }
        lv_itPlayer = 2;
        for ( ; ( (autoC56F634E_ai >= 0 && lv_itPlayer <= autoC56F634E_ae) || (autoC56F634E_ai < 0 && lv_itPlayer >= autoC56F634E_ae) ) ; lv_itPlayer += autoC56F634E_ai ) {
            libNtve_gf_ChangeUnitDamage(libGame_gv_players[lv_itPlayer].lv_heroUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        }
    }
    else if (auto515CD666_val == false) {
        auto7F7F8EED_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterMinion), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7F7F8EED_u = UnitGroupCount(auto7F7F8EED_g, c_unitCountAll);
        for (;; auto7F7F8EED_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(auto7F7F8EED_g, auto7F7F8EED_u);
            if (lv_itUnit == null) { break; }
            libNtve_gf_ChangeUnitDamage(lv_itUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
        }
        lv_itPlayer = 1;
        for ( ; ( (autoDCB4F9EC_ai >= 0 && lv_itPlayer <= autoDCB4F9EC_ae) || (autoDCB4F9EC_ai < 0 && lv_itPlayer >= autoDCB4F9EC_ae) ) ; lv_itPlayer += autoDCB4F9EC_ai ) {
            libNtve_gf_ChangeUnitDamage(libGame_gv_players[lv_itPlayer].lv_heroUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
        }
        libGame_gf_MinionPauseUnpauseMinionScaling(false);
        while (!((TimerGetRemaining(gv_minionWaveDelayTimer) == 0.0) && (libGame_gv_minionSpawningEnabled == true))) {
            Wait(0.5, c_timeGame);
        }
        libGame_gf_MinionStartStopMinionSpawnCycle(true);
    }
    else {
    }
    return true;
}

trigger auto_gf_BlinkExperienceBar_Trigger = null;
fixed auto_gf_BlinkExperienceBar_lp_duration;

void gf_BlinkExperienceBar (fixed lp_duration) {
    auto_gf_BlinkExperienceBar_lp_duration = lp_duration;

    if (auto_gf_BlinkExperienceBar_Trigger == null) {
        auto_gf_BlinkExperienceBar_Trigger = TriggerCreate("auto_gf_BlinkExperienceBar_TriggerFunc");
    }

    TriggerExecute(auto_gf_BlinkExperienceBar_Trigger, false, false);
}

bool auto_gf_BlinkExperienceBar_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_duration = auto_gf_BlinkExperienceBar_lp_duration;

    // Variable Declarations
    timer lv_vOTimer;
    fixed lv_xPValue;

    // Automatic Variable Declarations
    fixed autoC83482C2_at;

    // Variable Initialization
    lv_vOTimer = TimerCreate();

    // Implementation
    TimerStart(lv_vOTimer, lp_duration, false, c_timeGame);
    lv_xPValue = (libCore_gf_GetTotalXPForLevel((UnitXPGetCurrentLevel(gv_heroNova, null) + 1)) - (UnitGetPropertyFixed(libGame_gv_players[gv_pLAYER_05_NOVA].lv_heroUnit, c_unitPropXP, c_unitPropCurrent) + 5.0));
    TriggerExecute(gt_StartEXPArrowFlash, true, false);
    while ((TimerGetRemaining(lv_vOTimer) > 0.0)) {
        if ((gv_xP_CinematicOver == true)) {
            break;
        }

        libGame_gf_GrantXPToPlayer(lv_xPValue, gv_pLAYER_05_NOVA, libGame_ge_XPSources_Debug);
        autoC83482C2_at = 0;
        while (!((gv_xP_CinematicOver == true)) && autoC83482C2_at <= 0.5) {
            Wait(0.0625, c_timeGame);
            autoC83482C2_at = autoC83482C2_at + 0.0625;
        }
        libGame_gf_GrantXPToPlayer((-lv_xPValue), gv_pLAYER_05_NOVA, libGame_ge_XPSources_Debug);
        if ((gv_xP_CinematicOver == true)) {
            break;
        }

        Wait(0.3, c_timeGame);
    }
    DialogControlSendAnimationEvent(gv_xP_TopBarUIPanel, PlayerGroupAll(), "EXPFlashStop");
    DialogControlSendAnimationEvent(gv_xP_TopBarUIPanel, PlayerGroupAll(), "LevelFlashStopBlue");
    return true;
}

bool gf_EnemyNearby () {
    // Variable Declarations
    unitgroup lv_enemies;
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup autoB772BC88_g;
    int autoB772BC88_u;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();

    // Implementation
    lv_enemies = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_heroPlayer), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB772BC88_g = lv_enemies;
    autoB772BC88_u = UnitGroupCount(autoB772BC88_g, c_unitCountAll);
    for (;; autoB772BC88_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoB772BC88_g, autoB772BC88_u);
        if (lv_itUnit == null) { break; }
        if ((libGame_gf_TownGetTownStructurePresetFromUnit(lv_itUnit) == libGame_ge_TownStructureTypes_Wall)) {
            UnitGroupRemove(lv_enemies, lv_itUnit);
        }

    }
    return !(libNtve_gf_UnitGroupIsDead(lv_enemies));
}

void gf_TurnRightClickMonitorOnOff (bool lp_onOff) {
    // Automatic Variable Declarations
    string autoDDF72A44_val;
    string auto7D3CB46E_val;

    // Implementation
    if ((lp_onOff == true)) {
        auto7D3CB46E_val = libStEx_gf_TutorialHero();
        if (auto7D3CB46E_val == "Jaina") {
            TriggerEnable(gt_FrostboltTargetingModeOn, true);
            TriggerEnable(gt_BlizzardTargetingModeOn, true);
        }
        else if (auto7D3CB46E_val == "Muradin") {
            TriggerEnable(gt_StormBoltTargetingModeOn, true);
            TriggerEnable(gt_DwarfTossTargetingModeOn, true);
        }
        else if (auto7D3CB46E_val == "Tyrande") {
            TriggerEnable(gt_LightEluneTargetingModeOn, true);
            TriggerEnable(gt_SentinelTargetingModeOn, true);
            TriggerEnable(gt_LunarFlareTargetingModeOn, true);
        }
        else {
        }
    }
    else {
        autoDDF72A44_val = libStEx_gf_TutorialHero();
        if (autoDDF72A44_val == "Jaina") {
            TriggerEnable(gt_FrostboltTargetingModeOn, false);
            TriggerEnable(gt_FrostboltTargetingModeOff, false);
            TriggerEnable(gt_FrostboltTargetingModeUsed, false);
            TriggerEnable(gt_BlizzardTargetingModeOn, false);
            TriggerEnable(gt_BlizzardTargetingModeOff, false);
            TriggerEnable(gt_BlizzardTargetingModeUsed, false);
        }
        else if (autoDDF72A44_val == "Muradin") {
            TriggerEnable(gt_StormBoltTargetingModeOn, false);
            TriggerEnable(gt_StormBoltTargetingModeOff, false);
            TriggerEnable(gt_StormBoltTargetingModeUsed, false);
            TriggerEnable(gt_DwarfTossTargetingModeOn, false);
            TriggerEnable(gt_DwarfTossTargetingModeOff, false);
            TriggerEnable(gt_DwarfTossTargetingModeUsed, false);
        }
        else if (autoDDF72A44_val == "Tyrande") {
            TriggerEnable(gt_LightEluneTargetingModeOn, false);
            TriggerEnable(gt_LightEluneTargetingModeOff, false);
            TriggerEnable(gt_LightEluneTargetingModeUsed, false);
            TriggerEnable(gt_SentinelTargetingModeOn, false);
            TriggerEnable(gt_SentinelTargetingModeOff, false);
            TriggerEnable(gt_SentinelTargetingModeUsed, false);
            TriggerEnable(gt_LunarFlareTargetingModeOn, false);
            TriggerEnable(gt_LunarFlareTargetingModeOff, false);
            TriggerEnable(gt_LunarFlareTargetingModeUsed, false);
        }
        else {
        }
    }
}

void gf_DisplayRightClickCancelMessage () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_rightClickReminded == true)) {
        return ;
    }

    gf_TurnRightClickMonitorOnOff(false);
    libStEx_gf_DisplayVOMessageGamePaused(StringExternal("Param/Value/85F3B468"), libStEx_ge_SE_VOMessageType_blank, true);
    gv_rightClickReminded = true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Map
//--------------------------------------------------------------------------------------------------
bool gt_InitializeMap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libAIAI_gt_IncludeAI, true, false);
    TriggerExecute(libGame_gt_IncludeGame, true, false);
    TriggerExecute(libGDHL_gt_IncludeGameDataHelper, true, false);
    TriggerExecute(libMapM_gt_IncludeMapMechanics, true, false);
    TriggerExecute(libSond_gt_IncludeSound, true, false);
    TriggerExecute(libSprt_gt_IncludeSupport, true, false);
    TriggerExecute(libUIUI_gt_IncludeUI, true, false);
    TriggerExecute(gt_HookupGlobalVariables, true, false);
    TriggerExecute(gt_HookupLaneData, true, false);
    TriggerExecute(gt_HookupJungleCreepData, true, false);
    TriggerExecute(gt_HookupTownData, true, false);
    TriggerExecute(gt_HookupRegionData, true, false);
    libCore_gv_sYSTowns = true;
    libCore_gv_sYSJungleCreepCamps = true;
    libCore_gv_sYSJungleWatchTowers = true;
    libCore_gv_sYSTowerAI = true;
    libCore_gv_sYSMinionAI = true;
    libCore_gv_sYSTalentsOn = true;
    libCore_gv_sYSGameMode = libCore_ge_GameModes_Tutorial1;
    libGame_gv_gateTimerReady = false;
    libGame_gv_minion_CapCatapults = true;
    SetTalentsEnabled(false);
    libNtve_gf_CreateActorAtPoint("MMController", RegionGetCenter(RegionEntireMap()));
    libMapM_gv_mapMechanicControllerActor = libNtve_gf_ActorLastCreated();
    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal MM1Off");
    libGame_gv_heroSpawnReady = false;
    libGame_gv_pickingHeroesCallback = gt_InitPlayers;
    TriggerExecute(libCore_gt_InitializeStormMod, true, false);
    if ((GameTestConfigType() == 3)) {
        libGame_gf_PickingHeroesForPlayers();
    }

    TriggerExecute(gt_InitUnit, true, false);
    TriggerExecute(gt_InitUI, true, false);
    TriggerExecute(gt_IntroQ, true, false);
    Wait(1.0, c_timeGame);
    libGame_gv_heroSpawnReady = true;
    libCore_gf_DataAnnouncerVOSetDefaultAnnouncerForPlayerGroup(PlayerGroupAll(), "RavenLord");
    TriggerExecute(gt_AutomationStartupTriggerandCameraLock, true, false);
    TriggerExecute(gt_ShortAutoTestTrigger, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeMap_Init () {
    gt_InitializeMap = TriggerCreate("gt_InitializeMap_Func");
    TriggerAddEventMapInit(gt_InitializeMap);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Players
//--------------------------------------------------------------------------------------------------
bool gt_InitPlayers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    string auto134F54AD_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_players[gv_pLAYER_01_USER].lv_heroIndex = libCore_gf_GetIndexFromHero(libStEx_gf_TutorialHero());
    auto134F54AD_val = libStEx_gf_TutorialHero();
    if (auto134F54AD_val == "Jaina") {
        libGame_gv_players[gv_pLAYER_02_HEALERTANK].lv_heroIndex = libCore_gf_GetIndexFromHero("Tyrande");
        libGame_gv_players[gv_pLAYER_03_TANKDPS].lv_heroIndex = libCore_gf_GetIndexFromHero("Muradin");
    }
    else if (auto134F54AD_val == "Tyrande") {
        libGame_gv_players[gv_pLAYER_02_HEALERTANK].lv_heroIndex = libCore_gf_GetIndexFromHero("Muradin");
        libGame_gv_players[gv_pLAYER_03_TANKDPS].lv_heroIndex = libCore_gf_GetIndexFromHero("Jaina");
    }
    else if (auto134F54AD_val == "Muradin") {
        libGame_gv_players[gv_pLAYER_02_HEALERTANK].lv_heroIndex = libCore_gf_GetIndexFromHero("Tyrande");
        libGame_gv_players[gv_pLAYER_03_TANKDPS].lv_heroIndex = libCore_gf_GetIndexFromHero("Jaina");
    }
    else {
    }
    libGame_gv_players[gv_pLAYER_04_DEMONHUNTER].lv_heroIndex = libCore_gf_GetIndexFromHero("DemonHunter");
    libGame_gv_players[gv_pLAYER_05_NOVA].lv_heroIndex = libCore_gf_GetIndexFromHero("Nova");
    libGame_gv_players[gv_pLAYER_06_ARTHAS].lv_heroIndex = libCore_gf_GetIndexFromHero("Arthas");
    libGame_gv_players[gv_pLAYER_07_TYCHUS].lv_heroIndex = libCore_gf_GetIndexFromHero("Tychus");
    libGame_gv_players[gv_pLAYER_08_GREYMANE].lv_heroIndex = libCore_gf_GetIndexFromHero("Greymane");
    libGame_gv_players[gv_pLAYER_09_STITCHES].lv_heroIndex = libCore_gf_GetIndexFromHero("Stitches");
    libGame_gv_players[gv_pLAYER_10_GULDAN].lv_heroIndex = libCore_gf_GetIndexFromHero("Guldan");
    if ((libStEx_gf_TutorialHero() != "Tyrande")) {
        CatalogFieldValueSet(c_gameCatalogAbil, "TyrandeLightofElune", "Cost.Vital[" + IntToString(0) + "]", gv_pLAYER_02_HEALERTANK, "30");
        CatalogFieldValueSet(c_gameCatalogAbil, "TyrandeLightofElune", "Cost.Cooldown.TimeUse", gv_pLAYER_02_HEALERTANK, "6");
        CatalogFieldValueSet(c_gameCatalogEffect, "LightofEluneHealTarget", "RechargeVitalRate", gv_pLAYER_02_HEALERTANK, "400");
    }

    TriggerExecute(gt_ChangeAISettings, true, false);
    libAIAI_gf_HeroAIDisableAIForPlayer(gv_pLAYER_02_HEALERTANK);
    libAIAI_gf_HeroAIDisableAIForPlayer(gv_pLAYER_04_DEMONHUNTER);
    libAIAI_gf_HeroAIDisableAIForPlayer(gv_pLAYER_05_NOVA);
    libAIAI_gf_HeroAIDisableAIForPlayer(gv_pLAYER_03_TANKDPS);
    libGame_gv_heroPickDone = true;
    libNtve_gf_SetUpgradeLevelForPlayer(libStEx_gv_pLAYER_02_UTHER, "IsPlayer3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitPlayers_Init () {
    gt_InitPlayers = TriggerCreate("gt_InitPlayers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Unit
//--------------------------------------------------------------------------------------------------
bool gt_InitUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    unit lv_indexUnit;
    fixed lv_life;

    // Automatic Variable Declarations
    unitgroup auto6E423F28_g;
    int auto6E423F28_u;
    unitgroup auto9CDF4E89_g;
    int auto9CDF4E89_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(346)), "Signal PlayBuild");
    while (!((UnitIsAlive(libGame_gv_players[gv_pLAYER_01_USER].lv_heroUnit) == true))) {
        Wait(0.0625, c_timeGame);
    }
    gv_heroPlayer = libGame_gv_players[gv_pLAYER_01_USER].lv_heroUnit;
    UnitBehaviorAddPlayer(gv_heroPlayer, "BetterManaRegen", gv_pLAYER_01_USER, 1);
    while (!((UnitIsAlive(libGame_gv_players[gv_pLAYER_02_HEALERTANK].lv_heroUnit) == true) && (UnitIsAlive(libGame_gv_players[gv_pLAYER_04_DEMONHUNTER].lv_heroUnit) == true) && (UnitIsAlive(libGame_gv_players[gv_pLAYER_05_NOVA].lv_heroUnit) == true) && (UnitIsAlive(libGame_gv_players[gv_pLAYER_03_TANKDPS].lv_heroUnit) == true))) {
        Wait(0.0625, c_timeGame);
    }
    gv_heroHealerTank = libGame_gv_players[gv_pLAYER_02_HEALERTANK].lv_heroUnit;
    UnitBehaviorAddPlayer(gv_heroPlayer, "BetterManaRegen", gv_pLAYER_02_HEALERTANK, 1);
    gv_heroDemonHunter = libGame_gv_players[gv_pLAYER_04_DEMONHUNTER].lv_heroUnit;
    gv_heroNova = libGame_gv_players[gv_pLAYER_05_NOVA].lv_heroUnit;
    gv_heroTankDps = libGame_gv_players[gv_pLAYER_03_TANKDPS].lv_heroUnit;
    UnitBehaviorAddPlayer(gv_heroPlayer, "BetterManaRegen", gv_pLAYER_03_TANKDPS, 1);
    while (!((UnitIsAlive(libGame_gv_players[gv_pLAYER_06_ARTHAS].lv_heroUnit) == true) && (UnitIsAlive(libGame_gv_players[gv_pLAYER_07_TYCHUS].lv_heroUnit) == true) && (UnitIsAlive(libGame_gv_players[gv_pLAYER_08_GREYMANE].lv_heroUnit) == true) && (UnitIsAlive(libGame_gv_players[gv_pLAYER_09_STITCHES].lv_heroUnit) == true) && (UnitIsAlive(libGame_gv_players[gv_pLAYER_10_GULDAN].lv_heroUnit) == true))) {
        Wait(1.0, c_timeGame);
    }
    libAIAI_gf_HeroAIEnableAIForPlayer(gv_pLAYER_06_ARTHAS);
    libAIAI_gf_HeroAIEnableAIForPlayer(gv_pLAYER_07_TYCHUS);
    libAIAI_gf_HeroAIEnableAIForPlayer(gv_pLAYER_08_GREYMANE);
    libAIAI_gf_HeroAIEnableAIForPlayer(gv_pLAYER_09_STITCHES);
    libAIAI_gf_HeroAIEnableAIForPlayer(gv_pLAYER_10_GULDAN);
    libCore_gv_sYSXPOn = false;
    auto6E423F28_g = UnitGroup(null, libCore_gv_cOMPUTER_TeamOrder, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6E423F28_u = UnitGroupCount(auto6E423F28_g, c_unitCountAll);
    for (;; auto6E423F28_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto6E423F28_g, auto6E423F28_u);
        if (lv_indexUnit == null) { break; }
        libNtve_gf_ChangeUnitDamage(lv_indexUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    }
    auto9CDF4E89_g = UnitGroup(null, libCore_gv_cOMPUTER_TeamChaos, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9CDF4E89_u = UnitGroupCount(auto9CDF4E89_g, c_unitCountAll);
    for (;; auto9CDF4E89_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto9CDF4E89_g, auto9CDF4E89_u);
        if (lv_indexUnit == null) { break; }
        libNtve_gf_ChangeUnitDamage(lv_indexUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitUnit_Init () {
    gt_InitUnit = TriggerCreate("gt_InitUnit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init UI
//--------------------------------------------------------------------------------------------------
bool gt_InitUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_miniMapPanel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_miniMapPanel = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHelpMenuButton, false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MinimapPanel");
    lv_miniMapPanel = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 0, -60);
    DialogControlHookup(lv_miniMapPanel, c_triggerControlTypePanel, "Minimap");
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_miniMapPanel, c_anchorLeft, 30, 0);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ObjectivePanel");
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, lv_miniMapPanel, c_anchorTopRight, 0, 10);
    libStEx_gf_HotkeyProfile_LoadSmartCommandMouseButtonProfile(gv_pLAYER_01_USER);
    DialogControlHookup(libUIUI_gv_notificationDisplay.lv_mainPanel, c_triggerControlTypePanel, "KillCounterTemplate");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetEnabled(libUIUI_gv_uIGameUIHandles.lv_targetInfoPanel, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitUI_Init () {
    gt_InitUI = TriggerCreate("gt_InitUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change AI Settings
//--------------------------------------------------------------------------------------------------
bool gt_ChangeAISettings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int auto1410B679_ae = 5;
    const int auto1410B679_ai = 1;
    const int autoBC54A7AB_ae = 10;
    const int autoBC54A7AB_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itPlayer = 2;
    for ( ; ( (auto1410B679_ai >= 0 && lv_itPlayer <= auto1410B679_ae) || (auto1410B679_ai < 0 && lv_itPlayer >= auto1410B679_ae) ) ; lv_itPlayer += auto1410B679_ai ) {
        if (((libGame_gv_players[lv_itPlayer].lv_heroIndex == libCore_gf_GetIndexFromHero("Tyrande")) || (libGame_gv_players[lv_itPlayer].lv_heroIndex == libCore_gf_GetIndexFromHero("Muradin")))) {
            libAIAI_gf_HeroAISetAIDifficultyLevel(lv_itPlayer, libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly);
        }
        else {
            libAIAI_gf_HeroAISetAIDifficultyLevel(lv_itPlayer, libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally);
        }
    }
    lv_itPlayer = 6;
    for ( ; ( (autoBC54A7AB_ai >= 0 && lv_itPlayer <= autoBC54A7AB_ae) || (autoBC54A7AB_ai < 0 && lv_itPlayer >= autoBC54A7AB_ae) ) ; lv_itPlayer += autoBC54A7AB_ai ) {
        libAIAI_gf_HeroAISetAIDifficultyLevel(lv_itPlayer, libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy);
        libAIAI_gf_HeroAIEnableTalentPicking(lv_itPlayer, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeAISettings_Init () {
    gt_ChangeAISettings = TriggerCreate("gt_ChangeAISettings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hookup Global Variables
//--------------------------------------------------------------------------------------------------
bool gt_HookupGlobalVariables_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_mAPMapStringID = "Tutorial1";
    libCore_gv_mAPMapImage = "CustomMiniMap.tga";
    libCore_gv_mAPFlyerOutOfBoundsRegion = RegionFromId(28);
    libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core = UnitFromId(210);
    libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core = UnitFromId(346);
    libCore_gv_mAPOrderBaseRegion = RegionFromId(5);
    libCore_gv_mAPChaosBaseRegion = RegionFromId(1);
    libCore_gv_mAPExploredRegion = RegionFromId(10);
    libCore_gv_mAPMapSoundtrack[0] = "MX_RavensCourt_Intro";
    libCore_gv_mAPMapSoundtrack[1] = "MX_RavensCourt_LVL_1";
    libCore_gv_mAPMapSoundtrack[2] = "MX_RavensCourt_LVL_10";
    libCore_gv_mAPMapSoundtrack[3] = "MX_RavensCourt_LVL_20";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HookupGlobalVariables_Init () {
    gt_HookupGlobalVariables = TriggerCreate("gt_HookupGlobalVariables_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hookup Lane Data
//--------------------------------------------------------------------------------------------------
bool gt_HookupLaneData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_structureCount;
    int lv_waypointCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_laneCount += 1;
    lv_structureCount = 0;
    lv_waypointCount = 0;
    libGame_gv_laneData[libGame_gv_laneCount].lv_laneName = StringExternal("Param/Value/55B57A74");
    lv_structureCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_orderStructures[lv_structureCount] = UnitFromId(210);
    libGame_gv_laneData[libGame_gv_laneCount].lv_chaosStructures[lv_structureCount] = UnitFromId(346);
    libGame_gv_laneData[libGame_gv_laneCount].lv_structureCount = lv_structureCount;
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2350);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(540);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(853);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(579);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2117);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2119);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(580);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2121);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2124);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2126);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(581);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2127);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(66);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(3549);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(3551);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2140);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2138);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(582);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2136);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(53);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2134);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2131);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(78);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2130);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(80);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2351);
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypointCount = lv_waypointCount;
    libGame_gv_laneCount += 1;
    lv_structureCount = 0;
    lv_waypointCount = 0;
    libGame_gv_laneData[libGame_gv_laneCount].lv_laneName = StringExternal("Param/Value/3D4242A8");
    lv_structureCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_orderStructures[lv_structureCount] = UnitFromId(210);
    libGame_gv_laneData[libGame_gv_laneCount].lv_chaosStructures[lv_structureCount] = UnitFromId(346);
    libGame_gv_laneData[libGame_gv_laneCount].lv_structureCount = lv_structureCount;
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2350);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(536);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2141);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(822);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2145);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2149);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(823);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2144);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2151);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2152);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(824);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2155);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2157);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(825);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2156);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2154);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(34);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2153);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2150);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2143);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(37);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2148);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2147);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(112);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2142);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(542);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2351);
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypointCount = lv_waypointCount;
    libGame_gv_laneCount += 1;
    lv_structureCount = 0;
    lv_waypointCount = 0;
    libGame_gv_laneData[libGame_gv_laneCount].lv_laneName = StringExternal("Param/Value/29840A3F");
    lv_structureCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_orderStructures[lv_structureCount] = UnitFromId(210);
    libGame_gv_laneData[libGame_gv_laneCount].lv_chaosStructures[lv_structureCount] = UnitFromId(346);
    libGame_gv_laneData[libGame_gv_laneCount].lv_structureCount = lv_structureCount;
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2350);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(371);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2129);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(372);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2132);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2133);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(373);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2135);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(374);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2137);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2139);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(3552);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(3550);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(375);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2128);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(376);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2125);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2123);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2122);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(377);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2120);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2118);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(378);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2114);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(380);
    lv_waypointCount += 1;
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypoints[lv_waypointCount] = PointFromId(2351);
    libGame_gv_laneData[libGame_gv_laneCount].lv_waypointCount = lv_waypointCount;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HookupLaneData_Init () {
    gt_HookupLaneData = TriggerCreate("gt_HookupLaneData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hookup Jungle Creep Data
//--------------------------------------------------------------------------------------------------
bool gt_HookupJungleCreepData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_junglecamp;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_junglecamp += 1;
    gv_campSiegeGiant = lv_junglecamp;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampType = libMapM_ge_JungleCampTypes_MercCamp;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampDefenderType = libMapM_ge_JungleCampDefenderTypes_SiegeGiants;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampCaptainSpawnPoint = PointFromId(180);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[1] = PointFromId(177);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[2] = PointFromId(178);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderLeashRegion = RegionFromId(24);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataMercSpawnType = libMapM_ge_JungleCampMercTypes_SiegeGiants;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamOrderIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamChaosIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercOrderMercCampPathing[1].lv_waypoint = PointFromId(580);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercChaosMercCampPathing[1].lv_waypoint = PointFromId(2119);
    lv_junglecamp += 1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampType = libMapM_ge_JungleCampTypes_MercCamp;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampDefenderType = libMapM_ge_JungleCampDefenderTypes_Knights;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampCaptainSpawnPoint = PointFromId(1367);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[1] = PointFromId(1047);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[2] = PointFromId(4052);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[3] = PointFromId(878);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[4] = PointFromId(3963);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderLeashRegion = RegionFromId(26);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataMercSpawnType = libMapM_ge_JungleCampMercTypes_Ogres;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamOrderIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamChaosIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercOrderMercCampPathing[1].lv_waypoint = PointFromId(37);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercChaosMercCampPathing[1].lv_waypoint = PointFromId(37);
    lv_junglecamp += 1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampType = libMapM_ge_JungleCampTypes_MercCamp;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampDefenderType = libMapM_ge_JungleCampDefenderTypes_SiegeGiants;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampCaptainSpawnPoint = PointFromId(401);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[1] = PointFromId(382);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[2] = PointFromId(221);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderLeashRegion = RegionFromId(32);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataMercSpawnType = libMapM_ge_JungleCampMercTypes_SiegeGiants;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamOrderIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamChaosIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercOrderMercCampPathing[1].lv_waypoint = PointFromId(2120);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercChaosMercCampPathing[1].lv_waypoint = PointFromId(377);
    lv_junglecamp += 1;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampType = libMapM_ge_JungleCampTypes_MercCamp;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampDefenderType = libMapM_ge_JungleCampDefenderTypes_Knights;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataCampCaptainSpawnPoint = PointFromId(1440);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[1] = PointFromId(1126);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[2] = PointFromId(4054);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[3] = PointFromId(1045);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderSpawnPoints[4] = PointFromId(3964);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataDefenderLeashRegion = RegionFromId(18);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mapDataMercSpawnType = libMapM_ge_JungleCampMercTypes_Ogres;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamOrderIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercMercCampHasSingleWaypoint[libGame_gv_teamChaosIndex_C] = true;
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercOrderMercCampPathing[1].lv_waypoint = PointFromId(823);
    libMapM_gv_jungleCreepCamps[lv_junglecamp].lv_mercChaosMercCampPathing[1].lv_waypoint = PointFromId(823);
    libMapM_gv_jungleNumberOfCreepCamps = lv_junglecamp;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HookupJungleCreepData_Init () {
    gt_HookupJungleCreepData = TriggerCreate("gt_HookupJungleCreepData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hookup Town Data
//--------------------------------------------------------------------------------------------------
bool gt_HookupTownData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lane;
    int lv_town;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lane = 1;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(2);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = true;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(4);
    lv_lane = 2;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(12);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = true;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(13);
    lv_lane = 3;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(16);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = true;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(8);
    lv_lane = 1;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(17);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = true;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(21);
    lv_lane = 2;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(30);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = true;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(22);
    lv_lane = 3;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(29);
    libGame_gv_townTownData[lv_town].lv_makesCoreVulnerableWhenKilled = true;
    lv_town += 1;
    libGame_gv_townTownData[lv_town].lv_lane = lv_lane;
    libGame_gv_townTownData[lv_town].lv_owner = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_townTownData[lv_town].lv_townRegion = RegionFromId(33);
    libGame_gv_townTownCount = lv_town;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HookupTownData_Init () {
    gt_HookupTownData = TriggerCreate("gt_HookupTownData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hookup Region Data
//--------------------------------------------------------------------------------------------------
bool gt_HookupRegionData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gf_MapSetRepulseRegion(libGame_gv_teamOrderIndex_C, RegionFromId(3), PointFromId(638), PointFromId(4101), PointFromId(4100), null);
    libMapM_gf_MapSetRepulseRegion(libGame_gv_teamChaosIndex_C, RegionFromId(6), PointFromId(1034), PointFromId(4096), PointFromId(4097), null);
    libMapM_gf_MapSetSafeRegion(libGame_gv_teamOrderIndex_C, RegionFromId(3));
    libMapM_gf_MapSetSafeRegion(libGame_gv_teamChaosIndex_C, RegionFromId(6));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HookupRegionData_Init () {
    gt_HookupRegionData = TriggerCreate("gt_HookupRegionData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Safe Guard
//--------------------------------------------------------------------------------------------------
bool gt_HeroSafeGuard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    if ((lv_player == gv_pLAYER_01_USER)) {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 65.0)) {
            if ((gv_heroDamageReduced[lv_player] > 0)) {
                libNtve_gf_ChangeUnitDamage(EventUnit(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
                gv_heroDamageReduced[lv_player] = 0;
            }

        }
        else if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 25.0)) {
            if ((gv_heroDamageReduced[lv_player] != 1)) {
                libNtve_gf_ChangeUnitDamage(EventUnit(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega);
                gv_heroDamageReduced[lv_player] = 1;
            }

        }
        else if (true) {
            if ((gv_heroDamageReduced[lv_player] != 2)) {
                libNtve_gf_ChangeUnitDamage(EventUnit(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
                gv_heroDamageReduced[lv_player] = 2;
            }

        }
    }
    else if (((EventUnit() == gv_heroTankDps) || (EventUnit() == gv_heroHealerTank)) && (gv_campSiegeGiantCaptured == true)) {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 65.0)) {
            if ((gv_heroDamageReduced[lv_player] > 0)) {
                libNtve_gf_ChangeUnitDamage(EventUnit(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
                gv_heroDamageReduced[lv_player] = 0;
            }

        }
        else if (true) {
            if ((gv_heroDamageReduced[lv_player] != 1)) {
                libNtve_gf_ChangeUnitDamage(EventUnit(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega);
                gv_heroDamageReduced[lv_player] = 1;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSafeGuard_Init () {
    gt_HeroSafeGuard = TriggerCreate("gt_HeroSafeGuard_Func");
    TriggerAddEventUnitProperty(gt_HeroSafeGuard, UnitRefFromVariable("gv_heroPlayer"), c_unitPropLifePercent);
    TriggerAddEventUnitProperty(gt_HeroSafeGuard, UnitRefFromVariable("gv_heroTankDps"), c_unitPropLifePercent);
    TriggerAddEventUnitProperty(gt_HeroSafeGuard, UnitRefFromVariable("gv_heroHealerTank"), c_unitPropLifePercent);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Building Safe Guard
//--------------------------------------------------------------------------------------------------
bool gt_BuildingSafeGuard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;
    unitgroup lv_nearbyStructures;

    // Automatic Variable Declarations
    unitgroup auto3D8281B6_g;
    int auto3D8281B6_u;
    unitgroup auto6AC6F717_g;
    int auto6AC6F717_u;

    // Variable Initialization
    lv_nearbyStructures = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((gv_heroPlayer != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_nearbyStructures = UnitGroup(null, libCore_gv_cOMPUTER_TeamChaos, RegionCircle(UnitGetPosition(gv_heroPlayer), 20.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3D8281B6_g = lv_nearbyStructures;
    auto3D8281B6_u = UnitGroupCount(auto3D8281B6_g, c_unitCountAll);
    for (;; auto3D8281B6_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto3D8281B6_g, auto3D8281B6_u);
        if (lv_indexUnit == null) { break; }
        if ((UnitGroupHasUnit(gv_vulnerableBuildings, lv_indexUnit) == false)) {
            libNtve_gf_ChangeUnitDamage(lv_indexUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            UnitGroupAdd(gv_vulnerableBuildings, lv_indexUnit);
        }

    }
    auto6AC6F717_g = gv_vulnerableBuildings;
    auto6AC6F717_u = UnitGroupCount(auto6AC6F717_g, c_unitCountAll);
    for (;; auto6AC6F717_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto6AC6F717_g, auto6AC6F717_u);
        if (lv_indexUnit == null) { break; }
        if ((UnitGroupHasUnit(lv_nearbyStructures, lv_indexUnit) == false)) {
            libNtve_gf_ChangeUnitDamage(lv_indexUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
            UnitGroupRemove(gv_vulnerableBuildings, lv_indexUnit);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildingSafeGuard_Init () {
    gt_BuildingSafeGuard = TriggerCreate("gt_BuildingSafeGuard_Func");
    TriggerAddEventTimePeriodic(gt_BuildingSafeGuard, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Hero Longer Respawn
//--------------------------------------------------------------------------------------------------
bool gt_EnemyHeroLongerRespawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_respawnDuration;
    const fixed lv_max_C = 45.0;
    const fixed lv_add_C = 20.0;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gf_HeroKilledPlayer() >= 5))) {
            return false;
        }

        if (!((libGame_gf_HeroKilledPlayer() <= 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_respawnDuration = libCore_gf_HeroDeathTime(libGame_gf_HeroKilledPlayer(), UnitLevel(libGame_gv_players[libGame_gf_HeroKilledPlayer()].lv_heroUnit));
    if ((lv_respawnDuration >= (lv_max_C - lv_add_C))) {
        libGame_gf_HeroDeathModifyRespawnTimer(libGame_gf_HeroKilledPlayer(), (lv_max_C - lv_respawnDuration));
    }
    else {
        libGame_gf_HeroDeathModifyRespawnTimer(libGame_gf_HeroKilledPlayer(), lv_add_C);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyHeroLongerRespawn_Init () {
    gt_EnemyHeroLongerRespawn = TriggerCreate("gt_EnemyHeroLongerRespawn_Func");
    TriggerEnable(gt_EnemyHeroLongerRespawn, false);
    libGame_gf_HeroKilled(gt_EnemyHeroLongerRespawn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Palace Takes No Damage Without Player Nearby
//--------------------------------------------------------------------------------------------------
bool gt_PalaceTakesNoDamageWithoutPlayerNearby_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_noDamage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_PushCorewithTeamReminder, true, false);
    while (true) {
        if ((UnitIsAlive(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core) == false)) {
            return true;
        }

        if (((UnitIsAlive(gv_heroPlayer) == false) || (DistanceBetweenPoints(UnitGetPosition(gv_heroPlayer), UnitGetPosition(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core)) > 17.0))) {
            if ((lv_noDamage == false)) {
                libNtve_gf_ChangeUnitDamage(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
                lv_noDamage = true;
            }

        }
        else {
            if ((lv_noDamage == true)) {
                libNtve_gf_ChangeUnitDamage(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
                lv_noDamage = false;
            }

        }
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PalaceTakesNoDamageWithoutPlayerNearby_Init () {
    gt_PalaceTakesNoDamageWithoutPlayerNearby = TriggerCreate("gt_PalaceTakesNoDamageWithoutPlayerNearby_Func");
    TriggerAddEventUnitDamaged(gt_PalaceTakesNoDamageWithoutPlayerNearby, UnitRefFromUnit(UnitFromId(346)), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Distance
//--------------------------------------------------------------------------------------------------
bool gt_DebugDistance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, FixedToText(DistanceBetweenPoints(UnitGetPosition(gv_heroPlayer), UnitGetPosition(UnitFromId(107))), c_fixedPrecisionAny), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugDistance_Init () {
    gt_DebugDistance = TriggerCreate("gt_DebugDistance_Func");
    TriggerAddEventChatMessage(gt_DebugDistance, c_playerAny, "-d", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Temp
//--------------------------------------------------------------------------------------------------
bool gt_DebugTemp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_XPQ, false);
    TriggerEnable(gt_LevelUpQ, false);
    TriggerEnable(gt_TalentsReminder, false);
    TriggerEnable(gt_GotoWatchtowerQ, false);
    TriggerEnable(gt_MountSuggestion, false);
    TriggerExecute(gt_MercCampStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugTemp_Init () {
    gt_DebugTemp = TriggerCreate("gt_DebugTemp_Func");
    TriggerAddEventChatMessage(gt_DebugTemp, c_playerAny, "-t", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Watchtower
//--------------------------------------------------------------------------------------------------
bool gt_DebugWatchtower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_GotoWatchtowerQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugWatchtower_Init () {
    gt_DebugWatchtower = TriggerCreate("gt_DebugWatchtower_Func");
    TriggerAddEventChatMessage(gt_DebugWatchtower, c_playerAny, "-w", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Wipe
//--------------------------------------------------------------------------------------------------
bool gt_DebugWipe_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_RemoveTutorialReferenceItem(3);
    libUIUI_gf_RemoveTutorialReferenceItem(1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugWipe_Init () {
    gt_DebugWipe = TriggerCreate("gt_DebugWipe_Func");
    TriggerAddEventChatMessage(gt_DebugWipe, c_playerAny, "Wipe", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Hint
//--------------------------------------------------------------------------------------------------
bool gt_DebugHint_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_AddTutorialReferenceItemPreset(libUIUI_ge_TutorialReferenceItem_PenetratingRound);
    libUIUI_gf_AddTutorialReferenceItemPreset(libUIUI_ge_TutorialReferenceItem_Inspire);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugHint_Init () {
    gt_DebugHint = TriggerCreate("gt_DebugHint_Func");
    TriggerAddEventChatMessage(gt_DebugHint, c_playerAny, "Hint", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Top Bar
//--------------------------------------------------------------------------------------------------
bool gt_DebugTopBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libStEx_gf_CinematicModeTutorial(true, PlayerGroupAll(), c_transitionDurationImmediate);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
    TriggerExecute(gt_DisplayTopBarUI, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugTopBar_Init () {
    gt_DebugTopBar = TriggerCreate("gt_DebugTopBar_Func");
    TriggerAddEventChatMessage(gt_DebugTopBar, c_playerAny, "-top", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    StatEventCreate("Tutorial01_Start");
    StatEventSend(StatEventLastCreated());
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SetTalentTreeSelectionPanelAutoShow(false);
    libStEx_gf_CinematicModeTutorial(true, libCore_gv_playerGroupFromPlayer[1], c_transitionDurationImmediate);
    libStEx_gf_GlobalCinematicSettingTutorial(true);
    VisEnable(c_visTypeFog, true);
    libStEx_gf_TurnCinematicCameraOnOff(gv_pLAYER_01_USER, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core), "Signal SkipBuild");
    gv_cinematicCompleted = false;
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1064136646), 0.0, -1, 10.0, true);
    CinematicFade(true, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    while (!((UnitIsAlive(gv_heroPlayer) == true))) {
        Wait(0.0625, c_timeGame);
    }
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(72123), 9.0, -1, 10.0, true);
    while (!((UnitIsAlive(gv_heroHealerTank) == true))) {
        Wait(0.0625, c_timeGame);
    }
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    Wait(1.0, c_timeGame);
    libStEx_gf_DisplayVOMessage(StringExternal("Param/Value/457C34E0"), 8.0, true);
    Wait(7.0, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core), "Signal ShortBuild");
    Wait(1.0, c_timeGame);
    libNtve_gf_PauseUnit(libGame_gv_players[gv_pLAYER_06_ARTHAS].lv_heroUnit, true);
    UnitSetPosition(libGame_gv_players[gv_pLAYER_06_ARTHAS].lv_heroUnit, PointFromId(685123), false);
    UnitSetFacing(libGame_gv_players[gv_pLAYER_06_ARTHAS].lv_heroUnit, PointGetFacing(PointFromId(685123)), 0.0);
    libNtve_gf_PauseUnit(libGame_gv_players[gv_pLAYER_07_TYCHUS].lv_heroUnit, true);
    UnitSetPosition(libGame_gv_players[gv_pLAYER_07_TYCHUS].lv_heroUnit, PointFromId(686123), false);
    UnitSetFacing(libGame_gv_players[gv_pLAYER_07_TYCHUS].lv_heroUnit, PointGetFacing(PointFromId(686123)), 0.0);
    libNtve_gf_PauseUnit(libGame_gv_players[gv_pLAYER_08_GREYMANE].lv_heroUnit, true);
    UnitSetPosition(libGame_gv_players[gv_pLAYER_08_GREYMANE].lv_heroUnit, PointFromId(700123), false);
    UnitSetFacing(libGame_gv_players[gv_pLAYER_08_GREYMANE].lv_heroUnit, PointGetFacing(PointFromId(700123)), 0.0);
    libNtve_gf_PauseUnit(libGame_gv_players[gv_pLAYER_09_STITCHES].lv_heroUnit, true);
    UnitSetPosition(libGame_gv_players[gv_pLAYER_09_STITCHES].lv_heroUnit, PointFromId(690123), false);
    UnitSetFacing(libGame_gv_players[gv_pLAYER_09_STITCHES].lv_heroUnit, PointGetFacing(PointFromId(690123)), 0.0);
    libNtve_gf_PauseUnit(libGame_gv_players[gv_pLAYER_10_GULDAN].lv_heroUnit, true);
    UnitSetPosition(libGame_gv_players[gv_pLAYER_10_GULDAN].lv_heroUnit, PointFromId(331123), false);
    UnitSetFacing(libGame_gv_players[gv_pLAYER_10_GULDAN].lv_heroUnit, PointGetFacing(PointFromId(331123)), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(60123), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(497642148), libCore_gf_ConvesationLineDuration("TutorialVO|Line00261"), -1, 10.0, true);
    libStEx_gf_DisplayVOMessage(StringExternal("Param/Value/1E57FF9C"), 8.0, true);
    Wait(2.0, c_timeGame);
    libCore_gf_AttachReticleEffectAndTextTagOnUnit(libCore_ge_ReticleType_Enemy, libCore_ge_ReticleSize_Large, StringToText(""), libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, "Ref_Center");
    libCore_gf_StoreActorForUnit(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, 1, libNtve_gf_ActorLastCreated());
    Wait(7.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1465492652), 0.0, -1, 10.0, true);
    libStEx_gf_DisplayVOMessage(StringExternal("Param/Value/0212C160"), 13.0, true);
    Wait(1.0, c_timeGame);
    CameraPan(gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(1199988677)), 3.75, -1, 10.0, false);
    gf_IntroCreateLanePathline(1);
    SoundPlayForPlayer(SoundLink("UI_Tutorial01_Suggesting_Path", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_PauseUnit(libGame_gv_players[gv_pLAYER_09_STITCHES].lv_heroUnit, false);
    libNtve_gf_PauseUnit(libGame_gv_players[gv_pLAYER_10_GULDAN].lv_heroUnit, false);
    Wait(4.25, c_timeGame);
    CameraPan(gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(1507704308)), 3.25, -1, 10.0, false);
    gf_IntroCreateLanePathline(2);
    libNtve_gf_PauseUnit(libGame_gv_players[gv_pLAYER_06_ARTHAS].lv_heroUnit, false);
    libNtve_gf_PauseUnit(libGame_gv_players[gv_pLAYER_08_GREYMANE].lv_heroUnit, false);
    Wait(3.75, c_timeGame);
    CameraPan(gv_pLAYER_01_USER, CameraInfoGetTarget(CameraInfoFromId(214796096)), 3.25, -1, 10.0, false);
    gf_IntroCreateLanePathline(3);
    gv_intro_LanePaneLineCreated = true;
    libNtve_gf_PauseUnit(libGame_gv_players[gv_pLAYER_07_TYCHUS].lv_heroUnit, false);
    Wait(5.0, c_timeGame);
    gf_IntroClearLanePathlines();
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1086644233), 4.0, -1, 10.0, true);
    libStEx_gf_DisplayVOMessage(StringExternal("Param/Value/B0EEE7AA"), 8.0, true);
    Wait(1.0, c_timeGame);
    libCore_gf_AttachReticleEffectAndTextTagOnUnit(libCore_ge_ReticleType_MainObjective, libCore_ge_ReticleSize_Medium, null, UnitFromId(1746), "Ref_Center");
    gv_intro_FountainReticle = libNtve_gf_ActorLastCreated();
    Wait(7.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1277685162), 0.0, -1, 10.0, true);
    libStEx_gf_DisplayVOMessage(StringExternal("Param/Value/1DBE5DF0"), 8.0, true);
    Wait(1.0, c_timeGame);
    libCore_gf_SendActorMessageToDoodadsInRegion("HaloSetColor 0,255,0", RegionCircle(UnitGetPosition(gv_heroPlayer), 20.0), "Storm_Doodad_KingsCrest_StartingPlatform");
    libCore_gf_SendActorMessageToDoodadsInRegion("HaloStart", RegionCircle(UnitGetPosition(gv_heroPlayer), 20.0), "Storm_Doodad_KingsCrest_StartingPlatform");
    Wait(0.8, c_timeGame);
    libCore_gf_SendActorMessageToDoodadsInRegion("HaloStop", RegionCircle(UnitGetPosition(gv_heroPlayer), 20.0), "Storm_Doodad_KingsCrest_StartingPlatform");
    Wait(0.65, c_timeGame);
    libCore_gf_SendActorMessageToDoodadsInRegion("HaloStart", RegionCircle(UnitGetPosition(gv_heroPlayer), 20.0), "Storm_Doodad_KingsCrest_StartingPlatform");
    Wait(1.0, c_timeGame);
    libCore_gf_SendActorMessageToDoodadsInRegion("HaloStop", RegionCircle(UnitGetPosition(gv_heroPlayer), 20.0), "Storm_Doodad_KingsCrest_StartingPlatform");
    Wait(0.65, c_timeGame);
    libCore_gf_SendActorMessageToDoodadsInRegion("HaloStart", RegionCircle(UnitGetPosition(gv_heroPlayer), 20.0), "Storm_Doodad_KingsCrest_StartingPlatform");
    Wait(1.0, c_timeGame);
    libCore_gf_SendActorMessageToDoodadsInRegion("HaloStop", RegionCircle(UnitGetPosition(gv_heroPlayer), 20.0), "Storm_Doodad_KingsCrest_StartingPlatform");
    Wait(2.35, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(39123), 2.0, -1, 10.0, true);
    UnitIssueOrder(gv_heroPlayer, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(274123)), c_orderQueueReplace);
    Wait(0.75, c_timeGame);
    UnitIssueOrder(gv_heroHealerTank, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(171123)), c_orderQueueReplace);
    UnitIssueOrder(gv_heroHealerTank, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(124123)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroDemonHunter, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(168123)), c_orderQueueReplace);
    UnitIssueOrder(gv_heroDemonHunter, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(82123)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroTankDps, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(170123)), c_orderQueueReplace);
    UnitIssueOrder(gv_heroTankDps, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(108123)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroNova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(243123)), c_orderQueueReplace);
    UnitIssueOrder(gv_heroNova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(155123)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeGame);
    gv_cinematicCompleted = true;
    StatEventCreate("Tutorial01_IntroCinematicCompleted");
    StatEventSend(StatEventLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto070670FC_val;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gf_ActorStoredForUnit(libGame_gv_teams[2].lv_core, 1) != null)) {
        libNtve_gf_KillModel(libCore_gf_ActorStoredForUnit(libGame_gv_teams[2].lv_core, 1));
    }

    if ((gv_intro_FountainReticle != null)) {
        ActorSend(gv_intro_FountainReticle, "Destroy Immediate");
        gv_intro_FountainReticle = null;
    }

    libStEx_gf_ClearVOMessage();
    if ((gv_cinematicCompleted == false)) {
        CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        while (!((UnitIsAlive(gv_heroPlayer) == true))) {
            Wait(0.0625, c_timeGame);
        }
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
        CameraPan(gv_pLAYER_01_USER, UnitGetPosition(gv_heroPlayer), 0.0, -1, 10.0, false);
        libCore_gf_SendActorMessageToDoodadsInRegion("HaloStop", RegionCircle(UnitGetPosition(gv_heroPlayer), 20.0), "Storm_Doodad_KingsCrest_StartingPlatform");
        if ((libCore_gf_ActorStoredForUnit(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, 1) == null)) {
            libCore_gf_AttachReticleEffectAndTextTagOnUnit(libCore_ge_ReticleType_Enemy, libCore_ge_ReticleSize_Large, StringToText(""), libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, "Ref_Center");
            libCore_gf_StoreActorForUnit(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, 1, libNtve_gf_ActorLastCreated());
            libCore_gf_StoreTextTagForUnit(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, 1, TextTagLastCreated());
        }

        CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
        TriggerExecute(gt_IntroCanceled, true, false);
        libCore_gf_SendActorMessageToDoodadsInRegion("Signal GlazeStop", RegionCircle(UnitGetPosition(gv_heroPlayer), 20.0), "Storm_Doodad_KingsCrest_StartingPlatform");
        UnitIssueOrder(gv_heroDemonHunter, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(82123)), c_orderQueueReplace);
        UnitIssueOrder(gv_heroTankDps, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(108123)), c_orderQueueReplace);
        UnitIssueOrder(gv_heroNova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(155123)), c_orderQueueReplace);
        UnitIssueOrder(gv_heroHealerTank, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(124123)), c_orderQueueReplace);
        libNtve_gf_PauseUnit(libGame_gv_players[gv_pLAYER_06_ARTHAS].lv_heroUnit, false);
        libNtve_gf_PauseUnit(libGame_gv_players[gv_pLAYER_07_TYCHUS].lv_heroUnit, false);
        libNtve_gf_PauseUnit(libGame_gv_players[gv_pLAYER_08_GREYMANE].lv_heroUnit, false);
        libNtve_gf_PauseUnit(libGame_gv_players[gv_pLAYER_09_STITCHES].lv_heroUnit, false);
        libNtve_gf_PauseUnit(libGame_gv_players[gv_pLAYER_10_GULDAN].lv_heroUnit, false);
        libCore_gf_SendActorMessageToDoodadsInRegion("HaloStop", RegionCircle(PlayerStartLocation(gv_pLAYER_01_USER), 20.0), "Storm_Doodad_KingsCrest_StartingPlatform");
        libCore_gf_SendActorMessageToDoodadsInRegion("HaloClearColor", RegionCircle(PlayerStartLocation(gv_pLAYER_01_USER), 20.0), "Storm_Doodad_KingsCrest_StartingPlatform");
    }
    else {
        libStEx_gf_TurnCinematicCameraOnOff(gv_pLAYER_01_USER, false);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
        CameraPan(gv_pLAYER_01_USER, UnitGetPosition(gv_heroPlayer), 0.0, -1, 10.0, false);
    }
    gf_IntroClearLanePathlines();
    gf_IntroCreateLanePathlines();
    libStEx_gf_CinematicModeTutorial(false, libCore_gv_playerGroupFromPlayer[1], c_transitionDurationDefault);
    libStEx_gf_GlobalCinematicSettingTutorial(false);
    libStEx_gf_TurnCinematicCameraOnOff(gv_pLAYER_01_USER, false);
    libNtve_gf_MakeUnitUncommandable(gv_heroPlayer, false);
    UnitSelect(gv_heroPlayer, gv_pLAYER_01_USER, true);
    AddPointOfInterest(PointFromName("Lane 2 - Waypoint 17"), 0.0, 0.0, "TutorialArthasBeacon", libNtve_ge_GoalTeam_Chaos, 0);
    AddPointOfInterest(PointFromName("Lane 2 - Waypoint 17"), 0.0, 0.0, "TutorialGreymaneBeacon", libNtve_ge_GoalTeam_Chaos, 0);
    AddPointOfInterest(PointFromName("Lane 1 - Waypoint 14"), 0.0, 0.0, "TutorialGuldanBeacon", libNtve_ge_GoalTeam_Chaos, 0);
    AddPointOfInterest(PointFromName("Lane 1 - Waypoint 14"), 0.0, 0.0, "TutorialStitchesBeacon", libNtve_ge_GoalTeam_Chaos, 0);
    AddPointOfInterest(PointFromName("Lane 3 - Waypoint 14"), 0.0, 0.0, "TutorialTychusBeacon", libNtve_ge_GoalTeam_Chaos, 0);
    TriggerExecute(gt_IntroDisableWatchtowers, true, false);
    TriggerEnable(gt_HealingFountainProximityMonitor, true);
    libStEx_gf_AddInGameTip(libStEx_ge_InGameTip_Healing);
    Wait(3.0, c_timeGame);
    auto070670FC_val = libStEx_gf_TutorialHero();
    if (auto070670FC_val == "Jaina") {
        libStEx_gf_DisplayVOMessageGamePaused(StringExternal("Param/Value/D668F51D"), libStEx_ge_SE_VOMessageType_blank, true);
    }
    else if (auto070670FC_val == "Muradin") {
        libStEx_gf_DisplayVOMessageGamePaused(StringExternal("Param/Value/EA7148C6"), libStEx_ge_SE_VOMessageType_blank, true);
    }
    else if (auto070670FC_val == "Tyrande") {
        libStEx_gf_DisplayVOMessageGamePaused(StringExternal("Param/Value/5B49355B"), libStEx_ge_SE_VOMessageType_blank, true);
    }
    else {
    }
    Wait(1.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("UI_Tutorial_Help_Menu_Appears", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libUIUI_gf_AddTutorialReferenceItemPreset(libUIUI_ge_TutorialReferenceItem_Move);
    libUIUI_gf_AddTutorialReferenceItemPreset(libUIUI_ge_TutorialReferenceItem_Attack);
    libUIUI_gf_AddTutorialReferenceItemPreset(libUIUI_ge_TutorialReferenceItem_Mount);
    libUIUI_gf_AddTutorialReferenceItemPreset(libUIUI_ge_TutorialReferenceItem_Hearthstone);
    libUIUI_gf_AddTutorialReferenceItemPreset(libUIUI_ge_TutorialReferenceItem_Camera);
    DialogControlSetVisible(libUIUI_gv_tutorialPanelHighlightFrame, PlayerGroupAll(), true);
    libStEx_gf_DisplayVOMessageGamePaused(StringExternal("Param/Value/A5F6AC1C"), libStEx_ge_SE_VOMessageType_blank, true);
    libStEx_gf_AddInGameTip(libStEx_ge_InGameTip_Mounts);
    libStEx_gf_AddInGameTip(libStEx_ge_InGameTip_Hearthstone);
    Wait(1.0, c_timeGame);
    DialogControlSetVisible(libUIUI_gv_tutorialPanelHighlightFrame, PlayerGroupAll(), false);
    Wait(8.0, c_timeGame);
    TriggerExecute(gt_TalentsInstructionQ, true, false);
    TriggerExecute(gt_IntroClearnupClearLanePathlines, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Clearnup Clear Lane Pathlines
//--------------------------------------------------------------------------------------------------
bool gt_IntroClearnupClearLanePathlines_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(20.0, c_timeGame);
    gf_IntroClearLanePathlines();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroClearnupClearLanePathlines_Init () {
    gt_IntroClearnupClearLanePathlines = TriggerCreate("gt_IntroClearnupClearLanePathlines_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Raynor Is Created
//--------------------------------------------------------------------------------------------------
bool gt_IntroRaynorIsCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "HeroRaynor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_MakeUnitUncommandable(EventUnitCreatedUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroRaynorIsCreated_Init () {
    gt_IntroRaynorIsCreated = TriggerCreate("gt_IntroRaynorIsCreated_Func");
    TriggerAddEventUnitCreated(gt_IntroRaynorIsCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Canceled
//--------------------------------------------------------------------------------------------------
bool gt_IntroCanceled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitSetPosition(gv_heroHealerTank, PointFromId(171123), false);
    UnitSetPosition(gv_heroDemonHunter, PointFromId(168123), false);
    UnitSetPosition(gv_heroTankDps, PointFromId(170123), false);
    UnitSetPosition(gv_heroNova, PointFromId(243123), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCanceled_Init () {
    gt_IntroCanceled = TriggerCreate("gt_IntroCanceled_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Disable Watchtowers
//--------------------------------------------------------------------------------------------------
bool gt_IntroDisableWatchtowers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itWatchtower;

    // Automatic Variable Declarations
    int autoFD683683_ae;
    const int autoFD683683_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoFD683683_ae = libGame_gv_watchTowersCurrentCount;
    lv_itWatchtower = 1;
    for ( ; ( (autoFD683683_ai >= 0 && lv_itWatchtower <= autoFD683683_ae) || (autoFD683683_ai < 0 && lv_itWatchtower >= autoFD683683_ae) ) ; lv_itWatchtower += autoFD683683_ai ) {
        libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_itWatchtower].lv_captureBeaconUnit, "Signal Hide");
        libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_itWatchtower].lv_watchTowerUnit, "Signal Hide");
        libGame_gf_CapturePointDisable(libGame_gv_watchTowers[lv_itWatchtower].lv_capturePointIndex);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroDisableWatchtowers_Init () {
    gt_IntroDisableWatchtowers = TriggerCreate("gt_IntroDisableWatchtowers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Freeze the Minion waves
//--------------------------------------------------------------------------------------------------
bool gt_FreezetheMinionwaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    gf_TurnOnOffPerpetualCombat(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FreezetheMinionwaves_Init () {
    gt_FreezetheMinionwaves = TriggerCreate("gt_FreezetheMinionwaves_Func");
    TriggerAddEventTimer(gt_FreezetheMinionwaves, libGame_gv_minionSpawnStartTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talents Instruction Q
//--------------------------------------------------------------------------------------------------
bool gt_TalentsInstructionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TalentsPanelOpened, true);
    PathDestroy(gv_intro_LanePathLine[1]);
    PathDestroy(gv_intro_LanePathLine[2]);
    PathDestroy(gv_intro_LanePathLine[3]);
    libStEx_gf_TutorialHeroTalentRecommendation();
    TriggerQueueEnter();
    Wait(0.5, c_timeGame);
    libStEx_gf_DisplayVOMessageGamePaused(StringExternal("Param/Value/A1AC9EDD"), libStEx_ge_SE_VOMessageType_blank, true);
    libStEx_gf_AddInGameTip(libStEx_ge_InGameTip_Talent);
    SetTalentsEnabled(true);
    libStEx_gf_SE_ShowHideTalentPortraitFlashingImage(true);
    TriggerExecute(gt_ObjectivePickTalentCreate, true, false);
    Wait(2.5, c_timeGame);
    if ((libStEx_gv_sE_TrainingModeTalentPanelOpened == false) && (libStEx_gv_sE_TrainingModeTalentPicked == false)) {
        libStEx_gf_DisplayHintMessage(StringExternal("Param/Value/109DF19F"), true, 1.0);
    }

    if ((libStEx_gf_IsthisanAutomatedPlaythrough() == true)) {
        TriggerExecute(gt_TalentsPanelOpened, true, false);
        TriggerExecute(gt_TalentsPicked, true, false);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TalentsInstructionQ_Init () {
    gt_TalentsInstructionQ = TriggerCreate("gt_TalentsInstructionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talents Panel Opened
//--------------------------------------------------------------------------------------------------
bool gt_TalentsPanelOpened_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libStEx_gf_SE_ShowHideTalentPortraitFlashingImage(false);
    libStEx_gv_sE_TrainingModeTalentPanelOpened = true;
    libUIUI_gf_AddTutorialReferenceItemPreset(libUIUI_ge_TutorialReferenceItem_Talents);
    SoundPlayForPlayer(SoundLink("UI_Tutorial_Help_Menu_Appears", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(libStEx_gt_SE_TrainingModeTalentsPanelFlashTalents, true, false);
    TriggerQueueEnter();
    if ((libStEx_gv_sE_TrainingModeTalentPicked == false)) {
        libStEx_gf_DisplayHintMessage(StringExternal("Param/Value/3A3644F7"), true, 2.0);
        Wait(7.0, c_timeGame);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TalentsPanelOpened_Init () {
    gt_TalentsPanelOpened = TriggerCreate("gt_TalentsPanelOpened_Func");
    TriggerEnable(gt_TalentsPanelOpened, false);
    TriggerAddEventHeroTalentTreeSelectionPanelShown(gt_TalentsPanelOpened, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talents Picked
//--------------------------------------------------------------------------------------------------
bool gt_TalentsPicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libStEx_gv_sE_TrainingModeTalentPicked = true;
    TriggerStop(gt_TalentsInstructionQ);
    TriggerExecute(gt_ObjectivePickTalentComplete, true, false);
    libStEx_gf_ClearHintMessage();
    SoundPlayForPlayer(SoundLink("UI_Game_Training_PickTalentSound", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_TalentsPickedTransmissionQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TalentsPicked_Init () {
    gt_TalentsPicked = TriggerCreate("gt_TalentsPicked_Func");
    TriggerAddEventHeroTalentTreeSelected(gt_TalentsPicked, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talents Picked Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_TalentsPickedTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libStEx_gv_sE_TrainingModeTalentPanelOpened = false;
    libGame_gv_gateTimerReady = true;
    Wait(0.25, c_timeGame);
    SetTalentTreePauseGameWhenSelectionPanelShown(true);
    TriggerQueueEnter();
    UnitIssueOrder(gv_heroHealerTank, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(124123)), c_orderQueueReplace);
    UnitIssueOrder(gv_heroTankDps, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(108123)), c_orderQueueReplace);
    UnitIssueOrder(gv_heroDemonHunter, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(82123)), c_orderQueueReplace);
    UnitIssueOrder(gv_heroNova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(155123)), c_orderQueueReplace);
    TriggerQueueExit();
    TriggerExecute(gt_MoveToFrontLineStartQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TalentsPickedTransmissionQ_Init () {
    gt_TalentsPickedTransmissionQ = TriggerCreate("gt_TalentsPickedTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Pick Talent Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePickTalentCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("UI_Objective_Received", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePickTalentCreate_Init () {
    gt_ObjectivePickTalentCreate = TriggerCreate("gt_ObjectivePickTalentCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Pick Talent Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePickTalentComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePickTalentCreate, true, false);
    SoundPlayForPlayer(SoundLink("UI_ObjectiveComplete", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(6.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePickTalentComplete_Init () {
    gt_ObjectivePickTalentComplete = TriggerCreate("gt_ObjectivePickTalentComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move To Front Line Start Q
//--------------------------------------------------------------------------------------------------
bool gt_MoveToFrontLineStartQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_helpedHeroName;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveComeToTheFrontlinesCreate, true, true);
    SoundPlayForPlayer(SoundLink("UI_BriefingUnitSelect", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngleWithType(PlayerGroupAll(), "PingObjective", PointFromId(393064320), Color(0.00, 100.00, 0.00), 0.0, 270.0, -1, -1);
    gv_goToLanePing = PingLastCreated();
    TriggerQueueExit();
    Wait(3.0, c_timeGame);
    PathCreateForUnit(PlayerGroupAll(), gv_heroPlayer);
    gv_goToLanePathLine = PathLastCreated();
    SoundPlayForPlayer(SoundLink("UI_Tutorial01_Suggesting_Path", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    PathSetDestinationPoint(PathLastCreated(), PointFromId(393064320));
    PathSetStepModel(PathLastCreated(), c_pathLocationWorld, "Assets\\Units\\Test\\InvisibleUnit\\InvisibleUnit.m3");
    PathSetLineTexture(PathLastCreated(), c_pathLocationWorld, "Assets\\Textures\\ui_tutorial_guidearrow.dds");
    PathSetLineTileLength(PathLastCreated(), c_pathLocationWorld, 2.578);
    PathSetLineWidth(PathLastCreated(), c_pathLocationWorld, 1.5);
    PathSetVisible(PathLastCreated(), c_pathLocationWorld, true);
    PathSetVisible(PathLastCreated(), c_pathLocationMinimap, false);
    PathSetStepMidpoint(PathLastCreated(), c_pathLocationWorld, 0.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveToFrontLineStartQ_Init () {
    gt_MoveToFrontLineStartQ = TriggerCreate("gt_MoveToFrontLineStartQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open the Gates Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_OpentheGatesTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.0625, c_timeGame);
    TimerStart(libGame_gv_minionSpawnStartTimer, 0.0, false, c_timeGame);
    Wait(0.5, c_timeGame);
    StatEventCreate("Tutorial01_GatesOpened");
    StatEventSend(StatEventLastCreated());
    libStEx_gf_DisplayHintMessage(StringExternal("Param/Value/CDD0665D"), true, 2.0);
    TriggerExecute(gt_PauseMercTimers, true, false);
    TriggerExecute(gt_ComeOutoftheBaseReminderQ, true, false);
    libAIAI_gf_HeroAIEnableAIForPlayer(gv_pLAYER_02_HEALERTANK);
    libAIAI_gf_HeroAIEnableAIForPlayer(gv_pLAYER_03_TANKDPS);
    libAIAI_gf_HeroAIEnableAIForPlayer(gv_pLAYER_04_DEMONHUNTER);
    libAIAI_gf_HeroAIEnableAIForPlayer(gv_pLAYER_05_NOVA);
    Wait(0.125, c_timeGame);
    AIRequiredLane(libGame_gv_players[gv_pLAYER_02_HEALERTANK].lv_heroUnit, 2);
    AIRequiredLane(libGame_gv_players[gv_pLAYER_03_TANKDPS].lv_heroUnit, 1);
    AIRequiredLane(libGame_gv_players[gv_pLAYER_04_DEMONHUNTER].lv_heroUnit, 3);
    AIRequiredLane(libGame_gv_players[gv_pLAYER_05_NOVA].lv_heroUnit, 1);
    AIRequiredLane(libGame_gv_players[gv_pLAYER_06_ARTHAS].lv_heroUnit, 2);
    AIRequiredLane(libGame_gv_players[gv_pLAYER_07_TYCHUS].lv_heroUnit, 3);
    AIRequiredLane(libGame_gv_players[gv_pLAYER_08_GREYMANE].lv_heroUnit, 2);
    AIRequiredLane(libGame_gv_players[gv_pLAYER_09_STITCHES].lv_heroUnit, 1);
    AIRequiredLane(libGame_gv_players[gv_pLAYER_10_GULDAN].lv_heroUnit, 1);
    TriggerExecute(gt_AutomationMovetoFrontline, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpentheGatesTimerExpires_Init () {
    gt_OpentheGatesTimerExpires = TriggerCreate("gt_OpentheGatesTimerExpires_Func");
    TriggerAddEventTimer(gt_OpentheGatesTimerExpires, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pause Merc Timers
//--------------------------------------------------------------------------------------------------
bool gt_PauseMercTimers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itCamp;

    // Automatic Variable Declarations
    int autoB278E786_ae;
    const int autoB278E786_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB278E786_ae = libMapM_gv_jungleNumberOfCreepCamps;
    lv_itCamp = 1;
    for ( ; ( (autoB278E786_ai >= 0 && lv_itCamp <= autoB278E786_ae) || (autoB278E786_ai < 0 && lv_itCamp >= autoB278E786_ae) ) ; lv_itCamp += autoB278E786_ai ) {
        TimerPause(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_stateCreepBirthTimer, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PauseMercTimers_Init () {
    gt_PauseMercTimers = TriggerCreate("gt_PauseMercTimers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Come Out of the Base Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_ComeOutoftheBaseReminderQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_remind;

    // Automatic Variable Declarations
    const int autoBA8097F1_n = 2;
    int autoBA8097F1_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(36.0, c_timeGame);
    for (autoBA8097F1_i = 1; autoBA8097F1_i <= autoBA8097F1_n; autoBA8097F1_i += 1) {
        lv_remind = false;
        if ((libNtve_gf_UnitInRegion(gv_heroPlayer, RegionFromId(5)) == true)) {
            lv_remind = true;
        }
        else {
            libGame_gf_CalculateClosestLaneData(UnitGetPosition(gv_heroPlayer));
            if ((libGame_gv_closestLaneData.lv_closestMinionLane != 2)) {
                lv_remind = true;
            }

        }
        if ((lv_remind == false)) {
            return true;
        }

        TriggerQueueEnter();
        libNtve_gf_CreatePingFacingAngleWithType(PlayerGroupAll(), "PingObjective", PointFromId(393064320), Color(0.00, 100.00, 0.00), 6.0, 270.0, -1, -1);
        TriggerQueueExit();
        Wait(30.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ComeOutoftheBaseReminderQ_Init () {
    gt_ComeOutoftheBaseReminderQ = TriggerCreate("gt_ComeOutoftheBaseReminderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Uther Proximity Monitor
//--------------------------------------------------------------------------------------------------
bool gt_UtherProximityMonitor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PathDestroy(gv_goToLanePathLine);
    libStEx_gf_ClearHintMessage();
    TriggerExecute(gt_ObjectiveComeToTheFrontlinesComplete, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_XPQ, true, false);
    gf_TurnOnOffPerpetualCombat(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UtherProximityMonitor_Init () {
    gt_UtherProximityMonitor = TriggerCreate("gt_UtherProximityMonitor_Func");
    TriggerAddEventUnitRegion(gt_UtherProximityMonitor, UnitRefFromVariable("gv_heroPlayer"), RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_UtherProximityMonitor, UnitRefFromVariable("gv_heroPlayer"), RegionFromId(7), true);
    TriggerAddEventUnitRegion(gt_UtherProximityMonitor, UnitRefFromVariable("gv_heroPlayer"), RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Come To The Frontlines Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveComeToTheFrontlinesCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_helpedHeroName;

    // Automatic Variable Declarations
    int auto940BEBFF_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto940BEBFF_val = libGame_gv_players[gv_pLAYER_02_HEALERTANK].lv_heroIndex;
    if (auto940BEBFF_val == libCore_gf_GetHeroIndexForUnitType("HeroTyrande")) {
        lv_helpedHeroName = StringExternal("Param/Value/7ACC22ED");
    }
    else if (auto940BEBFF_val == libCore_gf_GetHeroIndexForUnitType("HeroMuradin")) {
        lv_helpedHeroName = StringExternal("Param/Value/0FFFBC58");
    }
    else {
    }
    libStEx_gf_DisplayHintMessage(TextExpressionAssemble("Param/Expression/E271C8A8"), true, 2.0);
    Wait(2.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveComeToTheFrontlinesCreate_Init () {
    gt_ObjectiveComeToTheFrontlinesCreate = TriggerCreate("gt_ObjectiveComeToTheFrontlinesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Come To The Frontlines Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveComeToTheFrontlinesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveComeToTheFrontlinesCreate, true, false);
    SoundPlayForPlayer(SoundLink("UI_ObjectiveComplete", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    PingDestroy(gv_goToLanePing);
    gv_goToLanePing = c_invalidPingId;
    StatEventCreate("Tutorial01_FrontLineDone");
    StatEventSend(StatEventLastCreated());
    Wait(6.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveComeToTheFrontlinesComplete_Init () {
    gt_ObjectiveComeToTheFrontlinesComplete = TriggerCreate("gt_ObjectiveComeToTheFrontlinesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: XP Q
//--------------------------------------------------------------------------------------------------
bool gt_XPQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_XPSetup, true, true);
    TriggerExecute(gt_XPCinematic, true, true);
    TriggerExecute(gt_XPCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XPQ_Init () {
    gt_XPQ = TriggerCreate("gt_XPQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: XP Setup
//--------------------------------------------------------------------------------------------------
bool gt_XPSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;

    // Automatic Variable Declarations
    unitgroup auto5C86B3D2_g;
    int auto5C86B3D2_u;
    unitgroup auto1826B3ED_g;
    int auto1826B3ED_u;
    unitgroup auto622528A0_g;
    int auto622528A0_u;
    unitgroup autoC9A8DCC9_g;
    int autoC9A8DCC9_u;
    unitgroup auto4B94FA71_g;
    int auto4B94FA71_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libStEx_gf_CinematicModeTutorial(true, libCore_gv_playerGroupFromPlayer[1], c_transitionDurationImmediate);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
    libStEx_gf_GlobalCinematicSettingTutorial(true);
    VisEnable(c_visTypeFog, true);
    libStEx_gf_TurnCinematicCameraOnOff(gv_pLAYER_01_USER, true);
    TimerPause(libGame_gv_gameTimer, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    libNtve_gf_MakeUnitUncommandable(gv_heroPlayer, true);
    auto5C86B3D2_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5C86B3D2_u = UnitGroupCount(auto5C86B3D2_g, c_unitCountAll);
    for (;; auto5C86B3D2_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto5C86B3D2_g, auto5C86B3D2_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_PauseUnit(lv_itUnit, true);
        UnitGroupAdd(gv_cinematicPausedUnits, lv_itUnit);
        if ((UnitFilterMatch(lv_itUnit, UnitGetOwner(lv_itUnit), UnitFilter((1 << c_targetFilterMinion), 0, 0, 0)) == true)) {
            if ((libAIAI_gf_MinionAIGetLaneForMinion(lv_itUnit) == 2)) {
                UnitRemove(lv_itUnit);
            }
            else {
                if ((libNtve_gf_UnitIsHidden(lv_itUnit) == false)) {
                    libNtve_gf_ShowHideUnit(lv_itUnit, false);
                    UnitGroupAdd(gv_cinematicHiddenUnits, lv_itUnit);
                }

            }
        }

    }
    libGame_gf_MinionPauseUnpauseMinionSystem(false);
    libGame_gf_MinionSpawnMinion(2, libCore_gv_cOMPUTER_TeamOrder, libCore_ge_MinionTypes_Footmen, PointFromId(1231337771));
    UnitSetFacing(UnitLastCreated(), PointGetFacing(PointFromId(1231337771)), 0.0);
    UnitGroupAdd(gv_xP_Minions[libGame_gv_teamOrderIndex_C], UnitLastCreated());
    libGame_gf_MinionSpawnMinion(2, libCore_gv_cOMPUTER_TeamOrder, libCore_ge_MinionTypes_Footmen, PointFromId(329842982));
    UnitSetFacing(UnitLastCreated(), PointGetFacing(PointFromId(329842982)), 0.0);
    UnitGroupAdd(gv_xP_Minions[libGame_gv_teamOrderIndex_C], UnitLastCreated());
    libGame_gf_MinionSpawnMinion(2, libCore_gv_cOMPUTER_TeamOrder, libCore_ge_MinionTypes_Footmen, PointFromId(191054145));
    UnitSetFacing(UnitLastCreated(), PointGetFacing(PointFromId(191054145)), 0.0);
    UnitGroupAdd(gv_xP_Minions[libGame_gv_teamOrderIndex_C], UnitLastCreated());
    libGame_gf_MinionSpawnMinion(2, libCore_gv_cOMPUTER_TeamOrder, libCore_ge_MinionTypes_Wizard, PointFromId(626733882));
    UnitSetFacing(UnitLastCreated(), PointGetFacing(PointFromId(626733882)), 0.0);
    UnitGroupAdd(gv_xP_Minions[libGame_gv_teamOrderIndex_C], UnitLastCreated());
    libGame_gf_MinionSpawnMinion(2, libCore_gv_cOMPUTER_TeamOrder, libCore_ge_MinionTypes_Ranged, PointFromId(32369536));
    UnitSetFacing(UnitLastCreated(), PointGetFacing(PointFromId(32369536)), 0.0);
    UnitGroupAdd(gv_xP_Minions[libGame_gv_teamOrderIndex_C], UnitLastCreated());
    libGame_gf_MinionSpawnMinion(2, libCore_gv_cOMPUTER_TeamOrder, libCore_ge_MinionTypes_Ranged, PointFromId(8383873));
    UnitSetFacing(UnitLastCreated(), PointGetFacing(PointFromId(8383873)), 0.0);
    UnitGroupAdd(gv_xP_Minions[libGame_gv_teamOrderIndex_C], UnitLastCreated());
    libGame_gf_MinionSpawnMinion(2, libCore_gv_cOMPUTER_TeamOrder, libCore_ge_MinionTypes_Ranged, PointFromId(1526494461));
    UnitSetFacing(UnitLastCreated(), PointGetFacing(PointFromId(1526494461)), 0.0);
    UnitGroupAdd(gv_xP_Minions[libGame_gv_teamOrderIndex_C], UnitLastCreated());
    libGame_gf_MinionSpawnMinion(2, libCore_gv_cOMPUTER_TeamChaos, libCore_ge_MinionTypes_Footmen, PointFromId(168581306));
    UnitSetFacing(UnitLastCreated(), PointGetFacing(PointFromId(168581306)), 0.0);
    UnitGroupAdd(gv_xP_Minions[libGame_gv_teamChaosIndex_C], UnitLastCreated());
    libGame_gf_MinionSpawnMinion(2, libCore_gv_cOMPUTER_TeamChaos, libCore_ge_MinionTypes_Footmen, PointFromId(1521494425));
    UnitSetFacing(UnitLastCreated(), PointGetFacing(PointFromId(1521494425)), 0.0);
    UnitGroupAdd(gv_xP_Minions[libGame_gv_teamChaosIndex_C], UnitLastCreated());
    libGame_gf_MinionSpawnMinion(2, libCore_gv_cOMPUTER_TeamChaos, libCore_ge_MinionTypes_Footmen, PointFromId(1101858573));
    UnitSetFacing(UnitLastCreated(), PointGetFacing(PointFromId(1101858573)), 0.0);
    UnitGroupAdd(gv_xP_Minions[libGame_gv_teamChaosIndex_C], UnitLastCreated());
    libGame_gf_MinionSpawnMinion(2, libCore_gv_cOMPUTER_TeamChaos, libCore_ge_MinionTypes_Wizard, PointFromId(1175815504));
    UnitSetFacing(UnitLastCreated(), PointGetFacing(PointFromId(1175815504)), 0.0);
    UnitGroupAdd(gv_xP_Minions[libGame_gv_teamChaosIndex_C], UnitLastCreated());
    libGame_gf_MinionSpawnMinion(2, libCore_gv_cOMPUTER_TeamChaos, libCore_ge_MinionTypes_Ranged, PointFromId(2070774916));
    UnitSetFacing(UnitLastCreated(), PointGetFacing(PointFromId(2070774916)), 0.0);
    UnitGroupAdd(gv_xP_Minions[libGame_gv_teamChaosIndex_C], UnitLastCreated());
    libGame_gf_MinionSpawnMinion(2, libCore_gv_cOMPUTER_TeamChaos, libCore_ge_MinionTypes_Ranged, PointFromId(201958274));
    UnitSetFacing(UnitLastCreated(), PointGetFacing(PointFromId(201958274)), 0.0);
    UnitGroupAdd(gv_xP_Minions[libGame_gv_teamChaosIndex_C], UnitLastCreated());
    libGame_gf_MinionSpawnMinion(2, libCore_gv_cOMPUTER_TeamChaos, libCore_ge_MinionTypes_Ranged, PointFromId(1719998893));
    UnitSetFacing(UnitLastCreated(), PointGetFacing(PointFromId(1719998893)), 0.0);
    UnitGroupAdd(gv_xP_Minions[libGame_gv_teamChaosIndex_C], UnitLastCreated());
    Wait(0.125, c_timeGame);
    UnitGroupIssueOrder(gv_xP_Minions[1], OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1175815504)), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_xP_Minions[2], OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(626733882)), c_orderQueueReplace);
    auto1826B3ED_g = gv_xP_Minions[1];
    auto1826B3ED_u = UnitGroupCount(auto1826B3ED_g, c_unitCountAll);
    for (;; auto1826B3ED_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto1826B3ED_g, auto1826B3ED_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_ChangeUnitDamage(lv_itUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    }
    auto622528A0_g = gv_xP_Minions[2];
    auto622528A0_u = UnitGroupCount(auto622528A0_g, c_unitCountAll);
    for (;; auto622528A0_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto622528A0_g, auto622528A0_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_ChangeUnitDamage(lv_itUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    }
    libAIAI_gf_HeroAIDisableAIForPlayer(libStEx_gv_pLAYER_02_UTHER);
    UnitSetPosition(gv_heroHealerTank, PointFromId(1001190344), false);
    UnitSetFacing(gv_heroHealerTank, PointGetFacing(PointFromId(1001190344)), 0.0);
    UnitIssueOrder(gv_heroHealerTank, Order(AbilityCommand("HoldFire", 1)), c_orderQueueReplace);
    UnitSetPosition(gv_heroPlayer, PointFromId(326790953), false);
    UnitSetFacing(gv_heroPlayer, PointGetFacing(PointFromId(326790953)), 0.0);
    UnitIssueOrder(gv_heroPlayer, Order(AbilityCommand("HoldFire", 1)), c_orderQueueReplace);
    libGame_gf_MinionPauseUnpauseMinionSystem(true);
    autoC9A8DCC9_g = gv_xP_Minions[1];
    autoC9A8DCC9_u = UnitGroupCount(autoC9A8DCC9_g, c_unitCountAll);
    for (;; autoC9A8DCC9_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoC9A8DCC9_g, autoC9A8DCC9_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_PauseUnit(lv_itUnit, false);
    }
    auto4B94FA71_g = gv_xP_Minions[2];
    auto4B94FA71_u = UnitGroupCount(auto4B94FA71_g, c_unitCountAll);
    for (;; auto4B94FA71_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto4B94FA71_g, auto4B94FA71_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_PauseUnit(lv_itUnit, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XPSetup_Init () {
    gt_XPSetup = TriggerCreate("gt_XPSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: XP Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_XPCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(1, CameraInfoFromId(1989047846), 0.0, -1, 10.0, true);
    CameraApplyInfo(1, CameraInfoFromId(2102063399), (1.0 + 3.0 + 0.5 + 2.0 + 7.0), -1, 10.0, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(3.0, c_timeGame);
    libNtve_gf_PauseUnit(gv_heroPlayer, false);
    UnitIssueOrder(gv_heroPlayer, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(642017185)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_PauseUnit(gv_heroHealerTank, false);
    UnitIssueOrder(gv_heroHealerTank, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(642017185)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    libStEx_gf_DisplayVOMessageAtTop(StringExternal("Param/Value/E61C9E6A"), 7.0, true);
    Wait(6.5, c_timeGame);
    UnitIssueOrder(gv_heroHealerTank, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(UnitGroup(null, libCore_gv_cOMPUTER_TeamChaos, RegionCircle(UnitGetPosition(gv_heroHealerTank), 12.0), UnitFilter((1 << c_targetFilterMinion), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_heroHealerTank))), c_orderQueueReplace);
    libNtve_gf_ChangeUnitDamage(gv_heroHealerTank, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Full);
    TriggerEnable(gt_ExperienceGainedUnitDamaged, true);
    while (!((TriggerIsEnabled(gt_ExperienceGainedUnitDamaged) == false))) {
        Wait(0.0625, c_timeGame);
    }
    libNtve_gf_PauseUnit(gv_heroHealerTank, true);
    Wait(0.5, c_timeGame);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(1, CameraInfoFromId(122050202), (8.0 + 6.0 + 10.0), -1, 10.0, true);
    libStEx_gf_DisplayVOMessageAtTop(StringExternal("Param/Value/12F51138"), 7.0, true);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_HighlightExperienceBar, true, false);
    Wait(6.0, c_timeGame);
    Wait(1.0, c_timeGame);
    DialogControlSendAnimationEvent(gv_xP_TopBarUIPanel, PlayerGroupAll(), "LevelFlashStartBlue");
    libStEx_gf_DisplayVOMessageAtTop(StringExternal("Param/Value/BFF480CF"), 5.0, true);
    Wait(6.0, c_timeGame);
    DialogControlSendAnimationEvent(gv_xP_TopBarUIPanel, PlayerGroupAll(), "LevelFlashStopBlue");
    libStEx_gf_DisplayVOMessageAtTop(StringExternal("Param/Value/AEC17887"), 9.0, true);
    gf_BlinkExperienceBar(10.0);
    Wait(10.0, c_timeGame);
    gv_cinematicCompleted = true;
    StatEventCreate("Tutorial01_ExperienceCinematicCompleted");
    StatEventSend(StatEventLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XPCinematic_Init () {
    gt_XPCinematic = TriggerCreate("gt_XPCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: XP Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_XPCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;
    unit lv_itUnit;
    int lv_itPlayer;

    // Automatic Variable Declarations
    unitgroup auto66FBC0B4_g;
    int auto66FBC0B4_u;
    unitgroup autoCB27E708_g;
    int autoCB27E708_u;
    unitgroup autoE831BA94_g;
    int autoE831BA94_u;
    unitgroup auto45F3D3AA_g;
    int auto45F3D3AA_u;
    unitgroup autoB64790D8_g;
    int autoB64790D8_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == false)) {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }

    gv_xP_CinematicOver = true;
    auto66FBC0B4_g = gv_cinematicTempUnits;
    auto66FBC0B4_u = UnitGroupCount(auto66FBC0B4_g, c_unitCountAll);
    for (;; auto66FBC0B4_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto66FBC0B4_g, auto66FBC0B4_u);
        if (lv_itUnit == null) { break; }
        UnitRemove(lv_itUnit);
    }
    autoCB27E708_g = gv_cinematicHiddenUnits;
    autoCB27E708_u = UnitGroupCount(autoCB27E708_g, c_unitCountAll);
    for (;; autoCB27E708_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoCB27E708_g, autoCB27E708_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_itUnit, true);
    }
    autoE831BA94_g = gv_cinematicPausedUnits;
    autoE831BA94_u = UnitGroupCount(autoE831BA94_g, c_unitCountAll);
    for (;; autoE831BA94_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoE831BA94_g, autoE831BA94_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_PauseUnit(lv_itUnit, false);
    }
    TriggerExecute(gt_HideTopBarUI, true, false);
    libNtve_gf_StopPulsingScreenImage(1);
    libNtve_gf_HideScreenImage(false, 1);
    TimerPause(libGame_gv_gameTimer, false);
    libAIAI_gf_HeroAIEnableAIForPlayer(libStEx_gv_pLAYER_02_UTHER);
    if ((gv_xP_TopBarUIPanel != c_invalidDialogControlId)) {
        DialogControlSendAnimationEvent(gv_xP_TopBarUIPanel, PlayerGroupAll(), "EXPFlashStop");
        DialogControlSendAnimationEvent(gv_xP_TopBarUIPanel, PlayerGroupAll(), "LevelFlashStop");
        DialogControlSendAnimationEvent(gv_xP_TopBarUIPanel, PlayerGroupAll(), "LevelFlashStopBlue");
    }

    libNtve_gf_MakeUnitUncommandable(gv_heroPlayer, false);
    libNtve_gf_PauseUnit(gv_heroPlayer, false);
    libNtve_gf_PauseUnit(gv_heroHealerTank, false);
    UnitSelect(gv_heroPlayer, gv_pLAYER_01_USER, true);
    libGame_gf_MinionPauseUnpauseMinionSystem(false);
    libStEx_gf_ClearVOMessage();
    auto45F3D3AA_g = gv_xP_Minions[1];
    auto45F3D3AA_u = UnitGroupCount(auto45F3D3AA_g, c_unitCountAll);
    for (;; auto45F3D3AA_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto45F3D3AA_g, auto45F3D3AA_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_ChangeUnitDamage(lv_itUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    }
    autoB64790D8_g = gv_xP_Minions[2];
    autoB64790D8_u = UnitGroupCount(autoB64790D8_g, c_unitCountAll);
    for (;; autoB64790D8_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoB64790D8_g, autoB64790D8_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_ChangeUnitDamage(lv_itUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    }
    if ((gv_cinematicCompleted == false)) {
        lv_fadeDuration = 1.0;
        CameraPan(libStEx_gv_pLAYER_01_USER, UnitGetPosition(gv_heroPlayer), 0.0, -1, 10.0, false);
        CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
        UnitSetState(gv_heroPlayer, c_unitStateFidget, true);
        UnitSelect(gv_heroPlayer, libStEx_gv_pLAYER_01_USER, true);
        libStEx_gf_CinematicModeTutorial(false, PlayerGroupAll(), lv_fadeDuration);
        libStEx_gf_GlobalCinematicSettingTutorial(false);
        libStEx_gf_TurnCinematicCameraOnOff(gv_pLAYER_01_USER, false);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    }
    else {
        lv_fadeDuration = 1.5;
        CameraPan(libStEx_gv_pLAYER_01_USER, UnitGetPosition(gv_heroPlayer), 0.0, -1, 10.0, false);
        CameraApplyInfo(libStEx_gv_pLAYER_01_USER, CameraInfoDefault(), lv_fadeDuration, -1, 10.0, false);
        UnitSetState(gv_heroPlayer, c_unitStateFidget, true);
        UnitSelect(gv_heroPlayer, libStEx_gv_pLAYER_01_USER, true);
        libStEx_gf_CinematicModeTutorial(false, PlayerGroupAll(), lv_fadeDuration);
        libStEx_gf_GlobalCinematicSettingTutorial(false);
        libStEx_gf_TurnCinematicCameraOnOff(gv_pLAYER_01_USER, false);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    }
    UnitIssueOrder(gv_heroPlayer, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    if ((UnitGetType(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit) != "HeroTyrande")) {
        AddUnitOfInterest(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit, 0.0, 0.0, "TutorialTyrandeEscort", libNtve_ge_GoalTeam_Order, 0);
    }
    else {
        AddUnitOfInterest(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit, 0.0, 0.0, "TutorialMuradinEscort", libNtve_ge_GoalTeam_Order, 0);
    }
    libCore_gv_sYSXPOn = true;
    libStEx_gf_AddInGameTip(libStEx_ge_InGameTip_Experience);
    TriggerExecute(gt_CastingAbilitiesHint, true, false);
    TriggerExecute(gt_ObjectiveLevelUpCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XPCleanup_Init () {
    gt_XPCleanup = TriggerCreate("gt_XPCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Experience Gained Unit Damaged
//--------------------------------------------------------------------------------------------------
bool gt_ExperienceGainedUnitDamaged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() == gv_heroPlayer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    FloatingCombatElementCreateTextAtPoint(PlayerGroupSingle(gv_pLAYER_01_USER), "FloatingCombatElements/FloatingCombatMediumAmountReceived", "XPState", UnitGetPosition(EventUnit()), StringExternal("Param/Value/B2341BF9"), libNtve_gv_FloatingCombatTextAutoRandomSeed);
    libNtve_gf_PauseUnit(EventUnit(), false);
    UnitKill(EventUnit());
    UnitIssueOrder(gv_heroPlayer, Order(AbilityCommand("HoldFire", 1)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExperienceGainedUnitDamaged_Init () {
    gt_ExperienceGainedUnitDamaged = TriggerCreate("gt_ExperienceGainedUnitDamaged_Func");
    TriggerEnable(gt_ExperienceGainedUnitDamaged, false);
    TriggerAddEventUnitDamaged(gt_ExperienceGainedUnitDamaged, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Highlight Experience Bar
//--------------------------------------------------------------------------------------------------
bool gt_HighlightExperienceBar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_scale_C = 1.2;
    fixed lv_scale;
    const fixed lv_x1_C = 0.0;
    const fixed lv_y1_C = 200.0;
    const fixed lv_x2_C = 0.0;
    const fixed lv_y2_C = 0.0;
    fixed lv_x;
    fixed lv_y;
    const fixed lv_sizeX_C = 661.0;
    const fixed lv_sizeY_C = 110.0;
    fixed lv_sizeX;
    fixed lv_sizeY;
    fixed lv_itTime;
    const fixed lv_time_C = 16.0;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_x = lv_x1_C;
    lv_y = lv_x2_C;
    lv_sizeX = lv_sizeX_C;
    lv_sizeY = lv_sizeY_C;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_DisplayTopBarUI, true, false);
    DialogControlSendAnimationEvent(gv_xP_TopBarUIPanel, PlayerGroupAll(), "TutorialTopBarHighlight");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HighlightExperienceBar_Init () {
    gt_HighlightExperienceBar = TriggerCreate("gt_HighlightExperienceBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start EXP Arrow Flash
//--------------------------------------------------------------------------------------------------
bool gt_StartEXPArrowFlash_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    DialogControlSendAnimationEvent(gv_xP_TopBarUIPanel, PlayerGroupAll(), "EXPFlashStart");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartEXPArrowFlash_Init () {
    gt_StartEXPArrowFlash = TriggerCreate("gt_StartEXPArrowFlash_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level Up Q
//--------------------------------------------------------------------------------------------------
bool gt_LevelUpQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_exp;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_enabled == true))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(gv_heroPlayer, null) >= 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_ObjectiveLevelUpComplete, true, false);
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libStEx_gf_DisplayVOMessageGamePaused(StringExternal("Param/Value/3D25E7CE"), libStEx_ge_SE_VOMessageType_level, true);
    TriggerQueueExit();
    TriggerEnable(gt_RegenGlobeReminder, true);
    TriggerEnable(gt_RegenGlobePickedUp, true);
    TriggerEnable(gt_RegenGlobeDies, true);
    UnitBehaviorAdd(gv_heroHealerTank, "RegenGlobeIgnoreBehavior", gv_heroHealerTank, 1);
    RemovePointOfInterest(PointFromName("Lane 2 - Waypoint 17"), "TutorialArthasBeacon", libNtve_ge_GoalTeam_Chaos);
    RemovePointOfInterest(PointFromName("Lane 2 - Waypoint 17"), "TutorialGreymaneBeacon", libNtve_ge_GoalTeam_Chaos);
    RemovePointOfInterest(PointFromName("Lane 1 - Waypoint 14"), "TutorialStitchesBeacon", libNtve_ge_GoalTeam_Chaos);
    RemovePointOfInterest(PointFromName("Lane 1 - Waypoint 14"), "TutorialGuldanBeacon", libNtve_ge_GoalTeam_Chaos);
    RemovePointOfInterest(PointFromName("Lane 3 - Waypoint 14"), "TutorialTychusBeacon", libNtve_ge_GoalTeam_Chaos);
    while (!((UnitXPGetCurrentLevel(gv_heroPlayer, null) >= 4))) {
        Wait(1.0, c_timeGame);
    }
    Wait(15.0, c_timeGame);
    TriggerExecute(gt_TalentsReminder, true, false);
    while (!((UnitXPGetCurrentLevel(gv_heroPlayer, null) >= 6))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_GotoWatchtowerQ, true, false);
    TriggerEnable(gt_Level10gained, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LevelUpQ_Init () {
    gt_LevelUpQ = TriggerCreate("gt_LevelUpQ_Func");
    TriggerAddEventUnitGainLevel(gt_LevelUpQ, UnitRefFromVariable("gv_heroPlayer"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Level Up Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveLevelUpCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveLevelUpCreate_Init () {
    gt_ObjectiveLevelUpCreate = TriggerCreate("gt_ObjectiveLevelUpCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Level Up Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveLevelUpComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveLevelUpCreate, true, false);
    SoundPlayForPlayer(SoundLink("UI_ObjectiveComplete", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(6.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveLevelUpComplete_Init () {
    gt_ObjectiveLevelUpComplete = TriggerCreate("gt_ObjectiveLevelUpComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Unlock Talent Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveUnlockTalentCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveUnlockTalentCreate_Init () {
    gt_ObjectiveUnlockTalentCreate = TriggerCreate("gt_ObjectiveUnlockTalentCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Unlock Talent Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveUnlockTalentComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveUnlockTalentCreate, true, false);
    SoundPlayForPlayer(SoundLink("UI_ObjectiveComplete", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(6.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveUnlockTalentComplete_Init () {
    gt_ObjectiveUnlockTalentComplete = TriggerCreate("gt_ObjectiveUnlockTalentComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Display Top Bar UI
//--------------------------------------------------------------------------------------------------
bool gt_DisplayTopBarUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(1, 1, c_anchorCenter, 0, 0, true);
    gv_xP_TopBarUIDlg = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "TopBar/TopBarPanelTemplate");
    gv_xP_TopBarUIPanel = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1000, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplayTopBarUI_Init () {
    gt_DisplayTopBarUI = TriggerCreate("gt_DisplayTopBarUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide Top Bar UI
//--------------------------------------------------------------------------------------------------
bool gt_HideTopBarUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_xP_TopBarUIDlg != c_invalidDialogId)) {
        DialogSetVisible(gv_xP_TopBarUIDlg, PlayerGroupAll(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HideTopBarUI_Init () {
    gt_HideTopBarUI = TriggerCreate("gt_HideTopBarUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Go to Watchtower Q
//--------------------------------------------------------------------------------------------------
bool gt_GotoWatchtowerQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(3.0, c_timeGame);
    gf_TurnRightClickMonitorOnOff(false);
    gv_goToWatchtowerStarted = true;
    while (!((UnitIsAlive(gv_heroPlayer) == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueEnter();
    libStEx_gf_DisplayVOMessageGamePaused(StringExternal("Param/Value/967A5F1A"), libStEx_ge_SE_VOMessageType_blank, true);
    libStEx_gf_AddInGameTip(libStEx_ge_InGameTip_Watchtowers);
    TriggerExecute(gt_ActivateWatchtowers, true, false);
    TriggerEnable(gt_WatchtowerCapturedMonitor, true);
    libNtve_gf_CreatePingFacingAngleWithType(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(38)), Color(0.00, 100.00, 0.00), 0.0, 270.0, -1, -1);
    gv_goToWatchtowerPing = PingLastCreated();
    libStEx_gf_DisplayHintMessage(StringExternal("Param/Value/BAAF12F9"), true, 1.0);
    TriggerExecute(gt_WatchtowerSuggestingPath, true, false);
    SoundPlayForPlayer(SoundLink("UI_Tutorial01_Suggesting_Path", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_ObjectiveCaptureWatchtowerCreate, true, false);
    TriggerQueueExit();
    TriggerExecute(gt_MountSuggestion, true, false);
    TriggerExecute(gt_AutomationMovetoWatchtower, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GotoWatchtowerQ_Init () {
    gt_GotoWatchtowerQ = TriggerCreate("gt_GotoWatchtowerQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Watchtowers
//--------------------------------------------------------------------------------------------------
bool gt_ActivateWatchtowers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itWatchtower;

    // Automatic Variable Declarations
    int auto3FCDD580_ae;
    const int auto3FCDD580_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto3FCDD580_ae = libGame_gv_watchTowersCurrentCount;
    lv_itWatchtower = 1;
    for ( ; ( (auto3FCDD580_ai >= 0 && lv_itWatchtower <= auto3FCDD580_ae) || (auto3FCDD580_ai < 0 && lv_itWatchtower >= auto3FCDD580_ae) ) ; lv_itWatchtower += auto3FCDD580_ai ) {
        libGame_gf_CapturePointEnable(libGame_gv_watchTowers[lv_itWatchtower].lv_capturePointIndex);
        libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_itWatchtower].lv_captureBeaconUnit, "Signal Show");
        libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_itWatchtower].lv_watchTowerUnit, "Signal Show");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateWatchtowers_Init () {
    gt_ActivateWatchtowers = TriggerCreate("gt_ActivateWatchtowers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Watchtower Captured Monitor
//--------------------------------------------------------------------------------------------------
bool gt_WatchtowerCapturedMonitor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itWatchTower;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_watchTowers[libGame_gf_CapturePointChangesOwnerCapturePointIndex()].lv_watchTowerUnit == UnitFromId(38)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_goToWatchtowerReticle);
    TextTagDestroy(gv_goToWatchtowerTextTag);
    libStEx_gf_HighlightCommandButton(false, libStEx_ge_TutorialCommandButton_Mount);
    libStEx_gf_ClearHintMessage();
    TriggerExecute(gt_ObjectiveCaptureWatchtowerComplete, true, false);
    TriggerExecute(gt_MercCampStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WatchtowerCapturedMonitor_Init () {
    gt_WatchtowerCapturedMonitor = TriggerCreate("gt_WatchtowerCapturedMonitor_Func");
    TriggerEnable(gt_WatchtowerCapturedMonitor, false);
    libGame_gf_CapturePointChangesOwner(gt_WatchtowerCapturedMonitor);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Watchtower Suggesting Path
//--------------------------------------------------------------------------------------------------
bool gt_WatchtowerSuggestingPath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_watchtowerPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_watchtowerPoint = UnitGetPosition(UnitFromId(38));

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PathCreateForUnit(libCore_gv_playerGroupFromPlayer[gv_pLAYER_01_USER], gv_heroPlayer);
    PathSetDestinationPoint(PathLastCreated(), lv_watchtowerPoint);
    PathSetVisible(PathLastCreated(), c_pathLocationAll, true);
    PathSetStepModel(PathLastCreated(), c_pathLocationWorld, "Assets\\Units\\Test\\InvisibleUnit\\InvisibleUnit.m3");
    PathSetLineTexture(PathLastCreated(), c_pathLocationWorld, "Assets\\Textures\\ui_tutorial_guidearrow.dds");
    PathSetLineTileLength(PathLastCreated(), c_pathLocationWorld, 2.578);
    PathSetLineWidth(PathLastCreated(), c_pathLocationWorld, 1.5);
    PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "Assets\\Textures\\storm_waypointline.dds");
    while (true) {
        if ((DistanceBetweenPoints(UnitGetPosition(gv_heroPlayer), lv_watchtowerPoint) <= 17.0) && (gv_goToWatchtowerReticle == null) && (gv_goToWatchtowerTextTag == c_textTagNone)) {
            libCore_gf_CreateReticleEffectAndTextTagAtPoint(libCore_ge_ReticleType_MainObjective, libCore_ge_ReticleSize_Medium, StringExternal("Param/Value/8D47BCF3"), lv_watchtowerPoint);
            gv_goToWatchtowerReticle = libNtve_gf_ActorLastCreated();
            gv_goToWatchtowerTextTag = TextTagLastCreated();
            TextTagFogofWar(TextTagLastCreated(), false);
            TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeMask);
            break;
        }

        if ((DistanceBetweenPoints(UnitGetPosition(gv_heroPlayer), lv_watchtowerPoint) <= libCore_gv_data_WatchTower_CaptureRadius_C)) {
            break;
        }

        if ((UnitIsAlive(gv_heroPlayer) == true)) {
            PathSetSourceUnit(PathLastCreated(), gv_heroPlayer);
            PathSetVisible(PathLastCreated(), c_pathLocationAll, true);
        }
        else {
            PathSetVisible(PathLastCreated(), c_pathLocationAll, false);
        }
        Wait(0.0625, c_timeGame);
    }
    PathDestroy(PathLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WatchtowerSuggestingPath_Init () {
    gt_WatchtowerSuggestingPath = TriggerCreate("gt_WatchtowerSuggestingPath_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Capture Watchtower Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCaptureWatchtowerCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCaptureWatchtowerCreate_Init () {
    gt_ObjectiveCaptureWatchtowerCreate = TriggerCreate("gt_ObjectiveCaptureWatchtowerCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Capture Watchtower Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCaptureWatchtowerComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCaptureWatchtowerCreate, true, false);
    SoundPlayForPlayer(SoundLink("UI_ObjectiveComplete", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    PingDestroy(gv_goToWatchtowerPing);
    gv_goToWatchtowerPing = c_invalidPingId;
    StatEventCreate("Tutorial01_WatchTowerDone");
    StatEventSend(StatEventLastCreated());
    Wait(6.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCaptureWatchtowerComplete_Init () {
    gt_ObjectiveCaptureWatchtowerComplete = TriggerCreate("gt_ObjectiveCaptureWatchtowerComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Merc Camp Start
//--------------------------------------------------------------------------------------------------
bool gt_MercCampStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itCamp;
    int lv_timeIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AddUnitOfInterest(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, 0.0, 0.0, "TutorialGreymaneEscort", libNtve_ge_GoalTeam_Chaos, 0);
    AddUnitOfInterest(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, 0.0, 0.0, "TutorialStitchesEscort", libNtve_ge_GoalTeam_Chaos, 0);
    if ((UnitGetType(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit) != "HeroMuradin")) {
        AddUnitOfInterest(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core, 0.0, 0.0, "TutorialMuradinEscort", libNtve_ge_GoalTeam_Order, 0);
    }
    else {
        AddUnitOfInterest(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core, 0.0, 0.0, "TutorialJainaEscort", libNtve_ge_GoalTeam_Order, 0);
    }
    TriggerExecute(gt_ActivateMercCamps, true, false);
    while (!((libMapM_gv_jungleCreepCamps[gv_campSiegeGiant].lv_aIState == libMapM_ge_JungleCampStates_Idle))) {
        Wait(0.0625, c_timeGame);
    }
    gv_abilitySuggestingPaused = true;
    TriggerExecute(gt_MercCampCinematic, true, true);
    TriggerExecute(gt_MercCampCleanup, true, true);
    TriggerExecute(gt_AutomationMovetoMercCamp, true, false);
    while (true) {
        if ((libNtve_gf_UnitInRegion(gv_heroPlayer, RegionFromId(24)) == true)) {
            gv_abilitySuggestingPaused = false;
            break;
        }

        if ((libMapM_gv_jungleCreepCamps[gv_campSiegeGiant].lv_aIState == libMapM_ge_JungleCampStates_Dead)) {
            break;
        }

        lv_timeIndex += 1;
        if ((ModI(lv_timeIndex, 30) == 0)) {
            MinimapPing(PlayerGroupAll(), libMapM_gv_jungleCreepCamps[gv_campSiegeGiant].lv_mapDataCampCaptainSpawnPoint, 4.0, Color(0.00, 100.00, 0.00));
        }

        if ((lv_timeIndex == 90)) {
            lv_timeIndex = 0;
        }

        Wait(0.25, c_timeGame);
    }
    gv_campSiegeGiantClearStarted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MercCampStart_Init () {
    gt_MercCampStart = TriggerCreate("gt_MercCampStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Merc Camp Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MercCampCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    camerainfo lv_camera;
    fixed lv_xPValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libStEx_gf_CinematicModeTutorial(true, libCore_gv_playerGroupFromPlayer[1], c_transitionDurationImmediate);
    libStEx_gf_GlobalCinematicSettingTutorial(true);
    VisEnable(c_visTypeFog, true);
    libStEx_gf_TurnCinematicCameraOnOff(gv_pLAYER_01_USER, true);
    CinematicFade(false, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gv_cinematicCompleted = false;
    libAIAI_gf_HeroAIDisableAIForPlayer(gv_pLAYER_02_HEALERTANK);
    libAIAI_gf_HeroAIDisableAIForPlayer(gv_pLAYER_03_TANKDPS);
    libAIAI_gf_HeroAIDisableAIForPlayer(gv_pLAYER_04_DEMONHUNTER);
    libAIAI_gf_HeroAIDisableAIForPlayer(gv_pLAYER_05_NOVA);
    libNtve_gf_MakeUnitUncommandable(gv_heroPlayer, true);
    UnitSetPropertyFixed(gv_heroPlayer, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_heroPlayer, c_unitPropEnergyPercent, 100.0);
    UnitIssueOrder(gv_heroPlayer, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_heroPlayer, PointFromId(1578221072), false);
    UnitSetFacing(gv_heroPlayer, AngleBetweenPoints(UnitGetPosition(gv_heroPlayer), PointFromId(2064947496)), 0.0);
    UnitSetPosition(gv_heroHealerTank, PointFromId(2064947496), false);
    UnitSetFacing(gv_heroHealerTank, PointGetFacing(PointFromId(2064947496)), 0.0);
    UnitSetPropertyFixed(gv_heroHealerTank, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_heroHealerTank, c_unitPropEnergyPercent, 100.0);
    libNtve_gf_SendActorMessageToUnit(gv_heroHealerTank, "Signal ClearReadyState");
    libCore_gf_ClearAllNonpermanentBehaviorsonUnit(gv_heroHealerTank);
    UnitIssueOrder(gv_heroHealerTank, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_PauseUnit(gv_heroHealerTank, true);
    UnitSetPosition(gv_heroDemonHunter, PointFromId(1817883191), false);
    UnitSetFacing(gv_heroDemonHunter, PointGetFacing(PointFromId(1817883191)), 0.0);
    UnitSetPropertyFixed(gv_heroDemonHunter, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_heroDemonHunter, c_unitPropEnergyPercent, 100.0);
    libNtve_gf_SendActorMessageToUnit(gv_heroDemonHunter, "Signal ClearReadyState");
    libCore_gf_ClearAllNonpermanentBehaviorsonUnit(gv_heroDemonHunter);
    UnitBehaviorAdd(gv_heroDemonHunter, "Mounted", gv_heroDemonHunter, 1);
    UnitIssueOrder(gv_heroDemonHunter, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(PointFromName("Merc Camp - Blue - Medium 1 - Captain"), 6.0, 4.0)), c_orderQueueReplace);
    libNtve_gf_PauseUnit(gv_heroDemonHunter, true);
    UnitSetPosition(gv_heroNova, PointFromId(5016302), false);
    UnitSetFacing(gv_heroNova, PointGetFacing(PointFromId(5016302)), 0.0);
    UnitSetPropertyFixed(gv_heroNova, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_heroNova, c_unitPropEnergyPercent, 100.0);
    libNtve_gf_SendActorMessageToUnit(gv_heroNova, "Signal ClearReadyState");
    libCore_gf_ClearAllNonpermanentBehaviorsonUnit(gv_heroNova);
    UnitBehaviorAdd(gv_heroNova, "Mounted", gv_heroNova, 1);
    UnitIssueOrder(gv_heroNova, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(PointFromName("Merc Camp - Blue - Medium 1 - Captain"), -6.0, 4.0)), c_orderQueueReplace);
    libNtve_gf_PauseUnit(gv_heroNova, true);
    UnitSetPosition(gv_heroTankDps, PointFromName("HeroStart_Tyrael"), false);
    UnitSetFacing(gv_heroTankDps, AngleBetweenPoints(UnitGetPosition(gv_heroTankDps), PointFromId(2064947496)), 0.0);
    UnitSetPropertyFixed(gv_heroTankDps, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_heroTankDps, c_unitPropEnergyPercent, 100.0);
    libNtve_gf_SendActorMessageToUnit(gv_heroNova, "Signal ClearReadyState");
    libCore_gf_ClearAllNonpermanentBehaviorsonUnit(gv_heroNova);
    UnitBehaviorAdd(gv_heroTankDps, "Mounted", gv_heroTankDps, 1);
    UnitIssueOrder(gv_heroTankDps, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_PauseUnit(gv_heroTankDps, true);
    if ((UnitXPGetCurrentLevel(gv_heroPlayer, null) < 8)) {
        lv_xPValue = (libCore_gf_GetTotalXPForLevel((UnitXPGetCurrentLevel(gv_heroPlayer, null) + 1)) - UnitGetPropertyFixed(libGame_gv_players[gv_pLAYER_01_USER].lv_heroUnit, c_unitPropXP, c_unitPropCurrent));
        libGame_gf_GrantXPToPlayer(lv_xPValue, gv_pLAYER_01_USER, libGame_ge_XPSources_Debug);
        libGame_gf_GrantXPToPlayer(lv_xPValue, gv_pLAYER_02_HEALERTANK, libGame_ge_XPSources_Debug);
        libGame_gf_GrantXPToPlayer(lv_xPValue, gv_pLAYER_03_TANKDPS, libGame_ge_XPSources_Debug);
        libGame_gf_GrantXPToPlayer(lv_xPValue, gv_pLAYER_04_DEMONHUNTER, libGame_ge_XPSources_Debug);
        libGame_gf_GrantXPToPlayer(lv_xPValue, gv_pLAYER_05_NOVA, libGame_ge_XPSources_Debug);
    }

    VisEnable(c_visTypeFog, true);
    VisEnable(c_visTypeMask, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2123273060), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(184744862), 9.5, -1, 10.0, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    CatalogFieldValueSet(c_gameCatalogUnit, "XelNagaWatchTower", "Sight", UnitGetOwner(UnitFromId(38)), "3");
    CinematicFade(true, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libStEx_gf_DisplayVOMessage(StringExternal("Param/Value/DB7185A9"), 7.0, true);
    Wait(0.5, c_timeGame);
    CatalogFieldValueSet(c_gameCatalogUnit, "XelNagaWatchTower", "Sight", UnitGetOwner(UnitFromId(38)), "17");
    UnitCreateEffectUnit(UnitFromId(38), "WatchtowerRevealDummy", UnitFromId(38));
    Wait(6.0, c_timeGame);
    VisEnable(c_visTypeFog, false);
    VisEnable(c_visTypeMask, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(264753252), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1686227739), (9.0 + 1.5), -1, 10.0, true);
    libStEx_gf_DisplayVOMessage(StringExternal("Param/Value/B75006E8"), 8.0, true);
    libNtve_gf_PauseUnit(gv_heroHealerTank, false);
    libNtve_gf_PauseUnit(gv_heroDemonHunter, false);
    libNtve_gf_PauseUnit(gv_heroNova, false);
    libNtve_gf_PauseUnit(gv_heroTankDps, false);
    Wait(9.0, c_timeGame);
    lv_camera = libNtve_gf_CopyOfCameraObject(CameraInfoDefault());
    CameraInfoSetTarget(lv_camera, UnitGetPosition(gv_heroPlayer));
    CameraApplyInfo(gv_pLAYER_01_USER, lv_camera, 2.0, -1, 10.0, true);
    Wait(2.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MercCampCinematic_Init () {
    gt_MercCampCinematic = TriggerCreate("gt_MercCampCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Merc Camp Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MercCampCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libStEx_gf_ClearVOMessage();
    CatalogFieldValueSet(c_gameCatalogUnit, "XelNagaWatchTower", "Sight", UnitGetOwner(UnitFromId(38)), "17");
    if ((gv_cinematicCompleted == false)) {
        CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        libNtve_gf_PauseUnit(gv_heroHealerTank, false);
        libNtve_gf_PauseUnit(gv_heroTankDps, false);
        libNtve_gf_PauseUnit(gv_heroDemonHunter, false);
        libNtve_gf_PauseUnit(gv_heroNova, false);
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10.0, false);
        CameraPan(gv_pLAYER_01_USER, UnitGetPosition(gv_heroPlayer), 0.0, -1, 10.0, false);
        CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    }
    else {
        libStEx_gf_TurnCinematicCameraOnOff(gv_pLAYER_01_USER, false);
    }
    libStEx_gf_CinematicModeTutorial(false, libCore_gv_playerGroupFromPlayer[1], c_transitionDurationDefault);
    libStEx_gf_GlobalCinematicSettingTutorial(false);
    libStEx_gf_TurnCinematicCameraOnOff(gv_pLAYER_01_USER, false);
    libNtve_gf_CreatePingFacingAngleWithType(PlayerGroupAll(), "PingObjective", libMapM_gv_jungleCreepCamps[gv_campSiegeGiant].lv_mapDataCampCaptainSpawnPoint, Color(0.00, 100.00, 0.00), 0.0, 270.0, -1, -1);
    gv_campSiegeGiantPing = PingLastCreated();
    gv_campSiegeGiantSuggested = true;
    TriggerExecute(gt_MercCampSuggestingPath, true, false);
    SoundPlayForPlayer(SoundLink("UI_Tutorial01_Suggesting_Path", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UnitSelect(gv_heroPlayer, gv_pLAYER_01_USER, true);
    libNtve_gf_MakeUnitUncommandable(gv_heroPlayer, false);
    TriggerEnable(gt_MercCampAggroed, true);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_ObjectiveCaptureCampCreate, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MercCampCleanup_Init () {
    gt_MercCampCleanup = TriggerCreate("gt_MercCampCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Merc Camps
//--------------------------------------------------------------------------------------------------
bool gt_ActivateMercCamps_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itCamp;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libMapM_gv_jungleCreepCamps[1].lv_stateCreepBirthTimer, 0.0625, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateMercCamps_Init () {
    gt_ActivateMercCamps = TriggerCreate("gt_ActivateMercCamps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Merc Camp Suggesting Path
//--------------------------------------------------------------------------------------------------
bool gt_MercCampSuggestingPath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PathCreateForUnit(libCore_gv_playerGroupFromPlayer[gv_pLAYER_01_USER], gv_heroPlayer);
    PathSetDestinationPoint(PathLastCreated(), PointFromId(180));
    PathSetVisible(PathLastCreated(), c_pathLocationAll, true);
    PathSetStepModel(PathLastCreated(), c_pathLocationWorld, "Assets\\Units\\Test\\InvisibleUnit\\InvisibleUnit.m3");
    PathSetLineTexture(PathLastCreated(), c_pathLocationWorld, "Assets\\Textures\\ui_tutorial_guidearrow.dds");
    PathSetLineTileLength(PathLastCreated(), c_pathLocationWorld, 2.578);
    PathSetLineWidth(PathLastCreated(), c_pathLocationWorld, 1.5);
    PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "Assets\\Textures\\storm_waypointline.dds");
    while (true) {
        if ((gv_campSiegeGiantClearStarted == true)) {
            break;
        }

        if ((UnitIsAlive(gv_heroPlayer) == true)) {
            PathSetSourceUnit(PathLastCreated(), gv_heroPlayer);
            PathSetVisible(PathLastCreated(), c_pathLocationAll, true);
        }
        else {
            PathSetVisible(PathLastCreated(), c_pathLocationAll, false);
        }
        Wait(0.0625, c_timeGame);
    }
    PathDestroy(PathLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MercCampSuggestingPath_Init () {
    gt_MercCampSuggestingPath = TriggerCreate("gt_MercCampSuggestingPath_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Merc Camp Cleared
//--------------------------------------------------------------------------------------------------
bool gt_MercCampCleared_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libMapM_gf_JungleGetCampIndexFromDefenderIndex(libGame_gf_JungleDefenderAIAllDefendersKilledIndex()) == gv_campSiegeGiant))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_MercCampCaptured, true);
    TriggerQueueEnter();
    if ((gv_campSiegeGiantCaptured == true)) {
        TriggerExecute(gt_ObjectiveCaptureCampComplete, true, false);
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((gv_campSiegeGiantCaptured == false)) {
        if ((libMapM_gv_jungleCreepCamps[gv_campSiegeGiant].lv_aIState != libMapM_ge_JungleCampStates_Dead) && (DistanceBetweenPoints(UnitGetPosition(gv_heroPlayer), libMapM_gv_jungleCreepCamps[gv_campSiegeGiant].lv_mapDataCampCaptainSpawnPoint) > libMapM_gv_bALJungleCampCaptureRadius)) {
            libCore_gf_CreateReticleEffectAndTextTagAtPoint(libCore_ge_ReticleType_MainObjective, libCore_ge_ReticleSize_Medium, StringExternal("Param/Value/8ADF8857"), libMapM_gv_jungleCreepCamps[gv_campSiegeGiant].lv_mapDataCampCaptainSpawnPoint);
            gv_campSiegeGiantReticle = libNtve_gf_ActorLastCreated();
            gv_campSiegeGiantTextTag = TextTagLastCreated();
        }

    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MercCampCleared_Init () {
    gt_MercCampCleared = TriggerCreate("gt_MercCampCleared_Func");
    libGame_gf_JungleDefenderAIAllDefendersKilled(gt_MercCampCleared);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Merc Camp Captured
//--------------------------------------------------------------------------------------------------
bool gt_MercCampCaptured_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_capturedPlayers;
    int lv_itPlayer;
    fixed lv_xPValue;

    // Automatic Variable Declarations
    const int autoF1493FB6_ae = libCore_gv_bALMaxPlayersOnATeam;
    const int autoF1493FB6_ai = 1;
    unitgroup autoE828C28B_g;
    int autoE828C28B_u;
    unit autoE828C28B_var;

    // Variable Initialization
    lv_capturedPlayers = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gf_MercCampCapturedIndex() == gv_campSiegeGiant))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_campSiegeGiantCaptured = true;
    gv_campSiegeGiantSuggested = false;
    TriggerExecute(gt_ObjectiveCaptureCampComplete, true, false);
    PingDestroy(gv_campSiegeGiantPing);
    libNtve_gf_KillModel(gv_campSiegeGiantReticle);
    TextTagDestroy(gv_campSiegeGiantTextTag);
    lv_itPlayer = 2;
    for ( ; ( (autoF1493FB6_ai >= 0 && lv_itPlayer <= autoF1493FB6_ae) || (autoF1493FB6_ai < 0 && lv_itPlayer >= autoF1493FB6_ae) ) ; lv_itPlayer += autoF1493FB6_ai ) {
        AIRequiredLane(libGame_gv_players[lv_itPlayer].lv_heroUnit, -1);
        Wait(0.125, c_timeGame);
        AIRequiredLane(libGame_gv_players[lv_itPlayer].lv_heroUnit, 1);
        Wait(0.125, c_timeGame);
    }
    Wait(1.0, c_timeGame);
    gv_siegeGiantsMercs = UnitGroup("MercLanerSiegeGiant", libCore_gv_cOMPUTER_TeamOrder, RegionCircle(PointFromId(180), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE828C28B_g = gv_siegeGiantsMercs;
    autoE828C28B_u = UnitGroupCount(autoE828C28B_g, c_unitCountAll);
    for (;; autoE828C28B_u -= 1) {
        autoE828C28B_var = UnitGroupUnitFromEnd(autoE828C28B_g, autoE828C28B_u);
        if (autoE828C28B_var == null) { break; }
        AddUnitOfInterest(autoE828C28B_var, 0.0, 0.0, "EscortMercs", libNtve_ge_GoalTeam_Order, 0);
    }
    Wait(1.0, c_timeGame);
    TriggerQueueEnter();
    if ((UnitXPGetCurrentLevel(gv_heroPlayer, null) < 9)) {
        lv_xPValue = (libCore_gf_GetTotalXPForLevel((UnitXPGetCurrentLevel(gv_heroPlayer, null) + 1)) - UnitGetPropertyFixed(libGame_gv_players[gv_pLAYER_01_USER].lv_heroUnit, c_unitPropXP, c_unitPropCurrent));
        libGame_gf_GrantXPToPlayer(lv_xPValue, gv_pLAYER_01_USER, libGame_ge_XPSources_Debug);
        libGame_gf_GrantXPToPlayer(lv_xPValue, gv_pLAYER_02_HEALERTANK, libGame_ge_XPSources_Debug);
        libGame_gf_GrantXPToPlayer(lv_xPValue, gv_pLAYER_03_TANKDPS, libGame_ge_XPSources_Debug);
        libGame_gf_GrantXPToPlayer(lv_xPValue, gv_pLAYER_04_DEMONHUNTER, libGame_ge_XPSources_Debug);
        libGame_gf_GrantXPToPlayer(lv_xPValue, gv_pLAYER_05_NOVA, libGame_ge_XPSources_Debug);
    }

    libStEx_gf_DisplayVOMessageGamePaused(StringExternal("Param/Value/D880587A"), libStEx_ge_SE_VOMessageType_blank, true);
    libStEx_gf_AddInGameTip(libStEx_ge_InGameTip_MercenaryCamps);
    TriggerExecute(gt_EscortMercsStart, true, false);
    TriggerQueueExit();
    libNtve_gf_ChangeUnitDamage(gv_heroHealerTank, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega);
    libNtve_gf_ChangeUnitDamage(gv_heroTankDps, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega);
    Wait(10.0, c_timeGame);
    gv_abilitySuggestingPaused = false;
    TriggerEnable(gt_EnemyHeroLongerRespawn, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MercCampCaptured_Init () {
    gt_MercCampCaptured = TriggerCreate("gt_MercCampCaptured_Func");
    TriggerEnable(gt_MercCampCaptured, false);
    libGame_gf_MercCampCaptured(gt_MercCampCaptured);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Merc Camp Aggroed
//--------------------------------------------------------------------------------------------------
bool gt_MercCampAggroed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MercDefenderSiegeGiant"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    RemoveUnitOfInterest(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit, "TutorialTyrandeEscort", libNtve_ge_GoalTeam_Order);
    RemoveUnitOfInterest(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit, "TutorialMuradinEscort", libNtve_ge_GoalTeam_Order);
    Wait(0.125, c_timeGame);
    libAIAI_gf_HeroAIEnableAIForPlayer(gv_pLAYER_02_HEALERTANK);
    libAIAI_gf_HeroAIEnableAIForPlayer(gv_pLAYER_03_TANKDPS);
    libAIAI_gf_HeroAIEnableAIForPlayer(gv_pLAYER_04_DEMONHUNTER);
    libAIAI_gf_HeroAIEnableAIForPlayer(gv_pLAYER_05_NOVA);
    Wait(0.125, c_timeGame);
    if ((UnitGetType(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit) != "HeroTyrande")) {
        AddUnitOfInterest(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit, 0.0, 0.0, "TutorialTyrandeEscort", libNtve_ge_GoalTeam_Order, 0);
    }
    else {
        AddUnitOfInterest(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit, 0.0, 0.0, "TutorialMuradinEscort", libNtve_ge_GoalTeam_Order, 0);
    }
    AddUnitOfInterest(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit, 0.0, 0.0, "TutorialNovaEscort", libNtve_ge_GoalTeam_Order, 0);
    AddUnitOfInterest(libGame_gv_players[libStEx_gv_pLAYER_01_USER].lv_heroUnit, 0.0, 0.0, "TutorialVallaEscort", libNtve_ge_GoalTeam_Order, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MercCampAggroed_Init () {
    gt_MercCampAggroed = TriggerCreate("gt_MercCampAggroed_Func");
    TriggerEnable(gt_MercCampAggroed, false);
    TriggerAddEventUnitDamaged(gt_MercCampAggroed, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Capture Camp Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCaptureCampCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCaptureCampCreate_Init () {
    gt_ObjectiveCaptureCampCreate = TriggerCreate("gt_ObjectiveCaptureCampCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Capture Camp Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCaptureCampComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCaptureCampCreate, true, false);
    SoundPlayForPlayer(SoundLink("UI_ObjectiveComplete", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    StatEventCreate("Tutorial01_MercCampDone");
    StatEventSend(StatEventLastCreated());
    Wait(6.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCaptureCampComplete_Init () {
    gt_ObjectiveCaptureCampComplete = TriggerCreate("gt_ObjectiveCaptureCampComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Mercs Start
//--------------------------------------------------------------------------------------------------
bool gt_EscortMercsStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_AttackedByTower, false);
    TriggerExecute(gt_EscortMercsPing, true, false);
    TriggerExecute(gt_EscortMercsSuggestingPath, true, false);
    SoundPlayForPlayer(SoundLink("UI_Tutorial01_Suggesting_Path", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_ObjectiveEscortMercsCreate, true, false);
    AIRequiredLane(libGame_gv_players[gv_pLAYER_06_ARTHAS].lv_heroUnit, -1);
    Wait(0.125, c_timeGame);
    AIRequiredLane(libGame_gv_players[gv_pLAYER_06_ARTHAS].lv_heroUnit, 1);
    Wait(2.0, c_timeGame);
    libStEx_gf_DisplayHintMessage(StringExternal("Param/Value/F0EAE2FE"), true, 1.5);
    Wait(10.0, c_timeGame);
    libStEx_gf_ClearHintMessage();
    Wait(5.0, c_timeGame);
    TriggerEnable(gt_TalentsReminder, true);
    gv_goToWatchtowerStarted = false;
    TriggerExecute(gt_TalentsReminder, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortMercsStart_Init () {
    gt_EscortMercsStart = TriggerCreate("gt_EscortMercsStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Mercs Ping
//--------------------------------------------------------------------------------------------------
bool gt_EscortMercsPing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngleWithType(PlayerGroupAll(), "PingObjective", UnitGroupCenterOfGroup(gv_siegeGiantsMercs), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0, -1, -1);
    gv_siegeGiantsPing = PingLastCreated();
    while (true) {
        if ((gv_siegeGiantsPing == c_invalidPingId)) {
            return true;
        }

        if ((libNtve_gf_UnitGroupIsDead(gv_siegeGiantsMercs) == true)) {
            PingDestroy(gv_siegeGiantsPing);
            gv_siegeGiantsPing = c_invalidPingId;
            return true;
        }

        PingSetPosition(PingLastCreated(), UnitGroupCenterOfGroup(gv_siegeGiantsMercs));
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortMercsPing_Init () {
    gt_EscortMercsPing = TriggerCreate("gt_EscortMercsPing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Mercs Fort Killed
//--------------------------------------------------------------------------------------------------
bool gt_EscortMercsFortKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_xPValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveEscortMercsComplete, true, false);
    if ((UnitXPGetCurrentLevel(gv_heroPlayer, null) < 10)) {
        lv_xPValue = (libCore_gf_GetTotalXPForLevel(10) - UnitGetPropertyFixed(libGame_gv_players[gv_pLAYER_01_USER].lv_heroUnit, c_unitPropXP, c_unitPropCurrent));
        libGame_gf_GrantXPToPlayer(lv_xPValue, gv_pLAYER_01_USER, libGame_ge_XPSources_Debug);
        libGame_gf_GrantXPToPlayer(lv_xPValue, gv_pLAYER_02_HEALERTANK, libGame_ge_XPSources_Debug);
        libGame_gf_GrantXPToPlayer(lv_xPValue, gv_pLAYER_03_TANKDPS, libGame_ge_XPSources_Debug);
        libGame_gf_GrantXPToPlayer(lv_xPValue, gv_pLAYER_04_DEMONHUNTER, libGame_ge_XPSources_Debug);
        libGame_gf_GrantXPToPlayer(lv_xPValue, gv_pLAYER_05_NOVA, libGame_ge_XPSources_Debug);
    }

    AIRequiredLane(libGame_gv_players[gv_pLAYER_07_TYCHUS].lv_heroUnit, -1);
    Wait(0.125, c_timeGame);
    AIRequiredLane(libGame_gv_players[gv_pLAYER_07_TYCHUS].lv_heroUnit, 1);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_CoreStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortMercsFortKilled_Init () {
    gt_EscortMercsFortKilled = TriggerCreate("gt_EscortMercsFortKilled_Func");
    TriggerAddEventUnitDied(gt_EscortMercsFortKilled, UnitRefFromUnit(UnitFromId(202)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Mercs Suggesting Path
//--------------------------------------------------------------------------------------------------
bool gt_EscortMercsSuggestingPath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PathCreateForUnit(libCore_gv_playerGroupFromPlayer[gv_pLAYER_01_USER], gv_heroPlayer);
    PathSetDestinationPoint(PathLastCreated(), UnitGroupCenterOfGroup(gv_siegeGiantsMercs));
    PathSetVisible(PathLastCreated(), c_pathLocationAll, true);
    PathSetStepModel(PathLastCreated(), c_pathLocationWorld, "Assets\\Units\\Test\\InvisibleUnit\\InvisibleUnit.m3");
    PathSetLineTexture(PathLastCreated(), c_pathLocationWorld, "Assets\\Textures\\ui_tutorial_guidearrow.dds");
    PathSetLineTileLength(PathLastCreated(), c_pathLocationWorld, 2.578);
    PathSetLineWidth(PathLastCreated(), c_pathLocationWorld, 1.5);
    PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "Assets\\Textures\\storm_waypointline.dds");
    while (true) {
        if ((libNtve_gf_UnitGroupIsDead(gv_siegeGiantsMercs) == true)) {
            break;
        }

        if ((UnitIsAlive(gv_heroPlayer) == true)) {
            if ((DistanceBetweenPoints(UnitGetPosition(gv_heroPlayer), UnitGroupCenterOfGroup(gv_siegeGiantsMercs)) > 16.0)) {
                PathSetVisible(PathLastCreated(), c_pathLocationAll, true);
            }

            if ((DistanceBetweenPoints(UnitGetPosition(gv_heroPlayer), UnitGroupCenterOfGroup(gv_siegeGiantsMercs)) <= 13.0)) {
                PathSetVisible(PathLastCreated(), c_pathLocationAll, false);
            }
            else {
                PathSetDestinationPoint(PathLastCreated(), UnitGroupCenterOfGroup(gv_siegeGiantsMercs));
                PathSetSourceUnit(PathLastCreated(), gv_heroPlayer);
            }
        }
        else {
            PathSetVisible(PathLastCreated(), c_pathLocationAll, false);
        }
        Wait(0.0625, c_timeGame);
    }
    PathDestroy(PathLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortMercsSuggestingPath_Init () {
    gt_EscortMercsSuggestingPath = TriggerCreate("gt_EscortMercsSuggestingPath_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Escort Mercs Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEscortMercsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEscortMercsCreate_Init () {
    gt_ObjectiveEscortMercsCreate = TriggerCreate("gt_ObjectiveEscortMercsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Escort Mercs Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveEscortMercsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveEscortMercsCreate, true, false);
    SoundPlayForPlayer(SoundLink("UI_ObjectiveComplete", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerStop(gt_EscortMercsPing);
    PingDestroy(gv_siegeGiantsPing);
    gv_siegeGiantsPing = c_invalidPingId;
    gv_siegeGiantsMercs = UnitGroupEmpty();
    Wait(6.0, c_timeReal);
    gv_escortMercsCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveEscortMercsComplete_Init () {
    gt_ObjectiveEscortMercsComplete = TriggerCreate("gt_ObjectiveEscortMercsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level 10 gained
//--------------------------------------------------------------------------------------------------
bool gt_Level10gained_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitXPGetCurrentLevel(gv_heroPlayer, null) == 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    Wait(1.0, c_timeGame);
    gv_suggestingHyperion = true;
    TriggerQueueEnter();
    UnitSetPropertyFixed(gv_heroPlayer, c_unitPropEnergyPercent, 100.0);
    libStEx_gf_DisplayVOMessageGamePaused(StringExternal("Param/Value/699A9C38"), libStEx_ge_SE_VOMessageType_blank, true);
    libStEx_gf_AddInGameTip(libStEx_ge_InGameTip_HeroicAbilities);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level10gained_Init () {
    gt_Level10gained = TriggerCreate("gt_Level10gained_Func");
    TriggerEnable(gt_Level10gained, false);
    TriggerAddEventUnitGainLevel(gt_Level10gained, UnitRefFromVariable("gv_heroPlayer"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core Start
//--------------------------------------------------------------------------------------------------
bool gt_CoreStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreatePingFacingAngleWithType(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(346)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0, -1, -1);
    gv_corePing = PingLastCreated();
    TriggerExecute(gt_ObjectiveCoreCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CoreStart_Init () {
    gt_CoreStart = TriggerCreate("gt_CoreStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core Killed
//--------------------------------------------------------------------------------------------------
bool gt_CoreKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libStEx_gf_ClearVOMessage();
    libStEx_gf_ClearHintMessage();
    libStEx_gf_ClearVOMessageGamePaused(1);
    TriggerExecute(gt_ObjectiveCoreComplete, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CoreKilled_Init () {
    gt_CoreKilled = TriggerCreate("gt_CoreKilled_Func");
    TriggerAddEventUnitDied(gt_CoreKilled, UnitRefFromUnit(UnitFromId(346)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Core Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCoreCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCoreCreate_Init () {
    gt_ObjectiveCoreCreate = TriggerCreate("gt_ObjectiveCoreCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Core Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCoreComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCoreCreate, true, false);
    SoundPlayForPlayer(SoundLink("UI_ObjectiveComplete", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    PingDestroy(gv_corePing);
    gv_corePing = c_invalidPingId;
    StatEventCreate("Tutorial01_Victory");
    StatEventSend(StatEventLastCreated());
    TriggerEnable(gt_PlayerExitEarly, false);
    Wait(6.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCoreComplete_Init () {
    gt_ObjectiveCoreComplete = TriggerCreate("gt_ObjectiveCoreComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Exit Early
//--------------------------------------------------------------------------------------------------
bool gt_PlayerExitEarly_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    StatEventCreate("Tutorial01_ExitEarly");
    StatEventSend(StatEventLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerExitEarly_Init () {
    gt_PlayerExitEarly = TriggerCreate("gt_PlayerExitEarly_Func");
    TriggerAddEventGameMenuItemSelected(gt_PlayerExitEarly, c_playerAny, c_gameMenuDialogQuitButton);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Push Core with Team Reminder
//--------------------------------------------------------------------------------------------------
bool gt_PushCorewithTeamReminder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_lastCoreTime;
    fixed lv_lastReminderTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lastCoreTime = TimerGetElapsed(libGame_gv_gobalTimer);
    lv_lastReminderTime = TimerGetElapsed(libGame_gv_gobalTimer);
    while (true) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((DistanceBetweenPoints(UnitGetPosition(gv_heroPlayer), UnitGetPosition(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core)) <= 15.0)) {
            lv_lastCoreTime = TimerGetElapsed(libGame_gv_gobalTimer);
        }
        else {
            if (((TimerGetElapsed(libGame_gv_gobalTimer) - lv_lastCoreTime) >= 10.0) && ((TimerGetElapsed(libGame_gv_gobalTimer) - lv_lastReminderTime) >= 30.0)) {
                lv_lastReminderTime = TimerGetElapsed(libGame_gv_gobalTimer);
                libNtve_gf_CreatePingFacingAngleWithType(PlayerGroupAll(), "MinimapPing", UnitGetPosition(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 6.0, 270.0, -1, -1);
                libStEx_gf_DisplayHintMessage(StringExternal("Param/Value/CDDA9C70"), true, 1.0);
                TriggerExecute(gt_ClearCoreReminderafterDelay, true, false);
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PushCorewithTeamReminder_Init () {
    gt_PushCorewithTeamReminder = TriggerCreate("gt_PushCorewithTeamReminder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear Core Reminder after Delay
//--------------------------------------------------------------------------------------------------
bool gt_ClearCoreReminderafterDelay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(10.0, c_timeGame);
    libStEx_gf_ClearHintMessage();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClearCoreReminderafterDelay_Init () {
    gt_ClearCoreReminderafterDelay = TriggerCreate("gt_ClearCoreReminderafterDelay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attacked By Tower
//--------------------------------------------------------------------------------------------------
bool gt_AttackedByTower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "TownCannonTowerL2") || (UnitGetType(EventUnitDamageSourceUnit()) == "TownCannonTowerL3") || (UnitGetType(EventUnitDamageSourceUnit()) == "TownCannonTowerL2Standalone") || (UnitGetType(EventUnitDamageSourceUnit()) == "TownCannonTowerL3Standalone") || (UnitGetType(EventUnitDamageSourceUnit()) == "TownTownHallL2") || (UnitGetType(EventUnitDamageSourceUnit()) == "TownTownHallL3")))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_heroPlayer, c_unitPropLifePercent, c_unitPropCurrent) < 75.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_attackedByTowerCount += 1;
    if ((gv_attackedByTowerCount == 1)) {
        Wait(2.5, c_timeGame);
        if ((gv_attackedByTowerCount == 1)) {
            gv_attackedByTowerCount = 0;
        }

        return true;
    }

    if ((gv_attackedByTowerCount >= 2) && (UnitHasBehavior2(gv_heroPlayer, "TowerTargetingBehavior") == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_attackedByTowerCount = 0;
        TriggerExecute(gt_AttackedByTowerTransmissionQ, true, true);
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackedByTower_Init () {
    gt_AttackedByTower = TriggerCreate("gt_AttackedByTower_Func");
    TriggerAddEventUnitDamaged(gt_AttackedByTower, UnitRefFromVariable("gv_heroPlayer"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attacked By Tower Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_AttackedByTowerTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_transmissionPlayed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((UnitHasBehavior2(gv_heroPlayer, "TowerTargetingBehavior") == true)) {
        lv_transmissionPlayed = true;
        libNtve_gf_MakeUnitInvulnerable(gv_heroPlayer, true);
        libStEx_gf_DisplayVOMessageGamePaused(StringExternal("Param/Value/390AA000"), libStEx_ge_SE_VOMessageType_tower, true);
        Wait(2.0, c_timeGame);
        libNtve_gf_MakeUnitInvulnerable(gv_heroPlayer, false);
        Wait(8.0, c_timeGame);
    }

    TriggerQueueExit();
    if ((lv_transmissionPlayed == true)) {
        Wait(240.0, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackedByTowerTransmissionQ_Init () {
    gt_AttackedByTowerTransmissionQ = TriggerCreate("gt_AttackedByTowerTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Healing Fountain Proximity Monitor
//--------------------------------------------------------------------------------------------------
bool gt_HealingFountainProximityMonitor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_fountainGroup;
    unit lv_nearestFountain;
    int lv_itTextTag;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fountainGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_moonwellMoonwellonCooldown[gv_pLAYER_01_USER] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_fountainGroup = UnitGroup("TownMoonwellL2", libCore_gv_cOMPUTER_TeamOrder, RegionCircle(UnitGetPosition(gv_heroPlayer), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_fountainGroup, UnitGroup("TownMoonwellL3", libCore_gv_cOMPUTER_TeamOrder, RegionCircle(UnitGetPosition(gv_heroPlayer), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    if ((libNtve_gf_UnitGroupIsDead(lv_fountainGroup) == false)) {
        lv_nearestFountain = UnitGroupClosestToPoint(lv_fountainGroup, UnitGetPosition(gv_heroPlayer));
    }
    else {
        return true;
    }
    libUIUI_gv_uIHealingFountainsHelpTextShowTextTagforTutorial = true;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealingFountainProximityMonitor_Init () {
    gt_HealingFountainProximityMonitor = TriggerCreate("gt_HealingFountainProximityMonitor_Func");
    TriggerEnable(gt_HealingFountainProximityMonitor, false);
    TriggerAddEventTimePeriodic(gt_HealingFountainProximityMonitor, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regen Globe Reminder
//--------------------------------------------------------------------------------------------------
bool gt_RegenGlobeReminder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_nearbyGroup;
    unitgroup lv_farGroup;

    // Automatic Variable Declarations
    unitgroup autoF32A04AF_g;
    int autoF32A04AF_u;
    unit autoF32A04AF_var;
    unitgroup auto63977834_g;
    int auto63977834_u;
    unit auto63977834_var;

    // Variable Initialization
    lv_nearbyGroup = UnitGroupEmpty();
    lv_farGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((gv_heroPlayer != null))) {
            return false;
        }

        if (!((UnitIsAlive(gv_heroPlayer) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_nearbyGroup = UnitGroup("RegenGlobe", libCore_gv_cOMPUTER_TeamOrder, RegionCircle(UnitGetPosition(gv_heroPlayer), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_farGroup, gv_regenGlobes);
    UnitGroupRemoveUnitGroup(lv_farGroup, lv_nearbyGroup);
    UnitGroupRemoveUnitGroup(lv_nearbyGroup, gv_regenGlobes);
    if ((libNtve_gf_UnitGroupIsDead(lv_nearbyGroup) == false)) {
        UnitGroupAddUnitGroup(gv_regenGlobes, lv_nearbyGroup);
        autoF32A04AF_g = lv_nearbyGroup;
        autoF32A04AF_u = UnitGroupCount(autoF32A04AF_g, c_unitCountAll);
        for (;; autoF32A04AF_u -= 1) {
            autoF32A04AF_var = UnitGroupUnitFromEnd(autoF32A04AF_g, autoF32A04AF_u);
            if (autoF32A04AF_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(autoF32A04AF_var, libMapM_gv_jungleCreepCamps[gv_campSiegeGiant].lv_mapDataDefenderLeashRegion) == false)) {
                libCore_gf_CreateReticleEffectAndTextTagAtPoint(libCore_ge_ReticleType_MainObjective, libCore_ge_ReticleSize_Small, UnitTypeGetName(UnitGetType(autoF32A04AF_var)), PointWithOffset(UnitGetPosition(autoF32A04AF_var), 0.0, 0.5));
                TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeMask);
                ActorSend(libNtve_gf_ActorLastCreated(), "SetScaleAbsolute 0.800000");
                libCore_gf_StoreActorForUnit(autoF32A04AF_var, 1, libNtve_gf_ActorLastCreated());
                libCore_gf_StoreTextTagForUnit(autoF32A04AF_var, 1, TextTagLastCreated());
            }

        }
    }

    auto63977834_g = lv_farGroup;
    auto63977834_u = UnitGroupCount(auto63977834_g, c_unitCountAll);
    for (;; auto63977834_u -= 1) {
        auto63977834_var = UnitGroupUnitFromEnd(auto63977834_g, auto63977834_u);
        if (auto63977834_var == null) { break; }
        UnitGroupRemove(gv_regenGlobes, auto63977834_var);
        libNtve_gf_KillModel(libCore_gf_ActorStoredForUnit(auto63977834_var, 1));
        libCore_gf_StoreActorForUnit(auto63977834_var, 1, null);
        TextTagDestroy(libCore_gf_TextTagStoredForUnit(auto63977834_var, 1));
        libCore_gf_StoreTextTagForUnit(auto63977834_var, 1, c_textTagNone);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RegenGlobeReminder_Init () {
    gt_RegenGlobeReminder = TriggerCreate("gt_RegenGlobeReminder_Func");
    TriggerEnable(gt_RegenGlobeReminder, false);
    TriggerAddEventTimePeriodic(gt_RegenGlobeReminder, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regen Globe Picked Up
//--------------------------------------------------------------------------------------------------
bool gt_RegenGlobePickedUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0964658C_g;
    int auto0964658C_u;
    unit auto0964658C_var;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_heroPlayer) == true))) {
            return false;
        }

        if (!((EventPlayerEffectUsedUnit(c_effectUnitTarget) == gv_heroPlayer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerGetExecCount(TriggerGetCurrent()) >= 2)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_RegenGlobeReminder, false);
        UnitBehaviorRemove(gv_heroHealerTank, "RegenGlobeIgnoreBehavior", 1);
        auto0964658C_g = gv_regenGlobes;
        auto0964658C_u = UnitGroupCount(auto0964658C_g, c_unitCountAll);
        for (;; auto0964658C_u -= 1) {
            auto0964658C_var = UnitGroupUnitFromEnd(auto0964658C_g, auto0964658C_u);
            if (auto0964658C_var == null) { break; }
            if ((libCore_gf_ActorStoredForUnit(auto0964658C_var, 1) != null)) {
                libNtve_gf_KillModel(libCore_gf_ActorStoredForUnit(auto0964658C_var, 1));
                libCore_gf_StoreActorForUnit(auto0964658C_var, 1, null);
            }

            if ((libCore_gf_TextTagStoredForUnit(auto0964658C_var, 1) != c_textTagNone)) {
                TextTagDestroy(libCore_gf_TextTagStoredForUnit(auto0964658C_var, 1));
                libCore_gf_StoreTextTagForUnit(auto0964658C_var, 1, c_textTagNone);
            }

        }
        UnitGroupClear(gv_regenGlobes);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RegenGlobePickedUp_Init () {
    gt_RegenGlobePickedUp = TriggerCreate("gt_RegenGlobePickedUp_Func");
    TriggerEnable(gt_RegenGlobePickedUp, false);
    TriggerAddEventPlayerEffectUsed(gt_RegenGlobePickedUp, c_playerAny, "RegenGlobePickupImpactDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regen Globe Dies
//--------------------------------------------------------------------------------------------------
bool gt_RegenGlobeDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "RegenGlobe"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gf_ActorStoredForUnit(EventUnit(), 1) != null)) {
        libNtve_gf_KillModel(libCore_gf_ActorStoredForUnit(EventUnit(), 1));
    }

    if ((libCore_gf_TextTagStoredForUnit(EventUnit(), 1) != c_textTagNone)) {
        TextTagDestroy(libCore_gf_TextTagStoredForUnit(EventUnit(), 1));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RegenGlobeDies_Init () {
    gt_RegenGlobeDies = TriggerCreate("gt_RegenGlobeDies_Func");
    TriggerEnable(gt_RegenGlobeDies, false);
    TriggerAddEventUnitDied(gt_RegenGlobeDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Healing Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_HealingReminderQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_pullbackSuggested;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_heroPlayer, c_unitPropLifePercent, c_unitPropCurrent) <= 40.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitGetPropertyFixed(gv_heroPlayer, c_unitPropLifePercent, c_unitPropCurrent) <= 40.0)) {
        libStEx_gf_DisplayVOMessageGamePaused(StringExternal("Param/Value/134225E9"), libStEx_ge_SE_VOMessageType_fountain, true);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    TriggerQueueExit();
    if ((lv_pullbackSuggested == true)) {
        while (!((libStEx_gf_PlayerIsInCombat(1) == false))) {
            Wait(1.0, c_timeGame);
        }
        Wait(240.0, c_timeGame);
    }
    else {
        Wait(30.0, c_timeGame);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealingReminderQ_Init () {
    gt_HealingReminderQ = TriggerCreate("gt_HealingReminderQ_Func");
    TriggerEnable(gt_HealingReminderQ, false);
    TriggerAddEventTimePeriodic(gt_HealingReminderQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talents Reminder
//--------------------------------------------------------------------------------------------------
bool gt_TalentsReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto969BA01F_n = 60;
    int auto969BA01F_i;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_talentPanelOpened = false;
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    if ((libGame_gv_talents_ActiveChoiceTierForPlayer[1] > 0) && (gv_talentPanelOpened == false)) {
        while (!((UnitIsAlive(gv_heroPlayer) == true) && (libStEx_gf_PlayerIsBeingAttacked() == false) && (libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
            Wait(1.0, c_timeGame);
        }
        TriggerQueueEnter();
        if ((libGame_gv_talents_ActiveChoiceTierForPlayer[1] > 0) && (gv_talentPanelOpened == false) && (gv_goToWatchtowerStarted == false)) {
            TriggerEnable(gt_TalentsReminderTalentsPanelOpened, true);
            TriggerEnable(gt_TalentsReminderTalentsPanelClosed, true);
            libStEx_gf_DisplayVOMessageGamePaused(StringExternal("Param/Value/CAA7662C"), libStEx_ge_SE_VOMessageType_blank, true);
        }

        TriggerQueueExit();
        if ((gv_goToWatchtowerStarted == false)) {
            if ((libGame_gv_talents_ActiveChoiceTierForPlayer[1] > 0) && (gv_talentPanelOpened == false)) {
                libStEx_gf_DisplayHintMessage(StringExternal("Param/Value/742C8017"), true, 1.0);
            }

            for (auto969BA01F_i = 1; auto969BA01F_i <= auto969BA01F_n; auto969BA01F_i += 1) {
                if (((libGame_gv_talents_ActiveChoiceTierForPlayer[1] == 0) || (gv_talentPanelOpened == true) || (gv_goToWatchtowerStarted == true))) {
                    break;
                }

                Wait(0.25, c_timeGame);
            }
            libStEx_gf_ClearHintMessage();
            TriggerEnable(gt_TalentsReminderTalentsPanelOpened, false);
            TriggerEnable(gt_TalentsReminderTalentsPanelClosed, false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TalentsReminder_Init () {
    gt_TalentsReminder = TriggerCreate("gt_TalentsReminder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talents Reminder TalentsPanelOpened
//--------------------------------------------------------------------------------------------------
bool gt_TalentsReminderTalentsPanelOpened_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_talentPanelOpened = true;
    libStEx_gf_ClearHintMessage();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TalentsReminderTalentsPanelOpened_Init () {
    gt_TalentsReminderTalentsPanelOpened = TriggerCreate("gt_TalentsReminderTalentsPanelOpened_Func");
    TriggerEnable(gt_TalentsReminderTalentsPanelOpened, false);
    TriggerAddEventHeroTalentTreeSelectionPanelShown(gt_TalentsReminderTalentsPanelOpened, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talents Reminder TalentsPanelClosed
//--------------------------------------------------------------------------------------------------
bool gt_TalentsReminderTalentsPanelClosed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_talentPanelOpened = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TalentsReminderTalentsPanelClosed_Init () {
    gt_TalentsReminderTalentsPanelClosed = TriggerCreate("gt_TalentsReminderTalentsPanelClosed_Func");
    TriggerEnable(gt_TalentsReminderTalentsPanelClosed, false);
    TriggerAddEventHeroTalentTreeSelectionPanelHidden(gt_TalentsReminderTalentsPanelClosed, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Casting Abilities Hint
//--------------------------------------------------------------------------------------------------
bool gt_CastingAbilitiesHint_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.5, c_timeGame);
    libStEx_gf_HighlightCommandButton(true, libStEx_ge_TutorialCommandButton_Ability1);
    libStEx_gf_HighlightCommandButton(true, libStEx_ge_TutorialCommandButton_Ability2);
    libStEx_gf_HighlightCommandButton(true, libStEx_ge_TutorialCommandButton_Ability3);
    Wait(0.5, c_timeGame);
    libStEx_gf_DisplayVOMessageGamePaused(StringExternal("Param/Value/97DEB0E0"), libStEx_ge_SE_VOMessageType_blank, true);
    libStEx_gf_AddInGameTip(libStEx_ge_InGameTip_Abilities);
    Wait(3.0, c_timeGame);
    libStEx_gf_HighlightCommandButton(false, libStEx_ge_TutorialCommandButton_Ability1);
    libStEx_gf_HighlightCommandButton(false, libStEx_ge_TutorialCommandButton_Ability2);
    libStEx_gf_HighlightCommandButton(false, libStEx_ge_TutorialCommandButton_Ability3);
    gf_TurnRightClickMonitorOnOff(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CastingAbilitiesHint_Init () {
    gt_CastingAbilitiesHint = TriggerCreate("gt_CastingAbilitiesHint_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Reminder
//--------------------------------------------------------------------------------------------------
bool gt_DeathReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto4E7A623C_val;

    // Conditions
    if (testConds) {
        if (!((libGame_gf_HeroKilledPlayer() == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    gv_deathTimes += 1;
    auto4E7A623C_val = gv_deathTimes;
    if (auto4E7A623C_val == 1) {
        libStEx_gf_DisplayVOMessageGamePaused(StringExternal("Param/Value/442214E5"), libStEx_ge_SE_VOMessageType_blank, true);
    }
    else if (auto4E7A623C_val == 2) {
        libStEx_gf_DisplayVOMessageGamePaused(StringExternal("Param/Value/E3C9357F"), libStEx_ge_SE_VOMessageType_fountain, true);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeathReminder_Init () {
    gt_DeathReminder = TriggerCreate("gt_DeathReminder_Func");
    libGame_gf_HeroKilled(gt_DeathReminder);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mount Suggestion
//--------------------------------------------------------------------------------------------------
bool gt_MountSuggestion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_messagedDisplayed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(gv_heroPlayer, "Mounted") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.5, c_timeGame);
    while (!((UnitIsAlive(gv_heroPlayer) == true) && (libStEx_gf_PlayerIsInCombat(gv_pLAYER_01_USER) == false) && (DistanceBetweenPoints(UnitGetPosition(gv_heroPlayer), UnitGetPosition(UnitFromId(38))) <= 45.0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueEnter();
    if (((UnitIsAlive(gv_heroPlayer) == false) || (UnitHasBehavior2(gv_heroPlayer, "Mounted") == true) || (DistanceBetweenPoints(UnitGetPosition(gv_heroPlayer), UnitGetPosition(UnitFromId(38))) <= 15.0))) {
        return true;
    }

    gv_mountSuggested = true;
    libStEx_gf_HighlightCommandButton(true, libStEx_ge_TutorialCommandButton_Mount);
    TextExpressionSetToken("Param/Expression/6500302C", "A", StringExternal("Param/Value/CF2C23F1"));
    libStEx_gf_DisplayVOMessageGamePaused(TextExpressionAssemble("Param/Expression/6500302C"), libStEx_ge_SE_VOMessageType_mount, true);
    TextExpressionSetToken("Param/Expression/C4A3E041", "A", StringExternal("Param/Value/1452E136"));
    libStEx_gf_DisplayHintMessage(TextExpressionAssemble("Param/Expression/C4A3E041"), true, 1.5);
    lv_messagedDisplayed = true;
    gv_mountUsed = false;
    TriggerEnable(gt_MountUsed, true);
    Wait(2.0, c_timeGame);
    TriggerQueueExit();
    if ((lv_messagedDisplayed == true)) {
        while (!(((gv_mountUsed == true) || (libStEx_gf_PlayerIsInCombat(gv_pLAYER_01_USER) == true) || (DistanceBetweenPoints(UnitGetPosition(gv_heroPlayer), UnitGetPosition(UnitFromId(38))) <= 5.0)))) {
            Wait(0.5, c_timeGame);
        }
        libStEx_gf_ClearHintMessage();
        libStEx_gf_HighlightCommandButton(false, libStEx_ge_TutorialCommandButton_Mount);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MountSuggestion_Init () {
    gt_MountSuggestion = TriggerCreate("gt_MountSuggestion_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mount Used
//--------------------------------------------------------------------------------------------------
bool gt_MountUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_mountUsed = true;
    libStEx_gf_HighlightCommandButton(false, libStEx_ge_TutorialCommandButton_Mount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MountUsed_Init () {
    gt_MountUsed = TriggerCreate("gt_MountUsed_Func");
    TriggerAddEventUnitAbility(gt_MountUsed, UnitRefFromVariable("gv_heroPlayer"), AbilityCommand("Mount", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Frostbolt Targeting Mode On
//--------------------------------------------------------------------------------------------------
bool gt_FrostboltTargetingModeOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_frostBoltCasted = false;
    TriggerEnable(gt_FrostboltTargetingModeOff, true);
    TriggerEnable(gt_FrostboltTargetingModeUsed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FrostboltTargetingModeOn_Init () {
    gt_FrostboltTargetingModeOn = TriggerCreate("gt_FrostboltTargetingModeOn_Func");
    TriggerEnable(gt_FrostboltTargetingModeOn, false);
    TriggerAddEventTargetModeUpdate(gt_FrostboltTargetingModeOn, gv_pLAYER_01_USER, AbilityCommand("JainaFrostbolt", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Frostbolt Targeting Mode Off
//--------------------------------------------------------------------------------------------------
bool gt_FrostboltTargetingModeOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.25, c_timeGame);
    if ((gv_frostBoltCasted == false)) {
        if ((TriggerQueueIsEmpty() == true) && (gv_rightClickReminded == false)) {
            gf_DisplayRightClickCancelMessage();
            return true;
        }

    }
    else {
        TriggerEnable(gt_FrostboltTargetingModeOn, true);
        TriggerEnable(gt_FrostboltTargetingModeUsed, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FrostboltTargetingModeOff_Init () {
    gt_FrostboltTargetingModeOff = TriggerCreate("gt_FrostboltTargetingModeOff_Func");
    TriggerEnable(gt_FrostboltTargetingModeOff, false);
    TriggerAddEventTargetModeUpdate(gt_FrostboltTargetingModeOff, gv_pLAYER_01_USER, AbilityCommand("JainaFrostbolt", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Frostbolt Targeting Mode Used
//--------------------------------------------------------------------------------------------------
bool gt_FrostboltTargetingModeUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_frostBoltCasted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FrostboltTargetingModeUsed_Init () {
    gt_FrostboltTargetingModeUsed = TriggerCreate("gt_FrostboltTargetingModeUsed_Func");
    TriggerEnable(gt_FrostboltTargetingModeUsed, false);
    TriggerAddEventUnitAbility(gt_FrostboltTargetingModeUsed, UnitRefFromVariable("gv_heroPlayer"), AbilityCommand("JainaFrostbolt", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blizzard Targeting Mode On
//--------------------------------------------------------------------------------------------------
bool gt_BlizzardTargetingModeOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_blizzardCasted = false;
    TriggerEnable(gt_BlizzardTargetingModeOff, true);
    TriggerEnable(gt_BlizzardTargetingModeUsed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlizzardTargetingModeOn_Init () {
    gt_BlizzardTargetingModeOn = TriggerCreate("gt_BlizzardTargetingModeOn_Func");
    TriggerEnable(gt_BlizzardTargetingModeOn, false);
    TriggerAddEventTargetModeUpdate(gt_BlizzardTargetingModeOn, gv_pLAYER_01_USER, AbilityCommand("JainaBlizzard", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blizzard Targeting Mode Off
//--------------------------------------------------------------------------------------------------
bool gt_BlizzardTargetingModeOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.25, c_timeGame);
    if ((gv_blizzardCasted == false)) {
        if ((TriggerQueueIsEmpty() == true) && (gv_rightClickReminded == false)) {
            gf_DisplayRightClickCancelMessage();
            return true;
        }

    }
    else {
        TriggerEnable(gt_BlizzardTargetingModeOn, true);
        TriggerEnable(gt_BlizzardTargetingModeUsed, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlizzardTargetingModeOff_Init () {
    gt_BlizzardTargetingModeOff = TriggerCreate("gt_BlizzardTargetingModeOff_Func");
    TriggerEnable(gt_BlizzardTargetingModeOff, false);
    TriggerAddEventTargetModeUpdate(gt_BlizzardTargetingModeOff, gv_pLAYER_01_USER, AbilityCommand("JainaBlizzard", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blizzard Targeting Mode Used
//--------------------------------------------------------------------------------------------------
bool gt_BlizzardTargetingModeUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_blizzardCasted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlizzardTargetingModeUsed_Init () {
    gt_BlizzardTargetingModeUsed = TriggerCreate("gt_BlizzardTargetingModeUsed_Func");
    TriggerEnable(gt_BlizzardTargetingModeUsed, false);
    TriggerAddEventUnitAbility(gt_BlizzardTargetingModeUsed, UnitRefFromVariable("gv_heroPlayer"), AbilityCommand("JainaBlizzard", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Storm Bolt Targeting Mode On
//--------------------------------------------------------------------------------------------------
bool gt_StormBoltTargetingModeOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_stormBoltCasted = false;
    TriggerEnable(gt_StormBoltTargetingModeOff, true);
    TriggerEnable(gt_StormBoltTargetingModeUsed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StormBoltTargetingModeOn_Init () {
    gt_StormBoltTargetingModeOn = TriggerCreate("gt_StormBoltTargetingModeOn_Func");
    TriggerEnable(gt_StormBoltTargetingModeOn, false);
    TriggerAddEventTargetModeUpdate(gt_StormBoltTargetingModeOn, gv_pLAYER_01_USER, AbilityCommand("MuradinStormBolt", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Storm Bolt Targeting Mode Off
//--------------------------------------------------------------------------------------------------
bool gt_StormBoltTargetingModeOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.25, c_timeGame);
    if ((gv_stormBoltCasted == false)) {
        if ((TriggerQueueIsEmpty() == true) && (gv_rightClickReminded == false)) {
            gf_DisplayRightClickCancelMessage();
            return true;
        }

    }
    else {
        TriggerEnable(gt_StormBoltTargetingModeOn, true);
        TriggerEnable(gt_StormBoltTargetingModeUsed, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StormBoltTargetingModeOff_Init () {
    gt_StormBoltTargetingModeOff = TriggerCreate("gt_StormBoltTargetingModeOff_Func");
    TriggerEnable(gt_StormBoltTargetingModeOff, false);
    TriggerAddEventTargetModeUpdate(gt_StormBoltTargetingModeOff, gv_pLAYER_01_USER, AbilityCommand("MuradinStormBolt", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Storm Bolt Targeting Mode Used
//--------------------------------------------------------------------------------------------------
bool gt_StormBoltTargetingModeUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_stormBoltCasted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StormBoltTargetingModeUsed_Init () {
    gt_StormBoltTargetingModeUsed = TriggerCreate("gt_StormBoltTargetingModeUsed_Func");
    TriggerEnable(gt_StormBoltTargetingModeUsed, false);
    TriggerAddEventUnitAbility(gt_StormBoltTargetingModeUsed, UnitRefFromVariable("gv_heroPlayer"), AbilityCommand("MuradinStormBolt", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dwarf Toss Targeting Mode On
//--------------------------------------------------------------------------------------------------
bool gt_DwarfTossTargetingModeOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_dwarfTossCasted = false;
    TriggerEnable(gt_DwarfTossTargetingModeOff, true);
    TriggerEnable(gt_DwarfTossTargetingModeUsed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DwarfTossTargetingModeOn_Init () {
    gt_DwarfTossTargetingModeOn = TriggerCreate("gt_DwarfTossTargetingModeOn_Func");
    TriggerEnable(gt_DwarfTossTargetingModeOn, false);
    TriggerAddEventTargetModeUpdate(gt_DwarfTossTargetingModeOn, gv_pLAYER_01_USER, AbilityCommand("MuradinDwarfToss", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dwarf Toss Targeting Mode Off
//--------------------------------------------------------------------------------------------------
bool gt_DwarfTossTargetingModeOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.25, c_timeGame);
    if ((gv_dwarfTossCasted == false)) {
        if ((TriggerQueueIsEmpty() == true) && (gv_rightClickReminded == false)) {
            gf_DisplayRightClickCancelMessage();
            return true;
        }

    }
    else {
        TriggerEnable(gt_DwarfTossTargetingModeOn, true);
        TriggerEnable(gt_DwarfTossTargetingModeUsed, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DwarfTossTargetingModeOff_Init () {
    gt_DwarfTossTargetingModeOff = TriggerCreate("gt_DwarfTossTargetingModeOff_Func");
    TriggerEnable(gt_DwarfTossTargetingModeOff, false);
    TriggerAddEventTargetModeUpdate(gt_DwarfTossTargetingModeOff, gv_pLAYER_01_USER, AbilityCommand("MuradinDwarfToss", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dwarf Toss Targeting Mode Used
//--------------------------------------------------------------------------------------------------
bool gt_DwarfTossTargetingModeUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_dwarfTossCasted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DwarfTossTargetingModeUsed_Init () {
    gt_DwarfTossTargetingModeUsed = TriggerCreate("gt_DwarfTossTargetingModeUsed_Func");
    TriggerEnable(gt_DwarfTossTargetingModeUsed, false);
    TriggerAddEventUnitAbility(gt_DwarfTossTargetingModeUsed, UnitRefFromVariable("gv_heroPlayer"), AbilityCommand("MuradinDwarfToss", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Light Elune Targeting Mode On
//--------------------------------------------------------------------------------------------------
bool gt_LightEluneTargetingModeOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_lightEluneCasted = false;
    TriggerEnable(gt_LightEluneTargetingModeOff, true);
    TriggerEnable(gt_LightEluneTargetingModeUsed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LightEluneTargetingModeOn_Init () {
    gt_LightEluneTargetingModeOn = TriggerCreate("gt_LightEluneTargetingModeOn_Func");
    TriggerEnable(gt_LightEluneTargetingModeOn, false);
    TriggerAddEventTargetModeUpdate(gt_LightEluneTargetingModeOn, gv_pLAYER_01_USER, AbilityCommand("TyrandeLightofElune", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Light Elune Targeting Mode Off
//--------------------------------------------------------------------------------------------------
bool gt_LightEluneTargetingModeOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.25, c_timeGame);
    if ((gv_lightEluneCasted == false)) {
        if ((TriggerQueueIsEmpty() == true) && (gv_rightClickReminded == false)) {
            gf_DisplayRightClickCancelMessage();
            return true;
        }

    }
    else {
        TriggerEnable(gt_LightEluneTargetingModeOn, true);
        TriggerEnable(gt_LightEluneTargetingModeUsed, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LightEluneTargetingModeOff_Init () {
    gt_LightEluneTargetingModeOff = TriggerCreate("gt_LightEluneTargetingModeOff_Func");
    TriggerEnable(gt_LightEluneTargetingModeOff, false);
    TriggerAddEventTargetModeUpdate(gt_LightEluneTargetingModeOff, gv_pLAYER_01_USER, AbilityCommand("TyrandeLightofElune", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Light Elune Targeting Mode Used
//--------------------------------------------------------------------------------------------------
bool gt_LightEluneTargetingModeUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_lightEluneCasted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LightEluneTargetingModeUsed_Init () {
    gt_LightEluneTargetingModeUsed = TriggerCreate("gt_LightEluneTargetingModeUsed_Func");
    TriggerEnable(gt_LightEluneTargetingModeUsed, false);
    TriggerAddEventUnitAbility(gt_LightEluneTargetingModeUsed, UnitRefFromVariable("gv_heroPlayer"), AbilityCommand("TyrandeLightofElune", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentinel Targeting Mode On
//--------------------------------------------------------------------------------------------------
bool gt_SentinelTargetingModeOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_sentinelCasted = false;
    TriggerEnable(gt_SentinelTargetingModeOff, true);
    TriggerEnable(gt_SentinelTargetingModeUsed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentinelTargetingModeOn_Init () {
    gt_SentinelTargetingModeOn = TriggerCreate("gt_SentinelTargetingModeOn_Func");
    TriggerEnable(gt_SentinelTargetingModeOn, false);
    TriggerAddEventTargetModeUpdate(gt_SentinelTargetingModeOn, gv_pLAYER_01_USER, AbilityCommand("TyrandeSentinelShot", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentinel Targeting Mode Off
//--------------------------------------------------------------------------------------------------
bool gt_SentinelTargetingModeOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.25, c_timeGame);
    if ((gv_sentinelCasted == false)) {
        if ((TriggerQueueIsEmpty() == true) && (gv_rightClickReminded == false)) {
            gf_DisplayRightClickCancelMessage();
            return true;
        }

    }
    else {
        TriggerEnable(gt_SentinelTargetingModeOn, true);
        TriggerEnable(gt_SentinelTargetingModeUsed, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentinelTargetingModeOff_Init () {
    gt_SentinelTargetingModeOff = TriggerCreate("gt_SentinelTargetingModeOff_Func");
    TriggerEnable(gt_SentinelTargetingModeOff, false);
    TriggerAddEventTargetModeUpdate(gt_SentinelTargetingModeOff, gv_pLAYER_01_USER, AbilityCommand("TyrandeSentinelShot", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentinel Targeting Mode Used
//--------------------------------------------------------------------------------------------------
bool gt_SentinelTargetingModeUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_sentinelCasted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentinelTargetingModeUsed_Init () {
    gt_SentinelTargetingModeUsed = TriggerCreate("gt_SentinelTargetingModeUsed_Func");
    TriggerEnable(gt_SentinelTargetingModeUsed, false);
    TriggerAddEventUnitAbility(gt_SentinelTargetingModeUsed, UnitRefFromVariable("gv_heroPlayer"), AbilityCommand("TyrandeSentinelShot", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lunar Flare Targeting Mode On
//--------------------------------------------------------------------------------------------------
bool gt_LunarFlareTargetingModeOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_lunarFlareCasted = false;
    TriggerEnable(gt_LunarFlareTargetingModeOff, true);
    TriggerEnable(gt_LunarFlareTargetingModeUsed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LunarFlareTargetingModeOn_Init () {
    gt_LunarFlareTargetingModeOn = TriggerCreate("gt_LunarFlareTargetingModeOn_Func");
    TriggerEnable(gt_LunarFlareTargetingModeOn, false);
    TriggerAddEventTargetModeUpdate(gt_LunarFlareTargetingModeOn, gv_pLAYER_01_USER, AbilityCommand("TyrandeLunarFlare", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lunar Flare Targeting Mode Off
//--------------------------------------------------------------------------------------------------
bool gt_LunarFlareTargetingModeOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.25, c_timeGame);
    if ((gv_lunarFlareCasted == false)) {
        if ((TriggerQueueIsEmpty() == true) && (gv_rightClickReminded == false)) {
            gf_DisplayRightClickCancelMessage();
            return true;
        }

    }
    else {
        TriggerEnable(gt_LunarFlareTargetingModeOn, true);
        TriggerEnable(gt_LunarFlareTargetingModeUsed, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LunarFlareTargetingModeOff_Init () {
    gt_LunarFlareTargetingModeOff = TriggerCreate("gt_LunarFlareTargetingModeOff_Func");
    TriggerEnable(gt_LunarFlareTargetingModeOff, false);
    TriggerAddEventTargetModeUpdate(gt_LunarFlareTargetingModeOff, gv_pLAYER_01_USER, AbilityCommand("TyrandeLunarFlare", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lunar Flare Targeting Mode Used
//--------------------------------------------------------------------------------------------------
bool gt_LunarFlareTargetingModeUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_lunarFlareCasted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LunarFlareTargetingModeUsed_Init () {
    gt_LunarFlareTargetingModeUsed = TriggerCreate("gt_LunarFlareTargetingModeUsed_Func");
    TriggerEnable(gt_LunarFlareTargetingModeUsed, false);
    TriggerAddEventUnitAbility(gt_LunarFlareTargetingModeUsed, UnitRefFromVariable("gv_heroPlayer"), AbilityCommand("TyrandeLunarFlare", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Short Auto Test Trigger
//--------------------------------------------------------------------------------------------------
bool gt_ShortAutoTestTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameIsTestMap(true) == true) && (GameTestConfigType() == 3)) {
        Wait(10.0, c_timeGame);
        ConsoleCommand("exit", true, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShortAutoTestTrigger_Init () {
    gt_ShortAutoTestTrigger = TriggerCreate("gt_ShortAutoTestTrigger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Automation - Startup Trigger and Camera Lock
//--------------------------------------------------------------------------------------------------
bool gt_AutomationStartupTriggerandCameraLock_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libStEx_gf_IsthisanAutomatedPlaythrough() == false)) {
        return true;
    }

    libNtve_gf_ChangeUnitDamage(gv_heroPlayer, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    while (true) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false)) {
            PlayerOptionOverride(gv_pLAYER_01_USER, "camerafollow", "1");
        }

        Wait(5.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutomationStartupTriggerandCameraLock_Init () {
    gt_AutomationStartupTriggerandCameraLock = TriggerCreate("gt_AutomationStartupTriggerandCameraLock_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Automation - Move to Frontline
//--------------------------------------------------------------------------------------------------
bool gt_AutomationMovetoFrontline_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libStEx_gf_IsthisanAutomatedPlaythrough() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAITakeOverHeroForPlayer(gv_pLAYER_01_USER);
    Wait(2.0, c_timeGame);
    AIRequiredLane(libGame_gv_players[gv_pLAYER_01_USER].lv_heroUnit, 2);
    UnitSetPosition(gv_heroPlayer, PointFromId(393064320), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutomationMovetoFrontline_Init () {
    gt_AutomationMovetoFrontline = TriggerCreate("gt_AutomationMovetoFrontline_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Automation - Move to Watchtower
//--------------------------------------------------------------------------------------------------
bool gt_AutomationMovetoWatchtower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libStEx_gf_IsthisanAutomatedPlaythrough() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    libAIAI_gf_HeroAIReleaseHeroControl(gv_pLAYER_01_USER);
    UnitSetPosition(gv_heroPlayer, PointFromId(1578221072), false);
    UnitIssueOrder(gv_heroPlayer, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutomationMovetoWatchtower_Init () {
    gt_AutomationMovetoWatchtower = TriggerCreate("gt_AutomationMovetoWatchtower_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Automation - Move to Merc Camp
//--------------------------------------------------------------------------------------------------
bool gt_AutomationMovetoMercCamp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libStEx_gf_IsthisanAutomatedPlaythrough() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    UnitSetPosition(gv_heroPlayer, PointFromId(180), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutomationMovetoMercCamp_Init () {
    gt_AutomationMovetoMercCamp = TriggerCreate("gt_AutomationMovetoMercCamp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Automation - Claim Merc Camp
//--------------------------------------------------------------------------------------------------
bool gt_AutomationClaimMercCamp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libStEx_gf_IsthisanAutomatedPlaythrough() == true))) {
            return false;
        }

        if (!((libMapM_gf_JungleGetCampIndexFromDefenderIndex(libGame_gf_JungleDefenderAIAllDefendersKilledIndex()) == gv_campSiegeGiant))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitSetPosition(gv_heroPlayer, PointFromId(180), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutomationClaimMercCamp_Init () {
    gt_AutomationClaimMercCamp = TriggerCreate("gt_AutomationClaimMercCamp_Func");
    libGame_gf_JungleDefenderAIAllDefendersKilled(gt_AutomationClaimMercCamp);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Automation - Push with Mercs
//--------------------------------------------------------------------------------------------------
bool gt_AutomationPushwithMercs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_capturedPlayers;
    int lv_itPlayer;
    fixed lv_xPValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_capturedPlayers = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gf_MercCampCapturedIndex() == gv_campSiegeGiant))) {
            return false;
        }

        if (!((libStEx_gf_IsthisanAutomatedPlaythrough() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    libAIAI_gf_HeroAITakeOverHeroForPlayer(gv_pLAYER_01_USER);
    AIRequiredLane(libGame_gv_players[gv_pLAYER_01_USER].lv_heroUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutomationPushwithMercs_Init () {
    gt_AutomationPushwithMercs = TriggerCreate("gt_AutomationPushwithMercs_Func");
    libGame_gf_MercCampCaptured(gt_AutomationPushwithMercs);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Automation - Exit Out
//--------------------------------------------------------------------------------------------------
bool gt_AutomationExitOut_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libStEx_gf_IsthisanAutomatedPlaythrough() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    ConsoleCommand("exit", true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutomationExitOut_Init () {
    gt_AutomationExitOut = TriggerCreate("gt_AutomationExitOut_Func");
    TriggerAddEventUnitDied(gt_AutomationExitOut, UnitRefFromUnit(UnitFromId(346)));
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_InitializeMap_Init();
    gt_InitPlayers_Init();
    gt_InitUnit_Init();
    gt_InitUI_Init();
    gt_ChangeAISettings_Init();
    gt_HookupGlobalVariables_Init();
    gt_HookupLaneData_Init();
    gt_HookupJungleCreepData_Init();
    gt_HookupTownData_Init();
    gt_HookupRegionData_Init();
    gt_HeroSafeGuard_Init();
    gt_BuildingSafeGuard_Init();
    gt_EnemyHeroLongerRespawn_Init();
    gt_PalaceTakesNoDamageWithoutPlayerNearby_Init();
    gt_DebugDistance_Init();
    gt_DebugTemp_Init();
    gt_DebugWatchtower_Init();
    gt_DebugWipe_Init();
    gt_DebugHint_Init();
    gt_DebugTopBar_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCleanup_Init();
    gt_IntroClearnupClearLanePathlines_Init();
    gt_IntroRaynorIsCreated_Init();
    gt_IntroCanceled_Init();
    gt_IntroDisableWatchtowers_Init();
    gt_FreezetheMinionwaves_Init();
    gt_TalentsInstructionQ_Init();
    gt_TalentsPanelOpened_Init();
    gt_TalentsPicked_Init();
    gt_TalentsPickedTransmissionQ_Init();
    gt_ObjectivePickTalentCreate_Init();
    gt_ObjectivePickTalentComplete_Init();
    gt_MoveToFrontLineStartQ_Init();
    gt_OpentheGatesTimerExpires_Init();
    gt_PauseMercTimers_Init();
    gt_ComeOutoftheBaseReminderQ_Init();
    gt_UtherProximityMonitor_Init();
    gt_ObjectiveComeToTheFrontlinesCreate_Init();
    gt_ObjectiveComeToTheFrontlinesComplete_Init();
    gt_XPQ_Init();
    gt_XPSetup_Init();
    gt_XPCinematic_Init();
    gt_XPCleanup_Init();
    gt_ExperienceGainedUnitDamaged_Init();
    gt_HighlightExperienceBar_Init();
    gt_StartEXPArrowFlash_Init();
    gt_LevelUpQ_Init();
    gt_ObjectiveLevelUpCreate_Init();
    gt_ObjectiveLevelUpComplete_Init();
    gt_ObjectiveUnlockTalentCreate_Init();
    gt_ObjectiveUnlockTalentComplete_Init();
    gt_DisplayTopBarUI_Init();
    gt_HideTopBarUI_Init();
    gt_GotoWatchtowerQ_Init();
    gt_ActivateWatchtowers_Init();
    gt_WatchtowerCapturedMonitor_Init();
    gt_WatchtowerSuggestingPath_Init();
    gt_ObjectiveCaptureWatchtowerCreate_Init();
    gt_ObjectiveCaptureWatchtowerComplete_Init();
    gt_MercCampStart_Init();
    gt_MercCampCinematic_Init();
    gt_MercCampCleanup_Init();
    gt_ActivateMercCamps_Init();
    gt_MercCampSuggestingPath_Init();
    gt_MercCampCleared_Init();
    gt_MercCampCaptured_Init();
    gt_MercCampAggroed_Init();
    gt_ObjectiveCaptureCampCreate_Init();
    gt_ObjectiveCaptureCampComplete_Init();
    gt_EscortMercsStart_Init();
    gt_EscortMercsPing_Init();
    gt_EscortMercsFortKilled_Init();
    gt_EscortMercsSuggestingPath_Init();
    gt_ObjectiveEscortMercsCreate_Init();
    gt_ObjectiveEscortMercsComplete_Init();
    gt_Level10gained_Init();
    gt_CoreStart_Init();
    gt_CoreKilled_Init();
    gt_ObjectiveCoreCreate_Init();
    gt_ObjectiveCoreComplete_Init();
    gt_PlayerExitEarly_Init();
    gt_PushCorewithTeamReminder_Init();
    gt_ClearCoreReminderafterDelay_Init();
    gt_AttackedByTower_Init();
    gt_AttackedByTowerTransmissionQ_Init();
    gt_HealingFountainProximityMonitor_Init();
    gt_RegenGlobeReminder_Init();
    gt_RegenGlobePickedUp_Init();
    gt_RegenGlobeDies_Init();
    gt_HealingReminderQ_Init();
    gt_TalentsReminder_Init();
    gt_TalentsReminderTalentsPanelOpened_Init();
    gt_TalentsReminderTalentsPanelClosed_Init();
    gt_CastingAbilitiesHint_Init();
    gt_DeathReminder_Init();
    gt_MountSuggestion_Init();
    gt_MountUsed_Init();
    gt_FrostboltTargetingModeOn_Init();
    gt_FrostboltTargetingModeOff_Init();
    gt_FrostboltTargetingModeUsed_Init();
    gt_BlizzardTargetingModeOn_Init();
    gt_BlizzardTargetingModeOff_Init();
    gt_BlizzardTargetingModeUsed_Init();
    gt_StormBoltTargetingModeOn_Init();
    gt_StormBoltTargetingModeOff_Init();
    gt_StormBoltTargetingModeUsed_Init();
    gt_DwarfTossTargetingModeOn_Init();
    gt_DwarfTossTargetingModeOff_Init();
    gt_DwarfTossTargetingModeUsed_Init();
    gt_LightEluneTargetingModeOn_Init();
    gt_LightEluneTargetingModeOff_Init();
    gt_LightEluneTargetingModeUsed_Init();
    gt_SentinelTargetingModeOn_Init();
    gt_SentinelTargetingModeOff_Init();
    gt_SentinelTargetingModeUsed_Init();
    gt_LunarFlareTargetingModeOn_Init();
    gt_LunarFlareTargetingModeOff_Init();
    gt_LunarFlareTargetingModeUsed_Init();
    gt_ShortAutoTestTrigger_Init();
    gt_AutomationStartupTriggerandCameraLock_Init();
    gt_AutomationMovetoFrontline_Init();
    gt_AutomationMovetoWatchtower_Init();
    gt_AutomationMovetoMercCamp_Init();
    gt_AutomationClaimMercCamp_Init();
    gt_AutomationPushwithMercs_Init();
    gt_AutomationExitOut_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
