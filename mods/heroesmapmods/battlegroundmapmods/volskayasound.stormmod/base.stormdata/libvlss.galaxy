include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "LibVLSK"

include "LibVLSS_h"

//--------------------------------------------------------------------------------------------------
// Library: Volskaya Sound
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libVLSS_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libVLSK_InitVariables();
}

// Variable Initialization
bool libVLSS_InitVariables_completed = false;

void libVLSS_InitVariables () {
    int init_i;

    if (libVLSS_InitVariables_completed) {
        return;
    }

    libVLSS_InitVariables_completed = true;

    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libVLSS_gv_cPSounds[init_i].lv_pitchIncrement_FirstHalf = 0.0625;
        libVLSS_gv_cPSounds[init_i].lv_pitchIncrement_SecondHalf = 0.1875;
    }
}

// Functions
fixed libVLSS_gf_NewPitchValueAlly (int lp_team, int lp_capturePointIndex) {
    // Variable Declarations
    fixed lv_pitch;
    fixed lv_firstHalfProgress;
    fixed lv_secondHalfProgress;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_firstHalfProgress = MinF(libVLSK_gf_CapturingProgressOfTeam(lp_team, lp_capturePointIndex), (libVLSK_gv_capturePointContestTimeGoal_C / 2.0));
    lv_secondHalfProgress = (libVLSK_gf_CapturingProgressOfTeam(lp_team, lp_capturePointIndex) - lv_firstHalfProgress);
    lv_pitch = ((16 * lv_firstHalfProgress * 0.0625) + (16 * lv_secondHalfProgress * 0.1875));
    return lv_pitch;
}

fixed libVLSS_gf_NewPitchValueEnemy (int lp_team, int lp_capturePointIndex) {
    // Variable Declarations
    fixed lv_pitch;
    fixed lv_progress;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_progress = libVLSK_gf_CapturingProgressOfTeam(lp_team, lp_capturePointIndex);
    lv_pitch = (( lv_progress * .8333));
    return lv_pitch;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Capture Point Warning
//--------------------------------------------------------------------------------------------------
bool libVLSS_gt_CapturePointWarning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_captureRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_captureRegion = libVLSK_gf_VolskayaPointWarningCreatedRegion();

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("UI_Game_Ping_Volskaya_EventCountdown_Start", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    while (!((TimerGetRemaining(libVLSK_gv_capturePointWarningTimer) <= 4.0))) {
        Wait(1.0, c_timeGame);
    }
    while ((TimerGetRemaining(libVLSK_gv_capturePointWarningTimer) >= 1.0)) {
        SoundPlayForPlayer(SoundLink("UI_Game_Ping_Volskaya_Event_Start_BeepPT321", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeGame);
    }
    SoundPlayForPlayer(SoundLink("UI_Game_Ping_Volskaya_Event_Start_BeepPT0", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVLSS_gt_CapturePointWarning_Init () {
    libVLSS_gt_CapturePointWarning = TriggerCreate("libVLSS_gt_CapturePointWarning_Func");
    libVLSK_gf_VolskayaPointWarningCreated(libVLSS_gt_CapturePointWarning);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Capture Point Enabled
//--------------------------------------------------------------------------------------------------
bool libVLSS_gt_CapturePointEnabled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_captureRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_captureRegion = libVLSK_gf_VolskayaPointEnabledRegion();

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerCreateEffectPoint(0, "Doodad_Volskaya_CapturePoint_Active", RegionGetCenter(lv_captureRegion));
    SoundPlayForPlayer(SoundLink("UI_Game_Ping_Volskaya_Event_Start", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    ActorCreate(ActorScopeFromUnit(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core), "UI_Game_Volskaya_CapturePoint_Capturing_Ally", null, null, null);
    libVLSS_gv_cPSounds[libGame_gv_teamOrderIndex_C].lv_ally_LoopingSound = libNtve_gf_ActorLastCreatedSend();
    ActorCreate(ActorScopeFromUnit(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core), "UI_Game_Volskaya_CapturePoint_Capturing_Enemy", null, null, null);
    libVLSS_gv_cPSounds[libGame_gv_teamOrderIndex_C].lv_enemy_LoopingSound = libNtve_gf_ActorLastCreatedSend();
    ActorSend(libVLSS_gv_cPSounds[libGame_gv_teamOrderIndex_C].lv_ally_LoopingSound, "SoundSetMuted 1 0");
    ActorSend(libVLSS_gv_cPSounds[libGame_gv_teamOrderIndex_C].lv_enemy_LoopingSound, "SoundSetMuted 1 0");
    ActorCreate(ActorScopeFromUnit(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core), "UI_Game_Volskaya_CapturePoint_Capturing_Ally", null, null, null);
    libVLSS_gv_cPSounds[libGame_gv_teamChaosIndex_C].lv_ally_LoopingSound = libNtve_gf_ActorLastCreatedSend();
    ActorSend(libVLSS_gv_cPSounds[libGame_gv_teamChaosIndex_C].lv_ally_LoopingSound, "SetFilterPlayers");
    ActorCreate(ActorScopeFromUnit(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core), "UI_Game_Volskaya_CapturePoint_Capturing_Enemy", null, null, null);
    libVLSS_gv_cPSounds[libGame_gv_teamChaosIndex_C].lv_enemy_LoopingSound = libNtve_gf_ActorLastCreatedSend();
    ActorSend(libVLSS_gv_cPSounds[libGame_gv_teamChaosIndex_C].lv_enemy_LoopingSound, "SetFilterPlayers");
    ActorSend(libVLSS_gv_cPSounds[libGame_gv_teamChaosIndex_C].lv_ally_LoopingSound, "SoundSetMuted 1 0");
    ActorSend(libVLSS_gv_cPSounds[libGame_gv_teamChaosIndex_C].lv_enemy_LoopingSound, "SoundSetMuted 1 0");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVLSS_gt_CapturePointEnabled_Init () {
    libVLSS_gt_CapturePointEnabled = TriggerCreate("libVLSS_gt_CapturePointEnabled_Func");
    libVLSK_gf_VolskayaPointEnabled(libVLSS_gt_CapturePointEnabled);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Capture Point Changed Ownership
//--------------------------------------------------------------------------------------------------
bool libVLSS_gt_CapturePointChangedOwnership_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_captureRegion;
    int lv_capturingTeam;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_captureRegion = libVLSK_gf_VolskayaPointOwnershipChangedRegion();
    lv_capturingTeam = libVLSK_gf_VolskayaPointOwnershipChangedNewOwner();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_capturingTeam == libCore_gv_cOMPUTER_Neutral)) {
        SoundPlayForPlayer(SoundLink("UI_Game_Ping_Volskaya_CapturePoint_Control_Neutral", -1), c_maxPlayers, PlayerGroupAll(), 60.0, 0.0);
    }
    else {
        SoundPlayForPlayer(SoundLink("UI_Game_Ping_Volskaya_CapturePoint_Control_Ally", -1), c_maxPlayers, libGame_gf_PlayersOnTeamHeroes(lv_capturingTeam, false), 60.0, 0.0);
        SoundPlayForPlayer(SoundLink("UI_Game_Ping_Volskaya_CapturePoint_Control_Enemy", -1), c_maxPlayers, libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeam(lv_capturingTeam), false), 60.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVLSS_gt_CapturePointChangedOwnership_Init () {
    libVLSS_gt_CapturePointChangedOwnership = TriggerCreate("libVLSS_gt_CapturePointChangedOwnership_Func");
    libVLSK_gf_VolskayaPointOwnershipChanged(libVLSS_gt_CapturePointChangedOwnership);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Capture Point Completed
//--------------------------------------------------------------------------------------------------
bool libVLSS_gt_CapturePointCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_captureRegion;
    int lv_capturingTeam;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_captureRegion = libVLSK_gf_VolskayaPointCompletedRegion();
    lv_capturingTeam = libVLSK_gf_VolskayaPointCompletedWinningTeam();

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("UI_Game_Ping_Volskaya_CapturePoint_Win_Ally", -1), c_maxPlayers, GameAttributePlayersForTeam(lv_capturingTeam), 60.0, 0.0);
    SoundPlayForPlayer(SoundLink("UI_Game_Ping_Volskaya_CapturePoint_Win_Enemy", -1), c_maxPlayers, GameAttributePlayersForTeam(libGame_gf_EnemyTeam(lv_capturingTeam)), 60.0, 0.0);
    ActorSend(libVLSS_gv_cPSounds[libGame_gv_teamOrderIndex_C].lv_ally_LoopingSound, "Destroy");
    libVLSS_gv_cPSounds[libGame_gv_teamOrderIndex_C].lv_ally_LoopingSound = null;
    ActorSend(libVLSS_gv_cPSounds[libGame_gv_teamOrderIndex_C].lv_enemy_LoopingSound, "Destroy");
    libVLSS_gv_cPSounds[libGame_gv_teamOrderIndex_C].lv_enemy_LoopingSound = null;
    ActorSend(libVLSS_gv_cPSounds[libGame_gv_teamChaosIndex_C].lv_ally_LoopingSound, "Destroy");
    libVLSS_gv_cPSounds[libGame_gv_teamChaosIndex_C].lv_ally_LoopingSound = null;
    ActorSend(libVLSS_gv_cPSounds[libGame_gv_teamChaosIndex_C].lv_enemy_LoopingSound, "Destroy");
    libVLSS_gv_cPSounds[libGame_gv_teamChaosIndex_C].lv_enemy_LoopingSound = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVLSS_gt_CapturePointCompleted_Init () {
    libVLSS_gt_CapturePointCompleted = TriggerCreate("libVLSS_gt_CapturePointCompleted_Func");
    libVLSK_gf_VolskayaPointCompleted(libVLSS_gt_CapturePointCompleted);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Giant Robot Dies
//--------------------------------------------------------------------------------------------------
bool libVLSS_gt_GiantRobotDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_deathLocation;
    int lv_owningTeam;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_deathLocation = libVLSK_gf_VolskayaGiantRobotDiesPoint();
    lv_owningTeam = libVLSK_gf_VolskayaGiantRobotDiesOwningTeam();

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("UI_Game_Ping_Volskaya_Event_End", -1), c_maxPlayers, PlayerGroupAll(), 60.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVLSS_gt_GiantRobotDies_Init () {
    libVLSS_gt_GiantRobotDies = TriggerCreate("libVLSS_gt_GiantRobotDies_Func");
    libVLSK_gf_VolskayaGiantRobotDies(libVLSS_gt_GiantRobotDies);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Begins Capturing Point
//--------------------------------------------------------------------------------------------------
bool libVLSS_gt_TeamBeginsCapturingPoint_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_capturingTeamID;
    int lv_nonCapturingTeamID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_capturingTeamID = libVLSK_gf_Volskaya_TeamBeginsCapturingPoint_AllyTeam();
    lv_nonCapturingTeamID = libVLSK_gf_Volskaya_TeamBeginsCapturingPoint_EnemyTeam();
    SoundPlayForPlayer(SoundLink("UI_Game_Volskaya_CapturePoint_Capturing_Start", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    while ((libVLSK_gf_StateOfPoint(libVLSK_gf_Volskaya_TeamBeginsCapturingPoint_CapturePointIndex()) == libVLSK_ge_OverwatchCapturePoint_State_Capturing)) {
        ActorSend(libVLSS_gv_cPSounds[lv_capturingTeamID].lv_ally_LoopingSound, (("SoundSetPitch Linear " + FixedToString(libVLSS_gf_NewPitchValueAlly(lv_capturingTeamID, libVLSK_gf_Volskaya_TeamBeginsCapturingPoint_CapturePointIndex()), c_fixedPrecisionAny) + "@0")));
        ActorSend(libVLSS_gv_cPSounds[lv_nonCapturingTeamID].lv_enemy_LoopingSound, (("SoundSetPitch Linear " + FixedToString(libVLSS_gf_NewPitchValueEnemy(lv_capturingTeamID, libVLSK_gf_Volskaya_TeamBeginsCapturingPoint_CapturePointIndex()), c_fixedPrecisionAny) + "@0")));
        ActorSend(libVLSS_gv_cPSounds[lv_nonCapturingTeamID].lv_ally_LoopingSound, (("SoundSetPitch Linear " + FixedToString(libVLSS_gf_NewPitchValueAlly(lv_nonCapturingTeamID, libVLSK_gf_Volskaya_TeamBeginsCapturingPoint_CapturePointIndex()), c_fixedPrecisionAny) + "@0")));
        ActorSend(libVLSS_gv_cPSounds[lv_capturingTeamID].lv_enemy_LoopingSound, (("SoundSetPitch Linear " + FixedToString(libVLSS_gf_NewPitchValueEnemy(lv_nonCapturingTeamID, libVLSK_gf_Volskaya_TeamBeginsCapturingPoint_CapturePointIndex()), c_fixedPrecisionAny) + "@0")));
        if ((libVLSK_gf_CapturingProgressOfTeam(lv_capturingTeamID, libVLSK_gf_Volskaya_TeamBeginsCapturingPoint_CapturePointIndex()) < libVLSK_gv_capturePointContestTimeGoal_C) && (libVLSK_gf_CapturingProgressOfTeam(lv_nonCapturingTeamID, libVLSK_gf_Volskaya_TeamBeginsCapturingPoint_CapturePointIndex()) <= 0.0)) {
            ActorSend(libVLSS_gv_cPSounds[lv_capturingTeamID].lv_ally_LoopingSound, "SoundSetMuted 0 0");
            ActorSend(libVLSS_gv_cPSounds[lv_nonCapturingTeamID].lv_enemy_LoopingSound, "SoundSetMuted 0 0");
            ActorSend(libVLSS_gv_cPSounds[lv_capturingTeamID].lv_enemy_LoopingSound, "SoundSetMuted 1 0");
            ActorSend(libVLSS_gv_cPSounds[lv_nonCapturingTeamID].lv_ally_LoopingSound, "SoundSetMuted 1 0");
        }
        else {
            ActorSend(libVLSS_gv_cPSounds[lv_capturingTeamID].lv_ally_LoopingSound, "SoundSetMuted 1 0");
            ActorSend(libVLSS_gv_cPSounds[lv_nonCapturingTeamID].lv_enemy_LoopingSound, "SoundSetMuted 1 0");
            ActorSend(libVLSS_gv_cPSounds[lv_capturingTeamID].lv_enemy_LoopingSound, "SoundSetMuted 1 0");
            ActorSend(libVLSS_gv_cPSounds[lv_nonCapturingTeamID].lv_ally_LoopingSound, "SoundSetMuted 1 0");
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVLSS_gt_TeamBeginsCapturingPoint_Init () {
    libVLSS_gt_TeamBeginsCapturingPoint = TriggerCreate("libVLSS_gt_TeamBeginsCapturingPoint_Func");
    libVLSK_gf_Volskaya_TeamBeginsCapturingPoint(libVLSS_gt_TeamBeginsCapturingPoint);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Begins Contesting Point
//--------------------------------------------------------------------------------------------------
bool libVLSS_gt_TeamBeginsContestingPoint_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(libVLSS_gv_cPSounds[libGame_gv_teamOrderIndex_C].lv_ally_LoopingSound, "SoundSetMuted 1 0");
    ActorSend(libVLSS_gv_cPSounds[libGame_gv_teamChaosIndex_C].lv_ally_LoopingSound, "SoundSetMuted 1 0");
    ActorSend(libVLSS_gv_cPSounds[libGame_gv_teamOrderIndex_C].lv_enemy_LoopingSound, "SoundSetMuted 0 0");
    ActorSend(libVLSS_gv_cPSounds[libGame_gv_teamChaosIndex_C].lv_enemy_LoopingSound, "SoundSetMuted 0 0");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVLSS_gt_TeamBeginsContestingPoint_Init () {
    libVLSS_gt_TeamBeginsContestingPoint = TriggerCreate("libVLSS_gt_TeamBeginsContestingPoint_Func");
    libVLSK_gf_Volskaya_TeamBeginsContestingPoint(libVLSS_gt_TeamBeginsContestingPoint);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Stops Capturing Point
//--------------------------------------------------------------------------------------------------
bool libVLSS_gt_TeamStopsCapturingPoint_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_nonCapturingTeam;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nonCapturingTeam = libGame_gf_EnemyTeam(libVLSK_gf_Volskaya_TeamStopsCapturingPoint_Team());

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("UI_Game_Volskaya_CapturePoint_Capturing_Interrupt", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    ActorSend(libVLSS_gv_cPSounds[libVLSK_gf_Volskaya_TeamStopsCapturingPoint_Team()].lv_ally_LoopingSound, "SoundSetMuted 1 0");
    ActorSend(libVLSS_gv_cPSounds[lv_nonCapturingTeam].lv_enemy_LoopingSound, "SoundSetMuted 1 0");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libVLSS_gt_TeamStopsCapturingPoint_Init () {
    libVLSS_gt_TeamStopsCapturingPoint = TriggerCreate("libVLSS_gt_TeamStopsCapturingPoint_Func");
    libVLSK_gf_Volskaya_TeamStopsCapturingPoint(libVLSS_gt_TeamStopsCapturingPoint);
}

void libVLSS_InitTriggers () {
    libVLSS_gt_CapturePointWarning_Init();
    libVLSS_gt_CapturePointEnabled_Init();
    libVLSS_gt_CapturePointChangedOwnership_Init();
    libVLSS_gt_CapturePointCompleted_Init();
    libVLSS_gt_GiantRobotDies_Init();
    libVLSS_gt_TeamBeginsCapturingPoint_Init();
    libVLSS_gt_TeamBeginsContestingPoint_Init();
    libVLSS_gt_TeamStopsCapturingPoint_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libVLSS_InitLib_completed = false;

void libVLSS_InitLib () {
    if (libVLSS_InitLib_completed) {
        return;
    }

    libVLSS_InitLib_completed = true;

    libVLSS_InitLibraries();
    libVLSS_InitVariables();
    libVLSS_InitTriggers();
}

