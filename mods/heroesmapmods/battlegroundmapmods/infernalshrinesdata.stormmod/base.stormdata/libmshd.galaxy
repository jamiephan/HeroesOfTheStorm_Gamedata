include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/AILib"
include "LibMLHH"

include "LibMSHD_h"

//--------------------------------------------------------------------------------------------------
// Library: Infernal Shrines Data (Mod)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libMSHD_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libAIAI_InitVariables();
    libMLHH_InitVariables();
}

// Variable Initialization
bool libMSHD_InitVariables_completed = false;

void libMSHD_InitVariables () {
    if (libMSHD_InitVariables_completed) {
        return;
    }

    libMSHD_InitVariables_completed = true;

}

// Functions
void libMSHD_gf_MMISPreloadPunisherModels (string lp_shrineBehavior) {
    // Automatic Variable Declarations
    string auto57087156_val;

    // Implementation
    auto57087156_val = lp_shrineBehavior;
    if (auto57087156_val == "ArcaneShrine") {
        PreloadModel("Assets\\Units\\Mercs\\Storm_Merc_HvH2_Punisher_Arcane\\Storm_Merc_HvH2_Punisher_Arcane.m3", false);
        PreloadModel("Assets\\Units\\Mercs\\Storm_Merc_HvH2_Punisher_Arcane_Death\\Storm_Merc_HvH2_Punisher_Arcane_Death.m3", false);
        PreloadModel("Assets\\Effects\\Storm_FX_Merc_HvH2_Punisher_Arcane_LeapImpact\\Storm_FX_Merc_HvH2_Punisher_Arcane_LeapImpact.m3", false);
        PreloadModel("Assets\\Effects\\Storm_FX_Merc_HvH2_Punisher_Arcane_Beam_Cast\\Storm_FX_Merc_HvH2_Punisher_Arcane_Beam_Cast.m3", false);
    }
    else if (auto57087156_val == "FrozenShrine") {
        PreloadModel("Assets\\Units\\Mercs\\Storm_Merc_HvH2_Punisher_Frozen\\Storm_Merc_HvH2_Punisher_Frozen.m3", false);
        PreloadModel("Assets\\Units\\Mercs\\Storm_Merc_HvH2_Punisher_Frozen_Death\\Storm_Merc_HvH2_Punisher_Frozen_Death.m3", false);
        PreloadModel("Assets\\Effects\\Storm_FX_Merc_HvH2_Punisher_Frozen_LeapImpact\\Storm_FX_Merc_HvH2_Punisher_Frozen_LeapImpact.m3", false);
        PreloadModel("Assets\\Effects\\Storm_FX_Merc_HvH2_Punisher_Frozen_FrostExplosion_Cast\\Storm_FX_Merc_HvH2_Punisher_Frozen_FrostExplosion_Cast.m3", false);
        PreloadModel("Assets\\Effects\\Storm_FX_Merc_HvH2_Punisher_Frozen_FrostExplosion\\Storm_FX_Merc_HvH2_Punisher_Frozen_FrostExplosion.m3", false);
    }
    else if (auto57087156_val == "BombardShrine") {
        PreloadModel("Assets\\Units\\Mercs\\Storm_Merc_HvH2_Punisher_Mortar\\Storm_Merc_HvH2_Punisher_Mortar.m3", false);
        PreloadModel("Assets\\Units\\Mercs\\Storm_Merc_HvH2_Punisher_Mortar_Death\\Storm_Merc_HvH2_Punisher_Mortar_Death.m3", false);
        PreloadModel("Assets\\Effects\\Storm_FX_Merc_HvH2_Punisher_Mortar_LeapImpact\\Storm_FX_Merc_HvH2_Punisher_Mortar_LeapImpact.m3", false);
        PreloadModel("Assets\\Effects\\Storm_FX_Merc_HvH2_Punisher_Mortar_Missile\\Storm_FX_Merc_HvH2_Punisher_Mortar_Missile.m3", false);
        PreloadModel("Assets\\Effects\\Storm_FX_Merc_HvH2_Punisher_Mortar_Missile_Explosion\\Storm_FX_Merc_HvH2_Punisher_Mortar_Missile_Explosion.m3", false);
    }
    else {
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include Infernal Shrines Data
//--------------------------------------------------------------------------------------------------
bool libMSHD_gt_IncludeInfernalShrinesData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMSHD_gt_IncludeInfernalShrinesData_Init () {
    libMSHD_gt_IncludeInfernalShrinesData = TriggerCreate("libMSHD_gt_IncludeInfernalShrinesData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM ShrinesData Init
//--------------------------------------------------------------------------------------------------
bool libMSHD_gt_MMShrinesDataInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libMLHH_gt_IncludeHH, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMSHD_gt_MMShrinesDataInit_Init () {
    libMSHD_gt_MMShrinesDataInit = TriggerCreate("libMSHD_gt_MMShrinesDataInit_Func");
    libGame_gf_MapMechanicInitialization(libMSHD_gt_MMShrinesDataInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Punisher - Leap
//--------------------------------------------------------------------------------------------------
bool libMSHD_gt_PunisherLeap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_abilityRange;
    point lv_playerTargetPoint;
    fixed lv_distanceFromBarbarianToPlayerTargetPoint;
    fixed lv_barbarianRadius;
    point lv_actualTargetPoint;
    fixed lv_modifiedDistance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_barbarianRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster))), "Radius", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    lv_abilityRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogActor, "MercPunisherLanerLeapRangeSplat", "Scale", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster))) + lv_barbarianRadius);
    lv_playerTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_distanceFromBarbarianToPlayerTargetPoint = DistanceBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_playerTargetPoint);
    if ((lv_distanceFromBarbarianToPlayerTargetPoint > lv_abilityRange)) {
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_abilityRange, lv_playerTargetPoint);
    }
    else {
        lv_actualTargetPoint = lv_playerTargetPoint;
    }
    lv_modifiedDistance = lv_distanceFromBarbarianToPlayerTargetPoint;
    while ((PointPathingPassable(lv_actualTargetPoint) == false)) {
        lv_modifiedDistance -= 0.125;
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_modifiedDistance, lv_playerTargetPoint);
        if ((PointPathingPassable(lv_actualTargetPoint) == false)) {
            lv_actualTargetPoint = PointWithOffsetPolar(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_modifiedDistance, lv_playerTargetPoint), 0.5, (AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_playerTargetPoint) + 90.0));
            if ((PointPathingPassable(lv_actualTargetPoint) == false)) {
                lv_actualTargetPoint = PointWithOffsetPolar(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_modifiedDistance, lv_playerTargetPoint), 0.5, (AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_playerTargetPoint) - 90.0));
                if ((PointPathingPassable(lv_actualTargetPoint) == false)) {
                    lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_modifiedDistance, lv_playerTargetPoint);
                }

            }

        }

        if ((DistanceBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_actualTargetPoint) <= (lv_barbarianRadius + 0.125))) {
            libNtve_gf_UIErrorMessage(libCore_gv_playerGroupFromPlayer[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)], StringExternal("Param/Value/lib_MSHD_D63B1DB4"), SoundLink("UI_GenericError", -1));
            UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "MercPunisherLanerLeap", 1);
            UnitAbilityReset(EventPlayerEffectUsedUnit(c_effectUnitCaster), AbilityCommand("MercPunisherLanerLeap", 0), c_spendLocationAll);
            return true;
        }

    }
    if ((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true)) {
        UnitCreateEffectPointWithSource(EventPlayerEffectUsedUnit(c_effectUnitCaster), "MercPunisherLanerLeapLaunchMissile", lv_actualTargetPoint, c_gameCatalogAbil, "MercPunisherLanerLeap");
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "MercPunisherLanerLeapCreateWarningPersistent", lv_actualTargetPoint);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMSHD_gt_PunisherLeap_Init () {
    libMSHD_gt_PunisherLeap = TriggerCreate("libMSHD_gt_PunisherLeap_Func");
    TriggerAddEventPlayerEffectUsed(libMSHD_gt_PunisherLeap, c_playerAny, "MercPunisherLanerLeapInitialSet");
    TriggerAddEventPlayerEffectUsed(libMSHD_gt_PunisherLeap, c_playerAny, "MercPunisherLanerLeapNoMovementInitialSet");
}

void libMSHD_InitTriggers () {
    libMSHD_gt_IncludeInfernalShrinesData_Init();
    libMSHD_gt_MMShrinesDataInit_Init();
    libMSHD_gt_PunisherLeap_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libMSHD_InitLib_completed = false;

void libMSHD_InitLib () {
    if (libMSHD_InitLib_completed) {
        return;
    }

    libMSHD_InitLib_completed = true;

    libMSHD_InitLibraries();
    libMSHD_InitVariables();
    libMSHD_InitTriggers();
}

