include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/UILib"

include "LibHAMA_h"

//--------------------------------------------------------------------------------------------------
// Library: Amazon
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libHAMA_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libUIUI_InitVariables();
}

// Variable Initialization
bool libHAMA_InitVariables_completed = false;

void libHAMA_InitVariables () {
    if (libHAMA_InitVariables_completed) {
        return;
    }

    libHAMA_InitVariables_completed = true;

    libHAMA_gv_amazonUI.lv_mainPanel = c_invalidDialogControlId;
    libHAMA_gv_amazonUI.lv_SurgeOfLightProgressBar = c_invalidDialogControlId;
    libHAMA_gv_amazon_HeroSpecificCommandCardPanel = c_invalidDialogControlId;
    libHAMA_gv_amazon_Button05OverridePanel = c_invalidDialogControlId;
}

// Functions
void libHAMA_gf_HeroAmazonIncrementHeroCountFunction () {
    // Automatic Variable Declarations
    // Implementation
    libHAMA_gv_heroAmazonTriggerRegistrationVariable += 1;
    if ((libHAMA_gv_heroAmazonTriggerRegistrationVariable == 1)) {
        TriggerEnable(libHAMA_gt_HeroAmazonSurgeofLightDamageTaken, true);
        TriggerEnable(libHAMA_gt_HeroAmazonSurgeofLightResetCharge, true);
        TriggerEnable(libHAMA_gt_HeroAmazonInnerLightCheckforCC, true);
    }

}

void libHAMA_gf_HeroAmazonDecrementHeroCountFunction () {
    // Automatic Variable Declarations
    // Implementation
    libHAMA_gv_heroAmazonTriggerRegistrationVariable -= 1;
    if ((libHAMA_gv_heroAmazonTriggerRegistrationVariable < 0)) {
        libHAMA_gv_heroAmazonTriggerRegistrationVariable = 0;
    }

    if ((libHAMA_gv_heroAmazonTriggerRegistrationVariable == 0)) {
        TriggerEnable(libHAMA_gt_HeroAmazonSurgeofLightDamageTaken, false);
        TriggerEnable(libHAMA_gt_HeroAmazonSurgeofLightResetCharge, false);
        TriggerEnable(libHAMA_gt_HeroAmazonInnerLightCheckforCC, false);
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Amazon - Hero Specific Command Card Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libHAMA_gt_AmazonHeroSpecificCommandCardPanelInitialize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HeroSpecificCommandCardPanel");
    libUIUI_gf_UISetDialogItemToSelectedOrObserved(DialogControlLastCreated());
    libHAMA_gv_amazon_HeroSpecificCommandCardPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/CommandPanel/CommandButton05/HeroSpecificCommandCardPanel");
    libUIUI_gf_UISetDialogItemToSelectedOrObserved(DialogControlLastCreated());
    libHAMA_gv_amazon_Button05OverridePanel = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHAMA_gt_AmazonHeroSpecificCommandCardPanelInitialize_Init () {
    libHAMA_gt_AmazonHeroSpecificCommandCardPanelInitialize = TriggerCreate("libHAMA_gt_AmazonHeroSpecificCommandCardPanelInitialize_Func");
    libCore_gf_IncludeModInitialization(libHAMA_gt_AmazonHeroSpecificCommandCardPanelInitialize);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amazon - UI Initialize
//--------------------------------------------------------------------------------------------------
bool libHAMA_gt_AmazonUIInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookup(libHAMA_gv_amazon_HeroSpecificCommandCardPanel, c_triggerControlTypePanel, "AmazonCommandCardFrame");
    libHAMA_gv_amazonUI.lv_mainPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(libHAMA_gv_amazon_Button05OverridePanel, c_triggerControlTypePanel, "AmazonSurgeOfLightButtonOverrideFrame");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeProgressBar, "UnitStatusFrame0/SurgeOfLightProgressBar");
    libHAMA_gv_amazonUI.lv_SurgeOfLightProgressBar = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHAMA_gt_AmazonUIInitialize_Init () {
    libHAMA_gt_AmazonUIInitialize = TriggerCreate("libHAMA_gt_AmazonUIInitialize_Func");
    libCore_gf_IncludeModInitialization(libHAMA_gt_AmazonUIInitialize);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Amazon - Surge of Light - Damage Taken
//--------------------------------------------------------------------------------------------------
bool libHAMA_gt_HeroAmazonSurgeofLightDamageTaken_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_amazonUnit;
    int lv_amazonPlayer;
    string lv_maximumChargeReference;
    string lv_currentChargeReference;
    fixed lv_maximumCharge;
    fixed lv_currentCharge;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_amazonUnit = EventUnit();
    lv_amazonPlayer = EventPlayer();
    lv_maximumChargeReference = "AmazonAvoidanceSurgeOfLightDummyMaximumCharge";
    lv_currentChargeReference = "AmazonAvoidanceSurgeOfLightDummyCurrentCharge";
    lv_maximumCharge = CatalogFieldValueGetAsFixed(c_gameCatalogEffect, lv_maximumChargeReference, "Amount", lv_amazonPlayer);
    lv_currentCharge = CatalogFieldValueGetAsFixed(c_gameCatalogEffect, lv_currentChargeReference, "Amount", lv_amazonPlayer);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_amazonUnit, "AmazonAvoidanceDamageReduction") == true))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_amazonPlayer, "AmazonSurgeOfLight") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_currentCharge < lv_maximumCharge)) {
        CatalogFieldValueModifyFixed(c_gameCatalogEffect, lv_currentChargeReference, "Amount", lv_amazonPlayer, EventUnitDamageAmount(), c_upgradeOperationAdd);
        lv_currentCharge = CatalogFieldValueGetAsFixed(c_gameCatalogEffect, lv_currentChargeReference, "Amount", lv_amazonPlayer);
        libNtve_gf_SetDialogItemCurrentValue(libHAMA_gv_amazonUI.lv_SurgeOfLightProgressBar, FixedToInt((100.0 * (lv_currentCharge / lv_maximumCharge))), libCore_gv_playerGroupFromPlayer[lv_amazonPlayer]);
    }

    if ((lv_currentCharge >= lv_maximumCharge)) {
        UnitBehaviorAdd(lv_amazonUnit, "AmazonAvoidanceSurgeOfLightAbilityReady", lv_amazonUnit, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libHAMA_gt_HeroAmazonSurgeofLightDamageTaken_Init () {
    libHAMA_gt_HeroAmazonSurgeofLightDamageTaken = TriggerCreate("libHAMA_gt_HeroAmazonSurgeofLightDamageTaken_Func");
    TriggerEnable(libHAMA_gt_HeroAmazonSurgeofLightDamageTaken, false);
    TriggerAddEventUnitDamaged(libHAMA_gt_HeroAmazonSurgeofLightDamageTaken, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Amazon - Surge of Light - Reset Charge
//--------------------------------------------------------------------------------------------------
bool libHAMA_gt_HeroAmazonSurgeofLightResetCharge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_currentChargeReference;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentChargeReference = "AmazonAvoidanceSurgeOfLightDummyCurrentCharge";

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemCurrentValue(libHAMA_gv_amazonUI.lv_SurgeOfLightProgressBar, FixedToInt(0.0), libCore_gv_playerGroupFromPlayer[UnitGetOwner(EventUnit())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHAMA_gt_HeroAmazonSurgeofLightResetCharge_Init () {
    libHAMA_gt_HeroAmazonSurgeofLightResetCharge = TriggerCreate("libHAMA_gt_HeroAmazonSurgeofLightResetCharge_Func");
    TriggerEnable(libHAMA_gt_HeroAmazonSurgeofLightResetCharge, false);
    TriggerAddEventUnitBehaviorChange(libHAMA_gt_HeroAmazonSurgeofLightResetCharge, null, "AmazonAvoidanceSurgeOfLightAbilityReady", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Amazon - Inner Light (Check for CC)
//--------------------------------------------------------------------------------------------------
bool libHAMA_gt_HeroAmazonInnerLightCheckforCC_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_amazonPlayer;
    unit lv_amazonUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_amazonPlayer = EventPlayer();
    lv_amazonUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((lv_amazonPlayer > 0))) {
            return false;
        }

        if (!((lv_amazonPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_amazonPlayer, "AmazonInnerLight") == true))) {
            return false;
        }

        if (!((UnitGetType(lv_amazonUnit) == "HeroAmazon"))) {
            return false;
        }

        if (!((UnitHasBehavior2(lv_amazonUnit, "AmazonBlindingLightInnerLightCooldown") == false))) {
            return false;
        }

        if (!((UnitHasBehaviorWithCategoryFlag(lv_amazonUnit, c_behaviorCategoryBuffUnstoppable) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_amazonUnit, "AmazonBlindingLightInnerLightApplySet", lv_amazonUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHAMA_gt_HeroAmazonInnerLightCheckforCC_Init () {
    libHAMA_gt_HeroAmazonInnerLightCheckforCC = TriggerCreate("libHAMA_gt_HeroAmazonInnerLightCheckforCC_Func");
    TriggerEnable(libHAMA_gt_HeroAmazonInnerLightCheckforCC, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libHAMA_gt_HeroAmazonInnerLightCheckforCC, null, c_behaviorCategoryStun, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libHAMA_gt_HeroAmazonInnerLightCheckforCC, null, c_behaviorCategoryDebuffRoot, c_unitBehaviorChangeCreate);
}

void libHAMA_InitTriggers () {
    libHAMA_gt_AmazonHeroSpecificCommandCardPanelInitialize_Init();
    libHAMA_gt_AmazonUIInitialize_Init();
    libHAMA_gt_HeroAmazonSurgeofLightDamageTaken_Init();
    libHAMA_gt_HeroAmazonSurgeofLightResetCharge_Init();
    libHAMA_gt_HeroAmazonInnerLightCheckforCC_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libHAMA_InitLib_completed = false;

void libHAMA_InitLib () {
    if (libHAMA_InitLib_completed) {
        return;
    }

    libHAMA_InitLib_completed = true;

    libHAMA_InitLibraries();
    libHAMA_InitVariables();
    libHAMA_InitTriggers();
}

