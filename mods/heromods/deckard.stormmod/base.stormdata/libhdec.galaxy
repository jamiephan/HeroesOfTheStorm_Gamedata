include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"

include "LibHDEC_h"

//--------------------------------------------------------------------------------------------------
// Library: Deckard
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libHDEC_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
}

// Variable Initialization
bool libHDEC_InitVariables_completed = false;

void libHDEC_InitVariables () {
    int init_i;

    if (libHDEC_InitVariables_completed) {
        return;
    }

    libHDEC_InitVariables_completed = true;

    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libHDEC_gv_heroDeckardScrollOfSealingUnitGroup[init_i] = UnitGroupEmpty();
    }
}

// Functions
void libHDEC_gf_HeroDeckardIncrementHeroCountFunction () {
    // Automatic Variable Declarations
    // Implementation
    libHDEC_gv_heroDeckardTriggerRegistrationVariable += 1;
    if ((libHDEC_gv_heroDeckardTriggerRegistrationVariable == 1)) {
        TriggerEnable(libHDEC_gt_HeroDeckardFortitudeOfTheFaithfulBaselineCDR, true);
        TriggerEnable(libHDEC_gt_HeroDeckardAncientBlessingsAoEProcHandler, true);
        TriggerEnable(libHDEC_gt_HeroDeckardAncientBlessingsScalingHandler, true);
        TriggerEnable(libHDEC_gt_HeroDeckardFortitudeOfTheFaithfulSafetyinNumbersCDR, true);
        TriggerEnable(libHDEC_gt_HeroDeckardRejuvenationPotionApplyHoT, true);
    }

}

void libHDEC_gf_HeroDeckardDecrementHeroCountFunction () {
    // Automatic Variable Declarations
    // Implementation
    libHDEC_gv_heroDeckardTriggerRegistrationVariable -= 1;
    if ((libHDEC_gv_heroDeckardTriggerRegistrationVariable < 0)) {
        libHDEC_gv_heroDeckardTriggerRegistrationVariable = 0;
    }

    if ((libHDEC_gv_heroDeckardTriggerRegistrationVariable == 0)) {
        TriggerEnable(libHDEC_gt_HeroDeckardFortitudeOfTheFaithfulBaselineCDR, false);
        TriggerEnable(libHDEC_gt_HeroDeckardAncientBlessingsAoEProcHandler, false);
        TriggerEnable(libHDEC_gt_HeroDeckardAncientBlessingsScalingHandler, false);
        TriggerEnable(libHDEC_gt_HeroDeckardFortitudeOfTheFaithfulSafetyinNumbersCDR, false);
        TriggerEnable(libHDEC_gt_HeroDeckardRejuvenationPotionApplyHoT, false);
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Deckard - Ancient Blessings - AoE Proc Handler
//--------------------------------------------------------------------------------------------------
bool libHDEC_gt_HeroDeckardAncientBlessingsAoEProcHandler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitSource), "DeckardAncientBlessingsAoESearch", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHDEC_gt_HeroDeckardAncientBlessingsAoEProcHandler_Init () {
    libHDEC_gt_HeroDeckardAncientBlessingsAoEProcHandler = TriggerCreate("libHDEC_gt_HeroDeckardAncientBlessingsAoEProcHandler_Func");
    TriggerEnable(libHDEC_gt_HeroDeckardAncientBlessingsAoEProcHandler, false);
    TriggerAddEventPlayerEffectUsed(libHDEC_gt_HeroDeckardAncientBlessingsAoEProcHandler, c_playerAny, "DeckardAncientBlessingsAoEProcDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Deckard - Ancient Blessings - Scaling Handler
//--------------------------------------------------------------------------------------------------
bool libHDEC_gt_HeroDeckardAncientBlessingsScalingHandler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deckard;
    unit lv_target;
    int lv_targetPlayer;
    int lv_deckardPlayer;
    fixed lv_deckardScaling;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_deckard = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_targetPlayer = UnitGetOwner(lv_target);
    lv_deckardPlayer = UnitGetOwner(lv_deckard);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deckardScaling = CatalogFieldValueGetAsFixed(c_gameCatalogEffect, "DeckardAncientBlessingsAoEDamage", "Amount", lv_deckardPlayer);
    CatalogFieldValueSetFixed(c_gameCatalogEffect, "DeckardAncientBlessingsAoEDamage", "Amount", lv_targetPlayer, lv_deckardScaling);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHDEC_gt_HeroDeckardAncientBlessingsScalingHandler_Init () {
    libHDEC_gt_HeroDeckardAncientBlessingsScalingHandler = TriggerCreate("libHDEC_gt_HeroDeckardAncientBlessingsScalingHandler_Func");
    TriggerEnable(libHDEC_gt_HeroDeckardAncientBlessingsScalingHandler, false);
    TriggerAddEventPlayerEffectUsed(libHDEC_gt_HeroDeckardAncientBlessingsScalingHandler, c_playerAny, "DeckardAncientBlessingsAllyBuffApplyBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Deckard - FortitudeOfTheFaithful - Baseline CDR
//--------------------------------------------------------------------------------------------------
bool libHDEC_gt_HeroDeckardFortitudeOfTheFaithfulBaselineCDR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cDRAmount;
    int lv_itAbility;
    unit lv_hero;
    int lv_heroIndex;
    string lv_abilLink;
    string lv_cooldownLink;
    fixed lv_currentCooldownAmount;
    fixed lv_newCooldownAmount;
    string lv_chargeLink;
    fixed lv_currentChargeAmount;
    fixed lv_newChargeAmount;

    // Automatic Variable Declarations
    int auto03D5F9AA_ae;
    const int auto03D5F9AA_ai = 1;

    // Variable Initialization
    lv_cDRAmount = -0.5;
    lv_cooldownLink = "";
    lv_chargeLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_heroIndex = libCore_gf_GetHeroIndexForUnitType(UnitGetType(lv_hero));
    auto03D5F9AA_ae = libGame_gv_players[lv_heroIndex].lv_heroData.lv_numberOfAbilities;
    lv_itAbility = 1;
    for ( ; ( (auto03D5F9AA_ai >= 0 && lv_itAbility <= auto03D5F9AA_ae) || (auto03D5F9AA_ai < 0 && lv_itAbility >= auto03D5F9AA_ae) ) ; lv_itAbility += auto03D5F9AA_ai ) {
        if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_isAffectedByCooldownReduction == true) && (libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_isHeroic == false) && (libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_isTrait == false) && (libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_isMountReplacement == false)) {
            lv_abilLink = libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_ability;
            lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.Link", UnitGetOwner(lv_hero));
            UnitModifyCooldown(lv_hero, lv_cooldownLink, lv_cDRAmount, c_cooldownOperationAdd);
            if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_usesCharges == true)) {
                lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Charge.Link", UnitGetOwner(lv_hero));
                UnitAddChargeRegenRemaining(lv_hero, lv_chargeLink, lv_cDRAmount);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHDEC_gt_HeroDeckardFortitudeOfTheFaithfulBaselineCDR_Init () {
    libHDEC_gt_HeroDeckardFortitudeOfTheFaithfulBaselineCDR = TriggerCreate("libHDEC_gt_HeroDeckardFortitudeOfTheFaithfulBaselineCDR_Func");
    TriggerEnable(libHDEC_gt_HeroDeckardFortitudeOfTheFaithfulBaselineCDR, false);
    TriggerAddEventPlayerEffectUsed(libHDEC_gt_HeroDeckardFortitudeOfTheFaithfulBaselineCDR, c_playerAny, "DeckardFortitudeOfTheFaithfulCDR");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Deckard - FortitudeOfTheFaithful - Safety in Numbers CDR
//--------------------------------------------------------------------------------------------------
bool libHDEC_gt_HeroDeckardFortitudeOfTheFaithfulSafetyinNumbersCDR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cDRAmount;
    int lv_itAbility;
    unit lv_hero;
    int lv_heroIndex;
    string lv_abilLink;
    string lv_cooldownLink;
    fixed lv_currentCooldownAmount;
    fixed lv_newCooldownAmount;
    string lv_chargeLink;
    fixed lv_currentChargeAmount;
    fixed lv_newChargeAmount;

    // Automatic Variable Declarations
    int auto0617AF22_ae;
    const int auto0617AF22_ai = 1;

    // Variable Initialization
    lv_cDRAmount = -0.5;
    lv_cooldownLink = "";
    lv_chargeLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_heroIndex = libCore_gf_GetHeroIndexForUnitType(UnitGetType(lv_hero));
    auto0617AF22_ae = libGame_gv_players[lv_heroIndex].lv_heroData.lv_numberOfAbilities;
    lv_itAbility = 1;
    for ( ; ( (auto0617AF22_ai >= 0 && lv_itAbility <= auto0617AF22_ae) || (auto0617AF22_ai < 0 && lv_itAbility >= auto0617AF22_ae) ) ; lv_itAbility += auto0617AF22_ai ) {
        if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_isAffectedByCooldownReduction == true) && (libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_isHeroic == false) && (libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_isTrait == false) && (libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_isMountReplacement == false)) {
            lv_abilLink = libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_ability;
            lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.Link", UnitGetOwner(lv_hero));
            UnitModifyCooldown(lv_hero, lv_cooldownLink, lv_cDRAmount, c_cooldownOperationAdd);
            if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_usesCharges == true)) {
                lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Charge.Link", UnitGetOwner(lv_hero));
                UnitAddChargeRegenRemaining(lv_hero, lv_chargeLink, lv_cDRAmount);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHDEC_gt_HeroDeckardFortitudeOfTheFaithfulSafetyinNumbersCDR_Init () {
    libHDEC_gt_HeroDeckardFortitudeOfTheFaithfulSafetyinNumbersCDR = TriggerCreate("libHDEC_gt_HeroDeckardFortitudeOfTheFaithfulSafetyinNumbersCDR_Func");
    TriggerEnable(libHDEC_gt_HeroDeckardFortitudeOfTheFaithfulSafetyinNumbersCDR, false);
    TriggerAddEventPlayerEffectUsed(libHDEC_gt_HeroDeckardFortitudeOfTheFaithfulSafetyinNumbersCDR, c_playerAny, "DeckardSafetyInNumbersDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Deckard - Rejuvenation Potion - Apply HoT 
//--------------------------------------------------------------------------------------------------
bool libHDEC_gt_HeroDeckardRejuvenationPotionApplyHoT_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_castingPlayer;
    unit lv_targetUnit;
    unit lv_castingUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_castingPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_castingUnit = libGame_gv_players[lv_castingPlayer].lv_heroUnit;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_castingUnit, "DeckardRejuvenationPotionBuffApply", lv_targetUnit);
    UnitCreateEffectUnit(lv_castingUnit, "DeckardRejuvenationPotionMana", lv_targetUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHDEC_gt_HeroDeckardRejuvenationPotionApplyHoT_Init () {
    libHDEC_gt_HeroDeckardRejuvenationPotionApplyHoT = TriggerCreate("libHDEC_gt_HeroDeckardRejuvenationPotionApplyHoT_Func");
    TriggerEnable(libHDEC_gt_HeroDeckardRejuvenationPotionApplyHoT, false);
    TriggerAddEventPlayerEffectUsed(libHDEC_gt_HeroDeckardRejuvenationPotionApplyHoT, c_playerAny, "DeckardRejuvenationPotionImpactSet");
}

void libHDEC_InitTriggers () {
    libHDEC_gt_HeroDeckardAncientBlessingsAoEProcHandler_Init();
    libHDEC_gt_HeroDeckardAncientBlessingsScalingHandler_Init();
    libHDEC_gt_HeroDeckardFortitudeOfTheFaithfulBaselineCDR_Init();
    libHDEC_gt_HeroDeckardFortitudeOfTheFaithfulSafetyinNumbersCDR_Init();
    libHDEC_gt_HeroDeckardRejuvenationPotionApplyHoT_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libHDEC_InitLib_completed = false;

void libHDEC_InitLib () {
    if (libHDEC_InitLib_completed) {
        return;
    }

    libHDEC_InitLib_completed = true;

    libHDEC_InitLibraries();
    libHDEC_InitVariables();
    libHDEC_InitTriggers();
}

